
STM32G4_GY91_Cyphal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011820  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000151c  08011a00  08011a00  00021a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f1c  08012f1c  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  08012f1c  08012f1c  00022f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f24  08012f24  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08012f24  08012f24  00022f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08012f30  08012f30  00022f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08012f3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  200001d4  08013110  000301d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08013110  000305c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003362c  00000000  00000000  00030247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006707  00000000  00000000  00063873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c90  00000000  00000000  00069f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000163f  00000000  00000000  0006bc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e808  00000000  00000000  0006d24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024f1d  00000000  00000000  0009ba57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010d629  00000000  00000000  000c0974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009000  00000000  00000000  001cdfa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001d6fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080119e8 	.word	0x080119e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	080119e8 	.word	0x080119e8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 8001046:	4a21      	ldr	r2, [pc, #132]	; (80010cc <MX_FDCAN1_Init+0x8c>)
 8001048:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 800104c:	2200      	movs	r2, #0
 800104e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 8001052:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001056:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 8001060:	2201      	movs	r2, #1
 8001062:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 8001066:	2201      	movs	r2, #1
 8001068:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 800106c:	2200      	movs	r2, #0
 800106e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 8001072:	2204      	movs	r2, #4
 8001074:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 8001078:	2201      	movs	r2, #1
 800107a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 800107e:	221d      	movs	r2, #29
 8001080:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 8001084:	220a      	movs	r2, #10
 8001086:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 800108a:	2204      	movs	r2, #4
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 8001090:	2201      	movs	r2, #1
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 8001096:	2202      	movs	r2, #2
 8001098:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 800109c:	2202      	movs	r2, #2
 800109e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 2;
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 80010a8:	2202      	movs	r2, #2
 80010aa:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_FDCAN1_Init+0x88>)
 80010b4:	f004 f836 	bl	8005124 <HAL_FDCAN_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80010be:	f000 fbdb 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200001f0 	.word	0x200001f0
 80010cc:	40006400 	.word	0x40006400

080010d0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b09e      	sub	sp, #120	; 0x78
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	2254      	movs	r2, #84	; 0x54
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00d f944 	bl	800e37e <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a20      	ldr	r2, [pc, #128]	; (800117c <HAL_FDCAN_MspInit+0xac>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d138      	bne.n	8001172 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001104:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001106:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800110a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4618      	mov	r0, r3
 8001112:	f007 fd89 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800111c:	f000 fbac 	bl	8001878 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_FDCAN_MspInit+0xb0>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001124:	4a16      	ldr	r2, [pc, #88]	; (8001180 <HAL_FDCAN_MspInit+0xb0>)
 8001126:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800112a:	6593      	str	r3, [r2, #88]	; 0x58
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_FDCAN_MspInit+0xb0>)
 800112e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_FDCAN_MspInit+0xb0>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	4a10      	ldr	r2, [pc, #64]	; (8001180 <HAL_FDCAN_MspInit+0xb0>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_FDCAN_MspInit+0xb0>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001150:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001154:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001162:	2309      	movs	r3, #9
 8001164:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <HAL_FDCAN_MspInit+0xb4>)
 800116e:	f004 fc5f 	bl	8005a30 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001172:	bf00      	nop
 8001174:	3778      	adds	r7, #120	; 0x78
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40006400 	.word	0x40006400
 8001180:	40021000 	.word	0x40021000
 8001184:	48000400 	.word	0x48000400

08001188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119e:	4b34      	ldr	r3, [pc, #208]	; (8001270 <MX_GPIO_Init+0xe8>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a33      	ldr	r2, [pc, #204]	; (8001270 <MX_GPIO_Init+0xe8>)
 80011a4:	f043 0320 	orr.w	r3, r3, #32
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b31      	ldr	r3, [pc, #196]	; (8001270 <MX_GPIO_Init+0xe8>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0320 	and.w	r3, r3, #32
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <MX_GPIO_Init+0xe8>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a2d      	ldr	r2, [pc, #180]	; (8001270 <MX_GPIO_Init+0xe8>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <MX_GPIO_Init+0xe8>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_GPIO_Init+0xe8>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a27      	ldr	r2, [pc, #156]	; (8001270 <MX_GPIO_Init+0xe8>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_GPIO_Init+0xe8>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_GPIO_Init+0xe8>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a21      	ldr	r2, [pc, #132]	; (8001270 <MX_GPIO_Init+0xe8>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_GPIO_Init+0xe8>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_GPIO_Init+0xe8>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <MX_GPIO_Init+0xe8>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_GPIO_Init+0xe8>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121e:	f004 fd89 	bl	8005d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2104      	movs	r1, #4
 8001226:	4813      	ldr	r0, [pc, #76]	; (8001274 <MX_GPIO_Init+0xec>)
 8001228:	f004 fd84 	bl	8005d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800122c:	2320      	movs	r3, #32
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001246:	f004 fbf3 	bl	8005a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800124a:	2304      	movs	r3, #4
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_GPIO_Init+0xec>)
 8001262:	f004 fbe5 	bl	8005a30 <HAL_GPIO_Init>

}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	; 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	48000c00 	.word	0x48000c00

08001278 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_I2C4_Init+0x74>)
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <MX_I2C4_Init+0x78>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <MX_I2C4_Init+0x74>)
 8001284:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <MX_I2C4_Init+0x7c>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_I2C4_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_I2C4_Init+0x74>)
 8001290:	2201      	movs	r2, #1
 8001292:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_I2C4_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_I2C4_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_I2C4_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_I2C4_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_I2C4_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80012b2:	480e      	ldr	r0, [pc, #56]	; (80012ec <MX_I2C4_Init+0x74>)
 80012b4:	f004 fd70 	bl	8005d98 <HAL_I2C_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80012be:	f000 fadb 	bl	8001878 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c2:	2100      	movs	r1, #0
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <MX_I2C4_Init+0x74>)
 80012c6:	f006 fe35 	bl	8007f34 <HAL_I2CEx_ConfigAnalogFilter>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80012d0:	f000 fad2 	bl	8001878 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80012d4:	2100      	movs	r1, #0
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_I2C4_Init+0x74>)
 80012d8:	f006 fe77 	bl	8007fca <HAL_I2CEx_ConfigDigitalFilter>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80012e2:	f000 fac9 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000254 	.word	0x20000254
 80012f0:	40008400 	.word	0x40008400
 80012f4:	00702991 	.word	0x00702991

080012f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0a0      	sub	sp, #128	; 0x80
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	2254      	movs	r2, #84	; 0x54
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f00d f830 	bl	800e37e <memset>
  if(i2cHandle->Instance==I2C4)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a35      	ldr	r2, [pc, #212]	; (80013f8 <HAL_I2C_MspInit+0x100>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d162      	bne.n	80013ee <HAL_I2C_MspInit+0xf6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800132c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800132e:	2300      	movs	r3, #0
 8001330:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001332:	f107 0318 	add.w	r3, r7, #24
 8001336:	4618      	mov	r0, r3
 8001338:	f007 fc76 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001342:	f000 fa99 	bl	8001878 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <HAL_I2C_MspInit+0x104>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4a2c      	ldr	r2, [pc, #176]	; (80013fc <HAL_I2C_MspInit+0x104>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <HAL_I2C_MspInit+0x104>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_I2C_MspInit+0x104>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4a26      	ldr	r2, [pc, #152]	; (80013fc <HAL_I2C_MspInit+0x104>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136a:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_I2C_MspInit+0x104>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001376:	2340      	movs	r3, #64	; 0x40
 8001378:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800137a:	2312      	movs	r3, #18
 800137c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001386:	2308      	movs	r3, #8
 8001388:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800138e:	4619      	mov	r1, r3
 8001390:	481b      	ldr	r0, [pc, #108]	; (8001400 <HAL_I2C_MspInit+0x108>)
 8001392:	f004 fb4d 	bl	8005a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139a:	2312      	movs	r3, #18
 800139c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80013a6:	2303      	movs	r3, #3
 80013a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013ae:	4619      	mov	r1, r3
 80013b0:	4814      	ldr	r0, [pc, #80]	; (8001404 <HAL_I2C_MspInit+0x10c>)
 80013b2:	f004 fb3d 	bl	8005a30 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_I2C_MspInit+0x104>)
 80013b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_I2C_MspInit+0x104>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	65d3      	str	r3, [r2, #92]	; 0x5c
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_I2C_MspInit+0x104>)
 80013c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2052      	movs	r0, #82	; 0x52
 80013d4:	f003 fda3 	bl	8004f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80013d8:	2052      	movs	r0, #82	; 0x52
 80013da:	f003 fdba 	bl	8004f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2053      	movs	r0, #83	; 0x53
 80013e4:	f003 fd9b 	bl	8004f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80013e8:	2053      	movs	r0, #83	; 0x53
 80013ea:	f003 fdb2 	bl	8004f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80013ee:	bf00      	nop
 80013f0:	3780      	adds	r7, #128	; 0x80
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40008400 	.word	0x40008400
 80013fc:	40021000 	.word	0x40021000
 8001400:	48000800 	.word	0x48000800
 8001404:	48000400 	.word	0x48000400

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b099      	sub	sp, #100	; 0x64
 800140c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140e:	f003 fc18 	bl	8004c42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001412:	f000 f989 	bl	8001728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001416:	f7ff feb7 	bl	8001188 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800141a:	f7ff fe11 	bl	8001040 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 800141e:	f7ff ff2b 	bl	8001278 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8001422:	f003 fb39 	bl	8004a98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  cyphal_can_starter(&hfdcan1);
 8001426:	48ba      	ldr	r0, [pc, #744]	; (8001710 <main+0x308>)
 8001428:	f001 fa74 	bl	8002914 <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 800142c:	48b8      	ldr	r0, [pc, #736]	; (8001710 <main+0x308>)
 800142e:	f001 fa03 	bl	8002838 <setup_cyphal>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t msg[10];
  int i = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	653b      	str	r3, [r7, #80]	; 0x50

  //uint16_t addr9250=0xD0; //0x68<<1
  uint8_t bufAG[14] = {0};
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	811a      	strh	r2, [r3, #8]
  HAL_StatusTypeDef rv;

  uint16_t sAx,sAy,sAz,sGx,sGy,sGz; //axel-gyro components
  int16_t xx;

  uint32_t last_hbeat = HAL_GetTick();
 8001446:	f003 fc61 	bl	8004d0c <HAL_GetTick>
 800144a:	64f8      	str	r0, [r7, #76]	; 0x4c
  float pos = JOINT_N;
 800144c:	4bb1      	ldr	r3, [pc, #708]	; (8001714 <main+0x30c>)
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  float vel = JOINT_N;
 8001450:	4bb0      	ldr	r3, [pc, #704]	; (8001714 <main+0x30c>)
 8001452:	647b      	str	r3, [r7, #68]	; 0x44
  float eff = JOINT_N;
 8001454:	4baf      	ldr	r3, [pc, #700]	; (8001714 <main+0x30c>)
 8001456:	643b      	str	r3, [r7, #64]	; 0x40

  float x,y,z,vx,vy,vz = 0;
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	603b      	str	r3, [r7, #0]


  MPU6050_Init(&hi2c4);
 800145e:	48ae      	ldr	r0, [pc, #696]	; (8001718 <main+0x310>)
 8001460:	f000 f9ad 	bl	80017be <MPU6050_Init>
  {

//	  	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
//
//	  	rv = HAL_I2C_IsDeviceReady(&hi2c4, 0xD0, 2, 5);
		rv = HAL_I2C_Mem_Read_IT(&hi2c4, 0xD0, 0x3B, 1, &bufAG[0], 14);
 8001464:	230e      	movs	r3, #14
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2301      	movs	r3, #1
 8001470:	223b      	movs	r2, #59	; 0x3b
 8001472:	21d0      	movs	r1, #208	; 0xd0
 8001474:	48a8      	ldr	r0, [pc, #672]	; (8001718 <main+0x310>)
 8001476:	f004 fecf 	bl	8006218 <HAL_I2C_Mem_Read_IT>
 800147a:	4603      	mov	r3, r0
 800147c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	   xx = ( bufAG[0] << 6) + (bufAG[1]>>2) + 8192; if (xx > 16383) {xx -= 16383;}; sAx=xx;
 8001480:	7e3b      	ldrb	r3, [r7, #24]
 8001482:	b29b      	uxth	r3, r3
 8001484:	019b      	lsls	r3, r3, #6
 8001486:	b29a      	uxth	r2, r3
 8001488:	7e7b      	ldrb	r3, [r7, #25]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	b2db      	uxtb	r3, r3
 800148e:	b29b      	uxth	r3, r3
 8001490:	4413      	add	r3, r2
 8001492:	b29b      	uxth	r3, r3
 8001494:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001498:	b29b      	uxth	r3, r3
 800149a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800149e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80014a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014a6:	db07      	blt.n	80014b8 <main+0xb0>
 80014a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014ac:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 80014b0:	3b3f      	subs	r3, #63	; 0x3f
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80014b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
	   xx = ( bufAG[2] << 6) + (bufAG[3]>>2) + 8192; if (xx > 16383) { xx -= 16383;}; sAy=xx;
 80014be:	7ebb      	ldrb	r3, [r7, #26]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	019b      	lsls	r3, r3, #6
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	7efb      	ldrb	r3, [r7, #27]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80014dc:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80014e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014e4:	db07      	blt.n	80014f6 <main+0xee>
 80014e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014ea:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 80014ee:	3b3f      	subs	r3, #63	; 0x3f
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80014f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014fa:	877b      	strh	r3, [r7, #58]	; 0x3a
	   xx = ( bufAG[4] << 6) + (bufAG[5]>>2) + 8192; if (xx > 16383) { xx -= 16383;}; sAz=xx;
 80014fc:	7f3b      	ldrb	r3, [r7, #28]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	019b      	lsls	r3, r3, #6
 8001502:	b29a      	uxth	r2, r3
 8001504:	7f7b      	ldrb	r3, [r7, #29]
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b29b      	uxth	r3, r3
 800150c:	4413      	add	r3, r2
 800150e:	b29b      	uxth	r3, r3
 8001510:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001514:	b29b      	uxth	r3, r3
 8001516:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800151a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800151e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001522:	db07      	blt.n	8001534 <main+0x12c>
 8001524:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001528:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 800152c:	3b3f      	subs	r3, #63	; 0x3f
 800152e:	b29b      	uxth	r3, r3
 8001530:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001534:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001538:	873b      	strh	r3, [r7, #56]	; 0x38
	   xx = ( bufAG[8] << 6) + (bufAG[9]>>2) + 8192; if (xx > 16383) { xx -= 16383;}; sGx=xx;
 800153a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800153e:	b29b      	uxth	r3, r3
 8001540:	019b      	lsls	r3, r3, #6
 8001542:	b29a      	uxth	r2, r3
 8001544:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	b2db      	uxtb	r3, r3
 800154c:	b29b      	uxth	r3, r3
 800154e:	4413      	add	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001556:	b29b      	uxth	r3, r3
 8001558:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800155c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8001560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001564:	db07      	blt.n	8001576 <main+0x16e>
 8001566:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800156a:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 800156e:	3b3f      	subs	r3, #63	; 0x3f
 8001570:	b29b      	uxth	r3, r3
 8001572:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001576:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800157a:	86fb      	strh	r3, [r7, #54]	; 0x36
	   xx = ( bufAG[10] << 6) + (bufAG[11]>>2) + 8192; if (xx > 16383) { xx -= 16383;}; sGy=xx;
 800157c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001580:	b29b      	uxth	r3, r3
 8001582:	019b      	lsls	r3, r3, #6
 8001584:	b29a      	uxth	r2, r3
 8001586:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	b2db      	uxtb	r3, r3
 800158e:	b29b      	uxth	r3, r3
 8001590:	4413      	add	r3, r2
 8001592:	b29b      	uxth	r3, r3
 8001594:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001598:	b29b      	uxth	r3, r3
 800159a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800159e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80015a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015a6:	db07      	blt.n	80015b8 <main+0x1b0>
 80015a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015ac:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 80015b0:	3b3f      	subs	r3, #63	; 0x3f
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80015b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015bc:	86bb      	strh	r3, [r7, #52]	; 0x34
	   xx = ( bufAG[12] << 6) + (bufAG[13]>>2) + 8192; if (xx > 16383) { xx -= 16383;}; sGz=xx;
 80015be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4413      	add	r3, r2
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80015e0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80015e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015e8:	db07      	blt.n	80015fa <main+0x1f2>
 80015ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015ee:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 80015f2:	3b3f      	subs	r3, #63	; 0x3f
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80015fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015fe:	867b      	strh	r3, [r7, #50]	; 0x32

	   x = (((float)(8192 - sAx))/ 163834) * 2 * (float)M_PI;
 8001600:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001602:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160e:	eddf 6a43 	vldr	s13, [pc, #268]	; 800171c <main+0x314>
 8001612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001616:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800161a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001720 <main+0x318>
 800161e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001622:	edc7 7a05 	vstr	s15, [r7, #20]
	   y = (((float)(8192 - sAy))/ 16384) * 2 * (float)M_PI;
 8001626:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001628:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001634:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001724 <main+0x31c>
 8001638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001640:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001720 <main+0x318>
 8001644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001648:	edc7 7a04 	vstr	s15, [r7, #16]
	   z = (((float)(8192 - sAz))/ 16384) * 2 * (float)M_PI;
 800164c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800164e:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165a:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001724 <main+0x31c>
 800165e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001662:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001666:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001720 <main+0x318>
 800166a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166e:	edc7 7a03 	vstr	s15, [r7, #12]
	   vx = (((float)(8192 - sGx))/ 16384) * 2 * (float)M_PI;
 8001672:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001674:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001680:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001724 <main+0x31c>
 8001684:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001688:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800168c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001720 <main+0x318>
 8001690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001694:	edc7 7a02 	vstr	s15, [r7, #8]
	   vy = (((float)(8192 - sGy))/ 16384) * 2 * (float)M_PI;
 8001698:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800169a:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001724 <main+0x31c>
 80016aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016b2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001720 <main+0x318>
 80016b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ba:	edc7 7a01 	vstr	s15, [r7, #4]
	   vz = (((float)(8192 - sGz))/ 16384) * 2 * (float)M_PI;
 80016be:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80016c0:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016cc:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001724 <main+0x31c>
 80016d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016d8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001720 <main+0x318>
 80016dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e0:	edc7 7a00 	vstr	s15, [r7]


	   send_IMU(&x, &y, &z, &vx, &vy, &vz);
 80016e4:	f107 0408 	add.w	r4, r7, #8
 80016e8:	f107 020c 	add.w	r2, r7, #12
 80016ec:	f107 0110 	add.w	r1, r7, #16
 80016f0:	f107 0014 	add.w	r0, r7, #20
 80016f4:	463b      	mov	r3, r7
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	4623      	mov	r3, r4
 80016fe:	f001 f86b 	bl	80027d8 <send_IMU>
//	   }
//
//	  sprintf(msg,"%f \n\0", x);
//	  HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));

      cyphal_loop();
 8001702:	f001 f8f9 	bl	80028f8 <cyphal_loop>
      HAL_Delay(50);
 8001706:	2032      	movs	r0, #50	; 0x32
 8001708:	f003 fb0c 	bl	8004d24 <HAL_Delay>
		rv = HAL_I2C_Mem_Read_IT(&hi2c4, 0xD0, 0x3B, 1, &bufAG[0], 14);
 800170c:	e6aa      	b.n	8001464 <main+0x5c>
 800170e:	bf00      	nop
 8001710:	200001f0 	.word	0x200001f0
 8001714:	40a00000 	.word	0x40a00000
 8001718:	20000254 	.word	0x20000254
 800171c:	481ffe80 	.word	0x481ffe80
 8001720:	40490fdb 	.word	0x40490fdb
 8001724:	46800000 	.word	0x46800000

08001728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b094      	sub	sp, #80	; 0x50
 800172c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f107 0318 	add.w	r3, r7, #24
 8001732:	2238      	movs	r2, #56	; 0x38
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f00c fe21 	bl	800e37e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800174a:	2000      	movs	r0, #0
 800174c:	f006 fc8a 	bl	8008064 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001750:	2301      	movs	r3, #1
 8001752:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001758:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175a:	2302      	movs	r3, #2
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175e:	2303      	movs	r3, #3
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001762:	2301      	movs	r3, #1
 8001764:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001766:	2328      	movs	r3, #40	; 0x28
 8001768:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800176a:	2302      	movs	r3, #2
 800176c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800176e:	2302      	movs	r3, #2
 8001770:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001772:	2302      	movs	r3, #2
 8001774:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001776:	f107 0318 	add.w	r3, r7, #24
 800177a:	4618      	mov	r0, r3
 800177c:	f006 fd26 	bl	80081cc <HAL_RCC_OscConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001786:	f000 f877 	bl	8001878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178a:	230f      	movs	r3, #15
 800178c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178e:	2303      	movs	r3, #3
 8001790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800179c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2104      	movs	r1, #4
 80017a6:	4618      	mov	r0, r3
 80017a8:	f007 f822 	bl	80087f0 <HAL_RCC_ClockConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80017b2:	f000 f861 	bl	8001878 <Error_Handler>
  }
}
 80017b6:	bf00      	nop
 80017b8:	3750      	adds	r7, #80	; 0x50
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <MPU6050_Init>:

/* USER CODE BEGIN 4 */
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80017be:	b580      	push	{r7, lr}
 80017c0:	b088      	sub	sp, #32
 80017c2:	af04      	add	r7, sp, #16
 80017c4:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rv;
    uint8_t check = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73bb      	strb	r3, [r7, #14]
    uint8_t Data = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	737b      	strb	r3, [r7, #13]

    // check device ID WHO_AM_I

    rv = HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 100);
 80017ce:	2364      	movs	r3, #100	; 0x64
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	2301      	movs	r3, #1
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	f107 030e 	add.w	r3, r7, #14
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2301      	movs	r3, #1
 80017de:	2275      	movs	r2, #117	; 0x75
 80017e0:	21d0      	movs	r1, #208	; 0xd0
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f004 fb74 	bl	8005ed0 <HAL_I2C_Mem_Read>
 80017e8:	4603      	mov	r3, r0
 80017ea:	73fb      	strb	r3, [r7, #15]

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80017ec:	7bbb      	ldrb	r3, [r7, #14]
 80017ee:	2b68      	cmp	r3, #104	; 0x68
 80017f0:	d13d      	bne.n	800186e <MPU6050_Init+0xb0>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	737b      	strb	r3, [r7, #13]
        rv = HAL_I2C_Mem_Write_IT(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1);
 80017f6:	2301      	movs	r3, #1
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	f107 030d 	add.w	r3, r7, #13
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2301      	movs	r3, #1
 8001802:	226b      	movs	r2, #107	; 0x6b
 8001804:	21d0      	movs	r1, #208	; 0xd0
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f004 fc7c 	bl	8006104 <HAL_I2C_Mem_Write_IT>
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001810:	2307      	movs	r3, #7
 8001812:	737b      	strb	r3, [r7, #13]
        rv = HAL_I2C_Mem_Write_IT(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1);
 8001814:	2301      	movs	r3, #1
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	f107 030d 	add.w	r3, r7, #13
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2301      	movs	r3, #1
 8001820:	2219      	movs	r2, #25
 8001822:	21d0      	movs	r1, #208	; 0xd0
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f004 fc6d 	bl	8006104 <HAL_I2C_Mem_Write_IT>
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800182e:	2300      	movs	r3, #0
 8001830:	737b      	strb	r3, [r7, #13]
        rv = HAL_I2C_Mem_Write_IT(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1);
 8001832:	2301      	movs	r3, #1
 8001834:	9301      	str	r3, [sp, #4]
 8001836:	f107 030d 	add.w	r3, r7, #13
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2301      	movs	r3, #1
 800183e:	221c      	movs	r2, #28
 8001840:	21d0      	movs	r1, #208	; 0xd0
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f004 fc5e 	bl	8006104 <HAL_I2C_Mem_Write_IT>
 8001848:	4603      	mov	r3, r0
 800184a:	73fb      	strb	r3, [r7, #15]

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800184c:	2300      	movs	r3, #0
 800184e:	737b      	strb	r3, [r7, #13]
        rv = HAL_I2C_Mem_Write_IT(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1);
 8001850:	2301      	movs	r3, #1
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	f107 030d 	add.w	r3, r7, #13
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2301      	movs	r3, #1
 800185c:	221b      	movs	r2, #27
 800185e:	21d0      	movs	r1, #208	; 0xd0
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f004 fc4f 	bl	8006104 <HAL_I2C_Mem_Write_IT>
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
        return 0;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <MPU6050_Init+0xb2>
    }
    return 1;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001880:	e7fe      	b.n	8001880 <Error_Handler+0x8>

08001882 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bf0c      	ite	eq
 80018d2:	2301      	moveq	r3, #1
 80018d4:	2300      	movne	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d019      	beq.n	8001910 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3308      	adds	r3, #8
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf0c      	ite	eq
 80018fa:	2301      	moveq	r3, #1
 80018fc:	2300      	movne	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	330c      	adds	r3, #12
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	4798      	blx	r3
        }
    }
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	2203      	movs	r2, #3
 800195e:	4798      	blx	r3
    }
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf0c      	ite	eq
 800197a:	2301      	moveq	r3, #1
 800197c:	2300      	movne	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ffd4 	bl	8001944 <_ZNSt14_Function_baseD1Ev>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_ZNSt8functionIFvvEED1Ev>:
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ffc7 	bl	8001944 <_ZNSt14_Function_baseD1Ev>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68b9      	ldr	r1, [r7, #8]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 f875 	bl	8002ac0 <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3310      	adds	r3, #16
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4618      	mov	r0, r3
 80019de:	f001 f89a 	bl	8002b16 <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	08012490 	.word	0x08012490

08001a18 <_Z7alloc_fP14CanardInstancej>:
#include "cyphal/definitions.h"
#include "libcanard/canard.h"

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8001a22:	480d      	ldr	r0, [pc, #52]	; (8001a58 <_Z7alloc_fP14CanardInstancej+0x40>)
 8001a24:	f001 f8a2 	bl	8002b6c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f083 0301 	eor.w	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f00b fc0d 	bl	800d254 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 8001a3a:	4807      	ldr	r0, [pc, #28]	; (8001a58 <_Z7alloc_fP14CanardInstancej+0x40>)
 8001a3c:	f001 f8a7 	bl	8002b8e <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8001a40:	4603      	mov	r3, r0
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	6814      	ldr	r4, [r2, #0]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	47a0      	blx	r4
 8001a4e:	4603      	mov	r3, r0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	20000470 	.word	0x20000470

08001a5c <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8001a66:	480d      	ldr	r0, [pc, #52]	; (8001a9c <_Z6free_fP14CanardInstancePv+0x40>)
 8001a68:	f001 f880 	bl	8002b6c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f083 0301 	eor.w	r3, r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f00b fbeb 	bl	800d254 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 8001a7e:	4807      	ldr	r0, [pc, #28]	; (8001a9c <_Z6free_fP14CanardInstancePv+0x40>)
 8001a80:	f001 f885 	bl	8002b8e <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8001a84:	4603      	mov	r3, r0
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	3204      	adds	r2, #4
 8001a8a:	6814      	ldr	r4, [r2, #0]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	47a0      	blx	r4
 8001a94:	bf00      	nop
}
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd90      	pop	{r4, r7, pc}
 8001a9c:	20000470 	.word	0x20000470

08001aa0 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;

    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
        WIRE_MTU(wire_mtu),
        CANARD_MTU(canard_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 8001aae:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	330c      	adds	r3, #12
 8001ac8:	6839      	ldr	r1, [r7, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f00b f8b6 	bl	800cc3c <canardTxInit>
        utilities(utilities)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	63da      	str	r2, [r3, #60]	; 0x3c
    {};
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	08012474 	.word	0x08012474

08001ae4 <_ZN15CyphalInterfaceC1EhR13UtilityConfig>:

class CyphalInterface {
private:
    const CanardNodeID node_id;
    std::unique_ptr<AbstractCANProvider> provider;
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config) : node_id(node_id), utilities(config) {};
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	460b      	mov	r3, r1
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	72fb      	strb	r3, [r7, #11]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	7afa      	ldrb	r2, [r7, #11]
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3304      	adds	r3, #4
 8001afc:	4618      	mov	r0, r3
 8001afe:	f001 f879 	bl	8002bf4 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEv>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2248      	movs	r2, #72	; 0x48
 8001b2c:	2140      	movs	r1, #64	; 0x40
 8001b2e:	f7ff ffb7 	bl	8001aa0 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	08012630 	.word	0x08012630

08001b4c <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include "../allocator.h"

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff44 	bl	80019ec <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 8001b64:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	08012514 	.word	0x08012514

08001b78 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d201      	bcs.n	8001b8e <nunavutChooseMin+0x16>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	e000      	b.n	8001b90 <nunavutChooseMin+0x18>
 8001b8e:	683b      	ldr	r3, [r7, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	6978      	ldr	r0, [r7, #20]
 8001bb2:	f7ff ffe1 	bl	8001b78 <nunavutChooseMin>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 8001bbe:	6939      	ldr	r1, [r7, #16]
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ffd9 	bl	8001b78 <nunavutChooseMin>
 8001bc6:	4603      	mov	r3, r0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b092      	sub	sp, #72	; 0x48
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 8001bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d145      	bne.n	8001c74 <nunavutCopyBits+0xa4>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d140      	bne.n	8001c74 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	08db      	lsrs	r3, r3, #3
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8001bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bfa:	08db      	lsrs	r3, r3, #3
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4413      	add	r3, r2
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8001c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c12:	f00c fb9a 	bl	800e34a <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8001c22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 808a 	beq.w	8001d40 <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8001c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c30:	4413      	add	r3, r2
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8001c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c38:	4413      	add	r3, r2
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8001c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c40:	2201      	movs	r2, #1
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c56:	43db      	mvns	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	7819      	ldrb	r1, [r3, #0]
 8001c62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c66:	400b      	ands	r3, r1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c70:	701a      	strb	r2, [r3, #0]
        }
    }
 8001c72:	e065      	b.n	8001d40 <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8001c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c7e:	647b      	str	r3, [r7, #68]	; 0x44
        size_t       dst_off  = dst_offset_bits;
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t last_bit = src_off + length_bits;
 8001c84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 8001c8c:	e053      	b.n	8001d36 <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 8001c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 8001c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 8001ca2:	7dfa      	ldrb	r2, [r7, #23]
 8001ca4:	7dbb      	ldrb	r3, [r7, #22]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d901      	bls.n	8001cae <nunavutCopyBits+0xde>
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
 8001cac:	e000      	b.n	8001cb0 <nunavutCopyBits+0xe0>
 8001cae:	7dbb      	ldrb	r3, [r7, #22]
 8001cb0:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 8001cb2:	7d7b      	ldrb	r3, [r7, #21]
 8001cb4:	f1c3 0008 	rsb	r0, r3, #8
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7ff ff5a 	bl	8001b78 <nunavutChooseMin>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 8001cc8:	7d3b      	ldrb	r3, [r7, #20]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	1e5a      	subs	r2, r3, #1
 8001cd2:	7dbb      	ldrb	r3, [r7, #22]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 8001cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cdc:	08db      	lsrs	r3, r3, #3
 8001cde:	6a3a      	ldr	r2, [r7, #32]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
 8001ce8:	fa42 f303 	asr.w	r3, r2, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	7dbb      	ldrb	r3, [r7, #22]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8001cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cfa:	08db      	lsrs	r3, r3, #3
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	4413      	add	r3, r2
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	7cfb      	ldrb	r3, [r7, #19]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4013      	ands	r3, r2
 8001d0a:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8001d0c:	7cba      	ldrb	r2, [r7, #18]
 8001d0e:	7cfb      	ldrb	r3, [r7, #19]
 8001d10:	4013      	ands	r3, r2
 8001d12:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8001d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d16:	08db      	lsrs	r3, r3, #3
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	7c79      	ldrb	r1, [r7, #17]
 8001d1e:	7c3a      	ldrb	r2, [r7, #16]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]
            src_off += size;
 8001d26:	7d3b      	ldrb	r3, [r7, #20]
 8001d28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d2a:	4413      	add	r3, r2
 8001d2c:	647b      	str	r3, [r7, #68]	; 0x44
            dst_off += size;
 8001d2e:	7d3b      	ldrb	r3, [r7, #20]
 8001d30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d32:	4413      	add	r3, r2
 8001d34:	643b      	str	r3, [r7, #64]	; 0x40
        while (last_bit > src_off)
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d8a7      	bhi.n	8001c8e <nunavutCopyBits+0xbe>
        }

    }
}
 8001d3e:	e000      	b.n	8001d42 <nunavutCopyBits+0x172>
    }
 8001d40:	bf00      	nop
}
 8001d42:	bf00      	nop
 8001d44:	3748      	adds	r7, #72	; 0x48
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b088      	sub	sp, #32
 8001d4e:	af02      	add	r7, sp, #8
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	00da      	lsls	r2, r3, #3
 8001d5a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	440b      	add	r3, r1
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d202      	bcs.n	8001d6c <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001d66:	f06f 0302 	mvn.w	r3, #2
 8001d6a:	e010      	b.n	8001d8e <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8001d6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d70:	2140      	movs	r1, #64	; 0x40
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff00 	bl	8001b78 <nunavutChooseMin>
 8001d78:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff ff22 	bl	8001bd0 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b088      	sub	sp, #32
 8001d9a:	af02      	add	r7, sp, #8
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	2120      	movs	r1, #32
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fee5 	bl	8001b78 <nunavutChooseMin>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	68b8      	ldr	r0, [r7, #8]
 8001db6:	f7ff fef1 	bl	8001b9c <nunavutSaturateBufferFragmentBitLength>
 8001dba:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8001dc0:	f107 0010 	add.w	r0, r7, #16
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	2100      	movs	r1, #0
 8001dce:	f7ff feff 	bl	8001bd0 <nunavutCopyBits>
    return val;
 8001dd2:	693b      	ldr	r3, [r7, #16]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 8001de8:	2320      	movs	r3, #32
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff ffd1 	bl	8001d96 <nunavutGetU32>
 8001df4:	4603      	mov	r3, r0
 8001df6:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	ee07 3a90 	vmov	s15, r3
}
 8001dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d009      	beq.n	8001e2e <uavcan_node_Health_1_0_deserialize_+0x26>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <uavcan_node_Health_1_0_deserialize_+0x26>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <uavcan_node_Health_1_0_deserialize_+0x2c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001e2e:	f06f 0301 	mvn.w	r3, #1
 8001e32:	e030      	b.n	8001e96 <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <uavcan_node_Health_1_0_deserialize_+0x98>)
 8001e3c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3302      	adds	r3, #2
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d30a      	bcc.n	8001e6e <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	08db      	lsrs	r3, r3, #3
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	4413      	add	r3, r2
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e002      	b.n	8001e74 <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3302      	adds	r3, #2
 8001e78:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3307      	adds	r3, #7
 8001e7e:	f023 0307 	bic.w	r3, r3, #7
 8001e82:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8001e84:	69b9      	ldr	r1, [r7, #24]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff fe76 	bl	8001b78 <nunavutChooseMin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	08da      	lsrs	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	08012400 	.word	0x08012400

08001ea4 <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <uavcan_node_Mode_1_0_deserialize_+0x26>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <uavcan_node_Mode_1_0_deserialize_+0x26>
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <uavcan_node_Mode_1_0_deserialize_+0x2c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001eca:	f06f 0301 	mvn.w	r3, #1
 8001ece:	e030      	b.n	8001f32 <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <uavcan_node_Mode_1_0_deserialize_+0x98>)
 8001ed8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3303      	adds	r3, #3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d30a      	bcc.n	8001f0a <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	08db      	lsrs	r3, r3, #3
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	e002      	b.n	8001f10 <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3303      	adds	r3, #3
 8001f14:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3307      	adds	r3, #7
 8001f1a:	f023 0307 	bic.w	r3, r3, #7
 8001f1e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8001f20:	69b9      	ldr	r1, [r7, #24]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff fe28 	bl	8001b78 <nunavutChooseMin>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3720      	adds	r7, #32
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	08012400 	.word	0x08012400

08001f40 <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001f66:	f06f 0301 	mvn.w	r3, #1
 8001f6a:	e089      	b.n	8002080 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001f72:	4b45      	ldr	r3, [pc, #276]	; (8002088 <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 8001f74:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 8001f86:	2320      	movs	r3, #32
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8c:	68b8      	ldr	r0, [r7, #8]
 8001f8e:	f7ff ff02 	bl	8001d96 <nunavutGetU32>
 8001f92:	4602      	mov	r2, r0
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	3320      	adds	r3, #32
 8001f9c:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3307      	adds	r3, #7
 8001fa2:	f023 0307 	bic.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	08db      	lsrs	r3, r3, #3
 8001fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fde2 	bl	8001b78 <nunavutChooseMin>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f107 0214 	add.w	r2, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7ff ff1b 	bl	8001e08 <uavcan_node_Health_1_0_deserialize_>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 8001fd6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	da02      	bge.n	8001fe4 <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 8001fde:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001fe2:	e04d      	b.n	8002080 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	4413      	add	r3, r2
 8001fec:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3307      	adds	r3, #7
 8001ff2:	f023 0307 	bic.w	r3, r3, #7
 8001ff6:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	08db      	lsrs	r3, r3, #3
 8001ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fdba 	bl	8001b78 <nunavutChooseMin>
 8002004:	4602      	mov	r2, r0
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	4413      	add	r3, r2
 8002018:	f107 0210 	add.w	r2, r7, #16
 800201c:	4619      	mov	r1, r3
 800201e:	f7ff ff41 	bl	8001ea4 <uavcan_node_Mode_1_0_deserialize_>
 8002022:	4603      	mov	r3, r0
 8002024:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 8002026:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800202a:	2b00      	cmp	r3, #0
 800202c:	da02      	bge.n	8002034 <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 800202e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002032:	e025      	b.n	8002080 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	4413      	add	r3, r2
 800203c:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3308      	adds	r3, #8
 8002042:	6a3a      	ldr	r2, [r7, #32]
 8002044:	429a      	cmp	r2, r3
 8002046:	d307      	bcc.n	8002058 <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	4413      	add	r3, r2
 8002050:	781a      	ldrb	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	719a      	strb	r2, [r3, #6]
 8002056:	e002      	b.n	800205e <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3308      	adds	r3, #8
 8002062:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	3307      	adds	r3, #7
 8002068:	f023 0307 	bic.w	r3, r3, #7
 800206c:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800206e:	6a39      	ldr	r1, [r7, #32]
 8002070:	69f8      	ldr	r0, [r7, #28]
 8002072:	f7ff fd81 	bl	8001b78 <nunavutChooseMin>
 8002076:	4603      	mov	r3, r0
 8002078:	08da      	lsrs	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3728      	adds	r7, #40	; 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	08012400 	.word	0x08012400

0800208c <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80020b2:	f06f 0301 	mvn.w	r3, #1
 80020b6:	e027      	b.n	8002108 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 80020c0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	69f9      	ldr	r1, [r7, #28]
 80020d6:	68b8      	ldr	r0, [r7, #8]
 80020d8:	f7ff fe80 	bl	8001ddc <nunavutGetF32>
 80020dc:	eef0 7a40 	vmov.f32	s15, s0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	3320      	adds	r3, #32
 80020ea:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3307      	adds	r3, #7
 80020f0:	f023 0307 	bic.w	r3, r3, #7
 80020f4:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	6978      	ldr	r0, [r7, #20]
 80020fa:	f7ff fd3d 	bl	8001b78 <nunavutChooseMin>
 80020fe:	4603      	mov	r3, r0
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	08012400 	.word	0x08012400

08002114 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800213a:	f06f 0301 	mvn.w	r3, #1
 800213e:	e027      	b.n	8002190 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 8002148:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	69f9      	ldr	r1, [r7, #28]
 800215e:	68b8      	ldr	r0, [r7, #8]
 8002160:	f7ff fe3c 	bl	8001ddc <nunavutGetF32>
 8002164:	eef0 7a40 	vmov.f32	s15, s0
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3320      	adds	r3, #32
 8002172:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3307      	adds	r3, #7
 8002178:	f023 0307 	bic.w	r3, r3, #7
 800217c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	6978      	ldr	r0, [r7, #20]
 8002182:	f7ff fcf9 	bl	8001b78 <nunavutChooseMin>
 8002186:	4603      	mov	r3, r0
 8002188:	08da      	lsrs	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3720      	adds	r7, #32
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	08012400 	.word	0x08012400

0800219c <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80021c2:	f06f 0301 	mvn.w	r3, #1
 80021c6:	e027      	b.n	8002218 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 80021d0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	69f9      	ldr	r1, [r7, #28]
 80021e6:	68b8      	ldr	r0, [r7, #8]
 80021e8:	f7ff fdf8 	bl	8001ddc <nunavutGetF32>
 80021ec:	eef0 7a40 	vmov.f32	s15, s0
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3320      	adds	r3, #32
 80021fa:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3307      	adds	r3, #7
 8002200:	f023 0307 	bic.w	r3, r3, #7
 8002204:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	6978      	ldr	r0, [r7, #20]
 800220a:	f7ff fcb5 	bl	8001b78 <nunavutChooseMin>
 800220e:	4603      	mov	r3, r0
 8002210:	08da      	lsrs	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	08012400 	.word	0x08012400

08002224 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08c      	sub	sp, #48	; 0x30
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d006      	beq.n	800224a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800224a:	f06f 0301 	mvn.w	r3, #1
 800224e:	e090      	b.n	8002372 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002256:	4b49      	ldr	r3, [pc, #292]	; (800237c <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 8002258:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t offset_bits = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	08db      	lsrs	r3, r3, #3
 800226e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fc81 	bl	8001b78 <nunavutChooseMin>
 8002276:	4602      	mov	r2, r0
 8002278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 800227e:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	4413      	add	r3, r2
 8002288:	f107 021c 	add.w	r2, r7, #28
 800228c:	4619      	mov	r1, r3
 800228e:	f7ff fefd 	bl	800208c <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 8002292:	4603      	mov	r3, r0
 8002294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (_err6_ < 0)
 8002298:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800229c:	2b00      	cmp	r3, #0
 800229e:	da02      	bge.n	80022a6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 80022a0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80022a4:	e065      	b.n	8002372 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	4413      	add	r3, r2
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	3307      	adds	r3, #7
 80022b4:	f023 0307 	bic.w	r3, r3, #7
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	08db      	lsrs	r3, r3, #3
 80022be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fc59 	bl	8001b78 <nunavutChooseMin>
 80022c6:	4602      	mov	r2, r0
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	4413      	add	r3, r2
 80022da:	f107 0218 	add.w	r2, r7, #24
 80022de:	4619      	mov	r1, r3
 80022e0:	f7ff ff5c 	bl	800219c <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err7_ < 0)
 80022ea:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da02      	bge.n	80022f8 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 80022f2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80022f6:	e03c      	b.n	8002372 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fe:	4413      	add	r3, r2
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	3307      	adds	r3, #7
 8002306:	f023 0307 	bic.w	r3, r3, #7
 800230a:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	08db      	lsrs	r3, r3, #3
 8002310:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fc30 	bl	8001b78 <nunavutChooseMin>
 8002318:	4602      	mov	r2, r0
 800231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	4413      	add	r3, r2
 800232e:	f107 0214 	add.w	r2, r7, #20
 8002332:	4619      	mov	r1, r3
 8002334:	f7ff feee 	bl	8002114 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 8002338:	4603      	mov	r3, r0
 800233a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err8_ < 0)
 800233e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8002342:	2b00      	cmp	r3, #0
 8002344:	da02      	bge.n	800234c <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 8002346:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800234a:	e012      	b.n	8002372 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002352:	4413      	add	r3, r2
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	3307      	adds	r3, #7
 800235a:	f023 0307 	bic.w	r3, r3, #7
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002364:	f7ff fc08 	bl	8001b78 <nunavutChooseMin>
 8002368:	4603      	mov	r3, r0
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3730      	adds	r7, #48	; 0x30
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	08012400 	.word	0x08012400

08002380 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_(
    const uavcan_si_unit_angular_velocity_Vector3_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af04      	add	r7, sp, #16
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x1e>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x1e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800239e:	f06f 0301 	mvn.w	r3, #1
 80023a2:	e042      	b.n	800242a <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 96UL)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	2b5f      	cmp	r3, #95	; 0x5f
 80023b0:	d802      	bhi.n	80023b8 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80023b2:	f06f 0302 	mvn.w	r3, #2
 80023b6:	e038      	b.n	800242a <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 3UL * 32UL, &obj->radian_per_second[0], 0U);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	9200      	str	r2, [sp, #0]
 80023c2:	2260      	movs	r2, #96	; 0x60
 80023c4:	69f9      	ldr	r1, [r7, #28]
 80023c6:	68b8      	ldr	r0, [r7, #8]
 80023c8:	f7ff fc02 	bl	8001bd0 <nunavutCopyBits>
        offset_bits += 3UL * 32UL;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	3360      	adds	r3, #96	; 0x60
 80023d0:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d021      	beq.n	8002420 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f1c3 0308 	rsb	r3, r3, #8
 80023ea:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	9302      	str	r3, [sp, #8]
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9cd 2300 	strd	r2, r3, [sp]
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	68b8      	ldr	r0, [r7, #8]
 8002402:	f7ff fca2 	bl	8001d4a <nunavutSetUxx>
 8002406:	4603      	mov	r3, r0
 8002408:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800240a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800240e:	2b00      	cmp	r3, #0
 8002410:	da02      	bge.n	8002418 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x98>
        {
            return _err0_;
 8002412:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002416:	e008      	b.n	800242a <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	4413      	add	r3, r2
 800241e:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <uavcan_si_unit_velocity_Vector3_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_velocity_Vector3_1_0_serialize_(
    const uavcan_si_unit_velocity_Vector3_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b08c      	sub	sp, #48	; 0x30
 8002436:	af04      	add	r7, sp, #16
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x1e>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x1e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002450:	f06f 0301 	mvn.w	r3, #1
 8002454:	e042      	b.n	80024dc <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 96UL)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	2b5f      	cmp	r3, #95	; 0x5f
 8002462:	d802      	bhi.n	800246a <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002464:	f06f 0302 	mvn.w	r3, #2
 8002468:	e038      	b.n	80024dc <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 3UL * 32UL, &obj->meter_per_second[0], 0U);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	9200      	str	r2, [sp, #0]
 8002474:	2260      	movs	r2, #96	; 0x60
 8002476:	69f9      	ldr	r1, [r7, #28]
 8002478:	68b8      	ldr	r0, [r7, #8]
 800247a:	f7ff fba9 	bl	8001bd0 <nunavutCopyBits>
        offset_bits += 3UL * 32UL;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3360      	adds	r3, #96	; 0x60
 8002482:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	2b00      	cmp	r3, #0
 800248c:	d021      	beq.n	80024d2 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f1c3 0308 	rsb	r3, r3, #8
 800249c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800249e:	7dfb      	ldrb	r3, [r7, #23]
 80024a0:	9302      	str	r3, [sp, #8]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9cd 2300 	strd	r2, r3, [sp]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	69b9      	ldr	r1, [r7, #24]
 80024b2:	68b8      	ldr	r0, [r7, #8]
 80024b4:	f7ff fc49 	bl	8001d4a <nunavutSetUxx>
 80024b8:	4603      	mov	r3, r0
 80024ba:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80024bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	da02      	bge.n	80024ca <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x98>
        {
            return _err0_;
 80024c4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80024c8:	e008      	b.n	80024dc <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	4413      	add	r3, r2
 80024d0:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	08da      	lsrs	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_(
    const reg_udral_physics_kinematics_cartesian_Twist_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08e      	sub	sp, #56	; 0x38
 80024e8:	af04      	add	r7, sp, #16
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x1e>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x1e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002502:	f06f 0301 	mvn.w	r3, #1
 8002506:	e094      	b.n	8002632 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 192UL)
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	2bbf      	cmp	r3, #191	; 0xbf
 8002514:	d802      	bhi.n	800251c <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002516:	f06f 0302 	mvn.w	r3, #2
 800251a:	e08a      	b.n	8002632 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.si.unit.velocity.Vector3.1.0 linear
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 12UL;  // Nested object (max) size, in bytes.
 8002520:	230c      	movs	r3, #12
 8002522:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_velocity_Vector3_1_0_serialize_(
 8002524:	68f8      	ldr	r0, [r7, #12]
            &obj->linear, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_velocity_Vector3_1_0_serialize_(
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	4413      	add	r3, r2
 800252e:	f107 0214 	add.w	r2, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	f7ff ff7d 	bl	8002432 <uavcan_si_unit_velocity_Vector3_1_0_serialize_>
 8002538:	4603      	mov	r3, r0
 800253a:	77fb      	strb	r3, [r7, #31]
        if (_err0_ < 0)
 800253c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002540:	2b00      	cmp	r3, #0
 8002542:	da02      	bge.n	800254a <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x66>
        {
            return _err0_;
 8002544:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002548:	e073      	b.n	8002632 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 96ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002550:	4413      	add	r3, r2
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	2b00      	cmp	r3, #0
 800255c:	d021      	beq.n	80025a2 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0xbe>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f1c3 0308 	rsb	r3, r3, #8
 800256c:	77bb      	strb	r3, [r7, #30]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800256e:	7fbb      	ldrb	r3, [r7, #30]
 8002570:	9302      	str	r3, [sp, #8]
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	e9cd 2300 	strd	r2, r3, [sp]
 800257e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002580:	6a39      	ldr	r1, [r7, #32]
 8002582:	68b8      	ldr	r0, [r7, #8]
 8002584:	f7ff fbe1 	bl	8001d4a <nunavutSetUxx>
 8002588:	4603      	mov	r3, r0
 800258a:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 800258c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002590:	2b00      	cmp	r3, #0
 8002592:	da02      	bge.n	800259a <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0xb6>
        {
            return _err1_;
 8002594:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002598:	e04b      	b.n	8002632 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        offset_bits += _pad0_;
 800259a:	7fbb      	ldrb	r3, [r7, #30]
 800259c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259e:	4413      	add	r3, r2
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.si.unit.angular_velocity.Vector3.1.0 angular
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 12UL;  // Nested object (max) size, in bytes.
 80025a2:	230c      	movs	r3, #12
 80025a4:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_(
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f103 000c 	add.w	r0, r3, #12
            &obj->angular, &buffer[offset_bits / 8U], &_size_bytes1_);
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_(
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	4413      	add	r3, r2
 80025b4:	f107 0210 	add.w	r2, r7, #16
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7ff fee1 	bl	8002380 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_>
 80025be:	4603      	mov	r3, r0
 80025c0:	773b      	strb	r3, [r7, #28]
        if (_err2_ < 0)
 80025c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	da02      	bge.n	80025d0 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0xec>
        {
            return _err2_;
 80025ca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80025ce:	e030      	b.n	8002632 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 96ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d6:	4413      	add	r3, r2
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d021      	beq.n	8002628 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x144>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f1c3 0308 	rsb	r3, r3, #8
 80025f2:	76fb      	strb	r3, [r7, #27]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 80025f4:	7efb      	ldrb	r3, [r7, #27]
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e9cd 2300 	strd	r2, r3, [sp]
 8002604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002606:	6a39      	ldr	r1, [r7, #32]
 8002608:	68b8      	ldr	r0, [r7, #8]
 800260a:	f7ff fb9e 	bl	8001d4a <nunavutSetUxx>
 800260e:	4603      	mov	r3, r0
 8002610:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8002612:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002616:	2b00      	cmp	r3, #0
 8002618:	da02      	bge.n	8002620 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x13c>
        {
            return _err3_;
 800261a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800261e:	e008      	b.n	8002632 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        offset_bits += _pad1_;
 8002620:	7efb      	ldrb	r3, [r7, #27]
 8002622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002624:	4413      	add	r3, r2
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 192ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3728      	adds	r7, #40	; 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fb06 	bl	8002c58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
      { }
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <_Z13error_handlerv>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 8002672:	b580      	push	{r7, lr}
 8002674:	af00      	add	r7, sp, #0
 8002676:	f7ff f8ff 	bl	8001878 <Error_Handler>
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}

0800267e <_Z9micros_64v>:
// Тут не нужен точный таймер, поэтому так
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 800267e:	b5b0      	push	{r4, r5, r7, lr}
 8002680:	af00      	add	r7, sp, #0
 8002682:	f002 fb43 	bl	8004d0c <HAL_GetTick>
 8002686:	4603      	mov	r3, r0
 8002688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800268c:	fb02 f303 	mul.w	r3, r2, r3
 8002690:	2200      	movs	r2, #0
 8002692:	461c      	mov	r4, r3
 8002694:	4615      	mov	r5, r2
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	bdb0      	pop	{r4, r5, r7, pc}

080026a0 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	1d1a      	adds	r2, r3, #4
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	3304      	adds	r3, #4
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f000 fb3d 	bl	8002d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ffdf 	bl	80026a0 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff9f 	bl	800263a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 8002712:	687c      	ldr	r4, [r7, #4]
 8002714:	f107 0308 	add.w	r3, r7, #8
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ffd6 	bl	80026cc <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8002720:	f107 0308 	add.w	r3, r7, #8
 8002724:	f641 5255 	movw	r2, #7509	; 0x1d55
 8002728:	4619      	mov	r1, r3
 800272a:	4620      	mov	r0, r4
 800272c:	f000 fb1d 	bl	8002d6a <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8002730:	f107 0308 	add.w	r3, r7, #8
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ffd9 	bl	80026ec <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 800273a:	4a04      	ldr	r2, [pc, #16]	; (800274c <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bd90      	pop	{r4, r7, pc}
 800274a:	bf00      	nop
 800274c:	08012448 	.word	0x08012448

08002750 <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800275c:	2120      	movs	r1, #32
 800275e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002762:	f003 faff 	bl	8005d64 <HAL_GPIO_TogglePin>
    }
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

HBeatReader* h_reader;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 800277a:	687c      	ldr	r4, [r7, #4]
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ffa2 	bl	80026cc <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8002788:	f107 0308 	add.w	r3, r7, #8
 800278c:	f240 4265 	movw	r2, #1125	; 0x465
 8002790:	4619      	mov	r1, r3
 8002792:	4620      	mov	r0, r4
 8002794:	f000 fb07 	bl	8002da6 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8002798:	f107 0308 	add.w	r3, r7, #8
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ffa5 	bl	80026ec <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80027a2:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd90      	pop	{r4, r7, pc}
 80027b2:	bf00      	nop
 80027b4:	08012428 	.word	0x08012428

080027b8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80027c4:	2104      	movs	r1, #4
 80027c6:	4803      	ldr	r0, [pc, #12]	; (80027d4 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x1c>)
 80027c8:	f003 facc 	bl	8005d64 <HAL_GPIO_TogglePin>
    }
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	48000c00 	.word	0x48000c00

080027d8 <send_IMU>:
		&int_transfer_id
	);
}

void send_IMU(float* av_1, float* av_2, float* av_3, float* aa_1, float* aa_2, float* aa_3)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]
	static uint8_t twist_buffer[Twist::buffer_size];
	static CanardTransferID int_transfer_id = 0;
	reg_udral_physics_kinematics_cartesian_Twist_0_1 twist_msg =
	{
			.linear = {*av_1, *av_2, *av_3},
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
			.angular = {*aa_1, *aa_2, *aa_3}
	};
 80027ea:	613b      	str	r3, [r7, #16]
			.linear = {*av_1, *av_2, *av_3},
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	681b      	ldr	r3, [r3, #0]
	};
 80027f0:	617b      	str	r3, [r7, #20]
			.linear = {*av_1, *av_2, *av_3},
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
	};
 80027f6:	61bb      	str	r3, [r7, #24]
			.angular = {*aa_1, *aa_2, *aa_3}
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
	};
 80027fc:	61fb      	str	r3, [r7, #28]
			.angular = {*aa_1, *aa_2, *aa_3}
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	681b      	ldr	r3, [r3, #0]
	};
 8002802:	623b      	str	r3, [r7, #32]
			.angular = {*aa_1, *aa_2, *aa_3}
 8002804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002806:	681b      	ldr	r3, [r3, #0]
	};
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
    interface->send_cyphal_default_msg<Twist>(
 800280a:	4808      	ldr	r0, [pc, #32]	; (800282c <send_IMU+0x54>)
 800280c:	f000 fae9 	bl	8002de2 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002810:	f107 0110 	add.w	r1, r7, #16
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <send_IMU+0x58>)
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	f240 5339 	movw	r3, #1337	; 0x539
 800281c:	4a05      	ldr	r2, [pc, #20]	; (8002834 <send_IMU+0x5c>)
 800281e:	f000 faec 	bl	8002dfa <_ZNK15CyphalInterface23send_cyphal_default_msgI5TwistEEvPNT_4TypeEPhtS5_>
		&twist_msg,
		twist_buffer,
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}
 8002822:	bf00      	nop
 8002824:	3728      	adds	r7, #40	; 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000300 	.word	0x20000300
 8002830:	20000348 	.word	0x20000348
 8002834:	20000330 	.word	0x20000330

08002838 <setup_cyphal>:
	);
    uptime += 1;

}

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 8002838:	b5b0      	push	{r4, r5, r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af02      	add	r7, sp, #8
 800283e:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 8002840:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <setup_cyphal+0xac>)
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	2105      	movs	r1, #5
 800284c:	4826      	ldr	r0, [pc, #152]	; (80028e8 <setup_cyphal+0xb0>)
 800284e:	f000 faee 	bl	8002e2e <_ZN15CyphalInterface6createI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 8002852:	4602      	mov	r2, r0
 8002854:	f107 0308 	add.w	r3, r7, #8
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fb28 	bl	8002eb0 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 8002860:	f107 0308 	add.w	r3, r7, #8
 8002864:	4619      	mov	r1, r3
 8002866:	4821      	ldr	r0, [pc, #132]	; (80028ec <setup_cyphal+0xb4>)
 8002868:	f000 fb31 	bl	8002ece <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 800286c:	f107 0308 	add.w	r3, r7, #8
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff3b 	bl	80026ec <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 8002876:	f107 0310 	add.w	r3, r7, #16
 800287a:	491c      	ldr	r1, [pc, #112]	; (80028ec <setup_cyphal+0xb4>)
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff25 	bl	80026cc <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8002882:	f107 0510 	add.w	r5, r7, #16
 8002886:	f44f 700e 	mov.w	r0, #568	; 0x238
 800288a:	f00a fc9e 	bl	800d1ca <_Znwj>
 800288e:	4603      	mov	r3, r0
 8002890:	461c      	mov	r4, r3
 8002892:	4629      	mov	r1, r5
 8002894:	4620      	mov	r0, r4
 8002896:	f7ff ff37 	bl	8002708 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <setup_cyphal+0xb8>)
 800289c:	601c      	str	r4, [r3, #0]
 800289e:	f107 0310 	add.w	r3, r7, #16
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff22 	bl	80026ec <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 80028a8:	f107 0318 	add.w	r3, r7, #24
 80028ac:	490f      	ldr	r1, [pc, #60]	; (80028ec <setup_cyphal+0xb4>)
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff0c 	bl	80026cc <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80028b4:	f107 0518 	add.w	r5, r7, #24
 80028b8:	f44f 700e 	mov.w	r0, #568	; 0x238
 80028bc:	f00a fc85 	bl	800d1ca <_Znwj>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461c      	mov	r4, r3
 80028c4:	4629      	mov	r1, r5
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7ff ff52 	bl	8002770 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <setup_cyphal+0xbc>)
 80028ce:	601c      	str	r4, [r3, #0]
 80028d0:	f107 0318 	add.w	r3, r7, #24
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff09 	bl	80026ec <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 80028da:	bf00      	nop
 80028dc:	3720      	adds	r7, #32
 80028de:	46bd      	mov	sp, r7
 80028e0:	bdb0      	pop	{r4, r5, r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000308 	.word	0x20000308
 80028e8:	200002a8 	.word	0x200002a8
 80028ec:	20000300 	.word	0x20000300
 80028f0:	20000328 	.word	0x20000328
 80028f4:	2000032c 	.word	0x2000032c

080028f8 <cyphal_loop>:

void cyphal_loop() {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
    interface->loop();
 80028fc:	4804      	ldr	r0, [pc, #16]	; (8002910 <cyphal_loop+0x18>)
 80028fe:	f000 fa70 	bl	8002de2 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002902:	4603      	mov	r3, r0
 8002904:	4618      	mov	r0, r3
 8002906:	f007 fec5 	bl	800a694 <_ZN15CyphalInterface4loopEv>
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000300 	.word	0x20000300

08002914 <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08c      	sub	sp, #48	; 0x30
 8002918:	af02      	add	r7, sp, #8
 800291a:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 800291c:	f107 0320 	add.w	r3, r7, #32
 8002920:	2105      	movs	r1, #5
 8002922:	4618      	mov	r0, r3
 8002924:	f00a fc02 	bl	800d12c <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(1125);//JS_SUB_PORT_ID
 8002928:	f107 0318 	add.w	r3, r7, #24
 800292c:	f240 4165 	movw	r1, #1125	; 0x465
 8002930:	4618      	mov	r0, r3
 8002932:	f00a fbdb 	bl	800d0ec <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	f641 5155 	movw	r1, #7509	; 0x1d55
 800293e:	4618      	mov	r0, r3
 8002940:	f00a fbd4 	bl	800d0ec <canardMakeFilterForSubject>
	CanardFilter cyphal_filter = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 8002944:	f107 0308 	add.w	r3, r7, #8
 8002948:	f107 0218 	add.w	r2, r7, #24
 800294c:	f107 0120 	add.w	r1, r7, #32
 8002950:	4618      	mov	r0, r3
 8002952:	f00a fc0d 	bl	800d170 <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8002956:	4b45      	ldr	r3, [pc, #276]	; (8002a6c <cyphal_can_starter+0x158>)
 8002958:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800295c:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 800295e:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <cyphal_can_starter+0x158>)
 8002960:	2200      	movs	r2, #0
 8002962:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002964:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <cyphal_can_starter+0x158>)
 8002966:	2202      	movs	r2, #2
 8002968:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800296a:	4b40      	ldr	r3, [pc, #256]	; (8002a6c <cyphal_can_starter+0x158>)
 800296c:	2201      	movs	r2, #1
 800296e:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	4a3e      	ldr	r2, [pc, #248]	; (8002a6c <cyphal_can_starter+0x158>)
 8002974:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	4a3c      	ldr	r2, [pc, #240]	; (8002a6c <cyphal_can_starter+0x158>)
 800297a:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800297c:	4b3c      	ldr	r3, [pc, #240]	; (8002a70 <cyphal_can_starter+0x15c>)
 800297e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002982:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8002984:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <cyphal_can_starter+0x15c>)
 8002986:	2200      	movs	r2, #0
 8002988:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800298a:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <cyphal_can_starter+0x15c>)
 800298c:	2202      	movs	r2, #2
 800298e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002990:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <cyphal_can_starter+0x15c>)
 8002992:	2201      	movs	r2, #1
 8002994:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4a35      	ldr	r2, [pc, #212]	; (8002a70 <cyphal_can_starter+0x15c>)
 800299a:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	4a34      	ldr	r2, [pc, #208]	; (8002a70 <cyphal_can_starter+0x15c>)
 80029a0:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80029a2:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <cyphal_can_starter+0x160>)
 80029a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029a8:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 1;
 80029aa:	4b32      	ldr	r3, [pc, #200]	; (8002a74 <cyphal_can_starter+0x160>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80029b0:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <cyphal_can_starter+0x160>)
 80029b2:	2202      	movs	r2, #2
 80029b4:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80029b6:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <cyphal_can_starter+0x160>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4a2d      	ldr	r2, [pc, #180]	; (8002a74 <cyphal_can_starter+0x160>)
 80029c0:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	4a2b      	ldr	r2, [pc, #172]	; (8002a74 <cyphal_can_starter+0x160>)
 80029c6:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80029c8:	2300      	movs	r3, #0
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2300      	movs	r3, #0
 80029ce:	2202      	movs	r2, #2
 80029d0:	2102      	movs	r1, #2
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f002 fd5a 	bl	800548c <HAL_FDCAN_ConfigGlobalFilter>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf14      	ite	ne
 80029de:	2301      	movne	r3, #1
 80029e0:	2300      	moveq	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 80029e8:	f7fe ff46 	bl	8001878 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 80029ec:	491f      	ldr	r1, [pc, #124]	; (8002a6c <cyphal_can_starter+0x158>)
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f002 fcf2 	bl	80053d8 <HAL_FDCAN_ConfigFilter>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf14      	ite	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	2300      	moveq	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <cyphal_can_starter+0xf4>
	  Error_Handler();
 8002a04:	f7fe ff38 	bl	8001878 <Error_Handler>
	}
//	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
//	  Error_Handler();
//	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 8002a08:	491a      	ldr	r1, [pc, #104]	; (8002a74 <cyphal_can_starter+0x160>)
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f002 fce4 	bl	80053d8 <HAL_FDCAN_ConfigFilter>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf14      	ite	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	2300      	moveq	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <cyphal_can_starter+0x110>
	  Error_Handler();
 8002a20:	f7fe ff2a 	bl	8001878 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 8002a24:	2200      	movs	r2, #0
 8002a26:	2105      	movs	r1, #5
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f002 fd60 	bl	80054ee <HAL_FDCAN_ConfigTxDelayCompensation>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <cyphal_can_starter+0x12e>
	  Error_Handler();
 8002a3e:	f7fe ff1b 	bl	8001878 <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f002 fd75 	bl	8005532 <HAL_FDCAN_EnableTxDelayCompensation>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <cyphal_can_starter+0x148>
	  Error_Handler();
 8002a58:	f7fe ff0e 	bl	8001878 <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f002 fd89 	bl	8005574 <HAL_FDCAN_Start>
}
 8002a62:	bf00      	nop
 8002a64:	3728      	adds	r7, #40	; 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2000037c 	.word	0x2000037c
 8002a70:	2000034c 	.word	0x2000034c
 8002a74:	20000364 	.word	0x20000364

08002a78 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
      { delete this; }
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	6053      	str	r3, [r2, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	461a      	mov	r2, r3
 8002ace:	2300      	movs	r3, #0
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	6053      	str	r3, [r2, #4]
 8002ad4:	6093      	str	r3, [r2, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ffde 	bl	8002a9a <_ZNSt14_Function_baseC1Ev>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 8002ae4:	6838      	ldr	r0, [r7, #0]
 8002ae6:	f000 fa25 	bl	8002f34 <_ZNKSt8functionIFyvEEcvbEv>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00d      	beq.n	8002b0c <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	6839      	ldr	r1, [r7, #0]
 8002af8:	2202      	movs	r2, #2
 8002afa:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
	  }
      }
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	461a      	mov	r2, r3
 8002b24:	2300      	movs	r3, #0
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	6053      	str	r3, [r2, #4]
 8002b2a:	6093      	str	r3, [r2, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ffb3 	bl	8002a9a <_ZNSt14_Function_baseC1Ev>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8002b3a:	6838      	ldr	r0, [r7, #0]
 8002b3c:	f000 fa0a 	bl	8002f54 <_ZNKSt8functionIFvvEEcvbEv>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	6839      	ldr	r1, [r7, #0]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	609a      	str	r2, [r3, #8]
      }
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      explicit operator bool() const noexcept
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f9fd 	bl	8002f74 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
	return get();
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f9ec 	bl	8002f74 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8002b9c:	4603      	mov	r3, r0
      }
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f9ec 	bl	8002f8e <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ffeb 	bl	8002ba6 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ffeb 	bl	8002bc0 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1Ev>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	: _M_t()
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ffe8 	bl	8002bda <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f9c5 	bl	8002fae <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8002c24:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00c      	beq.n	8002c48 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f9ca 	bl	8002fc8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 8002c34:	4604      	mov	r4, r0
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f9d3 	bl	8002fe2 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	4620      	mov	r0, r4
 8002c44:	f000 f9d8 	bl	8002ff8 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
      }
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd90      	pop	{r4, r7, pc}

08002c58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d004      	beq.n	8002c72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe fe23 	bl	80018b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	6053      	str	r3, [r2, #4]
 8002c90:	6093      	str	r3, [r2, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff00 	bl	8002a9a <_ZNSt14_Function_baseC1Ev>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8002ca0:	6838      	ldr	r0, [r7, #0]
 8002ca2:	f000 f9b9 	bl	8003018 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00e      	beq.n	8002cca <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8002cac:	687c      	ldr	r4, [r7, #4]
 8002cae:	6838      	ldr	r0, [r7, #0]
 8002cb0:	f000 f9c2 	bl	8003038 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f000 f9c8 	bl	800304e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 8002cc2:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 8002cc8:	609a      	str	r2, [r3, #8]
	    }
	}
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd90      	pop	{r4, r7, pc}
 8002cd4:	08003073 	.word	0x08003073
 8002cd8:	08003097 	.word	0x08003097

08002cdc <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2300      	movs	r3, #0
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	6053      	str	r3, [r2, #4]
 8002cf0:	6093      	str	r3, [r2, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fed0 	bl	8002a9a <_ZNSt14_Function_baseC1Ev>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8002d00:	6838      	ldr	r0, [r7, #0]
 8002d02:	f000 f9e7 	bl	80030d4 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8002d0c:	687c      	ldr	r4, [r7, #4]
 8002d0e:	6838      	ldr	r0, [r7, #0]
 8002d10:	f000 f9f0 	bl	80030f4 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4619      	mov	r1, r3
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f000 f9f6 	bl	800310a <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 8002d22:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 8002d28:	609a      	str	r2, [r3, #8]
	}
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd90      	pop	{r4, r7, pc}
 8002d34:	0800312f 	.word	0x0800312f
 8002d38:	0800314d 	.word	0x0800314d

08002d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fd9d 	bl	800189a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	4613      	mov	r3, r2
 8002d76:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8002d78:	f107 0310 	add.w	r3, r7, #16
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fca4 	bl	80026cc <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8002d84:	88fa      	ldrh	r2, [r7, #6]
 8002d86:	f107 0110 	add.w	r1, r7, #16
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fa0d 	bl	80031ac <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8002d92:	f107 0310 	add.w	r3, r7, #16
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fca8 	bl	80026ec <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	4613      	mov	r3, r2
 8002db2:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8002db4:	f107 0310 	add.w	r3, r7, #16
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fc86 	bl	80026cc <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8002dc0:	88fa      	ldrh	r2, [r7, #6]
 8002dc2:	f107 0110 	add.w	r1, r7, #16
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fa1d 	bl	8003208 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8002dce:	f107 0310 	add.w	r3, r7, #16
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fc8a 	bl	80026ec <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
	return _M_get();
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fa3a 	bl	8003264 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8002df0:	4603      	mov	r3, r0
      }
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_ZNK15CyphalInterface23send_cyphal_default_msgI5TwistEEvPNT_4TypeEPhtS5_>:
    );
    (*transfer_id)++;
}

template <typename TypeAlias>
inline void CyphalInterface::send_cyphal_default_msg(
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b088      	sub	sp, #32
 8002dfe:	af04      	add	r7, sp, #16
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	807b      	strh	r3, [r7, #2]
    typename TypeAlias::Type *obj,
    uint8_t buffer[],
    CanardPortID port,
    CanardTransferID *transfer_id
) const {
    send_cyphal<TypeAlias>(
 8002e08:	887a      	ldrh	r2, [r7, #2]
 8002e0a:	23ff      	movs	r3, #255	; 0xff
 8002e0c:	9303      	str	r3, [sp, #12]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9302      	str	r3, [sp, #8]
 8002e12:	2304      	movs	r3, #4
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fa2b 	bl	800327c <_ZNK15CyphalInterface11send_cyphalI5TwistEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>
        transfer_id,
        CanardPriorityNominal,
        CanardTransferKindMessage,
        CANARD_NODE_ID_UNSET
    );
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <_ZN15CyphalInterface6createI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    UtilityConfig& utilities;
public:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create(
 8002e2e:	b590      	push	{r4, r7, lr}
 8002e30:	b08b      	sub	sp, #44	; 0x2c
 8002e32:	af02      	add	r7, sp, #8
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 8002e3e:	f107 030c 	add.w	r3, r7, #12
 8002e42:	61fb      	str	r3, [r7, #28]
        auto provider  = std::unique_ptr<Provider>(Provider::template create<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config));
 8002e44:	7afa      	ldrb	r2, [r7, #11]
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	69f8      	ldr	r0, [r7, #28]
 8002e50:	f000 fa62 	bl	8003318 <_ZN5G4CAN6createI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f107 0310 	add.w	r3, r7, #16
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 faa8 	bl	80033b2 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EEC1IS2_vEEPS0_>
    
        std::byte* interface_ptr = *inout_buffer;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	61bb      	str	r3, [r7, #24]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config);
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	200c      	movs	r0, #12
 8002e6e:	f7fe fd08 	bl	8001882 <_ZnwjPv>
 8002e72:	4604      	mov	r4, r0
 8002e74:	7afb      	ldrb	r3, [r7, #11]
 8002e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f7fe fe32 	bl	8001ae4 <_ZN15CyphalInterfaceC1EhR13UtilityConfig>
 8002e80:	617c      	str	r4, [r7, #20]

        interface->provider = std::move(provider);
 8002e82:	f107 0310 	add.w	r3, r7, #16
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fac4 	bl	8003414 <_ZSt4moveIRSt10unique_ptrI5G4CANSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3304      	adds	r3, #4
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fac8 	bl	800342a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEaSI5G4CANS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
        return interface;
 8002e9a:	697c      	ldr	r4, [r7, #20]
    }
 8002e9c:	f107 0310 	add.w	r3, r7, #16
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fa95 	bl	80033d0 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev>
        return interface;
 8002ea6:	4623      	mov	r3, r4
    }
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3724      	adds	r7, #36	; 0x24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd90      	pop	{r4, r7, pc}

08002eb0 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6839      	ldr	r1, [r7, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fad6 	bl	8003470 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 8002ece:	b590      	push	{r4, r7, lr}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8002ed8:	687c      	ldr	r4, [r7, #4]
 8002eda:	6838      	ldr	r0, [r7, #0]
 8002edc:	f000 fae0 	bl	80034a0 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f000 fae6 	bl	80034b6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8002eea:	687b      	ldr	r3, [r7, #4]
      }
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd90      	pop	{r4, r7, pc}

08002ef4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
      { }
 8002efc:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	080124a8 	.word	0x080124a8

08002f14 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
      { }
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ffe9 	bl	8002ef4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002f22:	210c      	movs	r1, #12
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f00a f94e 	bl	800d1c6 <_ZdlPvj>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe fd13 	bl	800196a <_ZNKSt14_Function_base8_M_emptyEv>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f083 0301 	eor.w	r3, r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fd03 	bl	800196a <_ZNKSt14_Function_base8_M_emptyEv>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f083 0301 	eor.w	r3, r3, #1
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fab8 	bl	80034f4 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 faba 	bl	8003510 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fac2 	bl	8003528 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fac3 	bl	8003544 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fac3 	bl	800355e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x18>
 8003008:	2140      	movs	r1, #64	; 0x40
 800300a:	4618      	mov	r0, r3
 800300c:	f00a f8db 	bl	800d1c6 <_ZdlPvj>
      }
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800304e:	b590      	push	{r4, r7, lr}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003058:	6838      	ldr	r0, [r7, #0]
 800305a:	f7ff ffed 	bl	8003038 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 800305e:	4603      	mov	r3, r0
 8003060:	4622      	mov	r2, r4
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fa87 	bl	8003578 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bd90      	pop	{r4, r7, pc}

08003072 <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fa94 	bl	80035a8 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8003080:	4603      	mov	r3, r0
 8003082:	4618      	mov	r0, r3
 8003084:	f000 faa0 	bl	80035c8 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
      }
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003096:	b590      	push	{r4, r7, lr}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	4613      	mov	r3, r2
 80030a2:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d109      	bne.n	80030be <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80030aa:	68b8      	ldr	r0, [r7, #8]
 80030ac:	f000 fa7c 	bl	80035a8 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80030b0:	4604      	mov	r4, r0
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fa9b 	bl	80035ee <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 80030b8:	4603      	mov	r3, r0
 80030ba:	601c      	str	r4, [r3, #0]
	    break;
 80030bc:	e005      	b.n	80030ca <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	461a      	mov	r2, r3
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fa9f 	bl	8003608 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 80030ca:	2300      	movs	r3, #0
      }
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd90      	pop	{r4, r7, pc}

080030d4 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800310a:	b590      	push	{r4, r7, lr}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003114:	6838      	ldr	r0, [r7, #0]
 8003116:	f7ff ffed 	bl	80030f4 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 800311a:	4603      	mov	r3, r0
 800311c:	4622      	mov	r2, r4
 800311e:	4619      	mov	r1, r3
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 faab 	bl	800367c <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	bd90      	pop	{r4, r7, pc}

0800312e <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fab8 	bl	80036ac <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800313c:	4603      	mov	r3, r0
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fac4 	bl	80036cc <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8003144:	bf00      	nop
      }
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d109      	bne.n	8003174 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003160:	68b8      	ldr	r0, [r7, #8]
 8003162:	f000 faa3 	bl	80036ac <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8003166:	4604      	mov	r4, r0
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fabf 	bl	80036ec <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 800316e:	4603      	mov	r3, r0
 8003170:	601c      	str	r4, [r3, #0]
	    break;
 8003172:	e005      	b.n	8003180 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	461a      	mov	r2, r3
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 fac2 	bl	8003704 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8003180:	2300      	movs	r3, #0
      }
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bd90      	pop	{r4, r7, pc}
	...

0800318c <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	08012468 	.word	0x08012468

080031ac <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	4611      	mov	r1, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	460b      	mov	r3, r1
 80031bc:	80fb      	strh	r3, [r7, #6]
 80031be:	4613      	mov	r3, r2
 80031c0:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface) {
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ffe1 	bl	800318c <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80031ca:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x58>)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3308      	adds	r3, #8
 80031d4:	f44f 720a 	mov.w	r2, #552	; 0x228
 80031d8:	2100      	movs	r1, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	f00b f8cf 	bl	800e37e <memset>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fa6f 	bl	80026cc <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80031ee:	797a      	ldrb	r2, [r7, #5]
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	4619      	mov	r1, r3
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 fabf 	bl	8003778 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	08012458 	.word	0x08012458

08003208 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	4611      	mov	r1, r2
 8003214:	461a      	mov	r2, r3
 8003216:	460b      	mov	r3, r1
 8003218:	80fb      	strh	r3, [r7, #6]
 800321a:	4613      	mov	r3, r2
 800321c:	717b      	strb	r3, [r7, #5]
    ): interface(interface) {
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ffb3 	bl	800318c <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8003226:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x58>)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3308      	adds	r3, #8
 8003230:	f44f 720a 	mov.w	r2, #552	; 0x228
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f00b f8a1 	bl	800e37e <memset>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fa41 	bl	80026cc <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 800324a:	797a      	ldrb	r2, [r7, #5]
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	4619      	mov	r1, r3
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 faaf 	bl	80037b4 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	08012438 	.word	0x08012438

08003264 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fabf 	bl	80037f0 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8003272:	4603      	mov	r3, r0
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <_ZNK15CyphalInterface11send_cyphalI5TwistEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>:
inline void CyphalInterface::send_cyphal(
 800327c:	b5b0      	push	{r4, r5, r7, lr}
 800327e:	b08c      	sub	sp, #48	; 0x30
 8003280:	af04      	add	r7, sp, #16
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 800328a:	2318      	movs	r3, #24
 800328c:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 800328e:	f107 031c 	add.w	r3, r7, #28
 8003292:	461a      	mov	r2, r3
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	68b8      	ldr	r0, [r7, #8]
 8003298:	f7ff f924 	bl	80024e4 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_>
 800329c:	4603      	mov	r3, r0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	09db      	lsrs	r3, r3, #7
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <_ZNK15CyphalInterface11send_cyphalI5TwistEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x38>
        utilities.error_handler();
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	3310      	adds	r3, #16
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 faaa 	bl	8003808 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80032b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80032b8:	753b      	strb	r3, [r7, #20]
 80032ba:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80032be:	757b      	strb	r3, [r7, #21]
 80032c0:	887b      	ldrh	r3, [r7, #2]
 80032c2:	82fb      	strh	r3, [r7, #22]
 80032c4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80032c8:	763b      	strb	r3, [r7, #24]
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + DEFAULT_TIMEOUT_MICROS,
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 faad 	bl	8003834 <_ZNKSt8functionIFyvEEclEv>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
    push(
 80032de:	490d      	ldr	r1, [pc, #52]	; (8003314 <_ZNK15CyphalInterface11send_cyphalI5TwistEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x98>)
 80032e0:	1854      	adds	r4, r2, r1
 80032e2:	f143 0500 	adc.w	r5, r3, #0
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	9202      	str	r2, [sp, #8]
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	4622      	mov	r2, r4
 80032f6:	462b      	mov	r3, r5
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f007 f95d 	bl	800a5b8 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	3301      	adds	r3, #1
 8003304:	b2da      	uxtb	r2, r3
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	701a      	strb	r2, [r3, #0]
}
 800330a:	bf00      	nop
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bdb0      	pop	{r4, r5, r7, pc}
 8003312:	bf00      	nop
 8003314:	000f4240 	.word	0x000f4240

08003318 <_ZN5G4CAN6createI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create(
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b089      	sub	sp, #36	; 0x24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem), args..., utilities);
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4619      	mov	r1, r3
 8003332:	2008      	movs	r0, #8
 8003334:	f7fe faa5 	bl	8001882 <_ZnwjPv>
 8003338:	4604      	mov	r4, r0
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003346:	4619      	mov	r1, r3
 8003348:	4620      	mov	r0, r4
 800334a:	f7fe fbff 	bl	8001b4c <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 800334e:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3308      	adds	r3, #8
 8003354:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len / 2, utilities);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	4619      	mov	r1, r3
 800335a:	2044      	movs	r0, #68	; 0x44
 800335c:	f7fe fa91 	bl	8001882 <_ZnwjPv>
 8003360:	4604      	mov	r4, r0
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	085a      	lsrs	r2, r3, #1
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	4620      	mov	r0, r4
 800336c:	f7fe fbd2 	bl	8001b14 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 8003370:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	79fa      	ldrb	r2, [r7, #7]
 8003376:	69b9      	ldr	r1, [r7, #24]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fa75 	bl	8003868 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	601a      	str	r2, [r3, #0]
        return ptr;
 8003388:	693b      	ldr	r3, [r7, #16]
    }
 800338a:	4618      	mov	r0, r3
 800338c:	3724      	adds	r7, #36	; 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd90      	pop	{r4, r7, pc}

08003392 <_ZNSt15__uniq_ptr_dataI5G4CANSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 faa4 	bl	80038f0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EEC1EPS0_>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6839      	ldr	r1, [r7, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ffe6 	bl	8003392 <_ZNSt15__uniq_ptr_dataI5G4CANSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fa9c 	bl	8003918 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 80033e0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00c      	beq.n	8003404 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 faa1 	bl	8003932 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>
 80033f0:	4604      	mov	r4, r0
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 faaa 	bl	800394c <_ZSt4moveIRP5G4CANEONSt16remove_referenceIT_E4typeEOS4_>
 80033f8:	4603      	mov	r3, r0
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4619      	mov	r1, r3
 80033fe:	4620      	mov	r0, r4
 8003400:	f000 faaf 	bl	8003962 <_ZNKSt14default_deleteI5G4CANEclEPS0_>
	__ptr = pointer();
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
      }
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bd90      	pop	{r4, r7, pc}

08003414 <_ZSt4moveIRSt10unique_ptrI5G4CANSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEaSI5G4CANS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 8003434:	6838      	ldr	r0, [r7, #0]
 8003436:	f000 fab8 	bl	80039aa <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE7releaseEv>
 800343a:	4603      	mov	r3, r0
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fa9f 	bl	8003982 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8003444:	6838      	ldr	r0, [r7, #0]
 8003446:	f000 fa74 	bl	8003932 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>
 800344a:	4603      	mov	r3, r0
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fab9 	bl	80039c4 <_ZSt7forwardISt14default_deleteI5G4CANEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003452:	4602      	mov	r2, r0
 8003454:	f107 030c 	add.w	r3, r7, #12
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fabd 	bl	80039da <_ZNSt14default_deleteI19AbstractCANProviderEC1I5G4CANvEERKS_IT_E>
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff fdb1 	bl	8002fc8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8003466:	687b      	ldr	r3, [r7, #4]
	}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8003470:	b590      	push	{r4, r7, lr}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	4622      	mov	r2, r4
 8003486:	6839      	ldr	r1, [r7, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fab2 	bl	80039f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fabd 	bl	8003a10 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bd90      	pop	{r4, r7, pc}

080034a0 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f000 fab0 	bl	8003a26 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 80034c6:	4602      	mov	r2, r0
 80034c8:	f107 0308 	add.w	r3, r7, #8
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fab4 	bl	8003a3c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 80034d4:	f107 0308 	add.w	r3, r7, #8
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 facc 	bl	8003a78 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 80034e0:	f107 0308 	add.w	r3, r7, #8
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff f8a8 	bl	800263a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 80034ea:	687b      	ldr	r3, [r7, #4]
      }
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fad1 	bl	8003aa6 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8003504:	4603      	mov	r3, r0
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fad1 	bl	8003ac0 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fac1 	bl	8003ad6 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003554:	4603      	mov	r3, r0
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fac0 	bl	8003aee <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800356e:	4603      	mov	r3, r0
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8003584:	68b8      	ldr	r0, [r7, #8]
 8003586:	f7ff fd57 	bl	8003038 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 800358a:	4604      	mov	r4, r0
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7fe f9c3 	bl	8001918 <_ZNSt9_Any_data9_M_accessEv>
 8003592:	4603      	mov	r3, r0
 8003594:	4619      	mov	r1, r3
 8003596:	2004      	movs	r0, #4
 8003598:	f7fe f973 	bl	8001882 <_ZnwjPv>
 800359c:	4603      	mov	r3, r0
 800359e:	601c      	str	r4, [r3, #0]
	  }
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd90      	pop	{r4, r7, pc}

080035a8 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 faa8 	bl	8003b06 <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 80035b6:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fab0 	bl	8003b1e <_ZSt11__addressofIKPFyvEEPT_RS3_>
 80035be:	4603      	mov	r3, r0
	}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 faaf 	bl	8003b34 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80035d6:	4603      	mov	r3, r0
 80035d8:	4619      	mov	r1, r3
 80035da:	4620      	mov	r0, r4
 80035dc:	f000 fab5 	bl	8003b4a <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd90      	pop	{r4, r7, pc}

080035ee <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access()
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fe f98e 	bl	8001918 <_ZNSt9_Any_data9_M_accessEv>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d82a      	bhi.n	8003672 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 800361c:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800361e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003622:	bf00      	nop
 8003624:	08003635 	.word	0x08003635
 8003628:	08003643 	.word	0x08003643
 800362c:	08003657 	.word	0x08003657
 8003630:	08003669 	.word	0x08003669
	      __dest._M_access<const type_info*>() = nullptr;
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fa9a 	bl	8003b6e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800363a:	4603      	mov	r3, r0
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
	      break;
 8003640:	e017      	b.n	8003672 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003642:	68b8      	ldr	r0, [r7, #8]
 8003644:	f7ff ffb0 	bl	80035a8 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8003648:	4604      	mov	r4, r0
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7ff ffcf 	bl	80035ee <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8003650:	4603      	mov	r3, r0
 8003652:	601c      	str	r4, [r3, #0]
	      break;
 8003654:	e00d      	b.n	8003672 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8003656:	68b8      	ldr	r0, [r7, #8]
 8003658:	f7ff ffa6 	bl	80035a8 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 800365c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800365e:	4619      	mov	r1, r3
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fa90 	bl	8003b86 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8003666:	e004      	b.n	8003672 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8003668:	4621      	mov	r1, r4
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fa9d 	bl	8003baa <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8003670:	bf00      	nop
	  return false;
 8003672:	2300      	movs	r3, #0
	}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bd90      	pop	{r4, r7, pc}

0800367c <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8003688:	68b8      	ldr	r0, [r7, #8]
 800368a:	f7ff fd33 	bl	80030f4 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 800368e:	4604      	mov	r4, r0
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7fe f941 	bl	8001918 <_ZNSt9_Any_data9_M_accessEv>
 8003696:	4603      	mov	r3, r0
 8003698:	4619      	mov	r1, r3
 800369a:	2004      	movs	r0, #4
 800369c:	f7fe f8f1 	bl	8001882 <_ZnwjPv>
 80036a0:	4603      	mov	r3, r0
 80036a2:	601c      	str	r4, [r3, #0]
	  }
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd90      	pop	{r4, r7, pc}

080036ac <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fa84 	bl	8003bc2 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 80036ba:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fa8c 	bl	8003bda <_ZSt11__addressofIKPFvvEEPT_RS3_>
 80036c2:	4603      	mov	r3, r0
	}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fa8b 	bl	8003bf0 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80036da:	4603      	mov	r3, r0
 80036dc:	4619      	mov	r1, r3
 80036de:	4620      	mov	r0, r4
 80036e0:	f000 fa91 	bl	8003c06 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd90      	pop	{r4, r7, pc}

080036ec <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fe f90f 	bl	8001918 <_ZNSt9_Any_data9_M_accessEv>
 80036fa:	4603      	mov	r3, r0
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d82a      	bhi.n	800376e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003731 	.word	0x08003731
 8003724:	0800373f 	.word	0x0800373f
 8003728:	08003753 	.word	0x08003753
 800372c:	08003765 	.word	0x08003765
	      __dest._M_access<const type_info*>() = nullptr;
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 fa1c 	bl	8003b6e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8003736:	4603      	mov	r3, r0
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
	      break;
 800373c:	e017      	b.n	800376e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800373e:	68b8      	ldr	r0, [r7, #8]
 8003740:	f7ff ffb4 	bl	80036ac <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8003744:	4604      	mov	r4, r0
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f7ff ffd0 	bl	80036ec <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 800374c:	4603      	mov	r3, r0
 800374e:	601c      	str	r4, [r3, #0]
	      break;
 8003750:	e00d      	b.n	800376e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8003752:	68b8      	ldr	r0, [r7, #8]
 8003754:	f7ff ffaa 	bl	80036ac <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8003758:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800375a:	4619      	mov	r1, r3
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fa61 	bl	8003c24 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8003762:	e004      	b.n	800376e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8003764:	4621      	mov	r1, r4
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fa6e 	bl	8003c48 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800376c:	bf00      	nop
	  return false;
 800376e:	2300      	movs	r3, #0
	}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	bd90      	pop	{r4, r7, pc}

08003778 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af02      	add	r7, sp, #8
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]
 8003784:	4613      	mov	r3, r2
 8003786:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fb24 	bl	8002de2 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3308      	adds	r3, #8
 800379e:	787a      	ldrb	r2, [r7, #1]
 80037a0:	8879      	ldrh	r1, [r7, #2]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	220c      	movs	r2, #12
 80037a8:	f006 ff40 	bl	800a62c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	807b      	strh	r3, [r7, #2]
 80037c0:	4613      	mov	r3, r2
 80037c2:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fb06 	bl	8002de2 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3308      	adds	r3, #8
 80037da:	787a      	ldrb	r2, [r7, #1]
 80037dc:	8879      	ldrh	r1, [r7, #2]
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	220c      	movs	r2, #12
 80037e4:	f006 ff22 	bl	800a62c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe f8a9 	bl	800196a <_ZNKSt14_Function_base8_M_emptyEv>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 800381e:	f009 fce5 	bl	800d1ec <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4610      	mov	r0, r2
 800382a:	4798      	blx	r3
 800382c:	bf00      	nop
      }
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe f893 	bl	800196a <_ZNKSt14_Function_base8_M_emptyEv>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 800384a:	f009 fccf 	bl	800d1ec <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	4610      	mov	r0, r2
 8003856:	4798      	blx	r3
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
      }
 800385c:	4610      	mov	r0, r2
 800385e:	4619      	mov	r1, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8003868:	b5b0      	push	{r4, r5, r7, lr}
 800386a:	b08e      	sub	sp, #56	; 0x38
 800386c:	af00      	add	r7, sp, #0
 800386e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003870:	62b9      	str	r1, [r7, #40]	; 0x28
 8003872:	4613      	mov	r3, r2
 8003874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8003878:	481a      	ldr	r0, [pc, #104]	; (80038e4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 800387a:	f7ff f977 	bl	8002b6c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003888:	3310      	adds	r3, #16
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff ffbc 	bl	8003808 <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 8003890:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f9f2 	bl	8003c80 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800389c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038a0:	4619      	mov	r1, r3
 80038a2:	4810      	ldr	r0, [pc, #64]	; (80038e4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 80038a4:	f000 fa1d 	bl	8003ce2 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 80038a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 f9f6 	bl	8003c9e <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 80038b2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80038b4:	463b      	mov	r3, r7
 80038b6:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 80038b8:	490c      	ldr	r1, [pc, #48]	; (80038ec <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 80038ba:	4618      	mov	r0, r3
 80038bc:	f009 f980 	bl	800cbc0 <canardInit>
 80038c0:	3420      	adds	r4, #32
 80038c2:	463d      	mov	r5, r7
 80038c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 80038d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80038d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80038da:	bf00      	nop
 80038dc:	3738      	adds	r7, #56	; 0x38
 80038de:	46bd      	mov	sp, r7
 80038e0:	bdb0      	pop	{r4, r5, r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000470 	.word	0x20000470
 80038e8:	08001a5d 	.word	0x08001a5d
 80038ec:	08001a19 	.word	0x08001a19

080038f0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fa13 	bl	8003d28 <_ZNSt5tupleIJP5G4CANSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8003902:	683c      	ldr	r4, [r7, #0]
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f807 	bl	8003918 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 800390a:	4603      	mov	r3, r0
 800390c:	601c      	str	r4, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bd90      	pop	{r4, r7, pc}

08003918 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fa0d 	bl	8003d42 <_ZSt3getILj0EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003928:	4603      	mov	r3, r0
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fa0d 	bl	8003d5c <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE10_M_deleterEv>
 8003942:	4603      	mov	r3, r0
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <_ZSt4moveIRP5G4CANEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <_ZNKSt14default_deleteI5G4CANEclEPS0_>:
      operator()(_Tp* __ptr) const
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <_ZNKSt14default_deleteI5G4CANEclEPS0_+0x18>
 8003972:	2144      	movs	r1, #68	; 0x44
 8003974:	4618      	mov	r0, r3
 8003976:	f009 fc26 	bl	800d1c6 <_ZdlPvj>
      }
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8003982:	b590      	push	{r4, r7, lr}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 800398c:	687c      	ldr	r4, [r7, #4]
 800398e:	463b      	mov	r3, r7
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fb26 	bl	8002fe2 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8003996:	4603      	mov	r3, r0
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4619      	mov	r1, r3
 800399c:	4620      	mov	r0, r4
 800399e:	f000 f9ea 	bl	8003d76 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>
      }
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd90      	pop	{r4, r7, pc}

080039aa <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f9fe 	bl	8003db6 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE7releaseEv>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <_ZSt7forwardISt14default_deleteI5G4CANEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <_ZNSt14default_deleteI19AbstractCANProviderEC1I5G4CANvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f9fb 	bl	8003dfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
	{ }
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fdff 	bl	8002656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	1d1a      	adds	r2, r3, #4
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4619      	mov	r1, r3
 8003a62:	4610      	mov	r0, r2
 8003a64:	f000 f9e2 	bl	8003e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
      }
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 f9ef 	bl	8003e6c <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	1d1a      	adds	r2, r3, #4
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	3304      	adds	r3, #4
 8003a96:	4619      	mov	r1, r3
 8003a98:	4610      	mov	r0, r2
 8003a9a:	f000 f9c7 	bl	8003e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f9fa 	bl	8003eaa <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f9ef 	bl	8003ec2 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f9f0 	bl	8003edc <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8003afc:	4603      	mov	r3, r0
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd ff0d 	bl	800192e <_ZNKSt9_Any_data9_M_accessEv>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	7138      	strb	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003b54:	6838      	ldr	r0, [r7, #0]
 8003b56:	f7ff ffed 	bl	8003b34 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4798      	blx	r3
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd fece 	bl	8001918 <_ZNSt9_Any_data9_M_accessEv>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003b86:	b590      	push	{r4, r7, lr}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003b90:	6838      	ldr	r0, [r7, #0]
 8003b92:	f000 f9af 	bl	8003ef4 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003b96:	4603      	mov	r3, r0
 8003b98:	4622      	mov	r2, r4
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f9b4 	bl	8003f0a <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd90      	pop	{r4, r7, pc}

08003baa <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f9c1 	bl	8003f3c <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd feaf 	bl	800192e <_ZNKSt9_Any_data9_M_accessEv>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	7138      	strb	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003c10:	6838      	ldr	r0, [r7, #0]
 8003c12:	f7ff ffed 	bl	8003bf0 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003c16:	4603      	mov	r3, r0
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4798      	blx	r3
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003c24:	b590      	push	{r4, r7, lr}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003c2e:	6838      	ldr	r0, [r7, #0]
 8003c30:	f000 f990 	bl	8003f54 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4622      	mov	r2, r4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f995 	bl	8003f6a <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}

08003c48 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f9a2 	bl	8003f9c <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	4611      	mov	r1, r2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 f99f 	bl	8003fb4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6839      	ldr	r1, [r7, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff ffe6 	bl	8003c60 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8003c9e:	b590      	push	{r4, r7, lr}
 8003ca0:	b085      	sub	sp, #20
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 f997 	bl	8003fdc <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8003cae:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00c      	beq.n	8003cd2 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f99c 	bl	8003ff6 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f9a5 	bl	8004010 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f000 f9aa 	bl	8004026 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
      }
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd90      	pop	{r4, r7, pc}

08003ce2 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 8003cec:	6838      	ldr	r0, [r7, #0]
 8003cee:	f000 f9bf 	bl	8004070 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f9a6 	bl	8004048 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8003cfc:	6838      	ldr	r0, [r7, #0]
 8003cfe:	f000 f97a 	bl	8003ff6 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8003d02:	4603      	mov	r3, r0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 f9cd 	bl	80040a4 <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	f107 030c 	add.w	r3, r7, #12
 8003d10:	4611      	mov	r1, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f9d1 	bl	80040ba <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f9b6 	bl	800408a <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8003d1e:	687b      	ldr	r3, [r7, #4]
	}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <_ZNSt5tupleIJP5G4CANSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 f9cd 	bl	80040d2 <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEEC1Ev>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <_ZSt3getILj0EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 f9d0 	bl	80040f2 <_ZSt12__get_helperILj0EP5G4CANJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003d52:	4603      	mov	r3, r0
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f9cf 	bl	800410a <_ZSt3getILj1EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8003d76:	b590      	push	{r4, r7, lr}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff f914 	bl	8002fae <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8003d86:	4603      	mov	r3, r0
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8003d8c:	683c      	ldr	r4, [r7, #0]
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff f90d 	bl	8002fae <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8003d94:	4603      	mov	r3, r0
 8003d96:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff fbdd 	bl	800355e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8003da4:	4603      	mov	r3, r0
 8003da6:	68f9      	ldr	r1, [r7, #12]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff f925 	bl	8002ff8 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
      }
 8003dae:	bf00      	nop
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd90      	pop	{r4, r7, pc}

08003db6 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff fdaa 	bl	8003918 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fda4 	bl	8003918 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
	return __p;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
      }
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe ff11 	bl	8002c14 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8003e0c:	2010      	movs	r0, #16
 8003e0e:	f009 f9dc 	bl	800d1ca <_Znwj>
 8003e12:	4603      	mov	r3, r0
 8003e14:	461c      	mov	r4, r3
 8003e16:	6839      	ldr	r1, [r7, #0]
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f000 f983 	bl	8004124 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	601c      	str	r4, [r3, #0]
	}
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd90      	pop	{r4, r7, pc}

08003e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	601a      	str	r2, [r3, #0]
      }
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff ffed 	bl	8003e56 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003e82:	6838      	ldr	r0, [r7, #0]
 8003e84:	f7ff ffe7 	bl	8003e56 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003e90:	f107 030c 	add.w	r3, r7, #12
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ffde 	bl	8003e56 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	601a      	str	r2, [r3, #0]
    }
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f94c 	bl	8004150 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 f94c 	bl	800416a <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f94b 	bl	8004180 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8003f0a:	b590      	push	{r4, r7, lr}
 8003f0c:	b085      	sub	sp, #20
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8003f16:	68b8      	ldr	r0, [r7, #8]
 8003f18:	f7ff ffec 	bl	8003ef4 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	681c      	ldr	r4, [r3, #0]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f7fd fcf9 	bl	8001918 <_ZNSt9_Any_data9_M_accessEv>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4619      	mov	r1, r3
 8003f2a:	2004      	movs	r0, #4
 8003f2c:	f7fd fca9 	bl	8001882 <_ZnwjPv>
 8003f30:	4603      	mov	r3, r0
 8003f32:	601c      	str	r4, [r3, #0]
	  }
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd90      	pop	{r4, r7, pc}

08003f3c <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access()
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7fd fce7 	bl	8001918 <_ZNSt9_Any_data9_M_accessEv>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8003f6a:	b590      	push	{r4, r7, lr}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8003f76:	68b8      	ldr	r0, [r7, #8]
 8003f78:	f7ff ffec 	bl	8003f54 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	681c      	ldr	r4, [r3, #0]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7fd fcc9 	bl	8001918 <_ZNSt9_Any_data9_M_accessEv>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4619      	mov	r1, r3
 8003f8a:	2004      	movs	r0, #4
 8003f8c:	f7fd fc79 	bl	8001882 <_ZnwjPv>
 8003f90:	4603      	mov	r3, r0
 8003f92:	601c      	str	r4, [r3, #0]
	  }
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd90      	pop	{r4, r7, pc}

08003f9c <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fd fcb7 	bl	8001918 <_ZNSt9_Any_data9_M_accessEv>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8003fb4:	b590      	push	{r4, r7, lr}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 f8e9 	bl	8004198 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8003fc6:	683c      	ldr	r4, [r7, #0]
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f807 	bl	8003fdc <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	601c      	str	r4, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd90      	pop	{r4, r7, pc}

08003fdc <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f8e3 	bl	80041b2 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003fec:	4603      	mov	r3, r0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4618      	mov	r0, r3
 8004002:	f000 f8e3 	bl	80041cc <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8004006:	4603      	mov	r3, r0
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d004      	beq.n	8004040 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	320c      	adds	r2, #12
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	4790      	blx	r2
      }
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      reset(pointer __p = pointer()) noexcept
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
	_M_t.reset(std::move(__p));
 8004052:	687c      	ldr	r4, [r7, #4]
 8004054:	463b      	mov	r3, r7
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f8c5 	bl	80041e6 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 800405c:	4603      	mov	r3, r0
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4619      	mov	r1, r3
 8004062:	4620      	mov	r0, r4
 8004064:	f000 f8ca 	bl	80041fc <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bd90      	pop	{r4, r7, pc}

08004070 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f8de 	bl	800423c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8004080:	4603      	mov	r3, r0
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f8e6 	bl	8004266 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 800409a:	4603      	mov	r3, r0
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6039      	str	r1, [r7, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4618      	mov	r0, r3
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b082      	sub	sp, #8
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8d0 	bl	8004280 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEEC1Ev>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f8d8 	bl	8004298 <_ZNSt10_Head_baseILj0EP5G4CANLb0EEC1Ev>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <_ZSt12__get_helperILj0EP5G4CANJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8da 	bl	80042b4 <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEE7_M_headERS4_>
 8004100:	4603      	mov	r3, r0
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <_ZSt3getILj1EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f8db 	bl	80042ce <_ZSt12__get_helperILj1ESt14default_deleteI5G4CANEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004118:	4603      	mov	r3, r0
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 f8d9 	bl	80042e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8004136:	4a05      	ldr	r2, [pc, #20]	; (800414c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	0801240c 	.word	0x0801240c

08004150 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f8da 	bl	8004314 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 8004160:	4603      	mov	r3, r0
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f8ce 	bl	800432a <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 800418e:	4603      	mov	r3, r0
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f8cc 	bl	8004340 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 f8cf 	bl	8004360 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80041c2:	4603      	mov	r3, r0
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f8ce 	bl	8004378 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80041dc:	4603      	mov	r3, r0
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8c2 	bl	8004390 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800420c:	4603      	mov	r3, r0
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8004212:	683c      	ldr	r4, [r7, #0]
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f8bb 	bl	8004390 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800421a:	4603      	mov	r3, r0
 800421c:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f81e 	bl	8004266 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 800422a:	4603      	mov	r3, r0
 800422c:	68f9      	ldr	r1, [r7, #12]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 f8bb 	bl	80043aa <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	bd90      	pop	{r4, r7, pc}

0800423c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff fec9 	bl	8003fdc <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800424a:	4603      	mov	r3, r0
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff fec3 	bl	8003fdc <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8004256:	4603      	mov	r3, r0
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
	return __p;
 800425c:	68fb      	ldr	r3, [r7, #12]
      }
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 f8ab 	bl	80043cc <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004276:	4603      	mov	r3, r0
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEEC1Ev>:
      _Tuple_impl()
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f8ab 	bl	80043e4 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EEC1Ev>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <_ZNSt10_Head_baseILj0EP5G4CANLb0EEC1Ev>:
      constexpr _Head_base()
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f89b 	bl	80043fa <_ZNSt10_Head_baseILj0EP5G4CANLb0EE7_M_headERS2_>
 80042c4:	4603      	mov	r3, r0
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <_ZSt12__get_helperILj1ESt14default_deleteI5G4CANEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f89a 	bl	8004410 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEE7_M_headERS3_>
 80042dc:	4603      	mov	r3, r0
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 80042f0:	4a07      	ldr	r2, [pc, #28]	; (8004310 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	605a      	str	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	609a      	str	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	080124a8 	.word	0x080124a8

08004314 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4618      	mov	r0, r3
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f86d 	bl	8004428 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 f875 	bl	8004440 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f877 	bl	800445c <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 800436e:	4603      	mov	r3, r0
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f878 	bl	8004476 <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004386:	4603      	mov	r3, r0
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 f877 	bl	800448e <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80043a0:	4603      	mov	r3, r0
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	320c      	adds	r2, #12
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	4790      	blx	r2
      }
 80043c4:	bf00      	nop
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f867 	bl	80044a8 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80043da:	4603      	mov	r3, r0
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EEC1Ev>:
      constexpr _Head_base()
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <_ZNSt10_Head_baseILj0EP5G4CANLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f851 	bl	80044c0 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EE7_M_headERS3_>
 800441e:	4603      	mov	r3, r0
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f850 	bl	80044d6 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f840 	bl	80044ec <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 800446c:	4603      	mov	r3, r0
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f83f 	bl	8004502 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 8004484:	4603      	mov	r3, r0
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4618      	mov	r0, r3
 800449a:	f000 f83e 	bl	800451a <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800449e:	4603      	mov	r3, r0
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f83e 	bl	8004532 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 80044b6:	4603      	mov	r3, r0
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f81d 	bl	800454a <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 8004510:	4603      	mov	r3, r0
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f81c 	bl	8004560 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8004528:	4603      	mov	r3, r0
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f81d 	bl	800457a <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 8004540:	4603      	mov	r3, r0
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f810 	bl	8004590 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 8004570:	4603      	mov	r3, r0
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	4a05      	ldr	r2, [pc, #20]	; (80045c8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fc9b 	bl	8002ef4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	0801240c 	.word	0x0801240c

080045cc <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff ffe7 	bl	80045a8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80045da:	2110      	movs	r1, #16
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f008 fdf2 	bl	800d1c6 <_ZdlPvj>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3310      	adds	r3, #16
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fd f9d4 	bl	80019a6 <_ZNSt8functionIFvvEED1Ev>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fd f9c3 	bl	800198c <_ZNSt8functionIFyvEED1Ev>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_Z41__static_initialization_and_destruction_0ii>:

}
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d122      	bne.n	8004666 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004626:	4293      	cmp	r3, r2
 8004628:	d11d      	bne.n	8004666 <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 800462a:	f107 0308 	add.w	r3, r7, #8
 800462e:	4917      	ldr	r1, [pc, #92]	; (800468c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe fb23 	bl	8002c7c <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 8004636:	f107 0318 	add.w	r3, r7, #24
 800463a:	4915      	ldr	r1, [pc, #84]	; (8004690 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800463c:	4618      	mov	r0, r3
 800463e:	f7fe fb4d 	bl	8002cdc <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 8004642:	f107 0218 	add.w	r2, r7, #24
 8004646:	f107 0308 	add.w	r3, r7, #8
 800464a:	4619      	mov	r1, r3
 800464c:	4811      	ldr	r0, [pc, #68]	; (8004694 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800464e:	f7fd f9b7 	bl	80019c0 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 8004652:	f107 0318 	add.w	r3, r7, #24
 8004656:	4618      	mov	r0, r3
 8004658:	f7fd f9a5 	bl	80019a6 <_ZNSt8functionIFvvEED1Ev>
 800465c:	f107 0308 	add.w	r3, r7, #8
 8004660:	4618      	mov	r0, r3
 8004662:	f7fd f993 	bl	800198c <_ZNSt8functionIFyvEED1Ev>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004672:	4293      	cmp	r3, r2
 8004674:	d105      	bne.n	8004682 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8004676:	4807      	ldr	r0, [pc, #28]	; (8004694 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004678:	f7ff ffb8 	bl	80045ec <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 800467c:	4806      	ldr	r0, [pc, #24]	; (8004698 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800467e:	f7fe f835 	bl	80026ec <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8004682:	bf00      	nop
 8004684:	3728      	adds	r7, #40	; 0x28
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	0800267f 	.word	0x0800267f
 8004690:	08002673 	.word	0x08002673
 8004694:	20000308 	.word	0x20000308
 8004698:	20000300 	.word	0x20000300

0800469c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800469c:	b590      	push	{r4, r7, lr}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68dc      	ldr	r4, [r3, #12]
 80046a8:	2c00      	cmp	r4, #0
 80046aa:	d006      	beq.n	80046ba <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 80046ac:	4620      	mov	r0, r4
 80046ae:	f7ff fb97 	bl	8003de0 <_ZN15CyphalInterfaceD1Ev>
 80046b2:	210c      	movs	r1, #12
 80046b4:	4620      	mov	r0, r4
 80046b6:	f008 fd86 	bl	800d1c6 <_ZdlPvj>
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd90      	pop	{r4, r7, pc}

080046c2 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
      { delete this; }
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff ff7b 	bl	80045cc <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 80046e8:	2300      	movs	r3, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:

    void accept(CanardRxTransfer* transfer) {
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b086      	sub	sp, #24
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
        Type object;
        interface->cyphal_deserialize_transfer<T>(&object, transfer);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe fb6b 	bl	8002de2 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800470c:	f107 030c 	add.w	r3, r7, #12
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	4619      	mov	r1, r3
 8004714:	f000 f82b 	bl	800476e <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3304      	adds	r3, #4
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f107 010c 	add.w	r1, r7, #12
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	4798      	blx	r3
    }
 800472a:	bf00      	nop
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
        interface->cyphal_deserialize_transfer<T>(&object, transfer);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe fb4d 	bl	8002de2 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004748:	f107 0308 	add.w	r3, r7, #8
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	4619      	mov	r1, r3
 8004750:	f000 f82d 	bl	80047ae <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3304      	adds	r3, #4
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f107 0108 	add.w	r1, r7, #8
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	4798      	blx	r3
    }
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
        buffer
    );
}

template <typename TypeAlias>
inline void CyphalInterface::cyphal_deserialize_transfer(
 800476e:	b580      	push	{r7, lr}
 8004770:	b086      	sub	sp, #24
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 800477a:	230c      	movs	r3, #12
 800477c:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj,(uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f107 0214 	add.w	r2, r7, #20
 8004786:	4619      	mov	r1, r3
 8004788:	68b8      	ldr	r0, [r7, #8]
 800478a:	f7fd fd4b 	bl	8002224 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 800478e:	4603      	mov	r3, r0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	09db      	lsrs	r3, r3, #7
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	3310      	adds	r3, #16
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff f831 	bl	8003808 <_ZNKSt8functionIFvvEEclEv>
    }
}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::cyphal_deserialize_transfer(
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b086      	sub	sp, #24
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 80047ba:	230c      	movs	r3, #12
 80047bc:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj,(uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f107 0214 	add.w	r2, r7, #20
 80047c6:	4619      	mov	r1, r3
 80047c8:	68b8      	ldr	r0, [r7, #8]
 80047ca:	f7fd fbb9 	bl	8001f40 <uavcan_node_Heartbeat_1_0_deserialize_>
 80047ce:	4603      	mov	r3, r0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	09db      	lsrs	r3, r3, #7
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	3310      	adds	r3, #16
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff f811 	bl	8003808 <_ZNKSt8functionIFvvEEclEv>
}
 80047e6:	bf00      	nop
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_GLOBAL__sub_I_buffer>:
 80047ee:	b580      	push	{r7, lr}
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047f6:	2001      	movs	r0, #1
 80047f8:	f7ff ff0a 	bl	8004610 <_Z41__static_initialization_and_destruction_0ii>
 80047fc:	bd80      	pop	{r7, pc}

080047fe <_GLOBAL__sub_D_buffer>:
 80047fe:	b580      	push	{r7, lr}
 8004800:	af00      	add	r7, sp, #0
 8004802:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004806:	2000      	movs	r0, #0
 8004808:	f7ff ff02 	bl	8004610 <_Z41__static_initialization_and_destruction_0ii>
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004816:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <HAL_MspInit+0x44>)
 8004818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481a:	4a0e      	ldr	r2, [pc, #56]	; (8004854 <HAL_MspInit+0x44>)
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	6613      	str	r3, [r2, #96]	; 0x60
 8004822:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <HAL_MspInit+0x44>)
 8004824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800482e:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_MspInit+0x44>)
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	4a08      	ldr	r2, [pc, #32]	; (8004854 <HAL_MspInit+0x44>)
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004838:	6593      	str	r3, [r2, #88]	; 0x58
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_MspInit+0x44>)
 800483c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004846:	f003 fcb1 	bl	80081ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40021000 	.word	0x40021000

08004858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800485c:	e7fe      	b.n	800485c <NMI_Handler+0x4>

0800485e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800485e:	b480      	push	{r7}
 8004860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004862:	e7fe      	b.n	8004862 <HardFault_Handler+0x4>

08004864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004868:	e7fe      	b.n	8004868 <MemManage_Handler+0x4>

0800486a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800486e:	e7fe      	b.n	800486e <BusFault_Handler+0x4>

08004870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004874:	e7fe      	b.n	8004874 <UsageFault_Handler+0x4>

08004876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004876:	b480      	push	{r7}
 8004878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004892:	b480      	push	{r7}
 8004894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048a4:	f000 fa20 	bl	8004ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048a8:	bf00      	nop
 80048aa:	bd80      	pop	{r7, pc}

080048ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80048b0:	4802      	ldr	r0, [pc, #8]	; (80048bc <USART2_IRQHandler+0x10>)
 80048b2:	f004 fc57 	bl	8009164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000398 	.word	0x20000398

080048c0 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80048c4:	4802      	ldr	r0, [pc, #8]	; (80048d0 <I2C4_EV_IRQHandler+0x10>)
 80048c6:	f001 fd2d 	bl	8006324 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000254 	.word	0x20000254

080048d4 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80048d8:	4802      	ldr	r0, [pc, #8]	; (80048e4 <I2C4_ER_IRQHandler+0x10>)
 80048da:	f001 fd3d 	bl	8006358 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000254 	.word	0x20000254

080048e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return 1;
 80048ec:	2301      	movs	r3, #1
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <_kill>:

int _kill(int pid, int sig)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004902:	f009 fde3 	bl	800e4cc <__errno>
 8004906:	4603      	mov	r3, r0
 8004908:	2216      	movs	r2, #22
 800490a:	601a      	str	r2, [r3, #0]
  return -1;
 800490c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <_exit>:

void _exit (int status)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004920:	f04f 31ff 	mov.w	r1, #4294967295
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff ffe7 	bl	80048f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800492a:	e7fe      	b.n	800492a <_exit+0x12>

0800492c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	e00a      	b.n	8004954 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800493e:	f3af 8000 	nop.w
 8004942:	4601      	mov	r1, r0
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	60ba      	str	r2, [r7, #8]
 800494a:	b2ca      	uxtb	r2, r1
 800494c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	3301      	adds	r3, #1
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	dbf0      	blt.n	800493e <_read+0x12>
  }

  return len;
 800495c:	687b      	ldr	r3, [r7, #4]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	e009      	b.n	800498c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	60ba      	str	r2, [r7, #8]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	3301      	adds	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	dbf1      	blt.n	8004978 <_write+0x12>
  }
  return len;
 8004994:	687b      	ldr	r3, [r7, #4]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <_close>:

int _close(int file)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049c6:	605a      	str	r2, [r3, #4]
  return 0;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <_isatty>:

int _isatty(int file)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80049de:	2301      	movs	r3, #1
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
	...

08004a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a10:	4a14      	ldr	r2, [pc, #80]	; (8004a64 <_sbrk+0x5c>)
 8004a12:	4b15      	ldr	r3, [pc, #84]	; (8004a68 <_sbrk+0x60>)
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a1c:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <_sbrk+0x64>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d102      	bne.n	8004a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a24:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <_sbrk+0x64>)
 8004a26:	4a12      	ldr	r2, [pc, #72]	; (8004a70 <_sbrk+0x68>)
 8004a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a2a:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <_sbrk+0x64>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4413      	add	r3, r2
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d207      	bcs.n	8004a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a38:	f009 fd48 	bl	800e4cc <__errno>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	220c      	movs	r2, #12
 8004a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a42:	f04f 33ff 	mov.w	r3, #4294967295
 8004a46:	e009      	b.n	8004a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <_sbrk+0x64>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a4e:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <_sbrk+0x64>)
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4413      	add	r3, r2
 8004a56:	4a05      	ldr	r2, [pc, #20]	; (8004a6c <_sbrk+0x64>)
 8004a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20020000 	.word	0x20020000
 8004a68:	00000400 	.word	0x00000400
 8004a6c:	20000394 	.word	0x20000394
 8004a70:	200005c8 	.word	0x200005c8

08004a74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <SystemInit+0x20>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	4a05      	ldr	r2, [pc, #20]	; (8004a94 <SystemInit+0x20>)
 8004a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a88:	bf00      	nop
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a9c:	4b22      	ldr	r3, [pc, #136]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004a9e:	4a23      	ldr	r2, [pc, #140]	; (8004b2c <MX_USART2_UART_Init+0x94>)
 8004aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004aa2:	4b21      	ldr	r3, [pc, #132]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004aaa:	4b1f      	ldr	r3, [pc, #124]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004ab6:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004abe:	220c      	movs	r2, #12
 8004ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ac2:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ac8:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ace:	4b16      	ldr	r3, [pc, #88]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ad4:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ada:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ae0:	4811      	ldr	r0, [pc, #68]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004ae2:	f004 faef 	bl	80090c4 <HAL_UART_Init>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004aec:	f7fc fec4 	bl	8001878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004af0:	2100      	movs	r1, #0
 8004af2:	480d      	ldr	r0, [pc, #52]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004af4:	f005 fc2d 	bl	800a352 <HAL_UARTEx_SetTxFifoThreshold>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004afe:	f7fc febb 	bl	8001878 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b02:	2100      	movs	r1, #0
 8004b04:	4808      	ldr	r0, [pc, #32]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004b06:	f005 fc62 	bl	800a3ce <HAL_UARTEx_SetRxFifoThreshold>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004b10:	f7fc feb2 	bl	8001878 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004b14:	4804      	ldr	r0, [pc, #16]	; (8004b28 <MX_USART2_UART_Init+0x90>)
 8004b16:	f005 fbe3 	bl	800a2e0 <HAL_UARTEx_DisableFifoMode>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004b20:	f7fc feaa 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004b24:	bf00      	nop
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000398 	.word	0x20000398
 8004b2c:	40004400 	.word	0x40004400

08004b30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b09e      	sub	sp, #120	; 0x78
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b48:	f107 0310 	add.w	r3, r7, #16
 8004b4c:	2254      	movs	r2, #84	; 0x54
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f009 fc14 	bl	800e37e <memset>
  if(uartHandle->Instance==USART2)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a23      	ldr	r2, [pc, #140]	; (8004be8 <HAL_UART_MspInit+0xb8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d13e      	bne.n	8004bde <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004b60:	2302      	movs	r3, #2
 8004b62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b68:	f107 0310 	add.w	r3, r7, #16
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f004 f85b 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004b78:	f7fc fe7e 	bl	8001878 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b7c:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <HAL_UART_MspInit+0xbc>)
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b80:	4a1a      	ldr	r2, [pc, #104]	; (8004bec <HAL_UART_MspInit+0xbc>)
 8004b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b86:	6593      	str	r3, [r2, #88]	; 0x58
 8004b88:	4b18      	ldr	r3, [pc, #96]	; (8004bec <HAL_UART_MspInit+0xbc>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b94:	4b15      	ldr	r3, [pc, #84]	; (8004bec <HAL_UART_MspInit+0xbc>)
 8004b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b98:	4a14      	ldr	r2, [pc, #80]	; (8004bec <HAL_UART_MspInit+0xbc>)
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_UART_MspInit+0xbc>)
 8004ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004bac:	230c      	movs	r3, #12
 8004bae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004bbc:	2307      	movs	r3, #7
 8004bbe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bca:	f000 ff31 	bl	8005a30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	2026      	movs	r0, #38	; 0x26
 8004bd4:	f000 f9a3 	bl	8004f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004bd8:	2026      	movs	r0, #38	; 0x26
 8004bda:	f000 f9ba 	bl	8004f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004bde:	bf00      	nop
 8004be0:	3778      	adds	r7, #120	; 0x78
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40004400 	.word	0x40004400
 8004bec:	40021000 	.word	0x40021000

08004bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004bf0:	480d      	ldr	r0, [pc, #52]	; (8004c28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004bf2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004bf4:	f7ff ff3e 	bl	8004a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bf8:	480c      	ldr	r0, [pc, #48]	; (8004c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8004bfa:	490d      	ldr	r1, [pc, #52]	; (8004c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004bfc:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <LoopForever+0xe>)
  movs r3, #0
 8004bfe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004c00:	e002      	b.n	8004c08 <LoopCopyDataInit>

08004c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c06:	3304      	adds	r3, #4

08004c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c0c:	d3f9      	bcc.n	8004c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c10:	4c0a      	ldr	r4, [pc, #40]	; (8004c3c <LoopForever+0x16>)
  movs r3, #0
 8004c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c14:	e001      	b.n	8004c1a <LoopFillZerobss>

08004c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c18:	3204      	adds	r2, #4

08004c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c1c:	d3fb      	bcc.n	8004c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c1e:	f009 fc5b 	bl	800e4d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c22:	f7fc fbf1 	bl	8001408 <main>

08004c26 <LoopForever>:

LoopForever:
    b LoopForever
 8004c26:	e7fe      	b.n	8004c26 <LoopForever>
  ldr   r0, =_estack
 8004c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c30:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004c34:	08012f3c 	.word	0x08012f3c
  ldr r2, =_sbss
 8004c38:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004c3c:	200005c4 	.word	0x200005c4

08004c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c40:	e7fe      	b.n	8004c40 <ADC1_2_IRQHandler>

08004c42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c4c:	2003      	movs	r0, #3
 8004c4e:	f000 f95b 	bl	8004f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c52:	200f      	movs	r0, #15
 8004c54:	f000 f80e 	bl	8004c74 <HAL_InitTick>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	71fb      	strb	r3, [r7, #7]
 8004c62:	e001      	b.n	8004c68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004c64:	f7ff fdd4 	bl	8004810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c68:	79fb      	ldrb	r3, [r7, #7]

}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004c80:	4b16      	ldr	r3, [pc, #88]	; (8004cdc <HAL_InitTick+0x68>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d022      	beq.n	8004cce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004c88:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <HAL_InitTick+0x6c>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <HAL_InitTick+0x68>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c94:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f966 	bl	8004f6e <HAL_SYSTICK_Config>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10f      	bne.n	8004cc8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	d809      	bhi.n	8004cc2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cae:	2200      	movs	r2, #0
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb6:	f000 f932 	bl	8004f1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004cba:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <HAL_InitTick+0x70>)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	e007      	b.n	8004cd2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	73fb      	strb	r3, [r7, #15]
 8004cc6:	e004      	b.n	8004cd2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
 8004ccc:	e001      	b.n	8004cd2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000008 	.word	0x20000008
 8004ce0:	20000000 	.word	0x20000000
 8004ce4:	20000004 	.word	0x20000004

08004ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <HAL_IncTick+0x1c>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <HAL_IncTick+0x20>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	4a03      	ldr	r2, [pc, #12]	; (8004d04 <HAL_IncTick+0x1c>)
 8004cf8:	6013      	str	r3, [r2, #0]
}
 8004cfa:	bf00      	nop
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	2000042c 	.word	0x2000042c
 8004d08:	20000008 	.word	0x20000008

08004d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d10:	4b03      	ldr	r3, [pc, #12]	; (8004d20 <HAL_GetTick+0x14>)
 8004d12:	681b      	ldr	r3, [r3, #0]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	2000042c 	.word	0x2000042c

08004d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d2c:	f7ff ffee 	bl	8004d0c <HAL_GetTick>
 8004d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3c:	d004      	beq.n	8004d48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d3e:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <HAL_Delay+0x40>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4413      	add	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d48:	bf00      	nop
 8004d4a:	f7ff ffdf 	bl	8004d0c <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d8f7      	bhi.n	8004d4a <HAL_Delay+0x26>
  {
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	20000008 	.word	0x20000008

08004d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <__NVIC_SetPriorityGrouping+0x44>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d84:	4013      	ands	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d9a:	4a04      	ldr	r2, [pc, #16]	; (8004dac <__NVIC_SetPriorityGrouping+0x44>)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	60d3      	str	r3, [r2, #12]
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	e000ed00 	.word	0xe000ed00

08004db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004db4:	4b04      	ldr	r3, [pc, #16]	; (8004dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	f003 0307 	and.w	r3, r3, #7
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	e000ed00 	.word	0xe000ed00

08004dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	db0b      	blt.n	8004df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	f003 021f 	and.w	r2, r3, #31
 8004de4:	4907      	ldr	r1, [pc, #28]	; (8004e04 <__NVIC_EnableIRQ+0x38>)
 8004de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	2001      	movs	r0, #1
 8004dee:	fa00 f202 	lsl.w	r2, r0, r2
 8004df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	e000e100 	.word	0xe000e100

08004e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	6039      	str	r1, [r7, #0]
 8004e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	db0a      	blt.n	8004e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	490c      	ldr	r1, [pc, #48]	; (8004e54 <__NVIC_SetPriority+0x4c>)
 8004e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e26:	0112      	lsls	r2, r2, #4
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e30:	e00a      	b.n	8004e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	4908      	ldr	r1, [pc, #32]	; (8004e58 <__NVIC_SetPriority+0x50>)
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	3b04      	subs	r3, #4
 8004e40:	0112      	lsls	r2, r2, #4
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	440b      	add	r3, r1
 8004e46:	761a      	strb	r2, [r3, #24]
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	e000e100 	.word	0xe000e100
 8004e58:	e000ed00 	.word	0xe000ed00

08004e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b089      	sub	sp, #36	; 0x24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f1c3 0307 	rsb	r3, r3, #7
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	bf28      	it	cs
 8004e7a:	2304      	movcs	r3, #4
 8004e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	3304      	adds	r3, #4
 8004e82:	2b06      	cmp	r3, #6
 8004e84:	d902      	bls.n	8004e8c <NVIC_EncodePriority+0x30>
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	3b03      	subs	r3, #3
 8004e8a:	e000      	b.n	8004e8e <NVIC_EncodePriority+0x32>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e90:	f04f 32ff 	mov.w	r2, #4294967295
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43da      	mvns	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004eae:	43d9      	mvns	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb4:	4313      	orrs	r3, r2
         );
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3724      	adds	r7, #36	; 0x24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed4:	d301      	bcc.n	8004eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e00f      	b.n	8004efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eda:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <SysTick_Config+0x40>)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ee2:	210f      	movs	r1, #15
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee8:	f7ff ff8e 	bl	8004e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <SysTick_Config+0x40>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ef2:	4b04      	ldr	r3, [pc, #16]	; (8004f04 <SysTick_Config+0x40>)
 8004ef4:	2207      	movs	r2, #7
 8004ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	e000e010 	.word	0xe000e010

08004f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff ff29 	bl	8004d68 <__NVIC_SetPriorityGrouping>
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b086      	sub	sp, #24
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	4603      	mov	r3, r0
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	607a      	str	r2, [r7, #4]
 8004f2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f2c:	f7ff ff40 	bl	8004db0 <__NVIC_GetPriorityGrouping>
 8004f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	6978      	ldr	r0, [r7, #20]
 8004f38:	f7ff ff90 	bl	8004e5c <NVIC_EncodePriority>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff ff5f 	bl	8004e08 <__NVIC_SetPriority>
}
 8004f4a:	bf00      	nop
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	4603      	mov	r3, r0
 8004f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff ff33 	bl	8004dcc <__NVIC_EnableIRQ>
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff ffa4 	bl	8004ec4 <SysTick_Config>
 8004f7c:	4603      	mov	r3, r0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d005      	beq.n	8004faa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
 8004fa8:	e037      	b.n	800501a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 020e 	bic.w	r2, r2, #14
 8004fb8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fc8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0201 	bic.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	f003 021f 	and.w	r2, r3, #31
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ff6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00c      	beq.n	800501a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800500e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005018:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d00d      	beq.n	800506c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2204      	movs	r2, #4
 8005054:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
 800506a:	e047      	b.n	80050fc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 020e 	bic.w	r2, r2, #14
 800507a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005096:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800509a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a0:	f003 021f 	and.w	r2, r3, #31
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	2101      	movs	r1, #1
 80050aa:	fa01 f202 	lsl.w	r2, r1, r2
 80050ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00c      	beq.n	80050dc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80050da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	4798      	blx	r3
    }
  }
  return status;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005114:	b2db      	uxtb	r3, r3
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e147      	b.n	80053c6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fb ffc0 	bl	80010d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0210 	bic.w	r2, r2, #16
 800515e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005160:	f7ff fdd4 	bl	8004d0c <HAL_GetTick>
 8005164:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005166:	e012      	b.n	800518e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005168:	f7ff fdd0 	bl	8004d0c <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b0a      	cmp	r3, #10
 8005174:	d90b      	bls.n	800518e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517a:	f043 0201 	orr.w	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2203      	movs	r2, #3
 8005186:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e11b      	b.n	80053c6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b08      	cmp	r3, #8
 800519a:	d0e5      	beq.n	8005168 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051ac:	f7ff fdae 	bl	8004d0c <HAL_GetTick>
 80051b0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80051b2:	e012      	b.n	80051da <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80051b4:	f7ff fdaa 	bl	8004d0c <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b0a      	cmp	r3, #10
 80051c0:	d90b      	bls.n	80051da <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c6:	f043 0201 	orr.w	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2203      	movs	r2, #3
 80051d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e0f5      	b.n	80053c6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0e5      	beq.n	80051b4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0202 	orr.w	r2, r2, #2
 80051f6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a74      	ldr	r2, [pc, #464]	; (80053d0 <HAL_FDCAN_Init+0x2ac>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d103      	bne.n	800520a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005202:	4a74      	ldr	r2, [pc, #464]	; (80053d4 <HAL_FDCAN_Init+0x2b0>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	7c1b      	ldrb	r3, [r3, #16]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d108      	bne.n	8005224 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699a      	ldr	r2, [r3, #24]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005220:	619a      	str	r2, [r3, #24]
 8005222:	e007      	b.n	8005234 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005232:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	7c5b      	ldrb	r3, [r3, #17]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d108      	bne.n	800524e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800524a:	619a      	str	r2, [r3, #24]
 800524c:	e007      	b.n	800525e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800525c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	7c9b      	ldrb	r3, [r3, #18]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d108      	bne.n	8005278 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699a      	ldr	r2, [r3, #24]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005274:	619a      	str	r2, [r3, #24]
 8005276:	e007      	b.n	8005288 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005286:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699a      	ldr	r2, [r3, #24]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80052ac:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0210 	bic.w	r2, r2, #16
 80052bc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d108      	bne.n	80052d8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0204 	orr.w	r2, r2, #4
 80052d4:	619a      	str	r2, [r3, #24]
 80052d6:	e02c      	b.n	8005332 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d028      	beq.n	8005332 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d01c      	beq.n	8005322 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052f6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691a      	ldr	r2, [r3, #16]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0210 	orr.w	r2, r2, #16
 8005306:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d110      	bne.n	8005332 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0220 	orr.w	r2, r2, #32
 800531e:	619a      	str	r2, [r3, #24]
 8005320:	e007      	b.n	8005332 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699a      	ldr	r2, [r3, #24]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0220 	orr.w	r2, r2, #32
 8005330:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	3b01      	subs	r3, #1
 8005338:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	3b01      	subs	r3, #1
 8005340:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005342:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800534a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	3b01      	subs	r3, #1
 8005354:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800535a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800535c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005366:	d115      	bne.n	8005394 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	3b01      	subs	r3, #1
 8005374:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005376:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	3b01      	subs	r3, #1
 800537e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005380:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	3b01      	subs	r3, #1
 800538a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005390:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005392:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fa58 	bl	8005860 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40006400 	.word	0x40006400
 80053d4:	40006500 	.word	0x40006500

080053d8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80053e8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80053ea:	7dfb      	ldrb	r3, [r7, #23]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d002      	beq.n	80053f6 <HAL_FDCAN_ConfigFilter+0x1e>
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d13d      	bne.n	8005472 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d119      	bne.n	8005432 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800540a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005412:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e01d      	b.n	800546e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	075a      	lsls	r2, r3, #29
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	079a      	lsls	r2, r3, #30
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	4413      	add	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	3304      	adds	r3, #4
 8005466:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	e006      	b.n	8005480 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005476:	f043 0202 	orr.w	r2, r3, #2
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
  }
}
 8005480:	4618      	mov	r0, r3
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d116      	bne.n	80054d4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ae:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	011a      	lsls	r2, r3, #4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	431a      	orrs	r2, r3
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	431a      	orrs	r2, r3
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e006      	b.n	80054e2 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d8:	f043 0204 	orr.w	r2, r3, #4
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b01      	cmp	r3, #1
 8005504:	d108      	bne.n	8005518 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	0219      	lsls	r1, r3, #8
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	430a      	orrs	r2, r1
 8005512:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e006      	b.n	8005526 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551c:	f043 0204 	orr.w	r2, r3, #4
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b01      	cmp	r3, #1
 8005544:	d109      	bne.n	800555a <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005554:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	e006      	b.n	8005568 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555e:	f043 0204 	orr.w	r2, r3, #4
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
  }
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d110      	bne.n	80055aa <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0201 	bic.w	r2, r2, #1
 800559e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e006      	b.n	80055b8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ae:	f043 0204 	orr.w	r2, r3, #4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
  }
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d12c      	bne.n	8005636 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80055e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d007      	beq.n	80055fc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e023      	b.n	8005644 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005604:	0c1b      	lsrs	r3, r3, #16
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f990 	bl	8005938 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2101      	movs	r1, #1
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	fa01 f202 	lsl.w	r2, r1, r2
 8005624:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005628:	2201      	movs	r2, #1
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	409a      	lsls	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	e006      	b.n	8005644 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563a:	f043 0208 	orr.w	r2, r3, #8
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
  }
}
 8005644:	4618      	mov	r0, r3
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800564c:	b480      	push	{r7}
 800564e:	b08b      	sub	sp, #44	; 0x2c
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005660:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005662:	7efb      	ldrb	r3, [r7, #27]
 8005664:	2b02      	cmp	r3, #2
 8005666:	f040 80bc 	bne.w	80057e2 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b40      	cmp	r3, #64	; 0x40
 800566e:	d121      	bne.n	80056b4 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	2b00      	cmp	r3, #0
 800567e:	d107      	bne.n	8005690 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005684:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0af      	b.n	80057f0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005698:	0a1b      	lsrs	r3, r3, #8
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	4613      	mov	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	4413      	add	r3, r2
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	440b      	add	r3, r1
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
 80056b2:	e020      	b.n	80056f6 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d107      	bne.n	80056d4 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e08d      	b.n	80057f0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056dc:	0a1b      	lsrs	r3, r3, #8
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	4613      	mov	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	4413      	add	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	440b      	add	r3, r1
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d107      	bne.n	800571a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	0c9b      	lsrs	r3, r3, #18
 8005710:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e005      	b.n	8005726 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	3304      	adds	r3, #4
 8005742:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	0e1b      	lsrs	r3, r3, #24
 8005778:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	0fda      	lsrs	r2, r3, #31
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	3304      	adds	r3, #4
 800578e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005794:	2300      	movs	r3, #0
 8005796:	623b      	str	r3, [r7, #32]
 8005798:	e00a      	b.n	80057b0 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	441a      	add	r2, r3
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	440b      	add	r3, r1
 80057a6:	7812      	ldrb	r2, [r2, #0]
 80057a8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	3301      	adds	r3, #1
 80057ae:	623b      	str	r3, [r7, #32]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	0c1b      	lsrs	r3, r3, #16
 80057b6:	4a11      	ldr	r2, [pc, #68]	; (80057fc <HAL_FDCAN_GetRxMessage+0x1b0>)
 80057b8:	5cd3      	ldrb	r3, [r2, r3]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	4293      	cmp	r3, r2
 80057c0:	d3eb      	bcc.n	800579a <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b40      	cmp	r3, #64	; 0x40
 80057c6:	d105      	bne.n	80057d4 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80057d2:	e004      	b.n	80057de <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	e006      	b.n	80057f0 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e6:	f043 0208 	orr.w	r2, r3, #8
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
  }
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	372c      	adds	r7, #44	; 0x2c
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	080124d4 	.word	0x080124d4

08005800 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d107      	bne.n	8005820 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	e006      	b.n	800582e <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800582e:	68fb      	ldr	r3, [r7, #12]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005852:	68fb      	ldr	r3, [r7, #12]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005868:	4b30      	ldr	r3, [pc, #192]	; (800592c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800586a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a2f      	ldr	r2, [pc, #188]	; (8005930 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d103      	bne.n	800587e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800587c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a2c      	ldr	r2, [pc, #176]	; (8005934 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d103      	bne.n	8005890 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800588e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800589e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a6:	041a      	lsls	r2, r3, #16
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	061a      	lsls	r2, r3, #24
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	e005      	b.n	8005912 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3304      	adds	r3, #4
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	429a      	cmp	r2, r3
 800591c:	d3f3      	bcc.n	8005906 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800591e:	bf00      	nop
 8005920:	bf00      	nop
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	4000a400 	.word	0x4000a400
 8005930:	40006800 	.word	0x40006800
 8005934:	40006c00 	.word	0x40006c00

08005938 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8005938:	b480      	push	{r7}
 800593a:	b089      	sub	sp, #36	; 0x24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005956:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800595e:	4313      	orrs	r3, r2
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	e00a      	b.n	800597a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800596c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005972:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005978:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005984:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800598a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005990:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	4613      	mov	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	4413      	add	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	440b      	add	r3, r1
 80059aa:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	3304      	adds	r3, #4
 80059b6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	3304      	adds	r3, #4
 80059c2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	e020      	b.n	8005a0c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	3303      	adds	r3, #3
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	4413      	add	r3, r2
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	3302      	adds	r3, #2
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	440b      	add	r3, r1
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80059e2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	3301      	adds	r3, #1
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	440b      	add	r3, r1
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80059f0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	440a      	add	r2, r1
 80059f8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80059fa:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	3304      	adds	r3, #4
 8005a04:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	4a06      	ldr	r2, [pc, #24]	; (8005a2c <FDCAN_CopyMessageToRAM+0xf4>)
 8005a14:	5cd3      	ldrb	r3, [r2, r3]
 8005a16:	461a      	mov	r2, r3
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d3d5      	bcc.n	80059ca <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8005a1e:	bf00      	nop
 8005a20:	bf00      	nop
 8005a22:	3724      	adds	r7, #36	; 0x24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	080124d4 	.word	0x080124d4

08005a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005a3e:	e15a      	b.n	8005cf6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	2101      	movs	r1, #1
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 814c 	beq.w	8005cf0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 0303 	and.w	r3, r3, #3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d005      	beq.n	8005a70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d130      	bne.n	8005ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	43db      	mvns	r3, r3
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4013      	ands	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	091b      	lsrs	r3, r3, #4
 8005abc:	f003 0201 	and.w	r2, r3, #1
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d017      	beq.n	8005b0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	2203      	movs	r2, #3
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4013      	ands	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d123      	bne.n	8005b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	08da      	lsrs	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3208      	adds	r2, #8
 8005b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	220f      	movs	r2, #15
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	43db      	mvns	r3, r3
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	08da      	lsrs	r2, r3, #3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3208      	adds	r2, #8
 8005b5c:	6939      	ldr	r1, [r7, #16]
 8005b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43db      	mvns	r3, r3
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4013      	ands	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f003 0203 	and.w	r2, r3, #3
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 80a6 	beq.w	8005cf0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ba4:	4b5b      	ldr	r3, [pc, #364]	; (8005d14 <HAL_GPIO_Init+0x2e4>)
 8005ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba8:	4a5a      	ldr	r2, [pc, #360]	; (8005d14 <HAL_GPIO_Init+0x2e4>)
 8005baa:	f043 0301 	orr.w	r3, r3, #1
 8005bae:	6613      	str	r3, [r2, #96]	; 0x60
 8005bb0:	4b58      	ldr	r3, [pc, #352]	; (8005d14 <HAL_GPIO_Init+0x2e4>)
 8005bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	60bb      	str	r3, [r7, #8]
 8005bba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bbc:	4a56      	ldr	r2, [pc, #344]	; (8005d18 <HAL_GPIO_Init+0x2e8>)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	089b      	lsrs	r3, r3, #2
 8005bc2:	3302      	adds	r3, #2
 8005bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	220f      	movs	r2, #15
 8005bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005be6:	d01f      	beq.n	8005c28 <HAL_GPIO_Init+0x1f8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a4c      	ldr	r2, [pc, #304]	; (8005d1c <HAL_GPIO_Init+0x2ec>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d019      	beq.n	8005c24 <HAL_GPIO_Init+0x1f4>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a4b      	ldr	r2, [pc, #300]	; (8005d20 <HAL_GPIO_Init+0x2f0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d013      	beq.n	8005c20 <HAL_GPIO_Init+0x1f0>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a4a      	ldr	r2, [pc, #296]	; (8005d24 <HAL_GPIO_Init+0x2f4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00d      	beq.n	8005c1c <HAL_GPIO_Init+0x1ec>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a49      	ldr	r2, [pc, #292]	; (8005d28 <HAL_GPIO_Init+0x2f8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d007      	beq.n	8005c18 <HAL_GPIO_Init+0x1e8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a48      	ldr	r2, [pc, #288]	; (8005d2c <HAL_GPIO_Init+0x2fc>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d101      	bne.n	8005c14 <HAL_GPIO_Init+0x1e4>
 8005c10:	2305      	movs	r3, #5
 8005c12:	e00a      	b.n	8005c2a <HAL_GPIO_Init+0x1fa>
 8005c14:	2306      	movs	r3, #6
 8005c16:	e008      	b.n	8005c2a <HAL_GPIO_Init+0x1fa>
 8005c18:	2304      	movs	r3, #4
 8005c1a:	e006      	b.n	8005c2a <HAL_GPIO_Init+0x1fa>
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e004      	b.n	8005c2a <HAL_GPIO_Init+0x1fa>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e002      	b.n	8005c2a <HAL_GPIO_Init+0x1fa>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <HAL_GPIO_Init+0x1fa>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	f002 0203 	and.w	r2, r2, #3
 8005c30:	0092      	lsls	r2, r2, #2
 8005c32:	4093      	lsls	r3, r2
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c3a:	4937      	ldr	r1, [pc, #220]	; (8005d18 <HAL_GPIO_Init+0x2e8>)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	089b      	lsrs	r3, r3, #2
 8005c40:	3302      	adds	r3, #2
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c48:	4b39      	ldr	r3, [pc, #228]	; (8005d30 <HAL_GPIO_Init+0x300>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	43db      	mvns	r3, r3
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4013      	ands	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c6c:	4a30      	ldr	r2, [pc, #192]	; (8005d30 <HAL_GPIO_Init+0x300>)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005c72:	4b2f      	ldr	r3, [pc, #188]	; (8005d30 <HAL_GPIO_Init+0x300>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c96:	4a26      	ldr	r2, [pc, #152]	; (8005d30 <HAL_GPIO_Init+0x300>)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c9c:	4b24      	ldr	r3, [pc, #144]	; (8005d30 <HAL_GPIO_Init+0x300>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005cc0:	4a1b      	ldr	r2, [pc, #108]	; (8005d30 <HAL_GPIO_Init+0x300>)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005cc6:	4b1a      	ldr	r3, [pc, #104]	; (8005d30 <HAL_GPIO_Init+0x300>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005cea:	4a11      	ldr	r2, [pc, #68]	; (8005d30 <HAL_GPIO_Init+0x300>)
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f47f ae9d 	bne.w	8005a40 <HAL_GPIO_Init+0x10>
  }
}
 8005d06:	bf00      	nop
 8005d08:	bf00      	nop
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40021000 	.word	0x40021000
 8005d18:	40010000 	.word	0x40010000
 8005d1c:	48000400 	.word	0x48000400
 8005d20:	48000800 	.word	0x48000800
 8005d24:	48000c00 	.word	0x48000c00
 8005d28:	48001000 	.word	0x48001000
 8005d2c:	48001400 	.word	0x48001400
 8005d30:	40010400 	.word	0x40010400

08005d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	807b      	strh	r3, [r7, #2]
 8005d40:	4613      	mov	r3, r2
 8005d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d44:	787b      	ldrb	r3, [r7, #1]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d4a:	887a      	ldrh	r2, [r7, #2]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d50:	e002      	b.n	8005d58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d52:	887a      	ldrh	r2, [r7, #2]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d76:	887a      	ldrh	r2, [r7, #2]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	041a      	lsls	r2, r3, #16
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	43d9      	mvns	r1, r3
 8005d82:	887b      	ldrh	r3, [r7, #2]
 8005d84:	400b      	ands	r3, r1
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	619a      	str	r2, [r3, #24]
}
 8005d8c:	bf00      	nop
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e08d      	b.n	8005ec6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fb fa9a 	bl	80012f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2224      	movs	r2, #36	; 0x24
 8005dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005de8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005df8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d107      	bne.n	8005e12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e0e:	609a      	str	r2, [r3, #8]
 8005e10:	e006      	b.n	8005e20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005e1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d108      	bne.n	8005e3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	e007      	b.n	8005e4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	69d9      	ldr	r1, [r3, #28]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	4608      	mov	r0, r1
 8005eda:	4611      	mov	r1, r2
 8005edc:	461a      	mov	r2, r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	817b      	strh	r3, [r7, #10]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	813b      	strh	r3, [r7, #8]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	f040 80fd 	bne.w	80060f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_I2C_Mem_Read+0x34>
 8005efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e0f1      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_I2C_Mem_Read+0x4e>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e0ea      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f26:	f7fe fef1 	bl	8004d0c <HAL_GetTick>
 8005f2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	2319      	movs	r3, #25
 8005f32:	2201      	movs	r2, #1
 8005f34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f001 fd24 	bl	8007986 <I2C_WaitOnFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0d5      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2222      	movs	r2, #34	; 0x22
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2240      	movs	r2, #64	; 0x40
 8005f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a3a      	ldr	r2, [r7, #32]
 8005f62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f70:	88f8      	ldrh	r0, [r7, #6]
 8005f72:	893a      	ldrh	r2, [r7, #8]
 8005f74:	8979      	ldrh	r1, [r7, #10]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	4603      	mov	r3, r0
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 ffb5 	bl	8006ef0 <I2C_RequestMemoryRead>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e0ad      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2bff      	cmp	r3, #255	; 0xff
 8005fa0:	d90e      	bls.n	8005fc0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	22ff      	movs	r2, #255	; 0xff
 8005fa6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	8979      	ldrh	r1, [r7, #10]
 8005fb0:	4b52      	ldr	r3, [pc, #328]	; (80060fc <HAL_I2C_Mem_Read+0x22c>)
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f001 fea7 	bl	8007d0c <I2C_TransferConfig>
 8005fbe:	e00f      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	8979      	ldrh	r1, [r7, #10]
 8005fd2:	4b4a      	ldr	r3, [pc, #296]	; (80060fc <HAL_I2C_Mem_Read+0x22c>)
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f001 fe96 	bl	8007d0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2104      	movs	r1, #4
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f001 fccb 	bl	8007986 <I2C_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e07c      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d034      	beq.n	80060a0 <HAL_I2C_Mem_Read+0x1d0>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603a:	2b00      	cmp	r3, #0
 800603c:	d130      	bne.n	80060a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	2200      	movs	r2, #0
 8006046:	2180      	movs	r1, #128	; 0x80
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f001 fc9c 	bl	8007986 <I2C_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e04d      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605c:	b29b      	uxth	r3, r3
 800605e:	2bff      	cmp	r3, #255	; 0xff
 8006060:	d90e      	bls.n	8006080 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	22ff      	movs	r2, #255	; 0xff
 8006066:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606c:	b2da      	uxtb	r2, r3
 800606e:	8979      	ldrh	r1, [r7, #10]
 8006070:	2300      	movs	r3, #0
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f001 fe47 	bl	8007d0c <I2C_TransferConfig>
 800607e:	e00f      	b.n	80060a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608e:	b2da      	uxtb	r2, r3
 8006090:	8979      	ldrh	r1, [r7, #10]
 8006092:	2300      	movs	r3, #0
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f001 fe36 	bl	8007d0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d19a      	bne.n	8005fe0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f001 fd09 	bl	8007ac6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e01a      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2220      	movs	r2, #32
 80060c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6859      	ldr	r1, [r3, #4]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <HAL_I2C_Mem_Read+0x230>)
 80060d2:	400b      	ands	r3, r1
 80060d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	e000      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80060f2:	2302      	movs	r3, #2
  }
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	80002400 	.word	0x80002400
 8006100:	fe00e800 	.word	0xfe00e800

08006104 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af02      	add	r7, sp, #8
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	4608      	mov	r0, r1
 800610e:	4611      	mov	r1, r2
 8006110:	461a      	mov	r2, r3
 8006112:	4603      	mov	r3, r0
 8006114:	817b      	strh	r3, [r7, #10]
 8006116:	460b      	mov	r3, r1
 8006118:	813b      	strh	r3, [r7, #8]
 800611a:	4613      	mov	r3, r2
 800611c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b20      	cmp	r3, #32
 8006128:	d16a      	bne.n	8006200 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_I2C_Mem_Write_IT+0x32>
 8006130:	8bbb      	ldrh	r3, [r7, #28]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d105      	bne.n	8006142 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800613c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e05f      	b.n	8006202 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800614c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006150:	d101      	bne.n	8006156 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8006152:	2302      	movs	r3, #2
 8006154:	e055      	b.n	8006202 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800615c:	2b01      	cmp	r3, #1
 800615e:	d101      	bne.n	8006164 <HAL_I2C_Mem_Write_IT+0x60>
 8006160:	2302      	movs	r3, #2
 8006162:	e04e      	b.n	8006202 <HAL_I2C_Mem_Write_IT+0xfe>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2221      	movs	r2, #33	; 0x21
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2240      	movs	r2, #64	; 0x40
 8006178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8bba      	ldrh	r2, [r7, #28]
 8006192:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4a1d      	ldr	r2, [pc, #116]	; (800620c <HAL_I2C_Mem_Write_IT+0x108>)
 8006198:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4a1c      	ldr	r2, [pc, #112]	; (8006210 <HAL_I2C_Mem_Write_IT+0x10c>)
 800619e:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80061a0:	897a      	ldrh	r2, [r7, #10]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d109      	bne.n	80061c0 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061ac:	893b      	ldrh	r3, [r7, #8]
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f04f 32ff 	mov.w	r2, #4294967295
 80061bc:	651a      	str	r2, [r3, #80]	; 0x50
 80061be:	e00b      	b.n	80061d8 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061c0:	893b      	ldrh	r3, [r7, #8]
 80061c2:	0a1b      	lsrs	r3, r3, #8
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80061ce:	893b      	ldrh	r3, [r7, #8]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	8979      	ldrh	r1, [r7, #10]
 80061de:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <HAL_I2C_Mem_Write_IT+0x110>)
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f001 fd90 	bl	8007d0c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80061f4:	2101      	movs	r1, #1
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f001 fdba 	bl	8007d70 <I2C_Enable_IRQ>

    return HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	e000      	b.n	8006202 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006200:	2302      	movs	r3, #2
  }
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	ffff0000 	.word	0xffff0000
 8006210:	080064e1 	.word	0x080064e1
 8006214:	80002000 	.word	0x80002000

08006218 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	4608      	mov	r0, r1
 8006222:	4611      	mov	r1, r2
 8006224:	461a      	mov	r2, r3
 8006226:	4603      	mov	r3, r0
 8006228:	817b      	strh	r3, [r7, #10]
 800622a:	460b      	mov	r3, r1
 800622c:	813b      	strh	r3, [r7, #8]
 800622e:	4613      	mov	r3, r2
 8006230:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b20      	cmp	r3, #32
 800623c:	d166      	bne.n	800630c <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <HAL_I2C_Mem_Read_IT+0x32>
 8006244:	8bbb      	ldrh	r3, [r7, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d105      	bne.n	8006256 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006250:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e05b      	b.n	800630e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006264:	d101      	bne.n	800626a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8006266:	2302      	movs	r3, #2
 8006268:	e051      	b.n	800630e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_I2C_Mem_Read_IT+0x60>
 8006274:	2302      	movs	r3, #2
 8006276:	e04a      	b.n	800630e <HAL_I2C_Mem_Read_IT+0xf6>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2222      	movs	r2, #34	; 0x22
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2240      	movs	r2, #64	; 0x40
 800628c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8bba      	ldrh	r2, [r7, #28]
 80062a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <HAL_I2C_Mem_Read_IT+0x100>)
 80062a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a1c      	ldr	r2, [pc, #112]	; (800631c <HAL_I2C_Mem_Read_IT+0x104>)
 80062ac:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80062ae:	897a      	ldrh	r2, [r7, #10]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d109      	bne.n	80062ce <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062ba:	893b      	ldrh	r3, [r7, #8]
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ca:	651a      	str	r2, [r3, #80]	; 0x50
 80062cc:	e00b      	b.n	80062e6 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062ce:	893b      	ldrh	r3, [r7, #8]
 80062d0:	0a1b      	lsrs	r3, r3, #8
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80062dc:	893b      	ldrh	r3, [r7, #8]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	461a      	mov	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	8979      	ldrh	r1, [r7, #10]
 80062ec:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <HAL_I2C_Mem_Read_IT+0x108>)
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2300      	movs	r3, #0
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f001 fd0a 	bl	8007d0c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006300:	2101      	movs	r1, #1
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f001 fd34 	bl	8007d70 <I2C_Enable_IRQ>

    return HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	e000      	b.n	800630e <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800630c:	2302      	movs	r3, #2
  }
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	ffff0000 	.word	0xffff0000
 800631c:	080064e1 	.word	0x080064e1
 8006320:	80002000 	.word	0x80002000

08006324 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	68f9      	ldr	r1, [r7, #12]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4798      	blx	r3
  }
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00f      	beq.n	800639a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006388:	f043 0201 	orr.w	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006398:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00f      	beq.n	80063c4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	f043 0208 	orr.w	r2, r3, #8
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00f      	beq.n	80063ee <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063dc:	f043 0202 	orr.w	r2, r3, #2
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 030b 	and.w	r3, r3, #11
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80063fe:	68f9      	ldr	r1, [r7, #12]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 f967 	bl	80076d4 <I2C_ITError>
  }
}
 8006406:	bf00      	nop
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
 800646a:	4613      	mov	r3, r2
 800646c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
	...

080064e0 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80064ec:	4b8d      	ldr	r3, [pc, #564]	; (8006724 <I2C_Mem_ISR_IT+0x244>)
 80064ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <I2C_Mem_ISR_IT+0x22>
 80064fe:	2302      	movs	r3, #2
 8006500:	e10c      	b.n	800671c <I2C_Mem_ISR_IT+0x23c>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f003 0310 	and.w	r3, r3, #16
 8006510:	2b00      	cmp	r3, #0
 8006512:	d012      	beq.n	800653a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00d      	beq.n	800653a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2210      	movs	r2, #16
 8006524:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652a:	f043 0204 	orr.w	r2, r3, #4
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f001 f9e5 	bl	8007902 <I2C_Flush_TXDR>
 8006538:	e0dd      	b.n	80066f6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d022      	beq.n	800658a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01d      	beq.n	800658a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f023 0304 	bic.w	r3, r3, #4
 8006554:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006572:	3b01      	subs	r3, #1
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657e:	b29b      	uxth	r3, r3
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006588:	e0b5      	b.n	80066f6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d02c      	beq.n	80065ee <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800659a:	2b00      	cmp	r3, #0
 800659c:	d027      	beq.n	80065ee <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	d118      	bne.n	80065da <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	781a      	ldrb	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80065d8:	e08d      	b.n	80066f6 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80065e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ea:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80065ec:	e083      	b.n	80066f6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d03c      	beq.n	8006672 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d037      	beq.n	8006672 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d02c      	beq.n	8006666 <I2C_Mem_ISR_IT+0x186>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006610:	2b00      	cmp	r3, #0
 8006612:	d128      	bne.n	8006666 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006618:	b29b      	uxth	r3, r3
 800661a:	2bff      	cmp	r3, #255	; 0xff
 800661c:	d910      	bls.n	8006640 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	22ff      	movs	r2, #255	; 0xff
 8006622:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006628:	b299      	uxth	r1, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662e:	b2da      	uxtb	r2, r3
 8006630:	2300      	movs	r3, #0
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f001 fb67 	bl	8007d0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800663e:	e017      	b.n	8006670 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664e:	b299      	uxth	r1, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006654:	b2da      	uxtb	r2, r3
 8006656:	2300      	movs	r3, #0
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f001 fb54 	bl	8007d0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006664:	e004      	b.n	8006670 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006666:	2140      	movs	r1, #64	; 0x40
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f001 f833 	bl	80076d4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800666e:	e042      	b.n	80066f6 <I2C_Mem_ISR_IT+0x216>
 8006670:	e041      	b.n	80066f6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d03c      	beq.n	80066f6 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006682:	2b00      	cmp	r3, #0
 8006684:	d037      	beq.n	80066f6 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006686:	2101      	movs	r1, #1
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f001 fbf5 	bl	8007e78 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800668e:	2102      	movs	r1, #2
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f001 fb6d 	bl	8007d70 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b22      	cmp	r3, #34	; 0x22
 80066a0:	d101      	bne.n	80066a6 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80066a2:	4b21      	ldr	r3, [pc, #132]	; (8006728 <I2C_Mem_ISR_IT+0x248>)
 80066a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2bff      	cmp	r3, #255	; 0xff
 80066ae:	d910      	bls.n	80066d2 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	22ff      	movs	r2, #255	; 0xff
 80066b4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ba:	b299      	uxth	r1, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f001 fb1e 	bl	8007d0c <I2C_TransferConfig>
 80066d0:	e011      	b.n	80066f6 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e0:	b299      	uxth	r1, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f001 fb0b 	bl	8007d0c <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f003 0320 	and.w	r3, r3, #32
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800670a:	6939      	ldr	r1, [r7, #16]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fd61 	bl	80071d4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	80002000 	.word	0x80002000
 8006728:	80002400 	.word	0x80002400

0800672c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <I2C_Slave_ISR_IT+0x24>
 800674c:	2302      	movs	r3, #2
 800674e:	e0e2      	b.n	8006916 <I2C_Slave_ISR_IT+0x1ea>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	d009      	beq.n	8006776 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006768:	2b00      	cmp	r3, #0
 800676a:	d004      	beq.n	8006776 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800676c:	6939      	ldr	r1, [r7, #16]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 fdf8 	bl	8007364 <I2C_ITSlaveCplt>
 8006774:	e0ca      	b.n	800690c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b00      	cmp	r3, #0
 800677e:	d04b      	beq.n	8006818 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006786:	2b00      	cmp	r3, #0
 8006788:	d046      	beq.n	8006818 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d128      	bne.n	80067e6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b28      	cmp	r3, #40	; 0x28
 800679e:	d108      	bne.n	80067b2 <I2C_Slave_ISR_IT+0x86>
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067a6:	d104      	bne.n	80067b2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80067a8:	6939      	ldr	r1, [r7, #16]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 ff3e 	bl	800762c <I2C_ITListenCplt>
 80067b0:	e031      	b.n	8006816 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b29      	cmp	r3, #41	; 0x29
 80067bc:	d10e      	bne.n	80067dc <I2C_Slave_ISR_IT+0xb0>
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067c4:	d00a      	beq.n	80067dc <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2210      	movs	r2, #16
 80067cc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f001 f897 	bl	8007902 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 fca0 	bl	800711a <I2C_ITSlaveSeqCplt>
 80067da:	e01c      	b.n	8006816 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2210      	movs	r2, #16
 80067e2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80067e4:	e08f      	b.n	8006906 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2210      	movs	r2, #16
 80067ec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f2:	f043 0204 	orr.w	r2, r3, #4
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <I2C_Slave_ISR_IT+0xdc>
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006806:	d17e      	bne.n	8006906 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680c:	4619      	mov	r1, r3
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 ff60 	bl	80076d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006814:	e077      	b.n	8006906 <I2C_Slave_ISR_IT+0x1da>
 8006816:	e076      	b.n	8006906 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f003 0304 	and.w	r3, r3, #4
 800681e:	2b00      	cmp	r3, #0
 8006820:	d02f      	beq.n	8006882 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006828:	2b00      	cmp	r3, #0
 800682a:	d02a      	beq.n	8006882 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d018      	beq.n	8006868 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d14b      	bne.n	800690a <I2C_Slave_ISR_IT+0x1de>
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006878:	d047      	beq.n	800690a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 fc4d 	bl	800711a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006880:	e043      	b.n	800690a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b00      	cmp	r3, #0
 800688a:	d009      	beq.n	80068a0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006892:	2b00      	cmp	r3, #0
 8006894:	d004      	beq.n	80068a0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006896:	6939      	ldr	r1, [r7, #16]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fb7d 	bl	8006f98 <I2C_ITAddrCplt>
 800689e:	e035      	b.n	800690c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d030      	beq.n	800690c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d02b      	beq.n	800690c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d018      	beq.n	80068f0 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	781a      	ldrb	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	851a      	strh	r2, [r3, #40]	; 0x28
 80068ee:	e00d      	b.n	800690c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068f6:	d002      	beq.n	80068fe <I2C_Slave_ISR_IT+0x1d2>
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fc0b 	bl	800711a <I2C_ITSlaveSeqCplt>
 8006904:	e002      	b.n	800690c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006906:	bf00      	nop
 8006908:	e000      	b.n	800690c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800690a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b088      	sub	sp, #32
 8006922:	af02      	add	r7, sp, #8
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <I2C_Master_ISR_DMA+0x1a>
 8006934:	2302      	movs	r3, #2
 8006936:	e0d9      	b.n	8006aec <I2C_Master_ISR_DMA+0x1ce>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f003 0310 	and.w	r3, r3, #16
 8006946:	2b00      	cmp	r3, #0
 8006948:	d016      	beq.n	8006978 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006950:	2b00      	cmp	r3, #0
 8006952:	d011      	beq.n	8006978 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2210      	movs	r2, #16
 800695a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006960:	f043 0204 	orr.w	r2, r3, #4
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006968:	2120      	movs	r1, #32
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f001 fa00 	bl	8007d70 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 ffc6 	bl	8007902 <I2C_Flush_TXDR>
 8006976:	e0b4      	b.n	8006ae2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697e:	2b00      	cmp	r3, #0
 8006980:	d071      	beq.n	8006a66 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006988:	2b00      	cmp	r3, #0
 800698a:	d06c      	beq.n	8006a66 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800699a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d04e      	beq.n	8006a44 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069b2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2bff      	cmp	r3, #255	; 0xff
 80069bc:	d906      	bls.n	80069cc <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	22ff      	movs	r2, #255	; 0xff
 80069c2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80069c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	e010      	b.n	80069ee <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069de:	d003      	beq.n	80069e8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	e002      	b.n	80069ee <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80069e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069ec:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	8a79      	ldrh	r1, [r7, #18]
 80069f6:	2300      	movs	r3, #0
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f001 f985 	bl	8007d0c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b22      	cmp	r3, #34	; 0x22
 8006a1e:	d108      	bne.n	8006a32 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a2e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a30:	e057      	b.n	8006ae2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a40:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a42:	e04e      	b.n	8006ae2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a52:	d003      	beq.n	8006a5c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 fb23 	bl	80070a0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006a5a:	e042      	b.n	8006ae2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a5c:	2140      	movs	r1, #64	; 0x40
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 fe38 	bl	80076d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006a64:	e03d      	b.n	8006ae2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d028      	beq.n	8006ac2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d023      	beq.n	8006ac2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d119      	bne.n	8006ab8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a92:	d025      	beq.n	8006ae0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a9c:	d108      	bne.n	8006ab0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aac:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006aae:	e017      	b.n	8006ae0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 faf5 	bl	80070a0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006ab6:	e013      	b.n	8006ae0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006ab8:	2140      	movs	r1, #64	; 0x40
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fe0a 	bl	80076d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006ac0:	e00e      	b.n	8006ae0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00a      	beq.n	8006ae2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006ad6:	68b9      	ldr	r1, [r7, #8]
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fb7b 	bl	80071d4 <I2C_ITMasterCplt>
 8006ade:	e000      	b.n	8006ae2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006ae0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006b00:	4b8d      	ldr	r3, [pc, #564]	; (8006d38 <I2C_Mem_ISR_DMA+0x244>)
 8006b02:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <I2C_Mem_ISR_DMA+0x1e>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e10e      	b.n	8006d30 <I2C_Mem_ISR_DMA+0x23c>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f003 0310 	and.w	r3, r3, #16
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d016      	beq.n	8006b52 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d011      	beq.n	8006b52 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2210      	movs	r2, #16
 8006b34:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3a:	f043 0204 	orr.w	r2, r3, #4
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b42:	2120      	movs	r1, #32
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f001 f913 	bl	8007d70 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 fed9 	bl	8007902 <I2C_Flush_TXDR>
 8006b50:	e0e9      	b.n	8006d26 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00e      	beq.n	8006b7a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006b6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f04f 32ff 	mov.w	r2, #4294967295
 8006b76:	651a      	str	r2, [r3, #80]	; 0x50
 8006b78:	e0d5      	b.n	8006d26 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d05f      	beq.n	8006c44 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d05a      	beq.n	8006c44 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b8e:	2101      	movs	r1, #1
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f001 f971 	bl	8007e78 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006b96:	2110      	movs	r1, #16
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f001 f8e9 	bl	8007d70 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d048      	beq.n	8006c3a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2bff      	cmp	r3, #255	; 0xff
 8006bb0:	d910      	bls.n	8006bd4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	22ff      	movs	r2, #255	; 0xff
 8006bb6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbc:	b299      	uxth	r1, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f001 f89d 	bl	8007d0c <I2C_TransferConfig>
 8006bd2:	e011      	b.n	8006bf8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be2:	b299      	uxth	r1, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	2300      	movs	r3, #0
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f001 f88a 	bl	8007d0c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b22      	cmp	r3, #34	; 0x22
 8006c14:	d108      	bne.n	8006c28 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c24:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c26:	e07e      	b.n	8006d26 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c36:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c38:	e075      	b.n	8006d26 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006c3a:	2140      	movs	r1, #64	; 0x40
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 fd49 	bl	80076d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006c42:	e070      	b.n	8006d26 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d05d      	beq.n	8006d0a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d058      	beq.n	8006d0a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c58:	2101      	movs	r1, #1
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f001 f90c 	bl	8007e78 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006c60:	2110      	movs	r1, #16
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f001 f884 	bl	8007d70 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b22      	cmp	r3, #34	; 0x22
 8006c72:	d101      	bne.n	8006c78 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006c74:	4b31      	ldr	r3, [pc, #196]	; (8006d3c <I2C_Mem_ISR_DMA+0x248>)
 8006c76:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2bff      	cmp	r3, #255	; 0xff
 8006c80:	d910      	bls.n	8006ca4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	22ff      	movs	r2, #255	; 0xff
 8006c86:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8c:	b299      	uxth	r1, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f001 f835 	bl	8007d0c <I2C_TransferConfig>
 8006ca2:	e011      	b.n	8006cc8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb2:	b299      	uxth	r1, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f001 f822 	bl	8007d0c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b22      	cmp	r3, #34	; 0x22
 8006ce4:	d108      	bne.n	8006cf8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cf4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cf6:	e016      	b.n	8006d26 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d06:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d08:	e00d      	b.n	8006d26 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d008      	beq.n	8006d26 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 fa57 	bl	80071d4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	80002000 	.word	0x80002000
 8006d3c:	80002400 	.word	0x80002400

08006d40 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <I2C_Slave_ISR_DMA+0x24>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e0c0      	b.n	8006ee6 <I2C_Slave_ISR_DMA+0x1a6>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d009      	beq.n	8006d8a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006d80:	68b9      	ldr	r1, [r7, #8]
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 faee 	bl	8007364 <I2C_ITSlaveCplt>
 8006d88:	e0a8      	b.n	8006edc <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8095 	beq.w	8006ec0 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 808f 	beq.w	8006ec0 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d07d      	beq.n	8006eb2 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00c      	beq.n	8006dd8 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00c      	beq.n	8006dfa <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d007      	beq.n	8006dfa <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8006df6:	2301      	movs	r3, #1
 8006df8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d128      	bne.n	8006e52 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b28      	cmp	r3, #40	; 0x28
 8006e0a:	d108      	bne.n	8006e1e <I2C_Slave_ISR_DMA+0xde>
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e12:	d104      	bne.n	8006e1e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fc08 	bl	800762c <I2C_ITListenCplt>
 8006e1c:	e048      	b.n	8006eb0 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b29      	cmp	r3, #41	; 0x29
 8006e28:	d10e      	bne.n	8006e48 <I2C_Slave_ISR_DMA+0x108>
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e30:	d00a      	beq.n	8006e48 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2210      	movs	r2, #16
 8006e38:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fd61 	bl	8007902 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f96a 	bl	800711a <I2C_ITSlaveSeqCplt>
 8006e46:	e033      	b.n	8006eb0 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2210      	movs	r2, #16
 8006e4e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006e50:	e034      	b.n	8006ebc <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2210      	movs	r2, #16
 8006e58:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5e:	f043 0204 	orr.w	r2, r3, #4
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e6c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x13c>
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e7a:	d11f      	bne.n	8006ebc <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	2b21      	cmp	r3, #33	; 0x21
 8006e80:	d002      	beq.n	8006e88 <I2C_Slave_ISR_DMA+0x148>
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	2b29      	cmp	r3, #41	; 0x29
 8006e86:	d103      	bne.n	8006e90 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2221      	movs	r2, #33	; 0x21
 8006e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8006e8e:	e008      	b.n	8006ea2 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
 8006e92:	2b22      	cmp	r3, #34	; 0x22
 8006e94:	d002      	beq.n	8006e9c <I2C_Slave_ISR_DMA+0x15c>
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	2b2a      	cmp	r3, #42	; 0x2a
 8006e9a:	d102      	bne.n	8006ea2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2222      	movs	r2, #34	; 0x22
 8006ea0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fc13 	bl	80076d4 <I2C_ITError>
      if (treatdmanack == 1U)
 8006eae:	e005      	b.n	8006ebc <I2C_Slave_ISR_DMA+0x17c>
 8006eb0:	e004      	b.n	8006ebc <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2210      	movs	r2, #16
 8006eb8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006eba:	e00f      	b.n	8006edc <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8006ebc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006ebe:	e00d      	b.n	8006edc <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d008      	beq.n	8006edc <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 f85e 	bl	8006f98 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3720      	adds	r7, #32
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	4608      	mov	r0, r1
 8006efa:	4611      	mov	r1, r2
 8006efc:	461a      	mov	r2, r3
 8006efe:	4603      	mov	r3, r0
 8006f00:	817b      	strh	r3, [r7, #10]
 8006f02:	460b      	mov	r3, r1
 8006f04:	813b      	strh	r3, [r7, #8]
 8006f06:	4613      	mov	r3, r2
 8006f08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006f0a:	88fb      	ldrh	r3, [r7, #6]
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	8979      	ldrh	r1, [r7, #10]
 8006f10:	4b20      	ldr	r3, [pc, #128]	; (8006f94 <I2C_RequestMemoryRead+0xa4>)
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	2300      	movs	r3, #0
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 fef8 	bl	8007d0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f1c:	69fa      	ldr	r2, [r7, #28]
 8006f1e:	69b9      	ldr	r1, [r7, #24]
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fd89 	bl	8007a38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e02c      	b.n	8006f8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d105      	bne.n	8006f42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f36:	893b      	ldrh	r3, [r7, #8]
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8006f40:	e015      	b.n	8006f6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f42:	893b      	ldrh	r3, [r7, #8]
 8006f44:	0a1b      	lsrs	r3, r3, #8
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	69b9      	ldr	r1, [r7, #24]
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 fd6f 	bl	8007a38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e012      	b.n	8006f8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f64:	893b      	ldrh	r3, [r7, #8]
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2200      	movs	r2, #0
 8006f76:	2140      	movs	r1, #64	; 0x40
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 fd04 	bl	8007986 <I2C_WaitOnFlagUntilTimeout>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e000      	b.n	8006f8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	80002000 	.word	0x80002000

08006f98 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006fae:	2b28      	cmp	r3, #40	; 0x28
 8006fb0:	d16a      	bne.n	8007088 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	0c1b      	lsrs	r3, r3, #16
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	0c1b      	lsrs	r3, r3, #16
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006fd0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fde:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006fec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d138      	bne.n	8007068 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006ff6:	897b      	ldrh	r3, [r7, #10]
 8006ff8:	09db      	lsrs	r3, r3, #7
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	89bb      	ldrh	r3, [r7, #12]
 8006ffe:	4053      	eors	r3, r2
 8007000:	b29b      	uxth	r3, r3
 8007002:	f003 0306 	and.w	r3, r3, #6
 8007006:	2b00      	cmp	r3, #0
 8007008:	d11c      	bne.n	8007044 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800700a:	897b      	ldrh	r3, [r7, #10]
 800700c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800701c:	2b02      	cmp	r3, #2
 800701e:	d13b      	bne.n	8007098 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2208      	movs	r2, #8
 800702c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007036:	89ba      	ldrh	r2, [r7, #12]
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff fa0e 	bl	800645e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007042:	e029      	b.n	8007098 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007044:	893b      	ldrh	r3, [r7, #8]
 8007046:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 ff13 	bl	8007e78 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800705a:	89ba      	ldrh	r2, [r7, #12]
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7ff f9fc 	bl	800645e <HAL_I2C_AddrCallback>
}
 8007066:	e017      	b.n	8007098 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 ff03 	bl	8007e78 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800707a:	89ba      	ldrh	r2, [r7, #12]
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff f9ec 	bl	800645e <HAL_I2C_AddrCallback>
}
 8007086:	e007      	b.n	8007098 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2208      	movs	r2, #8
 800708e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b21      	cmp	r3, #33	; 0x21
 80070ba:	d115      	bne.n	80070e8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2211      	movs	r2, #17
 80070c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80070d0:	2101      	movs	r1, #1
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fed0 	bl	8007e78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff f994 	bl	800640e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80070e6:	e014      	b.n	8007112 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2212      	movs	r2, #18
 80070f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80070fc:	2102      	movs	r1, #2
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 feba 	bl	8007e78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff f988 	bl	8006422 <HAL_I2C_MasterRxCpltCallback>
}
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d008      	beq.n	800714e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	e00c      	b.n	8007168 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d007      	beq.n	8007168 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007166:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b29      	cmp	r3, #41	; 0x29
 8007172:	d112      	bne.n	800719a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2228      	movs	r2, #40	; 0x28
 8007178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2221      	movs	r2, #33	; 0x21
 8007180:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007182:	2101      	movs	r1, #1
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fe77 	bl	8007e78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff f94f 	bl	8006436 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007198:	e017      	b.n	80071ca <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b2a      	cmp	r3, #42	; 0x2a
 80071a4:	d111      	bne.n	80071ca <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2228      	movs	r2, #40	; 0x28
 80071aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2222      	movs	r2, #34	; 0x22
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80071b4:	2102      	movs	r1, #2
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fe5e 	bl	8007e78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff f940 	bl	800644a <HAL_I2C_SlaveRxCpltCallback>
}
 80071ca:	bf00      	nop
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2220      	movs	r2, #32
 80071e8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b21      	cmp	r3, #33	; 0x21
 80071f4:	d107      	bne.n	8007206 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80071f6:	2101      	movs	r1, #1
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fe3d 	bl	8007e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2211      	movs	r2, #17
 8007202:	631a      	str	r2, [r3, #48]	; 0x30
 8007204:	e00c      	b.n	8007220 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b22      	cmp	r3, #34	; 0x22
 8007210:	d106      	bne.n	8007220 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007212:	2102      	movs	r1, #2
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fe2f 	bl	8007e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2212      	movs	r2, #18
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6859      	ldr	r1, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4b4c      	ldr	r3, [pc, #304]	; (800735c <I2C_ITMasterCplt+0x188>)
 800722c:	400b      	ands	r3, r1
 800722e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a49      	ldr	r2, [pc, #292]	; (8007360 <I2C_ITMasterCplt+0x18c>)
 800723a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f003 0310 	and.w	r3, r3, #16
 8007242:	2b00      	cmp	r3, #0
 8007244:	d009      	beq.n	800725a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2210      	movs	r2, #16
 800724c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	f043 0204 	orr.w	r2, r3, #4
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b60      	cmp	r3, #96	; 0x60
 8007264:	d10a      	bne.n	800727c <I2C_ITMasterCplt+0xa8>
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	b2db      	uxtb	r3, r3
 8007278:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800727a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fb40 	bl	8007902 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007286:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b60      	cmp	r3, #96	; 0x60
 8007292:	d002      	beq.n	800729a <I2C_ITMasterCplt+0xc6>
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d006      	beq.n	80072a8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fa17 	bl	80076d4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80072a6:	e054      	b.n	8007352 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b21      	cmp	r3, #33	; 0x21
 80072b2:	d124      	bne.n	80072fe <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b40      	cmp	r3, #64	; 0x40
 80072cc:	d10b      	bne.n	80072e6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff f8d5 	bl	800648e <HAL_I2C_MemTxCpltCallback>
}
 80072e4:	e035      	b.n	8007352 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff f889 	bl	800640e <HAL_I2C_MasterTxCpltCallback>
}
 80072fc:	e029      	b.n	8007352 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b22      	cmp	r3, #34	; 0x22
 8007308:	d123      	bne.n	8007352 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2220      	movs	r2, #32
 800730e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b40      	cmp	r3, #64	; 0x40
 8007322:	d10b      	bne.n	800733c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff f8b4 	bl	80064a2 <HAL_I2C_MemRxCpltCallback>
}
 800733a:	e00a      	b.n	8007352 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff f868 	bl	8006422 <HAL_I2C_MasterRxCpltCallback>
}
 8007352:	bf00      	nop
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	fe00e800 	.word	0xfe00e800
 8007360:	ffff0000 	.word	0xffff0000

08007364 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007386:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2220      	movs	r2, #32
 800738e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	2b21      	cmp	r3, #33	; 0x21
 8007394:	d002      	beq.n	800739c <I2C_ITSlaveCplt+0x38>
 8007396:	7afb      	ldrb	r3, [r7, #11]
 8007398:	2b29      	cmp	r3, #41	; 0x29
 800739a:	d108      	bne.n	80073ae <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800739c:	f248 0101 	movw	r1, #32769	; 0x8001
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fd69 	bl	8007e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2221      	movs	r2, #33	; 0x21
 80073aa:	631a      	str	r2, [r3, #48]	; 0x30
 80073ac:	e019      	b.n	80073e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80073ae:	7afb      	ldrb	r3, [r7, #11]
 80073b0:	2b22      	cmp	r3, #34	; 0x22
 80073b2:	d002      	beq.n	80073ba <I2C_ITSlaveCplt+0x56>
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	2b2a      	cmp	r3, #42	; 0x2a
 80073b8:	d108      	bne.n	80073cc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80073ba:	f248 0102 	movw	r1, #32770	; 0x8002
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fd5a 	bl	8007e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2222      	movs	r2, #34	; 0x22
 80073c8:	631a      	str	r2, [r3, #48]	; 0x30
 80073ca:	e00a      	b.n	80073e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80073cc:	7afb      	ldrb	r3, [r7, #11]
 80073ce:	2b28      	cmp	r3, #40	; 0x28
 80073d0:	d107      	bne.n	80073e2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80073d2:	f248 0103 	movw	r1, #32771	; 0x8003
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fd4e 	bl	8007e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073f0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6859      	ldr	r1, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	4b89      	ldr	r3, [pc, #548]	; (8007624 <I2C_ITSlaveCplt+0x2c0>)
 80073fe:	400b      	ands	r3, r1
 8007400:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa7d 	bl	8007902 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d013      	beq.n	800743a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007420:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007426:	2b00      	cmp	r3, #0
 8007428:	d01f      	beq.n	800746a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	b29a      	uxth	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007438:	e017      	b.n	800746a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d012      	beq.n	800746a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007452:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d006      	beq.n	800746a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	b29a      	uxth	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d020      	beq.n	80074b6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f023 0304 	bic.w	r3, r3, #4
 800747a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00c      	beq.n	80074b6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a0:	3b01      	subs	r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	3b01      	subs	r3, #1
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d005      	beq.n	80074cc <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c4:	f043 0204 	orr.w	r2, r3, #4
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f003 0310 	and.w	r3, r3, #16
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d049      	beq.n	800756a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d044      	beq.n	800756a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d128      	bne.n	800753c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b28      	cmp	r3, #40	; 0x28
 80074f4:	d108      	bne.n	8007508 <I2C_ITSlaveCplt+0x1a4>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074fc:	d104      	bne.n	8007508 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80074fe:	6979      	ldr	r1, [r7, #20]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f893 	bl	800762c <I2C_ITListenCplt>
 8007506:	e030      	b.n	800756a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b29      	cmp	r3, #41	; 0x29
 8007512:	d10e      	bne.n	8007532 <I2C_ITSlaveCplt+0x1ce>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800751a:	d00a      	beq.n	8007532 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2210      	movs	r2, #16
 8007522:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f9ec 	bl	8007902 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff fdf5 	bl	800711a <I2C_ITSlaveSeqCplt>
 8007530:	e01b      	b.n	800756a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2210      	movs	r2, #16
 8007538:	61da      	str	r2, [r3, #28]
 800753a:	e016      	b.n	800756a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2210      	movs	r2, #16
 8007542:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007548:	f043 0204 	orr.w	r2, r3, #4
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <I2C_ITSlaveCplt+0x1fa>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800755c:	d105      	bne.n	800756a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f8b5 	bl	80076d4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757c:	2b00      	cmp	r3, #0
 800757e:	d010      	beq.n	80075a2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f8a4 	bl	80076d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b28      	cmp	r3, #40	; 0x28
 8007596:	d141      	bne.n	800761c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007598:	6979      	ldr	r1, [r7, #20]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f846 	bl	800762c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075a0:	e03c      	b.n	800761c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075aa:	d014      	beq.n	80075d6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f7ff fdb4 	bl	800711a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a1c      	ldr	r2, [pc, #112]	; (8007628 <I2C_ITSlaveCplt+0x2c4>)
 80075b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7fe ff53 	bl	800647a <HAL_I2C_ListenCpltCallback>
}
 80075d4:	e022      	b.n	800761c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b22      	cmp	r3, #34	; 0x22
 80075e0:	d10e      	bne.n	8007600 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2220      	movs	r2, #32
 80075e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fe ff26 	bl	800644a <HAL_I2C_SlaveRxCpltCallback>
}
 80075fe:	e00d      	b.n	800761c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fe ff0d 	bl	8006436 <HAL_I2C_SlaveTxCpltCallback>
}
 800761c:	bf00      	nop
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	fe00e800 	.word	0xfe00e800
 8007628:	ffff0000 	.word	0xffff0000

0800762c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a25      	ldr	r2, [pc, #148]	; (80076d0 <I2C_ITListenCplt+0xa4>)
 800763a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	d022      	beq.n	80076a8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800767e:	2b00      	cmp	r3, #0
 8007680:	d012      	beq.n	80076a8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a0:	f043 0204 	orr.w	r2, r3, #4
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076a8:	f248 0103 	movw	r1, #32771	; 0x8003
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fbe3 	bl	8007e78 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2210      	movs	r2, #16
 80076b8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7fe fed9 	bl	800647a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80076c8:	bf00      	nop
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	ffff0000 	.word	0xffff0000

080076d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076e4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a6d      	ldr	r2, [pc, #436]	; (80078a8 <I2C_ITError+0x1d4>)
 80076f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	431a      	orrs	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	2b28      	cmp	r3, #40	; 0x28
 800770a:	d005      	beq.n	8007718 <I2C_ITError+0x44>
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	2b29      	cmp	r3, #41	; 0x29
 8007710:	d002      	beq.n	8007718 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	2b2a      	cmp	r3, #42	; 0x2a
 8007716:	d10b      	bne.n	8007730 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007718:	2103      	movs	r1, #3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fbac 	bl	8007e78 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2228      	movs	r2, #40	; 0x28
 8007724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a60      	ldr	r2, [pc, #384]	; (80078ac <I2C_ITError+0x1d8>)
 800772c:	635a      	str	r2, [r3, #52]	; 0x34
 800772e:	e030      	b.n	8007792 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007730:	f248 0103 	movw	r1, #32771	; 0x8003
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fb9f 	bl	8007e78 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f8e1 	bl	8007902 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b60      	cmp	r3, #96	; 0x60
 800774a:	d01f      	beq.n	800778c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b20      	cmp	r3, #32
 8007760:	d114      	bne.n	800778c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	f003 0310 	and.w	r3, r3, #16
 800776c:	2b10      	cmp	r3, #16
 800776e:	d109      	bne.n	8007784 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2210      	movs	r2, #16
 8007776:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800777c:	f043 0204 	orr.w	r2, r3, #4
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2220      	movs	r2, #32
 800778a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	2b00      	cmp	r3, #0
 800779e:	d039      	beq.n	8007814 <I2C_ITError+0x140>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b11      	cmp	r3, #17
 80077a4:	d002      	beq.n	80077ac <I2C_ITError+0xd8>
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b21      	cmp	r3, #33	; 0x21
 80077aa:	d133      	bne.n	8007814 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ba:	d107      	bne.n	80077cc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fd fc98 	bl	8005106 <HAL_DMA_GetState>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d017      	beq.n	800780c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	4a33      	ldr	r2, [pc, #204]	; (80078b0 <I2C_ITError+0x1dc>)
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fd fc21 	bl	8005038 <HAL_DMA_Abort_IT>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d04d      	beq.n	8007898 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007806:	4610      	mov	r0, r2
 8007808:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800780a:	e045      	b.n	8007898 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f851 	bl	80078b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007812:	e041      	b.n	8007898 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007818:	2b00      	cmp	r3, #0
 800781a:	d039      	beq.n	8007890 <I2C_ITError+0x1bc>
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2b12      	cmp	r3, #18
 8007820:	d002      	beq.n	8007828 <I2C_ITError+0x154>
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b22      	cmp	r3, #34	; 0x22
 8007826:	d133      	bne.n	8007890 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007836:	d107      	bne.n	8007848 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007846:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784c:	4618      	mov	r0, r3
 800784e:	f7fd fc5a 	bl	8005106 <HAL_DMA_GetState>
 8007852:	4603      	mov	r3, r0
 8007854:	2b01      	cmp	r3, #1
 8007856:	d017      	beq.n	8007888 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785c:	4a14      	ldr	r2, [pc, #80]	; (80078b0 <I2C_ITError+0x1dc>)
 800785e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786c:	4618      	mov	r0, r3
 800786e:	f7fd fbe3 	bl	8005038 <HAL_DMA_Abort_IT>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d011      	beq.n	800789c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007882:	4610      	mov	r0, r2
 8007884:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007886:	e009      	b.n	800789c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f813 	bl	80078b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800788e:	e005      	b.n	800789c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f80f 	bl	80078b4 <I2C_TreatErrorCallback>
  }
}
 8007896:	e002      	b.n	800789e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007898:	bf00      	nop
 800789a:	e000      	b.n	800789e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800789c:	bf00      	nop
}
 800789e:	bf00      	nop
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	ffff0000 	.word	0xffff0000
 80078ac:	0800672d 	.word	0x0800672d
 80078b0:	0800794b 	.word	0x0800794b

080078b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b60      	cmp	r3, #96	; 0x60
 80078c6:	d10e      	bne.n	80078e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fe fdf3 	bl	80064ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078e4:	e009      	b.n	80078fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7fe fdde 	bl	80064b6 <HAL_I2C_ErrorCallback>
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b02      	cmp	r3, #2
 8007916:	d103      	bne.n	8007920 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2200      	movs	r2, #0
 800791e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b01      	cmp	r3, #1
 800792c:	d007      	beq.n	800793e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	699a      	ldr	r2, [r3, #24]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0201 	orr.w	r2, r2, #1
 800793c:	619a      	str	r2, [r3, #24]
  }
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007964:	2200      	movs	r2, #0
 8007966:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007974:	2200      	movs	r2, #0
 8007976:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f7ff ff9b 	bl	80078b4 <I2C_TreatErrorCallback>
}
 800797e:	bf00      	nop
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	603b      	str	r3, [r7, #0]
 8007992:	4613      	mov	r3, r2
 8007994:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007996:	e03b      	b.n	8007a10 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f8d5 	bl	8007b4c <I2C_IsErrorOccurred>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e041      	b.n	8007a30 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b2:	d02d      	beq.n	8007a10 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079b4:	f7fd f9aa 	bl	8004d0c <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d302      	bcc.n	80079ca <I2C_WaitOnFlagUntilTimeout+0x44>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d122      	bne.n	8007a10 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699a      	ldr	r2, [r3, #24]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4013      	ands	r3, r2
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	bf0c      	ite	eq
 80079da:	2301      	moveq	r3, #1
 80079dc:	2300      	movne	r3, #0
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	79fb      	ldrb	r3, [r7, #7]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d113      	bne.n	8007a10 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ec:	f043 0220 	orr.w	r2, r3, #32
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2220      	movs	r2, #32
 80079f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e00f      	b.n	8007a30 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699a      	ldr	r2, [r3, #24]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	bf0c      	ite	eq
 8007a20:	2301      	moveq	r3, #1
 8007a22:	2300      	movne	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d0b4      	beq.n	8007998 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a44:	e033      	b.n	8007aae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	68b9      	ldr	r1, [r7, #8]
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f87e 	bl	8007b4c <I2C_IsErrorOccurred>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e031      	b.n	8007abe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a60:	d025      	beq.n	8007aae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a62:	f7fd f953 	bl	8004d0c <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d302      	bcc.n	8007a78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d11a      	bne.n	8007aae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d013      	beq.n	8007aae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8a:	f043 0220 	orr.w	r2, r3, #32
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e007      	b.n	8007abe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d1c4      	bne.n	8007a46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ad2:	e02f      	b.n	8007b34 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	68b9      	ldr	r1, [r7, #8]
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 f837 	bl	8007b4c <I2C_IsErrorOccurred>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e02d      	b.n	8007b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ae8:	f7fd f910 	bl	8004d0c <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d302      	bcc.n	8007afe <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d11a      	bne.n	8007b34 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b20      	cmp	r3, #32
 8007b0a:	d013      	beq.n	8007b34 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b10:	f043 0220 	orr.w	r2, r3, #32
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e007      	b.n	8007b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d1c8      	bne.n	8007ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08a      	sub	sp, #40	; 0x28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d068      	beq.n	8007c4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2210      	movs	r2, #16
 8007b7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b80:	e049      	b.n	8007c16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d045      	beq.n	8007c16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b8a:	f7fd f8bf 	bl	8004d0c <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <I2C_IsErrorOccurred+0x54>
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d13a      	bne.n	8007c16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007baa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bc2:	d121      	bne.n	8007c08 <I2C_IsErrorOccurred+0xbc>
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bca:	d01d      	beq.n	8007c08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007bcc:	7cfb      	ldrb	r3, [r7, #19]
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	d01a      	beq.n	8007c08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007be0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007be2:	f7fd f893 	bl	8004d0c <HAL_GetTick>
 8007be6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007be8:	e00e      	b.n	8007c08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007bea:	f7fd f88f 	bl	8004d0c <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b19      	cmp	r3, #25
 8007bf6:	d907      	bls.n	8007c08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	f043 0320 	orr.w	r3, r3, #32
 8007bfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007c06:	e006      	b.n	8007c16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b20      	cmp	r3, #32
 8007c14:	d1e9      	bne.n	8007bea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	f003 0320 	and.w	r3, r3, #32
 8007c20:	2b20      	cmp	r3, #32
 8007c22:	d003      	beq.n	8007c2c <I2C_IsErrorOccurred+0xe0>
 8007c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d0aa      	beq.n	8007b82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d103      	bne.n	8007c3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	f043 0304 	orr.w	r3, r3, #4
 8007c42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	f043 0301 	orr.w	r3, r3, #1
 8007c62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00b      	beq.n	8007c96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	f043 0308 	orr.w	r3, r3, #8
 8007c84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	f043 0302 	orr.w	r3, r3, #2
 8007ca6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01c      	beq.n	8007cfa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f7ff fe1e 	bl	8007902 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6859      	ldr	r1, [r3, #4]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <I2C_IsErrorOccurred+0x1bc>)
 8007cd2:	400b      	ands	r3, r1
 8007cd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2220      	movs	r2, #32
 8007ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3728      	adds	r7, #40	; 0x28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	fe00e800 	.word	0xfe00e800

08007d0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	607b      	str	r3, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	817b      	strh	r3, [r7, #10]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d1e:	897b      	ldrh	r3, [r7, #10]
 8007d20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007d24:	7a7b      	ldrb	r3, [r7, #9]
 8007d26:	041b      	lsls	r3, r3, #16
 8007d28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	0d5b      	lsrs	r3, r3, #21
 8007d46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007d4a:	4b08      	ldr	r3, [pc, #32]	; (8007d6c <I2C_TransferConfig+0x60>)
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	43db      	mvns	r3, r3
 8007d50:	ea02 0103 	and.w	r1, r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007d5e:	bf00      	nop
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	03ff63ff 	.word	0x03ff63ff

08007d70 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d84:	4a39      	ldr	r2, [pc, #228]	; (8007e6c <I2C_Enable_IRQ+0xfc>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d032      	beq.n	8007df0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007d8e:	4a38      	ldr	r2, [pc, #224]	; (8007e70 <I2C_Enable_IRQ+0x100>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d02d      	beq.n	8007df0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007d98:	4a36      	ldr	r2, [pc, #216]	; (8007e74 <I2C_Enable_IRQ+0x104>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d028      	beq.n	8007df0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007d9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	da03      	bge.n	8007dae <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007dac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007dae:	887b      	ldrh	r3, [r7, #2]
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007dbe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007dc0:	887b      	ldrh	r3, [r7, #2]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007dd0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007dd2:	887b      	ldrh	r3, [r7, #2]
 8007dd4:	2b10      	cmp	r3, #16
 8007dd6:	d103      	bne.n	8007de0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007dde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007de0:	887b      	ldrh	r3, [r7, #2]
 8007de2:	2b20      	cmp	r3, #32
 8007de4:	d133      	bne.n	8007e4e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f043 0320 	orr.w	r3, r3, #32
 8007dec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007dee:	e02e      	b.n	8007e4e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007df0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	da03      	bge.n	8007e00 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007dfe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007e00:	887b      	ldrh	r3, [r7, #2]
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007e10:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007e12:	887b      	ldrh	r3, [r7, #2]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007e22:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007e24:	887b      	ldrh	r3, [r7, #2]
 8007e26:	2b10      	cmp	r3, #16
 8007e28:	d103      	bne.n	8007e32 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007e30:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007e32:	887b      	ldrh	r3, [r7, #2]
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	d103      	bne.n	8007e40 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007e3e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007e40:	887b      	ldrh	r3, [r7, #2]
 8007e42:	2b40      	cmp	r3, #64	; 0x40
 8007e44:	d103      	bne.n	8007e4e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e4c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6819      	ldr	r1, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	601a      	str	r2, [r3, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	0800691f 	.word	0x0800691f
 8007e70:	08006d41 	.word	0x08006d41
 8007e74:	08006af5 	.word	0x08006af5

08007e78 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007e88:	887b      	ldrh	r3, [r7, #2]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00f      	beq.n	8007eb2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007e98:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ea6:	2b28      	cmp	r3, #40	; 0x28
 8007ea8:	d003      	beq.n	8007eb2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007eb0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007eb2:	887b      	ldrh	r3, [r7, #2]
 8007eb4:	f003 0302 	and.w	r3, r3, #2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00f      	beq.n	8007edc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007ec2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ed0:	2b28      	cmp	r3, #40	; 0x28
 8007ed2:	d003      	beq.n	8007edc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007eda:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007edc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	da03      	bge.n	8007eec <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007eea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007eec:	887b      	ldrh	r3, [r7, #2]
 8007eee:	2b10      	cmp	r3, #16
 8007ef0:	d103      	bne.n	8007efa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007ef8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007efa:	887b      	ldrh	r3, [r7, #2]
 8007efc:	2b20      	cmp	r3, #32
 8007efe:	d103      	bne.n	8007f08 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f043 0320 	orr.w	r3, r3, #32
 8007f06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007f08:	887b      	ldrh	r3, [r7, #2]
 8007f0a:	2b40      	cmp	r3, #64	; 0x40
 8007f0c:	d103      	bne.n	8007f16 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f14:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6819      	ldr	r1, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	43da      	mvns	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	400a      	ands	r2, r1
 8007f26:	601a      	str	r2, [r3, #0]
}
 8007f28:	bf00      	nop
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b20      	cmp	r3, #32
 8007f48:	d138      	bne.n	8007fbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d101      	bne.n	8007f58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e032      	b.n	8007fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2224      	movs	r2, #36	; 0x24
 8007f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0201 	bic.w	r2, r2, #1
 8007f76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6819      	ldr	r1, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	e000      	b.n	8007fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007fbc:	2302      	movs	r3, #2
  }
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	d139      	bne.n	8008054 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d101      	bne.n	8007fee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007fea:	2302      	movs	r3, #2
 8007fec:	e033      	b.n	8008056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2224      	movs	r2, #36	; 0x24
 8007ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0201 	bic.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800801c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4313      	orrs	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0201 	orr.w	r2, r2, #1
 800803e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2220      	movs	r2, #32
 8008044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	e000      	b.n	8008056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008054:	2302      	movs	r3, #2
  }
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
	...

08008064 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d141      	bne.n	80080f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008072:	4b4b      	ldr	r3, [pc, #300]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800807a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800807e:	d131      	bne.n	80080e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008080:	4b47      	ldr	r3, [pc, #284]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008086:	4a46      	ldr	r2, [pc, #280]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800808c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008090:	4b43      	ldr	r3, [pc, #268]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008098:	4a41      	ldr	r2, [pc, #260]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800809a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800809e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80080a0:	4b40      	ldr	r3, [pc, #256]	; (80081a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2232      	movs	r2, #50	; 0x32
 80080a6:	fb02 f303 	mul.w	r3, r2, r3
 80080aa:	4a3f      	ldr	r2, [pc, #252]	; (80081a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80080ac:	fba2 2303 	umull	r2, r3, r2, r3
 80080b0:	0c9b      	lsrs	r3, r3, #18
 80080b2:	3301      	adds	r3, #1
 80080b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80080b6:	e002      	b.n	80080be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80080be:	4b38      	ldr	r3, [pc, #224]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080ca:	d102      	bne.n	80080d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1f2      	bne.n	80080b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80080d2:	4b33      	ldr	r3, [pc, #204]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080de:	d158      	bne.n	8008192 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e057      	b.n	8008194 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80080e4:	4b2e      	ldr	r3, [pc, #184]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ea:	4a2d      	ldr	r2, [pc, #180]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80080f4:	e04d      	b.n	8008192 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080fc:	d141      	bne.n	8008182 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80080fe:	4b28      	ldr	r3, [pc, #160]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800810a:	d131      	bne.n	8008170 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800810c:	4b24      	ldr	r3, [pc, #144]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800810e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008112:	4a23      	ldr	r2, [pc, #140]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008118:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800811c:	4b20      	ldr	r3, [pc, #128]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008124:	4a1e      	ldr	r2, [pc, #120]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800812a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800812c:	4b1d      	ldr	r3, [pc, #116]	; (80081a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2232      	movs	r2, #50	; 0x32
 8008132:	fb02 f303 	mul.w	r3, r2, r3
 8008136:	4a1c      	ldr	r2, [pc, #112]	; (80081a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008138:	fba2 2303 	umull	r2, r3, r2, r3
 800813c:	0c9b      	lsrs	r3, r3, #18
 800813e:	3301      	adds	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008142:	e002      	b.n	800814a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3b01      	subs	r3, #1
 8008148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800814a:	4b15      	ldr	r3, [pc, #84]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008156:	d102      	bne.n	800815e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1f2      	bne.n	8008144 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800815e:	4b10      	ldr	r3, [pc, #64]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800816a:	d112      	bne.n	8008192 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e011      	b.n	8008194 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008170:	4b0b      	ldr	r3, [pc, #44]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008176:	4a0a      	ldr	r2, [pc, #40]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800817c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008180:	e007      	b.n	8008192 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008182:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800818a:	4a05      	ldr	r2, [pc, #20]	; (80081a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800818c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008190:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	40007000 	.word	0x40007000
 80081a4:	20000000 	.word	0x20000000
 80081a8:	431bde83 	.word	0x431bde83

080081ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80081b0:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	4a04      	ldr	r2, [pc, #16]	; (80081c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80081b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081ba:	6093      	str	r3, [r2, #8]
}
 80081bc:	bf00      	nop
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	40007000 	.word	0x40007000

080081cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b088      	sub	sp, #32
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e2fe      	b.n	80087dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d075      	beq.n	80082d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081ea:	4b97      	ldr	r3, [pc, #604]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f003 030c 	and.w	r3, r3, #12
 80081f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80081f4:	4b94      	ldr	r3, [pc, #592]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	2b0c      	cmp	r3, #12
 8008202:	d102      	bne.n	800820a <HAL_RCC_OscConfig+0x3e>
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	2b03      	cmp	r3, #3
 8008208:	d002      	beq.n	8008210 <HAL_RCC_OscConfig+0x44>
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	2b08      	cmp	r3, #8
 800820e:	d10b      	bne.n	8008228 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008210:	4b8d      	ldr	r3, [pc, #564]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d05b      	beq.n	80082d4 <HAL_RCC_OscConfig+0x108>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d157      	bne.n	80082d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e2d9      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008230:	d106      	bne.n	8008240 <HAL_RCC_OscConfig+0x74>
 8008232:	4b85      	ldr	r3, [pc, #532]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a84      	ldr	r2, [pc, #528]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	e01d      	b.n	800827c <HAL_RCC_OscConfig+0xb0>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008248:	d10c      	bne.n	8008264 <HAL_RCC_OscConfig+0x98>
 800824a:	4b7f      	ldr	r3, [pc, #508]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a7e      	ldr	r2, [pc, #504]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	4b7c      	ldr	r3, [pc, #496]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a7b      	ldr	r2, [pc, #492]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 800825c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	e00b      	b.n	800827c <HAL_RCC_OscConfig+0xb0>
 8008264:	4b78      	ldr	r3, [pc, #480]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a77      	ldr	r2, [pc, #476]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 800826a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	4b75      	ldr	r3, [pc, #468]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a74      	ldr	r2, [pc, #464]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800827a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d013      	beq.n	80082ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008284:	f7fc fd42 	bl	8004d0c <HAL_GetTick>
 8008288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800828a:	e008      	b.n	800829e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800828c:	f7fc fd3e 	bl	8004d0c <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b64      	cmp	r3, #100	; 0x64
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e29e      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800829e:	4b6a      	ldr	r3, [pc, #424]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0f0      	beq.n	800828c <HAL_RCC_OscConfig+0xc0>
 80082aa:	e014      	b.n	80082d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ac:	f7fc fd2e 	bl	8004d0c <HAL_GetTick>
 80082b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80082b2:	e008      	b.n	80082c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082b4:	f7fc fd2a 	bl	8004d0c <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	2b64      	cmp	r3, #100	; 0x64
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e28a      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80082c6:	4b60      	ldr	r3, [pc, #384]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1f0      	bne.n	80082b4 <HAL_RCC_OscConfig+0xe8>
 80082d2:	e000      	b.n	80082d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d075      	beq.n	80083ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082e2:	4b59      	ldr	r3, [pc, #356]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 030c 	and.w	r3, r3, #12
 80082ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082ec:	4b56      	ldr	r3, [pc, #344]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0303 	and.w	r3, r3, #3
 80082f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	2b0c      	cmp	r3, #12
 80082fa:	d102      	bne.n	8008302 <HAL_RCC_OscConfig+0x136>
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d002      	beq.n	8008308 <HAL_RCC_OscConfig+0x13c>
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	2b04      	cmp	r3, #4
 8008306:	d11f      	bne.n	8008348 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008308:	4b4f      	ldr	r3, [pc, #316]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008310:	2b00      	cmp	r3, #0
 8008312:	d005      	beq.n	8008320 <HAL_RCC_OscConfig+0x154>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e25d      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008320:	4b49      	ldr	r3, [pc, #292]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	061b      	lsls	r3, r3, #24
 800832e:	4946      	ldr	r1, [pc, #280]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008330:	4313      	orrs	r3, r2
 8008332:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008334:	4b45      	ldr	r3, [pc, #276]	; (800844c <HAL_RCC_OscConfig+0x280>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4618      	mov	r0, r3
 800833a:	f7fc fc9b 	bl	8004c74 <HAL_InitTick>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d043      	beq.n	80083cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e249      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d023      	beq.n	8008398 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008350:	4b3d      	ldr	r3, [pc, #244]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a3c      	ldr	r2, [pc, #240]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800835a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835c:	f7fc fcd6 	bl	8004d0c <HAL_GetTick>
 8008360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008364:	f7fc fcd2 	bl	8004d0c <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e232      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008376:	4b34      	ldr	r3, [pc, #208]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800837e:	2b00      	cmp	r3, #0
 8008380:	d0f0      	beq.n	8008364 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008382:	4b31      	ldr	r3, [pc, #196]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	061b      	lsls	r3, r3, #24
 8008390:	492d      	ldr	r1, [pc, #180]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008392:	4313      	orrs	r3, r2
 8008394:	604b      	str	r3, [r1, #4]
 8008396:	e01a      	b.n	80083ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008398:	4b2b      	ldr	r3, [pc, #172]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a2a      	ldr	r2, [pc, #168]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 800839e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a4:	f7fc fcb2 	bl	8004d0c <HAL_GetTick>
 80083a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80083aa:	e008      	b.n	80083be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083ac:	f7fc fcae 	bl	8004d0c <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d901      	bls.n	80083be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e20e      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80083be:	4b22      	ldr	r3, [pc, #136]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1f0      	bne.n	80083ac <HAL_RCC_OscConfig+0x1e0>
 80083ca:	e000      	b.n	80083ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0308 	and.w	r3, r3, #8
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d041      	beq.n	800845e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d01c      	beq.n	800841c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083e2:	4b19      	ldr	r3, [pc, #100]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 80083e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083e8:	4a17      	ldr	r2, [pc, #92]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 80083ea:	f043 0301 	orr.w	r3, r3, #1
 80083ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083f2:	f7fc fc8b 	bl	8004d0c <HAL_GetTick>
 80083f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083f8:	e008      	b.n	800840c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083fa:	f7fc fc87 	bl	8004d0c <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d901      	bls.n	800840c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e1e7      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800840c:	4b0e      	ldr	r3, [pc, #56]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 800840e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0ef      	beq.n	80083fa <HAL_RCC_OscConfig+0x22e>
 800841a:	e020      	b.n	800845e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 800841e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008422:	4a09      	ldr	r2, [pc, #36]	; (8008448 <HAL_RCC_OscConfig+0x27c>)
 8008424:	f023 0301 	bic.w	r3, r3, #1
 8008428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800842c:	f7fc fc6e 	bl	8004d0c <HAL_GetTick>
 8008430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008432:	e00d      	b.n	8008450 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008434:	f7fc fc6a 	bl	8004d0c <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	2b02      	cmp	r3, #2
 8008440:	d906      	bls.n	8008450 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e1ca      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
 8008446:	bf00      	nop
 8008448:	40021000 	.word	0x40021000
 800844c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008450:	4b8c      	ldr	r3, [pc, #560]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 8008452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008456:	f003 0302 	and.w	r3, r3, #2
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1ea      	bne.n	8008434 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0304 	and.w	r3, r3, #4
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 80a6 	beq.w	80085b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800846c:	2300      	movs	r3, #0
 800846e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008470:	4b84      	ldr	r3, [pc, #528]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 8008472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <HAL_RCC_OscConfig+0x2b4>
 800847c:	2301      	movs	r3, #1
 800847e:	e000      	b.n	8008482 <HAL_RCC_OscConfig+0x2b6>
 8008480:	2300      	movs	r3, #0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00d      	beq.n	80084a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008486:	4b7f      	ldr	r3, [pc, #508]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 8008488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848a:	4a7e      	ldr	r2, [pc, #504]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 800848c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008490:	6593      	str	r3, [r2, #88]	; 0x58
 8008492:	4b7c      	ldr	r3, [pc, #496]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 8008494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800849e:	2301      	movs	r3, #1
 80084a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084a2:	4b79      	ldr	r3, [pc, #484]	; (8008688 <HAL_RCC_OscConfig+0x4bc>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d118      	bne.n	80084e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084ae:	4b76      	ldr	r3, [pc, #472]	; (8008688 <HAL_RCC_OscConfig+0x4bc>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a75      	ldr	r2, [pc, #468]	; (8008688 <HAL_RCC_OscConfig+0x4bc>)
 80084b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084ba:	f7fc fc27 	bl	8004d0c <HAL_GetTick>
 80084be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084c0:	e008      	b.n	80084d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084c2:	f7fc fc23 	bl	8004d0c <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d901      	bls.n	80084d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e183      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084d4:	4b6c      	ldr	r3, [pc, #432]	; (8008688 <HAL_RCC_OscConfig+0x4bc>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d0f0      	beq.n	80084c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d108      	bne.n	80084fa <HAL_RCC_OscConfig+0x32e>
 80084e8:	4b66      	ldr	r3, [pc, #408]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 80084ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ee:	4a65      	ldr	r2, [pc, #404]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 80084f0:	f043 0301 	orr.w	r3, r3, #1
 80084f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80084f8:	e024      	b.n	8008544 <HAL_RCC_OscConfig+0x378>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	2b05      	cmp	r3, #5
 8008500:	d110      	bne.n	8008524 <HAL_RCC_OscConfig+0x358>
 8008502:	4b60      	ldr	r3, [pc, #384]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 8008504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008508:	4a5e      	ldr	r2, [pc, #376]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 800850a:	f043 0304 	orr.w	r3, r3, #4
 800850e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008512:	4b5c      	ldr	r3, [pc, #368]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 8008514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008518:	4a5a      	ldr	r2, [pc, #360]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 800851a:	f043 0301 	orr.w	r3, r3, #1
 800851e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008522:	e00f      	b.n	8008544 <HAL_RCC_OscConfig+0x378>
 8008524:	4b57      	ldr	r3, [pc, #348]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 8008526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852a:	4a56      	ldr	r2, [pc, #344]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 800852c:	f023 0301 	bic.w	r3, r3, #1
 8008530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008534:	4b53      	ldr	r3, [pc, #332]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 8008536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800853a:	4a52      	ldr	r2, [pc, #328]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 800853c:	f023 0304 	bic.w	r3, r3, #4
 8008540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d016      	beq.n	800857a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800854c:	f7fc fbde 	bl	8004d0c <HAL_GetTick>
 8008550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008552:	e00a      	b.n	800856a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008554:	f7fc fbda 	bl	8004d0c <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008562:	4293      	cmp	r3, r2
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e138      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800856a:	4b46      	ldr	r3, [pc, #280]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 800856c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d0ed      	beq.n	8008554 <HAL_RCC_OscConfig+0x388>
 8008578:	e015      	b.n	80085a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800857a:	f7fc fbc7 	bl	8004d0c <HAL_GetTick>
 800857e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008580:	e00a      	b.n	8008598 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008582:	f7fc fbc3 	bl	8004d0c <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008590:	4293      	cmp	r3, r2
 8008592:	d901      	bls.n	8008598 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e121      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008598:	4b3a      	ldr	r3, [pc, #232]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 800859a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1ed      	bne.n	8008582 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80085a6:	7ffb      	ldrb	r3, [r7, #31]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d105      	bne.n	80085b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085ac:	4b35      	ldr	r3, [pc, #212]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 80085ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b0:	4a34      	ldr	r2, [pc, #208]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 80085b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d03c      	beq.n	800863e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01c      	beq.n	8008606 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80085cc:	4b2d      	ldr	r3, [pc, #180]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 80085ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085d2:	4a2c      	ldr	r2, [pc, #176]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 80085d4:	f043 0301 	orr.w	r3, r3, #1
 80085d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085dc:	f7fc fb96 	bl	8004d0c <HAL_GetTick>
 80085e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80085e2:	e008      	b.n	80085f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085e4:	f7fc fb92 	bl	8004d0c <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d901      	bls.n	80085f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e0f2      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80085f6:	4b23      	ldr	r3, [pc, #140]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 80085f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0ef      	beq.n	80085e4 <HAL_RCC_OscConfig+0x418>
 8008604:	e01b      	b.n	800863e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008606:	4b1f      	ldr	r3, [pc, #124]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 8008608:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800860c:	4a1d      	ldr	r2, [pc, #116]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 800860e:	f023 0301 	bic.w	r3, r3, #1
 8008612:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008616:	f7fc fb79 	bl	8004d0c <HAL_GetTick>
 800861a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800861c:	e008      	b.n	8008630 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800861e:	f7fc fb75 	bl	8004d0c <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e0d5      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008630:	4b14      	ldr	r3, [pc, #80]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 8008632:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1ef      	bne.n	800861e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 80c9 	beq.w	80087da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008648:	4b0e      	ldr	r3, [pc, #56]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f003 030c 	and.w	r3, r3, #12
 8008650:	2b0c      	cmp	r3, #12
 8008652:	f000 8083 	beq.w	800875c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	2b02      	cmp	r3, #2
 800865c:	d15e      	bne.n	800871c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800865e:	4b09      	ldr	r3, [pc, #36]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a08      	ldr	r2, [pc, #32]	; (8008684 <HAL_RCC_OscConfig+0x4b8>)
 8008664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866a:	f7fc fb4f 	bl	8004d0c <HAL_GetTick>
 800866e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008670:	e00c      	b.n	800868c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008672:	f7fc fb4b 	bl	8004d0c <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	2b02      	cmp	r3, #2
 800867e:	d905      	bls.n	800868c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e0ab      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
 8008684:	40021000 	.word	0x40021000
 8008688:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800868c:	4b55      	ldr	r3, [pc, #340]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1ec      	bne.n	8008672 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008698:	4b52      	ldr	r3, [pc, #328]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 800869a:	68da      	ldr	r2, [r3, #12]
 800869c:	4b52      	ldr	r3, [pc, #328]	; (80087e8 <HAL_RCC_OscConfig+0x61c>)
 800869e:	4013      	ands	r3, r2
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	6a11      	ldr	r1, [r2, #32]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086a8:	3a01      	subs	r2, #1
 80086aa:	0112      	lsls	r2, r2, #4
 80086ac:	4311      	orrs	r1, r2
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80086b2:	0212      	lsls	r2, r2, #8
 80086b4:	4311      	orrs	r1, r2
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80086ba:	0852      	lsrs	r2, r2, #1
 80086bc:	3a01      	subs	r2, #1
 80086be:	0552      	lsls	r2, r2, #21
 80086c0:	4311      	orrs	r1, r2
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80086c6:	0852      	lsrs	r2, r2, #1
 80086c8:	3a01      	subs	r2, #1
 80086ca:	0652      	lsls	r2, r2, #25
 80086cc:	4311      	orrs	r1, r2
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80086d2:	06d2      	lsls	r2, r2, #27
 80086d4:	430a      	orrs	r2, r1
 80086d6:	4943      	ldr	r1, [pc, #268]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086dc:	4b41      	ldr	r3, [pc, #260]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a40      	ldr	r2, [pc, #256]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 80086e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80086e8:	4b3e      	ldr	r3, [pc, #248]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	4a3d      	ldr	r2, [pc, #244]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 80086ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f4:	f7fc fb0a 	bl	8004d0c <HAL_GetTick>
 80086f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086fa:	e008      	b.n	800870e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086fc:	f7fc fb06 	bl	8004d0c <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	2b02      	cmp	r3, #2
 8008708:	d901      	bls.n	800870e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e066      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800870e:	4b35      	ldr	r3, [pc, #212]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0f0      	beq.n	80086fc <HAL_RCC_OscConfig+0x530>
 800871a:	e05e      	b.n	80087da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800871c:	4b31      	ldr	r3, [pc, #196]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a30      	ldr	r2, [pc, #192]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 8008722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008728:	f7fc faf0 	bl	8004d0c <HAL_GetTick>
 800872c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800872e:	e008      	b.n	8008742 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008730:	f7fc faec 	bl	8004d0c <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b02      	cmp	r3, #2
 800873c:	d901      	bls.n	8008742 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e04c      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008742:	4b28      	ldr	r3, [pc, #160]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1f0      	bne.n	8008730 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800874e:	4b25      	ldr	r3, [pc, #148]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	4924      	ldr	r1, [pc, #144]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 8008754:	4b25      	ldr	r3, [pc, #148]	; (80087ec <HAL_RCC_OscConfig+0x620>)
 8008756:	4013      	ands	r3, r2
 8008758:	60cb      	str	r3, [r1, #12]
 800875a:	e03e      	b.n	80087da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d101      	bne.n	8008768 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e039      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008768:	4b1e      	ldr	r3, [pc, #120]	; (80087e4 <HAL_RCC_OscConfig+0x618>)
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f003 0203 	and.w	r2, r3, #3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	429a      	cmp	r2, r3
 800877a:	d12c      	bne.n	80087d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008786:	3b01      	subs	r3, #1
 8008788:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800878a:	429a      	cmp	r2, r3
 800878c:	d123      	bne.n	80087d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008798:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800879a:	429a      	cmp	r2, r3
 800879c:	d11b      	bne.n	80087d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d113      	bne.n	80087d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b8:	085b      	lsrs	r3, r3, #1
 80087ba:	3b01      	subs	r3, #1
 80087bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80087be:	429a      	cmp	r2, r3
 80087c0:	d109      	bne.n	80087d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087cc:	085b      	lsrs	r3, r3, #1
 80087ce:	3b01      	subs	r3, #1
 80087d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d001      	beq.n	80087da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e000      	b.n	80087dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3720      	adds	r7, #32
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	40021000 	.word	0x40021000
 80087e8:	019f800c 	.word	0x019f800c
 80087ec:	feeefffc 	.word	0xfeeefffc

080087f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80087fa:	2300      	movs	r3, #0
 80087fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e11e      	b.n	8008a46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008808:	4b91      	ldr	r3, [pc, #580]	; (8008a50 <HAL_RCC_ClockConfig+0x260>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 030f 	and.w	r3, r3, #15
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	429a      	cmp	r2, r3
 8008814:	d910      	bls.n	8008838 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008816:	4b8e      	ldr	r3, [pc, #568]	; (8008a50 <HAL_RCC_ClockConfig+0x260>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f023 020f 	bic.w	r2, r3, #15
 800881e:	498c      	ldr	r1, [pc, #560]	; (8008a50 <HAL_RCC_ClockConfig+0x260>)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	4313      	orrs	r3, r2
 8008824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008826:	4b8a      	ldr	r3, [pc, #552]	; (8008a50 <HAL_RCC_ClockConfig+0x260>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 030f 	and.w	r3, r3, #15
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	429a      	cmp	r2, r3
 8008832:	d001      	beq.n	8008838 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e106      	b.n	8008a46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b00      	cmp	r3, #0
 8008842:	d073      	beq.n	800892c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	2b03      	cmp	r3, #3
 800884a:	d129      	bne.n	80088a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800884c:	4b81      	ldr	r3, [pc, #516]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e0f4      	b.n	8008a46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800885c:	f000 f99e 	bl	8008b9c <RCC_GetSysClockFreqFromPLLSource>
 8008860:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	4a7c      	ldr	r2, [pc, #496]	; (8008a58 <HAL_RCC_ClockConfig+0x268>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d93f      	bls.n	80088ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800886a:	4b7a      	ldr	r3, [pc, #488]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d009      	beq.n	800888a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800887e:	2b00      	cmp	r3, #0
 8008880:	d033      	beq.n	80088ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008886:	2b00      	cmp	r3, #0
 8008888:	d12f      	bne.n	80088ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800888a:	4b72      	ldr	r3, [pc, #456]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008892:	4a70      	ldr	r2, [pc, #448]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 8008894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008898:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800889a:	2380      	movs	r3, #128	; 0x80
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	e024      	b.n	80088ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d107      	bne.n	80088b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088a8:	4b6a      	ldr	r3, [pc, #424]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d109      	bne.n	80088c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e0c6      	b.n	8008a46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088b8:	4b66      	ldr	r3, [pc, #408]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e0be      	b.n	8008a46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80088c8:	f000 f8ce 	bl	8008a68 <HAL_RCC_GetSysClockFreq>
 80088cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	4a61      	ldr	r2, [pc, #388]	; (8008a58 <HAL_RCC_ClockConfig+0x268>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d909      	bls.n	80088ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80088d6:	4b5f      	ldr	r3, [pc, #380]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088de:	4a5d      	ldr	r2, [pc, #372]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 80088e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80088e6:	2380      	movs	r3, #128	; 0x80
 80088e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80088ea:	4b5a      	ldr	r3, [pc, #360]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f023 0203 	bic.w	r2, r3, #3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	4957      	ldr	r1, [pc, #348]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088fc:	f7fc fa06 	bl	8004d0c <HAL_GetTick>
 8008900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008902:	e00a      	b.n	800891a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008904:	f7fc fa02 	bl	8004d0c <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008912:	4293      	cmp	r3, r2
 8008914:	d901      	bls.n	800891a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e095      	b.n	8008a46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800891a:	4b4e      	ldr	r3, [pc, #312]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f003 020c 	and.w	r2, r3, #12
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	429a      	cmp	r2, r3
 800892a:	d1eb      	bne.n	8008904 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d023      	beq.n	8008980 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008944:	4b43      	ldr	r3, [pc, #268]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	4a42      	ldr	r2, [pc, #264]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 800894a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800894e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0308 	and.w	r3, r3, #8
 8008958:	2b00      	cmp	r3, #0
 800895a:	d007      	beq.n	800896c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800895c:	4b3d      	ldr	r3, [pc, #244]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008964:	4a3b      	ldr	r2, [pc, #236]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 8008966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800896a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800896c:	4b39      	ldr	r3, [pc, #228]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	4936      	ldr	r1, [pc, #216]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 800897a:	4313      	orrs	r3, r2
 800897c:	608b      	str	r3, [r1, #8]
 800897e:	e008      	b.n	8008992 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2b80      	cmp	r3, #128	; 0x80
 8008984:	d105      	bne.n	8008992 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008986:	4b33      	ldr	r3, [pc, #204]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	4a32      	ldr	r2, [pc, #200]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 800898c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008990:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008992:	4b2f      	ldr	r3, [pc, #188]	; (8008a50 <HAL_RCC_ClockConfig+0x260>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 030f 	and.w	r3, r3, #15
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d21d      	bcs.n	80089dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089a0:	4b2b      	ldr	r3, [pc, #172]	; (8008a50 <HAL_RCC_ClockConfig+0x260>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f023 020f 	bic.w	r2, r3, #15
 80089a8:	4929      	ldr	r1, [pc, #164]	; (8008a50 <HAL_RCC_ClockConfig+0x260>)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80089b0:	f7fc f9ac 	bl	8004d0c <HAL_GetTick>
 80089b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089b6:	e00a      	b.n	80089ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089b8:	f7fc f9a8 	bl	8004d0c <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e03b      	b.n	8008a46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ce:	4b20      	ldr	r3, [pc, #128]	; (8008a50 <HAL_RCC_ClockConfig+0x260>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d1ed      	bne.n	80089b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d008      	beq.n	80089fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089e8:	4b1a      	ldr	r3, [pc, #104]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	4917      	ldr	r1, [pc, #92]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 0308 	and.w	r3, r3, #8
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d009      	beq.n	8008a1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a06:	4b13      	ldr	r3, [pc, #76]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	00db      	lsls	r3, r3, #3
 8008a14:	490f      	ldr	r1, [pc, #60]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008a1a:	f000 f825 	bl	8008a68 <HAL_RCC_GetSysClockFreq>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	4b0c      	ldr	r3, [pc, #48]	; (8008a54 <HAL_RCC_ClockConfig+0x264>)
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	091b      	lsrs	r3, r3, #4
 8008a26:	f003 030f 	and.w	r3, r3, #15
 8008a2a:	490c      	ldr	r1, [pc, #48]	; (8008a5c <HAL_RCC_ClockConfig+0x26c>)
 8008a2c:	5ccb      	ldrb	r3, [r1, r3]
 8008a2e:	f003 031f 	and.w	r3, r3, #31
 8008a32:	fa22 f303 	lsr.w	r3, r2, r3
 8008a36:	4a0a      	ldr	r2, [pc, #40]	; (8008a60 <HAL_RCC_ClockConfig+0x270>)
 8008a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	; (8008a64 <HAL_RCC_ClockConfig+0x274>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fc f918 	bl	8004c74 <HAL_InitTick>
 8008a44:	4603      	mov	r3, r0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	40022000 	.word	0x40022000
 8008a54:	40021000 	.word	0x40021000
 8008a58:	04c4b400 	.word	0x04c4b400
 8008a5c:	080124bc 	.word	0x080124bc
 8008a60:	20000000 	.word	0x20000000
 8008a64:	20000004 	.word	0x20000004

08008a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008a6e:	4b2c      	ldr	r3, [pc, #176]	; (8008b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 030c 	and.w	r3, r3, #12
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d102      	bne.n	8008a80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008a7a:	4b2a      	ldr	r3, [pc, #168]	; (8008b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008a7c:	613b      	str	r3, [r7, #16]
 8008a7e:	e047      	b.n	8008b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008a80:	4b27      	ldr	r3, [pc, #156]	; (8008b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f003 030c 	and.w	r3, r3, #12
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d102      	bne.n	8008a92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008a8c:	4b26      	ldr	r3, [pc, #152]	; (8008b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008a8e:	613b      	str	r3, [r7, #16]
 8008a90:	e03e      	b.n	8008b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008a92:	4b23      	ldr	r3, [pc, #140]	; (8008b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f003 030c 	and.w	r3, r3, #12
 8008a9a:	2b0c      	cmp	r3, #12
 8008a9c:	d136      	bne.n	8008b0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008a9e:	4b20      	ldr	r3, [pc, #128]	; (8008b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008aa8:	4b1d      	ldr	r3, [pc, #116]	; (8008b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	091b      	lsrs	r3, r3, #4
 8008aae:	f003 030f 	and.w	r3, r3, #15
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d10c      	bne.n	8008ad6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008abc:	4a1a      	ldr	r2, [pc, #104]	; (8008b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac4:	4a16      	ldr	r2, [pc, #88]	; (8008b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ac6:	68d2      	ldr	r2, [r2, #12]
 8008ac8:	0a12      	lsrs	r2, r2, #8
 8008aca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008ace:	fb02 f303 	mul.w	r3, r2, r3
 8008ad2:	617b      	str	r3, [r7, #20]
      break;
 8008ad4:	e00c      	b.n	8008af0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ad6:	4a13      	ldr	r2, [pc, #76]	; (8008b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ade:	4a10      	ldr	r2, [pc, #64]	; (8008b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ae0:	68d2      	ldr	r2, [r2, #12]
 8008ae2:	0a12      	lsrs	r2, r2, #8
 8008ae4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008ae8:	fb02 f303 	mul.w	r3, r2, r3
 8008aec:	617b      	str	r3, [r7, #20]
      break;
 8008aee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008af0:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	0e5b      	lsrs	r3, r3, #25
 8008af6:	f003 0303 	and.w	r3, r3, #3
 8008afa:	3301      	adds	r3, #1
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b08:	613b      	str	r3, [r7, #16]
 8008b0a:	e001      	b.n	8008b10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008b10:	693b      	ldr	r3, [r7, #16]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	371c      	adds	r7, #28
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	40021000 	.word	0x40021000
 8008b24:	00f42400 	.word	0x00f42400
 8008b28:	007a1200 	.word	0x007a1200

08008b2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b30:	4b03      	ldr	r3, [pc, #12]	; (8008b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b32:	681b      	ldr	r3, [r3, #0]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	20000000 	.word	0x20000000

08008b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008b48:	f7ff fff0 	bl	8008b2c <HAL_RCC_GetHCLKFreq>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	4b06      	ldr	r3, [pc, #24]	; (8008b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	0a1b      	lsrs	r3, r3, #8
 8008b54:	f003 0307 	and.w	r3, r3, #7
 8008b58:	4904      	ldr	r1, [pc, #16]	; (8008b6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b5a:	5ccb      	ldrb	r3, [r1, r3]
 8008b5c:	f003 031f 	and.w	r3, r3, #31
 8008b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	40021000 	.word	0x40021000
 8008b6c:	080124cc 	.word	0x080124cc

08008b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008b74:	f7ff ffda 	bl	8008b2c <HAL_RCC_GetHCLKFreq>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	4b06      	ldr	r3, [pc, #24]	; (8008b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	0adb      	lsrs	r3, r3, #11
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	4904      	ldr	r1, [pc, #16]	; (8008b98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b86:	5ccb      	ldrb	r3, [r1, r3]
 8008b88:	f003 031f 	and.w	r3, r3, #31
 8008b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	40021000 	.word	0x40021000
 8008b98:	080124cc 	.word	0x080124cc

08008b9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b087      	sub	sp, #28
 8008ba0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ba2:	4b1e      	ldr	r3, [pc, #120]	; (8008c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008bac:	4b1b      	ldr	r3, [pc, #108]	; (8008c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	091b      	lsrs	r3, r3, #4
 8008bb2:	f003 030f 	and.w	r3, r3, #15
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d10c      	bne.n	8008bda <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008bc0:	4a17      	ldr	r2, [pc, #92]	; (8008c20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc8:	4a14      	ldr	r2, [pc, #80]	; (8008c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008bca:	68d2      	ldr	r2, [r2, #12]
 8008bcc:	0a12      	lsrs	r2, r2, #8
 8008bce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008bd2:	fb02 f303 	mul.w	r3, r2, r3
 8008bd6:	617b      	str	r3, [r7, #20]
    break;
 8008bd8:	e00c      	b.n	8008bf4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008bda:	4a12      	ldr	r2, [pc, #72]	; (8008c24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be2:	4a0e      	ldr	r2, [pc, #56]	; (8008c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008be4:	68d2      	ldr	r2, [r2, #12]
 8008be6:	0a12      	lsrs	r2, r2, #8
 8008be8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008bec:	fb02 f303 	mul.w	r3, r2, r3
 8008bf0:	617b      	str	r3, [r7, #20]
    break;
 8008bf2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008bf4:	4b09      	ldr	r3, [pc, #36]	; (8008c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	0e5b      	lsrs	r3, r3, #25
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	3301      	adds	r3, #1
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008c0e:	687b      	ldr	r3, [r7, #4]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	40021000 	.word	0x40021000
 8008c20:	007a1200 	.word	0x007a1200
 8008c24:	00f42400 	.word	0x00f42400

08008c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c30:	2300      	movs	r3, #0
 8008c32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c34:	2300      	movs	r3, #0
 8008c36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 8098 	beq.w	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c46:	2300      	movs	r3, #0
 8008c48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c4a:	4b43      	ldr	r3, [pc, #268]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10d      	bne.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c56:	4b40      	ldr	r3, [pc, #256]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c5a:	4a3f      	ldr	r2, [pc, #252]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c60:	6593      	str	r3, [r2, #88]	; 0x58
 8008c62:	4b3d      	ldr	r3, [pc, #244]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c6a:	60bb      	str	r3, [r7, #8]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c72:	4b3a      	ldr	r3, [pc, #232]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a39      	ldr	r2, [pc, #228]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c7e:	f7fc f845 	bl	8004d0c <HAL_GetTick>
 8008c82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c84:	e009      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c86:	f7fc f841 	bl	8004d0c <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d902      	bls.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	74fb      	strb	r3, [r7, #19]
        break;
 8008c98:	e005      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c9a:	4b30      	ldr	r3, [pc, #192]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d0ef      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008ca6:	7cfb      	ldrb	r3, [r7, #19]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d159      	bne.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008cac:	4b2a      	ldr	r3, [pc, #168]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d01e      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d019      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008cc8:	4b23      	ldr	r3, [pc, #140]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008cd4:	4b20      	ldr	r3, [pc, #128]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cda:	4a1f      	ldr	r2, [pc, #124]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ce4:	4b1c      	ldr	r3, [pc, #112]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cea:	4a1b      	ldr	r2, [pc, #108]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008cf4:	4a18      	ldr	r2, [pc, #96]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d016      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d06:	f7fc f801 	bl	8004d0c <HAL_GetTick>
 8008d0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d0c:	e00b      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d0e:	f7fb fffd 	bl	8004d0c <HAL_GetTick>
 8008d12:	4602      	mov	r2, r0
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d902      	bls.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	74fb      	strb	r3, [r7, #19]
            break;
 8008d24:	e006      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d26:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d2c:	f003 0302 	and.w	r3, r3, #2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d0ec      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008d34:	7cfb      	ldrb	r3, [r7, #19]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10b      	bne.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d3a:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d48:	4903      	ldr	r1, [pc, #12]	; (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008d50:	e008      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d52:	7cfb      	ldrb	r3, [r7, #19]
 8008d54:	74bb      	strb	r3, [r7, #18]
 8008d56:	e005      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008d58:	40021000 	.word	0x40021000
 8008d5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d60:	7cfb      	ldrb	r3, [r7, #19]
 8008d62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d64:	7c7b      	ldrb	r3, [r7, #17]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d105      	bne.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d6a:	4ba7      	ldr	r3, [pc, #668]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6e:	4aa6      	ldr	r2, [pc, #664]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00a      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008d82:	4ba1      	ldr	r3, [pc, #644]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d88:	f023 0203 	bic.w	r2, r3, #3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	499d      	ldr	r1, [pc, #628]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0302 	and.w	r3, r3, #2
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00a      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008da4:	4b98      	ldr	r3, [pc, #608]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008daa:	f023 020c 	bic.w	r2, r3, #12
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	4995      	ldr	r1, [pc, #596]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0304 	and.w	r3, r3, #4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00a      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008dc6:	4b90      	ldr	r3, [pc, #576]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dcc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	498c      	ldr	r1, [pc, #560]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0308 	and.w	r3, r3, #8
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00a      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008de8:	4b87      	ldr	r3, [pc, #540]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	4984      	ldr	r1, [pc, #528]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0310 	and.w	r3, r3, #16
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00a      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008e0a:	4b7f      	ldr	r3, [pc, #508]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	497b      	ldr	r1, [pc, #492]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0320 	and.w	r3, r3, #32
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00a      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e2c:	4b76      	ldr	r3, [pc, #472]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	4973      	ldr	r1, [pc, #460]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e4e:	4b6e      	ldr	r3, [pc, #440]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	69db      	ldr	r3, [r3, #28]
 8008e5c:	496a      	ldr	r1, [pc, #424]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00a      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e70:	4b65      	ldr	r3, [pc, #404]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	4962      	ldr	r1, [pc, #392]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e80:	4313      	orrs	r3, r2
 8008e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00a      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e92:	4b5d      	ldr	r3, [pc, #372]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	4959      	ldr	r1, [pc, #356]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00a      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008eb4:	4b54      	ldr	r3, [pc, #336]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008eba:	f023 0203 	bic.w	r2, r3, #3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec2:	4951      	ldr	r1, [pc, #324]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ed6:	4b4c      	ldr	r3, [pc, #304]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008edc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	4948      	ldr	r1, [pc, #288]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d015      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ef8:	4b43      	ldr	r3, [pc, #268]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008efe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f06:	4940      	ldr	r1, [pc, #256]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f16:	d105      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f18:	4b3b      	ldr	r3, [pc, #236]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	4a3a      	ldr	r2, [pc, #232]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d015      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008f30:	4b35      	ldr	r3, [pc, #212]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3e:	4932      	ldr	r1, [pc, #200]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f4e:	d105      	bne.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f50:	4b2d      	ldr	r3, [pc, #180]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	4a2c      	ldr	r2, [pc, #176]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f5a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d015      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f68:	4b27      	ldr	r3, [pc, #156]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f76:	4924      	ldr	r1, [pc, #144]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f86:	d105      	bne.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f88:	4b1f      	ldr	r3, [pc, #124]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	4a1e      	ldr	r2, [pc, #120]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d015      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008fa0:	4b19      	ldr	r3, [pc, #100]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fae:	4916      	ldr	r1, [pc, #88]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fbe:	d105      	bne.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fc0:	4b11      	ldr	r3, [pc, #68]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	4a10      	ldr	r2, [pc, #64]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d019      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fd8:	4b0b      	ldr	r3, [pc, #44]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe6:	4908      	ldr	r1, [pc, #32]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ff6:	d109      	bne.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ff8:	4b03      	ldr	r3, [pc, #12]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	4a02      	ldr	r2, [pc, #8]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009002:	60d3      	str	r3, [r2, #12]
 8009004:	e002      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009006:	bf00      	nop
 8009008:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d015      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009018:	4b29      	ldr	r3, [pc, #164]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800901a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800901e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009026:	4926      	ldr	r1, [pc, #152]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009028:	4313      	orrs	r3, r2
 800902a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009036:	d105      	bne.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009038:	4b21      	ldr	r3, [pc, #132]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	4a20      	ldr	r2, [pc, #128]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800903e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009042:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d015      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009050:	4b1b      	ldr	r3, [pc, #108]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009056:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800905e:	4918      	ldr	r1, [pc, #96]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009060:	4313      	orrs	r3, r2
 8009062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800906a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800906e:	d105      	bne.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009070:	4b13      	ldr	r3, [pc, #76]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	4a12      	ldr	r2, [pc, #72]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800907a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d015      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009088:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800908a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800908e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009096:	490a      	ldr	r1, [pc, #40]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009098:	4313      	orrs	r3, r2
 800909a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090a6:	d105      	bne.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090a8:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	4a04      	ldr	r2, [pc, #16]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80090b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	40021000 	.word	0x40021000

080090c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e042      	b.n	800915c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d106      	bne.n	80090ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7fb fd21 	bl	8004b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2224      	movs	r2, #36	; 0x24
 80090f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f022 0201 	bic.w	r2, r2, #1
 8009104:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fe68 	bl	8009de4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fb69 	bl	80097ec <UART_SetConfig>
 800911a:	4603      	mov	r3, r0
 800911c:	2b01      	cmp	r3, #1
 800911e:	d101      	bne.n	8009124 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e01b      	b.n	800915c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689a      	ldr	r2, [r3, #8]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f042 0201 	orr.w	r2, r2, #1
 8009152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fee7 	bl	8009f28 <UART_CheckIdleState>
 800915a:	4603      	mov	r3, r0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b0ba      	sub	sp, #232	; 0xe8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800918a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800918e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009192:	4013      	ands	r3, r2
 8009194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800919c:	2b00      	cmp	r3, #0
 800919e:	d11b      	bne.n	80091d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a4:	f003 0320 	and.w	r3, r3, #32
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d015      	beq.n	80091d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80091ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091b0:	f003 0320 	and.w	r3, r3, #32
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d105      	bne.n	80091c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80091b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d009      	beq.n	80091d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 82e3 	beq.w	8009794 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	4798      	blx	r3
      }
      return;
 80091d6:	e2dd      	b.n	8009794 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80091d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 8123 	beq.w	8009428 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80091e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80091e6:	4b8d      	ldr	r3, [pc, #564]	; (800941c <HAL_UART_IRQHandler+0x2b8>)
 80091e8:	4013      	ands	r3, r2
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d106      	bne.n	80091fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80091ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80091f2:	4b8b      	ldr	r3, [pc, #556]	; (8009420 <HAL_UART_IRQHandler+0x2bc>)
 80091f4:	4013      	ands	r3, r2
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 8116 	beq.w	8009428 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	2b00      	cmp	r3, #0
 8009206:	d011      	beq.n	800922c <HAL_UART_IRQHandler+0xc8>
 8009208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800920c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00b      	beq.n	800922c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2201      	movs	r2, #1
 800921a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009222:	f043 0201 	orr.w	r2, r3, #1
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800922c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d011      	beq.n	800925c <HAL_UART_IRQHandler+0xf8>
 8009238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800923c:	f003 0301 	and.w	r3, r3, #1
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00b      	beq.n	800925c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2202      	movs	r2, #2
 800924a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009252:	f043 0204 	orr.w	r2, r3, #4
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800925c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009260:	f003 0304 	and.w	r3, r3, #4
 8009264:	2b00      	cmp	r3, #0
 8009266:	d011      	beq.n	800928c <HAL_UART_IRQHandler+0x128>
 8009268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800926c:	f003 0301 	and.w	r3, r3, #1
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00b      	beq.n	800928c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2204      	movs	r2, #4
 800927a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009282:	f043 0202 	orr.w	r2, r3, #2
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800928c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009290:	f003 0308 	and.w	r3, r3, #8
 8009294:	2b00      	cmp	r3, #0
 8009296:	d017      	beq.n	80092c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800929c:	f003 0320 	and.w	r3, r3, #32
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d105      	bne.n	80092b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80092a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80092a8:	4b5c      	ldr	r3, [pc, #368]	; (800941c <HAL_UART_IRQHandler+0x2b8>)
 80092aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2208      	movs	r2, #8
 80092b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092be:	f043 0208 	orr.w	r2, r3, #8
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80092c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d012      	beq.n	80092fa <HAL_UART_IRQHandler+0x196>
 80092d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00c      	beq.n	80092fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092f0:	f043 0220 	orr.w	r2, r3, #32
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 8249 	beq.w	8009798 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800930a:	f003 0320 	and.w	r3, r3, #32
 800930e:	2b00      	cmp	r3, #0
 8009310:	d013      	beq.n	800933a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009316:	f003 0320 	and.w	r3, r3, #32
 800931a:	2b00      	cmp	r3, #0
 800931c:	d105      	bne.n	800932a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800931e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d007      	beq.n	800933a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009340:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800934e:	2b40      	cmp	r3, #64	; 0x40
 8009350:	d005      	beq.n	800935e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009356:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800935a:	2b00      	cmp	r3, #0
 800935c:	d054      	beq.n	8009408 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fef9 	bl	800a156 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936e:	2b40      	cmp	r3, #64	; 0x40
 8009370:	d146      	bne.n	8009400 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3308      	adds	r3, #8
 8009378:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800938c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3308      	adds	r3, #8
 800939a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800939e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80093a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80093aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80093ae:	e841 2300 	strex	r3, r2, [r1]
 80093b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80093b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1d9      	bne.n	8009372 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d017      	beq.n	80093f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ce:	4a15      	ldr	r2, [pc, #84]	; (8009424 <HAL_UART_IRQHandler+0x2c0>)
 80093d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fb fe2d 	bl	8005038 <HAL_DMA_Abort_IT>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d019      	beq.n	8009418 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80093f2:	4610      	mov	r0, r2
 80093f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093f6:	e00f      	b.n	8009418 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f9e1 	bl	80097c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093fe:	e00b      	b.n	8009418 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f9dd 	bl	80097c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009406:	e007      	b.n	8009418 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f9d9 	bl	80097c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009416:	e1bf      	b.n	8009798 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009418:	bf00      	nop
    return;
 800941a:	e1bd      	b.n	8009798 <HAL_UART_IRQHandler+0x634>
 800941c:	10000001 	.word	0x10000001
 8009420:	04000120 	.word	0x04000120
 8009424:	0800a223 	.word	0x0800a223

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800942c:	2b01      	cmp	r3, #1
 800942e:	f040 8153 	bne.w	80096d8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009436:	f003 0310 	and.w	r3, r3, #16
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 814c 	beq.w	80096d8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009444:	f003 0310 	and.w	r3, r3, #16
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 8145 	beq.w	80096d8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2210      	movs	r2, #16
 8009454:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009460:	2b40      	cmp	r3, #64	; 0x40
 8009462:	f040 80bb 	bne.w	80095dc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009474:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 818f 	beq.w	800979c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009484:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009488:	429a      	cmp	r2, r3
 800948a:	f080 8187 	bcs.w	800979c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009494:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f040 8087 	bne.w	80095ba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80094c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	461a      	mov	r2, r3
 80094d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1da      	bne.n	80094ac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3308      	adds	r3, #8
 80094fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009508:	f023 0301 	bic.w	r3, r3, #1
 800950c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3308      	adds	r3, #8
 8009516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800951a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800951e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009520:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009522:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800952c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e1      	bne.n	80094f6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3308      	adds	r3, #8
 8009538:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800953c:	e853 3f00 	ldrex	r3, [r3]
 8009540:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3308      	adds	r3, #8
 8009552:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009556:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009558:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800955c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e3      	bne.n	8009532 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2220      	movs	r2, #32
 800956e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009580:	e853 3f00 	ldrex	r3, [r3]
 8009584:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009588:	f023 0310 	bic.w	r3, r3, #16
 800958c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	461a      	mov	r2, r3
 8009596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800959a:	65bb      	str	r3, [r7, #88]	; 0x58
 800959c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095a2:	e841 2300 	strex	r3, r2, [r1]
 80095a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1e4      	bne.n	8009578 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fb fce6 	bl	8004f86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2202      	movs	r2, #2
 80095be:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f8fd 	bl	80097d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095da:	e0df      	b.n	800979c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 80d1 	beq.w	80097a0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80095fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 80cc 	beq.w	80097a0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	e853 3f00 	ldrex	r3, [r3]
 8009614:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800961c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	461a      	mov	r2, r3
 8009626:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800962a:	647b      	str	r3, [r7, #68]	; 0x44
 800962c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009632:	e841 2300 	strex	r3, r2, [r1]
 8009636:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1e4      	bne.n	8009608 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3308      	adds	r3, #8
 8009644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009648:	e853 3f00 	ldrex	r3, [r3]
 800964c:	623b      	str	r3, [r7, #32]
   return(result);
 800964e:	6a3b      	ldr	r3, [r7, #32]
 8009650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009654:	f023 0301 	bic.w	r3, r3, #1
 8009658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3308      	adds	r3, #8
 8009662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009666:	633a      	str	r2, [r7, #48]	; 0x30
 8009668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800966c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800966e:	e841 2300 	strex	r3, r2, [r1]
 8009672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e1      	bne.n	800963e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2220      	movs	r2, #32
 800967e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	e853 3f00 	ldrex	r3, [r3]
 800969a:	60fb      	str	r3, [r7, #12]
   return(result);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 0310 	bic.w	r3, r3, #16
 80096a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	461a      	mov	r2, r3
 80096ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80096b0:	61fb      	str	r3, [r7, #28]
 80096b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b4:	69b9      	ldr	r1, [r7, #24]
 80096b6:	69fa      	ldr	r2, [r7, #28]
 80096b8:	e841 2300 	strex	r3, r2, [r1]
 80096bc:	617b      	str	r3, [r7, #20]
   return(result);
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1e4      	bne.n	800968e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2202      	movs	r2, #2
 80096c8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f87f 	bl	80097d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096d6:	e063      	b.n	80097a0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80096d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00e      	beq.n	8009702 <HAL_UART_IRQHandler+0x59e>
 80096e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d008      	beq.n	8009702 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fdd2 	bl	800a2a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009700:	e051      	b.n	80097a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800970a:	2b00      	cmp	r3, #0
 800970c:	d014      	beq.n	8009738 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800970e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009716:	2b00      	cmp	r3, #0
 8009718:	d105      	bne.n	8009726 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800971a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800971e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d008      	beq.n	8009738 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800972a:	2b00      	cmp	r3, #0
 800972c:	d03a      	beq.n	80097a4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	4798      	blx	r3
    }
    return;
 8009736:	e035      	b.n	80097a4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800973c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009740:	2b00      	cmp	r3, #0
 8009742:	d009      	beq.n	8009758 <HAL_UART_IRQHandler+0x5f4>
 8009744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800974c:	2b00      	cmp	r3, #0
 800974e:	d003      	beq.n	8009758 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fd7c 	bl	800a24e <UART_EndTransmit_IT>
    return;
 8009756:	e026      	b.n	80097a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800975c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d009      	beq.n	8009778 <HAL_UART_IRQHandler+0x614>
 8009764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009768:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d003      	beq.n	8009778 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fdab 	bl	800a2cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009776:	e016      	b.n	80097a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800977c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d010      	beq.n	80097a6 <HAL_UART_IRQHandler+0x642>
 8009784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009788:	2b00      	cmp	r3, #0
 800978a:	da0c      	bge.n	80097a6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fd93 	bl	800a2b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009792:	e008      	b.n	80097a6 <HAL_UART_IRQHandler+0x642>
      return;
 8009794:	bf00      	nop
 8009796:	e006      	b.n	80097a6 <HAL_UART_IRQHandler+0x642>
    return;
 8009798:	bf00      	nop
 800979a:	e004      	b.n	80097a6 <HAL_UART_IRQHandler+0x642>
      return;
 800979c:	bf00      	nop
 800979e:	e002      	b.n	80097a6 <HAL_UART_IRQHandler+0x642>
      return;
 80097a0:	bf00      	nop
 80097a2:	e000      	b.n	80097a6 <HAL_UART_IRQHandler+0x642>
    return;
 80097a4:	bf00      	nop
  }
}
 80097a6:	37e8      	adds	r7, #232	; 0xe8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	460b      	mov	r3, r1
 80097de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097f0:	b08c      	sub	sp, #48	; 0x30
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	689a      	ldr	r2, [r3, #8]
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	431a      	orrs	r2, r3
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	431a      	orrs	r2, r3
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	4313      	orrs	r3, r2
 8009812:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	4baa      	ldr	r3, [pc, #680]	; (8009ac4 <UART_SetConfig+0x2d8>)
 800981c:	4013      	ands	r3, r2
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	6812      	ldr	r2, [r2, #0]
 8009822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009824:	430b      	orrs	r3, r1
 8009826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	68da      	ldr	r2, [r3, #12]
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	430a      	orrs	r2, r1
 800983c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a9f      	ldr	r2, [pc, #636]	; (8009ac8 <UART_SetConfig+0x2dc>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d004      	beq.n	8009858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009854:	4313      	orrs	r3, r2
 8009856:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009862:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	6812      	ldr	r2, [r2, #0]
 800986a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800986c:	430b      	orrs	r3, r1
 800986e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009876:	f023 010f 	bic.w	r1, r3, #15
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	430a      	orrs	r2, r1
 8009884:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a90      	ldr	r2, [pc, #576]	; (8009acc <UART_SetConfig+0x2e0>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d125      	bne.n	80098dc <UART_SetConfig+0xf0>
 8009890:	4b8f      	ldr	r3, [pc, #572]	; (8009ad0 <UART_SetConfig+0x2e4>)
 8009892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009896:	f003 0303 	and.w	r3, r3, #3
 800989a:	2b03      	cmp	r3, #3
 800989c:	d81a      	bhi.n	80098d4 <UART_SetConfig+0xe8>
 800989e:	a201      	add	r2, pc, #4	; (adr r2, 80098a4 <UART_SetConfig+0xb8>)
 80098a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a4:	080098b5 	.word	0x080098b5
 80098a8:	080098c5 	.word	0x080098c5
 80098ac:	080098bd 	.word	0x080098bd
 80098b0:	080098cd 	.word	0x080098cd
 80098b4:	2301      	movs	r3, #1
 80098b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098ba:	e116      	b.n	8009aea <UART_SetConfig+0x2fe>
 80098bc:	2302      	movs	r3, #2
 80098be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098c2:	e112      	b.n	8009aea <UART_SetConfig+0x2fe>
 80098c4:	2304      	movs	r3, #4
 80098c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098ca:	e10e      	b.n	8009aea <UART_SetConfig+0x2fe>
 80098cc:	2308      	movs	r3, #8
 80098ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098d2:	e10a      	b.n	8009aea <UART_SetConfig+0x2fe>
 80098d4:	2310      	movs	r3, #16
 80098d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098da:	e106      	b.n	8009aea <UART_SetConfig+0x2fe>
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a7c      	ldr	r2, [pc, #496]	; (8009ad4 <UART_SetConfig+0x2e8>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d138      	bne.n	8009958 <UART_SetConfig+0x16c>
 80098e6:	4b7a      	ldr	r3, [pc, #488]	; (8009ad0 <UART_SetConfig+0x2e4>)
 80098e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ec:	f003 030c 	and.w	r3, r3, #12
 80098f0:	2b0c      	cmp	r3, #12
 80098f2:	d82d      	bhi.n	8009950 <UART_SetConfig+0x164>
 80098f4:	a201      	add	r2, pc, #4	; (adr r2, 80098fc <UART_SetConfig+0x110>)
 80098f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fa:	bf00      	nop
 80098fc:	08009931 	.word	0x08009931
 8009900:	08009951 	.word	0x08009951
 8009904:	08009951 	.word	0x08009951
 8009908:	08009951 	.word	0x08009951
 800990c:	08009941 	.word	0x08009941
 8009910:	08009951 	.word	0x08009951
 8009914:	08009951 	.word	0x08009951
 8009918:	08009951 	.word	0x08009951
 800991c:	08009939 	.word	0x08009939
 8009920:	08009951 	.word	0x08009951
 8009924:	08009951 	.word	0x08009951
 8009928:	08009951 	.word	0x08009951
 800992c:	08009949 	.word	0x08009949
 8009930:	2300      	movs	r3, #0
 8009932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009936:	e0d8      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009938:	2302      	movs	r3, #2
 800993a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800993e:	e0d4      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009940:	2304      	movs	r3, #4
 8009942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009946:	e0d0      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009948:	2308      	movs	r3, #8
 800994a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800994e:	e0cc      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009950:	2310      	movs	r3, #16
 8009952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009956:	e0c8      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a5e      	ldr	r2, [pc, #376]	; (8009ad8 <UART_SetConfig+0x2ec>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d125      	bne.n	80099ae <UART_SetConfig+0x1c2>
 8009962:	4b5b      	ldr	r3, [pc, #364]	; (8009ad0 <UART_SetConfig+0x2e4>)
 8009964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009968:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800996c:	2b30      	cmp	r3, #48	; 0x30
 800996e:	d016      	beq.n	800999e <UART_SetConfig+0x1b2>
 8009970:	2b30      	cmp	r3, #48	; 0x30
 8009972:	d818      	bhi.n	80099a6 <UART_SetConfig+0x1ba>
 8009974:	2b20      	cmp	r3, #32
 8009976:	d00a      	beq.n	800998e <UART_SetConfig+0x1a2>
 8009978:	2b20      	cmp	r3, #32
 800997a:	d814      	bhi.n	80099a6 <UART_SetConfig+0x1ba>
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <UART_SetConfig+0x19a>
 8009980:	2b10      	cmp	r3, #16
 8009982:	d008      	beq.n	8009996 <UART_SetConfig+0x1aa>
 8009984:	e00f      	b.n	80099a6 <UART_SetConfig+0x1ba>
 8009986:	2300      	movs	r3, #0
 8009988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800998c:	e0ad      	b.n	8009aea <UART_SetConfig+0x2fe>
 800998e:	2302      	movs	r3, #2
 8009990:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009994:	e0a9      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009996:	2304      	movs	r3, #4
 8009998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800999c:	e0a5      	b.n	8009aea <UART_SetConfig+0x2fe>
 800999e:	2308      	movs	r3, #8
 80099a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099a4:	e0a1      	b.n	8009aea <UART_SetConfig+0x2fe>
 80099a6:	2310      	movs	r3, #16
 80099a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099ac:	e09d      	b.n	8009aea <UART_SetConfig+0x2fe>
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a4a      	ldr	r2, [pc, #296]	; (8009adc <UART_SetConfig+0x2f0>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d125      	bne.n	8009a04 <UART_SetConfig+0x218>
 80099b8:	4b45      	ldr	r3, [pc, #276]	; (8009ad0 <UART_SetConfig+0x2e4>)
 80099ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80099c2:	2bc0      	cmp	r3, #192	; 0xc0
 80099c4:	d016      	beq.n	80099f4 <UART_SetConfig+0x208>
 80099c6:	2bc0      	cmp	r3, #192	; 0xc0
 80099c8:	d818      	bhi.n	80099fc <UART_SetConfig+0x210>
 80099ca:	2b80      	cmp	r3, #128	; 0x80
 80099cc:	d00a      	beq.n	80099e4 <UART_SetConfig+0x1f8>
 80099ce:	2b80      	cmp	r3, #128	; 0x80
 80099d0:	d814      	bhi.n	80099fc <UART_SetConfig+0x210>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <UART_SetConfig+0x1f0>
 80099d6:	2b40      	cmp	r3, #64	; 0x40
 80099d8:	d008      	beq.n	80099ec <UART_SetConfig+0x200>
 80099da:	e00f      	b.n	80099fc <UART_SetConfig+0x210>
 80099dc:	2300      	movs	r3, #0
 80099de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099e2:	e082      	b.n	8009aea <UART_SetConfig+0x2fe>
 80099e4:	2302      	movs	r3, #2
 80099e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099ea:	e07e      	b.n	8009aea <UART_SetConfig+0x2fe>
 80099ec:	2304      	movs	r3, #4
 80099ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099f2:	e07a      	b.n	8009aea <UART_SetConfig+0x2fe>
 80099f4:	2308      	movs	r3, #8
 80099f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099fa:	e076      	b.n	8009aea <UART_SetConfig+0x2fe>
 80099fc:	2310      	movs	r3, #16
 80099fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a02:	e072      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a35      	ldr	r2, [pc, #212]	; (8009ae0 <UART_SetConfig+0x2f4>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d12a      	bne.n	8009a64 <UART_SetConfig+0x278>
 8009a0e:	4b30      	ldr	r3, [pc, #192]	; (8009ad0 <UART_SetConfig+0x2e4>)
 8009a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a1c:	d01a      	beq.n	8009a54 <UART_SetConfig+0x268>
 8009a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a22:	d81b      	bhi.n	8009a5c <UART_SetConfig+0x270>
 8009a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a28:	d00c      	beq.n	8009a44 <UART_SetConfig+0x258>
 8009a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a2e:	d815      	bhi.n	8009a5c <UART_SetConfig+0x270>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d003      	beq.n	8009a3c <UART_SetConfig+0x250>
 8009a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a38:	d008      	beq.n	8009a4c <UART_SetConfig+0x260>
 8009a3a:	e00f      	b.n	8009a5c <UART_SetConfig+0x270>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a42:	e052      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009a44:	2302      	movs	r3, #2
 8009a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a4a:	e04e      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009a4c:	2304      	movs	r3, #4
 8009a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a52:	e04a      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009a54:	2308      	movs	r3, #8
 8009a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a5a:	e046      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009a5c:	2310      	movs	r3, #16
 8009a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a62:	e042      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a17      	ldr	r2, [pc, #92]	; (8009ac8 <UART_SetConfig+0x2dc>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d13a      	bne.n	8009ae4 <UART_SetConfig+0x2f8>
 8009a6e:	4b18      	ldr	r3, [pc, #96]	; (8009ad0 <UART_SetConfig+0x2e4>)
 8009a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a7c:	d01a      	beq.n	8009ab4 <UART_SetConfig+0x2c8>
 8009a7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a82:	d81b      	bhi.n	8009abc <UART_SetConfig+0x2d0>
 8009a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a88:	d00c      	beq.n	8009aa4 <UART_SetConfig+0x2b8>
 8009a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a8e:	d815      	bhi.n	8009abc <UART_SetConfig+0x2d0>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d003      	beq.n	8009a9c <UART_SetConfig+0x2b0>
 8009a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a98:	d008      	beq.n	8009aac <UART_SetConfig+0x2c0>
 8009a9a:	e00f      	b.n	8009abc <UART_SetConfig+0x2d0>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009aa2:	e022      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009aaa:	e01e      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009aac:	2304      	movs	r3, #4
 8009aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ab2:	e01a      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009ab4:	2308      	movs	r3, #8
 8009ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009aba:	e016      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009abc:	2310      	movs	r3, #16
 8009abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ac2:	e012      	b.n	8009aea <UART_SetConfig+0x2fe>
 8009ac4:	cfff69f3 	.word	0xcfff69f3
 8009ac8:	40008000 	.word	0x40008000
 8009acc:	40013800 	.word	0x40013800
 8009ad0:	40021000 	.word	0x40021000
 8009ad4:	40004400 	.word	0x40004400
 8009ad8:	40004800 	.word	0x40004800
 8009adc:	40004c00 	.word	0x40004c00
 8009ae0:	40005000 	.word	0x40005000
 8009ae4:	2310      	movs	r3, #16
 8009ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4aae      	ldr	r2, [pc, #696]	; (8009da8 <UART_SetConfig+0x5bc>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	f040 8097 	bne.w	8009c24 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009af6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009afa:	2b08      	cmp	r3, #8
 8009afc:	d823      	bhi.n	8009b46 <UART_SetConfig+0x35a>
 8009afe:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <UART_SetConfig+0x318>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009b29 	.word	0x08009b29
 8009b08:	08009b47 	.word	0x08009b47
 8009b0c:	08009b31 	.word	0x08009b31
 8009b10:	08009b47 	.word	0x08009b47
 8009b14:	08009b37 	.word	0x08009b37
 8009b18:	08009b47 	.word	0x08009b47
 8009b1c:	08009b47 	.word	0x08009b47
 8009b20:	08009b47 	.word	0x08009b47
 8009b24:	08009b3f 	.word	0x08009b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b28:	f7ff f80c 	bl	8008b44 <HAL_RCC_GetPCLK1Freq>
 8009b2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b2e:	e010      	b.n	8009b52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b30:	4b9e      	ldr	r3, [pc, #632]	; (8009dac <UART_SetConfig+0x5c0>)
 8009b32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b34:	e00d      	b.n	8009b52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b36:	f7fe ff97 	bl	8008a68 <HAL_RCC_GetSysClockFreq>
 8009b3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b3c:	e009      	b.n	8009b52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b44:	e005      	b.n	8009b52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009b50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 8130 	beq.w	8009dba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5e:	4a94      	ldr	r2, [pc, #592]	; (8009db0 <UART_SetConfig+0x5c4>)
 8009b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b64:	461a      	mov	r2, r3
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	4613      	mov	r3, r2
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	4413      	add	r3, r2
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d305      	bcc.n	8009b8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b84:	69ba      	ldr	r2, [r7, #24]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d903      	bls.n	8009b92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009b90:	e113      	b.n	8009dba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	2200      	movs	r2, #0
 8009b96:	60bb      	str	r3, [r7, #8]
 8009b98:	60fa      	str	r2, [r7, #12]
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	4a84      	ldr	r2, [pc, #528]	; (8009db0 <UART_SetConfig+0x5c4>)
 8009ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	603b      	str	r3, [r7, #0]
 8009baa:	607a      	str	r2, [r7, #4]
 8009bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009bb4:	f7f7 f890 	bl	8000cd8 <__aeabi_uldivmod>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	f04f 0200 	mov.w	r2, #0
 8009bc4:	f04f 0300 	mov.w	r3, #0
 8009bc8:	020b      	lsls	r3, r1, #8
 8009bca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bce:	0202      	lsls	r2, r0, #8
 8009bd0:	6979      	ldr	r1, [r7, #20]
 8009bd2:	6849      	ldr	r1, [r1, #4]
 8009bd4:	0849      	lsrs	r1, r1, #1
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	460c      	mov	r4, r1
 8009bda:	4605      	mov	r5, r0
 8009bdc:	eb12 0804 	adds.w	r8, r2, r4
 8009be0:	eb43 0905 	adc.w	r9, r3, r5
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	469a      	mov	sl, r3
 8009bec:	4693      	mov	fp, r2
 8009bee:	4652      	mov	r2, sl
 8009bf0:	465b      	mov	r3, fp
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	f7f7 f86f 	bl	8000cd8 <__aeabi_uldivmod>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4613      	mov	r3, r2
 8009c00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c08:	d308      	bcc.n	8009c1c <UART_SetConfig+0x430>
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c10:	d204      	bcs.n	8009c1c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6a3a      	ldr	r2, [r7, #32]
 8009c18:	60da      	str	r2, [r3, #12]
 8009c1a:	e0ce      	b.n	8009dba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009c22:	e0ca      	b.n	8009dba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c2c:	d166      	bne.n	8009cfc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009c2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c32:	2b08      	cmp	r3, #8
 8009c34:	d827      	bhi.n	8009c86 <UART_SetConfig+0x49a>
 8009c36:	a201      	add	r2, pc, #4	; (adr r2, 8009c3c <UART_SetConfig+0x450>)
 8009c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3c:	08009c61 	.word	0x08009c61
 8009c40:	08009c69 	.word	0x08009c69
 8009c44:	08009c71 	.word	0x08009c71
 8009c48:	08009c87 	.word	0x08009c87
 8009c4c:	08009c77 	.word	0x08009c77
 8009c50:	08009c87 	.word	0x08009c87
 8009c54:	08009c87 	.word	0x08009c87
 8009c58:	08009c87 	.word	0x08009c87
 8009c5c:	08009c7f 	.word	0x08009c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c60:	f7fe ff70 	bl	8008b44 <HAL_RCC_GetPCLK1Freq>
 8009c64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c66:	e014      	b.n	8009c92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c68:	f7fe ff82 	bl	8008b70 <HAL_RCC_GetPCLK2Freq>
 8009c6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c6e:	e010      	b.n	8009c92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c70:	4b4e      	ldr	r3, [pc, #312]	; (8009dac <UART_SetConfig+0x5c0>)
 8009c72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c74:	e00d      	b.n	8009c92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c76:	f7fe fef7 	bl	8008a68 <HAL_RCC_GetSysClockFreq>
 8009c7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c7c:	e009      	b.n	8009c92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c84:	e005      	b.n	8009c92 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009c90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 8090 	beq.w	8009dba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	4a44      	ldr	r2, [pc, #272]	; (8009db0 <UART_SetConfig+0x5c4>)
 8009ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cac:	005a      	lsls	r2, r3, #1
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	085b      	lsrs	r3, r3, #1
 8009cb4:	441a      	add	r2, r3
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	2b0f      	cmp	r3, #15
 8009cc4:	d916      	bls.n	8009cf4 <UART_SetConfig+0x508>
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ccc:	d212      	bcs.n	8009cf4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	f023 030f 	bic.w	r3, r3, #15
 8009cd6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	085b      	lsrs	r3, r3, #1
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	8bfb      	ldrh	r3, [r7, #30]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	8bfa      	ldrh	r2, [r7, #30]
 8009cf0:	60da      	str	r2, [r3, #12]
 8009cf2:	e062      	b.n	8009dba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009cfa:	e05e      	b.n	8009dba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d00:	2b08      	cmp	r3, #8
 8009d02:	d828      	bhi.n	8009d56 <UART_SetConfig+0x56a>
 8009d04:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <UART_SetConfig+0x520>)
 8009d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0a:	bf00      	nop
 8009d0c:	08009d31 	.word	0x08009d31
 8009d10:	08009d39 	.word	0x08009d39
 8009d14:	08009d41 	.word	0x08009d41
 8009d18:	08009d57 	.word	0x08009d57
 8009d1c:	08009d47 	.word	0x08009d47
 8009d20:	08009d57 	.word	0x08009d57
 8009d24:	08009d57 	.word	0x08009d57
 8009d28:	08009d57 	.word	0x08009d57
 8009d2c:	08009d4f 	.word	0x08009d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d30:	f7fe ff08 	bl	8008b44 <HAL_RCC_GetPCLK1Freq>
 8009d34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d36:	e014      	b.n	8009d62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d38:	f7fe ff1a 	bl	8008b70 <HAL_RCC_GetPCLK2Freq>
 8009d3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d3e:	e010      	b.n	8009d62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d40:	4b1a      	ldr	r3, [pc, #104]	; (8009dac <UART_SetConfig+0x5c0>)
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d44:	e00d      	b.n	8009d62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d46:	f7fe fe8f 	bl	8008a68 <HAL_RCC_GetSysClockFreq>
 8009d4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d4c:	e009      	b.n	8009d62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d54:	e005      	b.n	8009d62 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009d60:	bf00      	nop
    }

    if (pclk != 0U)
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d028      	beq.n	8009dba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	4a10      	ldr	r2, [pc, #64]	; (8009db0 <UART_SetConfig+0x5c4>)
 8009d6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d72:	461a      	mov	r2, r3
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	085b      	lsrs	r3, r3, #1
 8009d80:	441a      	add	r2, r3
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	2b0f      	cmp	r3, #15
 8009d90:	d910      	bls.n	8009db4 <UART_SetConfig+0x5c8>
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d98:	d20c      	bcs.n	8009db4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	60da      	str	r2, [r3, #12]
 8009da4:	e009      	b.n	8009dba <UART_SetConfig+0x5ce>
 8009da6:	bf00      	nop
 8009da8:	40008000 	.word	0x40008000
 8009dac:	00f42400 	.word	0x00f42400
 8009db0:	080124e4 	.word	0x080124e4
      }
      else
      {
        ret = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009dd6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3730      	adds	r7, #48	; 0x30
 8009dde:	46bd      	mov	sp, r7
 8009de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df0:	f003 0308 	and.w	r3, r3, #8
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00a      	beq.n	8009e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e12:	f003 0301 	and.w	r3, r3, #1
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e34:	f003 0302 	and.w	r3, r3, #2
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00a      	beq.n	8009e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e56:	f003 0304 	and.w	r3, r3, #4
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00a      	beq.n	8009e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	430a      	orrs	r2, r1
 8009e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e78:	f003 0310 	and.w	r3, r3, #16
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00a      	beq.n	8009e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	430a      	orrs	r2, r1
 8009e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9a:	f003 0320 	and.w	r3, r3, #32
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00a      	beq.n	8009eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d01a      	beq.n	8009efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	430a      	orrs	r2, r1
 8009ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ee2:	d10a      	bne.n	8009efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00a      	beq.n	8009f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	605a      	str	r2, [r3, #4]
  }
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b098      	sub	sp, #96	; 0x60
 8009f2c:	af02      	add	r7, sp, #8
 8009f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f38:	f7fa fee8 	bl	8004d0c <HAL_GetTick>
 8009f3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 0308 	and.w	r3, r3, #8
 8009f48:	2b08      	cmp	r3, #8
 8009f4a:	d12f      	bne.n	8009fac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f54:	2200      	movs	r2, #0
 8009f56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f88e 	bl	800a07c <UART_WaitOnFlagUntilTimeout>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d022      	beq.n	8009fac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6e:	e853 3f00 	ldrex	r3, [r3]
 8009f72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	461a      	mov	r2, r3
 8009f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f84:	647b      	str	r3, [r7, #68]	; 0x44
 8009f86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f8c:	e841 2300 	strex	r3, r2, [r1]
 8009f90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1e6      	bne.n	8009f66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2220      	movs	r2, #32
 8009f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e063      	b.n	800a074 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 0304 	and.w	r3, r3, #4
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	d149      	bne.n	800a04e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f857 	bl	800a07c <UART_WaitOnFlagUntilTimeout>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d03c      	beq.n	800a04e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fdc:	e853 3f00 	ldrex	r3, [r3]
 8009fe0:	623b      	str	r3, [r7, #32]
   return(result);
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8009ff4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ffa:	e841 2300 	strex	r3, r2, [r1]
 8009ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1e6      	bne.n	8009fd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3308      	adds	r3, #8
 800a00c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	e853 3f00 	ldrex	r3, [r3]
 800a014:	60fb      	str	r3, [r7, #12]
   return(result);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f023 0301 	bic.w	r3, r3, #1
 800a01c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3308      	adds	r3, #8
 800a024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a026:	61fa      	str	r2, [r7, #28]
 800a028:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02a:	69b9      	ldr	r1, [r7, #24]
 800a02c:	69fa      	ldr	r2, [r7, #28]
 800a02e:	e841 2300 	strex	r3, r2, [r1]
 800a032:	617b      	str	r3, [r7, #20]
   return(result);
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1e5      	bne.n	800a006 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2220      	movs	r2, #32
 800a03e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e012      	b.n	800a074 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2220      	movs	r2, #32
 800a052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2220      	movs	r2, #32
 800a05a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3758      	adds	r7, #88	; 0x58
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	4613      	mov	r3, r2
 800a08a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a08c:	e04f      	b.n	800a12e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a094:	d04b      	beq.n	800a12e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a096:	f7fa fe39 	bl	8004d0c <HAL_GetTick>
 800a09a:	4602      	mov	r2, r0
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	69ba      	ldr	r2, [r7, #24]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d302      	bcc.n	800a0ac <UART_WaitOnFlagUntilTimeout+0x30>
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d101      	bne.n	800a0b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e04e      	b.n	800a14e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0304 	and.w	r3, r3, #4
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d037      	beq.n	800a12e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b80      	cmp	r3, #128	; 0x80
 800a0c2:	d034      	beq.n	800a12e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2b40      	cmp	r3, #64	; 0x40
 800a0c8:	d031      	beq.n	800a12e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	69db      	ldr	r3, [r3, #28]
 800a0d0:	f003 0308 	and.w	r3, r3, #8
 800a0d4:	2b08      	cmp	r3, #8
 800a0d6:	d110      	bne.n	800a0fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2208      	movs	r2, #8
 800a0de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 f838 	bl	800a156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2208      	movs	r2, #8
 800a0ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e029      	b.n	800a14e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	69db      	ldr	r3, [r3, #28]
 800a100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a108:	d111      	bne.n	800a12e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 f81e 	bl	800a156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2220      	movs	r2, #32
 800a11e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e00f      	b.n	800a14e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	69da      	ldr	r2, [r3, #28]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	4013      	ands	r3, r2
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	bf0c      	ite	eq
 800a13e:	2301      	moveq	r3, #1
 800a140:	2300      	movne	r3, #0
 800a142:	b2db      	uxtb	r3, r3
 800a144:	461a      	mov	r2, r3
 800a146:	79fb      	ldrb	r3, [r7, #7]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d0a0      	beq.n	800a08e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a156:	b480      	push	{r7}
 800a158:	b095      	sub	sp, #84	; 0x54
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a166:	e853 3f00 	ldrex	r3, [r3]
 800a16a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a172:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	461a      	mov	r2, r3
 800a17a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a17c:	643b      	str	r3, [r7, #64]	; 0x40
 800a17e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a184:	e841 2300 	strex	r3, r2, [r1]
 800a188:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1e6      	bne.n	800a15e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3308      	adds	r3, #8
 800a196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	e853 3f00 	ldrex	r3, [r3]
 800a19e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1a6:	f023 0301 	bic.w	r3, r3, #1
 800a1aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e3      	bne.n	800a190 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d118      	bne.n	800a202 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	e853 3f00 	ldrex	r3, [r3]
 800a1dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	f023 0310 	bic.w	r3, r3, #16
 800a1e4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1ee:	61bb      	str	r3, [r7, #24]
 800a1f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f2:	6979      	ldr	r1, [r7, #20]
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	e841 2300 	strex	r3, r2, [r1]
 800a1fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1e6      	bne.n	800a1d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2220      	movs	r2, #32
 800a206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a216:	bf00      	nop
 800a218:	3754      	adds	r7, #84	; 0x54
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f7ff fabd 	bl	80097c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b088      	sub	sp, #32
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	e853 3f00 	ldrex	r3, [r3]
 800a262:	60bb      	str	r3, [r7, #8]
   return(result);
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a26a:	61fb      	str	r3, [r7, #28]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	461a      	mov	r2, r3
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	61bb      	str	r3, [r7, #24]
 800a276:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a278:	6979      	ldr	r1, [r7, #20]
 800a27a:	69ba      	ldr	r2, [r7, #24]
 800a27c:	e841 2300 	strex	r3, r2, [r1]
 800a280:	613b      	str	r3, [r7, #16]
   return(result);
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1e6      	bne.n	800a256 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2220      	movs	r2, #32
 800a28c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7ff fa88 	bl	80097ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a29c:	bf00      	nop
 800a29e:	3720      	adds	r7, #32
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d101      	bne.n	800a2f6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	e027      	b.n	800a346 <HAL_UARTEx_DisableFifoMode+0x66>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2224      	movs	r2, #36	; 0x24
 800a302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f022 0201 	bic.w	r2, r2, #1
 800a31c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a324:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2220      	movs	r2, #32
 800a338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a362:	2b01      	cmp	r3, #1
 800a364:	d101      	bne.n	800a36a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a366:	2302      	movs	r3, #2
 800a368:	e02d      	b.n	800a3c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2224      	movs	r2, #36	; 0x24
 800a376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f022 0201 	bic.w	r2, r2, #1
 800a390:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	683a      	ldr	r2, [r7, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f850 	bl	800a44c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2220      	movs	r2, #32
 800a3b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d101      	bne.n	800a3e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	e02d      	b.n	800a442 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2224      	movs	r2, #36	; 0x24
 800a3f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f022 0201 	bic.w	r2, r2, #1
 800a40c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	683a      	ldr	r2, [r7, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f812 	bl	800a44c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2220      	movs	r2, #32
 800a434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d108      	bne.n	800a46e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a46c:	e031      	b.n	800a4d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a46e:	2308      	movs	r3, #8
 800a470:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a472:	2308      	movs	r3, #8
 800a474:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	0e5b      	lsrs	r3, r3, #25
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	f003 0307 	and.w	r3, r3, #7
 800a484:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	0f5b      	lsrs	r3, r3, #29
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	f003 0307 	and.w	r3, r3, #7
 800a494:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a496:	7bbb      	ldrb	r3, [r7, #14]
 800a498:	7b3a      	ldrb	r2, [r7, #12]
 800a49a:	4911      	ldr	r1, [pc, #68]	; (800a4e0 <UARTEx_SetNbDataToProcess+0x94>)
 800a49c:	5c8a      	ldrb	r2, [r1, r2]
 800a49e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4a2:	7b3a      	ldrb	r2, [r7, #12]
 800a4a4:	490f      	ldr	r1, [pc, #60]	; (800a4e4 <UARTEx_SetNbDataToProcess+0x98>)
 800a4a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	7b7a      	ldrb	r2, [r7, #13]
 800a4b8:	4909      	ldr	r1, [pc, #36]	; (800a4e0 <UARTEx_SetNbDataToProcess+0x94>)
 800a4ba:	5c8a      	ldrb	r2, [r1, r2]
 800a4bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4c0:	7b7a      	ldrb	r2, [r7, #13]
 800a4c2:	4908      	ldr	r1, [pc, #32]	; (800a4e4 <UARTEx_SetNbDataToProcess+0x98>)
 800a4c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a4d2:	bf00      	nop
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	080124fc 	.word	0x080124fc
 800a4e4:	08012504 	.word	0x08012504

0800a4e8 <_ZN17AbstractAllocatorD1Ev>:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
    virtual void* allocate(CanardInstance* ins, size_t amount) = 0;
    virtual void free(CanardInstance* ins, void* pointer) = 0;
    virtual ~AbstractAllocator() {}
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	4a04      	ldr	r2, [pc, #16]	; (800a504 <_ZN17AbstractAllocatorD1Ev+0x1c>)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	601a      	str	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	08012490 	.word	0x08012490

0800a508 <_ZN17AbstractAllocatorD0Ev>:
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7ff ffe9 	bl	800a4e8 <_ZN17AbstractAllocatorD1Ev>
 800a516:	2108      	movs	r1, #8
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f002 fe54 	bl	800d1c6 <_ZdlPvj>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4618      	mov	r0, r3
 800a522:	3708      	adds	r7, #8
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
#include "sys_allocator.h"
#include <cstdlib>

void* SystemAllocator::allocate(CanardInstance* const ins, const size_t amount) {
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
    (void)ins;
    void* mem;

    CRITICAL_SECTION({ mem = std::malloc(amount); })
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f002 fe9f 	bl	800d278 <malloc>
 800a53a:	4603      	mov	r3, r0
 800a53c:	617b      	str	r3, [r7, #20]
    if (mem == nullptr) {
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d105      	bne.n	800a550 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
        utilities.error_handler();
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	3310      	adds	r3, #16
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7f9 f95c 	bl	8003808 <_ZNKSt8functionIFvvEEclEv>
    }
    return mem;
 800a550:	697b      	ldr	r3, [r7, #20]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3718      	adds	r7, #24
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <_ZN15SystemAllocator4freeEP14CanardInstancePv>:

void SystemAllocator::free(CanardInstance* const ins, void* const pointer) {
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	60f8      	str	r0, [r7, #12]
 800a562:	60b9      	str	r1, [r7, #8]
 800a564:	607a      	str	r2, [r7, #4]
    (void)ins;
    CRITICAL_SECTION({ std::free(pointer); })
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f002 fe8e 	bl	800d288 <free>
}
 800a56c:	bf00      	nop
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <_ZN15SystemAllocatorD1Ev>:
class SystemAllocator : public AbstractAllocator {
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	4a05      	ldr	r2, [pc, #20]	; (800a594 <_ZN15SystemAllocatorD1Ev+0x20>)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	601a      	str	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff ffaf 	bl	800a4e8 <_ZN17AbstractAllocatorD1Ev>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	08012514 	.word	0x08012514

0800a598 <_ZN15SystemAllocatorD0Ev>:
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7ff ffe7 	bl	800a574 <_ZN15SystemAllocatorD1Ev>
 800a5a6:	2108      	movs	r1, #8
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f002 fe0c 	bl	800d1c6 <_ZdlPvj>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
void CyphalInterface::push(
    const CanardMicrosecond tx_deadline_usec,
    const CanardTransferMetadata* const metadata,
    const size_t payload_size,
    const void* const payload
) const {
 800a5b8:	b590      	push	{r4, r7, lr}
 800a5ba:	b08b      	sub	sp, #44	; 0x2c
 800a5bc:	af04      	add	r7, sp, #16
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t push_state = canardTxPush(
        &provider->queue,
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 f876 	bl	800a6ba <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800a5ce:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800a5d0:	f103 040c 	add.w	r4, r3, #12
        &provider->canard,
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f000 f86e 	bl	800a6ba <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800a5de:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800a5e0:	f103 0120 	add.w	r1, r3, #32
 800a5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e6:	9302      	str	r3, [sp, #8]
 800a5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ea:	9301      	str	r3, [sp, #4]
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f002 fb3f 	bl	800cc78 <canardTxPush>
 800a5fa:	6178      	str	r0, [r7, #20]
        tx_deadline_usec,
        metadata,
        payload_size,
        payload
    );
    if (push_state == -CANARD_ERROR_OUT_OF_MEMORY) {
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f113 0f03 	cmn.w	r3, #3
 800a602:	d106      	bne.n	800a612 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
#ifdef __linux__
        std::cerr << "[Error: OOM] Tried to send to port: " << metadata->port_id << ", node: " << +metadata->remote_node_id << std::endl;
#else
        utilities.error_handler();
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	3310      	adds	r3, #16
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7f9 f8fc 	bl	8003808 <_ZNKSt8functionIFvvEEclEv>
#endif
        return;
 800a610:	e008      	b.n	800a624 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
    }
    if (push_state < 0) {
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2b00      	cmp	r3, #0
 800a616:	da05      	bge.n	800a624 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
        utilities.error_handler();
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	3310      	adds	r3, #16
 800a61e:	4618      	mov	r0, r3
 800a620:	f7f9 f8f2 	bl	8003808 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800a624:	371c      	adds	r7, #28
 800a626:	46bd      	mov	sp, r7
 800a628:	bd90      	pop	{r4, r7, pc}
	...

0800a62c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
void CyphalInterface::subscribe(
    CanardPortID port_id,
    size_t extent,
    CanardTransferKind kind,
    CanardRxSubscription* subscription
) const {
 800a62c:	b590      	push	{r4, r7, lr}
 800a62e:	b089      	sub	sp, #36	; 0x24
 800a630:	af04      	add	r7, sp, #16
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	607a      	str	r2, [r7, #4]
 800a636:	461a      	mov	r2, r3
 800a638:	460b      	mov	r3, r1
 800a63a:	817b      	strh	r3, [r7, #10]
 800a63c:	4613      	mov	r3, r2
 800a63e:	727b      	strb	r3, [r7, #9]
    if (canardRxSubscribe(
            (CanardInstance* const)&provider->canard,
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3304      	adds	r3, #4
 800a644:	4618      	mov	r0, r3
 800a646:	f000 f838 	bl	800a6ba <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800a64a:	4603      	mov	r3, r0
    if (canardRxSubscribe(
 800a64c:	f103 0020 	add.w	r0, r3, #32
 800a650:	897c      	ldrh	r4, [r7, #10]
 800a652:	7a79      	ldrb	r1, [r7, #9]
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	9302      	str	r3, [sp, #8]
 800a658:	4a0d      	ldr	r2, [pc, #52]	; (800a690 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 800a65a:	f04f 0300 	mov.w	r3, #0
 800a65e:	e9cd 2300 	strd	r2, r3, [sp]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4622      	mov	r2, r4
 800a666:	f002 fc57 	bl	800cf18 <canardRxSubscribe>
 800a66a:	4603      	mov	r3, r0
            kind,
            port_id,
            extent,
            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
            subscription
        ) != 1) {
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	bf14      	ite	ne
 800a670:	2301      	movne	r3, #1
 800a672:	2300      	moveq	r3, #0
 800a674:	b2db      	uxtb	r3, r3
    if (canardRxSubscribe(
 800a676:	2b00      	cmp	r3, #0
 800a678:	d005      	beq.n	800a686 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
        utilities.error_handler();
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	3310      	adds	r3, #16
 800a680:	4618      	mov	r0, r3
 800a682:	f7f9 f8c1 	bl	8003808 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800a686:	bf00      	nop
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd90      	pop	{r4, r7, pc}
 800a68e:	bf00      	nop
 800a690:	001e8480 	.word	0x001e8480

0800a694 <_ZN15CyphalInterface4loopEv>:

void CyphalInterface::loop() {
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
    provider->can_loop();
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	3304      	adds	r3, #4
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f000 f80a 	bl	800a6ba <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	3208      	adds	r2, #8
 800a6ac:	6812      	ldr	r2, [r2, #0]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	4790      	blx	r2
}
 800a6b2:	bf00      	nop
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
	return get();
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f805 	bl	800a6d2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 800a6c8:	4603      	mov	r3, r0
      }
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 f805 	bl	800a6ec <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 f806 	bl	800a708 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4618      	mov	r0, r3
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4618      	mov	r0, r3
 800a714:	f000 f805 	bl	800a722 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a718:	4603      	mov	r3, r0
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f805 	bl	800a73a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 800a730:	4603      	mov	r3, r0
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b082      	sub	sp, #8
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4618      	mov	r0, r3
 800a746:	f000 f805 	bl	800a754 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 800a74a:	4603      	mov	r3, r0
 800a74c:	4618      	mov	r0, r3
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4618      	mov	r0, r3
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <_Z16fdcan_dlc_to_lenm>:
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
};

size_t fdcan_dlc_to_len(uint32_t dlc) {
 800a76a:	b480      	push	{r7}
 800a76c:	b085      	sub	sp, #20
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
    auto dlc_index = (uint8_t)(dlc / 65536);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	0c1b      	lsrs	r3, r3, #16
 800a776:	73fb      	strb	r3, [r7, #15]
    if (dlc_index <= 8) {
 800a778:	7bfb      	ldrb	r3, [r7, #15]
 800a77a:	2b08      	cmp	r3, #8
 800a77c:	d801      	bhi.n	800a782 <_Z16fdcan_dlc_to_lenm+0x18>
        return dlc_index;
 800a77e:	7bfb      	ldrb	r3, [r7, #15]
 800a780:	e009      	b.n	800a796 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    if (dlc_index <= 12) {
 800a782:	7bfb      	ldrb	r3, [r7, #15]
 800a784:	2b0c      	cmp	r3, #12
 800a786:	d803      	bhi.n	800a790 <_Z16fdcan_dlc_to_lenm+0x26>
        return 8 + 4 * (dlc_index - 8);
 800a788:	7bfb      	ldrb	r3, [r7, #15]
 800a78a:	3b06      	subs	r3, #6
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	e002      	b.n	800a796 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    return 32 + 16 * (dlc_index - 13);
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	3b0b      	subs	r3, #11
 800a794:	011b      	lsls	r3, r3, #4
}
 800a796:	4618      	mov	r0, r3
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
	...

0800a7a4 <_ZL12delay_cyclest>:
       bne     .L3               // 1 + 1-3 такта, в среднем 2(3?)
     *
     * Всего 5 тактов на цикл + 8 в начале.
     */

    uint8_t real_cycles = (cycles - 8) / 5;
 800a7a4:	f1a0 0308 	sub.w	r3, r0, #8
 800a7a8:	4a07      	ldr	r2, [pc, #28]	; (800a7c8 <_ZL12delay_cyclest+0x24>)
 800a7aa:	fb82 1203 	smull	r1, r2, r2, r3
 800a7ae:	17db      	asrs	r3, r3, #31
 800a7b0:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    while (real_cycles--) {
 800a7b4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800a7b8:	d004      	beq.n	800a7c4 <_ZL12delay_cyclest+0x20>
        __asm__("nop");
 800a7ba:	bf00      	nop
    while (real_cycles--) {
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800a7c2:	d1fa      	bne.n	800a7ba <_ZL12delay_cyclest+0x16>
    }
}
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	66666667 	.word	0x66666667

0800a7cc <_ZN5G4CAN10len_to_dlcEj>:
#if (defined(STM32G474xx) || defined(STM32_G)) && defined(HAL_FDCAN_MODULE_ENABLED)
#include <cstring>

#include "FDCAN_generic.h"

uint32_t G4CAN::len_to_dlc(size_t len) {
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
    return CanardFDCANLengthToDLC[len];
 800a7d6:	4a05      	ldr	r2, [pc, #20]	; (800a7ec <_ZN5G4CAN10len_to_dlcEj+0x20>)
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	370c      	adds	r7, #12
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	08012524 	.word	0x08012524

0800a7f0 <_ZN5G4CAN10dlc_to_lenEm>:

size_t G4CAN::dlc_to_len(uint32_t dlc) {
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
    return fdcan_dlc_to_len(dlc);
 800a7fa:	6838      	ldr	r0, [r7, #0]
 800a7fc:	f7ff ffb5 	bl	800a76a <_Z16fdcan_dlc_to_lenm>
 800a800:	4603      	mov	r3, r0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <_ZN5G4CAN8can_loopEv>:

void G4CAN::can_loop() {
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b086      	sub	sp, #24
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800a812:	e017      	b.n	800a844 <_ZN5G4CAN8can_loopEv+0x3a>
        CanardFrame frame;
        bool has_read = read_frame(&frame);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	330c      	adds	r3, #12
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f107 0208 	add.w	r2, r7, #8
 800a820:	4611      	mov	r1, r2
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	4798      	blx	r3
 800a826:	4603      	mov	r3, r0
 800a828:	75fb      	strb	r3, [r7, #23]
        if (!has_read)
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
 800a82c:	f083 0301 	eor.w	r3, r3, #1
 800a830:	b2db      	uxtb	r3, r3
 800a832:	2b00      	cmp	r3, #0
 800a834:	d115      	bne.n	800a862 <_ZN5G4CAN8can_loopEv+0x58>
            break;
        process_canard_rx(&frame);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f107 0208 	add.w	r2, r7, #8
 800a83c:	4611      	mov	r1, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 f8e2 	bl	800aa08 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a848:	2140      	movs	r1, #64	; 0x40
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fa ffd8 	bl	8005800 <HAL_FDCAN_GetRxFifoFillLevel>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	bf14      	ite	ne
 800a856:	2301      	movne	r3, #1
 800a858:	2300      	moveq	r3, #0
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1d9      	bne.n	800a814 <_ZN5G4CAN8can_loopEv+0xa>
 800a860:	e000      	b.n	800a864 <_ZN5G4CAN8can_loopEv+0x5a>
            break;
 800a862:	bf00      	nop
    }

    process_canard_tx();
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4618      	mov	r0, r3
 800a868:	f000 f92e 	bl	800aac8 <_ZN19AbstractCANProvider17process_canard_txEv>
}
 800a86c:	bf00      	nop
 800a86e:	3718      	adds	r7, #24
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <_ZN5G4CAN10read_frameEP11CanardFrame>:

static uint8_t RxData[64] = {};

bool G4CAN::read_frame(CanardFrame* rxf) {
 800a874:	b580      	push	{r7, lr}
 800a876:	b08e      	sub	sp, #56	; 0x38
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
    // may want to check 2 FIFOs in the future
    uint32_t rx_fifo = -1;
 800a87e:	f04f 33ff 	mov.w	r3, #4294967295
 800a882:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0)) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a888:	2140      	movs	r1, #64	; 0x40
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fa ffb8 	bl	8005800 <HAL_FDCAN_GetRxFifoFillLevel>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	bf14      	ite	ne
 800a896:	2301      	movne	r3, #1
 800a898:	2300      	moveq	r3, #0
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
        rx_fifo = FDCAN_RX_FIFO0;
 800a8a0:	2340      	movs	r3, #64	; 0x40
 800a8a2:	637b      	str	r3, [r7, #52]	; 0x34
 800a8a4:	e00f      	b.n	800a8c6 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
    } else if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO1)) {
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8aa:	2141      	movs	r1, #65	; 0x41
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7fa ffa7 	bl	8005800 <HAL_FDCAN_GetRxFifoFillLevel>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	bf14      	ite	ne
 800a8b8:	2301      	movne	r3, #1
 800a8ba:	2300      	moveq	r3, #0
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d001      	beq.n	800a8c6 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
        rx_fifo = FDCAN_RX_FIFO1;
 800a8c2:	2341      	movs	r3, #65	; 0x41
 800a8c4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if (rx_fifo == (uint32_t)-1) {
 800a8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8cc:	d101      	bne.n	800a8d2 <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
        return false;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	e02e      	b.n	800a930 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
    }

    FDCAN_RxHeaderTypeDef RxHeader = {};
 800a8d2:	f107 030c 	add.w	r3, r7, #12
 800a8d6:	2228      	movs	r2, #40	; 0x28
 800a8d8:	2100      	movs	r1, #0
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f003 fd4f 	bl	800e37e <memset>
    if (HAL_FDCAN_GetRxMessage(handler, rx_fifo, &RxHeader, RxData) != HAL_OK) {
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a8e4:	f107 020c 	add.w	r2, r7, #12
 800a8e8:	4b13      	ldr	r3, [pc, #76]	; (800a938 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800a8ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a8ec:	f7fa feae 	bl	800564c <HAL_FDCAN_GetRxMessage>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	bf14      	ite	ne
 800a8f6:	2301      	movne	r3, #1
 800a8f8:	2300      	moveq	r3, #0
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d005      	beq.n	800a90c <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
        utilities.error_handler();
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a904:	3310      	adds	r3, #16
 800a906:	4618      	mov	r0, r3
 800a908:	f7f8 ff7e 	bl	8003808 <_ZNKSt8functionIFvvEEclEv>
    }

    rxf->extended_can_id = RxHeader.Identifier;
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	601a      	str	r2, [r3, #0]
    rxf->payload_size = dlc_to_len(RxHeader.DataLength);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3304      	adds	r3, #4
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	69ba      	ldr	r2, [r7, #24]
 800a91c:	4611      	mov	r1, r2
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	4798      	blx	r3
 800a922:	4602      	mov	r2, r0
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	605a      	str	r2, [r3, #4]
    rxf->payload = (void*)RxData;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	4a03      	ldr	r2, [pc, #12]	; (800a938 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800a92c:	609a      	str	r2, [r3, #8]
    return true;
 800a92e:	2301      	movs	r3, #1
}
 800a930:	4618      	mov	r0, r3
 800a932:	3738      	adds	r7, #56	; 0x38
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	20000430 	.word	0x20000430

0800a93c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:

int G4CAN::write_frame(const CanardTxQueueItem* ti) {
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08c      	sub	sp, #48	; 0x30
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = ti->frame.extended_can_id;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 800a94c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a950:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800a952:	2300      	movs	r3, #0
 800a954:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = CanardFDCANLengthToDLC[ti->frame.payload_size];
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95a:	4a2a      	ldr	r2, [pc, #168]	; (800aa04 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 800a95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a960:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800a962:	2300      	movs	r3, #0
 800a964:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800a966:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a96a:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 800a96c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a970:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 800a972:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a976:	627b      	str	r3, [r7, #36]	; 0x24
    TxHeader.MessageMarker = 0x0;
 800a978:	2300      	movs	r3, #0
 800a97a:	62bb      	str	r3, [r7, #40]	; 0x28

    // all mailboxes should be free -
    // https://forum.opencyphal.org/t/uavcan-v0-found-data-transfer-reversal/1476/6
    // "Reduce the number of enqueued frames to 1" - fix to inner priority inversion
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800a97c:	2300      	movs	r3, #0
 800a97e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a980:	e006      	b.n	800a990 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
        delay_cycles(ONE_FULL_FRAME_CYCLES);
 800a982:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800a986:	f7ff ff0d 	bl	800a7a4 <_ZL12delay_cyclest>
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800a98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98c:	3301      	adds	r3, #1
 800a98e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a994:	4618      	mov	r0, r3
 800a996:	f7fa ff51 	bl	800583c <HAL_FDCAN_GetTxFifoFreeLevel>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b03      	cmp	r3, #3
 800a99e:	d004      	beq.n	800a9aa <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	dc01      	bgt.n	800a9aa <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e000      	b.n	800a9ac <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1e8      	bne.n	800a982 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
    } // wait for message to transmit
    if (HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3) {
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fa ff41 	bl	800583c <HAL_FDCAN_GetTxFifoFreeLevel>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b03      	cmp	r3, #3
 800a9be:	bf14      	ite	ne
 800a9c0:	2301      	movne	r3, #1
 800a9c2:	2300      	moveq	r3, #0
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d002      	beq.n	800a9d0 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
        return -1;
 800a9ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ce:	e014      	b.n	800a9fa <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }

    if (HAL_FDCAN_AddMessageToTxFifoQ(handler, &TxHeader, (uint8_t *)ti->frame.payload) != HAL_OK) {
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9d8:	f107 0308 	add.w	r3, r7, #8
 800a9dc:	4619      	mov	r1, r3
 800a9de:	f7fa fdf1 	bl	80055c4 <HAL_FDCAN_AddMessageToTxFifoQ>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	bf14      	ite	ne
 800a9e8:	2301      	movne	r3, #1
 800a9ea:	2300      	moveq	r3, #0
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d002      	beq.n	800a9f8 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
        return -1;
 800a9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f6:	e000      	b.n	800a9fa <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }
    return TxHeader.DataLength;
 800a9f8:	697b      	ldr	r3, [r7, #20]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3730      	adds	r7, #48	; 0x30
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	08012524 	.word	0x08012524

0800aa08 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
CanardInstance canard{};

std::unique_ptr<AbstractAllocator> _alloc_ptr;


void AbstractCANProvider::process_canard_rx(CanardFrame* frame) {
 800aa08:	b590      	push	{r4, r7, lr}
 800aa0a:	b093      	sub	sp, #76	; 0x4c
 800aa0c:	af04      	add	r7, sp, #16
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
    CanardRxTransfer transfer = {.payload = nullptr};
 800aa12:	f107 0310 	add.w	r3, r7, #16
 800aa16:	2200      	movs	r2, #0
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	605a      	str	r2, [r3, #4]
 800aa1c:	609a      	str	r2, [r3, #8]
 800aa1e:	60da      	str	r2, [r3, #12]
 800aa20:	611a      	str	r2, [r3, #16]
 800aa22:	615a      	str	r2, [r3, #20]
    CanardRxSubscription* subscription = nullptr;
 800aa24:	2300      	movs	r3, #0
 800aa26:	60fb      	str	r3, [r7, #12]
    void (*processor)(CanardRxTransfer*) = nullptr;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	637b      	str	r3, [r7, #52]	; 0x34
    IListener<CanardRxTransfer*>* listener = nullptr;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	633b      	str	r3, [r7, #48]	; 0x30

    const int8_t accept_result = canardRxAccept(
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f103 0420 	add.w	r4, r3, #32
        (CanardInstance* const)&canard,
        utilities.micros_64(),
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    const int8_t accept_result = canardRxAccept(
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7f8 fefa 	bl	8003834 <_ZNKSt8functionIFyvEEclEv>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	f107 010c 	add.w	r1, r7, #12
 800aa48:	9103      	str	r1, [sp, #12]
 800aa4a:	f107 0110 	add.w	r1, r7, #16
 800aa4e:	9102      	str	r1, [sp, #8]
 800aa50:	2100      	movs	r1, #0
 800aa52:	9101      	str	r1, [sp, #4]
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	9100      	str	r1, [sp, #0]
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f002 f9cd 	bl	800cdf8 <canardRxAccept>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        frame,
        0,
        &transfer,
        &subscription
    );
    if (accept_result == 0 || accept_result > 1) {
 800aa64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d029      	beq.n	800aac0 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xb8>
 800aa6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	dc25      	bgt.n	800aac0 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xb8>
        // The received frame is either invalid or it's a non-last frame of a multi-frame transfer.
        return;
    }
    if (accept_result < 0) goto exit;
 800aa74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	db11      	blt.n	800aaa0 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x98>
    if (subscription == nullptr) goto exit;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d010      	beq.n	800aaa4 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x9c>

    listener = reinterpret_cast<IListener<CanardRxTransfer*>*>(subscription->user_reference);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	633b      	str	r3, [r7, #48]	; 0x30
    if (listener == nullptr) goto exit;
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00c      	beq.n	800aaa8 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
    listener->accept(&transfer);
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f107 0210 	add.w	r2, r7, #16
 800aa98:	4611      	mov	r1, r2
 800aa9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa9c:	4798      	blx	r3
 800aa9e:	e004      	b.n	800aaaa <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (accept_result < 0) goto exit;
 800aaa0:	bf00      	nop
 800aaa2:	e002      	b.n	800aaaa <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (subscription == nullptr) goto exit;
 800aaa4:	bf00      	nop
 800aaa6:	e000      	b.n	800aaaa <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (listener == nullptr) goto exit;
 800aaa8:	bf00      	nop

exit:
    if (transfer.payload != nullptr) {
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d008      	beq.n	800aac2 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xba>
        canard.memory_free(&canard, transfer.payload);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	3220      	adds	r2, #32
 800aab8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aaba:	4610      	mov	r0, r2
 800aabc:	4798      	blx	r3
 800aabe:	e000      	b.n	800aac2 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xba>
        return;
 800aac0:	bf00      	nop
    }
}
 800aac2:	373c      	adds	r7, #60	; 0x3c
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd90      	pop	{r4, r7, pc}

0800aac8 <_ZN19AbstractCANProvider17process_canard_txEv>:

void AbstractCANProvider::process_canard_tx() {
 800aac8:	b5b0      	push	{r4, r5, r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
    // Look at top of the TX queue of individual CAN frames
    while (queue.size != 0) {
 800aad0:	e036      	b.n	800ab40 <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
        const CanardTxQueueItem* ti = canardTxPeek(&queue);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	330c      	adds	r3, #12
 800aad6:	4618      	mov	r0, r3
 800aad8:	f002 f958 	bl	800cd8c <canardTxPeek>
 800aadc:	60f8      	str	r0, [r7, #12]

        if (0U == ti->tx_deadline_usec || ti->tx_deadline_usec > utilities.micros_64()) {
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	d00c      	beq.n	800ab02 <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7f8 fe9e 	bl	8003834 <_ZNKSt8functionIFyvEEclEv>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	42a2      	cmp	r2, r4
 800aafe:	41ab      	sbcs	r3, r5
 800ab00:	d201      	bcs.n	800ab06 <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e000      	b.n	800ab08 <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 800ab06:	2300      	movs	r3, #0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00a      	beq.n	800ab22 <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
            int written = write_frame(ti);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3310      	adds	r3, #16
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68f9      	ldr	r1, [r7, #12]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	4798      	blx	r3
 800ab1a:	60b8      	str	r0, [r7, #8]
            if (written < 0) {
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	db13      	blt.n	800ab4a <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
                break;
            }
        }
        // After the frame is transmitted or if it has timed out while waiting,
        // pop it from the queue and deallocate:
        canard.memory_free(&canard, canardTxPop(&queue, ti));
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f103 0520 	add.w	r5, r3, #32
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	330c      	adds	r3, #12
 800ab30:	68f9      	ldr	r1, [r7, #12]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f002 f93f 	bl	800cdb6 <canardTxPop>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	47a0      	blx	r4
    while (queue.size != 0) {
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	695b      	ldr	r3, [r3, #20]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1c4      	bne.n	800aad2 <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
    }
}
 800ab48:	e000      	b.n	800ab4c <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
                break;
 800ab4a:	bf00      	nop
}
 800ab4c:	bf00      	nop
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bdb0      	pop	{r4, r5, r7, pc}

0800ab54 <_Z41__static_initialization_and_destruction_0ii>:
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d107      	bne.n	800ab74 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d102      	bne.n	800ab74 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800ab6e:	4803      	ldr	r0, [pc, #12]	; (800ab7c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800ab70:	f000 f806 	bl	800ab80 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 800ab74:	bf00      	nop
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	20000470 	.word	0x20000470

0800ab80 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800ab80:	b590      	push	{r4, r7, lr}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7f9 fc00 	bl	8004390 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800ab90:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00c      	beq.n	800abb4 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f7f9 fa75 	bl	800408a <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 800aba0:	4604      	mov	r4, r0
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f7f9 fb1f 	bl	80041e6 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 800aba8:	4603      	mov	r3, r0
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4619      	mov	r1, r3
 800abae:	4620      	mov	r0, r4
 800abb0:	f7f9 fbfb 	bl	80043aa <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2200      	movs	r2, #0
 800abb8:	601a      	str	r2, [r3, #0]
      }
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4618      	mov	r0, r3
 800abbe:	3714      	adds	r7, #20
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd90      	pop	{r4, r7, pc}

0800abc4 <_GLOBAL__sub_I_queue>:
 800abc4:	b580      	push	{r7, lr}
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800abcc:	2001      	movs	r0, #1
 800abce:	f7ff ffc1 	bl	800ab54 <_Z41__static_initialization_and_destruction_0ii>
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <_GLOBAL__sub_D_queue>:
 800abd4:	b580      	push	{r7, lr}
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800abdc:	2000      	movs	r0, #0
 800abde:	f7ff ffb9 	bl	800ab54 <_Z41__static_initialization_and_destruction_0ii>
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 800abf0:	2300      	movs	r3, #0
 800abf2:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800abf8:	e007      	b.n	800ac0a <cavlFindExtremum+0x26>
    {
        result = c;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 800abfe:	78fb      	ldrb	r3, [r7, #3]
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4413      	add	r3, r2
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1f4      	bne.n	800abfa <cavlFindExtremum+0x16>
    }
    return result;
 800ac10:	68fb      	ldr	r3, [r7, #12]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
	...

0800ac20 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d014      	beq.n	800ac5c <cavlPrivateRotate+0x3c>
 800ac32:	78fb      	ldrb	r3, [r7, #3]
 800ac34:	f083 0301 	eor.w	r3, r3, #1
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00a      	beq.n	800ac5c <cavlPrivateRotate+0x3c>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ac4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac50:	db04      	blt.n	800ac5c <cavlPrivateRotate+0x3c>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	dd05      	ble.n	800ac68 <cavlPrivateRotate+0x48>
 800ac5c:	4b2a      	ldr	r3, [pc, #168]	; (800ad08 <cavlPrivateRotate+0xe8>)
 800ac5e:	4a2b      	ldr	r2, [pc, #172]	; (800ad0c <cavlPrivateRotate+0xec>)
 800ac60:	2162      	movs	r1, #98	; 0x62
 800ac62:	482b      	ldr	r0, [pc, #172]	; (800ad10 <cavlPrivateRotate+0xf0>)
 800ac64:	f002 fad8 	bl	800d218 <__assert_func>
    Cavl* const z = x->lr[!r];
 800ac68:	78fb      	ldrb	r3, [r7, #3]
 800ac6a:	f083 0301 	eor.w	r3, r3, #1
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00e      	beq.n	800aca0 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	6879      	ldr	r1, [r7, #4]
 800ac8e:	4299      	cmp	r1, r3
 800ac90:	bf0c      	ite	eq
 800ac92:	2301      	moveq	r3, #1
 800ac94:	2300      	movne	r3, #0
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4413      	add	r3, r2
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	601a      	str	r2, [r3, #0]
    x->up     = z;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 800acae:	78fb      	ldrb	r3, [r7, #3]
 800acb0:	78fa      	ldrb	r2, [r7, #3]
 800acb2:	f082 0201 	eor.w	r2, r2, #1
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	4610      	mov	r0, r2
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	6879      	ldr	r1, [r7, #4]
 800acc4:	0083      	lsls	r3, r0, #2
 800acc6:	440b      	add	r3, r1
 800acc8:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 800acca:	78fb      	ldrb	r3, [r7, #3]
 800accc:	f083 0301 	eor.w	r3, r3, #1
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d009      	beq.n	800acf2 <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 800acde:	78fb      	ldrb	r3, [r7, #3]
 800ace0:	f083 0301 	eor.w	r3, r3, #1
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 800acf2:	78fb      	ldrb	r3, [r7, #3]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	605a      	str	r2, [r3, #4]
}
 800acfe:	bf00      	nop
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	08011a00 	.word	0x08011a00
 800ad0c:	080129b0 	.word	0x080129b0
 800ad10:	08011a48 	.word	0x08011a48

0800ad14 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00a      	beq.n	800ad3c <cavlPrivateAdjustBalance+0x28>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ad2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad30:	db04      	blt.n	800ad3c <cavlPrivateAdjustBalance+0x28>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	dd05      	ble.n	800ad48 <cavlPrivateAdjustBalance+0x34>
 800ad3c:	4b61      	ldr	r3, [pc, #388]	; (800aec4 <cavlPrivateAdjustBalance+0x1b0>)
 800ad3e:	4a62      	ldr	r2, [pc, #392]	; (800aec8 <cavlPrivateAdjustBalance+0x1b4>)
 800ad40:	2177      	movs	r1, #119	; 0x77
 800ad42:	4862      	ldr	r0, [pc, #392]	; (800aecc <cavlPrivateAdjustBalance+0x1b8>)
 800ad44:	f002 fa68 	bl	800d218 <__assert_func>
    Cavl*        out    = x;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	78fa      	ldrb	r2, [r7, #3]
 800ad56:	2a00      	cmp	r2, #0
 800ad58:	d001      	beq.n	800ad5e <cavlPrivateAdjustBalance+0x4a>
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	e000      	b.n	800ad60 <cavlPrivateAdjustBalance+0x4c>
 800ad5e:	22ff      	movs	r2, #255	; 0xff
 800ad60:	4413      	add	r3, r2
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 800ad66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6e:	db04      	blt.n	800ad7a <cavlPrivateAdjustBalance+0x66>
 800ad70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	f340 809c 	ble.w	800aeb2 <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 800ad7a:	7cfb      	ldrb	r3, [r7, #19]
 800ad7c:	09db      	lsrs	r3, r3, #7
 800ad7e:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 800ad80:	7cbb      	ldrb	r3, [r7, #18]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <cavlPrivateAdjustBalance+0x76>
 800ad86:	2301      	movs	r3, #1
 800ad88:	e001      	b.n	800ad8e <cavlPrivateAdjustBalance+0x7a>
 800ad8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8e:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 800ad90:	7cbb      	ldrb	r3, [r7, #18]
 800ad92:	f083 0301 	eor.w	r3, r3, #1
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d105      	bne.n	800adb4 <cavlPrivateAdjustBalance+0xa0>
 800ada8:	4b49      	ldr	r3, [pc, #292]	; (800aed0 <cavlPrivateAdjustBalance+0x1bc>)
 800adaa:	4a47      	ldr	r2, [pc, #284]	; (800aec8 <cavlPrivateAdjustBalance+0x1b4>)
 800adac:	217f      	movs	r1, #127	; 0x7f
 800adae:	4847      	ldr	r0, [pc, #284]	; (800aecc <cavlPrivateAdjustBalance+0x1b8>)
 800adb0:	f002 fa32 	bl	800d218 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800adba:	461a      	mov	r2, r3
 800adbc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800adc0:	fb02 f303 	mul.w	r3, r2, r3
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	dc1c      	bgt.n	800ae02 <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 800adcc:	7cbb      	ldrb	r3, [r7, #18]
 800adce:	4619      	mov	r1, r3
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f7ff ff25 	bl	800ac20 <cavlPrivateRotate>
            if (0 == z->bf)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d109      	bne.n	800adf4 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 800ade0:	7c7b      	ldrb	r3, [r7, #17]
 800ade2:	425b      	negs	r3, r3
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	b25a      	sxtb	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	7c7a      	ldrb	r2, [r7, #17]
 800adf0:	731a      	strb	r2, [r3, #12]
    {
 800adf2:	e061      	b.n	800aeb8 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	731a      	strb	r2, [r3, #12]
    {
 800ae00:	e05a      	b.n	800aeb8 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 800ae02:	7cbb      	ldrb	r3, [r7, #18]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d105      	bne.n	800ae20 <cavlPrivateAdjustBalance+0x10c>
 800ae14:	4b2f      	ldr	r3, [pc, #188]	; (800aed4 <cavlPrivateAdjustBalance+0x1c0>)
 800ae16:	4a2c      	ldr	r2, [pc, #176]	; (800aec8 <cavlPrivateAdjustBalance+0x1b4>)
 800ae18:	2192      	movs	r1, #146	; 0x92
 800ae1a:	482c      	ldr	r0, [pc, #176]	; (800aecc <cavlPrivateAdjustBalance+0x1b8>)
 800ae1c:	f002 f9fc 	bl	800d218 <__assert_func>
            out = y;
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 800ae24:	7cbb      	ldrb	r3, [r7, #18]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bf14      	ite	ne
 800ae2a:	2301      	movne	r3, #1
 800ae2c:	2300      	moveq	r3, #0
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	f083 0301 	eor.w	r3, r3, #1
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	f003 0301 	and.w	r3, r3, #1
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7ff feee 	bl	800ac20 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 800ae44:	7cbb      	ldrb	r3, [r7, #18]
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f7ff fee9 	bl	800ac20 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ae54:	461a      	mov	r2, r3
 800ae56:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800ae5a:	fb02 f303 	mul.w	r3, r2, r3
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	da09      	bge.n	800ae76 <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	7c7a      	ldrb	r2, [r7, #17]
 800ae66:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	731a      	strb	r2, [r3, #12]
    {
 800ae74:	e020      	b.n	800aeb8 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800ae82:	fb02 f303 	mul.w	r3, r2, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	dd0c      	ble.n	800aea4 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2200      	movs	r2, #0
 800ae94:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 800ae96:	7c7b      	ldrb	r3, [r7, #17]
 800ae98:	425b      	negs	r3, r3
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	b25a      	sxtb	r2, r3
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	731a      	strb	r2, [r3, #12]
    {
 800aea2:	e009      	b.n	800aeb8 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	731a      	strb	r2, [r3, #12]
    {
 800aeb0:	e002      	b.n	800aeb8 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	7cfa      	ldrb	r2, [r7, #19]
 800aeb6:	731a      	strb	r2, [r3, #12]
    }
    return out;
 800aeb8:	697b      	ldr	r3, [r7, #20]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3718      	adds	r7, #24
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	08011a74 	.word	0x08011a74
 800aec8:	08012994 	.word	0x08012994
 800aecc:	08011a48 	.word	0x08011a48
 800aed0:	08011aa4 	.word	0x08011aa4
 800aed4:	08011ab0 	.word	0x08011ab0

0800aed8 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d004      	beq.n	800aef0 <cavlPrivateRetraceOnGrowth+0x18>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d005      	beq.n	800aefc <cavlPrivateRetraceOnGrowth+0x24>
 800aef0:	4b23      	ldr	r3, [pc, #140]	; (800af80 <cavlPrivateRetraceOnGrowth+0xa8>)
 800aef2:	4a24      	ldr	r2, [pc, #144]	; (800af84 <cavlPrivateRetraceOnGrowth+0xac>)
 800aef4:	21b5      	movs	r1, #181	; 0xb5
 800aef6:	4824      	ldr	r0, [pc, #144]	; (800af88 <cavlPrivateRetraceOnGrowth+0xb0>)
 800aef8:	f002 f98e 	bl	800d218 <__assert_func>
    Cavl* c = added;      // Child
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 800af06:	e023      	b.n	800af50 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	697a      	ldr	r2, [r7, #20]
 800af0e:	429a      	cmp	r2, r3
 800af10:	bf0c      	ite	eq
 800af12:	2301      	moveq	r3, #1
 800af14:	2300      	movne	r3, #0
 800af16:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 800af18:	7bfb      	ldrb	r3, [r7, #15]
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	429a      	cmp	r2, r3
 800af26:	d005      	beq.n	800af34 <cavlPrivateRetraceOnGrowth+0x5c>
 800af28:	4b18      	ldr	r3, [pc, #96]	; (800af8c <cavlPrivateRetraceOnGrowth+0xb4>)
 800af2a:	4a16      	ldr	r2, [pc, #88]	; (800af84 <cavlPrivateRetraceOnGrowth+0xac>)
 800af2c:	21bb      	movs	r1, #187	; 0xbb
 800af2e:	4816      	ldr	r0, [pc, #88]	; (800af88 <cavlPrivateRetraceOnGrowth+0xb0>)
 800af30:	f002 f972 	bl	800d218 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 800af34:	7bfb      	ldrb	r3, [r7, #15]
 800af36:	4619      	mov	r1, r3
 800af38:	6938      	ldr	r0, [r7, #16]
 800af3a:	f7ff feeb 	bl	800ad14 <cavlPrivateAdjustBalance>
 800af3e:	6178      	str	r0, [r7, #20]
        p = c->up;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d003      	beq.n	800af58 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1d8      	bne.n	800af08 <cavlPrivateRetraceOnGrowth+0x30>
 800af56:	e000      	b.n	800af5a <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 800af58:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d105      	bne.n	800af6c <cavlPrivateRetraceOnGrowth+0x94>
 800af60:	4b0b      	ldr	r3, [pc, #44]	; (800af90 <cavlPrivateRetraceOnGrowth+0xb8>)
 800af62:	4a08      	ldr	r2, [pc, #32]	; (800af84 <cavlPrivateRetraceOnGrowth+0xac>)
 800af64:	21c3      	movs	r1, #195	; 0xc3
 800af66:	4808      	ldr	r0, [pc, #32]	; (800af88 <cavlPrivateRetraceOnGrowth+0xb0>)
 800af68:	f002 f956 	bl	800d218 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <cavlPrivateRetraceOnGrowth+0x9e>
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	e000      	b.n	800af78 <cavlPrivateRetraceOnGrowth+0xa0>
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3718      	adds	r7, #24
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	08011abc 	.word	0x08011abc
 800af84:	08012978 	.word	0x08012978
 800af88:	08011a48 	.word	0x08011a48
 800af8c:	08011ae0 	.word	0x08011ae0
 800af90:	08011af0 	.word	0x08011af0

0800af94 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b08a      	sub	sp, #40	; 0x28
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
 800afa0:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((root != NULL) && (predicate != NULL))
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d065      	beq.n	800b078 <cavlSearch+0xe4>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d062      	beq.n	800b078 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 800afbc:	e02f      	b.n	800b01e <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4611      	mov	r1, r2
 800afc6:	68b8      	ldr	r0, [r7, #8]
 800afc8:	4798      	blx	r3
 800afca:	4603      	mov	r3, r0
 800afcc:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 800afce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d103      	bne.n	800afde <cavlSearch+0x4a>
            {
                out = *n;
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800afdc:	e023      	b.n	800b026 <cavlSearch+0x92>
            }
            up = *n;
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800afec:	2b00      	cmp	r3, #0
 800afee:	bfcc      	ite	gt
 800aff0:	2301      	movgt	r3, #1
 800aff2:	2300      	movle	r3, #0
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	3304      	adds	r3, #4
 800affc:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00b      	beq.n	800b01e <cavlSearch+0x8a>
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6a3a      	ldr	r2, [r7, #32]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d005      	beq.n	800b01e <cavlSearch+0x8a>
 800b012:	4b1c      	ldr	r3, [pc, #112]	; (800b084 <cavlSearch+0xf0>)
 800b014:	4a1c      	ldr	r2, [pc, #112]	; (800b088 <cavlSearch+0xf4>)
 800b016:	21db      	movs	r1, #219	; 0xdb
 800b018:	481c      	ldr	r0, [pc, #112]	; (800b08c <cavlSearch+0xf8>)
 800b01a:	f002 f8fd 	bl	800d218 <__assert_func>
        while (*n != NULL)
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1cb      	bne.n	800afbe <cavlSearch+0x2a>
        }
        if (NULL == out)
 800b026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d125      	bne.n	800b078 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d004      	beq.n	800b03c <cavlSearch+0xa8>
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	68b8      	ldr	r0, [r7, #8]
 800b036:	4798      	blx	r3
 800b038:	4603      	mov	r3, r0
 800b03a:	e000      	b.n	800b03e <cavlSearch+0xaa>
 800b03c:	2300      	movs	r3, #0
 800b03e:	627b      	str	r3, [r7, #36]	; 0x24
            if (out != NULL)
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	2b00      	cmp	r3, #0
 800b044:	d018      	beq.n	800b078 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b04a:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 800b04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04e:	2200      	movs	r2, #0
 800b050:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 800b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b054:	2200      	movs	r2, #0
 800b056:	609a      	str	r2, [r3, #8]
                out->up        = up;
 800b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05a:	6a3a      	ldr	r2, [r7, #32]
 800b05c:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 800b05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b060:	2200      	movs	r2, #0
 800b062:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 800b064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b066:	f7ff ff37 	bl	800aed8 <cavlPrivateRetraceOnGrowth>
 800b06a:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d002      	beq.n	800b078 <cavlSearch+0xe4>
                {
                    *root = rt;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	697a      	ldr	r2, [r7, #20]
 800b076:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3728      	adds	r7, #40	; 0x28
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	08011afc 	.word	0x08011afc
 800b088:	0801296c 	.word	0x0801296c
 800b08c:	08011a48 	.word	0x08011a48

0800b090 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b088      	sub	sp, #32
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f000 8116 	beq.w	800b2ce <cavlRemove+0x23e>
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 8112 	beq.w	800b2ce <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d105      	bne.n	800b0be <cavlRemove+0x2e>
 800b0b2:	4b89      	ldr	r3, [pc, #548]	; (800b2d8 <cavlRemove+0x248>)
 800b0b4:	4a89      	ldr	r2, [pc, #548]	; (800b2dc <cavlRemove+0x24c>)
 800b0b6:	21f6      	movs	r1, #246	; 0xf6
 800b0b8:	4889      	ldr	r0, [pc, #548]	; (800b2e0 <cavlRemove+0x250>)
 800b0ba:	f002 f8ad 	bl	800d218 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10a      	bne.n	800b0dc <cavlRemove+0x4c>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d005      	beq.n	800b0dc <cavlRemove+0x4c>
 800b0d0:	4b84      	ldr	r3, [pc, #528]	; (800b2e4 <cavlRemove+0x254>)
 800b0d2:	4a82      	ldr	r2, [pc, #520]	; (800b2dc <cavlRemove+0x24c>)
 800b0d4:	21f7      	movs	r1, #247	; 0xf7
 800b0d6:	4882      	ldr	r0, [pc, #520]	; (800b2e0 <cavlRemove+0x250>)
 800b0d8:	f002 f89e 	bl	800d218 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 800b0dc:	2300      	movs	r3, #0
 800b0de:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d073      	beq.n	800b1d4 <cavlRemove+0x144>
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d06f      	beq.n	800b1d4 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7ff fd72 	bl	800abe4 <cavlFindExtremum>
 800b100:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d007      	beq.n	800b118 <cavlRemove+0x88>
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d103      	bne.n	800b118 <cavlRemove+0x88>
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d105      	bne.n	800b124 <cavlRemove+0x94>
 800b118:	4b73      	ldr	r3, [pc, #460]	; (800b2e8 <cavlRemove+0x258>)
 800b11a:	4a70      	ldr	r2, [pc, #448]	; (800b2dc <cavlRemove+0x24c>)
 800b11c:	21ff      	movs	r1, #255	; 0xff
 800b11e:	4870      	ldr	r0, [pc, #448]	; (800b2e0 <cavlRemove+0x250>)
 800b120:	f002 f87a 	bl	800d218 <__assert_func>
            re->bf        = node->bf;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d025      	beq.n	800b194 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	429a      	cmp	r2, r3
 800b156:	d006      	beq.n	800b166 <cavlRemove+0xd6>
 800b158:	4b64      	ldr	r3, [pc, #400]	; (800b2ec <cavlRemove+0x25c>)
 800b15a:	4a60      	ldr	r2, [pc, #384]	; (800b2dc <cavlRemove+0x24c>)
 800b15c:	f44f 7183 	mov.w	r1, #262	; 0x106
 800b160:	485f      	ldr	r0, [pc, #380]	; (800b2e0 <cavlRemove+0x250>)
 800b162:	f002 f859 	bl	800d218 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	689a      	ldr	r2, [r3, #8]
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	69fa      	ldr	r2, [r7, #28]
 800b17c:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	689a      	ldr	r2, [r3, #8]
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	601a      	str	r2, [r3, #0]
                r             = false;
 800b18e:	2300      	movs	r3, #0
 800b190:	76fb      	strb	r3, [r7, #27]
 800b192:	e003      	b.n	800b19c <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 800b198:	2301      	movs	r3, #1
 800b19a:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00f      	beq.n	800b1cc <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	4299      	cmp	r1, r3
 800b1ba:	bf0c      	ite	eq
 800b1bc:	2301      	moveq	r3, #1
 800b1be:	2300      	movne	r3, #0
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	605a      	str	r2, [r3, #4]
        {
 800b1ca:	e046      	b.n	800b25a <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	697a      	ldr	r2, [r7, #20]
 800b1d0:	601a      	str	r2, [r3, #0]
        {
 800b1d2:	e042      	b.n	800b25a <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	bf14      	ite	ne
 800b1e2:	2301      	movne	r3, #1
 800b1e4:	2300      	moveq	r3, #0
 800b1e6:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 800b1e8:	7cfb      	ldrb	r3, [r7, #19]
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d006      	beq.n	800b204 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 800b1f6:	7cfb      	ldrb	r3, [r7, #19]
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	69fa      	ldr	r2, [r7, #28]
 800b202:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d020      	beq.n	800b24c <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	429a      	cmp	r2, r3
 800b212:	bf0c      	ite	eq
 800b214:	2301      	moveq	r3, #1
 800b216:	2300      	movne	r3, #0
 800b218:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 800b21a:	7cfb      	ldrb	r3, [r7, #19]
 800b21c:	7ef8      	ldrb	r0, [r7, #27]
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	69f9      	ldr	r1, [r7, #28]
 800b228:	0083      	lsls	r3, r0, #2
 800b22a:	440b      	add	r3, r1
 800b22c:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 800b22e:	7efb      	ldrb	r3, [r7, #27]
 800b230:	69fa      	ldr	r2, [r7, #28]
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	4413      	add	r3, r2
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00e      	beq.n	800b25a <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 800b23c:	7efb      	ldrb	r3, [r7, #27]
 800b23e:	69fa      	ldr	r2, [r7, #28]
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4413      	add	r3, r2
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	69fa      	ldr	r2, [r7, #28]
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	e006      	b.n	800b25a <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 800b24c:	7cfb      	ldrb	r3, [r7, #19]
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	4413      	add	r3, r2
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d036      	beq.n	800b2ce <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 800b260:	2300      	movs	r3, #0
 800b262:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 800b264:	7efb      	ldrb	r3, [r7, #27]
 800b266:	2b00      	cmp	r3, #0
 800b268:	bf14      	ite	ne
 800b26a:	2301      	movne	r3, #1
 800b26c:	2300      	moveq	r3, #0
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	f083 0301 	eor.w	r3, r3, #1
 800b274:	b2db      	uxtb	r3, r3
 800b276:	f003 0301 	and.w	r3, r3, #1
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	4619      	mov	r1, r3
 800b27e:	69f8      	ldr	r0, [r7, #28]
 800b280:	f7ff fd48 	bl	800ad14 <cavlPrivateAdjustBalance>
 800b284:	60f8      	str	r0, [r7, #12]
                p = c->up;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10b      	bne.n	800b2ae <cavlRemove+0x21e>
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d008      	beq.n	800b2ae <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	bf0c      	ite	eq
 800b2a6:	2301      	moveq	r3, #1
 800b2a8:	2300      	movne	r3, #0
 800b2aa:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 800b2ac:	e7da      	b.n	800b264 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10c      	bne.n	800b2ce <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d106      	bne.n	800b2c8 <cavlRemove+0x238>
 800b2ba:	4b0d      	ldr	r3, [pc, #52]	; (800b2f0 <cavlRemove+0x260>)
 800b2bc:	4a07      	ldr	r2, [pc, #28]	; (800b2dc <cavlRemove+0x24c>)
 800b2be:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800b2c2:	4807      	ldr	r0, [pc, #28]	; (800b2e0 <cavlRemove+0x250>)
 800b2c4:	f001 ffa8 	bl	800d218 <__assert_func>
                *root = c;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 800b2ce:	bf00      	nop
 800b2d0:	3720      	adds	r7, #32
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	08011b20 	.word	0x08011b20
 800b2dc:	080129f4 	.word	0x080129f4
 800b2e0:	08011a48 	.word	0x08011a48
 800b2e4:	08011b30 	.word	0x08011b30
 800b2e8:	08011b58 	.word	0x08011b58
 800b2ec:	08011b90 	.word	0x08011b90
 800b2f0:	08011af0 	.word	0x08011af0

0800b2f4 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 800b2fc:	687b      	ldr	r3, [r7, #4]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
	...

0800b30c <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	460a      	mov	r2, r1
 800b316:	80fb      	strh	r3, [r7, #6]
 800b318:	4613      	mov	r3, r2
 800b31a:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800b31c:	88fb      	ldrh	r3, [r7, #6]
 800b31e:	021b      	lsls	r3, r3, #8
 800b320:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 800b322:	88fb      	ldrh	r3, [r7, #6]
 800b324:	0a1b      	lsrs	r3, r3, #8
 800b326:	b299      	uxth	r1, r3
 800b328:	797b      	ldrb	r3, [r7, #5]
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	404b      	eors	r3, r1
 800b32e:	b29b      	uxth	r3, r3
 800b330:	b2db      	uxtb	r3, r3
 800b332:	4905      	ldr	r1, [pc, #20]	; (800b348 <crcAddByte+0x3c>)
 800b334:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800b338:	4053      	eors	r3, r2
 800b33a:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	08012644 	.word	0x08012644

0800b34c <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b088      	sub	sp, #32
 800b350:	af00      	add	r7, sp, #0
 800b352:	4603      	mov	r3, r0
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
 800b358:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d108      	bne.n	800b372 <crcAdd+0x26>
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d005      	beq.n	800b372 <crcAdd+0x26>
 800b366:	4b12      	ldr	r3, [pc, #72]	; (800b3b0 <crcAdd+0x64>)
 800b368:	4a12      	ldr	r2, [pc, #72]	; (800b3b4 <crcAdd+0x68>)
 800b36a:	2185      	movs	r1, #133	; 0x85
 800b36c:	4812      	ldr	r0, [pc, #72]	; (800b3b8 <crcAdd+0x6c>)
 800b36e:	f001 ff53 	bl	800d218 <__assert_func>
    TransferCRC    out = crc;
 800b372:	89fb      	ldrh	r3, [r7, #14]
 800b374:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800b37a:	2300      	movs	r3, #0
 800b37c:	617b      	str	r3, [r7, #20]
 800b37e:	e00e      	b.n	800b39e <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	781a      	ldrb	r2, [r3, #0]
 800b384:	8bfb      	ldrh	r3, [r7, #30]
 800b386:	4611      	mov	r1, r2
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff ffbf 	bl	800b30c <crcAddByte>
 800b38e:	4603      	mov	r3, r0
 800b390:	83fb      	strh	r3, [r7, #30]
        ++p;
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	3301      	adds	r3, #1
 800b396:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	3301      	adds	r3, #1
 800b39c:	617b      	str	r3, [r7, #20]
 800b39e:	697a      	ldr	r2, [r7, #20]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d3ec      	bcc.n	800b380 <crcAdd+0x34>
    }
    return out;
 800b3a6:	8bfb      	ldrh	r3, [r7, #30]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3720      	adds	r7, #32
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	08011ba0 	.word	0x08011ba0
 800b3b4:	080128c0 	.word	0x080128c0
 800b3b8:	08011bc8 	.word	0x08011bc8

0800b3bc <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	460a      	mov	r2, r1
 800b3c6:	80fb      	strh	r3, [r7, #6]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800b3cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	da05      	bge.n	800b3e0 <txMakeMessageSessionSpecifier+0x24>
 800b3d4:	4b0e      	ldr	r3, [pc, #56]	; (800b410 <txMakeMessageSessionSpecifier+0x54>)
 800b3d6:	4a0f      	ldr	r2, [pc, #60]	; (800b414 <txMakeMessageSessionSpecifier+0x58>)
 800b3d8:	21ac      	movs	r1, #172	; 0xac
 800b3da:	480f      	ldr	r0, [pc, #60]	; (800b418 <txMakeMessageSessionSpecifier+0x5c>)
 800b3dc:	f001 ff1c 	bl	800d218 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 800b3e0:	88fb      	ldrh	r3, [r7, #6]
 800b3e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3e6:	d305      	bcc.n	800b3f4 <txMakeMessageSessionSpecifier+0x38>
 800b3e8:	4b0c      	ldr	r3, [pc, #48]	; (800b41c <txMakeMessageSessionSpecifier+0x60>)
 800b3ea:	4a0a      	ldr	r2, [pc, #40]	; (800b414 <txMakeMessageSessionSpecifier+0x58>)
 800b3ec:	21ad      	movs	r1, #173	; 0xad
 800b3ee:	480a      	ldr	r0, [pc, #40]	; (800b418 <txMakeMessageSessionSpecifier+0x5c>)
 800b3f0:	f001 ff12 	bl	800d218 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 800b3f4:	88fb      	ldrh	r3, [r7, #6]
 800b3f6:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 800b3fe:	797a      	ldrb	r2, [r7, #5]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	021b      	lsls	r3, r3, #8
 800b404:	4313      	orrs	r3, r2
}
 800b406:	4618      	mov	r0, r3
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	08011bf8 	.word	0x08011bf8
 800b414:	080128c8 	.word	0x080128c8
 800b418:	08011bc8 	.word	0x08011bc8
 800b41c:	08011c0c 	.word	0x08011c0c

0800b420 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 800b420:	b590      	push	{r4, r7, lr}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	4604      	mov	r4, r0
 800b428:	4608      	mov	r0, r1
 800b42a:	4611      	mov	r1, r2
 800b42c:	461a      	mov	r2, r3
 800b42e:	4623      	mov	r3, r4
 800b430:	80fb      	strh	r3, [r7, #6]
 800b432:	4603      	mov	r3, r0
 800b434:	717b      	strb	r3, [r7, #5]
 800b436:	460b      	mov	r3, r1
 800b438:	713b      	strb	r3, [r7, #4]
 800b43a:	4613      	mov	r3, r2
 800b43c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800b43e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	da05      	bge.n	800b452 <txMakeServiceSessionSpecifier+0x32>
 800b446:	4b17      	ldr	r3, [pc, #92]	; (800b4a4 <txMakeServiceSessionSpecifier+0x84>)
 800b448:	4a17      	ldr	r2, [pc, #92]	; (800b4a8 <txMakeServiceSessionSpecifier+0x88>)
 800b44a:	21b7      	movs	r1, #183	; 0xb7
 800b44c:	4817      	ldr	r0, [pc, #92]	; (800b4ac <txMakeServiceSessionSpecifier+0x8c>)
 800b44e:	f001 fee3 	bl	800d218 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 800b452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b456:	2b00      	cmp	r3, #0
 800b458:	da05      	bge.n	800b466 <txMakeServiceSessionSpecifier+0x46>
 800b45a:	4b15      	ldr	r3, [pc, #84]	; (800b4b0 <txMakeServiceSessionSpecifier+0x90>)
 800b45c:	4a12      	ldr	r2, [pc, #72]	; (800b4a8 <txMakeServiceSessionSpecifier+0x88>)
 800b45e:	21b8      	movs	r1, #184	; 0xb8
 800b460:	4812      	ldr	r0, [pc, #72]	; (800b4ac <txMakeServiceSessionSpecifier+0x8c>)
 800b462:	f001 fed9 	bl	800d218 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 800b466:	88fb      	ldrh	r3, [r7, #6]
 800b468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b46c:	d305      	bcc.n	800b47a <txMakeServiceSessionSpecifier+0x5a>
 800b46e:	4b11      	ldr	r3, [pc, #68]	; (800b4b4 <txMakeServiceSessionSpecifier+0x94>)
 800b470:	4a0d      	ldr	r2, [pc, #52]	; (800b4a8 <txMakeServiceSessionSpecifier+0x88>)
 800b472:	21b9      	movs	r1, #185	; 0xb9
 800b474:	480d      	ldr	r0, [pc, #52]	; (800b4ac <txMakeServiceSessionSpecifier+0x8c>)
 800b476:	f001 fecf 	bl	800d218 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800b47a:	793a      	ldrb	r2, [r7, #4]
 800b47c:	78fb      	ldrb	r3, [r7, #3]
 800b47e:	01db      	lsls	r3, r3, #7
 800b480:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800b482:	88fb      	ldrh	r3, [r7, #6]
 800b484:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800b486:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800b488:	797a      	ldrb	r2, [r7, #5]
 800b48a:	2a00      	cmp	r2, #0
 800b48c:	d002      	beq.n	800b494 <txMakeServiceSessionSpecifier+0x74>
 800b48e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b492:	e000      	b.n	800b496 <txMakeServiceSessionSpecifier+0x76>
 800b494:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800b496:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800b498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd90      	pop	{r4, r7, pc}
 800b4a4:	08011bf8 	.word	0x08011bf8
 800b4a8:	080128e8 	.word	0x080128e8
 800b4ac:	08011bc8 	.word	0x08011bc8
 800b4b0:	08011c20 	.word	0x08011c20
 800b4b4:	08011c34 	.word	0x08011c34

0800b4b8 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 800b4c0:	2340      	movs	r3, #64	; 0x40
 800b4c2:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b07      	cmp	r3, #7
 800b4cc:	d802      	bhi.n	800b4d4 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 800b4ce:	2308      	movs	r3, #8
 800b4d0:	60fb      	str	r3, [r7, #12]
 800b4d2:	e014      	b.n	800b4fe <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d808      	bhi.n	800b4ee <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 800b4dc:	4a0c      	ldr	r2, [pc, #48]	; (800b510 <adjustPresentationLayerMTU+0x58>)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	4b0b      	ldr	r3, [pc, #44]	; (800b514 <adjustPresentationLayerMTU+0x5c>)
 800b4e8:	5c9b      	ldrb	r3, [r3, r2]
 800b4ea:	60fb      	str	r3, [r7, #12]
 800b4ec:	e007      	b.n	800b4fe <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 800b4ee:	4a08      	ldr	r2, [pc, #32]	; (800b510 <adjustPresentationLayerMTU+0x58>)
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	4b06      	ldr	r3, [pc, #24]	; (800b514 <adjustPresentationLayerMTU+0x5c>)
 800b4fa:	5c9b      	ldrb	r3, [r3, r2]
 800b4fc:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3b01      	subs	r3, #1
}
 800b502:	4618      	mov	r0, r3
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	08012854 	.word	0x08012854
 800b514:	08012844 	.word	0x08012844

0800b518 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08a      	sub	sp, #40	; 0x28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
 800b524:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d105      	bne.n	800b538 <txMakeCANID+0x20>
 800b52c:	4b60      	ldr	r3, [pc, #384]	; (800b6b0 <txMakeCANID+0x198>)
 800b52e:	4a61      	ldr	r2, [pc, #388]	; (800b6b4 <txMakeCANID+0x19c>)
 800b530:	21d9      	movs	r1, #217	; 0xd9
 800b532:	4861      	ldr	r0, [pc, #388]	; (800b6b8 <txMakeCANID+0x1a0>)
 800b534:	f001 fe70 	bl	800d218 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d105      	bne.n	800b54a <txMakeCANID+0x32>
 800b53e:	4b5f      	ldr	r3, [pc, #380]	; (800b6bc <txMakeCANID+0x1a4>)
 800b540:	4a5c      	ldr	r2, [pc, #368]	; (800b6b4 <txMakeCANID+0x19c>)
 800b542:	21da      	movs	r1, #218	; 0xda
 800b544:	485c      	ldr	r0, [pc, #368]	; (800b6b8 <txMakeCANID+0x1a0>)
 800b546:	f001 fe67 	bl	800d218 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800b54a:	f06f 0301 	mvn.w	r3, #1
 800b54e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	785b      	ldrb	r3, [r3, #1]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d157      	bne.n	800b608 <txMakeCANID+0xf0>
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	791b      	ldrb	r3, [r3, #4]
 800b55c:	2bff      	cmp	r3, #255	; 0xff
 800b55e:	d153      	bne.n	800b608 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800b564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b568:	d24e      	bcs.n	800b608 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b56a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	db11      	blt.n	800b596 <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	885b      	ldrh	r3, [r3, #2]
 800b576:	78fa      	ldrb	r2, [r7, #3]
 800b578:	4611      	mov	r1, r2
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff ff1e 	bl	800b3bc <txMakeMessageSessionSpecifier>
 800b580:	4603      	mov	r3, r0
 800b582:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800b584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	da75      	bge.n	800b676 <txMakeCANID+0x15e>
 800b58a:	4b4d      	ldr	r3, [pc, #308]	; (800b6c0 <txMakeCANID+0x1a8>)
 800b58c:	4a49      	ldr	r2, [pc, #292]	; (800b6b4 <txMakeCANID+0x19c>)
 800b58e:	21e2      	movs	r1, #226	; 0xe2
 800b590:	4849      	ldr	r0, [pc, #292]	; (800b6b8 <txMakeCANID+0x1a0>)
 800b592:	f001 fe41 	bl	800d218 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d830      	bhi.n	800b600 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d108      	bne.n	800b5b6 <txMakeCANID+0x9e>
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d005      	beq.n	800b5b6 <txMakeCANID+0x9e>
 800b5aa:	4b46      	ldr	r3, [pc, #280]	; (800b6c4 <txMakeCANID+0x1ac>)
 800b5ac:	4a41      	ldr	r2, [pc, #260]	; (800b6b4 <txMakeCANID+0x19c>)
 800b5ae:	21e6      	movs	r1, #230	; 0xe6
 800b5b0:	4841      	ldr	r0, [pc, #260]	; (800b6b8 <txMakeCANID+0x1a0>)
 800b5b2:	f001 fe31 	bl	800d218 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	68b9      	ldr	r1, [r7, #8]
 800b5ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b5be:	f7ff fec5 	bl	800b34c <crcAdd>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	885b      	ldrh	r3, [r3, #2]
 800b5d2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7ff feef 	bl	800b3bc <txMakeMessageSessionSpecifier>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5e4:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5ec:	d305      	bcc.n	800b5fa <txMakeCANID+0xe2>
 800b5ee:	4b36      	ldr	r3, [pc, #216]	; (800b6c8 <txMakeCANID+0x1b0>)
 800b5f0:	4a30      	ldr	r2, [pc, #192]	; (800b6b4 <txMakeCANID+0x19c>)
 800b5f2:	21e9      	movs	r1, #233	; 0xe9
 800b5f4:	4830      	ldr	r0, [pc, #192]	; (800b6b8 <txMakeCANID+0x1a0>)
 800b5f6:	f001 fe0f 	bl	800d218 <__assert_func>
            out = (int32_t) spec;
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b5fe:	e03a      	b.n	800b676 <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 800b600:	f06f 0301 	mvn.w	r3, #1
 800b604:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b606:	e036      	b.n	800b676 <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	785b      	ldrb	r3, [r3, #1]
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d003      	beq.n	800b618 <txMakeCANID+0x100>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	785b      	ldrb	r3, [r3, #1]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d12a      	bne.n	800b66e <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	791b      	ldrb	r3, [r3, #4]
 800b61c:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800b61e:	2b00      	cmp	r3, #0
 800b620:	db25      	blt.n	800b66e <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	885b      	ldrh	r3, [r3, #2]
 800b626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b62a:	d220      	bcs.n	800b66e <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b62c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b630:	2b00      	cmp	r3, #0
 800b632:	db18      	blt.n	800b666 <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	bf0c      	ite	eq
 800b640:	2301      	moveq	r3, #1
 800b642:	2300      	movne	r3, #0
 800b644:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800b64a:	78fa      	ldrb	r2, [r7, #3]
 800b64c:	f7ff fee8 	bl	800b420 <txMakeServiceSessionSpecifier>
 800b650:	4603      	mov	r3, r0
 800b652:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	2b00      	cmp	r3, #0
 800b658:	da0f      	bge.n	800b67a <txMakeCANID+0x162>
 800b65a:	4b19      	ldr	r3, [pc, #100]	; (800b6c0 <txMakeCANID+0x1a8>)
 800b65c:	4a15      	ldr	r2, [pc, #84]	; (800b6b4 <txMakeCANID+0x19c>)
 800b65e:	21fa      	movs	r1, #250	; 0xfa
 800b660:	4815      	ldr	r0, [pc, #84]	; (800b6b8 <txMakeCANID+0x1a0>)
 800b662:	f001 fdd9 	bl	800d218 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 800b666:	f06f 0301 	mvn.w	r3, #1
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b66c:	e005      	b.n	800b67a <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 800b66e:	f06f 0301 	mvn.w	r3, #1
 800b672:	627b      	str	r3, [r7, #36]	; 0x24
 800b674:	e002      	b.n	800b67c <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b676:	bf00      	nop
 800b678:	e000      	b.n	800b67c <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b67a:	bf00      	nop
    }

    if (out >= 0)
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	2b00      	cmp	r3, #0
 800b680:	db10      	blt.n	800b6a4 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	2b07      	cmp	r3, #7
 800b68c:	d807      	bhi.n	800b69e <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	069a      	lsls	r2, r3, #26
 800b692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b694:	4313      	orrs	r3, r2
 800b696:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	627b      	str	r3, [r7, #36]	; 0x24
 800b69c:	e002      	b.n	800b6a4 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 800b69e:	f06f 0301 	mvn.w	r3, #1
 800b6a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    return out;
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3728      	adds	r7, #40	; 0x28
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	08011c48 	.word	0x08011c48
 800b6b4:	080128b4 	.word	0x080128b4
 800b6b8:	08011bc8 	.word	0x08011bc8
 800b6bc:	08011c5c 	.word	0x08011c5c
 800b6c0:	08011c78 	.word	0x08011c78
 800b6c4:	08011c84 	.word	0x08011c84
 800b6c8:	08011cb8 	.word	0x08011cb8

0800b6cc <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 800b6cc:	b590      	push	{r4, r7, lr}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	4608      	mov	r0, r1
 800b6d6:	4611      	mov	r1, r2
 800b6d8:	461a      	mov	r2, r3
 800b6da:	4623      	mov	r3, r4
 800b6dc:	71fb      	strb	r3, [r7, #7]
 800b6de:	4603      	mov	r3, r0
 800b6e0:	71bb      	strb	r3, [r7, #6]
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	717b      	strb	r3, [r7, #5]
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 800b6ea:	79fb      	ldrb	r3, [r7, #7]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d009      	beq.n	800b704 <txMakeTailByte+0x38>
 800b6f0:	797b      	ldrb	r3, [r7, #5]
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d006      	beq.n	800b704 <txMakeTailByte+0x38>
 800b6f6:	4b13      	ldr	r3, [pc, #76]	; (800b744 <txMakeTailByte+0x78>)
 800b6f8:	4a13      	ldr	r2, [pc, #76]	; (800b748 <txMakeTailByte+0x7c>)
 800b6fa:	f240 111b 	movw	r1, #283	; 0x11b
 800b6fe:	4813      	ldr	r0, [pc, #76]	; (800b74c <txMakeTailByte+0x80>)
 800b700:	f001 fd8a 	bl	800d218 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800b704:	79fb      	ldrb	r3, [r7, #7]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <txMakeTailByte+0x42>
 800b70a:	2280      	movs	r2, #128	; 0x80
 800b70c:	e000      	b.n	800b710 <txMakeTailByte+0x44>
 800b70e:	2200      	movs	r2, #0
 800b710:	79bb      	ldrb	r3, [r7, #6]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <txMakeTailByte+0x4e>
 800b716:	2340      	movs	r3, #64	; 0x40
 800b718:	e000      	b.n	800b71c <txMakeTailByte+0x50>
 800b71a:	2300      	movs	r3, #0
 800b71c:	4313      	orrs	r3, r2
 800b71e:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 800b720:	797a      	ldrb	r2, [r7, #5]
 800b722:	2a00      	cmp	r2, #0
 800b724:	d001      	beq.n	800b72a <txMakeTailByte+0x5e>
 800b726:	2220      	movs	r2, #32
 800b728:	e000      	b.n	800b72c <txMakeTailByte+0x60>
 800b72a:	2200      	movs	r2, #0
 800b72c:	4313      	orrs	r3, r2
 800b72e:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 800b730:	793b      	ldrb	r3, [r7, #4]
 800b732:	f003 031f 	and.w	r3, r3, #31
 800b736:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800b738:	4313      	orrs	r3, r2
 800b73a:	b2db      	uxtb	r3, r3
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	bd90      	pop	{r4, r7, pc}
 800b744:	08011cd4 	.word	0x08011cd4
 800b748:	0801295c 	.word	0x0801295c
 800b74c:	08011bc8 	.word	0x08011bc8

0800b750 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b40      	cmp	r3, #64	; 0x40
 800b75c:	d906      	bls.n	800b76c <txRoundFramePayloadSizeUp+0x1c>
 800b75e:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <txRoundFramePayloadSizeUp+0x4c>)
 800b760:	4a0f      	ldr	r2, [pc, #60]	; (800b7a0 <txRoundFramePayloadSizeUp+0x50>)
 800b762:	f44f 7192 	mov.w	r1, #292	; 0x124
 800b766:	480f      	ldr	r0, [pc, #60]	; (800b7a4 <txRoundFramePayloadSizeUp+0x54>)
 800b768:	f001 fd56 	bl	800d218 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 800b76c:	4a0e      	ldr	r2, [pc, #56]	; (800b7a8 <txRoundFramePayloadSizeUp+0x58>)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4413      	add	r3, r2
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2b0f      	cmp	r3, #15
 800b77a:	d906      	bls.n	800b78a <txRoundFramePayloadSizeUp+0x3a>
 800b77c:	4b0b      	ldr	r3, [pc, #44]	; (800b7ac <txRoundFramePayloadSizeUp+0x5c>)
 800b77e:	4a08      	ldr	r2, [pc, #32]	; (800b7a0 <txRoundFramePayloadSizeUp+0x50>)
 800b780:	f240 1127 	movw	r1, #295	; 0x127
 800b784:	4807      	ldr	r0, [pc, #28]	; (800b7a4 <txRoundFramePayloadSizeUp+0x54>)
 800b786:	f001 fd47 	bl	800d218 <__assert_func>
    return CanardCANDLCToLength[y];
 800b78a:	4a09      	ldr	r2, [pc, #36]	; (800b7b0 <txRoundFramePayloadSizeUp+0x60>)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	4413      	add	r3, r2
 800b790:	781b      	ldrb	r3, [r3, #0]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	08011cfc 	.word	0x08011cfc
 800b7a0:	0801292c 	.word	0x0801292c
 800b7a4:	08011bc8 	.word	0x08011bc8
 800b7a8:	08012854 	.word	0x08012854
 800b7ac:	08011d44 	.word	0x08011d44
 800b7b0:	08012844 	.word	0x08012844

0800b7b4 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d106      	bne.n	800b7d6 <txAllocateQueueItem+0x22>
 800b7c8:	4b1f      	ldr	r3, [pc, #124]	; (800b848 <txAllocateQueueItem+0x94>)
 800b7ca:	4a20      	ldr	r2, [pc, #128]	; (800b84c <txAllocateQueueItem+0x98>)
 800b7cc:	f240 1131 	movw	r1, #305	; 0x131
 800b7d0:	481f      	ldr	r0, [pc, #124]	; (800b850 <txAllocateQueueItem+0x9c>)
 800b7d2:	f001 fd21 	bl	800d218 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 800b7d6:	6a3b      	ldr	r3, [r7, #32]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d106      	bne.n	800b7ea <txAllocateQueueItem+0x36>
 800b7dc:	4b1d      	ldr	r3, [pc, #116]	; (800b854 <txAllocateQueueItem+0xa0>)
 800b7de:	4a1b      	ldr	r2, [pc, #108]	; (800b84c <txAllocateQueueItem+0x98>)
 800b7e0:	f44f 7199 	mov.w	r1, #306	; 0x132
 800b7e4:	481a      	ldr	r0, [pc, #104]	; (800b850 <txAllocateQueueItem+0x9c>)
 800b7e6:	f001 fd17 	bl	800d218 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	6a3a      	ldr	r2, [r7, #32]
 800b7f0:	3230      	adds	r2, #48	; 0x30
 800b7f2:	4611      	mov	r1, r2
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	4798      	blx	r3
 800b7f8:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d01e      	beq.n	800b83e <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	2200      	movs	r2, #0
 800b804:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2200      	movs	r2, #0
 800b80a:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	2200      	movs	r2, #0
 800b810:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	2200      	movs	r2, #0
 800b816:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	2200      	movs	r2, #0
 800b81c:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 800b81e:	6979      	ldr	r1, [r7, #20]
 800b820:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b824:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	6a3a      	ldr	r2, [r7, #32]
 800b82c:	625a      	str	r2, [r3, #36]	; 0x24
        out->base.frame.payload         = out->payload_buffer;
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	629a      	str	r2, [r3, #40]	; 0x28
        out->base.frame.extended_can_id = id;
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	68ba      	ldr	r2, [r7, #8]
 800b83c:	621a      	str	r2, [r3, #32]
    }
    return out;
 800b83e:	697b      	ldr	r3, [r7, #20]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	08011d8c 	.word	0x08011d8c
 800b84c:	08012948 	.word	0x08012948
 800b850:	08011bc8 	.word	0x08011bc8
 800b854:	08011da0 	.word	0x08011da0

0800b858 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <txAVLPredicate+0x1e>
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d106      	bne.n	800b884 <txAVLPredicate+0x2c>
 800b876:	4b0a      	ldr	r3, [pc, #40]	; (800b8a0 <txAVLPredicate+0x48>)
 800b878:	4a0a      	ldr	r2, [pc, #40]	; (800b8a4 <txAVLPredicate+0x4c>)
 800b87a:	f240 114d 	movw	r1, #333	; 0x14d
 800b87e:	480a      	ldr	r0, [pc, #40]	; (800b8a8 <txAVLPredicate+0x50>)
 800b880:	f001 fcca 	bl	800d218 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6a1a      	ldr	r2, [r3, #32]
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	6a1b      	ldr	r3, [r3, #32]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d301      	bcc.n	800b894 <txAVLPredicate+0x3c>
 800b890:	2301      	movs	r3, #1
 800b892:	e001      	b.n	800b898 <txAVLPredicate+0x40>
 800b894:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	08011db4 	.word	0x08011db4
 800b8a4:	0801291c 	.word	0x0801291c
 800b8a8:	08011bc8 	.word	0x08011bc8

0800b8ac <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 800b8ac:	b590      	push	{r4, r7, lr}
 800b8ae:	b08d      	sub	sp, #52	; 0x34
 800b8b0:	af02      	add	r7, sp, #8
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d106      	bne.n	800b8ce <txPushSingleFrame+0x22>
 800b8c0:	4b5c      	ldr	r3, [pc, #368]	; (800ba34 <txPushSingleFrame+0x188>)
 800b8c2:	4a5d      	ldr	r2, [pc, #372]	; (800ba38 <txPushSingleFrame+0x18c>)
 800b8c4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800b8c8:	485c      	ldr	r0, [pc, #368]	; (800ba3c <txPushSingleFrame+0x190>)
 800b8ca:	f001 fca5 	bl	800d218 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 800b8ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d109      	bne.n	800b8e8 <txPushSingleFrame+0x3c>
 800b8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d006      	beq.n	800b8e8 <txPushSingleFrame+0x3c>
 800b8da:	4b59      	ldr	r3, [pc, #356]	; (800ba40 <txPushSingleFrame+0x194>)
 800b8dc:	4a56      	ldr	r2, [pc, #344]	; (800ba38 <txPushSingleFrame+0x18c>)
 800b8de:	f240 115b 	movw	r1, #347	; 0x15b
 800b8e2:	4856      	ldr	r0, [pc, #344]	; (800ba3c <txPushSingleFrame+0x190>)
 800b8e4:	f001 fc98 	bl	800d218 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 800b8e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7ff ff2f 	bl	800b750 <txRoundFramePayloadSizeUp>
 800b8f2:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 800b8f4:	6a3a      	ldr	r2, [r7, #32]
 800b8f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d806      	bhi.n	800b90a <txPushSingleFrame+0x5e>
 800b8fc:	4b51      	ldr	r3, [pc, #324]	; (800ba44 <txPushSingleFrame+0x198>)
 800b8fe:	4a4e      	ldr	r2, [pc, #312]	; (800ba38 <txPushSingleFrame+0x18c>)
 800b900:	f240 115d 	movw	r1, #349	; 0x15d
 800b904:	484d      	ldr	r0, [pc, #308]	; (800ba3c <txPushSingleFrame+0x190>)
 800b906:	f001 fc87 	bl	800d218 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 800b90a:	6a3a      	ldr	r2, [r7, #32]
 800b90c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	3b01      	subs	r3, #1
 800b912:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 800b914:	69fa      	ldr	r2, [r7, #28]
 800b916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b918:	4413      	add	r3, r2
 800b91a:	3301      	adds	r3, #1
 800b91c:	6a3a      	ldr	r2, [r7, #32]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d006      	beq.n	800b930 <txPushSingleFrame+0x84>
 800b922:	4b49      	ldr	r3, [pc, #292]	; (800ba48 <txPushSingleFrame+0x19c>)
 800b924:	4a44      	ldr	r2, [pc, #272]	; (800ba38 <txPushSingleFrame+0x18c>)
 800b926:	f240 115f 	movw	r1, #351	; 0x15f
 800b92a:	4844      	ldr	r0, [pc, #272]	; (800ba3c <txPushSingleFrame+0x190>)
 800b92c:	f001 fc74 	bl	800d218 <__assert_func>
    int32_t       out = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	627b      	str	r3, [r7, #36]	; 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	689a      	ldr	r2, [r3, #8]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d209      	bcs.n	800b954 <txPushSingleFrame+0xa8>
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b948:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b94a:	68b8      	ldr	r0, [r7, #8]
 800b94c:	f7ff ff32 	bl	800b7b4 <txAllocateQueueItem>
 800b950:	4603      	mov	r3, r0
 800b952:	e000      	b.n	800b956 <txPushSingleFrame+0xaa>
 800b954:	2300      	movs	r3, #0
    TxItem* const tqi =
 800b956:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d054      	beq.n	800ba08 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 800b95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b960:	2b00      	cmp	r3, #0
 800b962:	d010      	beq.n	800b986 <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 800b964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b966:	2b00      	cmp	r3, #0
 800b968:	d106      	bne.n	800b978 <txPushSingleFrame+0xcc>
 800b96a:	4b38      	ldr	r3, [pc, #224]	; (800ba4c <txPushSingleFrame+0x1a0>)
 800b96c:	4a32      	ldr	r2, [pc, #200]	; (800ba38 <txPushSingleFrame+0x18c>)
 800b96e:	f240 1167 	movw	r1, #359	; 0x167
 800b972:	4832      	ldr	r0, [pc, #200]	; (800ba3c <txPushSingleFrame+0x190>)
 800b974:	f001 fc50 	bl	800d218 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	3330      	adds	r3, #48	; 0x30
 800b97c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b97e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b980:	4618      	mov	r0, r3
 800b982:	f002 fdd0 	bl	800e526 <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800b986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b988:	3330      	adds	r3, #48	; 0x30
 800b98a:	69ba      	ldr	r2, [r7, #24]
 800b98c:	4413      	add	r3, r2
 800b98e:	69fa      	ldr	r2, [r7, #28]
 800b990:	2100      	movs	r1, #0
 800b992:	4618      	mov	r0, r3
 800b994:	f002 fcf3 	bl	800e37e <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800b998:	6a3b      	ldr	r3, [r7, #32]
 800b99a:	1e5c      	subs	r4, r3, #1
 800b99c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	2101      	movs	r1, #1
 800b9a4:	2001      	movs	r0, #1
 800b9a6:	f7ff fe91 	bl	800b6cc <txMakeTailByte>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	4423      	add	r3, r4
 800b9b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f103 000c 	add.w	r0, r3, #12
 800b9bc:	69b9      	ldr	r1, [r7, #24]
 800b9be:	4b24      	ldr	r3, [pc, #144]	; (800ba50 <txPushSingleFrame+0x1a4>)
 800b9c0:	4a24      	ldr	r2, [pc, #144]	; (800ba54 <txPushSingleFrame+0x1a8>)
 800b9c2:	f7ff fae7 	bl	800af94 <cavlSearch>
 800b9c6:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	697a      	ldr	r2, [r7, #20]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d006      	beq.n	800b9de <txPushSingleFrame+0x132>
 800b9d0:	4b21      	ldr	r3, [pc, #132]	; (800ba58 <txPushSingleFrame+0x1ac>)
 800b9d2:	4a19      	ldr	r2, [pc, #100]	; (800ba38 <txPushSingleFrame+0x18c>)
 800b9d4:	f240 1173 	movw	r1, #371	; 0x173
 800b9d8:	4818      	ldr	r0, [pc, #96]	; (800ba3c <txPushSingleFrame+0x190>)
 800b9da:	f001 fc1d 	bl	800d218 <__assert_func>
        que->size++;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	689a      	ldr	r2, [r3, #8]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d906      	bls.n	800ba02 <txPushSingleFrame+0x156>
 800b9f4:	4b19      	ldr	r3, [pc, #100]	; (800ba5c <txPushSingleFrame+0x1b0>)
 800b9f6:	4a10      	ldr	r2, [pc, #64]	; (800ba38 <txPushSingleFrame+0x18c>)
 800b9f8:	f240 1175 	movw	r1, #373	; 0x175
 800b9fc:	480f      	ldr	r0, [pc, #60]	; (800ba3c <txPushSingleFrame+0x190>)
 800b9fe:	f001 fc0b 	bl	800d218 <__assert_func>
        out = 1;  // One frame enqueued.
 800ba02:	2301      	movs	r3, #1
 800ba04:	627b      	str	r3, [r7, #36]	; 0x24
 800ba06:	e002      	b.n	800ba0e <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800ba08:	f06f 0302 	mvn.w	r3, #2
 800ba0c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	db09      	blt.n	800ba28 <txPushSingleFrame+0x17c>
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d006      	beq.n	800ba28 <txPushSingleFrame+0x17c>
 800ba1a:	4b11      	ldr	r3, [pc, #68]	; (800ba60 <txPushSingleFrame+0x1b4>)
 800ba1c:	4a06      	ldr	r2, [pc, #24]	; (800ba38 <txPushSingleFrame+0x18c>)
 800ba1e:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800ba22:	4806      	ldr	r0, [pc, #24]	; (800ba3c <txPushSingleFrame+0x190>)
 800ba24:	f001 fbf8 	bl	800d218 <__assert_func>
    return out;
 800ba28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	372c      	adds	r7, #44	; 0x2c
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd90      	pop	{r4, r7, pc}
 800ba32:	bf00      	nop
 800ba34:	08011d8c 	.word	0x08011d8c
 800ba38:	08012908 	.word	0x08012908
 800ba3c:	08011bc8 	.word	0x08011bc8
 800ba40:	08011de8 	.word	0x08011de8
 800ba44:	08011e18 	.word	0x08011e18
 800ba48:	08011e3c 	.word	0x08011e3c
 800ba4c:	08011e78 	.word	0x08011e78
 800ba50:	0800b2f5 	.word	0x0800b2f5
 800ba54:	0800b859 	.word	0x0800b859
 800ba58:	08011e90 	.word	0x08011e90
 800ba5c:	08011ea8 	.word	0x08011ea8
 800ba60:	08011ec4 	.word	0x08011ec4

0800ba64 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 800ba64:	b590      	push	{r4, r7, lr}
 800ba66:	b093      	sub	sp, #76	; 0x4c
 800ba68:	af02      	add	r7, sp, #8
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d106      	bne.n	800ba84 <txGenerateMultiFrameChain+0x20>
 800ba76:	4b93      	ldr	r3, [pc, #588]	; (800bcc4 <txGenerateMultiFrameChain+0x260>)
 800ba78:	4a93      	ldr	r2, [pc, #588]	; (800bcc8 <txGenerateMultiFrameChain+0x264>)
 800ba7a:	f240 1189 	movw	r1, #393	; 0x189
 800ba7e:	4893      	ldr	r0, [pc, #588]	; (800bccc <txGenerateMultiFrameChain+0x268>)
 800ba80:	f001 fbca 	bl	800d218 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d106      	bne.n	800ba98 <txGenerateMultiFrameChain+0x34>
 800ba8a:	4b91      	ldr	r3, [pc, #580]	; (800bcd0 <txGenerateMultiFrameChain+0x26c>)
 800ba8c:	4a8e      	ldr	r2, [pc, #568]	; (800bcc8 <txGenerateMultiFrameChain+0x264>)
 800ba8e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800ba92:	488e      	ldr	r0, [pc, #568]	; (800bccc <txGenerateMultiFrameChain+0x268>)
 800ba94:	f001 fbc0 	bl	800d218 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800ba98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d806      	bhi.n	800baae <txGenerateMultiFrameChain+0x4a>
 800baa0:	4b8c      	ldr	r3, [pc, #560]	; (800bcd4 <txGenerateMultiFrameChain+0x270>)
 800baa2:	4a89      	ldr	r2, [pc, #548]	; (800bcc8 <txGenerateMultiFrameChain+0x264>)
 800baa4:	f240 118b 	movw	r1, #395	; 0x18b
 800baa8:	4888      	ldr	r0, [pc, #544]	; (800bccc <txGenerateMultiFrameChain+0x268>)
 800baaa:	f001 fbb5 	bl	800d218 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 800baae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d106      	bne.n	800bac2 <txGenerateMultiFrameChain+0x5e>
 800bab4:	4b88      	ldr	r3, [pc, #544]	; (800bcd8 <txGenerateMultiFrameChain+0x274>)
 800bab6:	4a84      	ldr	r2, [pc, #528]	; (800bcc8 <txGenerateMultiFrameChain+0x264>)
 800bab8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800babc:	4883      	ldr	r0, [pc, #524]	; (800bccc <txGenerateMultiFrameChain+0x268>)
 800babe:	f001 fbab 	bl	800d218 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 800bac2:	2300      	movs	r3, #0
 800bac4:	613b      	str	r3, [r7, #16]
 800bac6:	2300      	movs	r3, #0
 800bac8:	617b      	str	r3, [r7, #20]
 800baca:	2300      	movs	r3, #0
 800bacc:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800bace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bad0:	3302      	adds	r3, #2
 800bad2:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t         offset                = 0U;
 800bad4:	2300      	movs	r3, #0
 800bad6:	63fb      	str	r3, [r7, #60]	; 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 800bad8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bada:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800badc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bae0:	f7ff fc34 	bl	800b34c <crcAdd>
 800bae4:	4603      	mov	r3, r0
 800bae6:	877b      	strh	r3, [r7, #58]	; 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 800bae8:	2301      	movs	r3, #1
 800baea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 800baee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baf0:	637b      	str	r3, [r7, #52]	; 0x34
    while (offset < payload_size_with_crc)
 800baf2:	e0d4      	b.n	800bc9e <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	3301      	adds	r3, #1
 800baf8:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 800bafa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bafe:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d908      	bls.n	800bb18 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 800bb06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7ff fe1e 	bl	800b750 <txRoundFramePayloadSizeUp>
 800bb14:	4603      	mov	r3, r0
 800bb16:	e001      	b.n	800bb1c <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 800bb1c:	627b      	str	r3, [r7, #36]	; 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bb26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb28:	68b8      	ldr	r0, [r7, #8]
 800bb2a:	f7ff fe43 	bl	800b7b4 <txAllocateQueueItem>
 800bb2e:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d102      	bne.n	800bb3c <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 800bb36:	6a3b      	ldr	r3, [r7, #32]
 800bb38:	613b      	str	r3, [r7, #16]
 800bb3a:	e002      	b.n	800bb42 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	6a3a      	ldr	r2, [r7, #32]
 800bb40:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 800bb42:	6a3b      	ldr	r3, [r7, #32]
 800bb44:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f000 80ae 	beq.w	800bcaa <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	3b01      	subs	r3, #1
 800bb52:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 800bb54:	2300      	movs	r3, #0
 800bb56:	633b      	str	r3, [r7, #48]	; 0x30
        if (offset < payload_size)
 800bb58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d21c      	bcs.n	800bb9a <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 800bb60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (move_size > frame_payload_size)
 800bb68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d901      	bls.n	800bb74 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	3330      	adds	r3, #48	; 0x30
 800bb78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f002 fcd2 	bl	800e526 <memcpy>
            frame_offset = frame_offset + move_size;
 800bb82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb86:	4413      	add	r3, r2
 800bb88:	633b      	str	r3, [r7, #48]	; 0x30
            offset += move_size;
 800bb8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8e:	4413      	add	r3, r2
 800bb90:	63fb      	str	r3, [r7, #60]	; 0x3c
            payload_ptr += move_size;
 800bb92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb96:	4413      	add	r3, r2
 800bb98:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 800bb9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d343      	bcc.n	800bc2a <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800bba2:	e00f      	b.n	800bbc4 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	4413      	add	r3, r2
 800bbaa:	3330      	adds	r3, #48	; 0x30
 800bbac:	2200      	movs	r2, #0
 800bbae:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800bbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	633b      	str	r3, [r7, #48]	; 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 800bbb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bbb8:	2100      	movs	r1, #0
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7ff fba6 	bl	800b30c <crcAddByte>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	877b      	strh	r3, [r7, #58]	; 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	3302      	adds	r3, #2
 800bbc8:	69fa      	ldr	r2, [r7, #28]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d8ea      	bhi.n	800bba4 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 800bbce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d213      	bcs.n	800bbfe <txGenerateMultiFrameChain+0x19a>
 800bbd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bbd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d10f      	bne.n	800bbfe <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 800bbde:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bbe0:	0a1b      	lsrs	r3, r3, #8
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	b2d9      	uxtb	r1, r3
 800bbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbea:	4413      	add	r3, r2
 800bbec:	3330      	adds	r3, #48	; 0x30
 800bbee:	460a      	mov	r2, r1
 800bbf0:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 800bbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 800bbfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d211      	bcs.n	800bc2a <txGenerateMultiFrameChain+0x1c6>
 800bc06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d90d      	bls.n	800bc2a <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bc12:	b2d9      	uxtb	r1, r3
 800bc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc16:	4413      	add	r3, r2
 800bc18:	3330      	adds	r3, #48	; 0x30
 800bc1a:	460a      	mov	r2, r1
 800bc1c:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	3301      	adds	r3, #1
 800bc22:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 800bc24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc26:	3301      	adds	r3, #1
 800bc28:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2c:	1c5a      	adds	r2, r3, #1
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d006      	beq.n	800bc44 <txGenerateMultiFrameChain+0x1e0>
 800bc36:	4b29      	ldr	r3, [pc, #164]	; (800bcdc <txGenerateMultiFrameChain+0x278>)
 800bc38:	4a23      	ldr	r2, [pc, #140]	; (800bcc8 <txGenerateMultiFrameChain+0x264>)
 800bc3a:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc3e:	4823      	ldr	r0, [pc, #140]	; (800bccc <txGenerateMultiFrameChain+0x268>)
 800bc40:	f001 faea 	bl	800d218 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800bc44:	693a      	ldr	r2, [r7, #16]
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	bf0c      	ite	eq
 800bc4c:	2301      	moveq	r3, #1
 800bc4e:	2300      	movne	r3, #0
 800bc50:	b2d8      	uxtb	r0, r3
 800bc52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc56:	429a      	cmp	r2, r3
 800bc58:	bf2c      	ite	cs
 800bc5a:	2301      	movcs	r3, #1
 800bc5c:	2300      	movcc	r3, #0
 800bc5e:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800bc60:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800bc62:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800bc66:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800bc6a:	f7ff fd2f 	bl	800b6cc <txMakeTailByte>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	4423      	add	r3, r4
 800bc76:	3330      	adds	r3, #48	; 0x30
 800bc78:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 800bc7a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	bf14      	ite	ne
 800bc82:	2301      	movne	r3, #1
 800bc84:	2300      	moveq	r3, #0
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	f083 0301 	eor.w	r3, r3, #1
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800bc92:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc96:	f003 0301 	and.w	r3, r3, #1
 800bc9a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    while (offset < payload_size_with_crc)
 800bc9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	429a      	cmp	r2, r3
 800bca4:	f4ff af26 	bcc.w	800baf4 <txGenerateMultiFrameChain+0x90>
 800bca8:	e000      	b.n	800bcac <txGenerateMultiFrameChain+0x248>
            break;
 800bcaa:	bf00      	nop
    }
    return out;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	461c      	mov	r4, r3
 800bcb0:	f107 0310 	add.w	r3, r7, #16
 800bcb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bcb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	3744      	adds	r7, #68	; 0x44
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd90      	pop	{r4, r7, pc}
 800bcc4:	08011d8c 	.word	0x08011d8c
 800bcc8:	080129d8 	.word	0x080129d8
 800bccc:	08011bc8 	.word	0x08011bc8
 800bcd0:	08011edc 	.word	0x08011edc
 800bcd4:	08011ef8 	.word	0x08011ef8
 800bcd8:	08011e78 	.word	0x08011e78
 800bcdc:	08011f20 	.word	0x08011f20

0800bce0 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b094      	sub	sp, #80	; 0x50
 800bce4:	af06      	add	r7, sp, #24
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d002      	beq.n	800bcf8 <txPushMultiFrame+0x18>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d106      	bne.n	800bd06 <txPushMultiFrame+0x26>
 800bcf8:	4b65      	ldr	r3, [pc, #404]	; (800be90 <txPushMultiFrame+0x1b0>)
 800bcfa:	4a66      	ldr	r2, [pc, #408]	; (800be94 <txPushMultiFrame+0x1b4>)
 800bcfc:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800bd00:	4865      	ldr	r0, [pc, #404]	; (800be98 <txPushMultiFrame+0x1b8>)
 800bd02:	f001 fa89 	bl	800d218 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d106      	bne.n	800bd1a <txPushMultiFrame+0x3a>
 800bd0c:	4b63      	ldr	r3, [pc, #396]	; (800be9c <txPushMultiFrame+0x1bc>)
 800bd0e:	4a61      	ldr	r2, [pc, #388]	; (800be94 <txPushMultiFrame+0x1b4>)
 800bd10:	f240 11ed 	movw	r1, #493	; 0x1ed
 800bd14:	4860      	ldr	r0, [pc, #384]	; (800be98 <txPushMultiFrame+0x1b8>)
 800bd16:	f001 fa7f 	bl	800d218 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800bd1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d806      	bhi.n	800bd30 <txPushMultiFrame+0x50>
 800bd22:	4b5f      	ldr	r3, [pc, #380]	; (800bea0 <txPushMultiFrame+0x1c0>)
 800bd24:	4a5b      	ldr	r2, [pc, #364]	; (800be94 <txPushMultiFrame+0x1b4>)
 800bd26:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 800bd2a:	485b      	ldr	r0, [pc, #364]	; (800be98 <txPushMultiFrame+0x1b8>)
 800bd2c:	f001 fa74 	bl	800d218 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 800bd30:	2300      	movs	r3, #0
 800bd32:	637b      	str	r3, [r7, #52]	; 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800bd34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd36:	3302      	adds	r3, #2
 800bd38:	62bb      	str	r3, [r7, #40]	; 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 800bd3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4413      	add	r3, r2
 800bd40:	1e5a      	subs	r2, r3, #1
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd48:	627b      	str	r3, [r7, #36]	; 0x24
    CANARD_ASSERT(num_frames >= 2);
 800bd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d806      	bhi.n	800bd5e <txPushMultiFrame+0x7e>
 800bd50:	4b54      	ldr	r3, [pc, #336]	; (800bea4 <txPushMultiFrame+0x1c4>)
 800bd52:	4a50      	ldr	r2, [pc, #320]	; (800be94 <txPushMultiFrame+0x1b4>)
 800bd54:	f240 11f3 	movw	r1, #499	; 0x1f3
 800bd58:	484f      	ldr	r0, [pc, #316]	; (800be98 <txPushMultiFrame+0x1b8>)
 800bd5a:	f001 fa5d 	bl	800d218 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	689a      	ldr	r2, [r3, #8]
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd64:	441a      	add	r2, r3
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d87b      	bhi.n	800be66 <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 800bd6e:	f107 0010 	add.w	r0, r7, #16
 800bd72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd74:	9305      	str	r3, [sp, #20]
 800bd76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd78:	9304      	str	r3, [sp, #16]
 800bd7a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800bd7e:	9303      	str	r3, [sp, #12]
 800bd80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd82:	9302      	str	r3, [sp, #8]
 800bd84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bd88:	e9cd 2300 	strd	r2, r3, [sp]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	68b9      	ldr	r1, [r7, #8]
 800bd90:	f7ff fe68 	bl	800ba64 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d051      	beq.n	800be3e <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	633b      	str	r3, [r7, #48]	; 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f103 000c 	add.w	r0, r3, #12
 800bda4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bda6:	4b40      	ldr	r3, [pc, #256]	; (800bea8 <txPushMultiFrame+0x1c8>)
 800bda8:	4a40      	ldr	r2, [pc, #256]	; (800beac <txPushMultiFrame+0x1cc>)
 800bdaa:	f7ff f8f3 	bl	800af94 <cavlSearch>
 800bdae:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb2:	69fa      	ldr	r2, [r7, #28]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d006      	beq.n	800bdc6 <txPushMultiFrame+0xe6>
 800bdb8:	4b3d      	ldr	r3, [pc, #244]	; (800beb0 <txPushMultiFrame+0x1d0>)
 800bdba:	4a36      	ldr	r2, [pc, #216]	; (800be94 <txPushMultiFrame+0x1b4>)
 800bdbc:	f240 2105 	movw	r1, #517	; 0x205
 800bdc0:	4835      	ldr	r0, [pc, #212]	; (800be98 <txPushMultiFrame+0x1b8>)
 800bdc2:	f001 fa29 	bl	800d218 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d106      	bne.n	800bddc <txPushMultiFrame+0xfc>
 800bdce:	4b39      	ldr	r3, [pc, #228]	; (800beb4 <txPushMultiFrame+0x1d4>)
 800bdd0:	4a30      	ldr	r2, [pc, #192]	; (800be94 <txPushMultiFrame+0x1b4>)
 800bdd2:	f240 2106 	movw	r1, #518	; 0x206
 800bdd6:	4830      	ldr	r0, [pc, #192]	; (800be98 <txPushMultiFrame+0x1b8>)
 800bdd8:	f001 fa1e 	bl	800d218 <__assert_func>
                next = next->next_in_transfer;
 800bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdde:	691b      	ldr	r3, [r3, #16]
 800bde0:	633b      	str	r3, [r7, #48]	; 0x30
            } while (next != NULL);
 800bde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d1da      	bne.n	800bd9e <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d006      	beq.n	800bdfe <txPushMultiFrame+0x11e>
 800bdf0:	4b31      	ldr	r3, [pc, #196]	; (800beb8 <txPushMultiFrame+0x1d8>)
 800bdf2:	4a28      	ldr	r2, [pc, #160]	; (800be94 <txPushMultiFrame+0x1b4>)
 800bdf4:	f240 2109 	movw	r1, #521	; 0x209
 800bdf8:	4827      	ldr	r0, [pc, #156]	; (800be98 <txPushMultiFrame+0x1b8>)
 800bdfa:	f001 fa0d 	bl	800d218 <__assert_func>
            que->size += sq.size;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	689a      	ldr	r2, [r3, #8]
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	441a      	add	r2, r3
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	689a      	ldr	r2, [r3, #8]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	429a      	cmp	r2, r3
 800be14:	d906      	bls.n	800be24 <txPushMultiFrame+0x144>
 800be16:	4b29      	ldr	r3, [pc, #164]	; (800bebc <txPushMultiFrame+0x1dc>)
 800be18:	4a1e      	ldr	r2, [pc, #120]	; (800be94 <txPushMultiFrame+0x1b4>)
 800be1a:	f240 210b 	movw	r1, #523	; 0x20b
 800be1e:	481e      	ldr	r0, [pc, #120]	; (800be98 <txPushMultiFrame+0x1b8>)
 800be20:	f001 f9fa 	bl	800d218 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	2b00      	cmp	r3, #0
 800be28:	da06      	bge.n	800be38 <txPushMultiFrame+0x158>
 800be2a:	4b25      	ldr	r3, [pc, #148]	; (800bec0 <txPushMultiFrame+0x1e0>)
 800be2c:	4a19      	ldr	r2, [pc, #100]	; (800be94 <txPushMultiFrame+0x1b4>)
 800be2e:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800be32:	4819      	ldr	r0, [pc, #100]	; (800be98 <txPushMultiFrame+0x1b8>)
 800be34:	f001 f9f0 	bl	800d218 <__assert_func>
            out = (int32_t) sq.size;
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	637b      	str	r3, [r7, #52]	; 0x34
 800be3c:	e016      	b.n	800be6c <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 800be3e:	f06f 0302 	mvn.w	r3, #2
 800be42:	637b      	str	r3, [r7, #52]	; 0x34
            CanardTxQueueItem* head = &sq.head->base;
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 800be48:	e009      	b.n	800be5e <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 800be4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be56:	68b8      	ldr	r0, [r7, #8]
 800be58:	4798      	blx	r3
                head = next;
 800be5a:	6a3b      	ldr	r3, [r7, #32]
 800be5c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 800be5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1f2      	bne.n	800be4a <txPushMultiFrame+0x16a>
 800be64:	e002      	b.n	800be6c <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800be66:	f06f 0302 	mvn.w	r3, #2
 800be6a:	637b      	str	r3, [r7, #52]	; 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 800be6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6e:	2b00      	cmp	r3, #0
 800be70:	db09      	blt.n	800be86 <txPushMultiFrame+0x1a6>
 800be72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be74:	2b01      	cmp	r3, #1
 800be76:	dc06      	bgt.n	800be86 <txPushMultiFrame+0x1a6>
 800be78:	4b12      	ldr	r3, [pc, #72]	; (800bec4 <txPushMultiFrame+0x1e4>)
 800be7a:	4a06      	ldr	r2, [pc, #24]	; (800be94 <txPushMultiFrame+0x1b4>)
 800be7c:	f240 211f 	movw	r1, #543	; 0x21f
 800be80:	4805      	ldr	r0, [pc, #20]	; (800be98 <txPushMultiFrame+0x1b8>)
 800be82:	f001 f9c9 	bl	800d218 <__assert_func>
    return out;
 800be86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3738      	adds	r7, #56	; 0x38
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	08011f5c 	.word	0x08011f5c
 800be94:	080129c4 	.word	0x080129c4
 800be98:	08011bc8 	.word	0x08011bc8
 800be9c:	08011edc 	.word	0x08011edc
 800bea0:	08011ef8 	.word	0x08011ef8
 800bea4:	08011f8c 	.word	0x08011f8c
 800bea8:	0800b2f5 	.word	0x0800b2f5
 800beac:	0800b859 	.word	0x0800b859
 800beb0:	08011f9c 	.word	0x08011f9c
 800beb4:	08011fb0 	.word	0x08011fb0
 800beb8:	08011fcc 	.word	0x08011fcc
 800bebc:	08011ea8 	.word	0x08011ea8
 800bec0:	08011fe4 	.word	0x08011fe4
 800bec4:	08012008 	.word	0x08012008

0800bec8 <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid UAVCAN/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b088      	sub	sp, #32
 800becc:	af00      	add	r7, sp, #0
 800bece:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
 800bed4:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d106      	bne.n	800beea <rxTryParseFrame+0x22>
 800bedc:	4b96      	ldr	r3, [pc, #600]	; (800c138 <rxTryParseFrame+0x270>)
 800bede:	4a97      	ldr	r2, [pc, #604]	; (800c13c <rxTryParseFrame+0x274>)
 800bee0:	f240 214e 	movw	r1, #590	; 0x24e
 800bee4:	4896      	ldr	r0, [pc, #600]	; (800c140 <rxTryParseFrame+0x278>)
 800bee6:	f001 f997 	bl	800d218 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bef2:	d306      	bcc.n	800bf02 <rxTryParseFrame+0x3a>
 800bef4:	4b93      	ldr	r3, [pc, #588]	; (800c144 <rxTryParseFrame+0x27c>)
 800bef6:	4a91      	ldr	r2, [pc, #580]	; (800c13c <rxTryParseFrame+0x274>)
 800bef8:	f240 214f 	movw	r1, #591	; 0x24f
 800befc:	4890      	ldr	r0, [pc, #576]	; (800c140 <rxTryParseFrame+0x278>)
 800befe:	f001 f98b 	bl	800d218 <__assert_func>
    CANARD_ASSERT(out != NULL);
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d106      	bne.n	800bf16 <rxTryParseFrame+0x4e>
 800bf08:	4b8f      	ldr	r3, [pc, #572]	; (800c148 <rxTryParseFrame+0x280>)
 800bf0a:	4a8c      	ldr	r2, [pc, #560]	; (800c13c <rxTryParseFrame+0x274>)
 800bf0c:	f44f 7114 	mov.w	r1, #592	; 0x250
 800bf10:	488b      	ldr	r0, [pc, #556]	; (800c140 <rxTryParseFrame+0x278>)
 800bf12:	f001 f981 	bl	800d218 <__assert_func>
    bool valid = false;
 800bf16:	2300      	movs	r3, #0
 800bf18:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f000 8105 	beq.w	800c12e <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d106      	bne.n	800bf3a <rxTryParseFrame+0x72>
 800bf2c:	4b87      	ldr	r3, [pc, #540]	; (800c14c <rxTryParseFrame+0x284>)
 800bf2e:	4a83      	ldr	r2, [pc, #524]	; (800c13c <rxTryParseFrame+0x274>)
 800bf30:	f44f 7115 	mov.w	r1, #596	; 0x254
 800bf34:	4882      	ldr	r0, [pc, #520]	; (800c140 <rxTryParseFrame+0x278>)
 800bf36:	f001 f96f 	bl	800d218 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 800bf3a:	6839      	ldr	r1, [r7, #0]
 800bf3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf40:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 800bf4a:	69bb      	ldr	r3, [r7, #24]
 800bf4c:	0e9b      	lsrs	r3, r3, #26
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	f003 0307 	and.w	r3, r3, #7
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d128      	bne.n	800bfc4 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	2200      	movs	r2, #0
 800bf76:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	0a1b      	lsrs	r3, r3, #8
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d002      	beq.n	800bf98 <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	22ff      	movs	r2, #255	; 0xff
 800bf96:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	22ff      	movs	r2, #255	; 0xff
 800bf9c:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d106      	bne.n	800bfb6 <rxTryParseFrame+0xee>
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d101      	bne.n	800bfb6 <rxTryParseFrame+0xee>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e000      	b.n	800bfb8 <rxTryParseFrame+0xf0>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	77fb      	strb	r3, [r7, #31]
 800bfba:	7ffb      	ldrb	r3, [r7, #31]
 800bfbc:	f003 0301 	and.w	r3, r3, #1
 800bfc0:	77fb      	strb	r3, [r7, #31]
 800bfc2:	e02c      	b.n	800c01e <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <rxTryParseFrame+0x10a>
 800bfce:	2202      	movs	r2, #2
 800bfd0:	e000      	b.n	800bfd4 <rxTryParseFrame+0x10c>
 800bfd2:	2201      	movs	r2, #1
            out->transfer_kind =
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	0b9b      	lsrs	r3, r3, #14
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	09db      	lsrs	r3, r3, #7
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bff2:	b2da      	uxtb	r2, r3
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d107      	bne.n	800c012 <rxTryParseFrame+0x14a>
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	7b1a      	ldrb	r2, [r3, #12]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	7b5b      	ldrb	r3, [r3, #13]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d001      	beq.n	800c012 <rxTryParseFrame+0x14a>
 800c00e:	2301      	movs	r3, #1
 800c010:	e000      	b.n	800c014 <rxTryParseFrame+0x14c>
 800c012:	2300      	movs	r3, #0
 800c014:	77fb      	strb	r3, [r7, #31]
 800c016:	7ffb      	ldrb	r3, [r7, #31]
 800c018:	f003 0301 	and.w	r3, r3, #1
 800c01c:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	1e5a      	subs	r2, r3, #1
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	689a      	ldr	r2, [r3, #8]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	699a      	ldr	r2, [r3, #24]
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	695b      	ldr	r3, [r3, #20]
 800c038:	4413      	add	r3, r2
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
 800c040:	f003 031f 	and.w	r3, r3, #31
 800c044:	b2da      	uxtb	r2, r3
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 800c04a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	09db      	lsrs	r3, r3, #7
 800c052:	b2da      	uxtb	r2, r3
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 800c058:	7dfb      	ldrb	r3, [r7, #23]
 800c05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	bf14      	ite	ne
 800c062:	2301      	movne	r3, #1
 800c064:	2300      	moveq	r3, #0
 800c066:	b2da      	uxtb	r2, r3
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 800c06c:	7dfb      	ldrb	r3, [r7, #23]
 800c06e:	f003 0320 	and.w	r3, r3, #32
 800c072:	2b00      	cmp	r3, #0
 800c074:	bf14      	ite	ne
 800c076:	2301      	movne	r3, #1
 800c078:	2300      	moveq	r3, #0
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 800c080:	7ffb      	ldrb	r3, [r7, #31]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00c      	beq.n	800c0a0 <rxTryParseFrame+0x1d8>
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	7bdb      	ldrb	r3, [r3, #15]
 800c08a:	f083 0301 	eor.w	r3, r3, #1
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b00      	cmp	r3, #0
 800c092:	d103      	bne.n	800c09c <rxTryParseFrame+0x1d4>
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	7c5b      	ldrb	r3, [r3, #17]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <rxTryParseFrame+0x1d8>
 800c09c:	2301      	movs	r3, #1
 800c09e:	e000      	b.n	800c0a2 <rxTryParseFrame+0x1da>
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	77fb      	strb	r3, [r7, #31]
 800c0a4:	7ffb      	ldrb	r3, [r7, #31]
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 800c0ac:	7ffb      	ldrb	r3, [r7, #31]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00d      	beq.n	800c0ce <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	7c1b      	ldrb	r3, [r3, #16]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d103      	bne.n	800c0ca <rxTryParseFrame+0x202>
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	7b1b      	ldrb	r3, [r3, #12]
 800c0c6:	2bff      	cmp	r3, #255	; 0xff
 800c0c8:	d001      	beq.n	800c0ce <rxTryParseFrame+0x206>
        valid = valid &&
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e000      	b.n	800c0d0 <rxTryParseFrame+0x208>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	77fb      	strb	r3, [r7, #31]
 800c0d2:	7ffb      	ldrb	r3, [r7, #31]
 800c0d4:	f003 0301 	and.w	r3, r3, #1
 800c0d8:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 800c0da:	7ffb      	ldrb	r3, [r7, #31]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d009      	beq.n	800c0f4 <rxTryParseFrame+0x22c>
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	695b      	ldr	r3, [r3, #20]
 800c0e4:	2b06      	cmp	r3, #6
 800c0e6:	d803      	bhi.n	800c0f0 <rxTryParseFrame+0x228>
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	7c1b      	ldrb	r3, [r3, #16]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d001      	beq.n	800c0f4 <rxTryParseFrame+0x22c>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	e000      	b.n	800c0f6 <rxTryParseFrame+0x22e>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	77fb      	strb	r3, [r7, #31]
 800c0f8:	7ffb      	ldrb	r3, [r7, #31]
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 800c100:	7ffb      	ldrb	r3, [r7, #31]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00d      	beq.n	800c122 <rxTryParseFrame+0x25a>
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	695b      	ldr	r3, [r3, #20]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d107      	bne.n	800c11e <rxTryParseFrame+0x256>
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	7bdb      	ldrb	r3, [r3, #15]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d005      	beq.n	800c122 <rxTryParseFrame+0x25a>
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	7c1b      	ldrb	r3, [r3, #16]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d001      	beq.n	800c122 <rxTryParseFrame+0x25a>
 800c11e:	2301      	movs	r3, #1
 800c120:	e000      	b.n	800c124 <rxTryParseFrame+0x25c>
 800c122:	2300      	movs	r3, #0
 800c124:	77fb      	strb	r3, [r7, #31]
 800c126:	7ffb      	ldrb	r3, [r7, #31]
 800c128:	f003 0301 	and.w	r3, r3, #1
 800c12c:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 800c12e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c130:	4618      	mov	r0, r3
 800c132:	3720      	adds	r7, #32
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	08012020 	.word	0x08012020
 800c13c:	08012a14 	.word	0x08012a14
 800c140:	08011bc8 	.word	0x08011bc8
 800c144:	08012038 	.word	0x08012038
 800c148:	08012068 	.word	0x08012068
 800c14c:	0801207c 	.word	0x0801207c

0800c150 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d106      	bne.n	800c16e <rxInitTransferMetadataFromFrame+0x1e>
 800c160:	4b19      	ldr	r3, [pc, #100]	; (800c1c8 <rxInitTransferMetadataFromFrame+0x78>)
 800c162:	4a1a      	ldr	r2, [pc, #104]	; (800c1cc <rxInitTransferMetadataFromFrame+0x7c>)
 800c164:	f240 218f 	movw	r1, #655	; 0x28f
 800c168:	4819      	ldr	r0, [pc, #100]	; (800c1d0 <rxInitTransferMetadataFromFrame+0x80>)
 800c16a:	f001 f855 	bl	800d218 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d106      	bne.n	800c184 <rxInitTransferMetadataFromFrame+0x34>
 800c176:	4b17      	ldr	r3, [pc, #92]	; (800c1d4 <rxInitTransferMetadataFromFrame+0x84>)
 800c178:	4a14      	ldr	r2, [pc, #80]	; (800c1cc <rxInitTransferMetadataFromFrame+0x7c>)
 800c17a:	f44f 7124 	mov.w	r1, #656	; 0x290
 800c17e:	4814      	ldr	r0, [pc, #80]	; (800c1d0 <rxInitTransferMetadataFromFrame+0x80>)
 800c180:	f001 f84a 	bl	800d218 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d106      	bne.n	800c198 <rxInitTransferMetadataFromFrame+0x48>
 800c18a:	4b13      	ldr	r3, [pc, #76]	; (800c1d8 <rxInitTransferMetadataFromFrame+0x88>)
 800c18c:	4a0f      	ldr	r2, [pc, #60]	; (800c1cc <rxInitTransferMetadataFromFrame+0x7c>)
 800c18e:	f240 2191 	movw	r1, #657	; 0x291
 800c192:	480f      	ldr	r0, [pc, #60]	; (800c1d0 <rxInitTransferMetadataFromFrame+0x80>)
 800c194:	f001 f840 	bl	800d218 <__assert_func>
    out_transfer->priority       = frame->priority;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	7a1a      	ldrb	r2, [r3, #8]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	7a5a      	ldrb	r2, [r3, #9]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	895a      	ldrh	r2, [r3, #10]
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	7b1a      	ldrb	r2, [r3, #12]
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	7b9a      	ldrb	r2, [r3, #14]
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	715a      	strb	r2, [r3, #5]
}
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	08012020 	.word	0x08012020
 800c1cc:	08012aa8 	.word	0x08012aa8
 800c1d0:	08011bc8 	.word	0x08011bc8
 800c1d4:	0801207c 	.word	0x0801207c
 800c1d8:	0801209c 	.word	0x0801209c

0800c1dc <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	460a      	mov	r2, r1
 800c1e6:	71fb      	strb	r3, [r7, #7]
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 800c1ec:	79fb      	ldrb	r3, [r7, #7]
 800c1ee:	2b1f      	cmp	r3, #31
 800c1f0:	d906      	bls.n	800c200 <rxComputeTransferIDDifference+0x24>
 800c1f2:	4b15      	ldr	r3, [pc, #84]	; (800c248 <rxComputeTransferIDDifference+0x6c>)
 800c1f4:	4a15      	ldr	r2, [pc, #84]	; (800c24c <rxComputeTransferIDDifference+0x70>)
 800c1f6:	f44f 7127 	mov.w	r1, #668	; 0x29c
 800c1fa:	4815      	ldr	r0, [pc, #84]	; (800c250 <rxComputeTransferIDDifference+0x74>)
 800c1fc:	f001 f80c 	bl	800d218 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 800c200:	79bb      	ldrb	r3, [r7, #6]
 800c202:	2b1f      	cmp	r3, #31
 800c204:	d906      	bls.n	800c214 <rxComputeTransferIDDifference+0x38>
 800c206:	4b13      	ldr	r3, [pc, #76]	; (800c254 <rxComputeTransferIDDifference+0x78>)
 800c208:	4a10      	ldr	r2, [pc, #64]	; (800c24c <rxComputeTransferIDDifference+0x70>)
 800c20a:	f240 219d 	movw	r1, #669	; 0x29d
 800c20e:	4810      	ldr	r0, [pc, #64]	; (800c250 <rxComputeTransferIDDifference+0x74>)
 800c210:	f001 f802 	bl	800d218 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 800c214:	79fb      	ldrb	r3, [r7, #7]
 800c216:	b29a      	uxth	r2, r3
 800c218:	79bb      	ldrb	r3, [r7, #6]
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	1ad3      	subs	r3, r2, r3
 800c21e:	b29b      	uxth	r3, r3
 800c220:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 800c222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c226:	2b00      	cmp	r3, #0
 800c228:	da07      	bge.n	800c23a <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 800c22a:	2320      	movs	r3, #32
 800c22c:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 800c22e:	7b7b      	ldrb	r3, [r7, #13]
 800c230:	b29a      	uxth	r2, r3
 800c232:	89fb      	ldrh	r3, [r7, #14]
 800c234:	4413      	add	r3, r2
 800c236:	b29b      	uxth	r3, r3
 800c238:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 800c23a:	89fb      	ldrh	r3, [r7, #14]
 800c23c:	b2db      	uxtb	r3, r3
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	080120b8 	.word	0x080120b8
 800c24c:	08012a44 	.word	0x08012a44
 800c250:	08011bc8 	.word	0x08011bc8
 800c254:	080120d0 	.word	0x080120d0

0800c258 <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d106      	bne.n	800c27a <rxSessionWritePayload+0x22>
 800c26c:	4b67      	ldr	r3, [pc, #412]	; (800c40c <rxSessionWritePayload+0x1b4>)
 800c26e:	4a68      	ldr	r2, [pc, #416]	; (800c410 <rxSessionWritePayload+0x1b8>)
 800c270:	f240 21ad 	movw	r1, #685	; 0x2ad
 800c274:	4867      	ldr	r0, [pc, #412]	; (800c414 <rxSessionWritePayload+0x1bc>)
 800c276:	f000 ffcf 	bl	800d218 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d106      	bne.n	800c28e <rxSessionWritePayload+0x36>
 800c280:	4b65      	ldr	r3, [pc, #404]	; (800c418 <rxSessionWritePayload+0x1c0>)
 800c282:	4a63      	ldr	r2, [pc, #396]	; (800c410 <rxSessionWritePayload+0x1b8>)
 800c284:	f240 21ae 	movw	r1, #686	; 0x2ae
 800c288:	4862      	ldr	r0, [pc, #392]	; (800c414 <rxSessionWritePayload+0x1bc>)
 800c28a:	f000 ffc5 	bl	800d218 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800c28e:	6a3b      	ldr	r3, [r7, #32]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d109      	bne.n	800c2a8 <rxSessionWritePayload+0x50>
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d006      	beq.n	800c2a8 <rxSessionWritePayload+0x50>
 800c29a:	4b60      	ldr	r3, [pc, #384]	; (800c41c <rxSessionWritePayload+0x1c4>)
 800c29c:	4a5c      	ldr	r2, [pc, #368]	; (800c410 <rxSessionWritePayload+0x1b8>)
 800c29e:	f240 21af 	movw	r1, #687	; 0x2af
 800c2a2:	485c      	ldr	r0, [pc, #368]	; (800c414 <rxSessionWritePayload+0x1bc>)
 800c2a4:	f000 ffb8 	bl	800d218 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d206      	bcs.n	800c2c0 <rxSessionWritePayload+0x68>
 800c2b2:	4b5b      	ldr	r3, [pc, #364]	; (800c420 <rxSessionWritePayload+0x1c8>)
 800c2b4:	4a56      	ldr	r2, [pc, #344]	; (800c410 <rxSessionWritePayload+0x1b8>)
 800c2b6:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 800c2ba:	4856      	ldr	r0, [pc, #344]	; (800c414 <rxSessionWritePayload+0x1bc>)
 800c2bc:	f000 ffac 	bl	800d218 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	68da      	ldr	r2, [r3, #12]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d906      	bls.n	800c2da <rxSessionWritePayload+0x82>
 800c2cc:	4b55      	ldr	r3, [pc, #340]	; (800c424 <rxSessionWritePayload+0x1cc>)
 800c2ce:	4a50      	ldr	r2, [pc, #320]	; (800c410 <rxSessionWritePayload+0x1b8>)
 800c2d0:	f240 21b1 	movw	r1, #689	; 0x2b1
 800c2d4:	484f      	ldr	r0, [pc, #316]	; (800c414 <rxSessionWritePayload+0x1bc>)
 800c2d6:	f000 ff9f 	bl	800d218 <__assert_func>

    rxs->total_payload_size += payload_size;
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	689a      	ldr	r2, [r3, #8]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	441a      	add	r2, r3
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d115      	bne.n	800c31a <rxSessionWritePayload+0xc2>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d012      	beq.n	800c31a <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d006      	beq.n	800c30a <rxSessionWritePayload+0xb2>
 800c2fc:	4b4a      	ldr	r3, [pc, #296]	; (800c428 <rxSessionWritePayload+0x1d0>)
 800c2fe:	4a44      	ldr	r2, [pc, #272]	; (800c410 <rxSessionWritePayload+0x1b8>)
 800c300:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800c304:	4843      	ldr	r0, [pc, #268]	; (800c414 <rxSessionWritePayload+0x1bc>)
 800c306:	f000 ff87 	bl	800d218 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	6879      	ldr	r1, [r7, #4]
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	4798      	blx	r3
 800c314:	4602      	mov	r2, r0
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 800c31a:	2300      	movs	r3, #0
 800c31c:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d04e      	beq.n	800c3c4 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	68da      	ldr	r2, [r3, #12]
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	4413      	add	r3, r2
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	429a      	cmp	r2, r3
 800c336:	d229      	bcs.n	800c38c <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d206      	bcs.n	800c350 <rxSessionWritePayload+0xf8>
 800c342:	4b37      	ldr	r3, [pc, #220]	; (800c420 <rxSessionWritePayload+0x1c8>)
 800c344:	4a32      	ldr	r2, [pc, #200]	; (800c410 <rxSessionWritePayload+0x1b8>)
 800c346:	f240 21c3 	movw	r1, #707	; 0x2c3
 800c34a:	4832      	ldr	r0, [pc, #200]	; (800c414 <rxSessionWritePayload+0x1bc>)
 800c34c:	f000 ff64 	bl	800d218 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	68db      	ldr	r3, [r3, #12]
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	68da      	ldr	r2, [r3, #12]
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	4413      	add	r3, r2
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	429a      	cmp	r2, r3
 800c366:	d006      	beq.n	800c376 <rxSessionWritePayload+0x11e>
 800c368:	4b30      	ldr	r3, [pc, #192]	; (800c42c <rxSessionWritePayload+0x1d4>)
 800c36a:	4a29      	ldr	r2, [pc, #164]	; (800c410 <rxSessionWritePayload+0x1b8>)
 800c36c:	f240 21c5 	movw	r1, #709	; 0x2c5
 800c370:	4828      	ldr	r0, [pc, #160]	; (800c414 <rxSessionWritePayload+0x1bc>)
 800c372:	f000 ff51 	bl	800d218 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 800c376:	693a      	ldr	r2, [r7, #16]
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d306      	bcc.n	800c38c <rxSessionWritePayload+0x134>
 800c37e:	4b2c      	ldr	r3, [pc, #176]	; (800c430 <rxSessionWritePayload+0x1d8>)
 800c380:	4a23      	ldr	r2, [pc, #140]	; (800c410 <rxSessionWritePayload+0x1b8>)
 800c382:	f240 21c6 	movw	r1, #710	; 0x2c6
 800c386:	4823      	ldr	r0, [pc, #140]	; (800c414 <rxSessionWritePayload+0x1bc>)
 800c388:	f000 ff46 	bl	800d218 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	691a      	ldr	r2, [r3, #16]
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	4413      	add	r3, r2
 800c396:	693a      	ldr	r2, [r7, #16]
 800c398:	6a39      	ldr	r1, [r7, #32]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f002 f8c3 	bl	800e526 <memcpy>
        rxs->payload_size += bytes_to_copy;
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	68da      	ldr	r2, [r3, #12]
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	441a      	add	r2, r3
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d219      	bcs.n	800c3ea <rxSessionWritePayload+0x192>
 800c3b6:	4b1a      	ldr	r3, [pc, #104]	; (800c420 <rxSessionWritePayload+0x1c8>)
 800c3b8:	4a15      	ldr	r2, [pc, #84]	; (800c410 <rxSessionWritePayload+0x1b8>)
 800c3ba:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800c3be:	4815      	ldr	r0, [pc, #84]	; (800c414 <rxSessionWritePayload+0x1bc>)
 800c3c0:	f000 ff2a 	bl	800d218 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d006      	beq.n	800c3da <rxSessionWritePayload+0x182>
 800c3cc:	4b16      	ldr	r3, [pc, #88]	; (800c428 <rxSessionWritePayload+0x1d0>)
 800c3ce:	4a10      	ldr	r2, [pc, #64]	; (800c410 <rxSessionWritePayload+0x1b8>)
 800c3d0:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800c3d4:	480f      	ldr	r0, [pc, #60]	; (800c414 <rxSessionWritePayload+0x1bc>)
 800c3d6:	f000 ff1f 	bl	800d218 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <rxSessionWritePayload+0x18e>
 800c3e0:	f06f 0302 	mvn.w	r3, #2
 800c3e4:	e000      	b.n	800c3e8 <rxSessionWritePayload+0x190>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 800c3ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	dd06      	ble.n	800c400 <rxSessionWritePayload+0x1a8>
 800c3f2:	4b10      	ldr	r3, [pc, #64]	; (800c434 <rxSessionWritePayload+0x1dc>)
 800c3f4:	4a06      	ldr	r2, [pc, #24]	; (800c410 <rxSessionWritePayload+0x1b8>)
 800c3f6:	f240 21d7 	movw	r1, #727	; 0x2d7
 800c3fa:	4806      	ldr	r0, [pc, #24]	; (800c414 <rxSessionWritePayload+0x1bc>)
 800c3fc:	f000 ff0c 	bl	800d218 <__assert_func>
    return out;
 800c400:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c404:	4618      	mov	r0, r3
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	08011d8c 	.word	0x08011d8c
 800c410:	08012a90 	.word	0x08012a90
 800c414:	08011bc8 	.word	0x08011bc8
 800c418:	080120e8 	.word	0x080120e8
 800c41c:	08011c84 	.word	0x08011c84
 800c420:	080120fc 	.word	0x080120fc
 800c424:	08012118 	.word	0x08012118
 800c428:	08012148 	.word	0x08012148
 800c42c:	08012160 	.word	0x08012160
 800c430:	08012190 	.word	0x08012190
 800c434:	080121b0 	.word	0x080121b0

0800c438 <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d106      	bne.n	800c456 <rxSessionRestart+0x1e>
 800c448:	4b1a      	ldr	r3, [pc, #104]	; (800c4b4 <rxSessionRestart+0x7c>)
 800c44a:	4a1b      	ldr	r2, [pc, #108]	; (800c4b8 <rxSessionRestart+0x80>)
 800c44c:	f240 21dd 	movw	r1, #733	; 0x2dd
 800c450:	481a      	ldr	r0, [pc, #104]	; (800c4bc <rxSessionRestart+0x84>)
 800c452:	f000 fee1 	bl	800d218 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d106      	bne.n	800c46a <rxSessionRestart+0x32>
 800c45c:	4b18      	ldr	r3, [pc, #96]	; (800c4c0 <rxSessionRestart+0x88>)
 800c45e:	4a16      	ldr	r2, [pc, #88]	; (800c4b8 <rxSessionRestart+0x80>)
 800c460:	f240 21de 	movw	r1, #734	; 0x2de
 800c464:	4815      	ldr	r0, [pc, #84]	; (800c4bc <rxSessionRestart+0x84>)
 800c466:	f000 fed7 	bl	800d218 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	683a      	ldr	r2, [r7, #0]
 800c470:	6912      	ldr	r2, [r2, #16]
 800c472:	4611      	mov	r1, r2
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	2200      	movs	r2, #0
 800c47c:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	2200      	movs	r2, #0
 800c482:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	2200      	movs	r2, #0
 800c488:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c490:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	7d9b      	ldrb	r3, [r3, #22]
 800c496:	3301      	adds	r3, #1
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	f003 031f 	and.w	r3, r3, #31
 800c49e:	b2da      	uxtb	r2, r3
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	761a      	strb	r2, [r3, #24]
}
 800c4aa:	bf00      	nop
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	08011d8c 	.word	0x08011d8c
 800c4b8:	08012a64 	.word	0x08012a64
 800c4bc:	08011bc8 	.word	0x08011bc8
 800c4c0:	080120e8 	.word	0x080120e8

0800c4c4 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af02      	add	r7, sp, #8
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
 800c4d0:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d106      	bne.n	800c4e6 <rxSessionAcceptFrame+0x22>
 800c4d8:	4b81      	ldr	r3, [pc, #516]	; (800c6e0 <rxSessionAcceptFrame+0x21c>)
 800c4da:	4a82      	ldr	r2, [pc, #520]	; (800c6e4 <rxSessionAcceptFrame+0x220>)
 800c4dc:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c4e0:	4881      	ldr	r0, [pc, #516]	; (800c6e8 <rxSessionAcceptFrame+0x224>)
 800c4e2:	f000 fe99 	bl	800d218 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d106      	bne.n	800c4fa <rxSessionAcceptFrame+0x36>
 800c4ec:	4b7f      	ldr	r3, [pc, #508]	; (800c6ec <rxSessionAcceptFrame+0x228>)
 800c4ee:	4a7d      	ldr	r2, [pc, #500]	; (800c6e4 <rxSessionAcceptFrame+0x220>)
 800c4f0:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800c4f4:	487c      	ldr	r0, [pc, #496]	; (800c6e8 <rxSessionAcceptFrame+0x224>)
 800c4f6:	f000 fe8f 	bl	800d218 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d106      	bne.n	800c50e <rxSessionAcceptFrame+0x4a>
 800c500:	4b7b      	ldr	r3, [pc, #492]	; (800c6f0 <rxSessionAcceptFrame+0x22c>)
 800c502:	4a78      	ldr	r2, [pc, #480]	; (800c6e4 <rxSessionAcceptFrame+0x220>)
 800c504:	f240 21f1 	movw	r1, #753	; 0x2f1
 800c508:	4877      	ldr	r0, [pc, #476]	; (800c6e8 <rxSessionAcceptFrame+0x224>)
 800c50a:	f000 fe85 	bl	800d218 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	699b      	ldr	r3, [r3, #24]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d106      	bne.n	800c524 <rxSessionAcceptFrame+0x60>
 800c516:	4b77      	ldr	r3, [pc, #476]	; (800c6f4 <rxSessionAcceptFrame+0x230>)
 800c518:	4a72      	ldr	r2, [pc, #456]	; (800c6e4 <rxSessionAcceptFrame+0x220>)
 800c51a:	f240 21f2 	movw	r1, #754	; 0x2f2
 800c51e:	4872      	ldr	r0, [pc, #456]	; (800c6e8 <rxSessionAcceptFrame+0x224>)
 800c520:	f000 fe7a 	bl	800d218 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	7b9b      	ldrb	r3, [r3, #14]
 800c528:	2b1f      	cmp	r3, #31
 800c52a:	d906      	bls.n	800c53a <rxSessionAcceptFrame+0x76>
 800c52c:	4b72      	ldr	r3, [pc, #456]	; (800c6f8 <rxSessionAcceptFrame+0x234>)
 800c52e:	4a6d      	ldr	r2, [pc, #436]	; (800c6e4 <rxSessionAcceptFrame+0x220>)
 800c530:	f240 21f3 	movw	r1, #755	; 0x2f3
 800c534:	486c      	ldr	r0, [pc, #432]	; (800c6e8 <rxSessionAcceptFrame+0x224>)
 800c536:	f000 fe6f 	bl	800d218 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800c53a:	6a3b      	ldr	r3, [r7, #32]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d106      	bne.n	800c54e <rxSessionAcceptFrame+0x8a>
 800c540:	4b6e      	ldr	r3, [pc, #440]	; (800c6fc <rxSessionAcceptFrame+0x238>)
 800c542:	4a68      	ldr	r2, [pc, #416]	; (800c6e4 <rxSessionAcceptFrame+0x220>)
 800c544:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800c548:	4867      	ldr	r0, [pc, #412]	; (800c6e8 <rxSessionAcceptFrame+0x224>)
 800c54a:	f000 fe65 	bl	800d218 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	7bdb      	ldrb	r3, [r3, #15]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d005      	beq.n	800c562 <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55c:	68b9      	ldr	r1, [r7, #8]
 800c55e:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	7bdb      	ldrb	r3, [r3, #15]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d005      	beq.n	800c576 <rxSessionAcceptFrame+0xb2>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	7c1b      	ldrb	r3, [r3, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d001      	beq.n	800c576 <rxSessionAcceptFrame+0xb2>
 800c572:	2301      	movs	r3, #1
 800c574:	e000      	b.n	800c578 <rxSessionAcceptFrame+0xb4>
 800c576:	2300      	movs	r3, #0
 800c578:	75bb      	strb	r3, [r7, #22]
 800c57a:	7dbb      	ldrb	r3, [r7, #22]
 800c57c:	f003 0301 	and.w	r3, r3, #1
 800c580:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 800c582:	7dbb      	ldrb	r3, [r7, #22]
 800c584:	f083 0301 	eor.w	r3, r3, #1
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00c      	beq.n	800c5a8 <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	8a98      	ldrh	r0, [r3, #20]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6959      	ldr	r1, [r3, #20]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	699b      	ldr	r3, [r3, #24]
 800c59a:	461a      	mov	r2, r3
 800c59c:	f7fe fed6 	bl	800b34c <crcAdd>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	695a      	ldr	r2, [r3, #20]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	699b      	ldr	r3, [r3, #24]
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	683a      	ldr	r2, [r7, #0]
 800c5b6:	68b9      	ldr	r1, [r7, #8]
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f7ff fe4d 	bl	800c258 <rxSessionWritePayload>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 800c5c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	da10      	bge.n	800c5ec <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 800c5ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5ce:	f113 0f03 	cmn.w	r3, #3
 800c5d2:	d006      	beq.n	800c5e2 <rxSessionAcceptFrame+0x11e>
 800c5d4:	4b4a      	ldr	r3, [pc, #296]	; (800c700 <rxSessionAcceptFrame+0x23c>)
 800c5d6:	4a43      	ldr	r2, [pc, #268]	; (800c6e4 <rxSessionAcceptFrame+0x220>)
 800c5d8:	f240 3106 	movw	r1, #774	; 0x306
 800c5dc:	4842      	ldr	r0, [pc, #264]	; (800c6e8 <rxSessionAcceptFrame+0x224>)
 800c5de:	f000 fe1b 	bl	800d218 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 800c5e2:	68b9      	ldr	r1, [r7, #8]
 800c5e4:	68f8      	ldr	r0, [r7, #12]
 800c5e6:	f7ff ff27 	bl	800c438 <rxSessionRestart>
 800c5ea:	e072      	b.n	800c6d2 <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	7c1b      	ldrb	r3, [r3, #16]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d05f      	beq.n	800c6b4 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 800c5f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d006      	beq.n	800c60a <rxSessionAcceptFrame+0x146>
 800c5fc:	4b41      	ldr	r3, [pc, #260]	; (800c704 <rxSessionAcceptFrame+0x240>)
 800c5fe:	4a39      	ldr	r2, [pc, #228]	; (800c6e4 <rxSessionAcceptFrame+0x220>)
 800c600:	f240 310b 	movw	r1, #779	; 0x30b
 800c604:	4838      	ldr	r0, [pc, #224]	; (800c6e8 <rxSessionAcceptFrame+0x224>)
 800c606:	f000 fe07 	bl	800d218 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 800c60a:	7dbb      	ldrb	r3, [r7, #22]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d103      	bne.n	800c618 <rxSessionAcceptFrame+0x154>
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	8a9b      	ldrh	r3, [r3, #20]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d148      	bne.n	800c6aa <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 800c618:	2301      	movs	r3, #1
 800c61a:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800c61c:	6a3b      	ldr	r3, [r7, #32]
 800c61e:	4619      	mov	r1, r3
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7ff fd95 	bl	800c150 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62c:	6a39      	ldr	r1, [r7, #32]
 800c62e:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	68da      	ldr	r2, [r3, #12]
 800c636:	6a3b      	ldr	r3, [r7, #32]
 800c638:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	691a      	ldr	r2, [r3, #16]
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	689a      	ldr	r2, [r3, #8]
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d206      	bcs.n	800c65c <rxSessionAcceptFrame+0x198>
 800c64e:	4b2e      	ldr	r3, [pc, #184]	; (800c708 <rxSessionAcceptFrame+0x244>)
 800c650:	4a24      	ldr	r2, [pc, #144]	; (800c6e4 <rxSessionAcceptFrame+0x220>)
 800c652:	f240 3115 	movw	r1, #789	; 0x315
 800c656:	4824      	ldr	r0, [pc, #144]	; (800c6e8 <rxSessionAcceptFrame+0x224>)
 800c658:	f000 fdde 	bl	800d218 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	689a      	ldr	r2, [r3, #8]
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 800c668:	7dbb      	ldrb	r3, [r7, #22]
 800c66a:	f083 0301 	eor.w	r3, r3, #1
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b00      	cmp	r3, #0
 800c672:	d017      	beq.n	800c6a4 <rxSessionAcceptFrame+0x1e0>
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	2b01      	cmp	r3, #1
 800c678:	d814      	bhi.n	800c6a4 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 800c67a:	6a3b      	ldr	r3, [r7, #32]
 800c67c:	691a      	ldr	r2, [r3, #16]
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	f1c3 0302 	rsb	r3, r3, #2
 800c684:	429a      	cmp	r2, r3
 800c686:	d206      	bcs.n	800c696 <rxSessionAcceptFrame+0x1d2>
 800c688:	4b20      	ldr	r3, [pc, #128]	; (800c70c <rxSessionAcceptFrame+0x248>)
 800c68a:	4a16      	ldr	r2, [pc, #88]	; (800c6e4 <rxSessionAcceptFrame+0x220>)
 800c68c:	f240 3119 	movw	r1, #793	; 0x319
 800c690:	4815      	ldr	r0, [pc, #84]	; (800c6e8 <rxSessionAcceptFrame+0x224>)
 800c692:	f000 fdc1 	bl	800d218 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 800c696:	6a3b      	ldr	r3, [r7, #32]
 800c698:	691a      	ldr	r2, [r3, #16]
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	4413      	add	r3, r2
 800c69e:	1e9a      	subs	r2, r3, #2
 800c6a0:	6a3b      	ldr	r3, [r7, #32]
 800c6a2:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 800c6aa:	68b9      	ldr	r1, [r7, #8]
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f7ff fec3 	bl	800c438 <rxSessionRestart>
 800c6b2:	e00e      	b.n	800c6d2 <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	7e1b      	ldrb	r3, [r3, #24]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	bf14      	ite	ne
 800c6bc:	2301      	movne	r3, #1
 800c6be:	2300      	moveq	r3, #0
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	f083 0301 	eor.w	r3, r3, #1
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	f003 0301 	and.w	r3, r3, #1
 800c6cc:	b2da      	uxtb	r2, r3
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	761a      	strb	r2, [r3, #24]
    }
    return out;
 800c6d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3718      	adds	r7, #24
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	08011d8c 	.word	0x08011d8c
 800c6e4:	08012a78 	.word	0x08012a78
 800c6e8:	08011bc8 	.word	0x08011bc8
 800c6ec:	080120e8 	.word	0x080120e8
 800c6f0:	08012020 	.word	0x08012020
 800c6f4:	0801207c 	.word	0x0801207c
 800c6f8:	080121bc 	.word	0x080121bc
 800c6fc:	0801209c 	.word	0x0801209c
 800c700:	080121e4 	.word	0x080121e4
 800c704:	080121f0 	.word	0x080121f0
 800c708:	080121fc 	.word	0x080121fc
 800c70c:	0801222c 	.word	0x0801222c

0800c710 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_transport_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 800c710:	b5b0      	push	{r4, r5, r7, lr}
 800c712:	b088      	sub	sp, #32
 800c714:	af02      	add	r7, sp, #8
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
 800c71c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d106      	bne.n	800c732 <rxSessionUpdate+0x22>
 800c724:	4b6d      	ldr	r3, [pc, #436]	; (800c8dc <rxSessionUpdate+0x1cc>)
 800c726:	4a6e      	ldr	r2, [pc, #440]	; (800c8e0 <rxSessionUpdate+0x1d0>)
 800c728:	f240 3137 	movw	r1, #823	; 0x337
 800c72c:	486d      	ldr	r0, [pc, #436]	; (800c8e4 <rxSessionUpdate+0x1d4>)
 800c72e:	f000 fd73 	bl	800d218 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d106      	bne.n	800c746 <rxSessionUpdate+0x36>
 800c738:	4b6b      	ldr	r3, [pc, #428]	; (800c8e8 <rxSessionUpdate+0x1d8>)
 800c73a:	4a69      	ldr	r2, [pc, #420]	; (800c8e0 <rxSessionUpdate+0x1d0>)
 800c73c:	f44f 714e 	mov.w	r1, #824	; 0x338
 800c740:	4868      	ldr	r0, [pc, #416]	; (800c8e4 <rxSessionUpdate+0x1d4>)
 800c742:	f000 fd69 	bl	800d218 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d106      	bne.n	800c75a <rxSessionUpdate+0x4a>
 800c74c:	4b67      	ldr	r3, [pc, #412]	; (800c8ec <rxSessionUpdate+0x1dc>)
 800c74e:	4a64      	ldr	r2, [pc, #400]	; (800c8e0 <rxSessionUpdate+0x1d0>)
 800c750:	f240 3139 	movw	r1, #825	; 0x339
 800c754:	4863      	ldr	r0, [pc, #396]	; (800c8e4 <rxSessionUpdate+0x1d4>)
 800c756:	f000 fd5f 	bl	800d218 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800c75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d106      	bne.n	800c76e <rxSessionUpdate+0x5e>
 800c760:	4b63      	ldr	r3, [pc, #396]	; (800c8f0 <rxSessionUpdate+0x1e0>)
 800c762:	4a5f      	ldr	r2, [pc, #380]	; (800c8e0 <rxSessionUpdate+0x1d0>)
 800c764:	f240 313a 	movw	r1, #826	; 0x33a
 800c768:	485e      	ldr	r0, [pc, #376]	; (800c8e4 <rxSessionUpdate+0x1d4>)
 800c76a:	f000 fd55 	bl	800d218 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	7d9b      	ldrb	r3, [r3, #22]
 800c772:	2b1f      	cmp	r3, #31
 800c774:	d906      	bls.n	800c784 <rxSessionUpdate+0x74>
 800c776:	4b5f      	ldr	r3, [pc, #380]	; (800c8f4 <rxSessionUpdate+0x1e4>)
 800c778:	4a59      	ldr	r2, [pc, #356]	; (800c8e0 <rxSessionUpdate+0x1d0>)
 800c77a:	f240 313b 	movw	r1, #827	; 0x33b
 800c77e:	4859      	ldr	r0, [pc, #356]	; (800c8e4 <rxSessionUpdate+0x1d4>)
 800c780:	f000 fd4a 	bl	800d218 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	7b9b      	ldrb	r3, [r3, #14]
 800c788:	2b1f      	cmp	r3, #31
 800c78a:	d906      	bls.n	800c79a <rxSessionUpdate+0x8a>
 800c78c:	4b5a      	ldr	r3, [pc, #360]	; (800c8f8 <rxSessionUpdate+0x1e8>)
 800c78e:	4a54      	ldr	r2, [pc, #336]	; (800c8e0 <rxSessionUpdate+0x1d0>)
 800c790:	f44f 714f 	mov.w	r1, #828	; 0x33c
 800c794:	4853      	ldr	r0, [pc, #332]	; (800c8e4 <rxSessionUpdate+0x1d4>)
 800c796:	f000 fd3f 	bl	800d218 <__assert_func>

    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a0:	68b9      	ldr	r1, [r7, #8]
 800c7a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7a6:	4290      	cmp	r0, r2
 800c7a8:	eb71 0303 	sbcs.w	r3, r1, r3
 800c7ac:	d20f      	bcs.n	800c7ce <rxSessionUpdate+0xbe>
                               ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ba:	1a84      	subs	r4, r0, r2
 800c7bc:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800c7c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c7c4:	42a2      	cmp	r2, r4
 800c7c6:	41ab      	sbcs	r3, r5
 800c7c8:	d201      	bcs.n	800c7ce <rxSessionUpdate+0xbe>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e000      	b.n	800c7d0 <rxSessionUpdate+0xc0>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	75bb      	strb	r3, [r7, #22]
 800c7d2:	7dbb      	ldrb	r3, [r7, #22]
 800c7d4:	f003 0301 	and.w	r3, r3, #1
 800c7d8:	75bb      	strb	r3, [r7, #22]

    const bool not_previous_tid = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	7d9a      	ldrb	r2, [r3, #22]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	7b9b      	ldrb	r3, [r3, #14]
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	f7ff fcf9 	bl	800c1dc <rxComputeTransferIDDifference>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	bf8c      	ite	hi
 800c7f0:	2301      	movhi	r3, #1
 800c7f2:	2300      	movls	r3, #0
 800c7f4:	757b      	strb	r3, [r7, #21]

    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800c7f6:	7dbb      	ldrb	r3, [r7, #22]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10b      	bne.n	800c814 <rxSessionUpdate+0x104>
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	7ddb      	ldrb	r3, [r3, #23]
 800c800:	78fa      	ldrb	r2, [r7, #3]
 800c802:	429a      	cmp	r2, r3
 800c804:	d108      	bne.n	800c818 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	7bdb      	ldrb	r3, [r3, #15]
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d004      	beq.n	800c818 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 800c80e:	7d7b      	ldrb	r3, [r7, #21]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d001      	beq.n	800c818 <rxSessionUpdate+0x108>
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800c814:	2301      	movs	r3, #1
 800c816:	e000      	b.n	800c81a <rxSessionUpdate+0x10a>
 800c818:	2300      	movs	r3, #0
 800c81a:	753b      	strb	r3, [r7, #20]
 800c81c:	7d3b      	ldrb	r3, [r7, #20]
 800c81e:	f003 0301 	and.w	r3, r3, #1
 800c822:	753b      	strb	r3, [r7, #20]

    if (need_restart)
 800c824:	7d3b      	ldrb	r3, [r7, #20]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d013      	beq.n	800c852 <rxSessionUpdate+0x142>
    {
        rxs->total_payload_size        = 0U;
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	2200      	movs	r2, #0
 800c82e:	609a      	str	r2, [r3, #8]
        rxs->payload_size              = 0U;
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	2200      	movs	r2, #0
 800c834:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc            = CRC_INITIAL;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c83c:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id               = frame->transfer_id;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	7b9a      	ldrb	r2, [r3, #14]
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	759a      	strb	r2, [r3, #22]
        rxs->toggle                    = INITIAL_TOGGLE_STATE;
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	2201      	movs	r2, #1
 800c84a:	761a      	strb	r2, [r3, #24]
        rxs->redundant_transport_index = redundant_transport_index;
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	78fa      	ldrb	r2, [r7, #3]
 800c850:	75da      	strb	r2, [r3, #23]
    }

    int8_t out = 0;
 800c852:	2300      	movs	r3, #0
 800c854:	75fb      	strb	r3, [r7, #23]
    if (need_restart && (!frame->start_of_transfer))
 800c856:	7d3b      	ldrb	r3, [r7, #20]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00b      	beq.n	800c874 <rxSessionUpdate+0x164>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	7bdb      	ldrb	r3, [r3, #15]
 800c860:	f083 0301 	eor.w	r3, r3, #1
 800c864:	b2db      	uxtb	r3, r3
 800c866:	2b00      	cmp	r3, #0
 800c868:	d004      	beq.n	800c874 <rxSessionUpdate+0x164>
    {
        rxSessionRestart(ins, rxs);  // SOT-miss, no point going further.
 800c86a:	68b9      	ldr	r1, [r7, #8]
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f7ff fde3 	bl	800c438 <rxSessionRestart>
 800c872:	e02c      	b.n	800c8ce <rxSessionUpdate+0x1be>
    }
    else
    {
        const bool correct_transport = (rxs->redundant_transport_index == redundant_transport_index);
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	7ddb      	ldrb	r3, [r3, #23]
 800c878:	78fa      	ldrb	r2, [r7, #3]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	bf0c      	ite	eq
 800c87e:	2301      	moveq	r3, #1
 800c880:	2300      	movne	r3, #0
 800c882:	74fb      	strb	r3, [r7, #19]
        const bool correct_toggle    = (frame->toggle == rxs->toggle);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	7c5a      	ldrb	r2, [r3, #17]
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	7e1b      	ldrb	r3, [r3, #24]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	bf0c      	ite	eq
 800c890:	2301      	moveq	r3, #1
 800c892:	2300      	movne	r3, #0
 800c894:	74bb      	strb	r3, [r7, #18]
        const bool correct_tid       = (frame->transfer_id == rxs->transfer_id);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	7b9a      	ldrb	r2, [r3, #14]
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	7d9b      	ldrb	r3, [r3, #22]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	bf0c      	ite	eq
 800c8a2:	2301      	moveq	r3, #1
 800c8a4:	2300      	movne	r3, #0
 800c8a6:	747b      	strb	r3, [r7, #17]
        if (correct_transport && correct_toggle && correct_tid)
 800c8a8:	7cfb      	ldrb	r3, [r7, #19]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00f      	beq.n	800c8ce <rxSessionUpdate+0x1be>
 800c8ae:	7cbb      	ldrb	r3, [r7, #18]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00c      	beq.n	800c8ce <rxSessionUpdate+0x1be>
 800c8b4:	7c7b      	ldrb	r3, [r7, #17]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d009      	beq.n	800c8ce <rxSessionUpdate+0x1be>
        {
            out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 800c8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8bc:	9300      	str	r3, [sp, #0]
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	68b9      	ldr	r1, [r7, #8]
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f7ff fdfd 	bl	800c4c4 <rxSessionAcceptFrame>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	75fb      	strb	r3, [r7, #23]
        }
    }
    return out;
 800c8ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3718      	adds	r7, #24
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bdb0      	pop	{r4, r5, r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	08011d8c 	.word	0x08011d8c
 800c8e0:	08012a34 	.word	0x08012a34
 800c8e4:	08011bc8 	.word	0x08011bc8
 800c8e8:	080120e8 	.word	0x080120e8
 800c8ec:	08012020 	.word	0x08012020
 800c8f0:	0801209c 	.word	0x0801209c
 800c8f4:	08012264 	.word	0x08012264
 800c8f8:	080121bc 	.word	0x080121bc

0800c8fc <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_transport_index,
                                    CanardRxTransfer* const     out_transfer)
{
 800c8fc:	b5b0      	push	{r4, r5, r7, lr}
 800c8fe:	b08c      	sub	sp, #48	; 0x30
 800c900:	af04      	add	r7, sp, #16
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	607a      	str	r2, [r7, #4]
 800c908:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d106      	bne.n	800c91e <rxAcceptFrame+0x22>
 800c910:	4b85      	ldr	r3, [pc, #532]	; (800cb28 <rxAcceptFrame+0x22c>)
 800c912:	4a86      	ldr	r2, [pc, #536]	; (800cb2c <rxAcceptFrame+0x230>)
 800c914:	f44f 715a 	mov.w	r1, #872	; 0x368
 800c918:	4885      	ldr	r0, [pc, #532]	; (800cb30 <rxAcceptFrame+0x234>)
 800c91a:	f000 fc7d 	bl	800d218 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d106      	bne.n	800c932 <rxAcceptFrame+0x36>
 800c924:	4b83      	ldr	r3, [pc, #524]	; (800cb34 <rxAcceptFrame+0x238>)
 800c926:	4a81      	ldr	r2, [pc, #516]	; (800cb2c <rxAcceptFrame+0x230>)
 800c928:	f240 3169 	movw	r1, #873	; 0x369
 800c92c:	4880      	ldr	r0, [pc, #512]	; (800cb30 <rxAcceptFrame+0x234>)
 800c92e:	f000 fc73 	bl	800d218 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	8b9a      	ldrh	r2, [r3, #28]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	895b      	ldrh	r3, [r3, #10]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d006      	beq.n	800c94c <rxAcceptFrame+0x50>
 800c93e:	4b7e      	ldr	r3, [pc, #504]	; (800cb38 <rxAcceptFrame+0x23c>)
 800c940:	4a7a      	ldr	r2, [pc, #488]	; (800cb2c <rxAcceptFrame+0x230>)
 800c942:	f240 316a 	movw	r1, #874	; 0x36a
 800c946:	487a      	ldr	r0, [pc, #488]	; (800cb30 <rxAcceptFrame+0x234>)
 800c948:	f000 fc66 	bl	800d218 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d106      	bne.n	800c960 <rxAcceptFrame+0x64>
 800c952:	4b7a      	ldr	r3, [pc, #488]	; (800cb3c <rxAcceptFrame+0x240>)
 800c954:	4a75      	ldr	r2, [pc, #468]	; (800cb2c <rxAcceptFrame+0x230>)
 800c956:	f240 316b 	movw	r1, #875	; 0x36b
 800c95a:	4875      	ldr	r0, [pc, #468]	; (800cb30 <rxAcceptFrame+0x234>)
 800c95c:	f000 fc5c 	bl	800d218 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	699b      	ldr	r3, [r3, #24]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d106      	bne.n	800c976 <rxAcceptFrame+0x7a>
 800c968:	4b75      	ldr	r3, [pc, #468]	; (800cb40 <rxAcceptFrame+0x244>)
 800c96a:	4a70      	ldr	r2, [pc, #448]	; (800cb2c <rxAcceptFrame+0x230>)
 800c96c:	f44f 715b 	mov.w	r1, #876	; 0x36c
 800c970:	486f      	ldr	r0, [pc, #444]	; (800cb30 <rxAcceptFrame+0x234>)
 800c972:	f000 fc51 	bl	800d218 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	7b9b      	ldrb	r3, [r3, #14]
 800c97a:	2b1f      	cmp	r3, #31
 800c97c:	d906      	bls.n	800c98c <rxAcceptFrame+0x90>
 800c97e:	4b71      	ldr	r3, [pc, #452]	; (800cb44 <rxAcceptFrame+0x248>)
 800c980:	4a6a      	ldr	r2, [pc, #424]	; (800cb2c <rxAcceptFrame+0x230>)
 800c982:	f240 316d 	movw	r1, #877	; 0x36d
 800c986:	486a      	ldr	r0, [pc, #424]	; (800cb30 <rxAcceptFrame+0x234>)
 800c988:	f000 fc46 	bl	800d218 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	7b5b      	ldrb	r3, [r3, #13]
 800c990:	2bff      	cmp	r3, #255	; 0xff
 800c992:	d00c      	beq.n	800c9ae <rxAcceptFrame+0xb2>
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	791a      	ldrb	r2, [r3, #4]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	7b5b      	ldrb	r3, [r3, #13]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d006      	beq.n	800c9ae <rxAcceptFrame+0xb2>
 800c9a0:	4b69      	ldr	r3, [pc, #420]	; (800cb48 <rxAcceptFrame+0x24c>)
 800c9a2:	4a62      	ldr	r2, [pc, #392]	; (800cb2c <rxAcceptFrame+0x230>)
 800c9a4:	f240 316e 	movw	r1, #878	; 0x36e
 800c9a8:	4861      	ldr	r0, [pc, #388]	; (800cb30 <rxAcceptFrame+0x234>)
 800c9aa:	f000 fc35 	bl	800d218 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800c9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d106      	bne.n	800c9c2 <rxAcceptFrame+0xc6>
 800c9b4:	4b65      	ldr	r3, [pc, #404]	; (800cb4c <rxAcceptFrame+0x250>)
 800c9b6:	4a5d      	ldr	r2, [pc, #372]	; (800cb2c <rxAcceptFrame+0x230>)
 800c9b8:	f240 316f 	movw	r1, #879	; 0x36f
 800c9bc:	485c      	ldr	r0, [pc, #368]	; (800cb30 <rxAcceptFrame+0x234>)
 800c9be:	f000 fc2b 	bl	800d218 <__assert_func>

    int8_t out = 0;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	7b1b      	ldrb	r3, [r3, #12]
 800c9ca:	b25b      	sxtb	r3, r3
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	db6c      	blt.n	800caaa <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	7b1b      	ldrb	r3, [r3, #12]
 800c9d4:	68ba      	ldr	r2, [r7, #8]
 800c9d6:	3308      	adds	r3, #8
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	4413      	add	r3, r2
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d134      	bne.n	800ca4c <rxAcceptFrame+0x150>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	7bdb      	ldrb	r3, [r3, #15]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d030      	beq.n	800ca4c <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	2120      	movs	r1, #32
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	4798      	blx	r3
 800c9f4:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	7b1b      	ldrb	r3, [r3, #12]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	3308      	adds	r3, #8
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	4413      	add	r3, r2
 800ca02:	693a      	ldr	r2, [r7, #16]
 800ca04:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d01d      	beq.n	800ca48 <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec   = frame->timestamp_usec;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca12:	6939      	ldr	r1, [r7, #16]
 800ca14:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size        = 0U;
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	609a      	str	r2, [r3, #8]
                rxs->payload_size              = 0U;
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	2200      	movs	r2, #0
 800ca22:	60da      	str	r2, [r3, #12]
                rxs->payload                   = NULL;
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	2200      	movs	r2, #0
 800ca28:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc            = CRC_INITIAL;
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca30:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id               = frame->transfer_id;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	7b9a      	ldrb	r2, [r3, #14]
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	759a      	strb	r2, [r3, #22]
                rxs->redundant_transport_index = redundant_transport_index;
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	78fa      	ldrb	r2, [r7, #3]
 800ca3e:	75da      	strb	r2, [r3, #23]
                rxs->toggle                    = INITIAL_TOGGLE_STATE;
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	2201      	movs	r2, #1
 800ca44:	761a      	strb	r2, [r3, #24]
 800ca46:	e001      	b.n	800ca4c <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 800ca48:	23fd      	movs	r3, #253	; 0xfd
 800ca4a:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	7b1b      	ldrb	r3, [r3, #12]
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	3308      	adds	r3, #8
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	4413      	add	r3, r2
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d05e      	beq.n	800cb1c <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 800ca5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d006      	beq.n	800ca74 <rxAcceptFrame+0x178>
 800ca66:	4b3a      	ldr	r3, [pc, #232]	; (800cb50 <rxAcceptFrame+0x254>)
 800ca68:	4a30      	ldr	r2, [pc, #192]	; (800cb2c <rxAcceptFrame+0x230>)
 800ca6a:	f240 318e 	movw	r1, #910	; 0x38e
 800ca6e:	4830      	ldr	r0, [pc, #192]	; (800cb30 <rxAcceptFrame+0x234>)
 800ca70:	f000 fbd2 	bl	800d218 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	7b1b      	ldrb	r3, [r3, #12]
 800ca78:	68ba      	ldr	r2, [r7, #8]
 800ca7a:	3308      	adds	r3, #8
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4413      	add	r3, r2
 800ca80:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ca88:	68b9      	ldr	r1, [r7, #8]
 800ca8a:	6989      	ldr	r1, [r1, #24]
 800ca8c:	78fd      	ldrb	r5, [r7, #3]
 800ca8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca90:	9003      	str	r0, [sp, #12]
 800ca92:	9102      	str	r1, [sp, #8]
 800ca94:	e9cd 2300 	strd	r2, r3, [sp]
 800ca98:	462b      	mov	r3, r5
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f7ff fe36 	bl	800c710 <rxSessionUpdate>
 800caa4:	4603      	mov	r3, r0
 800caa6:	77fb      	strb	r3, [r7, #31]
 800caa8:	e038      	b.n	800cb1c <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	7b1b      	ldrb	r3, [r3, #12]
 800caae:	2bff      	cmp	r3, #255	; 0xff
 800cab0:	d006      	beq.n	800cac0 <rxAcceptFrame+0x1c4>
 800cab2:	4b28      	ldr	r3, [pc, #160]	; (800cb54 <rxAcceptFrame+0x258>)
 800cab4:	4a1d      	ldr	r2, [pc, #116]	; (800cb2c <rxAcceptFrame+0x230>)
 800cab6:	f240 319a 	movw	r1, #922	; 0x39a
 800caba:	481d      	ldr	r0, [pc, #116]	; (800cb30 <rxAcceptFrame+0x234>)
 800cabc:	f000 fbac 	bl	800d218 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	695a      	ldr	r2, [r3, #20]
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 800cac8:	4293      	cmp	r3, r2
 800caca:	bf28      	it	cs
 800cacc:	4613      	movcs	r3, r2
 800cace:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	69b9      	ldr	r1, [r7, #24]
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	4798      	blx	r3
 800cada:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d01a      	beq.n	800cb18 <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800cae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae4:	4619      	mov	r1, r3
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff fb32 	bl	800c150 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800caf4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 800caf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafa:	69ba      	ldr	r2, [r7, #24]
 800cafc:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	697a      	ldr	r2, [r7, #20]
 800cb02:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	699b      	ldr	r3, [r3, #24]
 800cb08:	69ba      	ldr	r2, [r7, #24]
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6978      	ldr	r0, [r7, #20]
 800cb0e:	f001 fd0a 	bl	800e526 <memcpy>
            out = 1;
 800cb12:	2301      	movs	r3, #1
 800cb14:	77fb      	strb	r3, [r7, #31]
 800cb16:	e001      	b.n	800cb1c <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 800cb18:	23fd      	movs	r3, #253	; 0xfd
 800cb1a:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800cb1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3720      	adds	r7, #32
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bdb0      	pop	{r4, r5, r7, pc}
 800cb28:	08011d8c 	.word	0x08011d8c
 800cb2c:	08012a24 	.word	0x08012a24
 800cb30:	08011bc8 	.word	0x08011bc8
 800cb34:	0801228c 	.word	0x0801228c
 800cb38:	080122a8 	.word	0x080122a8
 800cb3c:	08012020 	.word	0x08012020
 800cb40:	0801207c 	.word	0x0801207c
 800cb44:	080121bc 	.word	0x080121bc
 800cb48:	080122d0 	.word	0x080122d0
 800cb4c:	0801209c 	.word	0x0801209c
 800cb50:	08012328 	.word	0x08012328
 800cb54:	08012334 	.word	0x08012334

0800cb58 <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	881b      	ldrh	r3, [r3, #0]
 800cb66:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) node)->port_id;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	8b9b      	ldrh	r3, [r3, #28]
 800cb6c:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 800cb6e:	89fa      	ldrh	r2, [r7, #14]
 800cb70:	89bb      	ldrh	r3, [r7, #12]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d00a      	beq.n	800cb8c <rxSubscriptionPredicateOnPortID+0x34>
 800cb76:	89fa      	ldrh	r2, [r7, #14]
 800cb78:	89bb      	ldrh	r3, [r7, #12]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	bf8c      	ite	hi
 800cb7e:	2301      	movhi	r3, #1
 800cb80:	2300      	movls	r3, #0
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	461a      	mov	r2, r3
 800cb86:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <rxSubscriptionPredicateOnPortID+0x44>)
 800cb88:	569b      	ldrsb	r3, [r3, r2]
 800cb8a:	e000      	b.n	800cb8e <rxSubscriptionPredicateOnPortID+0x36>
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	08012a10 	.word	0x08012a10

0800cba0 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	331c      	adds	r3, #28
 800cbae:	6839      	ldr	r1, [r7, #0]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7ff ffd1 	bl	800cb58 <rxSubscriptionPredicateOnPortID>
 800cbb6:	4603      	mov	r3, r0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 800cbc0:	b5b0      	push	{r4, r5, r7, lr}
 800cbc2:	b08c      	sub	sp, #48	; 0x30
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d106      	bne.n	800cbe0 <canardInit+0x20>
 800cbd2:	4b16      	ldr	r3, [pc, #88]	; (800cc2c <canardInit+0x6c>)
 800cbd4:	4a16      	ldr	r2, [pc, #88]	; (800cc30 <canardInit+0x70>)
 800cbd6:	f240 31d6 	movw	r1, #982	; 0x3d6
 800cbda:	4816      	ldr	r0, [pc, #88]	; (800cc34 <canardInit+0x74>)
 800cbdc:	f000 fb1c 	bl	800d218 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d106      	bne.n	800cbf4 <canardInit+0x34>
 800cbe6:	4b14      	ldr	r3, [pc, #80]	; (800cc38 <canardInit+0x78>)
 800cbe8:	4a11      	ldr	r2, [pc, #68]	; (800cc30 <canardInit+0x70>)
 800cbea:	f240 31d7 	movw	r1, #983	; 0x3d7
 800cbee:	4811      	ldr	r0, [pc, #68]	; (800cc34 <canardInit+0x74>)
 800cbf0:	f000 fb12 	bl	800d218 <__assert_func>
    const CanardInstance out = {
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	617b      	str	r3, [r7, #20]
 800cbf8:	23ff      	movs	r3, #255	; 0xff
 800cbfa:	763b      	strb	r3, [r7, #24]
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	61fb      	str	r3, [r7, #28]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	623b      	str	r3, [r7, #32]
 800cc04:	2300      	movs	r3, #0
 800cc06:	627b      	str	r3, [r7, #36]	; 0x24
 800cc08:	2300      	movs	r3, #0
 800cc0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	461d      	mov	r5, r3
 800cc14:	f107 0414 	add.w	r4, r7, #20
 800cc18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc1c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cc20:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	3730      	adds	r7, #48	; 0x30
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bdb0      	pop	{r4, r5, r7, pc}
 800cc2c:	08012354 	.word	0x08012354
 800cc30:	08012898 	.word	0x08012898
 800cc34:	08011bc8 	.word	0x08011bc8
 800cc38:	08012374 	.word	0x08012374

0800cc3c <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 800cc3c:	b4b0      	push	{r4, r5, r7}
 800cc3e:	b08b      	sub	sp, #44	; 0x2c
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	617b      	str	r3, [r7, #20]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	61bb      	str	r3, [r7, #24]
 800cc50:	2300      	movs	r3, #0
 800cc52:	61fb      	str	r3, [r7, #28]
 800cc54:	2300      	movs	r3, #0
 800cc56:	623b      	str	r3, [r7, #32]
 800cc58:	2300      	movs	r3, #0
 800cc5a:	627b      	str	r3, [r7, #36]	; 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	461d      	mov	r5, r3
 800cc60:	f107 0414 	add.w	r4, r7, #20
 800cc64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc68:	6823      	ldr	r3, [r4, #0]
 800cc6a:	602b      	str	r3, [r5, #0]
}
 800cc6c:	68f8      	ldr	r0, [r7, #12]
 800cc6e:	372c      	adds	r7, #44	; 0x2c
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bcb0      	pop	{r4, r5, r7}
 800cc74:	4770      	bx	lr
	...

0800cc78 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b08e      	sub	sp, #56	; 0x38
 800cc7c:	af06      	add	r7, sp, #24
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800cc86:	f06f 0301 	mvn.w	r3, #1
 800cc8a:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d062      	beq.n	800cd58 <canardTxPush+0xe0>
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d05f      	beq.n	800cd58 <canardTxPush+0xe0>
 800cc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d05c      	beq.n	800cd58 <canardTxPush+0xe0>
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d102      	bne.n	800ccaa <canardTxPush+0x32>
 800cca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d156      	bne.n	800cd58 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fe fc02 	bl	800b4b8 <adjustPresentationLayerMTU>
 800ccb4:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	791a      	ldrb	r2, [r3, #4]
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccc6:	f7fe fc27 	bl	800b518 <txMakeCANID>
 800ccca:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	db40      	blt.n	800cd54 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 800ccd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccd4:	69bb      	ldr	r3, [r7, #24]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d81c      	bhi.n	800cd14 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800ccda:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 800ccdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccde:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 800cce0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cce2:	9103      	str	r1, [sp, #12]
 800cce4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cce6:	9102      	str	r1, [sp, #8]
 800cce8:	9201      	str	r2, [sp, #4]
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccf0:	68b9      	ldr	r1, [r7, #8]
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f7fe fdda 	bl	800b8ac <txPushSingleFrame>
 800ccf8:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	db2b      	blt.n	800cd58 <canardTxPush+0xe0>
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d028      	beq.n	800cd58 <canardTxPush+0xe0>
 800cd06:	4b1c      	ldr	r3, [pc, #112]	; (800cd78 <canardTxPush+0x100>)
 800cd08:	4a1c      	ldr	r2, [pc, #112]	; (800cd7c <canardTxPush+0x104>)
 800cd0a:	f240 4105 	movw	r1, #1029	; 0x405
 800cd0e:	481c      	ldr	r0, [pc, #112]	; (800cd80 <canardTxPush+0x108>)
 800cd10:	f000 fa82 	bl	800d218 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 800cd14:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 800cd16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd18:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 800cd1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd1c:	9105      	str	r1, [sp, #20]
 800cd1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd20:	9104      	str	r1, [sp, #16]
 800cd22:	9203      	str	r2, [sp, #12]
 800cd24:	9302      	str	r3, [sp, #8]
 800cd26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd2a:	e9cd 2300 	strd	r2, r3, [sp]
 800cd2e:	69ba      	ldr	r2, [r7, #24]
 800cd30:	68b9      	ldr	r1, [r7, #8]
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f7fe ffd4 	bl	800bce0 <txPushMultiFrame>
 800cd38:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	db0b      	blt.n	800cd58 <canardTxPush+0xe0>
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	dc08      	bgt.n	800cd58 <canardTxPush+0xe0>
 800cd46:	4b0f      	ldr	r3, [pc, #60]	; (800cd84 <canardTxPush+0x10c>)
 800cd48:	4a0c      	ldr	r2, [pc, #48]	; (800cd7c <canardTxPush+0x104>)
 800cd4a:	f240 4111 	movw	r1, #1041	; 0x411
 800cd4e:	480c      	ldr	r0, [pc, #48]	; (800cd80 <canardTxPush+0x108>)
 800cd50:	f000 fa62 	bl	800d218 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d106      	bne.n	800cd6c <canardTxPush+0xf4>
 800cd5e:	4b0a      	ldr	r3, [pc, #40]	; (800cd88 <canardTxPush+0x110>)
 800cd60:	4a06      	ldr	r2, [pc, #24]	; (800cd7c <canardTxPush+0x104>)
 800cd62:	f240 4119 	movw	r1, #1049	; 0x419
 800cd66:	4806      	ldr	r0, [pc, #24]	; (800cd80 <canardTxPush+0x108>)
 800cd68:	f000 fa56 	bl	800d218 <__assert_func>
    return out;
 800cd6c:	69fb      	ldr	r3, [r7, #28]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3720      	adds	r7, #32
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	08011ec4 	.word	0x08011ec4
 800cd7c:	080128a4 	.word	0x080128a4
 800cd80:	08011bc8 	.word	0x08011bc8
 800cd84:	08012008 	.word	0x08012008
 800cd88:	08012390 	.word	0x08012390

0800cd8c <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 800cd94:	2300      	movs	r3, #0
 800cd96:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d006      	beq.n	800cdac <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) cavlFindExtremum(que->root, false);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	2100      	movs	r1, #0
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7fd ff1d 	bl	800abe4 <cavlFindExtremum>
 800cdaa:	60f8      	str	r0, [r7, #12]
    }
    return out;
 800cdac:	68fb      	ldr	r3, [r7, #12]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b084      	sub	sp, #16
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d010      	beq.n	800cdec <canardTxPop+0x36>
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d00d      	beq.n	800cdec <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	330c      	adds	r3, #12
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	4611      	mov	r1, r2
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fe f957 	bl	800b090 <cavlRemove>
        que->size--;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	1e5a      	subs	r2, r3, #1
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	609a      	str	r2, [r3, #8]
    }
    return out;
 800cdec:	68fb      	ldr	r3, [r7, #12]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
	...

0800cdf8 <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_transport_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b090      	sub	sp, #64	; 0x40
 800cdfc:	af02      	add	r7, sp, #8
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800ce04:	23fe      	movs	r3, #254	; 0xfe
 800ce06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d068      	beq.n	800cee2 <canardRxAccept+0xea>
 800ce10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d065      	beq.n	800cee2 <canardRxAccept+0xea>
 800ce16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d062      	beq.n	800cee2 <canardRxAccept+0xea>
 800ce1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce24:	d25d      	bcs.n	800cee2 <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800ce26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce28:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d103      	bne.n	800ce36 <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800ce2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d155      	bne.n	800cee2 <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 800ce36:	f107 0310 	add.w	r3, r7, #16
 800ce3a:	2220      	movs	r2, #32
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f001 fa9d 	bl	800e37e <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 800ce44:	f107 0310 	add.w	r3, r7, #16
 800ce48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ce4e:	f7ff f83b 	bl	800bec8 <rxTryParseFrame>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d041      	beq.n	800cedc <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 800ce58:	7f7b      	ldrb	r3, [r7, #29]
 800ce5a:	2bff      	cmp	r3, #255	; 0xff
 800ce5c:	d004      	beq.n	800ce68 <canardRxAccept+0x70>
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	791a      	ldrb	r2, [r3, #4]
 800ce62:	7f7b      	ldrb	r3, [r7, #29]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d135      	bne.n	800ced4 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 800ce68:	7e7b      	ldrb	r3, [r7, #25]
 800ce6a:	3304      	adds	r3, #4
 800ce6c:	009b      	lsls	r3, r3, #2
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	18d0      	adds	r0, r2, r3
 800ce72:	f107 0310 	add.w	r3, r7, #16
 800ce76:	f103 010a 	add.w	r1, r3, #10
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	4a21      	ldr	r2, [pc, #132]	; (800cf04 <canardRxAccept+0x10c>)
 800ce7e:	f7fe f889 	bl	800af94 <cavlSearch>
 800ce82:	6338      	str	r0, [r7, #48]	; 0x30
                                                       &model.port_id,
                                                       &rxSubscriptionPredicateOnPortID,
                                                       NULL);
                if (out_subscription != NULL)
 800ce84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d002      	beq.n	800ce90 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 800ce8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce8e:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 800ce90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d01a      	beq.n	800cecc <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 800ce96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce98:	8b9a      	ldrh	r2, [r3, #28]
 800ce9a:	8b7b      	ldrh	r3, [r7, #26]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d006      	beq.n	800ceae <canardRxAccept+0xb6>
 800cea0:	4b19      	ldr	r3, [pc, #100]	; (800cf08 <canardRxAccept+0x110>)
 800cea2:	4a1a      	ldr	r2, [pc, #104]	; (800cf0c <canardRxAccept+0x114>)
 800cea4:	f240 415a 	movw	r1, #1114	; 0x45a
 800cea8:	4819      	ldr	r0, [pc, #100]	; (800cf10 <canardRxAccept+0x118>)
 800ceaa:	f000 f9b5 	bl	800d218 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_transport_index, out_transfer);
 800ceae:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800ceb2:	f107 0210 	add.w	r2, r7, #16
 800ceb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ceb8:	9300      	str	r3, [sp, #0]
 800ceba:	460b      	mov	r3, r1
 800cebc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cebe:	68f8      	ldr	r0, [r7, #12]
 800cec0:	f7ff fd1c 	bl	800c8fc <rxAcceptFrame>
 800cec4:	4603      	mov	r3, r0
 800cec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800ceca:	e00a      	b.n	800cee2 <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 800cecc:	2300      	movs	r3, #0
 800cece:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800ced2:	e006      	b.n	800cee2 <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 800ced4:	2300      	movs	r3, #0
 800ced6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ceda:	e002      	b.n	800cee2 <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-UAVCAN/CAN input frame.
 800cedc:	2300      	movs	r3, #0
 800cede:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 800cee2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	dd06      	ble.n	800cef8 <canardRxAccept+0x100>
 800ceea:	4b0a      	ldr	r3, [pc, #40]	; (800cf14 <canardRxAccept+0x11c>)
 800ceec:	4a07      	ldr	r2, [pc, #28]	; (800cf0c <canardRxAccept+0x114>)
 800ceee:	f240 416c 	movw	r1, #1132	; 0x46c
 800cef2:	4807      	ldr	r0, [pc, #28]	; (800cf10 <canardRxAccept+0x118>)
 800cef4:	f000 f990 	bl	800d218 <__assert_func>
    return out;
 800cef8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3738      	adds	r7, #56	; 0x38
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	0800cb59 	.word	0x0800cb59
 800cf08:	0801239c 	.word	0x0801239c
 800cf0c:	08012a00 	.word	0x08012a00
 800cf10:	08011bc8 	.word	0x08011bc8
 800cf14:	080123bc 	.word	0x080123bc

0800cf18 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b088      	sub	sp, #32
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	607b      	str	r3, [r7, #4]
 800cf22:	460b      	mov	r3, r1
 800cf24:	72fb      	strb	r3, [r7, #11]
 800cf26:	4613      	mov	r3, r2
 800cf28:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800cf2a:	23fe      	movs	r3, #254	; 0xfe
 800cf2c:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800cf2e:	7afb      	ldrb	r3, [r7, #11]
 800cf30:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d04a      	beq.n	800cfce <canardRxSubscribe+0xb6>
 800cf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d047      	beq.n	800cfce <canardRxSubscribe+0xb6>
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d844      	bhi.n	800cfce <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 800cf44:	893a      	ldrh	r2, [r7, #8]
 800cf46:	7afb      	ldrb	r3, [r7, #11]
 800cf48:	4619      	mov	r1, r3
 800cf4a:	68f8      	ldr	r0, [r7, #12]
 800cf4c:	f000 f850 	bl	800cff0 <canardRxUnsubscribe>
 800cf50:	4603      	mov	r3, r0
 800cf52:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 800cf54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	db38      	blt.n	800cfce <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 800cf5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cf62:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 800cf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 800cf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6e:	893a      	ldrh	r2, [r7, #8]
 800cf70:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800cf72:	2300      	movs	r3, #0
 800cf74:	61bb      	str	r3, [r7, #24]
 800cf76:	e009      	b.n	800cf8c <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 800cf78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	3308      	adds	r3, #8
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	4413      	add	r3, r2
 800cf82:	2200      	movs	r2, #0
 800cf84:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	61bb      	str	r3, [r7, #24]
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	2b7f      	cmp	r3, #127	; 0x7f
 800cf90:	d9f2      	bls.n	800cf78 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	3304      	adds	r3, #4
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	18d0      	adds	r0, r2, r3
 800cf9c:	4b0f      	ldr	r3, [pc, #60]	; (800cfdc <canardRxSubscribe+0xc4>)
 800cf9e:	4a10      	ldr	r2, [pc, #64]	; (800cfe0 <canardRxSubscribe+0xc8>)
 800cfa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cfa2:	f7fd fff7 	bl	800af94 <cavlSearch>
 800cfa6:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 800cfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfaa:	693a      	ldr	r2, [r7, #16]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d006      	beq.n	800cfbe <canardRxSubscribe+0xa6>
 800cfb0:	4b0c      	ldr	r3, [pc, #48]	; (800cfe4 <canardRxSubscribe+0xcc>)
 800cfb2:	4a0d      	ldr	r2, [pc, #52]	; (800cfe8 <canardRxSubscribe+0xd0>)
 800cfb4:	f44f 6192 	mov.w	r1, #1168	; 0x490
 800cfb8:	480c      	ldr	r0, [pc, #48]	; (800cfec <canardRxSubscribe+0xd4>)
 800cfba:	f000 f92d 	bl	800d218 <__assert_func>
            out = (out > 0) ? 0 : 1;
 800cfbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	bfd4      	ite	le
 800cfc6:	2301      	movle	r3, #1
 800cfc8:	2300      	movgt	r3, #0
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800cfce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3720      	adds	r7, #32
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	0800b2f5 	.word	0x0800b2f5
 800cfe0:	0800cba1 	.word	0x0800cba1
 800cfe4:	080123c8 	.word	0x080123c8
 800cfe8:	08012ac8 	.word	0x08012ac8
 800cfec:	08011bc8 	.word	0x08011bc8

0800cff0 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b088      	sub	sp, #32
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	460b      	mov	r3, r1
 800cffa:	70fb      	strb	r3, [r7, #3]
 800cffc:	4613      	mov	r3, r2
 800cffe:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800d000:	23fe      	movs	r3, #254	; 0xfe
 800d002:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800d004:	78fb      	ldrb	r3, [r7, #3]
 800d006:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d05f      	beq.n	800d0ce <canardRxUnsubscribe+0xde>
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	2b02      	cmp	r3, #2
 800d012:	d85c      	bhi.n	800d0ce <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 800d014:	883b      	ldrh	r3, [r7, #0]
 800d016:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	3304      	adds	r3, #4
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	18d0      	adds	r0, r2, r3
 800d022:	f107 010e 	add.w	r1, r7, #14
 800d026:	2300      	movs	r3, #0
 800d028:	4a2c      	ldr	r2, [pc, #176]	; (800d0dc <canardRxUnsubscribe+0xec>)
 800d02a:	f7fd ffb3 	bl	800af94 <cavlSearch>
 800d02e:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d049      	beq.n	800d0ca <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	3304      	adds	r3, #4
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	4413      	add	r3, r2
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	4611      	mov	r1, r2
 800d044:	4618      	mov	r0, r3
 800d046:	f7fe f823 	bl	800b090 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	8b9b      	ldrh	r3, [r3, #28]
 800d04e:	883a      	ldrh	r2, [r7, #0]
 800d050:	429a      	cmp	r2, r3
 800d052:	d006      	beq.n	800d062 <canardRxUnsubscribe+0x72>
 800d054:	4b22      	ldr	r3, [pc, #136]	; (800d0e0 <canardRxUnsubscribe+0xf0>)
 800d056:	4a23      	ldr	r2, [pc, #140]	; (800d0e4 <canardRxUnsubscribe+0xf4>)
 800d058:	f240 41a5 	movw	r1, #1189	; 0x4a5
 800d05c:	4822      	ldr	r0, [pc, #136]	; (800d0e8 <canardRxUnsubscribe+0xf8>)
 800d05e:	f000 f8db 	bl	800d218 <__assert_func>
            out = 1;
 800d062:	2301      	movs	r3, #1
 800d064:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800d066:	2300      	movs	r3, #0
 800d068:	61bb      	str	r3, [r7, #24]
 800d06a:	e02a      	b.n	800d0c2 <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	68da      	ldr	r2, [r3, #12]
 800d070:	6939      	ldr	r1, [r7, #16]
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	3308      	adds	r3, #8
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	440b      	add	r3, r1
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d007      	beq.n	800d090 <canardRxUnsubscribe+0xa0>
 800d080:	6939      	ldr	r1, [r7, #16]
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	3308      	adds	r3, #8
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	440b      	add	r3, r1
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	691b      	ldr	r3, [r3, #16]
 800d08e:	e000      	b.n	800d092 <canardRxUnsubscribe+0xa2>
 800d090:	2300      	movs	r3, #0
 800d092:	4619      	mov	r1, r3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	68da      	ldr	r2, [r3, #12]
 800d09c:	6939      	ldr	r1, [r7, #16]
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	3308      	adds	r3, #8
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	440b      	add	r3, r1
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	4790      	blx	r2
                sub->sessions[i] = NULL;
 800d0ae:	693a      	ldr	r2, [r7, #16]
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	3308      	adds	r3, #8
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800d0bc:	69bb      	ldr	r3, [r7, #24]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	61bb      	str	r3, [r7, #24]
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	2b7f      	cmp	r3, #127	; 0x7f
 800d0c6:	d9d1      	bls.n	800d06c <canardRxUnsubscribe+0x7c>
 800d0c8:	e001      	b.n	800d0ce <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800d0ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3720      	adds	r7, #32
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	0800cb59 	.word	0x0800cb59
 800d0e0:	080123e8 	.word	0x080123e8
 800d0e4:	08012adc 	.word	0x08012adc
 800d0e8:	08011bc8 	.word	0x08011bc8

0800d0ec <canardMakeFilterForSubject>:

CanardFilter canardMakeFilterForSubject(const CanardPortID subject_id)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	807b      	strh	r3, [r7, #2]
    CanardFilter out = {0};
 800d0f8:	f107 0308 	add.w	r3, r7, #8
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	601a      	str	r2, [r3, #0]
 800d100:	605a      	str	r2, [r3, #4]

    out.extended_can_id = ((uint32_t) subject_id) << OFFSET_SUBJECT_ID;
 800d102:	887b      	ldrh	r3, [r7, #2]
 800d104:	021b      	lsls	r3, r3, #8
 800d106:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_07 | (CANARD_SUBJECT_ID_MAX << OFFSET_SUBJECT_ID);
 800d108:	4b07      	ldr	r3, [pc, #28]	; (800d128 <canardMakeFilterForSubject+0x3c>)
 800d10a:	60fb      	str	r3, [r7, #12]

    return out;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	461a      	mov	r2, r3
 800d110:	f107 0308 	add.w	r3, r7, #8
 800d114:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d118:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	3714      	adds	r7, #20
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr
 800d128:	021fff80 	.word	0x021fff80

0800d12c <canardMakeFilterForServices>:

    return out;
}

CanardFilter canardMakeFilterForServices(const CanardNodeID local_node_id)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	460b      	mov	r3, r1
 800d136:	70fb      	strb	r3, [r7, #3]
    CanardFilter out = {0};
 800d138:	f107 0308 	add.w	r3, r7, #8
 800d13c:	2200      	movs	r2, #0
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	605a      	str	r2, [r3, #4]

    out.extended_can_id = FLAG_SERVICE_NOT_MESSAGE | (((uint32_t) local_node_id) << OFFSET_DST_NODE_ID);
 800d142:	78fb      	ldrb	r3, [r7, #3]
 800d144:	01db      	lsls	r3, r3, #7
 800d146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d14a:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_23 | (CANARD_NODE_ID_MAX << OFFSET_DST_NODE_ID);
 800d14c:	4b07      	ldr	r3, [pc, #28]	; (800d16c <canardMakeFilterForServices+0x40>)
 800d14e:	60fb      	str	r3, [r7, #12]

    return out;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	461a      	mov	r2, r3
 800d154:	f107 0308 	add.w	r3, r7, #8
 800d158:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d15c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	3714      	adds	r7, #20
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr
 800d16c:	02803f80 	.word	0x02803f80

0800d170 <canardConsolidateFilters>:

CanardFilter canardConsolidateFilters(const CanardFilter* a, const CanardFilter* b)
{
 800d170:	b480      	push	{r7}
 800d172:	b087      	sub	sp, #28
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
    CanardFilter out = {0};
 800d17c:	f107 0310 	add.w	r3, r7, #16
 800d180:	2200      	movs	r2, #0
 800d182:	601a      	str	r2, [r3, #0]
 800d184:	605a      	str	r2, [r3, #4]

    out.extended_mask   = a->extended_mask & b->extended_mask & ~(a->extended_can_id ^ b->extended_can_id);
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	685a      	ldr	r2, [r3, #4]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	401a      	ands	r2, r3
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	6819      	ldr	r1, [r3, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	404b      	eors	r3, r1
 800d19a:	43db      	mvns	r3, r3
 800d19c:	4013      	ands	r3, r2
 800d19e:	617b      	str	r3, [r7, #20]
    out.extended_can_id = a->extended_can_id & out.extended_mask;
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	4013      	ands	r3, r2
 800d1a8:	613b      	str	r3, [r7, #16]

    return out;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	f107 0310 	add.w	r3, r7, #16
 800d1b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d1b6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	371c      	adds	r7, #28
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <_ZdlPvj>:
 800d1c6:	f000 b814 	b.w	800d1f2 <_ZdlPv>

0800d1ca <_Znwj>:
 800d1ca:	2801      	cmp	r0, #1
 800d1cc:	bf38      	it	cc
 800d1ce:	2001      	movcc	r0, #1
 800d1d0:	b510      	push	{r4, lr}
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f000 f84f 	bl	800d278 <malloc>
 800d1da:	b100      	cbz	r0, 800d1de <_Znwj+0x14>
 800d1dc:	bd10      	pop	{r4, pc}
 800d1de:	f000 f80b 	bl	800d1f8 <_ZSt15get_new_handlerv>
 800d1e2:	b908      	cbnz	r0, 800d1e8 <_Znwj+0x1e>
 800d1e4:	f000 f810 	bl	800d208 <abort>
 800d1e8:	4780      	blx	r0
 800d1ea:	e7f3      	b.n	800d1d4 <_Znwj+0xa>

0800d1ec <_ZSt25__throw_bad_function_callv>:
 800d1ec:	b508      	push	{r3, lr}
 800d1ee:	f000 f80b 	bl	800d208 <abort>

0800d1f2 <_ZdlPv>:
 800d1f2:	f000 b849 	b.w	800d288 <free>
	...

0800d1f8 <_ZSt15get_new_handlerv>:
 800d1f8:	4b02      	ldr	r3, [pc, #8]	; (800d204 <_ZSt15get_new_handlerv+0xc>)
 800d1fa:	6818      	ldr	r0, [r3, #0]
 800d1fc:	f3bf 8f5b 	dmb	ish
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	20000474 	.word	0x20000474

0800d208 <abort>:
 800d208:	b508      	push	{r3, lr}
 800d20a:	2006      	movs	r0, #6
 800d20c:	f001 f8e8 	bl	800e3e0 <raise>
 800d210:	2001      	movs	r0, #1
 800d212:	f7f7 fb81 	bl	8004918 <_exit>
	...

0800d218 <__assert_func>:
 800d218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d21a:	4614      	mov	r4, r2
 800d21c:	461a      	mov	r2, r3
 800d21e:	4b09      	ldr	r3, [pc, #36]	; (800d244 <__assert_func+0x2c>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4605      	mov	r5, r0
 800d224:	68d8      	ldr	r0, [r3, #12]
 800d226:	b14c      	cbz	r4, 800d23c <__assert_func+0x24>
 800d228:	4b07      	ldr	r3, [pc, #28]	; (800d248 <__assert_func+0x30>)
 800d22a:	9100      	str	r1, [sp, #0]
 800d22c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d230:	4906      	ldr	r1, [pc, #24]	; (800d24c <__assert_func+0x34>)
 800d232:	462b      	mov	r3, r5
 800d234:	f000 fff6 	bl	800e224 <fiprintf>
 800d238:	f7ff ffe6 	bl	800d208 <abort>
 800d23c:	4b04      	ldr	r3, [pc, #16]	; (800d250 <__assert_func+0x38>)
 800d23e:	461c      	mov	r4, r3
 800d240:	e7f3      	b.n	800d22a <__assert_func+0x12>
 800d242:	bf00      	nop
 800d244:	20000064 	.word	0x20000064
 800d248:	08012af0 	.word	0x08012af0
 800d24c:	08012afd 	.word	0x08012afd
 800d250:	08012b2b 	.word	0x08012b2b

0800d254 <exit>:
 800d254:	b508      	push	{r3, lr}
 800d256:	4b06      	ldr	r3, [pc, #24]	; (800d270 <exit+0x1c>)
 800d258:	4604      	mov	r4, r0
 800d25a:	b113      	cbz	r3, 800d262 <exit+0xe>
 800d25c:	2100      	movs	r1, #0
 800d25e:	f3af 8000 	nop.w
 800d262:	4b04      	ldr	r3, [pc, #16]	; (800d274 <exit+0x20>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	b103      	cbz	r3, 800d26a <exit+0x16>
 800d268:	4798      	blx	r3
 800d26a:	4620      	mov	r0, r4
 800d26c:	f7f7 fb54 	bl	8004918 <_exit>
 800d270:	00000000 	.word	0x00000000
 800d274:	200005b8 	.word	0x200005b8

0800d278 <malloc>:
 800d278:	4b02      	ldr	r3, [pc, #8]	; (800d284 <malloc+0xc>)
 800d27a:	4601      	mov	r1, r0
 800d27c:	6818      	ldr	r0, [r3, #0]
 800d27e:	f000 b82b 	b.w	800d2d8 <_malloc_r>
 800d282:	bf00      	nop
 800d284:	20000064 	.word	0x20000064

0800d288 <free>:
 800d288:	4b02      	ldr	r3, [pc, #8]	; (800d294 <free+0xc>)
 800d28a:	4601      	mov	r1, r0
 800d28c:	6818      	ldr	r0, [r3, #0]
 800d28e:	f001 bfd9 	b.w	800f244 <_free_r>
 800d292:	bf00      	nop
 800d294:	20000064 	.word	0x20000064

0800d298 <sbrk_aligned>:
 800d298:	b570      	push	{r4, r5, r6, lr}
 800d29a:	4e0e      	ldr	r6, [pc, #56]	; (800d2d4 <sbrk_aligned+0x3c>)
 800d29c:	460c      	mov	r4, r1
 800d29e:	6831      	ldr	r1, [r6, #0]
 800d2a0:	4605      	mov	r5, r0
 800d2a2:	b911      	cbnz	r1, 800d2aa <sbrk_aligned+0x12>
 800d2a4:	f001 f8f0 	bl	800e488 <_sbrk_r>
 800d2a8:	6030      	str	r0, [r6, #0]
 800d2aa:	4621      	mov	r1, r4
 800d2ac:	4628      	mov	r0, r5
 800d2ae:	f001 f8eb 	bl	800e488 <_sbrk_r>
 800d2b2:	1c43      	adds	r3, r0, #1
 800d2b4:	d00a      	beq.n	800d2cc <sbrk_aligned+0x34>
 800d2b6:	1cc4      	adds	r4, r0, #3
 800d2b8:	f024 0403 	bic.w	r4, r4, #3
 800d2bc:	42a0      	cmp	r0, r4
 800d2be:	d007      	beq.n	800d2d0 <sbrk_aligned+0x38>
 800d2c0:	1a21      	subs	r1, r4, r0
 800d2c2:	4628      	mov	r0, r5
 800d2c4:	f001 f8e0 	bl	800e488 <_sbrk_r>
 800d2c8:	3001      	adds	r0, #1
 800d2ca:	d101      	bne.n	800d2d0 <sbrk_aligned+0x38>
 800d2cc:	f04f 34ff 	mov.w	r4, #4294967295
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	bd70      	pop	{r4, r5, r6, pc}
 800d2d4:	2000047c 	.word	0x2000047c

0800d2d8 <_malloc_r>:
 800d2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2dc:	1ccd      	adds	r5, r1, #3
 800d2de:	f025 0503 	bic.w	r5, r5, #3
 800d2e2:	3508      	adds	r5, #8
 800d2e4:	2d0c      	cmp	r5, #12
 800d2e6:	bf38      	it	cc
 800d2e8:	250c      	movcc	r5, #12
 800d2ea:	2d00      	cmp	r5, #0
 800d2ec:	4607      	mov	r7, r0
 800d2ee:	db01      	blt.n	800d2f4 <_malloc_r+0x1c>
 800d2f0:	42a9      	cmp	r1, r5
 800d2f2:	d905      	bls.n	800d300 <_malloc_r+0x28>
 800d2f4:	230c      	movs	r3, #12
 800d2f6:	603b      	str	r3, [r7, #0]
 800d2f8:	2600      	movs	r6, #0
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d300:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d3d4 <_malloc_r+0xfc>
 800d304:	f000 f868 	bl	800d3d8 <__malloc_lock>
 800d308:	f8d8 3000 	ldr.w	r3, [r8]
 800d30c:	461c      	mov	r4, r3
 800d30e:	bb5c      	cbnz	r4, 800d368 <_malloc_r+0x90>
 800d310:	4629      	mov	r1, r5
 800d312:	4638      	mov	r0, r7
 800d314:	f7ff ffc0 	bl	800d298 <sbrk_aligned>
 800d318:	1c43      	adds	r3, r0, #1
 800d31a:	4604      	mov	r4, r0
 800d31c:	d155      	bne.n	800d3ca <_malloc_r+0xf2>
 800d31e:	f8d8 4000 	ldr.w	r4, [r8]
 800d322:	4626      	mov	r6, r4
 800d324:	2e00      	cmp	r6, #0
 800d326:	d145      	bne.n	800d3b4 <_malloc_r+0xdc>
 800d328:	2c00      	cmp	r4, #0
 800d32a:	d048      	beq.n	800d3be <_malloc_r+0xe6>
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	4631      	mov	r1, r6
 800d330:	4638      	mov	r0, r7
 800d332:	eb04 0903 	add.w	r9, r4, r3
 800d336:	f001 f8a7 	bl	800e488 <_sbrk_r>
 800d33a:	4581      	cmp	r9, r0
 800d33c:	d13f      	bne.n	800d3be <_malloc_r+0xe6>
 800d33e:	6821      	ldr	r1, [r4, #0]
 800d340:	1a6d      	subs	r5, r5, r1
 800d342:	4629      	mov	r1, r5
 800d344:	4638      	mov	r0, r7
 800d346:	f7ff ffa7 	bl	800d298 <sbrk_aligned>
 800d34a:	3001      	adds	r0, #1
 800d34c:	d037      	beq.n	800d3be <_malloc_r+0xe6>
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	442b      	add	r3, r5
 800d352:	6023      	str	r3, [r4, #0]
 800d354:	f8d8 3000 	ldr.w	r3, [r8]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d038      	beq.n	800d3ce <_malloc_r+0xf6>
 800d35c:	685a      	ldr	r2, [r3, #4]
 800d35e:	42a2      	cmp	r2, r4
 800d360:	d12b      	bne.n	800d3ba <_malloc_r+0xe2>
 800d362:	2200      	movs	r2, #0
 800d364:	605a      	str	r2, [r3, #4]
 800d366:	e00f      	b.n	800d388 <_malloc_r+0xb0>
 800d368:	6822      	ldr	r2, [r4, #0]
 800d36a:	1b52      	subs	r2, r2, r5
 800d36c:	d41f      	bmi.n	800d3ae <_malloc_r+0xd6>
 800d36e:	2a0b      	cmp	r2, #11
 800d370:	d917      	bls.n	800d3a2 <_malloc_r+0xca>
 800d372:	1961      	adds	r1, r4, r5
 800d374:	42a3      	cmp	r3, r4
 800d376:	6025      	str	r5, [r4, #0]
 800d378:	bf18      	it	ne
 800d37a:	6059      	strne	r1, [r3, #4]
 800d37c:	6863      	ldr	r3, [r4, #4]
 800d37e:	bf08      	it	eq
 800d380:	f8c8 1000 	streq.w	r1, [r8]
 800d384:	5162      	str	r2, [r4, r5]
 800d386:	604b      	str	r3, [r1, #4]
 800d388:	4638      	mov	r0, r7
 800d38a:	f104 060b 	add.w	r6, r4, #11
 800d38e:	f000 f829 	bl	800d3e4 <__malloc_unlock>
 800d392:	f026 0607 	bic.w	r6, r6, #7
 800d396:	1d23      	adds	r3, r4, #4
 800d398:	1af2      	subs	r2, r6, r3
 800d39a:	d0ae      	beq.n	800d2fa <_malloc_r+0x22>
 800d39c:	1b9b      	subs	r3, r3, r6
 800d39e:	50a3      	str	r3, [r4, r2]
 800d3a0:	e7ab      	b.n	800d2fa <_malloc_r+0x22>
 800d3a2:	42a3      	cmp	r3, r4
 800d3a4:	6862      	ldr	r2, [r4, #4]
 800d3a6:	d1dd      	bne.n	800d364 <_malloc_r+0x8c>
 800d3a8:	f8c8 2000 	str.w	r2, [r8]
 800d3ac:	e7ec      	b.n	800d388 <_malloc_r+0xb0>
 800d3ae:	4623      	mov	r3, r4
 800d3b0:	6864      	ldr	r4, [r4, #4]
 800d3b2:	e7ac      	b.n	800d30e <_malloc_r+0x36>
 800d3b4:	4634      	mov	r4, r6
 800d3b6:	6876      	ldr	r6, [r6, #4]
 800d3b8:	e7b4      	b.n	800d324 <_malloc_r+0x4c>
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	e7cc      	b.n	800d358 <_malloc_r+0x80>
 800d3be:	230c      	movs	r3, #12
 800d3c0:	603b      	str	r3, [r7, #0]
 800d3c2:	4638      	mov	r0, r7
 800d3c4:	f000 f80e 	bl	800d3e4 <__malloc_unlock>
 800d3c8:	e797      	b.n	800d2fa <_malloc_r+0x22>
 800d3ca:	6025      	str	r5, [r4, #0]
 800d3cc:	e7dc      	b.n	800d388 <_malloc_r+0xb0>
 800d3ce:	605b      	str	r3, [r3, #4]
 800d3d0:	deff      	udf	#255	; 0xff
 800d3d2:	bf00      	nop
 800d3d4:	20000478 	.word	0x20000478

0800d3d8 <__malloc_lock>:
 800d3d8:	4801      	ldr	r0, [pc, #4]	; (800d3e0 <__malloc_lock+0x8>)
 800d3da:	f001 b8a2 	b.w	800e522 <__retarget_lock_acquire_recursive>
 800d3de:	bf00      	nop
 800d3e0:	200005c0 	.word	0x200005c0

0800d3e4 <__malloc_unlock>:
 800d3e4:	4801      	ldr	r0, [pc, #4]	; (800d3ec <__malloc_unlock+0x8>)
 800d3e6:	f001 b89d 	b.w	800e524 <__retarget_lock_release_recursive>
 800d3ea:	bf00      	nop
 800d3ec:	200005c0 	.word	0x200005c0

0800d3f0 <__cvt>:
 800d3f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f4:	ec55 4b10 	vmov	r4, r5, d0
 800d3f8:	2d00      	cmp	r5, #0
 800d3fa:	460e      	mov	r6, r1
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	462b      	mov	r3, r5
 800d400:	bfbb      	ittet	lt
 800d402:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d406:	461d      	movlt	r5, r3
 800d408:	2300      	movge	r3, #0
 800d40a:	232d      	movlt	r3, #45	; 0x2d
 800d40c:	700b      	strb	r3, [r1, #0]
 800d40e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d410:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d414:	4691      	mov	r9, r2
 800d416:	f023 0820 	bic.w	r8, r3, #32
 800d41a:	bfbc      	itt	lt
 800d41c:	4622      	movlt	r2, r4
 800d41e:	4614      	movlt	r4, r2
 800d420:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d424:	d005      	beq.n	800d432 <__cvt+0x42>
 800d426:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d42a:	d100      	bne.n	800d42e <__cvt+0x3e>
 800d42c:	3601      	adds	r6, #1
 800d42e:	2102      	movs	r1, #2
 800d430:	e000      	b.n	800d434 <__cvt+0x44>
 800d432:	2103      	movs	r1, #3
 800d434:	ab03      	add	r3, sp, #12
 800d436:	9301      	str	r3, [sp, #4]
 800d438:	ab02      	add	r3, sp, #8
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	ec45 4b10 	vmov	d0, r4, r5
 800d440:	4653      	mov	r3, sl
 800d442:	4632      	mov	r2, r6
 800d444:	f001 f90c 	bl	800e660 <_dtoa_r>
 800d448:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d44c:	4607      	mov	r7, r0
 800d44e:	d102      	bne.n	800d456 <__cvt+0x66>
 800d450:	f019 0f01 	tst.w	r9, #1
 800d454:	d022      	beq.n	800d49c <__cvt+0xac>
 800d456:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d45a:	eb07 0906 	add.w	r9, r7, r6
 800d45e:	d110      	bne.n	800d482 <__cvt+0x92>
 800d460:	783b      	ldrb	r3, [r7, #0]
 800d462:	2b30      	cmp	r3, #48	; 0x30
 800d464:	d10a      	bne.n	800d47c <__cvt+0x8c>
 800d466:	2200      	movs	r2, #0
 800d468:	2300      	movs	r3, #0
 800d46a:	4620      	mov	r0, r4
 800d46c:	4629      	mov	r1, r5
 800d46e:	f7f3 fb53 	bl	8000b18 <__aeabi_dcmpeq>
 800d472:	b918      	cbnz	r0, 800d47c <__cvt+0x8c>
 800d474:	f1c6 0601 	rsb	r6, r6, #1
 800d478:	f8ca 6000 	str.w	r6, [sl]
 800d47c:	f8da 3000 	ldr.w	r3, [sl]
 800d480:	4499      	add	r9, r3
 800d482:	2200      	movs	r2, #0
 800d484:	2300      	movs	r3, #0
 800d486:	4620      	mov	r0, r4
 800d488:	4629      	mov	r1, r5
 800d48a:	f7f3 fb45 	bl	8000b18 <__aeabi_dcmpeq>
 800d48e:	b108      	cbz	r0, 800d494 <__cvt+0xa4>
 800d490:	f8cd 900c 	str.w	r9, [sp, #12]
 800d494:	2230      	movs	r2, #48	; 0x30
 800d496:	9b03      	ldr	r3, [sp, #12]
 800d498:	454b      	cmp	r3, r9
 800d49a:	d307      	bcc.n	800d4ac <__cvt+0xbc>
 800d49c:	9b03      	ldr	r3, [sp, #12]
 800d49e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4a0:	1bdb      	subs	r3, r3, r7
 800d4a2:	4638      	mov	r0, r7
 800d4a4:	6013      	str	r3, [r2, #0]
 800d4a6:	b004      	add	sp, #16
 800d4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ac:	1c59      	adds	r1, r3, #1
 800d4ae:	9103      	str	r1, [sp, #12]
 800d4b0:	701a      	strb	r2, [r3, #0]
 800d4b2:	e7f0      	b.n	800d496 <__cvt+0xa6>

0800d4b4 <__exponent>:
 800d4b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2900      	cmp	r1, #0
 800d4ba:	bfb8      	it	lt
 800d4bc:	4249      	neglt	r1, r1
 800d4be:	f803 2b02 	strb.w	r2, [r3], #2
 800d4c2:	bfb4      	ite	lt
 800d4c4:	222d      	movlt	r2, #45	; 0x2d
 800d4c6:	222b      	movge	r2, #43	; 0x2b
 800d4c8:	2909      	cmp	r1, #9
 800d4ca:	7042      	strb	r2, [r0, #1]
 800d4cc:	dd2a      	ble.n	800d524 <__exponent+0x70>
 800d4ce:	f10d 0207 	add.w	r2, sp, #7
 800d4d2:	4617      	mov	r7, r2
 800d4d4:	260a      	movs	r6, #10
 800d4d6:	4694      	mov	ip, r2
 800d4d8:	fb91 f5f6 	sdiv	r5, r1, r6
 800d4dc:	fb06 1415 	mls	r4, r6, r5, r1
 800d4e0:	3430      	adds	r4, #48	; 0x30
 800d4e2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d4e6:	460c      	mov	r4, r1
 800d4e8:	2c63      	cmp	r4, #99	; 0x63
 800d4ea:	f102 32ff 	add.w	r2, r2, #4294967295
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	dcf1      	bgt.n	800d4d6 <__exponent+0x22>
 800d4f2:	3130      	adds	r1, #48	; 0x30
 800d4f4:	f1ac 0402 	sub.w	r4, ip, #2
 800d4f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d4fc:	1c41      	adds	r1, r0, #1
 800d4fe:	4622      	mov	r2, r4
 800d500:	42ba      	cmp	r2, r7
 800d502:	d30a      	bcc.n	800d51a <__exponent+0x66>
 800d504:	f10d 0209 	add.w	r2, sp, #9
 800d508:	eba2 020c 	sub.w	r2, r2, ip
 800d50c:	42bc      	cmp	r4, r7
 800d50e:	bf88      	it	hi
 800d510:	2200      	movhi	r2, #0
 800d512:	4413      	add	r3, r2
 800d514:	1a18      	subs	r0, r3, r0
 800d516:	b003      	add	sp, #12
 800d518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d51a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d51e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d522:	e7ed      	b.n	800d500 <__exponent+0x4c>
 800d524:	2330      	movs	r3, #48	; 0x30
 800d526:	3130      	adds	r1, #48	; 0x30
 800d528:	7083      	strb	r3, [r0, #2]
 800d52a:	70c1      	strb	r1, [r0, #3]
 800d52c:	1d03      	adds	r3, r0, #4
 800d52e:	e7f1      	b.n	800d514 <__exponent+0x60>

0800d530 <_printf_float>:
 800d530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d534:	ed2d 8b02 	vpush	{d8}
 800d538:	b08d      	sub	sp, #52	; 0x34
 800d53a:	460c      	mov	r4, r1
 800d53c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d540:	4616      	mov	r6, r2
 800d542:	461f      	mov	r7, r3
 800d544:	4605      	mov	r5, r0
 800d546:	f000 ff53 	bl	800e3f0 <_localeconv_r>
 800d54a:	f8d0 a000 	ldr.w	sl, [r0]
 800d54e:	4650      	mov	r0, sl
 800d550:	f7f2 feb6 	bl	80002c0 <strlen>
 800d554:	2300      	movs	r3, #0
 800d556:	930a      	str	r3, [sp, #40]	; 0x28
 800d558:	6823      	ldr	r3, [r4, #0]
 800d55a:	9305      	str	r3, [sp, #20]
 800d55c:	f8d8 3000 	ldr.w	r3, [r8]
 800d560:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d564:	3307      	adds	r3, #7
 800d566:	f023 0307 	bic.w	r3, r3, #7
 800d56a:	f103 0208 	add.w	r2, r3, #8
 800d56e:	f8c8 2000 	str.w	r2, [r8]
 800d572:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d576:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d57a:	9307      	str	r3, [sp, #28]
 800d57c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d580:	ee08 0a10 	vmov	s16, r0
 800d584:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d588:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d58c:	4b9e      	ldr	r3, [pc, #632]	; (800d808 <_printf_float+0x2d8>)
 800d58e:	f04f 32ff 	mov.w	r2, #4294967295
 800d592:	f7f3 faf3 	bl	8000b7c <__aeabi_dcmpun>
 800d596:	bb88      	cbnz	r0, 800d5fc <_printf_float+0xcc>
 800d598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d59c:	4b9a      	ldr	r3, [pc, #616]	; (800d808 <_printf_float+0x2d8>)
 800d59e:	f04f 32ff 	mov.w	r2, #4294967295
 800d5a2:	f7f3 facd 	bl	8000b40 <__aeabi_dcmple>
 800d5a6:	bb48      	cbnz	r0, 800d5fc <_printf_float+0xcc>
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	4640      	mov	r0, r8
 800d5ae:	4649      	mov	r1, r9
 800d5b0:	f7f3 fabc 	bl	8000b2c <__aeabi_dcmplt>
 800d5b4:	b110      	cbz	r0, 800d5bc <_printf_float+0x8c>
 800d5b6:	232d      	movs	r3, #45	; 0x2d
 800d5b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5bc:	4a93      	ldr	r2, [pc, #588]	; (800d80c <_printf_float+0x2dc>)
 800d5be:	4b94      	ldr	r3, [pc, #592]	; (800d810 <_printf_float+0x2e0>)
 800d5c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d5c4:	bf94      	ite	ls
 800d5c6:	4690      	movls	r8, r2
 800d5c8:	4698      	movhi	r8, r3
 800d5ca:	2303      	movs	r3, #3
 800d5cc:	6123      	str	r3, [r4, #16]
 800d5ce:	9b05      	ldr	r3, [sp, #20]
 800d5d0:	f023 0304 	bic.w	r3, r3, #4
 800d5d4:	6023      	str	r3, [r4, #0]
 800d5d6:	f04f 0900 	mov.w	r9, #0
 800d5da:	9700      	str	r7, [sp, #0]
 800d5dc:	4633      	mov	r3, r6
 800d5de:	aa0b      	add	r2, sp, #44	; 0x2c
 800d5e0:	4621      	mov	r1, r4
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	f000 f9da 	bl	800d99c <_printf_common>
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	f040 8090 	bne.w	800d70e <_printf_float+0x1de>
 800d5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f2:	b00d      	add	sp, #52	; 0x34
 800d5f4:	ecbd 8b02 	vpop	{d8}
 800d5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fc:	4642      	mov	r2, r8
 800d5fe:	464b      	mov	r3, r9
 800d600:	4640      	mov	r0, r8
 800d602:	4649      	mov	r1, r9
 800d604:	f7f3 faba 	bl	8000b7c <__aeabi_dcmpun>
 800d608:	b140      	cbz	r0, 800d61c <_printf_float+0xec>
 800d60a:	464b      	mov	r3, r9
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	bfbc      	itt	lt
 800d610:	232d      	movlt	r3, #45	; 0x2d
 800d612:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d616:	4a7f      	ldr	r2, [pc, #508]	; (800d814 <_printf_float+0x2e4>)
 800d618:	4b7f      	ldr	r3, [pc, #508]	; (800d818 <_printf_float+0x2e8>)
 800d61a:	e7d1      	b.n	800d5c0 <_printf_float+0x90>
 800d61c:	6863      	ldr	r3, [r4, #4]
 800d61e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d622:	9206      	str	r2, [sp, #24]
 800d624:	1c5a      	adds	r2, r3, #1
 800d626:	d13f      	bne.n	800d6a8 <_printf_float+0x178>
 800d628:	2306      	movs	r3, #6
 800d62a:	6063      	str	r3, [r4, #4]
 800d62c:	9b05      	ldr	r3, [sp, #20]
 800d62e:	6861      	ldr	r1, [r4, #4]
 800d630:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d634:	2300      	movs	r3, #0
 800d636:	9303      	str	r3, [sp, #12]
 800d638:	ab0a      	add	r3, sp, #40	; 0x28
 800d63a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d63e:	ab09      	add	r3, sp, #36	; 0x24
 800d640:	ec49 8b10 	vmov	d0, r8, r9
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	6022      	str	r2, [r4, #0]
 800d648:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d64c:	4628      	mov	r0, r5
 800d64e:	f7ff fecf 	bl	800d3f0 <__cvt>
 800d652:	9b06      	ldr	r3, [sp, #24]
 800d654:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d656:	2b47      	cmp	r3, #71	; 0x47
 800d658:	4680      	mov	r8, r0
 800d65a:	d108      	bne.n	800d66e <_printf_float+0x13e>
 800d65c:	1cc8      	adds	r0, r1, #3
 800d65e:	db02      	blt.n	800d666 <_printf_float+0x136>
 800d660:	6863      	ldr	r3, [r4, #4]
 800d662:	4299      	cmp	r1, r3
 800d664:	dd41      	ble.n	800d6ea <_printf_float+0x1ba>
 800d666:	f1ab 0302 	sub.w	r3, fp, #2
 800d66a:	fa5f fb83 	uxtb.w	fp, r3
 800d66e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d672:	d820      	bhi.n	800d6b6 <_printf_float+0x186>
 800d674:	3901      	subs	r1, #1
 800d676:	465a      	mov	r2, fp
 800d678:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d67c:	9109      	str	r1, [sp, #36]	; 0x24
 800d67e:	f7ff ff19 	bl	800d4b4 <__exponent>
 800d682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d684:	1813      	adds	r3, r2, r0
 800d686:	2a01      	cmp	r2, #1
 800d688:	4681      	mov	r9, r0
 800d68a:	6123      	str	r3, [r4, #16]
 800d68c:	dc02      	bgt.n	800d694 <_printf_float+0x164>
 800d68e:	6822      	ldr	r2, [r4, #0]
 800d690:	07d2      	lsls	r2, r2, #31
 800d692:	d501      	bpl.n	800d698 <_printf_float+0x168>
 800d694:	3301      	adds	r3, #1
 800d696:	6123      	str	r3, [r4, #16]
 800d698:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d09c      	beq.n	800d5da <_printf_float+0xaa>
 800d6a0:	232d      	movs	r3, #45	; 0x2d
 800d6a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6a6:	e798      	b.n	800d5da <_printf_float+0xaa>
 800d6a8:	9a06      	ldr	r2, [sp, #24]
 800d6aa:	2a47      	cmp	r2, #71	; 0x47
 800d6ac:	d1be      	bne.n	800d62c <_printf_float+0xfc>
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1bc      	bne.n	800d62c <_printf_float+0xfc>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e7b9      	b.n	800d62a <_printf_float+0xfa>
 800d6b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d6ba:	d118      	bne.n	800d6ee <_printf_float+0x1be>
 800d6bc:	2900      	cmp	r1, #0
 800d6be:	6863      	ldr	r3, [r4, #4]
 800d6c0:	dd0b      	ble.n	800d6da <_printf_float+0x1aa>
 800d6c2:	6121      	str	r1, [r4, #16]
 800d6c4:	b913      	cbnz	r3, 800d6cc <_printf_float+0x19c>
 800d6c6:	6822      	ldr	r2, [r4, #0]
 800d6c8:	07d0      	lsls	r0, r2, #31
 800d6ca:	d502      	bpl.n	800d6d2 <_printf_float+0x1a2>
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	440b      	add	r3, r1
 800d6d0:	6123      	str	r3, [r4, #16]
 800d6d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800d6d4:	f04f 0900 	mov.w	r9, #0
 800d6d8:	e7de      	b.n	800d698 <_printf_float+0x168>
 800d6da:	b913      	cbnz	r3, 800d6e2 <_printf_float+0x1b2>
 800d6dc:	6822      	ldr	r2, [r4, #0]
 800d6de:	07d2      	lsls	r2, r2, #31
 800d6e0:	d501      	bpl.n	800d6e6 <_printf_float+0x1b6>
 800d6e2:	3302      	adds	r3, #2
 800d6e4:	e7f4      	b.n	800d6d0 <_printf_float+0x1a0>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e7f2      	b.n	800d6d0 <_printf_float+0x1a0>
 800d6ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6f0:	4299      	cmp	r1, r3
 800d6f2:	db05      	blt.n	800d700 <_printf_float+0x1d0>
 800d6f4:	6823      	ldr	r3, [r4, #0]
 800d6f6:	6121      	str	r1, [r4, #16]
 800d6f8:	07d8      	lsls	r0, r3, #31
 800d6fa:	d5ea      	bpl.n	800d6d2 <_printf_float+0x1a2>
 800d6fc:	1c4b      	adds	r3, r1, #1
 800d6fe:	e7e7      	b.n	800d6d0 <_printf_float+0x1a0>
 800d700:	2900      	cmp	r1, #0
 800d702:	bfd4      	ite	le
 800d704:	f1c1 0202 	rsble	r2, r1, #2
 800d708:	2201      	movgt	r2, #1
 800d70a:	4413      	add	r3, r2
 800d70c:	e7e0      	b.n	800d6d0 <_printf_float+0x1a0>
 800d70e:	6823      	ldr	r3, [r4, #0]
 800d710:	055a      	lsls	r2, r3, #21
 800d712:	d407      	bmi.n	800d724 <_printf_float+0x1f4>
 800d714:	6923      	ldr	r3, [r4, #16]
 800d716:	4642      	mov	r2, r8
 800d718:	4631      	mov	r1, r6
 800d71a:	4628      	mov	r0, r5
 800d71c:	47b8      	blx	r7
 800d71e:	3001      	adds	r0, #1
 800d720:	d12c      	bne.n	800d77c <_printf_float+0x24c>
 800d722:	e764      	b.n	800d5ee <_printf_float+0xbe>
 800d724:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d728:	f240 80e0 	bls.w	800d8ec <_printf_float+0x3bc>
 800d72c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d730:	2200      	movs	r2, #0
 800d732:	2300      	movs	r3, #0
 800d734:	f7f3 f9f0 	bl	8000b18 <__aeabi_dcmpeq>
 800d738:	2800      	cmp	r0, #0
 800d73a:	d034      	beq.n	800d7a6 <_printf_float+0x276>
 800d73c:	4a37      	ldr	r2, [pc, #220]	; (800d81c <_printf_float+0x2ec>)
 800d73e:	2301      	movs	r3, #1
 800d740:	4631      	mov	r1, r6
 800d742:	4628      	mov	r0, r5
 800d744:	47b8      	blx	r7
 800d746:	3001      	adds	r0, #1
 800d748:	f43f af51 	beq.w	800d5ee <_printf_float+0xbe>
 800d74c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d750:	429a      	cmp	r2, r3
 800d752:	db02      	blt.n	800d75a <_printf_float+0x22a>
 800d754:	6823      	ldr	r3, [r4, #0]
 800d756:	07d8      	lsls	r0, r3, #31
 800d758:	d510      	bpl.n	800d77c <_printf_float+0x24c>
 800d75a:	ee18 3a10 	vmov	r3, s16
 800d75e:	4652      	mov	r2, sl
 800d760:	4631      	mov	r1, r6
 800d762:	4628      	mov	r0, r5
 800d764:	47b8      	blx	r7
 800d766:	3001      	adds	r0, #1
 800d768:	f43f af41 	beq.w	800d5ee <_printf_float+0xbe>
 800d76c:	f04f 0800 	mov.w	r8, #0
 800d770:	f104 091a 	add.w	r9, r4, #26
 800d774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d776:	3b01      	subs	r3, #1
 800d778:	4543      	cmp	r3, r8
 800d77a:	dc09      	bgt.n	800d790 <_printf_float+0x260>
 800d77c:	6823      	ldr	r3, [r4, #0]
 800d77e:	079b      	lsls	r3, r3, #30
 800d780:	f100 8107 	bmi.w	800d992 <_printf_float+0x462>
 800d784:	68e0      	ldr	r0, [r4, #12]
 800d786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d788:	4298      	cmp	r0, r3
 800d78a:	bfb8      	it	lt
 800d78c:	4618      	movlt	r0, r3
 800d78e:	e730      	b.n	800d5f2 <_printf_float+0xc2>
 800d790:	2301      	movs	r3, #1
 800d792:	464a      	mov	r2, r9
 800d794:	4631      	mov	r1, r6
 800d796:	4628      	mov	r0, r5
 800d798:	47b8      	blx	r7
 800d79a:	3001      	adds	r0, #1
 800d79c:	f43f af27 	beq.w	800d5ee <_printf_float+0xbe>
 800d7a0:	f108 0801 	add.w	r8, r8, #1
 800d7a4:	e7e6      	b.n	800d774 <_printf_float+0x244>
 800d7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	dc39      	bgt.n	800d820 <_printf_float+0x2f0>
 800d7ac:	4a1b      	ldr	r2, [pc, #108]	; (800d81c <_printf_float+0x2ec>)
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	4631      	mov	r1, r6
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	47b8      	blx	r7
 800d7b6:	3001      	adds	r0, #1
 800d7b8:	f43f af19 	beq.w	800d5ee <_printf_float+0xbe>
 800d7bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	d102      	bne.n	800d7ca <_printf_float+0x29a>
 800d7c4:	6823      	ldr	r3, [r4, #0]
 800d7c6:	07d9      	lsls	r1, r3, #31
 800d7c8:	d5d8      	bpl.n	800d77c <_printf_float+0x24c>
 800d7ca:	ee18 3a10 	vmov	r3, s16
 800d7ce:	4652      	mov	r2, sl
 800d7d0:	4631      	mov	r1, r6
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	47b8      	blx	r7
 800d7d6:	3001      	adds	r0, #1
 800d7d8:	f43f af09 	beq.w	800d5ee <_printf_float+0xbe>
 800d7dc:	f04f 0900 	mov.w	r9, #0
 800d7e0:	f104 0a1a 	add.w	sl, r4, #26
 800d7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7e6:	425b      	negs	r3, r3
 800d7e8:	454b      	cmp	r3, r9
 800d7ea:	dc01      	bgt.n	800d7f0 <_printf_float+0x2c0>
 800d7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7ee:	e792      	b.n	800d716 <_printf_float+0x1e6>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	4652      	mov	r2, sl
 800d7f4:	4631      	mov	r1, r6
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	47b8      	blx	r7
 800d7fa:	3001      	adds	r0, #1
 800d7fc:	f43f aef7 	beq.w	800d5ee <_printf_float+0xbe>
 800d800:	f109 0901 	add.w	r9, r9, #1
 800d804:	e7ee      	b.n	800d7e4 <_printf_float+0x2b4>
 800d806:	bf00      	nop
 800d808:	7fefffff 	.word	0x7fefffff
 800d80c:	08012b2c 	.word	0x08012b2c
 800d810:	08012b30 	.word	0x08012b30
 800d814:	08012b34 	.word	0x08012b34
 800d818:	08012b38 	.word	0x08012b38
 800d81c:	08012b3c 	.word	0x08012b3c
 800d820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d824:	429a      	cmp	r2, r3
 800d826:	bfa8      	it	ge
 800d828:	461a      	movge	r2, r3
 800d82a:	2a00      	cmp	r2, #0
 800d82c:	4691      	mov	r9, r2
 800d82e:	dc37      	bgt.n	800d8a0 <_printf_float+0x370>
 800d830:	f04f 0b00 	mov.w	fp, #0
 800d834:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d838:	f104 021a 	add.w	r2, r4, #26
 800d83c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d83e:	9305      	str	r3, [sp, #20]
 800d840:	eba3 0309 	sub.w	r3, r3, r9
 800d844:	455b      	cmp	r3, fp
 800d846:	dc33      	bgt.n	800d8b0 <_printf_float+0x380>
 800d848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d84c:	429a      	cmp	r2, r3
 800d84e:	db3b      	blt.n	800d8c8 <_printf_float+0x398>
 800d850:	6823      	ldr	r3, [r4, #0]
 800d852:	07da      	lsls	r2, r3, #31
 800d854:	d438      	bmi.n	800d8c8 <_printf_float+0x398>
 800d856:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d85a:	eba2 0903 	sub.w	r9, r2, r3
 800d85e:	9b05      	ldr	r3, [sp, #20]
 800d860:	1ad2      	subs	r2, r2, r3
 800d862:	4591      	cmp	r9, r2
 800d864:	bfa8      	it	ge
 800d866:	4691      	movge	r9, r2
 800d868:	f1b9 0f00 	cmp.w	r9, #0
 800d86c:	dc35      	bgt.n	800d8da <_printf_float+0x3aa>
 800d86e:	f04f 0800 	mov.w	r8, #0
 800d872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d876:	f104 0a1a 	add.w	sl, r4, #26
 800d87a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d87e:	1a9b      	subs	r3, r3, r2
 800d880:	eba3 0309 	sub.w	r3, r3, r9
 800d884:	4543      	cmp	r3, r8
 800d886:	f77f af79 	ble.w	800d77c <_printf_float+0x24c>
 800d88a:	2301      	movs	r3, #1
 800d88c:	4652      	mov	r2, sl
 800d88e:	4631      	mov	r1, r6
 800d890:	4628      	mov	r0, r5
 800d892:	47b8      	blx	r7
 800d894:	3001      	adds	r0, #1
 800d896:	f43f aeaa 	beq.w	800d5ee <_printf_float+0xbe>
 800d89a:	f108 0801 	add.w	r8, r8, #1
 800d89e:	e7ec      	b.n	800d87a <_printf_float+0x34a>
 800d8a0:	4613      	mov	r3, r2
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	4642      	mov	r2, r8
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	47b8      	blx	r7
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	d1c0      	bne.n	800d830 <_printf_float+0x300>
 800d8ae:	e69e      	b.n	800d5ee <_printf_float+0xbe>
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	4631      	mov	r1, r6
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	9205      	str	r2, [sp, #20]
 800d8b8:	47b8      	blx	r7
 800d8ba:	3001      	adds	r0, #1
 800d8bc:	f43f ae97 	beq.w	800d5ee <_printf_float+0xbe>
 800d8c0:	9a05      	ldr	r2, [sp, #20]
 800d8c2:	f10b 0b01 	add.w	fp, fp, #1
 800d8c6:	e7b9      	b.n	800d83c <_printf_float+0x30c>
 800d8c8:	ee18 3a10 	vmov	r3, s16
 800d8cc:	4652      	mov	r2, sl
 800d8ce:	4631      	mov	r1, r6
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	47b8      	blx	r7
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d1be      	bne.n	800d856 <_printf_float+0x326>
 800d8d8:	e689      	b.n	800d5ee <_printf_float+0xbe>
 800d8da:	9a05      	ldr	r2, [sp, #20]
 800d8dc:	464b      	mov	r3, r9
 800d8de:	4442      	add	r2, r8
 800d8e0:	4631      	mov	r1, r6
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	47b8      	blx	r7
 800d8e6:	3001      	adds	r0, #1
 800d8e8:	d1c1      	bne.n	800d86e <_printf_float+0x33e>
 800d8ea:	e680      	b.n	800d5ee <_printf_float+0xbe>
 800d8ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8ee:	2a01      	cmp	r2, #1
 800d8f0:	dc01      	bgt.n	800d8f6 <_printf_float+0x3c6>
 800d8f2:	07db      	lsls	r3, r3, #31
 800d8f4:	d53a      	bpl.n	800d96c <_printf_float+0x43c>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	4642      	mov	r2, r8
 800d8fa:	4631      	mov	r1, r6
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	47b8      	blx	r7
 800d900:	3001      	adds	r0, #1
 800d902:	f43f ae74 	beq.w	800d5ee <_printf_float+0xbe>
 800d906:	ee18 3a10 	vmov	r3, s16
 800d90a:	4652      	mov	r2, sl
 800d90c:	4631      	mov	r1, r6
 800d90e:	4628      	mov	r0, r5
 800d910:	47b8      	blx	r7
 800d912:	3001      	adds	r0, #1
 800d914:	f43f ae6b 	beq.w	800d5ee <_printf_float+0xbe>
 800d918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d91c:	2200      	movs	r2, #0
 800d91e:	2300      	movs	r3, #0
 800d920:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d924:	f7f3 f8f8 	bl	8000b18 <__aeabi_dcmpeq>
 800d928:	b9d8      	cbnz	r0, 800d962 <_printf_float+0x432>
 800d92a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d92e:	f108 0201 	add.w	r2, r8, #1
 800d932:	4631      	mov	r1, r6
 800d934:	4628      	mov	r0, r5
 800d936:	47b8      	blx	r7
 800d938:	3001      	adds	r0, #1
 800d93a:	d10e      	bne.n	800d95a <_printf_float+0x42a>
 800d93c:	e657      	b.n	800d5ee <_printf_float+0xbe>
 800d93e:	2301      	movs	r3, #1
 800d940:	4652      	mov	r2, sl
 800d942:	4631      	mov	r1, r6
 800d944:	4628      	mov	r0, r5
 800d946:	47b8      	blx	r7
 800d948:	3001      	adds	r0, #1
 800d94a:	f43f ae50 	beq.w	800d5ee <_printf_float+0xbe>
 800d94e:	f108 0801 	add.w	r8, r8, #1
 800d952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d954:	3b01      	subs	r3, #1
 800d956:	4543      	cmp	r3, r8
 800d958:	dcf1      	bgt.n	800d93e <_printf_float+0x40e>
 800d95a:	464b      	mov	r3, r9
 800d95c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d960:	e6da      	b.n	800d718 <_printf_float+0x1e8>
 800d962:	f04f 0800 	mov.w	r8, #0
 800d966:	f104 0a1a 	add.w	sl, r4, #26
 800d96a:	e7f2      	b.n	800d952 <_printf_float+0x422>
 800d96c:	2301      	movs	r3, #1
 800d96e:	4642      	mov	r2, r8
 800d970:	e7df      	b.n	800d932 <_printf_float+0x402>
 800d972:	2301      	movs	r3, #1
 800d974:	464a      	mov	r2, r9
 800d976:	4631      	mov	r1, r6
 800d978:	4628      	mov	r0, r5
 800d97a:	47b8      	blx	r7
 800d97c:	3001      	adds	r0, #1
 800d97e:	f43f ae36 	beq.w	800d5ee <_printf_float+0xbe>
 800d982:	f108 0801 	add.w	r8, r8, #1
 800d986:	68e3      	ldr	r3, [r4, #12]
 800d988:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d98a:	1a5b      	subs	r3, r3, r1
 800d98c:	4543      	cmp	r3, r8
 800d98e:	dcf0      	bgt.n	800d972 <_printf_float+0x442>
 800d990:	e6f8      	b.n	800d784 <_printf_float+0x254>
 800d992:	f04f 0800 	mov.w	r8, #0
 800d996:	f104 0919 	add.w	r9, r4, #25
 800d99a:	e7f4      	b.n	800d986 <_printf_float+0x456>

0800d99c <_printf_common>:
 800d99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9a0:	4616      	mov	r6, r2
 800d9a2:	4699      	mov	r9, r3
 800d9a4:	688a      	ldr	r2, [r1, #8]
 800d9a6:	690b      	ldr	r3, [r1, #16]
 800d9a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	bfb8      	it	lt
 800d9b0:	4613      	movlt	r3, r2
 800d9b2:	6033      	str	r3, [r6, #0]
 800d9b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9b8:	4607      	mov	r7, r0
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	b10a      	cbz	r2, 800d9c2 <_printf_common+0x26>
 800d9be:	3301      	adds	r3, #1
 800d9c0:	6033      	str	r3, [r6, #0]
 800d9c2:	6823      	ldr	r3, [r4, #0]
 800d9c4:	0699      	lsls	r1, r3, #26
 800d9c6:	bf42      	ittt	mi
 800d9c8:	6833      	ldrmi	r3, [r6, #0]
 800d9ca:	3302      	addmi	r3, #2
 800d9cc:	6033      	strmi	r3, [r6, #0]
 800d9ce:	6825      	ldr	r5, [r4, #0]
 800d9d0:	f015 0506 	ands.w	r5, r5, #6
 800d9d4:	d106      	bne.n	800d9e4 <_printf_common+0x48>
 800d9d6:	f104 0a19 	add.w	sl, r4, #25
 800d9da:	68e3      	ldr	r3, [r4, #12]
 800d9dc:	6832      	ldr	r2, [r6, #0]
 800d9de:	1a9b      	subs	r3, r3, r2
 800d9e0:	42ab      	cmp	r3, r5
 800d9e2:	dc26      	bgt.n	800da32 <_printf_common+0x96>
 800d9e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d9e8:	1e13      	subs	r3, r2, #0
 800d9ea:	6822      	ldr	r2, [r4, #0]
 800d9ec:	bf18      	it	ne
 800d9ee:	2301      	movne	r3, #1
 800d9f0:	0692      	lsls	r2, r2, #26
 800d9f2:	d42b      	bmi.n	800da4c <_printf_common+0xb0>
 800d9f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9f8:	4649      	mov	r1, r9
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	47c0      	blx	r8
 800d9fe:	3001      	adds	r0, #1
 800da00:	d01e      	beq.n	800da40 <_printf_common+0xa4>
 800da02:	6823      	ldr	r3, [r4, #0]
 800da04:	6922      	ldr	r2, [r4, #16]
 800da06:	f003 0306 	and.w	r3, r3, #6
 800da0a:	2b04      	cmp	r3, #4
 800da0c:	bf02      	ittt	eq
 800da0e:	68e5      	ldreq	r5, [r4, #12]
 800da10:	6833      	ldreq	r3, [r6, #0]
 800da12:	1aed      	subeq	r5, r5, r3
 800da14:	68a3      	ldr	r3, [r4, #8]
 800da16:	bf0c      	ite	eq
 800da18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da1c:	2500      	movne	r5, #0
 800da1e:	4293      	cmp	r3, r2
 800da20:	bfc4      	itt	gt
 800da22:	1a9b      	subgt	r3, r3, r2
 800da24:	18ed      	addgt	r5, r5, r3
 800da26:	2600      	movs	r6, #0
 800da28:	341a      	adds	r4, #26
 800da2a:	42b5      	cmp	r5, r6
 800da2c:	d11a      	bne.n	800da64 <_printf_common+0xc8>
 800da2e:	2000      	movs	r0, #0
 800da30:	e008      	b.n	800da44 <_printf_common+0xa8>
 800da32:	2301      	movs	r3, #1
 800da34:	4652      	mov	r2, sl
 800da36:	4649      	mov	r1, r9
 800da38:	4638      	mov	r0, r7
 800da3a:	47c0      	blx	r8
 800da3c:	3001      	adds	r0, #1
 800da3e:	d103      	bne.n	800da48 <_printf_common+0xac>
 800da40:	f04f 30ff 	mov.w	r0, #4294967295
 800da44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da48:	3501      	adds	r5, #1
 800da4a:	e7c6      	b.n	800d9da <_printf_common+0x3e>
 800da4c:	18e1      	adds	r1, r4, r3
 800da4e:	1c5a      	adds	r2, r3, #1
 800da50:	2030      	movs	r0, #48	; 0x30
 800da52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da56:	4422      	add	r2, r4
 800da58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da60:	3302      	adds	r3, #2
 800da62:	e7c7      	b.n	800d9f4 <_printf_common+0x58>
 800da64:	2301      	movs	r3, #1
 800da66:	4622      	mov	r2, r4
 800da68:	4649      	mov	r1, r9
 800da6a:	4638      	mov	r0, r7
 800da6c:	47c0      	blx	r8
 800da6e:	3001      	adds	r0, #1
 800da70:	d0e6      	beq.n	800da40 <_printf_common+0xa4>
 800da72:	3601      	adds	r6, #1
 800da74:	e7d9      	b.n	800da2a <_printf_common+0x8e>
	...

0800da78 <_printf_i>:
 800da78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da7c:	7e0f      	ldrb	r7, [r1, #24]
 800da7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da80:	2f78      	cmp	r7, #120	; 0x78
 800da82:	4691      	mov	r9, r2
 800da84:	4680      	mov	r8, r0
 800da86:	460c      	mov	r4, r1
 800da88:	469a      	mov	sl, r3
 800da8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da8e:	d807      	bhi.n	800daa0 <_printf_i+0x28>
 800da90:	2f62      	cmp	r7, #98	; 0x62
 800da92:	d80a      	bhi.n	800daaa <_printf_i+0x32>
 800da94:	2f00      	cmp	r7, #0
 800da96:	f000 80d4 	beq.w	800dc42 <_printf_i+0x1ca>
 800da9a:	2f58      	cmp	r7, #88	; 0x58
 800da9c:	f000 80c0 	beq.w	800dc20 <_printf_i+0x1a8>
 800daa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800daa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800daa8:	e03a      	b.n	800db20 <_printf_i+0xa8>
 800daaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800daae:	2b15      	cmp	r3, #21
 800dab0:	d8f6      	bhi.n	800daa0 <_printf_i+0x28>
 800dab2:	a101      	add	r1, pc, #4	; (adr r1, 800dab8 <_printf_i+0x40>)
 800dab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dab8:	0800db11 	.word	0x0800db11
 800dabc:	0800db25 	.word	0x0800db25
 800dac0:	0800daa1 	.word	0x0800daa1
 800dac4:	0800daa1 	.word	0x0800daa1
 800dac8:	0800daa1 	.word	0x0800daa1
 800dacc:	0800daa1 	.word	0x0800daa1
 800dad0:	0800db25 	.word	0x0800db25
 800dad4:	0800daa1 	.word	0x0800daa1
 800dad8:	0800daa1 	.word	0x0800daa1
 800dadc:	0800daa1 	.word	0x0800daa1
 800dae0:	0800daa1 	.word	0x0800daa1
 800dae4:	0800dc29 	.word	0x0800dc29
 800dae8:	0800db51 	.word	0x0800db51
 800daec:	0800dbe3 	.word	0x0800dbe3
 800daf0:	0800daa1 	.word	0x0800daa1
 800daf4:	0800daa1 	.word	0x0800daa1
 800daf8:	0800dc4b 	.word	0x0800dc4b
 800dafc:	0800daa1 	.word	0x0800daa1
 800db00:	0800db51 	.word	0x0800db51
 800db04:	0800daa1 	.word	0x0800daa1
 800db08:	0800daa1 	.word	0x0800daa1
 800db0c:	0800dbeb 	.word	0x0800dbeb
 800db10:	682b      	ldr	r3, [r5, #0]
 800db12:	1d1a      	adds	r2, r3, #4
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	602a      	str	r2, [r5, #0]
 800db18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db20:	2301      	movs	r3, #1
 800db22:	e09f      	b.n	800dc64 <_printf_i+0x1ec>
 800db24:	6820      	ldr	r0, [r4, #0]
 800db26:	682b      	ldr	r3, [r5, #0]
 800db28:	0607      	lsls	r7, r0, #24
 800db2a:	f103 0104 	add.w	r1, r3, #4
 800db2e:	6029      	str	r1, [r5, #0]
 800db30:	d501      	bpl.n	800db36 <_printf_i+0xbe>
 800db32:	681e      	ldr	r6, [r3, #0]
 800db34:	e003      	b.n	800db3e <_printf_i+0xc6>
 800db36:	0646      	lsls	r6, r0, #25
 800db38:	d5fb      	bpl.n	800db32 <_printf_i+0xba>
 800db3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800db3e:	2e00      	cmp	r6, #0
 800db40:	da03      	bge.n	800db4a <_printf_i+0xd2>
 800db42:	232d      	movs	r3, #45	; 0x2d
 800db44:	4276      	negs	r6, r6
 800db46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db4a:	485a      	ldr	r0, [pc, #360]	; (800dcb4 <_printf_i+0x23c>)
 800db4c:	230a      	movs	r3, #10
 800db4e:	e012      	b.n	800db76 <_printf_i+0xfe>
 800db50:	682b      	ldr	r3, [r5, #0]
 800db52:	6820      	ldr	r0, [r4, #0]
 800db54:	1d19      	adds	r1, r3, #4
 800db56:	6029      	str	r1, [r5, #0]
 800db58:	0605      	lsls	r5, r0, #24
 800db5a:	d501      	bpl.n	800db60 <_printf_i+0xe8>
 800db5c:	681e      	ldr	r6, [r3, #0]
 800db5e:	e002      	b.n	800db66 <_printf_i+0xee>
 800db60:	0641      	lsls	r1, r0, #25
 800db62:	d5fb      	bpl.n	800db5c <_printf_i+0xe4>
 800db64:	881e      	ldrh	r6, [r3, #0]
 800db66:	4853      	ldr	r0, [pc, #332]	; (800dcb4 <_printf_i+0x23c>)
 800db68:	2f6f      	cmp	r7, #111	; 0x6f
 800db6a:	bf0c      	ite	eq
 800db6c:	2308      	moveq	r3, #8
 800db6e:	230a      	movne	r3, #10
 800db70:	2100      	movs	r1, #0
 800db72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db76:	6865      	ldr	r5, [r4, #4]
 800db78:	60a5      	str	r5, [r4, #8]
 800db7a:	2d00      	cmp	r5, #0
 800db7c:	bfa2      	ittt	ge
 800db7e:	6821      	ldrge	r1, [r4, #0]
 800db80:	f021 0104 	bicge.w	r1, r1, #4
 800db84:	6021      	strge	r1, [r4, #0]
 800db86:	b90e      	cbnz	r6, 800db8c <_printf_i+0x114>
 800db88:	2d00      	cmp	r5, #0
 800db8a:	d04b      	beq.n	800dc24 <_printf_i+0x1ac>
 800db8c:	4615      	mov	r5, r2
 800db8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800db92:	fb03 6711 	mls	r7, r3, r1, r6
 800db96:	5dc7      	ldrb	r7, [r0, r7]
 800db98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db9c:	4637      	mov	r7, r6
 800db9e:	42bb      	cmp	r3, r7
 800dba0:	460e      	mov	r6, r1
 800dba2:	d9f4      	bls.n	800db8e <_printf_i+0x116>
 800dba4:	2b08      	cmp	r3, #8
 800dba6:	d10b      	bne.n	800dbc0 <_printf_i+0x148>
 800dba8:	6823      	ldr	r3, [r4, #0]
 800dbaa:	07de      	lsls	r6, r3, #31
 800dbac:	d508      	bpl.n	800dbc0 <_printf_i+0x148>
 800dbae:	6923      	ldr	r3, [r4, #16]
 800dbb0:	6861      	ldr	r1, [r4, #4]
 800dbb2:	4299      	cmp	r1, r3
 800dbb4:	bfde      	ittt	le
 800dbb6:	2330      	movle	r3, #48	; 0x30
 800dbb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dbbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dbc0:	1b52      	subs	r2, r2, r5
 800dbc2:	6122      	str	r2, [r4, #16]
 800dbc4:	f8cd a000 	str.w	sl, [sp]
 800dbc8:	464b      	mov	r3, r9
 800dbca:	aa03      	add	r2, sp, #12
 800dbcc:	4621      	mov	r1, r4
 800dbce:	4640      	mov	r0, r8
 800dbd0:	f7ff fee4 	bl	800d99c <_printf_common>
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	d14a      	bne.n	800dc6e <_printf_i+0x1f6>
 800dbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbdc:	b004      	add	sp, #16
 800dbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	f043 0320 	orr.w	r3, r3, #32
 800dbe8:	6023      	str	r3, [r4, #0]
 800dbea:	4833      	ldr	r0, [pc, #204]	; (800dcb8 <_printf_i+0x240>)
 800dbec:	2778      	movs	r7, #120	; 0x78
 800dbee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dbf2:	6823      	ldr	r3, [r4, #0]
 800dbf4:	6829      	ldr	r1, [r5, #0]
 800dbf6:	061f      	lsls	r7, r3, #24
 800dbf8:	f851 6b04 	ldr.w	r6, [r1], #4
 800dbfc:	d402      	bmi.n	800dc04 <_printf_i+0x18c>
 800dbfe:	065f      	lsls	r7, r3, #25
 800dc00:	bf48      	it	mi
 800dc02:	b2b6      	uxthmi	r6, r6
 800dc04:	07df      	lsls	r7, r3, #31
 800dc06:	bf48      	it	mi
 800dc08:	f043 0320 	orrmi.w	r3, r3, #32
 800dc0c:	6029      	str	r1, [r5, #0]
 800dc0e:	bf48      	it	mi
 800dc10:	6023      	strmi	r3, [r4, #0]
 800dc12:	b91e      	cbnz	r6, 800dc1c <_printf_i+0x1a4>
 800dc14:	6823      	ldr	r3, [r4, #0]
 800dc16:	f023 0320 	bic.w	r3, r3, #32
 800dc1a:	6023      	str	r3, [r4, #0]
 800dc1c:	2310      	movs	r3, #16
 800dc1e:	e7a7      	b.n	800db70 <_printf_i+0xf8>
 800dc20:	4824      	ldr	r0, [pc, #144]	; (800dcb4 <_printf_i+0x23c>)
 800dc22:	e7e4      	b.n	800dbee <_printf_i+0x176>
 800dc24:	4615      	mov	r5, r2
 800dc26:	e7bd      	b.n	800dba4 <_printf_i+0x12c>
 800dc28:	682b      	ldr	r3, [r5, #0]
 800dc2a:	6826      	ldr	r6, [r4, #0]
 800dc2c:	6961      	ldr	r1, [r4, #20]
 800dc2e:	1d18      	adds	r0, r3, #4
 800dc30:	6028      	str	r0, [r5, #0]
 800dc32:	0635      	lsls	r5, r6, #24
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	d501      	bpl.n	800dc3c <_printf_i+0x1c4>
 800dc38:	6019      	str	r1, [r3, #0]
 800dc3a:	e002      	b.n	800dc42 <_printf_i+0x1ca>
 800dc3c:	0670      	lsls	r0, r6, #25
 800dc3e:	d5fb      	bpl.n	800dc38 <_printf_i+0x1c0>
 800dc40:	8019      	strh	r1, [r3, #0]
 800dc42:	2300      	movs	r3, #0
 800dc44:	6123      	str	r3, [r4, #16]
 800dc46:	4615      	mov	r5, r2
 800dc48:	e7bc      	b.n	800dbc4 <_printf_i+0x14c>
 800dc4a:	682b      	ldr	r3, [r5, #0]
 800dc4c:	1d1a      	adds	r2, r3, #4
 800dc4e:	602a      	str	r2, [r5, #0]
 800dc50:	681d      	ldr	r5, [r3, #0]
 800dc52:	6862      	ldr	r2, [r4, #4]
 800dc54:	2100      	movs	r1, #0
 800dc56:	4628      	mov	r0, r5
 800dc58:	f7f2 fae2 	bl	8000220 <memchr>
 800dc5c:	b108      	cbz	r0, 800dc62 <_printf_i+0x1ea>
 800dc5e:	1b40      	subs	r0, r0, r5
 800dc60:	6060      	str	r0, [r4, #4]
 800dc62:	6863      	ldr	r3, [r4, #4]
 800dc64:	6123      	str	r3, [r4, #16]
 800dc66:	2300      	movs	r3, #0
 800dc68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc6c:	e7aa      	b.n	800dbc4 <_printf_i+0x14c>
 800dc6e:	6923      	ldr	r3, [r4, #16]
 800dc70:	462a      	mov	r2, r5
 800dc72:	4649      	mov	r1, r9
 800dc74:	4640      	mov	r0, r8
 800dc76:	47d0      	blx	sl
 800dc78:	3001      	adds	r0, #1
 800dc7a:	d0ad      	beq.n	800dbd8 <_printf_i+0x160>
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	079b      	lsls	r3, r3, #30
 800dc80:	d413      	bmi.n	800dcaa <_printf_i+0x232>
 800dc82:	68e0      	ldr	r0, [r4, #12]
 800dc84:	9b03      	ldr	r3, [sp, #12]
 800dc86:	4298      	cmp	r0, r3
 800dc88:	bfb8      	it	lt
 800dc8a:	4618      	movlt	r0, r3
 800dc8c:	e7a6      	b.n	800dbdc <_printf_i+0x164>
 800dc8e:	2301      	movs	r3, #1
 800dc90:	4632      	mov	r2, r6
 800dc92:	4649      	mov	r1, r9
 800dc94:	4640      	mov	r0, r8
 800dc96:	47d0      	blx	sl
 800dc98:	3001      	adds	r0, #1
 800dc9a:	d09d      	beq.n	800dbd8 <_printf_i+0x160>
 800dc9c:	3501      	adds	r5, #1
 800dc9e:	68e3      	ldr	r3, [r4, #12]
 800dca0:	9903      	ldr	r1, [sp, #12]
 800dca2:	1a5b      	subs	r3, r3, r1
 800dca4:	42ab      	cmp	r3, r5
 800dca6:	dcf2      	bgt.n	800dc8e <_printf_i+0x216>
 800dca8:	e7eb      	b.n	800dc82 <_printf_i+0x20a>
 800dcaa:	2500      	movs	r5, #0
 800dcac:	f104 0619 	add.w	r6, r4, #25
 800dcb0:	e7f5      	b.n	800dc9e <_printf_i+0x226>
 800dcb2:	bf00      	nop
 800dcb4:	08012b3e 	.word	0x08012b3e
 800dcb8:	08012b4f 	.word	0x08012b4f

0800dcbc <_scanf_float>:
 800dcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc0:	b087      	sub	sp, #28
 800dcc2:	4617      	mov	r7, r2
 800dcc4:	9303      	str	r3, [sp, #12]
 800dcc6:	688b      	ldr	r3, [r1, #8]
 800dcc8:	1e5a      	subs	r2, r3, #1
 800dcca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dcce:	bf83      	ittte	hi
 800dcd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dcd4:	195b      	addhi	r3, r3, r5
 800dcd6:	9302      	strhi	r3, [sp, #8]
 800dcd8:	2300      	movls	r3, #0
 800dcda:	bf86      	itte	hi
 800dcdc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dce0:	608b      	strhi	r3, [r1, #8]
 800dce2:	9302      	strls	r3, [sp, #8]
 800dce4:	680b      	ldr	r3, [r1, #0]
 800dce6:	468b      	mov	fp, r1
 800dce8:	2500      	movs	r5, #0
 800dcea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800dcee:	f84b 3b1c 	str.w	r3, [fp], #28
 800dcf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dcf6:	4680      	mov	r8, r0
 800dcf8:	460c      	mov	r4, r1
 800dcfa:	465e      	mov	r6, fp
 800dcfc:	46aa      	mov	sl, r5
 800dcfe:	46a9      	mov	r9, r5
 800dd00:	9501      	str	r5, [sp, #4]
 800dd02:	68a2      	ldr	r2, [r4, #8]
 800dd04:	b152      	cbz	r2, 800dd1c <_scanf_float+0x60>
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	2b4e      	cmp	r3, #78	; 0x4e
 800dd0c:	d864      	bhi.n	800ddd8 <_scanf_float+0x11c>
 800dd0e:	2b40      	cmp	r3, #64	; 0x40
 800dd10:	d83c      	bhi.n	800dd8c <_scanf_float+0xd0>
 800dd12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800dd16:	b2c8      	uxtb	r0, r1
 800dd18:	280e      	cmp	r0, #14
 800dd1a:	d93a      	bls.n	800dd92 <_scanf_float+0xd6>
 800dd1c:	f1b9 0f00 	cmp.w	r9, #0
 800dd20:	d003      	beq.n	800dd2a <_scanf_float+0x6e>
 800dd22:	6823      	ldr	r3, [r4, #0]
 800dd24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd28:	6023      	str	r3, [r4, #0]
 800dd2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd2e:	f1ba 0f01 	cmp.w	sl, #1
 800dd32:	f200 8113 	bhi.w	800df5c <_scanf_float+0x2a0>
 800dd36:	455e      	cmp	r6, fp
 800dd38:	f200 8105 	bhi.w	800df46 <_scanf_float+0x28a>
 800dd3c:	2501      	movs	r5, #1
 800dd3e:	4628      	mov	r0, r5
 800dd40:	b007      	add	sp, #28
 800dd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dd4a:	2a0d      	cmp	r2, #13
 800dd4c:	d8e6      	bhi.n	800dd1c <_scanf_float+0x60>
 800dd4e:	a101      	add	r1, pc, #4	; (adr r1, 800dd54 <_scanf_float+0x98>)
 800dd50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dd54:	0800de93 	.word	0x0800de93
 800dd58:	0800dd1d 	.word	0x0800dd1d
 800dd5c:	0800dd1d 	.word	0x0800dd1d
 800dd60:	0800dd1d 	.word	0x0800dd1d
 800dd64:	0800def3 	.word	0x0800def3
 800dd68:	0800decb 	.word	0x0800decb
 800dd6c:	0800dd1d 	.word	0x0800dd1d
 800dd70:	0800dd1d 	.word	0x0800dd1d
 800dd74:	0800dea1 	.word	0x0800dea1
 800dd78:	0800dd1d 	.word	0x0800dd1d
 800dd7c:	0800dd1d 	.word	0x0800dd1d
 800dd80:	0800dd1d 	.word	0x0800dd1d
 800dd84:	0800dd1d 	.word	0x0800dd1d
 800dd88:	0800de59 	.word	0x0800de59
 800dd8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800dd90:	e7db      	b.n	800dd4a <_scanf_float+0x8e>
 800dd92:	290e      	cmp	r1, #14
 800dd94:	d8c2      	bhi.n	800dd1c <_scanf_float+0x60>
 800dd96:	a001      	add	r0, pc, #4	; (adr r0, 800dd9c <_scanf_float+0xe0>)
 800dd98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dd9c:	0800de4b 	.word	0x0800de4b
 800dda0:	0800dd1d 	.word	0x0800dd1d
 800dda4:	0800de4b 	.word	0x0800de4b
 800dda8:	0800dedf 	.word	0x0800dedf
 800ddac:	0800dd1d 	.word	0x0800dd1d
 800ddb0:	0800ddf9 	.word	0x0800ddf9
 800ddb4:	0800de35 	.word	0x0800de35
 800ddb8:	0800de35 	.word	0x0800de35
 800ddbc:	0800de35 	.word	0x0800de35
 800ddc0:	0800de35 	.word	0x0800de35
 800ddc4:	0800de35 	.word	0x0800de35
 800ddc8:	0800de35 	.word	0x0800de35
 800ddcc:	0800de35 	.word	0x0800de35
 800ddd0:	0800de35 	.word	0x0800de35
 800ddd4:	0800de35 	.word	0x0800de35
 800ddd8:	2b6e      	cmp	r3, #110	; 0x6e
 800ddda:	d809      	bhi.n	800ddf0 <_scanf_float+0x134>
 800dddc:	2b60      	cmp	r3, #96	; 0x60
 800ddde:	d8b2      	bhi.n	800dd46 <_scanf_float+0x8a>
 800dde0:	2b54      	cmp	r3, #84	; 0x54
 800dde2:	d077      	beq.n	800ded4 <_scanf_float+0x218>
 800dde4:	2b59      	cmp	r3, #89	; 0x59
 800dde6:	d199      	bne.n	800dd1c <_scanf_float+0x60>
 800dde8:	2d07      	cmp	r5, #7
 800ddea:	d197      	bne.n	800dd1c <_scanf_float+0x60>
 800ddec:	2508      	movs	r5, #8
 800ddee:	e029      	b.n	800de44 <_scanf_float+0x188>
 800ddf0:	2b74      	cmp	r3, #116	; 0x74
 800ddf2:	d06f      	beq.n	800ded4 <_scanf_float+0x218>
 800ddf4:	2b79      	cmp	r3, #121	; 0x79
 800ddf6:	e7f6      	b.n	800dde6 <_scanf_float+0x12a>
 800ddf8:	6821      	ldr	r1, [r4, #0]
 800ddfa:	05c8      	lsls	r0, r1, #23
 800ddfc:	d51a      	bpl.n	800de34 <_scanf_float+0x178>
 800ddfe:	9b02      	ldr	r3, [sp, #8]
 800de00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800de04:	6021      	str	r1, [r4, #0]
 800de06:	f109 0901 	add.w	r9, r9, #1
 800de0a:	b11b      	cbz	r3, 800de14 <_scanf_float+0x158>
 800de0c:	3b01      	subs	r3, #1
 800de0e:	3201      	adds	r2, #1
 800de10:	9302      	str	r3, [sp, #8]
 800de12:	60a2      	str	r2, [r4, #8]
 800de14:	68a3      	ldr	r3, [r4, #8]
 800de16:	3b01      	subs	r3, #1
 800de18:	60a3      	str	r3, [r4, #8]
 800de1a:	6923      	ldr	r3, [r4, #16]
 800de1c:	3301      	adds	r3, #1
 800de1e:	6123      	str	r3, [r4, #16]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	3b01      	subs	r3, #1
 800de24:	2b00      	cmp	r3, #0
 800de26:	607b      	str	r3, [r7, #4]
 800de28:	f340 8084 	ble.w	800df34 <_scanf_float+0x278>
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	3301      	adds	r3, #1
 800de30:	603b      	str	r3, [r7, #0]
 800de32:	e766      	b.n	800dd02 <_scanf_float+0x46>
 800de34:	eb1a 0f05 	cmn.w	sl, r5
 800de38:	f47f af70 	bne.w	800dd1c <_scanf_float+0x60>
 800de3c:	6822      	ldr	r2, [r4, #0]
 800de3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800de42:	6022      	str	r2, [r4, #0]
 800de44:	f806 3b01 	strb.w	r3, [r6], #1
 800de48:	e7e4      	b.n	800de14 <_scanf_float+0x158>
 800de4a:	6822      	ldr	r2, [r4, #0]
 800de4c:	0610      	lsls	r0, r2, #24
 800de4e:	f57f af65 	bpl.w	800dd1c <_scanf_float+0x60>
 800de52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de56:	e7f4      	b.n	800de42 <_scanf_float+0x186>
 800de58:	f1ba 0f00 	cmp.w	sl, #0
 800de5c:	d10e      	bne.n	800de7c <_scanf_float+0x1c0>
 800de5e:	f1b9 0f00 	cmp.w	r9, #0
 800de62:	d10e      	bne.n	800de82 <_scanf_float+0x1c6>
 800de64:	6822      	ldr	r2, [r4, #0]
 800de66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800de6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800de6e:	d108      	bne.n	800de82 <_scanf_float+0x1c6>
 800de70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800de74:	6022      	str	r2, [r4, #0]
 800de76:	f04f 0a01 	mov.w	sl, #1
 800de7a:	e7e3      	b.n	800de44 <_scanf_float+0x188>
 800de7c:	f1ba 0f02 	cmp.w	sl, #2
 800de80:	d055      	beq.n	800df2e <_scanf_float+0x272>
 800de82:	2d01      	cmp	r5, #1
 800de84:	d002      	beq.n	800de8c <_scanf_float+0x1d0>
 800de86:	2d04      	cmp	r5, #4
 800de88:	f47f af48 	bne.w	800dd1c <_scanf_float+0x60>
 800de8c:	3501      	adds	r5, #1
 800de8e:	b2ed      	uxtb	r5, r5
 800de90:	e7d8      	b.n	800de44 <_scanf_float+0x188>
 800de92:	f1ba 0f01 	cmp.w	sl, #1
 800de96:	f47f af41 	bne.w	800dd1c <_scanf_float+0x60>
 800de9a:	f04f 0a02 	mov.w	sl, #2
 800de9e:	e7d1      	b.n	800de44 <_scanf_float+0x188>
 800dea0:	b97d      	cbnz	r5, 800dec2 <_scanf_float+0x206>
 800dea2:	f1b9 0f00 	cmp.w	r9, #0
 800dea6:	f47f af3c 	bne.w	800dd22 <_scanf_float+0x66>
 800deaa:	6822      	ldr	r2, [r4, #0]
 800deac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800deb0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800deb4:	f47f af39 	bne.w	800dd2a <_scanf_float+0x6e>
 800deb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800debc:	6022      	str	r2, [r4, #0]
 800debe:	2501      	movs	r5, #1
 800dec0:	e7c0      	b.n	800de44 <_scanf_float+0x188>
 800dec2:	2d03      	cmp	r5, #3
 800dec4:	d0e2      	beq.n	800de8c <_scanf_float+0x1d0>
 800dec6:	2d05      	cmp	r5, #5
 800dec8:	e7de      	b.n	800de88 <_scanf_float+0x1cc>
 800deca:	2d02      	cmp	r5, #2
 800decc:	f47f af26 	bne.w	800dd1c <_scanf_float+0x60>
 800ded0:	2503      	movs	r5, #3
 800ded2:	e7b7      	b.n	800de44 <_scanf_float+0x188>
 800ded4:	2d06      	cmp	r5, #6
 800ded6:	f47f af21 	bne.w	800dd1c <_scanf_float+0x60>
 800deda:	2507      	movs	r5, #7
 800dedc:	e7b2      	b.n	800de44 <_scanf_float+0x188>
 800dede:	6822      	ldr	r2, [r4, #0]
 800dee0:	0591      	lsls	r1, r2, #22
 800dee2:	f57f af1b 	bpl.w	800dd1c <_scanf_float+0x60>
 800dee6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800deea:	6022      	str	r2, [r4, #0]
 800deec:	f8cd 9004 	str.w	r9, [sp, #4]
 800def0:	e7a8      	b.n	800de44 <_scanf_float+0x188>
 800def2:	6822      	ldr	r2, [r4, #0]
 800def4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800def8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800defc:	d006      	beq.n	800df0c <_scanf_float+0x250>
 800defe:	0550      	lsls	r0, r2, #21
 800df00:	f57f af0c 	bpl.w	800dd1c <_scanf_float+0x60>
 800df04:	f1b9 0f00 	cmp.w	r9, #0
 800df08:	f43f af0f 	beq.w	800dd2a <_scanf_float+0x6e>
 800df0c:	0591      	lsls	r1, r2, #22
 800df0e:	bf58      	it	pl
 800df10:	9901      	ldrpl	r1, [sp, #4]
 800df12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800df16:	bf58      	it	pl
 800df18:	eba9 0101 	subpl.w	r1, r9, r1
 800df1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800df20:	bf58      	it	pl
 800df22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800df26:	6022      	str	r2, [r4, #0]
 800df28:	f04f 0900 	mov.w	r9, #0
 800df2c:	e78a      	b.n	800de44 <_scanf_float+0x188>
 800df2e:	f04f 0a03 	mov.w	sl, #3
 800df32:	e787      	b.n	800de44 <_scanf_float+0x188>
 800df34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800df38:	4639      	mov	r1, r7
 800df3a:	4640      	mov	r0, r8
 800df3c:	4798      	blx	r3
 800df3e:	2800      	cmp	r0, #0
 800df40:	f43f aedf 	beq.w	800dd02 <_scanf_float+0x46>
 800df44:	e6ea      	b.n	800dd1c <_scanf_float+0x60>
 800df46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800df4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df4e:	463a      	mov	r2, r7
 800df50:	4640      	mov	r0, r8
 800df52:	4798      	blx	r3
 800df54:	6923      	ldr	r3, [r4, #16]
 800df56:	3b01      	subs	r3, #1
 800df58:	6123      	str	r3, [r4, #16]
 800df5a:	e6ec      	b.n	800dd36 <_scanf_float+0x7a>
 800df5c:	1e6b      	subs	r3, r5, #1
 800df5e:	2b06      	cmp	r3, #6
 800df60:	d825      	bhi.n	800dfae <_scanf_float+0x2f2>
 800df62:	2d02      	cmp	r5, #2
 800df64:	d836      	bhi.n	800dfd4 <_scanf_float+0x318>
 800df66:	455e      	cmp	r6, fp
 800df68:	f67f aee8 	bls.w	800dd3c <_scanf_float+0x80>
 800df6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800df70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df74:	463a      	mov	r2, r7
 800df76:	4640      	mov	r0, r8
 800df78:	4798      	blx	r3
 800df7a:	6923      	ldr	r3, [r4, #16]
 800df7c:	3b01      	subs	r3, #1
 800df7e:	6123      	str	r3, [r4, #16]
 800df80:	e7f1      	b.n	800df66 <_scanf_float+0x2aa>
 800df82:	9802      	ldr	r0, [sp, #8]
 800df84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800df88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800df8c:	9002      	str	r0, [sp, #8]
 800df8e:	463a      	mov	r2, r7
 800df90:	4640      	mov	r0, r8
 800df92:	4798      	blx	r3
 800df94:	6923      	ldr	r3, [r4, #16]
 800df96:	3b01      	subs	r3, #1
 800df98:	6123      	str	r3, [r4, #16]
 800df9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df9e:	fa5f fa8a 	uxtb.w	sl, sl
 800dfa2:	f1ba 0f02 	cmp.w	sl, #2
 800dfa6:	d1ec      	bne.n	800df82 <_scanf_float+0x2c6>
 800dfa8:	3d03      	subs	r5, #3
 800dfaa:	b2ed      	uxtb	r5, r5
 800dfac:	1b76      	subs	r6, r6, r5
 800dfae:	6823      	ldr	r3, [r4, #0]
 800dfb0:	05da      	lsls	r2, r3, #23
 800dfb2:	d52f      	bpl.n	800e014 <_scanf_float+0x358>
 800dfb4:	055b      	lsls	r3, r3, #21
 800dfb6:	d510      	bpl.n	800dfda <_scanf_float+0x31e>
 800dfb8:	455e      	cmp	r6, fp
 800dfba:	f67f aebf 	bls.w	800dd3c <_scanf_float+0x80>
 800dfbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dfc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dfc6:	463a      	mov	r2, r7
 800dfc8:	4640      	mov	r0, r8
 800dfca:	4798      	blx	r3
 800dfcc:	6923      	ldr	r3, [r4, #16]
 800dfce:	3b01      	subs	r3, #1
 800dfd0:	6123      	str	r3, [r4, #16]
 800dfd2:	e7f1      	b.n	800dfb8 <_scanf_float+0x2fc>
 800dfd4:	46aa      	mov	sl, r5
 800dfd6:	9602      	str	r6, [sp, #8]
 800dfd8:	e7df      	b.n	800df9a <_scanf_float+0x2de>
 800dfda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dfde:	6923      	ldr	r3, [r4, #16]
 800dfe0:	2965      	cmp	r1, #101	; 0x65
 800dfe2:	f103 33ff 	add.w	r3, r3, #4294967295
 800dfe6:	f106 35ff 	add.w	r5, r6, #4294967295
 800dfea:	6123      	str	r3, [r4, #16]
 800dfec:	d00c      	beq.n	800e008 <_scanf_float+0x34c>
 800dfee:	2945      	cmp	r1, #69	; 0x45
 800dff0:	d00a      	beq.n	800e008 <_scanf_float+0x34c>
 800dff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dff6:	463a      	mov	r2, r7
 800dff8:	4640      	mov	r0, r8
 800dffa:	4798      	blx	r3
 800dffc:	6923      	ldr	r3, [r4, #16]
 800dffe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e002:	3b01      	subs	r3, #1
 800e004:	1eb5      	subs	r5, r6, #2
 800e006:	6123      	str	r3, [r4, #16]
 800e008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e00c:	463a      	mov	r2, r7
 800e00e:	4640      	mov	r0, r8
 800e010:	4798      	blx	r3
 800e012:	462e      	mov	r6, r5
 800e014:	6825      	ldr	r5, [r4, #0]
 800e016:	f015 0510 	ands.w	r5, r5, #16
 800e01a:	d158      	bne.n	800e0ce <_scanf_float+0x412>
 800e01c:	7035      	strb	r5, [r6, #0]
 800e01e:	6823      	ldr	r3, [r4, #0]
 800e020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e028:	d11c      	bne.n	800e064 <_scanf_float+0x3a8>
 800e02a:	9b01      	ldr	r3, [sp, #4]
 800e02c:	454b      	cmp	r3, r9
 800e02e:	eba3 0209 	sub.w	r2, r3, r9
 800e032:	d124      	bne.n	800e07e <_scanf_float+0x3c2>
 800e034:	2200      	movs	r2, #0
 800e036:	4659      	mov	r1, fp
 800e038:	4640      	mov	r0, r8
 800e03a:	f002 fc09 	bl	8010850 <_strtod_r>
 800e03e:	9b03      	ldr	r3, [sp, #12]
 800e040:	6821      	ldr	r1, [r4, #0]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f011 0f02 	tst.w	r1, #2
 800e048:	ec57 6b10 	vmov	r6, r7, d0
 800e04c:	f103 0204 	add.w	r2, r3, #4
 800e050:	d020      	beq.n	800e094 <_scanf_float+0x3d8>
 800e052:	9903      	ldr	r1, [sp, #12]
 800e054:	600a      	str	r2, [r1, #0]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	e9c3 6700 	strd	r6, r7, [r3]
 800e05c:	68e3      	ldr	r3, [r4, #12]
 800e05e:	3301      	adds	r3, #1
 800e060:	60e3      	str	r3, [r4, #12]
 800e062:	e66c      	b.n	800dd3e <_scanf_float+0x82>
 800e064:	9b04      	ldr	r3, [sp, #16]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d0e4      	beq.n	800e034 <_scanf_float+0x378>
 800e06a:	9905      	ldr	r1, [sp, #20]
 800e06c:	230a      	movs	r3, #10
 800e06e:	462a      	mov	r2, r5
 800e070:	3101      	adds	r1, #1
 800e072:	4640      	mov	r0, r8
 800e074:	f002 fc74 	bl	8010960 <_strtol_r>
 800e078:	9b04      	ldr	r3, [sp, #16]
 800e07a:	9e05      	ldr	r6, [sp, #20]
 800e07c:	1ac2      	subs	r2, r0, r3
 800e07e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e082:	429e      	cmp	r6, r3
 800e084:	bf28      	it	cs
 800e086:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e08a:	4912      	ldr	r1, [pc, #72]	; (800e0d4 <_scanf_float+0x418>)
 800e08c:	4630      	mov	r0, r6
 800e08e:	f000 f8f9 	bl	800e284 <siprintf>
 800e092:	e7cf      	b.n	800e034 <_scanf_float+0x378>
 800e094:	f011 0f04 	tst.w	r1, #4
 800e098:	9903      	ldr	r1, [sp, #12]
 800e09a:	600a      	str	r2, [r1, #0]
 800e09c:	d1db      	bne.n	800e056 <_scanf_float+0x39a>
 800e09e:	f8d3 8000 	ldr.w	r8, [r3]
 800e0a2:	ee10 2a10 	vmov	r2, s0
 800e0a6:	ee10 0a10 	vmov	r0, s0
 800e0aa:	463b      	mov	r3, r7
 800e0ac:	4639      	mov	r1, r7
 800e0ae:	f7f2 fd65 	bl	8000b7c <__aeabi_dcmpun>
 800e0b2:	b128      	cbz	r0, 800e0c0 <_scanf_float+0x404>
 800e0b4:	4808      	ldr	r0, [pc, #32]	; (800e0d8 <_scanf_float+0x41c>)
 800e0b6:	f000 fa45 	bl	800e544 <nanf>
 800e0ba:	ed88 0a00 	vstr	s0, [r8]
 800e0be:	e7cd      	b.n	800e05c <_scanf_float+0x3a0>
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	4639      	mov	r1, r7
 800e0c4:	f7f2 fdb8 	bl	8000c38 <__aeabi_d2f>
 800e0c8:	f8c8 0000 	str.w	r0, [r8]
 800e0cc:	e7c6      	b.n	800e05c <_scanf_float+0x3a0>
 800e0ce:	2500      	movs	r5, #0
 800e0d0:	e635      	b.n	800dd3e <_scanf_float+0x82>
 800e0d2:	bf00      	nop
 800e0d4:	08012b60 	.word	0x08012b60
 800e0d8:	08012b2b 	.word	0x08012b2b

0800e0dc <std>:
 800e0dc:	2300      	movs	r3, #0
 800e0de:	b510      	push	{r4, lr}
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	e9c0 3300 	strd	r3, r3, [r0]
 800e0e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0ea:	6083      	str	r3, [r0, #8]
 800e0ec:	8181      	strh	r1, [r0, #12]
 800e0ee:	6643      	str	r3, [r0, #100]	; 0x64
 800e0f0:	81c2      	strh	r2, [r0, #14]
 800e0f2:	6183      	str	r3, [r0, #24]
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	2208      	movs	r2, #8
 800e0f8:	305c      	adds	r0, #92	; 0x5c
 800e0fa:	f000 f940 	bl	800e37e <memset>
 800e0fe:	4b0d      	ldr	r3, [pc, #52]	; (800e134 <std+0x58>)
 800e100:	6263      	str	r3, [r4, #36]	; 0x24
 800e102:	4b0d      	ldr	r3, [pc, #52]	; (800e138 <std+0x5c>)
 800e104:	62a3      	str	r3, [r4, #40]	; 0x28
 800e106:	4b0d      	ldr	r3, [pc, #52]	; (800e13c <std+0x60>)
 800e108:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e10a:	4b0d      	ldr	r3, [pc, #52]	; (800e140 <std+0x64>)
 800e10c:	6323      	str	r3, [r4, #48]	; 0x30
 800e10e:	4b0d      	ldr	r3, [pc, #52]	; (800e144 <std+0x68>)
 800e110:	6224      	str	r4, [r4, #32]
 800e112:	429c      	cmp	r4, r3
 800e114:	d006      	beq.n	800e124 <std+0x48>
 800e116:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e11a:	4294      	cmp	r4, r2
 800e11c:	d002      	beq.n	800e124 <std+0x48>
 800e11e:	33d0      	adds	r3, #208	; 0xd0
 800e120:	429c      	cmp	r4, r3
 800e122:	d105      	bne.n	800e130 <std+0x54>
 800e124:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e12c:	f000 b9f8 	b.w	800e520 <__retarget_lock_init_recursive>
 800e130:	bd10      	pop	{r4, pc}
 800e132:	bf00      	nop
 800e134:	0800e2c5 	.word	0x0800e2c5
 800e138:	0800e2e7 	.word	0x0800e2e7
 800e13c:	0800e31f 	.word	0x0800e31f
 800e140:	0800e343 	.word	0x0800e343
 800e144:	20000480 	.word	0x20000480

0800e148 <stdio_exit_handler>:
 800e148:	4a02      	ldr	r2, [pc, #8]	; (800e154 <stdio_exit_handler+0xc>)
 800e14a:	4903      	ldr	r1, [pc, #12]	; (800e158 <stdio_exit_handler+0x10>)
 800e14c:	4803      	ldr	r0, [pc, #12]	; (800e15c <stdio_exit_handler+0x14>)
 800e14e:	f000 b87b 	b.w	800e248 <_fwalk_sglue>
 800e152:	bf00      	nop
 800e154:	2000000c 	.word	0x2000000c
 800e158:	08010fa9 	.word	0x08010fa9
 800e15c:	20000018 	.word	0x20000018

0800e160 <cleanup_stdio>:
 800e160:	6841      	ldr	r1, [r0, #4]
 800e162:	4b0c      	ldr	r3, [pc, #48]	; (800e194 <cleanup_stdio+0x34>)
 800e164:	4299      	cmp	r1, r3
 800e166:	b510      	push	{r4, lr}
 800e168:	4604      	mov	r4, r0
 800e16a:	d001      	beq.n	800e170 <cleanup_stdio+0x10>
 800e16c:	f002 ff1c 	bl	8010fa8 <_fflush_r>
 800e170:	68a1      	ldr	r1, [r4, #8]
 800e172:	4b09      	ldr	r3, [pc, #36]	; (800e198 <cleanup_stdio+0x38>)
 800e174:	4299      	cmp	r1, r3
 800e176:	d002      	beq.n	800e17e <cleanup_stdio+0x1e>
 800e178:	4620      	mov	r0, r4
 800e17a:	f002 ff15 	bl	8010fa8 <_fflush_r>
 800e17e:	68e1      	ldr	r1, [r4, #12]
 800e180:	4b06      	ldr	r3, [pc, #24]	; (800e19c <cleanup_stdio+0x3c>)
 800e182:	4299      	cmp	r1, r3
 800e184:	d004      	beq.n	800e190 <cleanup_stdio+0x30>
 800e186:	4620      	mov	r0, r4
 800e188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e18c:	f002 bf0c 	b.w	8010fa8 <_fflush_r>
 800e190:	bd10      	pop	{r4, pc}
 800e192:	bf00      	nop
 800e194:	20000480 	.word	0x20000480
 800e198:	200004e8 	.word	0x200004e8
 800e19c:	20000550 	.word	0x20000550

0800e1a0 <global_stdio_init.part.0>:
 800e1a0:	b510      	push	{r4, lr}
 800e1a2:	4b0b      	ldr	r3, [pc, #44]	; (800e1d0 <global_stdio_init.part.0+0x30>)
 800e1a4:	4c0b      	ldr	r4, [pc, #44]	; (800e1d4 <global_stdio_init.part.0+0x34>)
 800e1a6:	4a0c      	ldr	r2, [pc, #48]	; (800e1d8 <global_stdio_init.part.0+0x38>)
 800e1a8:	601a      	str	r2, [r3, #0]
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	2104      	movs	r1, #4
 800e1b0:	f7ff ff94 	bl	800e0dc <std>
 800e1b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	2109      	movs	r1, #9
 800e1bc:	f7ff ff8e 	bl	800e0dc <std>
 800e1c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e1c4:	2202      	movs	r2, #2
 800e1c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1ca:	2112      	movs	r1, #18
 800e1cc:	f7ff bf86 	b.w	800e0dc <std>
 800e1d0:	200005b8 	.word	0x200005b8
 800e1d4:	20000480 	.word	0x20000480
 800e1d8:	0800e149 	.word	0x0800e149

0800e1dc <__sfp_lock_acquire>:
 800e1dc:	4801      	ldr	r0, [pc, #4]	; (800e1e4 <__sfp_lock_acquire+0x8>)
 800e1de:	f000 b9a0 	b.w	800e522 <__retarget_lock_acquire_recursive>
 800e1e2:	bf00      	nop
 800e1e4:	200005c1 	.word	0x200005c1

0800e1e8 <__sfp_lock_release>:
 800e1e8:	4801      	ldr	r0, [pc, #4]	; (800e1f0 <__sfp_lock_release+0x8>)
 800e1ea:	f000 b99b 	b.w	800e524 <__retarget_lock_release_recursive>
 800e1ee:	bf00      	nop
 800e1f0:	200005c1 	.word	0x200005c1

0800e1f4 <__sinit>:
 800e1f4:	b510      	push	{r4, lr}
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	f7ff fff0 	bl	800e1dc <__sfp_lock_acquire>
 800e1fc:	6a23      	ldr	r3, [r4, #32]
 800e1fe:	b11b      	cbz	r3, 800e208 <__sinit+0x14>
 800e200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e204:	f7ff bff0 	b.w	800e1e8 <__sfp_lock_release>
 800e208:	4b04      	ldr	r3, [pc, #16]	; (800e21c <__sinit+0x28>)
 800e20a:	6223      	str	r3, [r4, #32]
 800e20c:	4b04      	ldr	r3, [pc, #16]	; (800e220 <__sinit+0x2c>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d1f5      	bne.n	800e200 <__sinit+0xc>
 800e214:	f7ff ffc4 	bl	800e1a0 <global_stdio_init.part.0>
 800e218:	e7f2      	b.n	800e200 <__sinit+0xc>
 800e21a:	bf00      	nop
 800e21c:	0800e161 	.word	0x0800e161
 800e220:	200005b8 	.word	0x200005b8

0800e224 <fiprintf>:
 800e224:	b40e      	push	{r1, r2, r3}
 800e226:	b503      	push	{r0, r1, lr}
 800e228:	4601      	mov	r1, r0
 800e22a:	ab03      	add	r3, sp, #12
 800e22c:	4805      	ldr	r0, [pc, #20]	; (800e244 <fiprintf+0x20>)
 800e22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e232:	6800      	ldr	r0, [r0, #0]
 800e234:	9301      	str	r3, [sp, #4]
 800e236:	f002 fd17 	bl	8010c68 <_vfiprintf_r>
 800e23a:	b002      	add	sp, #8
 800e23c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e240:	b003      	add	sp, #12
 800e242:	4770      	bx	lr
 800e244:	20000064 	.word	0x20000064

0800e248 <_fwalk_sglue>:
 800e248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e24c:	4607      	mov	r7, r0
 800e24e:	4688      	mov	r8, r1
 800e250:	4614      	mov	r4, r2
 800e252:	2600      	movs	r6, #0
 800e254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e258:	f1b9 0901 	subs.w	r9, r9, #1
 800e25c:	d505      	bpl.n	800e26a <_fwalk_sglue+0x22>
 800e25e:	6824      	ldr	r4, [r4, #0]
 800e260:	2c00      	cmp	r4, #0
 800e262:	d1f7      	bne.n	800e254 <_fwalk_sglue+0xc>
 800e264:	4630      	mov	r0, r6
 800e266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e26a:	89ab      	ldrh	r3, [r5, #12]
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d907      	bls.n	800e280 <_fwalk_sglue+0x38>
 800e270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e274:	3301      	adds	r3, #1
 800e276:	d003      	beq.n	800e280 <_fwalk_sglue+0x38>
 800e278:	4629      	mov	r1, r5
 800e27a:	4638      	mov	r0, r7
 800e27c:	47c0      	blx	r8
 800e27e:	4306      	orrs	r6, r0
 800e280:	3568      	adds	r5, #104	; 0x68
 800e282:	e7e9      	b.n	800e258 <_fwalk_sglue+0x10>

0800e284 <siprintf>:
 800e284:	b40e      	push	{r1, r2, r3}
 800e286:	b500      	push	{lr}
 800e288:	b09c      	sub	sp, #112	; 0x70
 800e28a:	ab1d      	add	r3, sp, #116	; 0x74
 800e28c:	9002      	str	r0, [sp, #8]
 800e28e:	9006      	str	r0, [sp, #24]
 800e290:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e294:	4809      	ldr	r0, [pc, #36]	; (800e2bc <siprintf+0x38>)
 800e296:	9107      	str	r1, [sp, #28]
 800e298:	9104      	str	r1, [sp, #16]
 800e29a:	4909      	ldr	r1, [pc, #36]	; (800e2c0 <siprintf+0x3c>)
 800e29c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2a0:	9105      	str	r1, [sp, #20]
 800e2a2:	6800      	ldr	r0, [r0, #0]
 800e2a4:	9301      	str	r3, [sp, #4]
 800e2a6:	a902      	add	r1, sp, #8
 800e2a8:	f002 fbb6 	bl	8010a18 <_svfiprintf_r>
 800e2ac:	9b02      	ldr	r3, [sp, #8]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	701a      	strb	r2, [r3, #0]
 800e2b2:	b01c      	add	sp, #112	; 0x70
 800e2b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2b8:	b003      	add	sp, #12
 800e2ba:	4770      	bx	lr
 800e2bc:	20000064 	.word	0x20000064
 800e2c0:	ffff0208 	.word	0xffff0208

0800e2c4 <__sread>:
 800e2c4:	b510      	push	{r4, lr}
 800e2c6:	460c      	mov	r4, r1
 800e2c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2cc:	f000 f8b6 	bl	800e43c <_read_r>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	bfab      	itete	ge
 800e2d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e2d6:	89a3      	ldrhlt	r3, [r4, #12]
 800e2d8:	181b      	addge	r3, r3, r0
 800e2da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e2de:	bfac      	ite	ge
 800e2e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e2e2:	81a3      	strhlt	r3, [r4, #12]
 800e2e4:	bd10      	pop	{r4, pc}

0800e2e6 <__swrite>:
 800e2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ea:	461f      	mov	r7, r3
 800e2ec:	898b      	ldrh	r3, [r1, #12]
 800e2ee:	05db      	lsls	r3, r3, #23
 800e2f0:	4605      	mov	r5, r0
 800e2f2:	460c      	mov	r4, r1
 800e2f4:	4616      	mov	r6, r2
 800e2f6:	d505      	bpl.n	800e304 <__swrite+0x1e>
 800e2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2fc:	2302      	movs	r3, #2
 800e2fe:	2200      	movs	r2, #0
 800e300:	f000 f88a 	bl	800e418 <_lseek_r>
 800e304:	89a3      	ldrh	r3, [r4, #12]
 800e306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e30a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e30e:	81a3      	strh	r3, [r4, #12]
 800e310:	4632      	mov	r2, r6
 800e312:	463b      	mov	r3, r7
 800e314:	4628      	mov	r0, r5
 800e316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e31a:	f000 b8c5 	b.w	800e4a8 <_write_r>

0800e31e <__sseek>:
 800e31e:	b510      	push	{r4, lr}
 800e320:	460c      	mov	r4, r1
 800e322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e326:	f000 f877 	bl	800e418 <_lseek_r>
 800e32a:	1c43      	adds	r3, r0, #1
 800e32c:	89a3      	ldrh	r3, [r4, #12]
 800e32e:	bf15      	itete	ne
 800e330:	6560      	strne	r0, [r4, #84]	; 0x54
 800e332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e33a:	81a3      	strheq	r3, [r4, #12]
 800e33c:	bf18      	it	ne
 800e33e:	81a3      	strhne	r3, [r4, #12]
 800e340:	bd10      	pop	{r4, pc}

0800e342 <__sclose>:
 800e342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e346:	f000 b857 	b.w	800e3f8 <_close_r>

0800e34a <memmove>:
 800e34a:	4288      	cmp	r0, r1
 800e34c:	b510      	push	{r4, lr}
 800e34e:	eb01 0402 	add.w	r4, r1, r2
 800e352:	d902      	bls.n	800e35a <memmove+0x10>
 800e354:	4284      	cmp	r4, r0
 800e356:	4623      	mov	r3, r4
 800e358:	d807      	bhi.n	800e36a <memmove+0x20>
 800e35a:	1e43      	subs	r3, r0, #1
 800e35c:	42a1      	cmp	r1, r4
 800e35e:	d008      	beq.n	800e372 <memmove+0x28>
 800e360:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e364:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e368:	e7f8      	b.n	800e35c <memmove+0x12>
 800e36a:	4402      	add	r2, r0
 800e36c:	4601      	mov	r1, r0
 800e36e:	428a      	cmp	r2, r1
 800e370:	d100      	bne.n	800e374 <memmove+0x2a>
 800e372:	bd10      	pop	{r4, pc}
 800e374:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e378:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e37c:	e7f7      	b.n	800e36e <memmove+0x24>

0800e37e <memset>:
 800e37e:	4402      	add	r2, r0
 800e380:	4603      	mov	r3, r0
 800e382:	4293      	cmp	r3, r2
 800e384:	d100      	bne.n	800e388 <memset+0xa>
 800e386:	4770      	bx	lr
 800e388:	f803 1b01 	strb.w	r1, [r3], #1
 800e38c:	e7f9      	b.n	800e382 <memset+0x4>

0800e38e <_raise_r>:
 800e38e:	291f      	cmp	r1, #31
 800e390:	b538      	push	{r3, r4, r5, lr}
 800e392:	4604      	mov	r4, r0
 800e394:	460d      	mov	r5, r1
 800e396:	d904      	bls.n	800e3a2 <_raise_r+0x14>
 800e398:	2316      	movs	r3, #22
 800e39a:	6003      	str	r3, [r0, #0]
 800e39c:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a0:	bd38      	pop	{r3, r4, r5, pc}
 800e3a2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e3a4:	b112      	cbz	r2, 800e3ac <_raise_r+0x1e>
 800e3a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3aa:	b94b      	cbnz	r3, 800e3c0 <_raise_r+0x32>
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	f000 f869 	bl	800e484 <_getpid_r>
 800e3b2:	462a      	mov	r2, r5
 800e3b4:	4601      	mov	r1, r0
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3bc:	f000 b850 	b.w	800e460 <_kill_r>
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d00a      	beq.n	800e3da <_raise_r+0x4c>
 800e3c4:	1c59      	adds	r1, r3, #1
 800e3c6:	d103      	bne.n	800e3d0 <_raise_r+0x42>
 800e3c8:	2316      	movs	r3, #22
 800e3ca:	6003      	str	r3, [r0, #0]
 800e3cc:	2001      	movs	r0, #1
 800e3ce:	e7e7      	b.n	800e3a0 <_raise_r+0x12>
 800e3d0:	2400      	movs	r4, #0
 800e3d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	4798      	blx	r3
 800e3da:	2000      	movs	r0, #0
 800e3dc:	e7e0      	b.n	800e3a0 <_raise_r+0x12>
	...

0800e3e0 <raise>:
 800e3e0:	4b02      	ldr	r3, [pc, #8]	; (800e3ec <raise+0xc>)
 800e3e2:	4601      	mov	r1, r0
 800e3e4:	6818      	ldr	r0, [r3, #0]
 800e3e6:	f7ff bfd2 	b.w	800e38e <_raise_r>
 800e3ea:	bf00      	nop
 800e3ec:	20000064 	.word	0x20000064

0800e3f0 <_localeconv_r>:
 800e3f0:	4800      	ldr	r0, [pc, #0]	; (800e3f4 <_localeconv_r+0x4>)
 800e3f2:	4770      	bx	lr
 800e3f4:	20000158 	.word	0x20000158

0800e3f8 <_close_r>:
 800e3f8:	b538      	push	{r3, r4, r5, lr}
 800e3fa:	4d06      	ldr	r5, [pc, #24]	; (800e414 <_close_r+0x1c>)
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	4604      	mov	r4, r0
 800e400:	4608      	mov	r0, r1
 800e402:	602b      	str	r3, [r5, #0]
 800e404:	f7f6 facb 	bl	800499e <_close>
 800e408:	1c43      	adds	r3, r0, #1
 800e40a:	d102      	bne.n	800e412 <_close_r+0x1a>
 800e40c:	682b      	ldr	r3, [r5, #0]
 800e40e:	b103      	cbz	r3, 800e412 <_close_r+0x1a>
 800e410:	6023      	str	r3, [r4, #0]
 800e412:	bd38      	pop	{r3, r4, r5, pc}
 800e414:	200005bc 	.word	0x200005bc

0800e418 <_lseek_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	4d07      	ldr	r5, [pc, #28]	; (800e438 <_lseek_r+0x20>)
 800e41c:	4604      	mov	r4, r0
 800e41e:	4608      	mov	r0, r1
 800e420:	4611      	mov	r1, r2
 800e422:	2200      	movs	r2, #0
 800e424:	602a      	str	r2, [r5, #0]
 800e426:	461a      	mov	r2, r3
 800e428:	f7f6 fae0 	bl	80049ec <_lseek>
 800e42c:	1c43      	adds	r3, r0, #1
 800e42e:	d102      	bne.n	800e436 <_lseek_r+0x1e>
 800e430:	682b      	ldr	r3, [r5, #0]
 800e432:	b103      	cbz	r3, 800e436 <_lseek_r+0x1e>
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	bd38      	pop	{r3, r4, r5, pc}
 800e438:	200005bc 	.word	0x200005bc

0800e43c <_read_r>:
 800e43c:	b538      	push	{r3, r4, r5, lr}
 800e43e:	4d07      	ldr	r5, [pc, #28]	; (800e45c <_read_r+0x20>)
 800e440:	4604      	mov	r4, r0
 800e442:	4608      	mov	r0, r1
 800e444:	4611      	mov	r1, r2
 800e446:	2200      	movs	r2, #0
 800e448:	602a      	str	r2, [r5, #0]
 800e44a:	461a      	mov	r2, r3
 800e44c:	f7f6 fa6e 	bl	800492c <_read>
 800e450:	1c43      	adds	r3, r0, #1
 800e452:	d102      	bne.n	800e45a <_read_r+0x1e>
 800e454:	682b      	ldr	r3, [r5, #0]
 800e456:	b103      	cbz	r3, 800e45a <_read_r+0x1e>
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	bd38      	pop	{r3, r4, r5, pc}
 800e45c:	200005bc 	.word	0x200005bc

0800e460 <_kill_r>:
 800e460:	b538      	push	{r3, r4, r5, lr}
 800e462:	4d07      	ldr	r5, [pc, #28]	; (800e480 <_kill_r+0x20>)
 800e464:	2300      	movs	r3, #0
 800e466:	4604      	mov	r4, r0
 800e468:	4608      	mov	r0, r1
 800e46a:	4611      	mov	r1, r2
 800e46c:	602b      	str	r3, [r5, #0]
 800e46e:	f7f6 fa43 	bl	80048f8 <_kill>
 800e472:	1c43      	adds	r3, r0, #1
 800e474:	d102      	bne.n	800e47c <_kill_r+0x1c>
 800e476:	682b      	ldr	r3, [r5, #0]
 800e478:	b103      	cbz	r3, 800e47c <_kill_r+0x1c>
 800e47a:	6023      	str	r3, [r4, #0]
 800e47c:	bd38      	pop	{r3, r4, r5, pc}
 800e47e:	bf00      	nop
 800e480:	200005bc 	.word	0x200005bc

0800e484 <_getpid_r>:
 800e484:	f7f6 ba30 	b.w	80048e8 <_getpid>

0800e488 <_sbrk_r>:
 800e488:	b538      	push	{r3, r4, r5, lr}
 800e48a:	4d06      	ldr	r5, [pc, #24]	; (800e4a4 <_sbrk_r+0x1c>)
 800e48c:	2300      	movs	r3, #0
 800e48e:	4604      	mov	r4, r0
 800e490:	4608      	mov	r0, r1
 800e492:	602b      	str	r3, [r5, #0]
 800e494:	f7f6 fab8 	bl	8004a08 <_sbrk>
 800e498:	1c43      	adds	r3, r0, #1
 800e49a:	d102      	bne.n	800e4a2 <_sbrk_r+0x1a>
 800e49c:	682b      	ldr	r3, [r5, #0]
 800e49e:	b103      	cbz	r3, 800e4a2 <_sbrk_r+0x1a>
 800e4a0:	6023      	str	r3, [r4, #0]
 800e4a2:	bd38      	pop	{r3, r4, r5, pc}
 800e4a4:	200005bc 	.word	0x200005bc

0800e4a8 <_write_r>:
 800e4a8:	b538      	push	{r3, r4, r5, lr}
 800e4aa:	4d07      	ldr	r5, [pc, #28]	; (800e4c8 <_write_r+0x20>)
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	4608      	mov	r0, r1
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	602a      	str	r2, [r5, #0]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	f7f6 fa55 	bl	8004966 <_write>
 800e4bc:	1c43      	adds	r3, r0, #1
 800e4be:	d102      	bne.n	800e4c6 <_write_r+0x1e>
 800e4c0:	682b      	ldr	r3, [r5, #0]
 800e4c2:	b103      	cbz	r3, 800e4c6 <_write_r+0x1e>
 800e4c4:	6023      	str	r3, [r4, #0]
 800e4c6:	bd38      	pop	{r3, r4, r5, pc}
 800e4c8:	200005bc 	.word	0x200005bc

0800e4cc <__errno>:
 800e4cc:	4b01      	ldr	r3, [pc, #4]	; (800e4d4 <__errno+0x8>)
 800e4ce:	6818      	ldr	r0, [r3, #0]
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	20000064 	.word	0x20000064

0800e4d8 <__libc_init_array>:
 800e4d8:	b570      	push	{r4, r5, r6, lr}
 800e4da:	4d0d      	ldr	r5, [pc, #52]	; (800e510 <__libc_init_array+0x38>)
 800e4dc:	4c0d      	ldr	r4, [pc, #52]	; (800e514 <__libc_init_array+0x3c>)
 800e4de:	1b64      	subs	r4, r4, r5
 800e4e0:	10a4      	asrs	r4, r4, #2
 800e4e2:	2600      	movs	r6, #0
 800e4e4:	42a6      	cmp	r6, r4
 800e4e6:	d109      	bne.n	800e4fc <__libc_init_array+0x24>
 800e4e8:	4d0b      	ldr	r5, [pc, #44]	; (800e518 <__libc_init_array+0x40>)
 800e4ea:	4c0c      	ldr	r4, [pc, #48]	; (800e51c <__libc_init_array+0x44>)
 800e4ec:	f003 fa7c 	bl	80119e8 <_init>
 800e4f0:	1b64      	subs	r4, r4, r5
 800e4f2:	10a4      	asrs	r4, r4, #2
 800e4f4:	2600      	movs	r6, #0
 800e4f6:	42a6      	cmp	r6, r4
 800e4f8:	d105      	bne.n	800e506 <__libc_init_array+0x2e>
 800e4fa:	bd70      	pop	{r4, r5, r6, pc}
 800e4fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e500:	4798      	blx	r3
 800e502:	3601      	adds	r6, #1
 800e504:	e7ee      	b.n	800e4e4 <__libc_init_array+0xc>
 800e506:	f855 3b04 	ldr.w	r3, [r5], #4
 800e50a:	4798      	blx	r3
 800e50c:	3601      	adds	r6, #1
 800e50e:	e7f2      	b.n	800e4f6 <__libc_init_array+0x1e>
 800e510:	08012f24 	.word	0x08012f24
 800e514:	08012f24 	.word	0x08012f24
 800e518:	08012f24 	.word	0x08012f24
 800e51c:	08012f30 	.word	0x08012f30

0800e520 <__retarget_lock_init_recursive>:
 800e520:	4770      	bx	lr

0800e522 <__retarget_lock_acquire_recursive>:
 800e522:	4770      	bx	lr

0800e524 <__retarget_lock_release_recursive>:
 800e524:	4770      	bx	lr

0800e526 <memcpy>:
 800e526:	440a      	add	r2, r1
 800e528:	4291      	cmp	r1, r2
 800e52a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e52e:	d100      	bne.n	800e532 <memcpy+0xc>
 800e530:	4770      	bx	lr
 800e532:	b510      	push	{r4, lr}
 800e534:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e53c:	4291      	cmp	r1, r2
 800e53e:	d1f9      	bne.n	800e534 <memcpy+0xe>
 800e540:	bd10      	pop	{r4, pc}
	...

0800e544 <nanf>:
 800e544:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e54c <nanf+0x8>
 800e548:	4770      	bx	lr
 800e54a:	bf00      	nop
 800e54c:	7fc00000 	.word	0x7fc00000

0800e550 <quorem>:
 800e550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e554:	6903      	ldr	r3, [r0, #16]
 800e556:	690c      	ldr	r4, [r1, #16]
 800e558:	42a3      	cmp	r3, r4
 800e55a:	4607      	mov	r7, r0
 800e55c:	db7e      	blt.n	800e65c <quorem+0x10c>
 800e55e:	3c01      	subs	r4, #1
 800e560:	f101 0814 	add.w	r8, r1, #20
 800e564:	f100 0514 	add.w	r5, r0, #20
 800e568:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e56c:	9301      	str	r3, [sp, #4]
 800e56e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e572:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e576:	3301      	adds	r3, #1
 800e578:	429a      	cmp	r2, r3
 800e57a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e57e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e582:	fbb2 f6f3 	udiv	r6, r2, r3
 800e586:	d331      	bcc.n	800e5ec <quorem+0x9c>
 800e588:	f04f 0e00 	mov.w	lr, #0
 800e58c:	4640      	mov	r0, r8
 800e58e:	46ac      	mov	ip, r5
 800e590:	46f2      	mov	sl, lr
 800e592:	f850 2b04 	ldr.w	r2, [r0], #4
 800e596:	b293      	uxth	r3, r2
 800e598:	fb06 e303 	mla	r3, r6, r3, lr
 800e59c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e5a0:	0c1a      	lsrs	r2, r3, #16
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	ebaa 0303 	sub.w	r3, sl, r3
 800e5a8:	f8dc a000 	ldr.w	sl, [ip]
 800e5ac:	fa13 f38a 	uxtah	r3, r3, sl
 800e5b0:	fb06 220e 	mla	r2, r6, lr, r2
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	9b00      	ldr	r3, [sp, #0]
 800e5b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e5bc:	b292      	uxth	r2, r2
 800e5be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e5c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e5c6:	f8bd 3000 	ldrh.w	r3, [sp]
 800e5ca:	4581      	cmp	r9, r0
 800e5cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5d0:	f84c 3b04 	str.w	r3, [ip], #4
 800e5d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e5d8:	d2db      	bcs.n	800e592 <quorem+0x42>
 800e5da:	f855 300b 	ldr.w	r3, [r5, fp]
 800e5de:	b92b      	cbnz	r3, 800e5ec <quorem+0x9c>
 800e5e0:	9b01      	ldr	r3, [sp, #4]
 800e5e2:	3b04      	subs	r3, #4
 800e5e4:	429d      	cmp	r5, r3
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	d32c      	bcc.n	800e644 <quorem+0xf4>
 800e5ea:	613c      	str	r4, [r7, #16]
 800e5ec:	4638      	mov	r0, r7
 800e5ee:	f001 f93b 	bl	800f868 <__mcmp>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	db22      	blt.n	800e63c <quorem+0xec>
 800e5f6:	3601      	adds	r6, #1
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	2000      	movs	r0, #0
 800e5fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e600:	f8d1 c000 	ldr.w	ip, [r1]
 800e604:	b293      	uxth	r3, r2
 800e606:	1ac3      	subs	r3, r0, r3
 800e608:	0c12      	lsrs	r2, r2, #16
 800e60a:	fa13 f38c 	uxtah	r3, r3, ip
 800e60e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e612:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e616:	b29b      	uxth	r3, r3
 800e618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e61c:	45c1      	cmp	r9, r8
 800e61e:	f841 3b04 	str.w	r3, [r1], #4
 800e622:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e626:	d2e9      	bcs.n	800e5fc <quorem+0xac>
 800e628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e62c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e630:	b922      	cbnz	r2, 800e63c <quorem+0xec>
 800e632:	3b04      	subs	r3, #4
 800e634:	429d      	cmp	r5, r3
 800e636:	461a      	mov	r2, r3
 800e638:	d30a      	bcc.n	800e650 <quorem+0x100>
 800e63a:	613c      	str	r4, [r7, #16]
 800e63c:	4630      	mov	r0, r6
 800e63e:	b003      	add	sp, #12
 800e640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e644:	6812      	ldr	r2, [r2, #0]
 800e646:	3b04      	subs	r3, #4
 800e648:	2a00      	cmp	r2, #0
 800e64a:	d1ce      	bne.n	800e5ea <quorem+0x9a>
 800e64c:	3c01      	subs	r4, #1
 800e64e:	e7c9      	b.n	800e5e4 <quorem+0x94>
 800e650:	6812      	ldr	r2, [r2, #0]
 800e652:	3b04      	subs	r3, #4
 800e654:	2a00      	cmp	r2, #0
 800e656:	d1f0      	bne.n	800e63a <quorem+0xea>
 800e658:	3c01      	subs	r4, #1
 800e65a:	e7eb      	b.n	800e634 <quorem+0xe4>
 800e65c:	2000      	movs	r0, #0
 800e65e:	e7ee      	b.n	800e63e <quorem+0xee>

0800e660 <_dtoa_r>:
 800e660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e664:	ed2d 8b04 	vpush	{d8-d9}
 800e668:	69c5      	ldr	r5, [r0, #28]
 800e66a:	b093      	sub	sp, #76	; 0x4c
 800e66c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e670:	ec57 6b10 	vmov	r6, r7, d0
 800e674:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e678:	9107      	str	r1, [sp, #28]
 800e67a:	4604      	mov	r4, r0
 800e67c:	920a      	str	r2, [sp, #40]	; 0x28
 800e67e:	930d      	str	r3, [sp, #52]	; 0x34
 800e680:	b975      	cbnz	r5, 800e6a0 <_dtoa_r+0x40>
 800e682:	2010      	movs	r0, #16
 800e684:	f7fe fdf8 	bl	800d278 <malloc>
 800e688:	4602      	mov	r2, r0
 800e68a:	61e0      	str	r0, [r4, #28]
 800e68c:	b920      	cbnz	r0, 800e698 <_dtoa_r+0x38>
 800e68e:	4bae      	ldr	r3, [pc, #696]	; (800e948 <_dtoa_r+0x2e8>)
 800e690:	21ef      	movs	r1, #239	; 0xef
 800e692:	48ae      	ldr	r0, [pc, #696]	; (800e94c <_dtoa_r+0x2ec>)
 800e694:	f7fe fdc0 	bl	800d218 <__assert_func>
 800e698:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e69c:	6005      	str	r5, [r0, #0]
 800e69e:	60c5      	str	r5, [r0, #12]
 800e6a0:	69e3      	ldr	r3, [r4, #28]
 800e6a2:	6819      	ldr	r1, [r3, #0]
 800e6a4:	b151      	cbz	r1, 800e6bc <_dtoa_r+0x5c>
 800e6a6:	685a      	ldr	r2, [r3, #4]
 800e6a8:	604a      	str	r2, [r1, #4]
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	4093      	lsls	r3, r2
 800e6ae:	608b      	str	r3, [r1, #8]
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f000 fe53 	bl	800f35c <_Bfree>
 800e6b6:	69e3      	ldr	r3, [r4, #28]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	601a      	str	r2, [r3, #0]
 800e6bc:	1e3b      	subs	r3, r7, #0
 800e6be:	bfbb      	ittet	lt
 800e6c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e6c4:	9303      	strlt	r3, [sp, #12]
 800e6c6:	2300      	movge	r3, #0
 800e6c8:	2201      	movlt	r2, #1
 800e6ca:	bfac      	ite	ge
 800e6cc:	f8c8 3000 	strge.w	r3, [r8]
 800e6d0:	f8c8 2000 	strlt.w	r2, [r8]
 800e6d4:	4b9e      	ldr	r3, [pc, #632]	; (800e950 <_dtoa_r+0x2f0>)
 800e6d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e6da:	ea33 0308 	bics.w	r3, r3, r8
 800e6de:	d11b      	bne.n	800e718 <_dtoa_r+0xb8>
 800e6e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6e2:	f242 730f 	movw	r3, #9999	; 0x270f
 800e6e6:	6013      	str	r3, [r2, #0]
 800e6e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e6ec:	4333      	orrs	r3, r6
 800e6ee:	f000 8593 	beq.w	800f218 <_dtoa_r+0xbb8>
 800e6f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6f4:	b963      	cbnz	r3, 800e710 <_dtoa_r+0xb0>
 800e6f6:	4b97      	ldr	r3, [pc, #604]	; (800e954 <_dtoa_r+0x2f4>)
 800e6f8:	e027      	b.n	800e74a <_dtoa_r+0xea>
 800e6fa:	4b97      	ldr	r3, [pc, #604]	; (800e958 <_dtoa_r+0x2f8>)
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	3308      	adds	r3, #8
 800e700:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e702:	6013      	str	r3, [r2, #0]
 800e704:	9800      	ldr	r0, [sp, #0]
 800e706:	b013      	add	sp, #76	; 0x4c
 800e708:	ecbd 8b04 	vpop	{d8-d9}
 800e70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e710:	4b90      	ldr	r3, [pc, #576]	; (800e954 <_dtoa_r+0x2f4>)
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	3303      	adds	r3, #3
 800e716:	e7f3      	b.n	800e700 <_dtoa_r+0xa0>
 800e718:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e71c:	2200      	movs	r2, #0
 800e71e:	ec51 0b17 	vmov	r0, r1, d7
 800e722:	eeb0 8a47 	vmov.f32	s16, s14
 800e726:	eef0 8a67 	vmov.f32	s17, s15
 800e72a:	2300      	movs	r3, #0
 800e72c:	f7f2 f9f4 	bl	8000b18 <__aeabi_dcmpeq>
 800e730:	4681      	mov	r9, r0
 800e732:	b160      	cbz	r0, 800e74e <_dtoa_r+0xee>
 800e734:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e736:	2301      	movs	r3, #1
 800e738:	6013      	str	r3, [r2, #0]
 800e73a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f000 8568 	beq.w	800f212 <_dtoa_r+0xbb2>
 800e742:	4b86      	ldr	r3, [pc, #536]	; (800e95c <_dtoa_r+0x2fc>)
 800e744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e746:	6013      	str	r3, [r2, #0]
 800e748:	3b01      	subs	r3, #1
 800e74a:	9300      	str	r3, [sp, #0]
 800e74c:	e7da      	b.n	800e704 <_dtoa_r+0xa4>
 800e74e:	aa10      	add	r2, sp, #64	; 0x40
 800e750:	a911      	add	r1, sp, #68	; 0x44
 800e752:	4620      	mov	r0, r4
 800e754:	eeb0 0a48 	vmov.f32	s0, s16
 800e758:	eef0 0a68 	vmov.f32	s1, s17
 800e75c:	f001 f99a 	bl	800fa94 <__d2b>
 800e760:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e764:	4682      	mov	sl, r0
 800e766:	2d00      	cmp	r5, #0
 800e768:	d07f      	beq.n	800e86a <_dtoa_r+0x20a>
 800e76a:	ee18 3a90 	vmov	r3, s17
 800e76e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e772:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e776:	ec51 0b18 	vmov	r0, r1, d8
 800e77a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e77e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e782:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e786:	4619      	mov	r1, r3
 800e788:	2200      	movs	r2, #0
 800e78a:	4b75      	ldr	r3, [pc, #468]	; (800e960 <_dtoa_r+0x300>)
 800e78c:	f7f1 fda4 	bl	80002d8 <__aeabi_dsub>
 800e790:	a367      	add	r3, pc, #412	; (adr r3, 800e930 <_dtoa_r+0x2d0>)
 800e792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e796:	f7f1 ff57 	bl	8000648 <__aeabi_dmul>
 800e79a:	a367      	add	r3, pc, #412	; (adr r3, 800e938 <_dtoa_r+0x2d8>)
 800e79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a0:	f7f1 fd9c 	bl	80002dc <__adddf3>
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	460f      	mov	r7, r1
 800e7aa:	f7f1 fee3 	bl	8000574 <__aeabi_i2d>
 800e7ae:	a364      	add	r3, pc, #400	; (adr r3, 800e940 <_dtoa_r+0x2e0>)
 800e7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b4:	f7f1 ff48 	bl	8000648 <__aeabi_dmul>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	4630      	mov	r0, r6
 800e7be:	4639      	mov	r1, r7
 800e7c0:	f7f1 fd8c 	bl	80002dc <__adddf3>
 800e7c4:	4606      	mov	r6, r0
 800e7c6:	460f      	mov	r7, r1
 800e7c8:	f7f2 f9ee 	bl	8000ba8 <__aeabi_d2iz>
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	4683      	mov	fp, r0
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	4630      	mov	r0, r6
 800e7d4:	4639      	mov	r1, r7
 800e7d6:	f7f2 f9a9 	bl	8000b2c <__aeabi_dcmplt>
 800e7da:	b148      	cbz	r0, 800e7f0 <_dtoa_r+0x190>
 800e7dc:	4658      	mov	r0, fp
 800e7de:	f7f1 fec9 	bl	8000574 <__aeabi_i2d>
 800e7e2:	4632      	mov	r2, r6
 800e7e4:	463b      	mov	r3, r7
 800e7e6:	f7f2 f997 	bl	8000b18 <__aeabi_dcmpeq>
 800e7ea:	b908      	cbnz	r0, 800e7f0 <_dtoa_r+0x190>
 800e7ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e7f0:	f1bb 0f16 	cmp.w	fp, #22
 800e7f4:	d857      	bhi.n	800e8a6 <_dtoa_r+0x246>
 800e7f6:	4b5b      	ldr	r3, [pc, #364]	; (800e964 <_dtoa_r+0x304>)
 800e7f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e800:	ec51 0b18 	vmov	r0, r1, d8
 800e804:	f7f2 f992 	bl	8000b2c <__aeabi_dcmplt>
 800e808:	2800      	cmp	r0, #0
 800e80a:	d04e      	beq.n	800e8aa <_dtoa_r+0x24a>
 800e80c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e810:	2300      	movs	r3, #0
 800e812:	930c      	str	r3, [sp, #48]	; 0x30
 800e814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e816:	1b5b      	subs	r3, r3, r5
 800e818:	1e5a      	subs	r2, r3, #1
 800e81a:	bf45      	ittet	mi
 800e81c:	f1c3 0301 	rsbmi	r3, r3, #1
 800e820:	9305      	strmi	r3, [sp, #20]
 800e822:	2300      	movpl	r3, #0
 800e824:	2300      	movmi	r3, #0
 800e826:	9206      	str	r2, [sp, #24]
 800e828:	bf54      	ite	pl
 800e82a:	9305      	strpl	r3, [sp, #20]
 800e82c:	9306      	strmi	r3, [sp, #24]
 800e82e:	f1bb 0f00 	cmp.w	fp, #0
 800e832:	db3c      	blt.n	800e8ae <_dtoa_r+0x24e>
 800e834:	9b06      	ldr	r3, [sp, #24]
 800e836:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e83a:	445b      	add	r3, fp
 800e83c:	9306      	str	r3, [sp, #24]
 800e83e:	2300      	movs	r3, #0
 800e840:	9308      	str	r3, [sp, #32]
 800e842:	9b07      	ldr	r3, [sp, #28]
 800e844:	2b09      	cmp	r3, #9
 800e846:	d868      	bhi.n	800e91a <_dtoa_r+0x2ba>
 800e848:	2b05      	cmp	r3, #5
 800e84a:	bfc4      	itt	gt
 800e84c:	3b04      	subgt	r3, #4
 800e84e:	9307      	strgt	r3, [sp, #28]
 800e850:	9b07      	ldr	r3, [sp, #28]
 800e852:	f1a3 0302 	sub.w	r3, r3, #2
 800e856:	bfcc      	ite	gt
 800e858:	2500      	movgt	r5, #0
 800e85a:	2501      	movle	r5, #1
 800e85c:	2b03      	cmp	r3, #3
 800e85e:	f200 8085 	bhi.w	800e96c <_dtoa_r+0x30c>
 800e862:	e8df f003 	tbb	[pc, r3]
 800e866:	3b2e      	.short	0x3b2e
 800e868:	5839      	.short	0x5839
 800e86a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e86e:	441d      	add	r5, r3
 800e870:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e874:	2b20      	cmp	r3, #32
 800e876:	bfc1      	itttt	gt
 800e878:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e87c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e880:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e884:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e888:	bfd6      	itet	le
 800e88a:	f1c3 0320 	rsble	r3, r3, #32
 800e88e:	ea48 0003 	orrgt.w	r0, r8, r3
 800e892:	fa06 f003 	lslle.w	r0, r6, r3
 800e896:	f7f1 fe5d 	bl	8000554 <__aeabi_ui2d>
 800e89a:	2201      	movs	r2, #1
 800e89c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e8a0:	3d01      	subs	r5, #1
 800e8a2:	920e      	str	r2, [sp, #56]	; 0x38
 800e8a4:	e76f      	b.n	800e786 <_dtoa_r+0x126>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	e7b3      	b.n	800e812 <_dtoa_r+0x1b2>
 800e8aa:	900c      	str	r0, [sp, #48]	; 0x30
 800e8ac:	e7b2      	b.n	800e814 <_dtoa_r+0x1b4>
 800e8ae:	9b05      	ldr	r3, [sp, #20]
 800e8b0:	eba3 030b 	sub.w	r3, r3, fp
 800e8b4:	9305      	str	r3, [sp, #20]
 800e8b6:	f1cb 0300 	rsb	r3, fp, #0
 800e8ba:	9308      	str	r3, [sp, #32]
 800e8bc:	2300      	movs	r3, #0
 800e8be:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8c0:	e7bf      	b.n	800e842 <_dtoa_r+0x1e2>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	dc52      	bgt.n	800e972 <_dtoa_r+0x312>
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	9301      	str	r3, [sp, #4]
 800e8d0:	9304      	str	r3, [sp, #16]
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	920a      	str	r2, [sp, #40]	; 0x28
 800e8d6:	e00b      	b.n	800e8f0 <_dtoa_r+0x290>
 800e8d8:	2301      	movs	r3, #1
 800e8da:	e7f3      	b.n	800e8c4 <_dtoa_r+0x264>
 800e8dc:	2300      	movs	r3, #0
 800e8de:	9309      	str	r3, [sp, #36]	; 0x24
 800e8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8e2:	445b      	add	r3, fp
 800e8e4:	9301      	str	r3, [sp, #4]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	9304      	str	r3, [sp, #16]
 800e8ec:	bfb8      	it	lt
 800e8ee:	2301      	movlt	r3, #1
 800e8f0:	69e0      	ldr	r0, [r4, #28]
 800e8f2:	2100      	movs	r1, #0
 800e8f4:	2204      	movs	r2, #4
 800e8f6:	f102 0614 	add.w	r6, r2, #20
 800e8fa:	429e      	cmp	r6, r3
 800e8fc:	d93d      	bls.n	800e97a <_dtoa_r+0x31a>
 800e8fe:	6041      	str	r1, [r0, #4]
 800e900:	4620      	mov	r0, r4
 800e902:	f000 fceb 	bl	800f2dc <_Balloc>
 800e906:	9000      	str	r0, [sp, #0]
 800e908:	2800      	cmp	r0, #0
 800e90a:	d139      	bne.n	800e980 <_dtoa_r+0x320>
 800e90c:	4b16      	ldr	r3, [pc, #88]	; (800e968 <_dtoa_r+0x308>)
 800e90e:	4602      	mov	r2, r0
 800e910:	f240 11af 	movw	r1, #431	; 0x1af
 800e914:	e6bd      	b.n	800e692 <_dtoa_r+0x32>
 800e916:	2301      	movs	r3, #1
 800e918:	e7e1      	b.n	800e8de <_dtoa_r+0x27e>
 800e91a:	2501      	movs	r5, #1
 800e91c:	2300      	movs	r3, #0
 800e91e:	9307      	str	r3, [sp, #28]
 800e920:	9509      	str	r5, [sp, #36]	; 0x24
 800e922:	f04f 33ff 	mov.w	r3, #4294967295
 800e926:	9301      	str	r3, [sp, #4]
 800e928:	9304      	str	r3, [sp, #16]
 800e92a:	2200      	movs	r2, #0
 800e92c:	2312      	movs	r3, #18
 800e92e:	e7d1      	b.n	800e8d4 <_dtoa_r+0x274>
 800e930:	636f4361 	.word	0x636f4361
 800e934:	3fd287a7 	.word	0x3fd287a7
 800e938:	8b60c8b3 	.word	0x8b60c8b3
 800e93c:	3fc68a28 	.word	0x3fc68a28
 800e940:	509f79fb 	.word	0x509f79fb
 800e944:	3fd34413 	.word	0x3fd34413
 800e948:	08012b72 	.word	0x08012b72
 800e94c:	08012b89 	.word	0x08012b89
 800e950:	7ff00000 	.word	0x7ff00000
 800e954:	08012b6e 	.word	0x08012b6e
 800e958:	08012b65 	.word	0x08012b65
 800e95c:	08012b3d 	.word	0x08012b3d
 800e960:	3ff80000 	.word	0x3ff80000
 800e964:	08012c78 	.word	0x08012c78
 800e968:	08012be1 	.word	0x08012be1
 800e96c:	2301      	movs	r3, #1
 800e96e:	9309      	str	r3, [sp, #36]	; 0x24
 800e970:	e7d7      	b.n	800e922 <_dtoa_r+0x2c2>
 800e972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e974:	9301      	str	r3, [sp, #4]
 800e976:	9304      	str	r3, [sp, #16]
 800e978:	e7ba      	b.n	800e8f0 <_dtoa_r+0x290>
 800e97a:	3101      	adds	r1, #1
 800e97c:	0052      	lsls	r2, r2, #1
 800e97e:	e7ba      	b.n	800e8f6 <_dtoa_r+0x296>
 800e980:	69e3      	ldr	r3, [r4, #28]
 800e982:	9a00      	ldr	r2, [sp, #0]
 800e984:	601a      	str	r2, [r3, #0]
 800e986:	9b04      	ldr	r3, [sp, #16]
 800e988:	2b0e      	cmp	r3, #14
 800e98a:	f200 80a8 	bhi.w	800eade <_dtoa_r+0x47e>
 800e98e:	2d00      	cmp	r5, #0
 800e990:	f000 80a5 	beq.w	800eade <_dtoa_r+0x47e>
 800e994:	f1bb 0f00 	cmp.w	fp, #0
 800e998:	dd38      	ble.n	800ea0c <_dtoa_r+0x3ac>
 800e99a:	4bc0      	ldr	r3, [pc, #768]	; (800ec9c <_dtoa_r+0x63c>)
 800e99c:	f00b 020f 	and.w	r2, fp, #15
 800e9a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e9a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e9ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e9b0:	d019      	beq.n	800e9e6 <_dtoa_r+0x386>
 800e9b2:	4bbb      	ldr	r3, [pc, #748]	; (800eca0 <_dtoa_r+0x640>)
 800e9b4:	ec51 0b18 	vmov	r0, r1, d8
 800e9b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e9bc:	f7f1 ff6e 	bl	800089c <__aeabi_ddiv>
 800e9c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9c4:	f008 080f 	and.w	r8, r8, #15
 800e9c8:	2503      	movs	r5, #3
 800e9ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800eca0 <_dtoa_r+0x640>
 800e9ce:	f1b8 0f00 	cmp.w	r8, #0
 800e9d2:	d10a      	bne.n	800e9ea <_dtoa_r+0x38a>
 800e9d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9d8:	4632      	mov	r2, r6
 800e9da:	463b      	mov	r3, r7
 800e9dc:	f7f1 ff5e 	bl	800089c <__aeabi_ddiv>
 800e9e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9e4:	e02b      	b.n	800ea3e <_dtoa_r+0x3de>
 800e9e6:	2502      	movs	r5, #2
 800e9e8:	e7ef      	b.n	800e9ca <_dtoa_r+0x36a>
 800e9ea:	f018 0f01 	tst.w	r8, #1
 800e9ee:	d008      	beq.n	800ea02 <_dtoa_r+0x3a2>
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	4639      	mov	r1, r7
 800e9f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e9f8:	f7f1 fe26 	bl	8000648 <__aeabi_dmul>
 800e9fc:	3501      	adds	r5, #1
 800e9fe:	4606      	mov	r6, r0
 800ea00:	460f      	mov	r7, r1
 800ea02:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ea06:	f109 0908 	add.w	r9, r9, #8
 800ea0a:	e7e0      	b.n	800e9ce <_dtoa_r+0x36e>
 800ea0c:	f000 809f 	beq.w	800eb4e <_dtoa_r+0x4ee>
 800ea10:	f1cb 0600 	rsb	r6, fp, #0
 800ea14:	4ba1      	ldr	r3, [pc, #644]	; (800ec9c <_dtoa_r+0x63c>)
 800ea16:	4fa2      	ldr	r7, [pc, #648]	; (800eca0 <_dtoa_r+0x640>)
 800ea18:	f006 020f 	and.w	r2, r6, #15
 800ea1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea24:	ec51 0b18 	vmov	r0, r1, d8
 800ea28:	f7f1 fe0e 	bl	8000648 <__aeabi_dmul>
 800ea2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea30:	1136      	asrs	r6, r6, #4
 800ea32:	2300      	movs	r3, #0
 800ea34:	2502      	movs	r5, #2
 800ea36:	2e00      	cmp	r6, #0
 800ea38:	d17e      	bne.n	800eb38 <_dtoa_r+0x4d8>
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d1d0      	bne.n	800e9e0 <_dtoa_r+0x380>
 800ea3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f000 8084 	beq.w	800eb52 <_dtoa_r+0x4f2>
 800ea4a:	4b96      	ldr	r3, [pc, #600]	; (800eca4 <_dtoa_r+0x644>)
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	4640      	mov	r0, r8
 800ea50:	4649      	mov	r1, r9
 800ea52:	f7f2 f86b 	bl	8000b2c <__aeabi_dcmplt>
 800ea56:	2800      	cmp	r0, #0
 800ea58:	d07b      	beq.n	800eb52 <_dtoa_r+0x4f2>
 800ea5a:	9b04      	ldr	r3, [sp, #16]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d078      	beq.n	800eb52 <_dtoa_r+0x4f2>
 800ea60:	9b01      	ldr	r3, [sp, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	dd39      	ble.n	800eada <_dtoa_r+0x47a>
 800ea66:	4b90      	ldr	r3, [pc, #576]	; (800eca8 <_dtoa_r+0x648>)
 800ea68:	2200      	movs	r2, #0
 800ea6a:	4640      	mov	r0, r8
 800ea6c:	4649      	mov	r1, r9
 800ea6e:	f7f1 fdeb 	bl	8000648 <__aeabi_dmul>
 800ea72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea76:	9e01      	ldr	r6, [sp, #4]
 800ea78:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ea7c:	3501      	adds	r5, #1
 800ea7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ea82:	4628      	mov	r0, r5
 800ea84:	f7f1 fd76 	bl	8000574 <__aeabi_i2d>
 800ea88:	4642      	mov	r2, r8
 800ea8a:	464b      	mov	r3, r9
 800ea8c:	f7f1 fddc 	bl	8000648 <__aeabi_dmul>
 800ea90:	4b86      	ldr	r3, [pc, #536]	; (800ecac <_dtoa_r+0x64c>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	f7f1 fc22 	bl	80002dc <__adddf3>
 800ea98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ea9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eaa0:	9303      	str	r3, [sp, #12]
 800eaa2:	2e00      	cmp	r6, #0
 800eaa4:	d158      	bne.n	800eb58 <_dtoa_r+0x4f8>
 800eaa6:	4b82      	ldr	r3, [pc, #520]	; (800ecb0 <_dtoa_r+0x650>)
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	4640      	mov	r0, r8
 800eaac:	4649      	mov	r1, r9
 800eaae:	f7f1 fc13 	bl	80002d8 <__aeabi_dsub>
 800eab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eab6:	4680      	mov	r8, r0
 800eab8:	4689      	mov	r9, r1
 800eaba:	f7f2 f855 	bl	8000b68 <__aeabi_dcmpgt>
 800eabe:	2800      	cmp	r0, #0
 800eac0:	f040 8296 	bne.w	800eff0 <_dtoa_r+0x990>
 800eac4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eac8:	4640      	mov	r0, r8
 800eaca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eace:	4649      	mov	r1, r9
 800ead0:	f7f2 f82c 	bl	8000b2c <__aeabi_dcmplt>
 800ead4:	2800      	cmp	r0, #0
 800ead6:	f040 8289 	bne.w	800efec <_dtoa_r+0x98c>
 800eada:	ed8d 8b02 	vstr	d8, [sp, #8]
 800eade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f2c0 814e 	blt.w	800ed82 <_dtoa_r+0x722>
 800eae6:	f1bb 0f0e 	cmp.w	fp, #14
 800eaea:	f300 814a 	bgt.w	800ed82 <_dtoa_r+0x722>
 800eaee:	4b6b      	ldr	r3, [pc, #428]	; (800ec9c <_dtoa_r+0x63c>)
 800eaf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eaf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eaf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f280 80dc 	bge.w	800ecb8 <_dtoa_r+0x658>
 800eb00:	9b04      	ldr	r3, [sp, #16]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f300 80d8 	bgt.w	800ecb8 <_dtoa_r+0x658>
 800eb08:	f040 826f 	bne.w	800efea <_dtoa_r+0x98a>
 800eb0c:	4b68      	ldr	r3, [pc, #416]	; (800ecb0 <_dtoa_r+0x650>)
 800eb0e:	2200      	movs	r2, #0
 800eb10:	4640      	mov	r0, r8
 800eb12:	4649      	mov	r1, r9
 800eb14:	f7f1 fd98 	bl	8000648 <__aeabi_dmul>
 800eb18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb1c:	f7f2 f81a 	bl	8000b54 <__aeabi_dcmpge>
 800eb20:	9e04      	ldr	r6, [sp, #16]
 800eb22:	4637      	mov	r7, r6
 800eb24:	2800      	cmp	r0, #0
 800eb26:	f040 8245 	bne.w	800efb4 <_dtoa_r+0x954>
 800eb2a:	9d00      	ldr	r5, [sp, #0]
 800eb2c:	2331      	movs	r3, #49	; 0x31
 800eb2e:	f805 3b01 	strb.w	r3, [r5], #1
 800eb32:	f10b 0b01 	add.w	fp, fp, #1
 800eb36:	e241      	b.n	800efbc <_dtoa_r+0x95c>
 800eb38:	07f2      	lsls	r2, r6, #31
 800eb3a:	d505      	bpl.n	800eb48 <_dtoa_r+0x4e8>
 800eb3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb40:	f7f1 fd82 	bl	8000648 <__aeabi_dmul>
 800eb44:	3501      	adds	r5, #1
 800eb46:	2301      	movs	r3, #1
 800eb48:	1076      	asrs	r6, r6, #1
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	e773      	b.n	800ea36 <_dtoa_r+0x3d6>
 800eb4e:	2502      	movs	r5, #2
 800eb50:	e775      	b.n	800ea3e <_dtoa_r+0x3de>
 800eb52:	9e04      	ldr	r6, [sp, #16]
 800eb54:	465f      	mov	r7, fp
 800eb56:	e792      	b.n	800ea7e <_dtoa_r+0x41e>
 800eb58:	9900      	ldr	r1, [sp, #0]
 800eb5a:	4b50      	ldr	r3, [pc, #320]	; (800ec9c <_dtoa_r+0x63c>)
 800eb5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eb60:	4431      	add	r1, r6
 800eb62:	9102      	str	r1, [sp, #8]
 800eb64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb66:	eeb0 9a47 	vmov.f32	s18, s14
 800eb6a:	eef0 9a67 	vmov.f32	s19, s15
 800eb6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eb72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eb76:	2900      	cmp	r1, #0
 800eb78:	d044      	beq.n	800ec04 <_dtoa_r+0x5a4>
 800eb7a:	494e      	ldr	r1, [pc, #312]	; (800ecb4 <_dtoa_r+0x654>)
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	f7f1 fe8d 	bl	800089c <__aeabi_ddiv>
 800eb82:	ec53 2b19 	vmov	r2, r3, d9
 800eb86:	f7f1 fba7 	bl	80002d8 <__aeabi_dsub>
 800eb8a:	9d00      	ldr	r5, [sp, #0]
 800eb8c:	ec41 0b19 	vmov	d9, r0, r1
 800eb90:	4649      	mov	r1, r9
 800eb92:	4640      	mov	r0, r8
 800eb94:	f7f2 f808 	bl	8000ba8 <__aeabi_d2iz>
 800eb98:	4606      	mov	r6, r0
 800eb9a:	f7f1 fceb 	bl	8000574 <__aeabi_i2d>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	460b      	mov	r3, r1
 800eba2:	4640      	mov	r0, r8
 800eba4:	4649      	mov	r1, r9
 800eba6:	f7f1 fb97 	bl	80002d8 <__aeabi_dsub>
 800ebaa:	3630      	adds	r6, #48	; 0x30
 800ebac:	f805 6b01 	strb.w	r6, [r5], #1
 800ebb0:	ec53 2b19 	vmov	r2, r3, d9
 800ebb4:	4680      	mov	r8, r0
 800ebb6:	4689      	mov	r9, r1
 800ebb8:	f7f1 ffb8 	bl	8000b2c <__aeabi_dcmplt>
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	d164      	bne.n	800ec8a <_dtoa_r+0x62a>
 800ebc0:	4642      	mov	r2, r8
 800ebc2:	464b      	mov	r3, r9
 800ebc4:	4937      	ldr	r1, [pc, #220]	; (800eca4 <_dtoa_r+0x644>)
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	f7f1 fb86 	bl	80002d8 <__aeabi_dsub>
 800ebcc:	ec53 2b19 	vmov	r2, r3, d9
 800ebd0:	f7f1 ffac 	bl	8000b2c <__aeabi_dcmplt>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	f040 80b6 	bne.w	800ed46 <_dtoa_r+0x6e6>
 800ebda:	9b02      	ldr	r3, [sp, #8]
 800ebdc:	429d      	cmp	r5, r3
 800ebde:	f43f af7c 	beq.w	800eada <_dtoa_r+0x47a>
 800ebe2:	4b31      	ldr	r3, [pc, #196]	; (800eca8 <_dtoa_r+0x648>)
 800ebe4:	ec51 0b19 	vmov	r0, r1, d9
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f7f1 fd2d 	bl	8000648 <__aeabi_dmul>
 800ebee:	4b2e      	ldr	r3, [pc, #184]	; (800eca8 <_dtoa_r+0x648>)
 800ebf0:	ec41 0b19 	vmov	d9, r0, r1
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	4640      	mov	r0, r8
 800ebf8:	4649      	mov	r1, r9
 800ebfa:	f7f1 fd25 	bl	8000648 <__aeabi_dmul>
 800ebfe:	4680      	mov	r8, r0
 800ec00:	4689      	mov	r9, r1
 800ec02:	e7c5      	b.n	800eb90 <_dtoa_r+0x530>
 800ec04:	ec51 0b17 	vmov	r0, r1, d7
 800ec08:	f7f1 fd1e 	bl	8000648 <__aeabi_dmul>
 800ec0c:	9b02      	ldr	r3, [sp, #8]
 800ec0e:	9d00      	ldr	r5, [sp, #0]
 800ec10:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec12:	ec41 0b19 	vmov	d9, r0, r1
 800ec16:	4649      	mov	r1, r9
 800ec18:	4640      	mov	r0, r8
 800ec1a:	f7f1 ffc5 	bl	8000ba8 <__aeabi_d2iz>
 800ec1e:	4606      	mov	r6, r0
 800ec20:	f7f1 fca8 	bl	8000574 <__aeabi_i2d>
 800ec24:	3630      	adds	r6, #48	; 0x30
 800ec26:	4602      	mov	r2, r0
 800ec28:	460b      	mov	r3, r1
 800ec2a:	4640      	mov	r0, r8
 800ec2c:	4649      	mov	r1, r9
 800ec2e:	f7f1 fb53 	bl	80002d8 <__aeabi_dsub>
 800ec32:	f805 6b01 	strb.w	r6, [r5], #1
 800ec36:	9b02      	ldr	r3, [sp, #8]
 800ec38:	429d      	cmp	r5, r3
 800ec3a:	4680      	mov	r8, r0
 800ec3c:	4689      	mov	r9, r1
 800ec3e:	f04f 0200 	mov.w	r2, #0
 800ec42:	d124      	bne.n	800ec8e <_dtoa_r+0x62e>
 800ec44:	4b1b      	ldr	r3, [pc, #108]	; (800ecb4 <_dtoa_r+0x654>)
 800ec46:	ec51 0b19 	vmov	r0, r1, d9
 800ec4a:	f7f1 fb47 	bl	80002dc <__adddf3>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	460b      	mov	r3, r1
 800ec52:	4640      	mov	r0, r8
 800ec54:	4649      	mov	r1, r9
 800ec56:	f7f1 ff87 	bl	8000b68 <__aeabi_dcmpgt>
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	d173      	bne.n	800ed46 <_dtoa_r+0x6e6>
 800ec5e:	ec53 2b19 	vmov	r2, r3, d9
 800ec62:	4914      	ldr	r1, [pc, #80]	; (800ecb4 <_dtoa_r+0x654>)
 800ec64:	2000      	movs	r0, #0
 800ec66:	f7f1 fb37 	bl	80002d8 <__aeabi_dsub>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	4640      	mov	r0, r8
 800ec70:	4649      	mov	r1, r9
 800ec72:	f7f1 ff5b 	bl	8000b2c <__aeabi_dcmplt>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	f43f af2f 	beq.w	800eada <_dtoa_r+0x47a>
 800ec7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ec7e:	1e6b      	subs	r3, r5, #1
 800ec80:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ec86:	2b30      	cmp	r3, #48	; 0x30
 800ec88:	d0f8      	beq.n	800ec7c <_dtoa_r+0x61c>
 800ec8a:	46bb      	mov	fp, r7
 800ec8c:	e04a      	b.n	800ed24 <_dtoa_r+0x6c4>
 800ec8e:	4b06      	ldr	r3, [pc, #24]	; (800eca8 <_dtoa_r+0x648>)
 800ec90:	f7f1 fcda 	bl	8000648 <__aeabi_dmul>
 800ec94:	4680      	mov	r8, r0
 800ec96:	4689      	mov	r9, r1
 800ec98:	e7bd      	b.n	800ec16 <_dtoa_r+0x5b6>
 800ec9a:	bf00      	nop
 800ec9c:	08012c78 	.word	0x08012c78
 800eca0:	08012c50 	.word	0x08012c50
 800eca4:	3ff00000 	.word	0x3ff00000
 800eca8:	40240000 	.word	0x40240000
 800ecac:	401c0000 	.word	0x401c0000
 800ecb0:	40140000 	.word	0x40140000
 800ecb4:	3fe00000 	.word	0x3fe00000
 800ecb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ecbc:	9d00      	ldr	r5, [sp, #0]
 800ecbe:	4642      	mov	r2, r8
 800ecc0:	464b      	mov	r3, r9
 800ecc2:	4630      	mov	r0, r6
 800ecc4:	4639      	mov	r1, r7
 800ecc6:	f7f1 fde9 	bl	800089c <__aeabi_ddiv>
 800ecca:	f7f1 ff6d 	bl	8000ba8 <__aeabi_d2iz>
 800ecce:	9001      	str	r0, [sp, #4]
 800ecd0:	f7f1 fc50 	bl	8000574 <__aeabi_i2d>
 800ecd4:	4642      	mov	r2, r8
 800ecd6:	464b      	mov	r3, r9
 800ecd8:	f7f1 fcb6 	bl	8000648 <__aeabi_dmul>
 800ecdc:	4602      	mov	r2, r0
 800ecde:	460b      	mov	r3, r1
 800ece0:	4630      	mov	r0, r6
 800ece2:	4639      	mov	r1, r7
 800ece4:	f7f1 faf8 	bl	80002d8 <__aeabi_dsub>
 800ece8:	9e01      	ldr	r6, [sp, #4]
 800ecea:	9f04      	ldr	r7, [sp, #16]
 800ecec:	3630      	adds	r6, #48	; 0x30
 800ecee:	f805 6b01 	strb.w	r6, [r5], #1
 800ecf2:	9e00      	ldr	r6, [sp, #0]
 800ecf4:	1bae      	subs	r6, r5, r6
 800ecf6:	42b7      	cmp	r7, r6
 800ecf8:	4602      	mov	r2, r0
 800ecfa:	460b      	mov	r3, r1
 800ecfc:	d134      	bne.n	800ed68 <_dtoa_r+0x708>
 800ecfe:	f7f1 faed 	bl	80002dc <__adddf3>
 800ed02:	4642      	mov	r2, r8
 800ed04:	464b      	mov	r3, r9
 800ed06:	4606      	mov	r6, r0
 800ed08:	460f      	mov	r7, r1
 800ed0a:	f7f1 ff2d 	bl	8000b68 <__aeabi_dcmpgt>
 800ed0e:	b9c8      	cbnz	r0, 800ed44 <_dtoa_r+0x6e4>
 800ed10:	4642      	mov	r2, r8
 800ed12:	464b      	mov	r3, r9
 800ed14:	4630      	mov	r0, r6
 800ed16:	4639      	mov	r1, r7
 800ed18:	f7f1 fefe 	bl	8000b18 <__aeabi_dcmpeq>
 800ed1c:	b110      	cbz	r0, 800ed24 <_dtoa_r+0x6c4>
 800ed1e:	9b01      	ldr	r3, [sp, #4]
 800ed20:	07db      	lsls	r3, r3, #31
 800ed22:	d40f      	bmi.n	800ed44 <_dtoa_r+0x6e4>
 800ed24:	4651      	mov	r1, sl
 800ed26:	4620      	mov	r0, r4
 800ed28:	f000 fb18 	bl	800f35c <_Bfree>
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed30:	702b      	strb	r3, [r5, #0]
 800ed32:	f10b 0301 	add.w	r3, fp, #1
 800ed36:	6013      	str	r3, [r2, #0]
 800ed38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	f43f ace2 	beq.w	800e704 <_dtoa_r+0xa4>
 800ed40:	601d      	str	r5, [r3, #0]
 800ed42:	e4df      	b.n	800e704 <_dtoa_r+0xa4>
 800ed44:	465f      	mov	r7, fp
 800ed46:	462b      	mov	r3, r5
 800ed48:	461d      	mov	r5, r3
 800ed4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed4e:	2a39      	cmp	r2, #57	; 0x39
 800ed50:	d106      	bne.n	800ed60 <_dtoa_r+0x700>
 800ed52:	9a00      	ldr	r2, [sp, #0]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d1f7      	bne.n	800ed48 <_dtoa_r+0x6e8>
 800ed58:	9900      	ldr	r1, [sp, #0]
 800ed5a:	2230      	movs	r2, #48	; 0x30
 800ed5c:	3701      	adds	r7, #1
 800ed5e:	700a      	strb	r2, [r1, #0]
 800ed60:	781a      	ldrb	r2, [r3, #0]
 800ed62:	3201      	adds	r2, #1
 800ed64:	701a      	strb	r2, [r3, #0]
 800ed66:	e790      	b.n	800ec8a <_dtoa_r+0x62a>
 800ed68:	4ba3      	ldr	r3, [pc, #652]	; (800eff8 <_dtoa_r+0x998>)
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f7f1 fc6c 	bl	8000648 <__aeabi_dmul>
 800ed70:	2200      	movs	r2, #0
 800ed72:	2300      	movs	r3, #0
 800ed74:	4606      	mov	r6, r0
 800ed76:	460f      	mov	r7, r1
 800ed78:	f7f1 fece 	bl	8000b18 <__aeabi_dcmpeq>
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	d09e      	beq.n	800ecbe <_dtoa_r+0x65e>
 800ed80:	e7d0      	b.n	800ed24 <_dtoa_r+0x6c4>
 800ed82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed84:	2a00      	cmp	r2, #0
 800ed86:	f000 80ca 	beq.w	800ef1e <_dtoa_r+0x8be>
 800ed8a:	9a07      	ldr	r2, [sp, #28]
 800ed8c:	2a01      	cmp	r2, #1
 800ed8e:	f300 80ad 	bgt.w	800eeec <_dtoa_r+0x88c>
 800ed92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed94:	2a00      	cmp	r2, #0
 800ed96:	f000 80a5 	beq.w	800eee4 <_dtoa_r+0x884>
 800ed9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ed9e:	9e08      	ldr	r6, [sp, #32]
 800eda0:	9d05      	ldr	r5, [sp, #20]
 800eda2:	9a05      	ldr	r2, [sp, #20]
 800eda4:	441a      	add	r2, r3
 800eda6:	9205      	str	r2, [sp, #20]
 800eda8:	9a06      	ldr	r2, [sp, #24]
 800edaa:	2101      	movs	r1, #1
 800edac:	441a      	add	r2, r3
 800edae:	4620      	mov	r0, r4
 800edb0:	9206      	str	r2, [sp, #24]
 800edb2:	f000 fbd3 	bl	800f55c <__i2b>
 800edb6:	4607      	mov	r7, r0
 800edb8:	b165      	cbz	r5, 800edd4 <_dtoa_r+0x774>
 800edba:	9b06      	ldr	r3, [sp, #24]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	dd09      	ble.n	800edd4 <_dtoa_r+0x774>
 800edc0:	42ab      	cmp	r3, r5
 800edc2:	9a05      	ldr	r2, [sp, #20]
 800edc4:	bfa8      	it	ge
 800edc6:	462b      	movge	r3, r5
 800edc8:	1ad2      	subs	r2, r2, r3
 800edca:	9205      	str	r2, [sp, #20]
 800edcc:	9a06      	ldr	r2, [sp, #24]
 800edce:	1aed      	subs	r5, r5, r3
 800edd0:	1ad3      	subs	r3, r2, r3
 800edd2:	9306      	str	r3, [sp, #24]
 800edd4:	9b08      	ldr	r3, [sp, #32]
 800edd6:	b1f3      	cbz	r3, 800ee16 <_dtoa_r+0x7b6>
 800edd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edda:	2b00      	cmp	r3, #0
 800eddc:	f000 80a3 	beq.w	800ef26 <_dtoa_r+0x8c6>
 800ede0:	2e00      	cmp	r6, #0
 800ede2:	dd10      	ble.n	800ee06 <_dtoa_r+0x7a6>
 800ede4:	4639      	mov	r1, r7
 800ede6:	4632      	mov	r2, r6
 800ede8:	4620      	mov	r0, r4
 800edea:	f000 fc77 	bl	800f6dc <__pow5mult>
 800edee:	4652      	mov	r2, sl
 800edf0:	4601      	mov	r1, r0
 800edf2:	4607      	mov	r7, r0
 800edf4:	4620      	mov	r0, r4
 800edf6:	f000 fbc7 	bl	800f588 <__multiply>
 800edfa:	4651      	mov	r1, sl
 800edfc:	4680      	mov	r8, r0
 800edfe:	4620      	mov	r0, r4
 800ee00:	f000 faac 	bl	800f35c <_Bfree>
 800ee04:	46c2      	mov	sl, r8
 800ee06:	9b08      	ldr	r3, [sp, #32]
 800ee08:	1b9a      	subs	r2, r3, r6
 800ee0a:	d004      	beq.n	800ee16 <_dtoa_r+0x7b6>
 800ee0c:	4651      	mov	r1, sl
 800ee0e:	4620      	mov	r0, r4
 800ee10:	f000 fc64 	bl	800f6dc <__pow5mult>
 800ee14:	4682      	mov	sl, r0
 800ee16:	2101      	movs	r1, #1
 800ee18:	4620      	mov	r0, r4
 800ee1a:	f000 fb9f 	bl	800f55c <__i2b>
 800ee1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	4606      	mov	r6, r0
 800ee24:	f340 8081 	ble.w	800ef2a <_dtoa_r+0x8ca>
 800ee28:	461a      	mov	r2, r3
 800ee2a:	4601      	mov	r1, r0
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	f000 fc55 	bl	800f6dc <__pow5mult>
 800ee32:	9b07      	ldr	r3, [sp, #28]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	4606      	mov	r6, r0
 800ee38:	dd7a      	ble.n	800ef30 <_dtoa_r+0x8d0>
 800ee3a:	f04f 0800 	mov.w	r8, #0
 800ee3e:	6933      	ldr	r3, [r6, #16]
 800ee40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ee44:	6918      	ldr	r0, [r3, #16]
 800ee46:	f000 fb3b 	bl	800f4c0 <__hi0bits>
 800ee4a:	f1c0 0020 	rsb	r0, r0, #32
 800ee4e:	9b06      	ldr	r3, [sp, #24]
 800ee50:	4418      	add	r0, r3
 800ee52:	f010 001f 	ands.w	r0, r0, #31
 800ee56:	f000 8094 	beq.w	800ef82 <_dtoa_r+0x922>
 800ee5a:	f1c0 0320 	rsb	r3, r0, #32
 800ee5e:	2b04      	cmp	r3, #4
 800ee60:	f340 8085 	ble.w	800ef6e <_dtoa_r+0x90e>
 800ee64:	9b05      	ldr	r3, [sp, #20]
 800ee66:	f1c0 001c 	rsb	r0, r0, #28
 800ee6a:	4403      	add	r3, r0
 800ee6c:	9305      	str	r3, [sp, #20]
 800ee6e:	9b06      	ldr	r3, [sp, #24]
 800ee70:	4403      	add	r3, r0
 800ee72:	4405      	add	r5, r0
 800ee74:	9306      	str	r3, [sp, #24]
 800ee76:	9b05      	ldr	r3, [sp, #20]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	dd05      	ble.n	800ee88 <_dtoa_r+0x828>
 800ee7c:	4651      	mov	r1, sl
 800ee7e:	461a      	mov	r2, r3
 800ee80:	4620      	mov	r0, r4
 800ee82:	f000 fc85 	bl	800f790 <__lshift>
 800ee86:	4682      	mov	sl, r0
 800ee88:	9b06      	ldr	r3, [sp, #24]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	dd05      	ble.n	800ee9a <_dtoa_r+0x83a>
 800ee8e:	4631      	mov	r1, r6
 800ee90:	461a      	mov	r2, r3
 800ee92:	4620      	mov	r0, r4
 800ee94:	f000 fc7c 	bl	800f790 <__lshift>
 800ee98:	4606      	mov	r6, r0
 800ee9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d072      	beq.n	800ef86 <_dtoa_r+0x926>
 800eea0:	4631      	mov	r1, r6
 800eea2:	4650      	mov	r0, sl
 800eea4:	f000 fce0 	bl	800f868 <__mcmp>
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	da6c      	bge.n	800ef86 <_dtoa_r+0x926>
 800eeac:	2300      	movs	r3, #0
 800eeae:	4651      	mov	r1, sl
 800eeb0:	220a      	movs	r2, #10
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f000 fa74 	bl	800f3a0 <__multadd>
 800eeb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eebe:	4682      	mov	sl, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	f000 81b0 	beq.w	800f226 <_dtoa_r+0xbc6>
 800eec6:	2300      	movs	r3, #0
 800eec8:	4639      	mov	r1, r7
 800eeca:	220a      	movs	r2, #10
 800eecc:	4620      	mov	r0, r4
 800eece:	f000 fa67 	bl	800f3a0 <__multadd>
 800eed2:	9b01      	ldr	r3, [sp, #4]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	4607      	mov	r7, r0
 800eed8:	f300 8096 	bgt.w	800f008 <_dtoa_r+0x9a8>
 800eedc:	9b07      	ldr	r3, [sp, #28]
 800eede:	2b02      	cmp	r3, #2
 800eee0:	dc59      	bgt.n	800ef96 <_dtoa_r+0x936>
 800eee2:	e091      	b.n	800f008 <_dtoa_r+0x9a8>
 800eee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eee6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eeea:	e758      	b.n	800ed9e <_dtoa_r+0x73e>
 800eeec:	9b04      	ldr	r3, [sp, #16]
 800eeee:	1e5e      	subs	r6, r3, #1
 800eef0:	9b08      	ldr	r3, [sp, #32]
 800eef2:	42b3      	cmp	r3, r6
 800eef4:	bfbf      	itttt	lt
 800eef6:	9b08      	ldrlt	r3, [sp, #32]
 800eef8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800eefa:	9608      	strlt	r6, [sp, #32]
 800eefc:	1af3      	sublt	r3, r6, r3
 800eefe:	bfb4      	ite	lt
 800ef00:	18d2      	addlt	r2, r2, r3
 800ef02:	1b9e      	subge	r6, r3, r6
 800ef04:	9b04      	ldr	r3, [sp, #16]
 800ef06:	bfbc      	itt	lt
 800ef08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ef0a:	2600      	movlt	r6, #0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	bfb7      	itett	lt
 800ef10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ef14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ef18:	1a9d      	sublt	r5, r3, r2
 800ef1a:	2300      	movlt	r3, #0
 800ef1c:	e741      	b.n	800eda2 <_dtoa_r+0x742>
 800ef1e:	9e08      	ldr	r6, [sp, #32]
 800ef20:	9d05      	ldr	r5, [sp, #20]
 800ef22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ef24:	e748      	b.n	800edb8 <_dtoa_r+0x758>
 800ef26:	9a08      	ldr	r2, [sp, #32]
 800ef28:	e770      	b.n	800ee0c <_dtoa_r+0x7ac>
 800ef2a:	9b07      	ldr	r3, [sp, #28]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	dc19      	bgt.n	800ef64 <_dtoa_r+0x904>
 800ef30:	9b02      	ldr	r3, [sp, #8]
 800ef32:	b9bb      	cbnz	r3, 800ef64 <_dtoa_r+0x904>
 800ef34:	9b03      	ldr	r3, [sp, #12]
 800ef36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef3a:	b99b      	cbnz	r3, 800ef64 <_dtoa_r+0x904>
 800ef3c:	9b03      	ldr	r3, [sp, #12]
 800ef3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef42:	0d1b      	lsrs	r3, r3, #20
 800ef44:	051b      	lsls	r3, r3, #20
 800ef46:	b183      	cbz	r3, 800ef6a <_dtoa_r+0x90a>
 800ef48:	9b05      	ldr	r3, [sp, #20]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	9305      	str	r3, [sp, #20]
 800ef4e:	9b06      	ldr	r3, [sp, #24]
 800ef50:	3301      	adds	r3, #1
 800ef52:	9306      	str	r3, [sp, #24]
 800ef54:	f04f 0801 	mov.w	r8, #1
 800ef58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	f47f af6f 	bne.w	800ee3e <_dtoa_r+0x7de>
 800ef60:	2001      	movs	r0, #1
 800ef62:	e774      	b.n	800ee4e <_dtoa_r+0x7ee>
 800ef64:	f04f 0800 	mov.w	r8, #0
 800ef68:	e7f6      	b.n	800ef58 <_dtoa_r+0x8f8>
 800ef6a:	4698      	mov	r8, r3
 800ef6c:	e7f4      	b.n	800ef58 <_dtoa_r+0x8f8>
 800ef6e:	d082      	beq.n	800ee76 <_dtoa_r+0x816>
 800ef70:	9a05      	ldr	r2, [sp, #20]
 800ef72:	331c      	adds	r3, #28
 800ef74:	441a      	add	r2, r3
 800ef76:	9205      	str	r2, [sp, #20]
 800ef78:	9a06      	ldr	r2, [sp, #24]
 800ef7a:	441a      	add	r2, r3
 800ef7c:	441d      	add	r5, r3
 800ef7e:	9206      	str	r2, [sp, #24]
 800ef80:	e779      	b.n	800ee76 <_dtoa_r+0x816>
 800ef82:	4603      	mov	r3, r0
 800ef84:	e7f4      	b.n	800ef70 <_dtoa_r+0x910>
 800ef86:	9b04      	ldr	r3, [sp, #16]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	dc37      	bgt.n	800effc <_dtoa_r+0x99c>
 800ef8c:	9b07      	ldr	r3, [sp, #28]
 800ef8e:	2b02      	cmp	r3, #2
 800ef90:	dd34      	ble.n	800effc <_dtoa_r+0x99c>
 800ef92:	9b04      	ldr	r3, [sp, #16]
 800ef94:	9301      	str	r3, [sp, #4]
 800ef96:	9b01      	ldr	r3, [sp, #4]
 800ef98:	b963      	cbnz	r3, 800efb4 <_dtoa_r+0x954>
 800ef9a:	4631      	mov	r1, r6
 800ef9c:	2205      	movs	r2, #5
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f000 f9fe 	bl	800f3a0 <__multadd>
 800efa4:	4601      	mov	r1, r0
 800efa6:	4606      	mov	r6, r0
 800efa8:	4650      	mov	r0, sl
 800efaa:	f000 fc5d 	bl	800f868 <__mcmp>
 800efae:	2800      	cmp	r0, #0
 800efb0:	f73f adbb 	bgt.w	800eb2a <_dtoa_r+0x4ca>
 800efb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efb6:	9d00      	ldr	r5, [sp, #0]
 800efb8:	ea6f 0b03 	mvn.w	fp, r3
 800efbc:	f04f 0800 	mov.w	r8, #0
 800efc0:	4631      	mov	r1, r6
 800efc2:	4620      	mov	r0, r4
 800efc4:	f000 f9ca 	bl	800f35c <_Bfree>
 800efc8:	2f00      	cmp	r7, #0
 800efca:	f43f aeab 	beq.w	800ed24 <_dtoa_r+0x6c4>
 800efce:	f1b8 0f00 	cmp.w	r8, #0
 800efd2:	d005      	beq.n	800efe0 <_dtoa_r+0x980>
 800efd4:	45b8      	cmp	r8, r7
 800efd6:	d003      	beq.n	800efe0 <_dtoa_r+0x980>
 800efd8:	4641      	mov	r1, r8
 800efda:	4620      	mov	r0, r4
 800efdc:	f000 f9be 	bl	800f35c <_Bfree>
 800efe0:	4639      	mov	r1, r7
 800efe2:	4620      	mov	r0, r4
 800efe4:	f000 f9ba 	bl	800f35c <_Bfree>
 800efe8:	e69c      	b.n	800ed24 <_dtoa_r+0x6c4>
 800efea:	2600      	movs	r6, #0
 800efec:	4637      	mov	r7, r6
 800efee:	e7e1      	b.n	800efb4 <_dtoa_r+0x954>
 800eff0:	46bb      	mov	fp, r7
 800eff2:	4637      	mov	r7, r6
 800eff4:	e599      	b.n	800eb2a <_dtoa_r+0x4ca>
 800eff6:	bf00      	nop
 800eff8:	40240000 	.word	0x40240000
 800effc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800effe:	2b00      	cmp	r3, #0
 800f000:	f000 80c8 	beq.w	800f194 <_dtoa_r+0xb34>
 800f004:	9b04      	ldr	r3, [sp, #16]
 800f006:	9301      	str	r3, [sp, #4]
 800f008:	2d00      	cmp	r5, #0
 800f00a:	dd05      	ble.n	800f018 <_dtoa_r+0x9b8>
 800f00c:	4639      	mov	r1, r7
 800f00e:	462a      	mov	r2, r5
 800f010:	4620      	mov	r0, r4
 800f012:	f000 fbbd 	bl	800f790 <__lshift>
 800f016:	4607      	mov	r7, r0
 800f018:	f1b8 0f00 	cmp.w	r8, #0
 800f01c:	d05b      	beq.n	800f0d6 <_dtoa_r+0xa76>
 800f01e:	6879      	ldr	r1, [r7, #4]
 800f020:	4620      	mov	r0, r4
 800f022:	f000 f95b 	bl	800f2dc <_Balloc>
 800f026:	4605      	mov	r5, r0
 800f028:	b928      	cbnz	r0, 800f036 <_dtoa_r+0x9d6>
 800f02a:	4b83      	ldr	r3, [pc, #524]	; (800f238 <_dtoa_r+0xbd8>)
 800f02c:	4602      	mov	r2, r0
 800f02e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f032:	f7ff bb2e 	b.w	800e692 <_dtoa_r+0x32>
 800f036:	693a      	ldr	r2, [r7, #16]
 800f038:	3202      	adds	r2, #2
 800f03a:	0092      	lsls	r2, r2, #2
 800f03c:	f107 010c 	add.w	r1, r7, #12
 800f040:	300c      	adds	r0, #12
 800f042:	f7ff fa70 	bl	800e526 <memcpy>
 800f046:	2201      	movs	r2, #1
 800f048:	4629      	mov	r1, r5
 800f04a:	4620      	mov	r0, r4
 800f04c:	f000 fba0 	bl	800f790 <__lshift>
 800f050:	9b00      	ldr	r3, [sp, #0]
 800f052:	3301      	adds	r3, #1
 800f054:	9304      	str	r3, [sp, #16]
 800f056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f05a:	4413      	add	r3, r2
 800f05c:	9308      	str	r3, [sp, #32]
 800f05e:	9b02      	ldr	r3, [sp, #8]
 800f060:	f003 0301 	and.w	r3, r3, #1
 800f064:	46b8      	mov	r8, r7
 800f066:	9306      	str	r3, [sp, #24]
 800f068:	4607      	mov	r7, r0
 800f06a:	9b04      	ldr	r3, [sp, #16]
 800f06c:	4631      	mov	r1, r6
 800f06e:	3b01      	subs	r3, #1
 800f070:	4650      	mov	r0, sl
 800f072:	9301      	str	r3, [sp, #4]
 800f074:	f7ff fa6c 	bl	800e550 <quorem>
 800f078:	4641      	mov	r1, r8
 800f07a:	9002      	str	r0, [sp, #8]
 800f07c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f080:	4650      	mov	r0, sl
 800f082:	f000 fbf1 	bl	800f868 <__mcmp>
 800f086:	463a      	mov	r2, r7
 800f088:	9005      	str	r0, [sp, #20]
 800f08a:	4631      	mov	r1, r6
 800f08c:	4620      	mov	r0, r4
 800f08e:	f000 fc07 	bl	800f8a0 <__mdiff>
 800f092:	68c2      	ldr	r2, [r0, #12]
 800f094:	4605      	mov	r5, r0
 800f096:	bb02      	cbnz	r2, 800f0da <_dtoa_r+0xa7a>
 800f098:	4601      	mov	r1, r0
 800f09a:	4650      	mov	r0, sl
 800f09c:	f000 fbe4 	bl	800f868 <__mcmp>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	4629      	mov	r1, r5
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	9209      	str	r2, [sp, #36]	; 0x24
 800f0a8:	f000 f958 	bl	800f35c <_Bfree>
 800f0ac:	9b07      	ldr	r3, [sp, #28]
 800f0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0b0:	9d04      	ldr	r5, [sp, #16]
 800f0b2:	ea43 0102 	orr.w	r1, r3, r2
 800f0b6:	9b06      	ldr	r3, [sp, #24]
 800f0b8:	4319      	orrs	r1, r3
 800f0ba:	d110      	bne.n	800f0de <_dtoa_r+0xa7e>
 800f0bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f0c0:	d029      	beq.n	800f116 <_dtoa_r+0xab6>
 800f0c2:	9b05      	ldr	r3, [sp, #20]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	dd02      	ble.n	800f0ce <_dtoa_r+0xa6e>
 800f0c8:	9b02      	ldr	r3, [sp, #8]
 800f0ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f0ce:	9b01      	ldr	r3, [sp, #4]
 800f0d0:	f883 9000 	strb.w	r9, [r3]
 800f0d4:	e774      	b.n	800efc0 <_dtoa_r+0x960>
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	e7ba      	b.n	800f050 <_dtoa_r+0x9f0>
 800f0da:	2201      	movs	r2, #1
 800f0dc:	e7e1      	b.n	800f0a2 <_dtoa_r+0xa42>
 800f0de:	9b05      	ldr	r3, [sp, #20]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	db04      	blt.n	800f0ee <_dtoa_r+0xa8e>
 800f0e4:	9907      	ldr	r1, [sp, #28]
 800f0e6:	430b      	orrs	r3, r1
 800f0e8:	9906      	ldr	r1, [sp, #24]
 800f0ea:	430b      	orrs	r3, r1
 800f0ec:	d120      	bne.n	800f130 <_dtoa_r+0xad0>
 800f0ee:	2a00      	cmp	r2, #0
 800f0f0:	dded      	ble.n	800f0ce <_dtoa_r+0xa6e>
 800f0f2:	4651      	mov	r1, sl
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	f000 fb4a 	bl	800f790 <__lshift>
 800f0fc:	4631      	mov	r1, r6
 800f0fe:	4682      	mov	sl, r0
 800f100:	f000 fbb2 	bl	800f868 <__mcmp>
 800f104:	2800      	cmp	r0, #0
 800f106:	dc03      	bgt.n	800f110 <_dtoa_r+0xab0>
 800f108:	d1e1      	bne.n	800f0ce <_dtoa_r+0xa6e>
 800f10a:	f019 0f01 	tst.w	r9, #1
 800f10e:	d0de      	beq.n	800f0ce <_dtoa_r+0xa6e>
 800f110:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f114:	d1d8      	bne.n	800f0c8 <_dtoa_r+0xa68>
 800f116:	9a01      	ldr	r2, [sp, #4]
 800f118:	2339      	movs	r3, #57	; 0x39
 800f11a:	7013      	strb	r3, [r2, #0]
 800f11c:	462b      	mov	r3, r5
 800f11e:	461d      	mov	r5, r3
 800f120:	3b01      	subs	r3, #1
 800f122:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f126:	2a39      	cmp	r2, #57	; 0x39
 800f128:	d06c      	beq.n	800f204 <_dtoa_r+0xba4>
 800f12a:	3201      	adds	r2, #1
 800f12c:	701a      	strb	r2, [r3, #0]
 800f12e:	e747      	b.n	800efc0 <_dtoa_r+0x960>
 800f130:	2a00      	cmp	r2, #0
 800f132:	dd07      	ble.n	800f144 <_dtoa_r+0xae4>
 800f134:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f138:	d0ed      	beq.n	800f116 <_dtoa_r+0xab6>
 800f13a:	9a01      	ldr	r2, [sp, #4]
 800f13c:	f109 0301 	add.w	r3, r9, #1
 800f140:	7013      	strb	r3, [r2, #0]
 800f142:	e73d      	b.n	800efc0 <_dtoa_r+0x960>
 800f144:	9b04      	ldr	r3, [sp, #16]
 800f146:	9a08      	ldr	r2, [sp, #32]
 800f148:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d043      	beq.n	800f1d8 <_dtoa_r+0xb78>
 800f150:	4651      	mov	r1, sl
 800f152:	2300      	movs	r3, #0
 800f154:	220a      	movs	r2, #10
 800f156:	4620      	mov	r0, r4
 800f158:	f000 f922 	bl	800f3a0 <__multadd>
 800f15c:	45b8      	cmp	r8, r7
 800f15e:	4682      	mov	sl, r0
 800f160:	f04f 0300 	mov.w	r3, #0
 800f164:	f04f 020a 	mov.w	r2, #10
 800f168:	4641      	mov	r1, r8
 800f16a:	4620      	mov	r0, r4
 800f16c:	d107      	bne.n	800f17e <_dtoa_r+0xb1e>
 800f16e:	f000 f917 	bl	800f3a0 <__multadd>
 800f172:	4680      	mov	r8, r0
 800f174:	4607      	mov	r7, r0
 800f176:	9b04      	ldr	r3, [sp, #16]
 800f178:	3301      	adds	r3, #1
 800f17a:	9304      	str	r3, [sp, #16]
 800f17c:	e775      	b.n	800f06a <_dtoa_r+0xa0a>
 800f17e:	f000 f90f 	bl	800f3a0 <__multadd>
 800f182:	4639      	mov	r1, r7
 800f184:	4680      	mov	r8, r0
 800f186:	2300      	movs	r3, #0
 800f188:	220a      	movs	r2, #10
 800f18a:	4620      	mov	r0, r4
 800f18c:	f000 f908 	bl	800f3a0 <__multadd>
 800f190:	4607      	mov	r7, r0
 800f192:	e7f0      	b.n	800f176 <_dtoa_r+0xb16>
 800f194:	9b04      	ldr	r3, [sp, #16]
 800f196:	9301      	str	r3, [sp, #4]
 800f198:	9d00      	ldr	r5, [sp, #0]
 800f19a:	4631      	mov	r1, r6
 800f19c:	4650      	mov	r0, sl
 800f19e:	f7ff f9d7 	bl	800e550 <quorem>
 800f1a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f1a6:	9b00      	ldr	r3, [sp, #0]
 800f1a8:	f805 9b01 	strb.w	r9, [r5], #1
 800f1ac:	1aea      	subs	r2, r5, r3
 800f1ae:	9b01      	ldr	r3, [sp, #4]
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	dd07      	ble.n	800f1c4 <_dtoa_r+0xb64>
 800f1b4:	4651      	mov	r1, sl
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	220a      	movs	r2, #10
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f000 f8f0 	bl	800f3a0 <__multadd>
 800f1c0:	4682      	mov	sl, r0
 800f1c2:	e7ea      	b.n	800f19a <_dtoa_r+0xb3a>
 800f1c4:	9b01      	ldr	r3, [sp, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	bfc8      	it	gt
 800f1ca:	461d      	movgt	r5, r3
 800f1cc:	9b00      	ldr	r3, [sp, #0]
 800f1ce:	bfd8      	it	le
 800f1d0:	2501      	movle	r5, #1
 800f1d2:	441d      	add	r5, r3
 800f1d4:	f04f 0800 	mov.w	r8, #0
 800f1d8:	4651      	mov	r1, sl
 800f1da:	2201      	movs	r2, #1
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f000 fad7 	bl	800f790 <__lshift>
 800f1e2:	4631      	mov	r1, r6
 800f1e4:	4682      	mov	sl, r0
 800f1e6:	f000 fb3f 	bl	800f868 <__mcmp>
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	dc96      	bgt.n	800f11c <_dtoa_r+0xabc>
 800f1ee:	d102      	bne.n	800f1f6 <_dtoa_r+0xb96>
 800f1f0:	f019 0f01 	tst.w	r9, #1
 800f1f4:	d192      	bne.n	800f11c <_dtoa_r+0xabc>
 800f1f6:	462b      	mov	r3, r5
 800f1f8:	461d      	mov	r5, r3
 800f1fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1fe:	2a30      	cmp	r2, #48	; 0x30
 800f200:	d0fa      	beq.n	800f1f8 <_dtoa_r+0xb98>
 800f202:	e6dd      	b.n	800efc0 <_dtoa_r+0x960>
 800f204:	9a00      	ldr	r2, [sp, #0]
 800f206:	429a      	cmp	r2, r3
 800f208:	d189      	bne.n	800f11e <_dtoa_r+0xabe>
 800f20a:	f10b 0b01 	add.w	fp, fp, #1
 800f20e:	2331      	movs	r3, #49	; 0x31
 800f210:	e796      	b.n	800f140 <_dtoa_r+0xae0>
 800f212:	4b0a      	ldr	r3, [pc, #40]	; (800f23c <_dtoa_r+0xbdc>)
 800f214:	f7ff ba99 	b.w	800e74a <_dtoa_r+0xea>
 800f218:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	f47f aa6d 	bne.w	800e6fa <_dtoa_r+0x9a>
 800f220:	4b07      	ldr	r3, [pc, #28]	; (800f240 <_dtoa_r+0xbe0>)
 800f222:	f7ff ba92 	b.w	800e74a <_dtoa_r+0xea>
 800f226:	9b01      	ldr	r3, [sp, #4]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	dcb5      	bgt.n	800f198 <_dtoa_r+0xb38>
 800f22c:	9b07      	ldr	r3, [sp, #28]
 800f22e:	2b02      	cmp	r3, #2
 800f230:	f73f aeb1 	bgt.w	800ef96 <_dtoa_r+0x936>
 800f234:	e7b0      	b.n	800f198 <_dtoa_r+0xb38>
 800f236:	bf00      	nop
 800f238:	08012be1 	.word	0x08012be1
 800f23c:	08012b3c 	.word	0x08012b3c
 800f240:	08012b65 	.word	0x08012b65

0800f244 <_free_r>:
 800f244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f246:	2900      	cmp	r1, #0
 800f248:	d044      	beq.n	800f2d4 <_free_r+0x90>
 800f24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f24e:	9001      	str	r0, [sp, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	f1a1 0404 	sub.w	r4, r1, #4
 800f256:	bfb8      	it	lt
 800f258:	18e4      	addlt	r4, r4, r3
 800f25a:	f7fe f8bd 	bl	800d3d8 <__malloc_lock>
 800f25e:	4a1e      	ldr	r2, [pc, #120]	; (800f2d8 <_free_r+0x94>)
 800f260:	9801      	ldr	r0, [sp, #4]
 800f262:	6813      	ldr	r3, [r2, #0]
 800f264:	b933      	cbnz	r3, 800f274 <_free_r+0x30>
 800f266:	6063      	str	r3, [r4, #4]
 800f268:	6014      	str	r4, [r2, #0]
 800f26a:	b003      	add	sp, #12
 800f26c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f270:	f7fe b8b8 	b.w	800d3e4 <__malloc_unlock>
 800f274:	42a3      	cmp	r3, r4
 800f276:	d908      	bls.n	800f28a <_free_r+0x46>
 800f278:	6825      	ldr	r5, [r4, #0]
 800f27a:	1961      	adds	r1, r4, r5
 800f27c:	428b      	cmp	r3, r1
 800f27e:	bf01      	itttt	eq
 800f280:	6819      	ldreq	r1, [r3, #0]
 800f282:	685b      	ldreq	r3, [r3, #4]
 800f284:	1949      	addeq	r1, r1, r5
 800f286:	6021      	streq	r1, [r4, #0]
 800f288:	e7ed      	b.n	800f266 <_free_r+0x22>
 800f28a:	461a      	mov	r2, r3
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	b10b      	cbz	r3, 800f294 <_free_r+0x50>
 800f290:	42a3      	cmp	r3, r4
 800f292:	d9fa      	bls.n	800f28a <_free_r+0x46>
 800f294:	6811      	ldr	r1, [r2, #0]
 800f296:	1855      	adds	r5, r2, r1
 800f298:	42a5      	cmp	r5, r4
 800f29a:	d10b      	bne.n	800f2b4 <_free_r+0x70>
 800f29c:	6824      	ldr	r4, [r4, #0]
 800f29e:	4421      	add	r1, r4
 800f2a0:	1854      	adds	r4, r2, r1
 800f2a2:	42a3      	cmp	r3, r4
 800f2a4:	6011      	str	r1, [r2, #0]
 800f2a6:	d1e0      	bne.n	800f26a <_free_r+0x26>
 800f2a8:	681c      	ldr	r4, [r3, #0]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	6053      	str	r3, [r2, #4]
 800f2ae:	440c      	add	r4, r1
 800f2b0:	6014      	str	r4, [r2, #0]
 800f2b2:	e7da      	b.n	800f26a <_free_r+0x26>
 800f2b4:	d902      	bls.n	800f2bc <_free_r+0x78>
 800f2b6:	230c      	movs	r3, #12
 800f2b8:	6003      	str	r3, [r0, #0]
 800f2ba:	e7d6      	b.n	800f26a <_free_r+0x26>
 800f2bc:	6825      	ldr	r5, [r4, #0]
 800f2be:	1961      	adds	r1, r4, r5
 800f2c0:	428b      	cmp	r3, r1
 800f2c2:	bf04      	itt	eq
 800f2c4:	6819      	ldreq	r1, [r3, #0]
 800f2c6:	685b      	ldreq	r3, [r3, #4]
 800f2c8:	6063      	str	r3, [r4, #4]
 800f2ca:	bf04      	itt	eq
 800f2cc:	1949      	addeq	r1, r1, r5
 800f2ce:	6021      	streq	r1, [r4, #0]
 800f2d0:	6054      	str	r4, [r2, #4]
 800f2d2:	e7ca      	b.n	800f26a <_free_r+0x26>
 800f2d4:	b003      	add	sp, #12
 800f2d6:	bd30      	pop	{r4, r5, pc}
 800f2d8:	20000478 	.word	0x20000478

0800f2dc <_Balloc>:
 800f2dc:	b570      	push	{r4, r5, r6, lr}
 800f2de:	69c6      	ldr	r6, [r0, #28]
 800f2e0:	4604      	mov	r4, r0
 800f2e2:	460d      	mov	r5, r1
 800f2e4:	b976      	cbnz	r6, 800f304 <_Balloc+0x28>
 800f2e6:	2010      	movs	r0, #16
 800f2e8:	f7fd ffc6 	bl	800d278 <malloc>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	61e0      	str	r0, [r4, #28]
 800f2f0:	b920      	cbnz	r0, 800f2fc <_Balloc+0x20>
 800f2f2:	4b18      	ldr	r3, [pc, #96]	; (800f354 <_Balloc+0x78>)
 800f2f4:	4818      	ldr	r0, [pc, #96]	; (800f358 <_Balloc+0x7c>)
 800f2f6:	216b      	movs	r1, #107	; 0x6b
 800f2f8:	f7fd ff8e 	bl	800d218 <__assert_func>
 800f2fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f300:	6006      	str	r6, [r0, #0]
 800f302:	60c6      	str	r6, [r0, #12]
 800f304:	69e6      	ldr	r6, [r4, #28]
 800f306:	68f3      	ldr	r3, [r6, #12]
 800f308:	b183      	cbz	r3, 800f32c <_Balloc+0x50>
 800f30a:	69e3      	ldr	r3, [r4, #28]
 800f30c:	68db      	ldr	r3, [r3, #12]
 800f30e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f312:	b9b8      	cbnz	r0, 800f344 <_Balloc+0x68>
 800f314:	2101      	movs	r1, #1
 800f316:	fa01 f605 	lsl.w	r6, r1, r5
 800f31a:	1d72      	adds	r2, r6, #5
 800f31c:	0092      	lsls	r2, r2, #2
 800f31e:	4620      	mov	r0, r4
 800f320:	f001 ff1a 	bl	8011158 <_calloc_r>
 800f324:	b160      	cbz	r0, 800f340 <_Balloc+0x64>
 800f326:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f32a:	e00e      	b.n	800f34a <_Balloc+0x6e>
 800f32c:	2221      	movs	r2, #33	; 0x21
 800f32e:	2104      	movs	r1, #4
 800f330:	4620      	mov	r0, r4
 800f332:	f001 ff11 	bl	8011158 <_calloc_r>
 800f336:	69e3      	ldr	r3, [r4, #28]
 800f338:	60f0      	str	r0, [r6, #12]
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d1e4      	bne.n	800f30a <_Balloc+0x2e>
 800f340:	2000      	movs	r0, #0
 800f342:	bd70      	pop	{r4, r5, r6, pc}
 800f344:	6802      	ldr	r2, [r0, #0]
 800f346:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f34a:	2300      	movs	r3, #0
 800f34c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f350:	e7f7      	b.n	800f342 <_Balloc+0x66>
 800f352:	bf00      	nop
 800f354:	08012b72 	.word	0x08012b72
 800f358:	08012bf2 	.word	0x08012bf2

0800f35c <_Bfree>:
 800f35c:	b570      	push	{r4, r5, r6, lr}
 800f35e:	69c6      	ldr	r6, [r0, #28]
 800f360:	4605      	mov	r5, r0
 800f362:	460c      	mov	r4, r1
 800f364:	b976      	cbnz	r6, 800f384 <_Bfree+0x28>
 800f366:	2010      	movs	r0, #16
 800f368:	f7fd ff86 	bl	800d278 <malloc>
 800f36c:	4602      	mov	r2, r0
 800f36e:	61e8      	str	r0, [r5, #28]
 800f370:	b920      	cbnz	r0, 800f37c <_Bfree+0x20>
 800f372:	4b09      	ldr	r3, [pc, #36]	; (800f398 <_Bfree+0x3c>)
 800f374:	4809      	ldr	r0, [pc, #36]	; (800f39c <_Bfree+0x40>)
 800f376:	218f      	movs	r1, #143	; 0x8f
 800f378:	f7fd ff4e 	bl	800d218 <__assert_func>
 800f37c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f380:	6006      	str	r6, [r0, #0]
 800f382:	60c6      	str	r6, [r0, #12]
 800f384:	b13c      	cbz	r4, 800f396 <_Bfree+0x3a>
 800f386:	69eb      	ldr	r3, [r5, #28]
 800f388:	6862      	ldr	r2, [r4, #4]
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f390:	6021      	str	r1, [r4, #0]
 800f392:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f396:	bd70      	pop	{r4, r5, r6, pc}
 800f398:	08012b72 	.word	0x08012b72
 800f39c:	08012bf2 	.word	0x08012bf2

0800f3a0 <__multadd>:
 800f3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a4:	690d      	ldr	r5, [r1, #16]
 800f3a6:	4607      	mov	r7, r0
 800f3a8:	460c      	mov	r4, r1
 800f3aa:	461e      	mov	r6, r3
 800f3ac:	f101 0c14 	add.w	ip, r1, #20
 800f3b0:	2000      	movs	r0, #0
 800f3b2:	f8dc 3000 	ldr.w	r3, [ip]
 800f3b6:	b299      	uxth	r1, r3
 800f3b8:	fb02 6101 	mla	r1, r2, r1, r6
 800f3bc:	0c1e      	lsrs	r6, r3, #16
 800f3be:	0c0b      	lsrs	r3, r1, #16
 800f3c0:	fb02 3306 	mla	r3, r2, r6, r3
 800f3c4:	b289      	uxth	r1, r1
 800f3c6:	3001      	adds	r0, #1
 800f3c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f3cc:	4285      	cmp	r5, r0
 800f3ce:	f84c 1b04 	str.w	r1, [ip], #4
 800f3d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3d6:	dcec      	bgt.n	800f3b2 <__multadd+0x12>
 800f3d8:	b30e      	cbz	r6, 800f41e <__multadd+0x7e>
 800f3da:	68a3      	ldr	r3, [r4, #8]
 800f3dc:	42ab      	cmp	r3, r5
 800f3de:	dc19      	bgt.n	800f414 <__multadd+0x74>
 800f3e0:	6861      	ldr	r1, [r4, #4]
 800f3e2:	4638      	mov	r0, r7
 800f3e4:	3101      	adds	r1, #1
 800f3e6:	f7ff ff79 	bl	800f2dc <_Balloc>
 800f3ea:	4680      	mov	r8, r0
 800f3ec:	b928      	cbnz	r0, 800f3fa <__multadd+0x5a>
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	4b0c      	ldr	r3, [pc, #48]	; (800f424 <__multadd+0x84>)
 800f3f2:	480d      	ldr	r0, [pc, #52]	; (800f428 <__multadd+0x88>)
 800f3f4:	21ba      	movs	r1, #186	; 0xba
 800f3f6:	f7fd ff0f 	bl	800d218 <__assert_func>
 800f3fa:	6922      	ldr	r2, [r4, #16]
 800f3fc:	3202      	adds	r2, #2
 800f3fe:	f104 010c 	add.w	r1, r4, #12
 800f402:	0092      	lsls	r2, r2, #2
 800f404:	300c      	adds	r0, #12
 800f406:	f7ff f88e 	bl	800e526 <memcpy>
 800f40a:	4621      	mov	r1, r4
 800f40c:	4638      	mov	r0, r7
 800f40e:	f7ff ffa5 	bl	800f35c <_Bfree>
 800f412:	4644      	mov	r4, r8
 800f414:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f418:	3501      	adds	r5, #1
 800f41a:	615e      	str	r6, [r3, #20]
 800f41c:	6125      	str	r5, [r4, #16]
 800f41e:	4620      	mov	r0, r4
 800f420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f424:	08012be1 	.word	0x08012be1
 800f428:	08012bf2 	.word	0x08012bf2

0800f42c <__s2b>:
 800f42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f430:	460c      	mov	r4, r1
 800f432:	4615      	mov	r5, r2
 800f434:	461f      	mov	r7, r3
 800f436:	2209      	movs	r2, #9
 800f438:	3308      	adds	r3, #8
 800f43a:	4606      	mov	r6, r0
 800f43c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f440:	2100      	movs	r1, #0
 800f442:	2201      	movs	r2, #1
 800f444:	429a      	cmp	r2, r3
 800f446:	db09      	blt.n	800f45c <__s2b+0x30>
 800f448:	4630      	mov	r0, r6
 800f44a:	f7ff ff47 	bl	800f2dc <_Balloc>
 800f44e:	b940      	cbnz	r0, 800f462 <__s2b+0x36>
 800f450:	4602      	mov	r2, r0
 800f452:	4b19      	ldr	r3, [pc, #100]	; (800f4b8 <__s2b+0x8c>)
 800f454:	4819      	ldr	r0, [pc, #100]	; (800f4bc <__s2b+0x90>)
 800f456:	21d3      	movs	r1, #211	; 0xd3
 800f458:	f7fd fede 	bl	800d218 <__assert_func>
 800f45c:	0052      	lsls	r2, r2, #1
 800f45e:	3101      	adds	r1, #1
 800f460:	e7f0      	b.n	800f444 <__s2b+0x18>
 800f462:	9b08      	ldr	r3, [sp, #32]
 800f464:	6143      	str	r3, [r0, #20]
 800f466:	2d09      	cmp	r5, #9
 800f468:	f04f 0301 	mov.w	r3, #1
 800f46c:	6103      	str	r3, [r0, #16]
 800f46e:	dd16      	ble.n	800f49e <__s2b+0x72>
 800f470:	f104 0909 	add.w	r9, r4, #9
 800f474:	46c8      	mov	r8, r9
 800f476:	442c      	add	r4, r5
 800f478:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f47c:	4601      	mov	r1, r0
 800f47e:	3b30      	subs	r3, #48	; 0x30
 800f480:	220a      	movs	r2, #10
 800f482:	4630      	mov	r0, r6
 800f484:	f7ff ff8c 	bl	800f3a0 <__multadd>
 800f488:	45a0      	cmp	r8, r4
 800f48a:	d1f5      	bne.n	800f478 <__s2b+0x4c>
 800f48c:	f1a5 0408 	sub.w	r4, r5, #8
 800f490:	444c      	add	r4, r9
 800f492:	1b2d      	subs	r5, r5, r4
 800f494:	1963      	adds	r3, r4, r5
 800f496:	42bb      	cmp	r3, r7
 800f498:	db04      	blt.n	800f4a4 <__s2b+0x78>
 800f49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f49e:	340a      	adds	r4, #10
 800f4a0:	2509      	movs	r5, #9
 800f4a2:	e7f6      	b.n	800f492 <__s2b+0x66>
 800f4a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4a8:	4601      	mov	r1, r0
 800f4aa:	3b30      	subs	r3, #48	; 0x30
 800f4ac:	220a      	movs	r2, #10
 800f4ae:	4630      	mov	r0, r6
 800f4b0:	f7ff ff76 	bl	800f3a0 <__multadd>
 800f4b4:	e7ee      	b.n	800f494 <__s2b+0x68>
 800f4b6:	bf00      	nop
 800f4b8:	08012be1 	.word	0x08012be1
 800f4bc:	08012bf2 	.word	0x08012bf2

0800f4c0 <__hi0bits>:
 800f4c0:	0c03      	lsrs	r3, r0, #16
 800f4c2:	041b      	lsls	r3, r3, #16
 800f4c4:	b9d3      	cbnz	r3, 800f4fc <__hi0bits+0x3c>
 800f4c6:	0400      	lsls	r0, r0, #16
 800f4c8:	2310      	movs	r3, #16
 800f4ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f4ce:	bf04      	itt	eq
 800f4d0:	0200      	lsleq	r0, r0, #8
 800f4d2:	3308      	addeq	r3, #8
 800f4d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f4d8:	bf04      	itt	eq
 800f4da:	0100      	lsleq	r0, r0, #4
 800f4dc:	3304      	addeq	r3, #4
 800f4de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f4e2:	bf04      	itt	eq
 800f4e4:	0080      	lsleq	r0, r0, #2
 800f4e6:	3302      	addeq	r3, #2
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	db05      	blt.n	800f4f8 <__hi0bits+0x38>
 800f4ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f4f0:	f103 0301 	add.w	r3, r3, #1
 800f4f4:	bf08      	it	eq
 800f4f6:	2320      	moveq	r3, #32
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	4770      	bx	lr
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	e7e4      	b.n	800f4ca <__hi0bits+0xa>

0800f500 <__lo0bits>:
 800f500:	6803      	ldr	r3, [r0, #0]
 800f502:	f013 0207 	ands.w	r2, r3, #7
 800f506:	d00c      	beq.n	800f522 <__lo0bits+0x22>
 800f508:	07d9      	lsls	r1, r3, #31
 800f50a:	d422      	bmi.n	800f552 <__lo0bits+0x52>
 800f50c:	079a      	lsls	r2, r3, #30
 800f50e:	bf49      	itett	mi
 800f510:	085b      	lsrmi	r3, r3, #1
 800f512:	089b      	lsrpl	r3, r3, #2
 800f514:	6003      	strmi	r3, [r0, #0]
 800f516:	2201      	movmi	r2, #1
 800f518:	bf5c      	itt	pl
 800f51a:	6003      	strpl	r3, [r0, #0]
 800f51c:	2202      	movpl	r2, #2
 800f51e:	4610      	mov	r0, r2
 800f520:	4770      	bx	lr
 800f522:	b299      	uxth	r1, r3
 800f524:	b909      	cbnz	r1, 800f52a <__lo0bits+0x2a>
 800f526:	0c1b      	lsrs	r3, r3, #16
 800f528:	2210      	movs	r2, #16
 800f52a:	b2d9      	uxtb	r1, r3
 800f52c:	b909      	cbnz	r1, 800f532 <__lo0bits+0x32>
 800f52e:	3208      	adds	r2, #8
 800f530:	0a1b      	lsrs	r3, r3, #8
 800f532:	0719      	lsls	r1, r3, #28
 800f534:	bf04      	itt	eq
 800f536:	091b      	lsreq	r3, r3, #4
 800f538:	3204      	addeq	r2, #4
 800f53a:	0799      	lsls	r1, r3, #30
 800f53c:	bf04      	itt	eq
 800f53e:	089b      	lsreq	r3, r3, #2
 800f540:	3202      	addeq	r2, #2
 800f542:	07d9      	lsls	r1, r3, #31
 800f544:	d403      	bmi.n	800f54e <__lo0bits+0x4e>
 800f546:	085b      	lsrs	r3, r3, #1
 800f548:	f102 0201 	add.w	r2, r2, #1
 800f54c:	d003      	beq.n	800f556 <__lo0bits+0x56>
 800f54e:	6003      	str	r3, [r0, #0]
 800f550:	e7e5      	b.n	800f51e <__lo0bits+0x1e>
 800f552:	2200      	movs	r2, #0
 800f554:	e7e3      	b.n	800f51e <__lo0bits+0x1e>
 800f556:	2220      	movs	r2, #32
 800f558:	e7e1      	b.n	800f51e <__lo0bits+0x1e>
	...

0800f55c <__i2b>:
 800f55c:	b510      	push	{r4, lr}
 800f55e:	460c      	mov	r4, r1
 800f560:	2101      	movs	r1, #1
 800f562:	f7ff febb 	bl	800f2dc <_Balloc>
 800f566:	4602      	mov	r2, r0
 800f568:	b928      	cbnz	r0, 800f576 <__i2b+0x1a>
 800f56a:	4b05      	ldr	r3, [pc, #20]	; (800f580 <__i2b+0x24>)
 800f56c:	4805      	ldr	r0, [pc, #20]	; (800f584 <__i2b+0x28>)
 800f56e:	f240 1145 	movw	r1, #325	; 0x145
 800f572:	f7fd fe51 	bl	800d218 <__assert_func>
 800f576:	2301      	movs	r3, #1
 800f578:	6144      	str	r4, [r0, #20]
 800f57a:	6103      	str	r3, [r0, #16]
 800f57c:	bd10      	pop	{r4, pc}
 800f57e:	bf00      	nop
 800f580:	08012be1 	.word	0x08012be1
 800f584:	08012bf2 	.word	0x08012bf2

0800f588 <__multiply>:
 800f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58c:	4691      	mov	r9, r2
 800f58e:	690a      	ldr	r2, [r1, #16]
 800f590:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f594:	429a      	cmp	r2, r3
 800f596:	bfb8      	it	lt
 800f598:	460b      	movlt	r3, r1
 800f59a:	460c      	mov	r4, r1
 800f59c:	bfbc      	itt	lt
 800f59e:	464c      	movlt	r4, r9
 800f5a0:	4699      	movlt	r9, r3
 800f5a2:	6927      	ldr	r7, [r4, #16]
 800f5a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f5a8:	68a3      	ldr	r3, [r4, #8]
 800f5aa:	6861      	ldr	r1, [r4, #4]
 800f5ac:	eb07 060a 	add.w	r6, r7, sl
 800f5b0:	42b3      	cmp	r3, r6
 800f5b2:	b085      	sub	sp, #20
 800f5b4:	bfb8      	it	lt
 800f5b6:	3101      	addlt	r1, #1
 800f5b8:	f7ff fe90 	bl	800f2dc <_Balloc>
 800f5bc:	b930      	cbnz	r0, 800f5cc <__multiply+0x44>
 800f5be:	4602      	mov	r2, r0
 800f5c0:	4b44      	ldr	r3, [pc, #272]	; (800f6d4 <__multiply+0x14c>)
 800f5c2:	4845      	ldr	r0, [pc, #276]	; (800f6d8 <__multiply+0x150>)
 800f5c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f5c8:	f7fd fe26 	bl	800d218 <__assert_func>
 800f5cc:	f100 0514 	add.w	r5, r0, #20
 800f5d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f5d4:	462b      	mov	r3, r5
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	4543      	cmp	r3, r8
 800f5da:	d321      	bcc.n	800f620 <__multiply+0x98>
 800f5dc:	f104 0314 	add.w	r3, r4, #20
 800f5e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f5e4:	f109 0314 	add.w	r3, r9, #20
 800f5e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f5ec:	9202      	str	r2, [sp, #8]
 800f5ee:	1b3a      	subs	r2, r7, r4
 800f5f0:	3a15      	subs	r2, #21
 800f5f2:	f022 0203 	bic.w	r2, r2, #3
 800f5f6:	3204      	adds	r2, #4
 800f5f8:	f104 0115 	add.w	r1, r4, #21
 800f5fc:	428f      	cmp	r7, r1
 800f5fe:	bf38      	it	cc
 800f600:	2204      	movcc	r2, #4
 800f602:	9201      	str	r2, [sp, #4]
 800f604:	9a02      	ldr	r2, [sp, #8]
 800f606:	9303      	str	r3, [sp, #12]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d80c      	bhi.n	800f626 <__multiply+0x9e>
 800f60c:	2e00      	cmp	r6, #0
 800f60e:	dd03      	ble.n	800f618 <__multiply+0x90>
 800f610:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f614:	2b00      	cmp	r3, #0
 800f616:	d05b      	beq.n	800f6d0 <__multiply+0x148>
 800f618:	6106      	str	r6, [r0, #16]
 800f61a:	b005      	add	sp, #20
 800f61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f620:	f843 2b04 	str.w	r2, [r3], #4
 800f624:	e7d8      	b.n	800f5d8 <__multiply+0x50>
 800f626:	f8b3 a000 	ldrh.w	sl, [r3]
 800f62a:	f1ba 0f00 	cmp.w	sl, #0
 800f62e:	d024      	beq.n	800f67a <__multiply+0xf2>
 800f630:	f104 0e14 	add.w	lr, r4, #20
 800f634:	46a9      	mov	r9, r5
 800f636:	f04f 0c00 	mov.w	ip, #0
 800f63a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f63e:	f8d9 1000 	ldr.w	r1, [r9]
 800f642:	fa1f fb82 	uxth.w	fp, r2
 800f646:	b289      	uxth	r1, r1
 800f648:	fb0a 110b 	mla	r1, sl, fp, r1
 800f64c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f650:	f8d9 2000 	ldr.w	r2, [r9]
 800f654:	4461      	add	r1, ip
 800f656:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f65a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f65e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f662:	b289      	uxth	r1, r1
 800f664:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f668:	4577      	cmp	r7, lr
 800f66a:	f849 1b04 	str.w	r1, [r9], #4
 800f66e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f672:	d8e2      	bhi.n	800f63a <__multiply+0xb2>
 800f674:	9a01      	ldr	r2, [sp, #4]
 800f676:	f845 c002 	str.w	ip, [r5, r2]
 800f67a:	9a03      	ldr	r2, [sp, #12]
 800f67c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f680:	3304      	adds	r3, #4
 800f682:	f1b9 0f00 	cmp.w	r9, #0
 800f686:	d021      	beq.n	800f6cc <__multiply+0x144>
 800f688:	6829      	ldr	r1, [r5, #0]
 800f68a:	f104 0c14 	add.w	ip, r4, #20
 800f68e:	46ae      	mov	lr, r5
 800f690:	f04f 0a00 	mov.w	sl, #0
 800f694:	f8bc b000 	ldrh.w	fp, [ip]
 800f698:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f69c:	fb09 220b 	mla	r2, r9, fp, r2
 800f6a0:	4452      	add	r2, sl
 800f6a2:	b289      	uxth	r1, r1
 800f6a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f6a8:	f84e 1b04 	str.w	r1, [lr], #4
 800f6ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f6b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f6b4:	f8be 1000 	ldrh.w	r1, [lr]
 800f6b8:	fb09 110a 	mla	r1, r9, sl, r1
 800f6bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f6c0:	4567      	cmp	r7, ip
 800f6c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f6c6:	d8e5      	bhi.n	800f694 <__multiply+0x10c>
 800f6c8:	9a01      	ldr	r2, [sp, #4]
 800f6ca:	50a9      	str	r1, [r5, r2]
 800f6cc:	3504      	adds	r5, #4
 800f6ce:	e799      	b.n	800f604 <__multiply+0x7c>
 800f6d0:	3e01      	subs	r6, #1
 800f6d2:	e79b      	b.n	800f60c <__multiply+0x84>
 800f6d4:	08012be1 	.word	0x08012be1
 800f6d8:	08012bf2 	.word	0x08012bf2

0800f6dc <__pow5mult>:
 800f6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6e0:	4615      	mov	r5, r2
 800f6e2:	f012 0203 	ands.w	r2, r2, #3
 800f6e6:	4606      	mov	r6, r0
 800f6e8:	460f      	mov	r7, r1
 800f6ea:	d007      	beq.n	800f6fc <__pow5mult+0x20>
 800f6ec:	4c25      	ldr	r4, [pc, #148]	; (800f784 <__pow5mult+0xa8>)
 800f6ee:	3a01      	subs	r2, #1
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f6f6:	f7ff fe53 	bl	800f3a0 <__multadd>
 800f6fa:	4607      	mov	r7, r0
 800f6fc:	10ad      	asrs	r5, r5, #2
 800f6fe:	d03d      	beq.n	800f77c <__pow5mult+0xa0>
 800f700:	69f4      	ldr	r4, [r6, #28]
 800f702:	b97c      	cbnz	r4, 800f724 <__pow5mult+0x48>
 800f704:	2010      	movs	r0, #16
 800f706:	f7fd fdb7 	bl	800d278 <malloc>
 800f70a:	4602      	mov	r2, r0
 800f70c:	61f0      	str	r0, [r6, #28]
 800f70e:	b928      	cbnz	r0, 800f71c <__pow5mult+0x40>
 800f710:	4b1d      	ldr	r3, [pc, #116]	; (800f788 <__pow5mult+0xac>)
 800f712:	481e      	ldr	r0, [pc, #120]	; (800f78c <__pow5mult+0xb0>)
 800f714:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f718:	f7fd fd7e 	bl	800d218 <__assert_func>
 800f71c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f720:	6004      	str	r4, [r0, #0]
 800f722:	60c4      	str	r4, [r0, #12]
 800f724:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f72c:	b94c      	cbnz	r4, 800f742 <__pow5mult+0x66>
 800f72e:	f240 2171 	movw	r1, #625	; 0x271
 800f732:	4630      	mov	r0, r6
 800f734:	f7ff ff12 	bl	800f55c <__i2b>
 800f738:	2300      	movs	r3, #0
 800f73a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f73e:	4604      	mov	r4, r0
 800f740:	6003      	str	r3, [r0, #0]
 800f742:	f04f 0900 	mov.w	r9, #0
 800f746:	07eb      	lsls	r3, r5, #31
 800f748:	d50a      	bpl.n	800f760 <__pow5mult+0x84>
 800f74a:	4639      	mov	r1, r7
 800f74c:	4622      	mov	r2, r4
 800f74e:	4630      	mov	r0, r6
 800f750:	f7ff ff1a 	bl	800f588 <__multiply>
 800f754:	4639      	mov	r1, r7
 800f756:	4680      	mov	r8, r0
 800f758:	4630      	mov	r0, r6
 800f75a:	f7ff fdff 	bl	800f35c <_Bfree>
 800f75e:	4647      	mov	r7, r8
 800f760:	106d      	asrs	r5, r5, #1
 800f762:	d00b      	beq.n	800f77c <__pow5mult+0xa0>
 800f764:	6820      	ldr	r0, [r4, #0]
 800f766:	b938      	cbnz	r0, 800f778 <__pow5mult+0x9c>
 800f768:	4622      	mov	r2, r4
 800f76a:	4621      	mov	r1, r4
 800f76c:	4630      	mov	r0, r6
 800f76e:	f7ff ff0b 	bl	800f588 <__multiply>
 800f772:	6020      	str	r0, [r4, #0]
 800f774:	f8c0 9000 	str.w	r9, [r0]
 800f778:	4604      	mov	r4, r0
 800f77a:	e7e4      	b.n	800f746 <__pow5mult+0x6a>
 800f77c:	4638      	mov	r0, r7
 800f77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f782:	bf00      	nop
 800f784:	08012d40 	.word	0x08012d40
 800f788:	08012b72 	.word	0x08012b72
 800f78c:	08012bf2 	.word	0x08012bf2

0800f790 <__lshift>:
 800f790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f794:	460c      	mov	r4, r1
 800f796:	6849      	ldr	r1, [r1, #4]
 800f798:	6923      	ldr	r3, [r4, #16]
 800f79a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f79e:	68a3      	ldr	r3, [r4, #8]
 800f7a0:	4607      	mov	r7, r0
 800f7a2:	4691      	mov	r9, r2
 800f7a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f7a8:	f108 0601 	add.w	r6, r8, #1
 800f7ac:	42b3      	cmp	r3, r6
 800f7ae:	db0b      	blt.n	800f7c8 <__lshift+0x38>
 800f7b0:	4638      	mov	r0, r7
 800f7b2:	f7ff fd93 	bl	800f2dc <_Balloc>
 800f7b6:	4605      	mov	r5, r0
 800f7b8:	b948      	cbnz	r0, 800f7ce <__lshift+0x3e>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	4b28      	ldr	r3, [pc, #160]	; (800f860 <__lshift+0xd0>)
 800f7be:	4829      	ldr	r0, [pc, #164]	; (800f864 <__lshift+0xd4>)
 800f7c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f7c4:	f7fd fd28 	bl	800d218 <__assert_func>
 800f7c8:	3101      	adds	r1, #1
 800f7ca:	005b      	lsls	r3, r3, #1
 800f7cc:	e7ee      	b.n	800f7ac <__lshift+0x1c>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	f100 0114 	add.w	r1, r0, #20
 800f7d4:	f100 0210 	add.w	r2, r0, #16
 800f7d8:	4618      	mov	r0, r3
 800f7da:	4553      	cmp	r3, sl
 800f7dc:	db33      	blt.n	800f846 <__lshift+0xb6>
 800f7de:	6920      	ldr	r0, [r4, #16]
 800f7e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7e4:	f104 0314 	add.w	r3, r4, #20
 800f7e8:	f019 091f 	ands.w	r9, r9, #31
 800f7ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f7f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f7f4:	d02b      	beq.n	800f84e <__lshift+0xbe>
 800f7f6:	f1c9 0e20 	rsb	lr, r9, #32
 800f7fa:	468a      	mov	sl, r1
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	6818      	ldr	r0, [r3, #0]
 800f800:	fa00 f009 	lsl.w	r0, r0, r9
 800f804:	4310      	orrs	r0, r2
 800f806:	f84a 0b04 	str.w	r0, [sl], #4
 800f80a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f80e:	459c      	cmp	ip, r3
 800f810:	fa22 f20e 	lsr.w	r2, r2, lr
 800f814:	d8f3      	bhi.n	800f7fe <__lshift+0x6e>
 800f816:	ebac 0304 	sub.w	r3, ip, r4
 800f81a:	3b15      	subs	r3, #21
 800f81c:	f023 0303 	bic.w	r3, r3, #3
 800f820:	3304      	adds	r3, #4
 800f822:	f104 0015 	add.w	r0, r4, #21
 800f826:	4584      	cmp	ip, r0
 800f828:	bf38      	it	cc
 800f82a:	2304      	movcc	r3, #4
 800f82c:	50ca      	str	r2, [r1, r3]
 800f82e:	b10a      	cbz	r2, 800f834 <__lshift+0xa4>
 800f830:	f108 0602 	add.w	r6, r8, #2
 800f834:	3e01      	subs	r6, #1
 800f836:	4638      	mov	r0, r7
 800f838:	612e      	str	r6, [r5, #16]
 800f83a:	4621      	mov	r1, r4
 800f83c:	f7ff fd8e 	bl	800f35c <_Bfree>
 800f840:	4628      	mov	r0, r5
 800f842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f846:	f842 0f04 	str.w	r0, [r2, #4]!
 800f84a:	3301      	adds	r3, #1
 800f84c:	e7c5      	b.n	800f7da <__lshift+0x4a>
 800f84e:	3904      	subs	r1, #4
 800f850:	f853 2b04 	ldr.w	r2, [r3], #4
 800f854:	f841 2f04 	str.w	r2, [r1, #4]!
 800f858:	459c      	cmp	ip, r3
 800f85a:	d8f9      	bhi.n	800f850 <__lshift+0xc0>
 800f85c:	e7ea      	b.n	800f834 <__lshift+0xa4>
 800f85e:	bf00      	nop
 800f860:	08012be1 	.word	0x08012be1
 800f864:	08012bf2 	.word	0x08012bf2

0800f868 <__mcmp>:
 800f868:	b530      	push	{r4, r5, lr}
 800f86a:	6902      	ldr	r2, [r0, #16]
 800f86c:	690c      	ldr	r4, [r1, #16]
 800f86e:	1b12      	subs	r2, r2, r4
 800f870:	d10e      	bne.n	800f890 <__mcmp+0x28>
 800f872:	f100 0314 	add.w	r3, r0, #20
 800f876:	3114      	adds	r1, #20
 800f878:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f87c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f880:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f884:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f888:	42a5      	cmp	r5, r4
 800f88a:	d003      	beq.n	800f894 <__mcmp+0x2c>
 800f88c:	d305      	bcc.n	800f89a <__mcmp+0x32>
 800f88e:	2201      	movs	r2, #1
 800f890:	4610      	mov	r0, r2
 800f892:	bd30      	pop	{r4, r5, pc}
 800f894:	4283      	cmp	r3, r0
 800f896:	d3f3      	bcc.n	800f880 <__mcmp+0x18>
 800f898:	e7fa      	b.n	800f890 <__mcmp+0x28>
 800f89a:	f04f 32ff 	mov.w	r2, #4294967295
 800f89e:	e7f7      	b.n	800f890 <__mcmp+0x28>

0800f8a0 <__mdiff>:
 800f8a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a4:	460c      	mov	r4, r1
 800f8a6:	4606      	mov	r6, r0
 800f8a8:	4611      	mov	r1, r2
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	4690      	mov	r8, r2
 800f8ae:	f7ff ffdb 	bl	800f868 <__mcmp>
 800f8b2:	1e05      	subs	r5, r0, #0
 800f8b4:	d110      	bne.n	800f8d8 <__mdiff+0x38>
 800f8b6:	4629      	mov	r1, r5
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	f7ff fd0f 	bl	800f2dc <_Balloc>
 800f8be:	b930      	cbnz	r0, 800f8ce <__mdiff+0x2e>
 800f8c0:	4b3a      	ldr	r3, [pc, #232]	; (800f9ac <__mdiff+0x10c>)
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	f240 2137 	movw	r1, #567	; 0x237
 800f8c8:	4839      	ldr	r0, [pc, #228]	; (800f9b0 <__mdiff+0x110>)
 800f8ca:	f7fd fca5 	bl	800d218 <__assert_func>
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f8d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d8:	bfa4      	itt	ge
 800f8da:	4643      	movge	r3, r8
 800f8dc:	46a0      	movge	r8, r4
 800f8de:	4630      	mov	r0, r6
 800f8e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f8e4:	bfa6      	itte	ge
 800f8e6:	461c      	movge	r4, r3
 800f8e8:	2500      	movge	r5, #0
 800f8ea:	2501      	movlt	r5, #1
 800f8ec:	f7ff fcf6 	bl	800f2dc <_Balloc>
 800f8f0:	b920      	cbnz	r0, 800f8fc <__mdiff+0x5c>
 800f8f2:	4b2e      	ldr	r3, [pc, #184]	; (800f9ac <__mdiff+0x10c>)
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	f240 2145 	movw	r1, #581	; 0x245
 800f8fa:	e7e5      	b.n	800f8c8 <__mdiff+0x28>
 800f8fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f900:	6926      	ldr	r6, [r4, #16]
 800f902:	60c5      	str	r5, [r0, #12]
 800f904:	f104 0914 	add.w	r9, r4, #20
 800f908:	f108 0514 	add.w	r5, r8, #20
 800f90c:	f100 0e14 	add.w	lr, r0, #20
 800f910:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f914:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f918:	f108 0210 	add.w	r2, r8, #16
 800f91c:	46f2      	mov	sl, lr
 800f91e:	2100      	movs	r1, #0
 800f920:	f859 3b04 	ldr.w	r3, [r9], #4
 800f924:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f928:	fa11 f88b 	uxtah	r8, r1, fp
 800f92c:	b299      	uxth	r1, r3
 800f92e:	0c1b      	lsrs	r3, r3, #16
 800f930:	eba8 0801 	sub.w	r8, r8, r1
 800f934:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f938:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f93c:	fa1f f888 	uxth.w	r8, r8
 800f940:	1419      	asrs	r1, r3, #16
 800f942:	454e      	cmp	r6, r9
 800f944:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f948:	f84a 3b04 	str.w	r3, [sl], #4
 800f94c:	d8e8      	bhi.n	800f920 <__mdiff+0x80>
 800f94e:	1b33      	subs	r3, r6, r4
 800f950:	3b15      	subs	r3, #21
 800f952:	f023 0303 	bic.w	r3, r3, #3
 800f956:	3304      	adds	r3, #4
 800f958:	3415      	adds	r4, #21
 800f95a:	42a6      	cmp	r6, r4
 800f95c:	bf38      	it	cc
 800f95e:	2304      	movcc	r3, #4
 800f960:	441d      	add	r5, r3
 800f962:	4473      	add	r3, lr
 800f964:	469e      	mov	lr, r3
 800f966:	462e      	mov	r6, r5
 800f968:	4566      	cmp	r6, ip
 800f96a:	d30e      	bcc.n	800f98a <__mdiff+0xea>
 800f96c:	f10c 0203 	add.w	r2, ip, #3
 800f970:	1b52      	subs	r2, r2, r5
 800f972:	f022 0203 	bic.w	r2, r2, #3
 800f976:	3d03      	subs	r5, #3
 800f978:	45ac      	cmp	ip, r5
 800f97a:	bf38      	it	cc
 800f97c:	2200      	movcc	r2, #0
 800f97e:	4413      	add	r3, r2
 800f980:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f984:	b17a      	cbz	r2, 800f9a6 <__mdiff+0x106>
 800f986:	6107      	str	r7, [r0, #16]
 800f988:	e7a4      	b.n	800f8d4 <__mdiff+0x34>
 800f98a:	f856 8b04 	ldr.w	r8, [r6], #4
 800f98e:	fa11 f288 	uxtah	r2, r1, r8
 800f992:	1414      	asrs	r4, r2, #16
 800f994:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f998:	b292      	uxth	r2, r2
 800f99a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f99e:	f84e 2b04 	str.w	r2, [lr], #4
 800f9a2:	1421      	asrs	r1, r4, #16
 800f9a4:	e7e0      	b.n	800f968 <__mdiff+0xc8>
 800f9a6:	3f01      	subs	r7, #1
 800f9a8:	e7ea      	b.n	800f980 <__mdiff+0xe0>
 800f9aa:	bf00      	nop
 800f9ac:	08012be1 	.word	0x08012be1
 800f9b0:	08012bf2 	.word	0x08012bf2

0800f9b4 <__ulp>:
 800f9b4:	b082      	sub	sp, #8
 800f9b6:	ed8d 0b00 	vstr	d0, [sp]
 800f9ba:	9a01      	ldr	r2, [sp, #4]
 800f9bc:	4b0f      	ldr	r3, [pc, #60]	; (800f9fc <__ulp+0x48>)
 800f9be:	4013      	ands	r3, r2
 800f9c0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	dc08      	bgt.n	800f9da <__ulp+0x26>
 800f9c8:	425b      	negs	r3, r3
 800f9ca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f9ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f9d2:	da04      	bge.n	800f9de <__ulp+0x2a>
 800f9d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f9d8:	4113      	asrs	r3, r2
 800f9da:	2200      	movs	r2, #0
 800f9dc:	e008      	b.n	800f9f0 <__ulp+0x3c>
 800f9de:	f1a2 0314 	sub.w	r3, r2, #20
 800f9e2:	2b1e      	cmp	r3, #30
 800f9e4:	bfda      	itte	le
 800f9e6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f9ea:	40da      	lsrle	r2, r3
 800f9ec:	2201      	movgt	r2, #1
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	4610      	mov	r0, r2
 800f9f4:	ec41 0b10 	vmov	d0, r0, r1
 800f9f8:	b002      	add	sp, #8
 800f9fa:	4770      	bx	lr
 800f9fc:	7ff00000 	.word	0x7ff00000

0800fa00 <__b2d>:
 800fa00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa04:	6906      	ldr	r6, [r0, #16]
 800fa06:	f100 0814 	add.w	r8, r0, #20
 800fa0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fa0e:	1f37      	subs	r7, r6, #4
 800fa10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa14:	4610      	mov	r0, r2
 800fa16:	f7ff fd53 	bl	800f4c0 <__hi0bits>
 800fa1a:	f1c0 0320 	rsb	r3, r0, #32
 800fa1e:	280a      	cmp	r0, #10
 800fa20:	600b      	str	r3, [r1, #0]
 800fa22:	491b      	ldr	r1, [pc, #108]	; (800fa90 <__b2d+0x90>)
 800fa24:	dc15      	bgt.n	800fa52 <__b2d+0x52>
 800fa26:	f1c0 0c0b 	rsb	ip, r0, #11
 800fa2a:	fa22 f30c 	lsr.w	r3, r2, ip
 800fa2e:	45b8      	cmp	r8, r7
 800fa30:	ea43 0501 	orr.w	r5, r3, r1
 800fa34:	bf34      	ite	cc
 800fa36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa3a:	2300      	movcs	r3, #0
 800fa3c:	3015      	adds	r0, #21
 800fa3e:	fa02 f000 	lsl.w	r0, r2, r0
 800fa42:	fa23 f30c 	lsr.w	r3, r3, ip
 800fa46:	4303      	orrs	r3, r0
 800fa48:	461c      	mov	r4, r3
 800fa4a:	ec45 4b10 	vmov	d0, r4, r5
 800fa4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa52:	45b8      	cmp	r8, r7
 800fa54:	bf3a      	itte	cc
 800fa56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa5a:	f1a6 0708 	subcc.w	r7, r6, #8
 800fa5e:	2300      	movcs	r3, #0
 800fa60:	380b      	subs	r0, #11
 800fa62:	d012      	beq.n	800fa8a <__b2d+0x8a>
 800fa64:	f1c0 0120 	rsb	r1, r0, #32
 800fa68:	fa23 f401 	lsr.w	r4, r3, r1
 800fa6c:	4082      	lsls	r2, r0
 800fa6e:	4322      	orrs	r2, r4
 800fa70:	4547      	cmp	r7, r8
 800fa72:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800fa76:	bf8c      	ite	hi
 800fa78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fa7c:	2200      	movls	r2, #0
 800fa7e:	4083      	lsls	r3, r0
 800fa80:	40ca      	lsrs	r2, r1
 800fa82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fa86:	4313      	orrs	r3, r2
 800fa88:	e7de      	b.n	800fa48 <__b2d+0x48>
 800fa8a:	ea42 0501 	orr.w	r5, r2, r1
 800fa8e:	e7db      	b.n	800fa48 <__b2d+0x48>
 800fa90:	3ff00000 	.word	0x3ff00000

0800fa94 <__d2b>:
 800fa94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa98:	460f      	mov	r7, r1
 800fa9a:	2101      	movs	r1, #1
 800fa9c:	ec59 8b10 	vmov	r8, r9, d0
 800faa0:	4616      	mov	r6, r2
 800faa2:	f7ff fc1b 	bl	800f2dc <_Balloc>
 800faa6:	4604      	mov	r4, r0
 800faa8:	b930      	cbnz	r0, 800fab8 <__d2b+0x24>
 800faaa:	4602      	mov	r2, r0
 800faac:	4b24      	ldr	r3, [pc, #144]	; (800fb40 <__d2b+0xac>)
 800faae:	4825      	ldr	r0, [pc, #148]	; (800fb44 <__d2b+0xb0>)
 800fab0:	f240 310f 	movw	r1, #783	; 0x30f
 800fab4:	f7fd fbb0 	bl	800d218 <__assert_func>
 800fab8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fabc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fac0:	bb2d      	cbnz	r5, 800fb0e <__d2b+0x7a>
 800fac2:	9301      	str	r3, [sp, #4]
 800fac4:	f1b8 0300 	subs.w	r3, r8, #0
 800fac8:	d026      	beq.n	800fb18 <__d2b+0x84>
 800faca:	4668      	mov	r0, sp
 800facc:	9300      	str	r3, [sp, #0]
 800face:	f7ff fd17 	bl	800f500 <__lo0bits>
 800fad2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fad6:	b1e8      	cbz	r0, 800fb14 <__d2b+0x80>
 800fad8:	f1c0 0320 	rsb	r3, r0, #32
 800fadc:	fa02 f303 	lsl.w	r3, r2, r3
 800fae0:	430b      	orrs	r3, r1
 800fae2:	40c2      	lsrs	r2, r0
 800fae4:	6163      	str	r3, [r4, #20]
 800fae6:	9201      	str	r2, [sp, #4]
 800fae8:	9b01      	ldr	r3, [sp, #4]
 800faea:	61a3      	str	r3, [r4, #24]
 800faec:	2b00      	cmp	r3, #0
 800faee:	bf14      	ite	ne
 800faf0:	2202      	movne	r2, #2
 800faf2:	2201      	moveq	r2, #1
 800faf4:	6122      	str	r2, [r4, #16]
 800faf6:	b1bd      	cbz	r5, 800fb28 <__d2b+0x94>
 800faf8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fafc:	4405      	add	r5, r0
 800fafe:	603d      	str	r5, [r7, #0]
 800fb00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fb04:	6030      	str	r0, [r6, #0]
 800fb06:	4620      	mov	r0, r4
 800fb08:	b003      	add	sp, #12
 800fb0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fb12:	e7d6      	b.n	800fac2 <__d2b+0x2e>
 800fb14:	6161      	str	r1, [r4, #20]
 800fb16:	e7e7      	b.n	800fae8 <__d2b+0x54>
 800fb18:	a801      	add	r0, sp, #4
 800fb1a:	f7ff fcf1 	bl	800f500 <__lo0bits>
 800fb1e:	9b01      	ldr	r3, [sp, #4]
 800fb20:	6163      	str	r3, [r4, #20]
 800fb22:	3020      	adds	r0, #32
 800fb24:	2201      	movs	r2, #1
 800fb26:	e7e5      	b.n	800faf4 <__d2b+0x60>
 800fb28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fb30:	6038      	str	r0, [r7, #0]
 800fb32:	6918      	ldr	r0, [r3, #16]
 800fb34:	f7ff fcc4 	bl	800f4c0 <__hi0bits>
 800fb38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb3c:	e7e2      	b.n	800fb04 <__d2b+0x70>
 800fb3e:	bf00      	nop
 800fb40:	08012be1 	.word	0x08012be1
 800fb44:	08012bf2 	.word	0x08012bf2

0800fb48 <__ratio>:
 800fb48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb4c:	4688      	mov	r8, r1
 800fb4e:	4669      	mov	r1, sp
 800fb50:	4681      	mov	r9, r0
 800fb52:	f7ff ff55 	bl	800fa00 <__b2d>
 800fb56:	a901      	add	r1, sp, #4
 800fb58:	4640      	mov	r0, r8
 800fb5a:	ec55 4b10 	vmov	r4, r5, d0
 800fb5e:	f7ff ff4f 	bl	800fa00 <__b2d>
 800fb62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fb66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fb6a:	eba3 0c02 	sub.w	ip, r3, r2
 800fb6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fb72:	1a9b      	subs	r3, r3, r2
 800fb74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fb78:	ec51 0b10 	vmov	r0, r1, d0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	bfd6      	itet	le
 800fb80:	460a      	movle	r2, r1
 800fb82:	462a      	movgt	r2, r5
 800fb84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fb88:	468b      	mov	fp, r1
 800fb8a:	462f      	mov	r7, r5
 800fb8c:	bfd4      	ite	le
 800fb8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fb92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fb96:	4620      	mov	r0, r4
 800fb98:	ee10 2a10 	vmov	r2, s0
 800fb9c:	465b      	mov	r3, fp
 800fb9e:	4639      	mov	r1, r7
 800fba0:	f7f0 fe7c 	bl	800089c <__aeabi_ddiv>
 800fba4:	ec41 0b10 	vmov	d0, r0, r1
 800fba8:	b003      	add	sp, #12
 800fbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbae <__copybits>:
 800fbae:	3901      	subs	r1, #1
 800fbb0:	b570      	push	{r4, r5, r6, lr}
 800fbb2:	1149      	asrs	r1, r1, #5
 800fbb4:	6914      	ldr	r4, [r2, #16]
 800fbb6:	3101      	adds	r1, #1
 800fbb8:	f102 0314 	add.w	r3, r2, #20
 800fbbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fbc0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fbc4:	1f05      	subs	r5, r0, #4
 800fbc6:	42a3      	cmp	r3, r4
 800fbc8:	d30c      	bcc.n	800fbe4 <__copybits+0x36>
 800fbca:	1aa3      	subs	r3, r4, r2
 800fbcc:	3b11      	subs	r3, #17
 800fbce:	f023 0303 	bic.w	r3, r3, #3
 800fbd2:	3211      	adds	r2, #17
 800fbd4:	42a2      	cmp	r2, r4
 800fbd6:	bf88      	it	hi
 800fbd8:	2300      	movhi	r3, #0
 800fbda:	4418      	add	r0, r3
 800fbdc:	2300      	movs	r3, #0
 800fbde:	4288      	cmp	r0, r1
 800fbe0:	d305      	bcc.n	800fbee <__copybits+0x40>
 800fbe2:	bd70      	pop	{r4, r5, r6, pc}
 800fbe4:	f853 6b04 	ldr.w	r6, [r3], #4
 800fbe8:	f845 6f04 	str.w	r6, [r5, #4]!
 800fbec:	e7eb      	b.n	800fbc6 <__copybits+0x18>
 800fbee:	f840 3b04 	str.w	r3, [r0], #4
 800fbf2:	e7f4      	b.n	800fbde <__copybits+0x30>

0800fbf4 <__any_on>:
 800fbf4:	f100 0214 	add.w	r2, r0, #20
 800fbf8:	6900      	ldr	r0, [r0, #16]
 800fbfa:	114b      	asrs	r3, r1, #5
 800fbfc:	4298      	cmp	r0, r3
 800fbfe:	b510      	push	{r4, lr}
 800fc00:	db11      	blt.n	800fc26 <__any_on+0x32>
 800fc02:	dd0a      	ble.n	800fc1a <__any_on+0x26>
 800fc04:	f011 011f 	ands.w	r1, r1, #31
 800fc08:	d007      	beq.n	800fc1a <__any_on+0x26>
 800fc0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fc0e:	fa24 f001 	lsr.w	r0, r4, r1
 800fc12:	fa00 f101 	lsl.w	r1, r0, r1
 800fc16:	428c      	cmp	r4, r1
 800fc18:	d10b      	bne.n	800fc32 <__any_on+0x3e>
 800fc1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d803      	bhi.n	800fc2a <__any_on+0x36>
 800fc22:	2000      	movs	r0, #0
 800fc24:	bd10      	pop	{r4, pc}
 800fc26:	4603      	mov	r3, r0
 800fc28:	e7f7      	b.n	800fc1a <__any_on+0x26>
 800fc2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc2e:	2900      	cmp	r1, #0
 800fc30:	d0f5      	beq.n	800fc1e <__any_on+0x2a>
 800fc32:	2001      	movs	r0, #1
 800fc34:	e7f6      	b.n	800fc24 <__any_on+0x30>

0800fc36 <sulp>:
 800fc36:	b570      	push	{r4, r5, r6, lr}
 800fc38:	4604      	mov	r4, r0
 800fc3a:	460d      	mov	r5, r1
 800fc3c:	ec45 4b10 	vmov	d0, r4, r5
 800fc40:	4616      	mov	r6, r2
 800fc42:	f7ff feb7 	bl	800f9b4 <__ulp>
 800fc46:	ec51 0b10 	vmov	r0, r1, d0
 800fc4a:	b17e      	cbz	r6, 800fc6c <sulp+0x36>
 800fc4c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fc50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	dd09      	ble.n	800fc6c <sulp+0x36>
 800fc58:	051b      	lsls	r3, r3, #20
 800fc5a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fc5e:	2400      	movs	r4, #0
 800fc60:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fc64:	4622      	mov	r2, r4
 800fc66:	462b      	mov	r3, r5
 800fc68:	f7f0 fcee 	bl	8000648 <__aeabi_dmul>
 800fc6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fc70 <_strtod_l>:
 800fc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc74:	ed2d 8b02 	vpush	{d8}
 800fc78:	b09b      	sub	sp, #108	; 0x6c
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	9213      	str	r2, [sp, #76]	; 0x4c
 800fc7e:	2200      	movs	r2, #0
 800fc80:	9216      	str	r2, [sp, #88]	; 0x58
 800fc82:	460d      	mov	r5, r1
 800fc84:	f04f 0800 	mov.w	r8, #0
 800fc88:	f04f 0900 	mov.w	r9, #0
 800fc8c:	460a      	mov	r2, r1
 800fc8e:	9215      	str	r2, [sp, #84]	; 0x54
 800fc90:	7811      	ldrb	r1, [r2, #0]
 800fc92:	292b      	cmp	r1, #43	; 0x2b
 800fc94:	d04c      	beq.n	800fd30 <_strtod_l+0xc0>
 800fc96:	d83a      	bhi.n	800fd0e <_strtod_l+0x9e>
 800fc98:	290d      	cmp	r1, #13
 800fc9a:	d834      	bhi.n	800fd06 <_strtod_l+0x96>
 800fc9c:	2908      	cmp	r1, #8
 800fc9e:	d834      	bhi.n	800fd0a <_strtod_l+0x9a>
 800fca0:	2900      	cmp	r1, #0
 800fca2:	d03d      	beq.n	800fd20 <_strtod_l+0xb0>
 800fca4:	2200      	movs	r2, #0
 800fca6:	920a      	str	r2, [sp, #40]	; 0x28
 800fca8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800fcaa:	7832      	ldrb	r2, [r6, #0]
 800fcac:	2a30      	cmp	r2, #48	; 0x30
 800fcae:	f040 80b4 	bne.w	800fe1a <_strtod_l+0x1aa>
 800fcb2:	7872      	ldrb	r2, [r6, #1]
 800fcb4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fcb8:	2a58      	cmp	r2, #88	; 0x58
 800fcba:	d170      	bne.n	800fd9e <_strtod_l+0x12e>
 800fcbc:	9302      	str	r3, [sp, #8]
 800fcbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcc0:	9301      	str	r3, [sp, #4]
 800fcc2:	ab16      	add	r3, sp, #88	; 0x58
 800fcc4:	9300      	str	r3, [sp, #0]
 800fcc6:	4a8e      	ldr	r2, [pc, #568]	; (800ff00 <_strtod_l+0x290>)
 800fcc8:	ab17      	add	r3, sp, #92	; 0x5c
 800fcca:	a915      	add	r1, sp, #84	; 0x54
 800fccc:	4620      	mov	r0, r4
 800fcce:	f001 fac1 	bl	8011254 <__gethex>
 800fcd2:	f010 070f 	ands.w	r7, r0, #15
 800fcd6:	4605      	mov	r5, r0
 800fcd8:	d005      	beq.n	800fce6 <_strtod_l+0x76>
 800fcda:	2f06      	cmp	r7, #6
 800fcdc:	d12a      	bne.n	800fd34 <_strtod_l+0xc4>
 800fcde:	3601      	adds	r6, #1
 800fce0:	2300      	movs	r3, #0
 800fce2:	9615      	str	r6, [sp, #84]	; 0x54
 800fce4:	930a      	str	r3, [sp, #40]	; 0x28
 800fce6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	f040 857f 	bne.w	80107ec <_strtod_l+0xb7c>
 800fcee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcf0:	b1db      	cbz	r3, 800fd2a <_strtod_l+0xba>
 800fcf2:	4642      	mov	r2, r8
 800fcf4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fcf8:	ec43 2b10 	vmov	d0, r2, r3
 800fcfc:	b01b      	add	sp, #108	; 0x6c
 800fcfe:	ecbd 8b02 	vpop	{d8}
 800fd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd06:	2920      	cmp	r1, #32
 800fd08:	d1cc      	bne.n	800fca4 <_strtod_l+0x34>
 800fd0a:	3201      	adds	r2, #1
 800fd0c:	e7bf      	b.n	800fc8e <_strtod_l+0x1e>
 800fd0e:	292d      	cmp	r1, #45	; 0x2d
 800fd10:	d1c8      	bne.n	800fca4 <_strtod_l+0x34>
 800fd12:	2101      	movs	r1, #1
 800fd14:	910a      	str	r1, [sp, #40]	; 0x28
 800fd16:	1c51      	adds	r1, r2, #1
 800fd18:	9115      	str	r1, [sp, #84]	; 0x54
 800fd1a:	7852      	ldrb	r2, [r2, #1]
 800fd1c:	2a00      	cmp	r2, #0
 800fd1e:	d1c3      	bne.n	800fca8 <_strtod_l+0x38>
 800fd20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fd22:	9515      	str	r5, [sp, #84]	; 0x54
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f040 855f 	bne.w	80107e8 <_strtod_l+0xb78>
 800fd2a:	4642      	mov	r2, r8
 800fd2c:	464b      	mov	r3, r9
 800fd2e:	e7e3      	b.n	800fcf8 <_strtod_l+0x88>
 800fd30:	2100      	movs	r1, #0
 800fd32:	e7ef      	b.n	800fd14 <_strtod_l+0xa4>
 800fd34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fd36:	b13a      	cbz	r2, 800fd48 <_strtod_l+0xd8>
 800fd38:	2135      	movs	r1, #53	; 0x35
 800fd3a:	a818      	add	r0, sp, #96	; 0x60
 800fd3c:	f7ff ff37 	bl	800fbae <__copybits>
 800fd40:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fd42:	4620      	mov	r0, r4
 800fd44:	f7ff fb0a 	bl	800f35c <_Bfree>
 800fd48:	3f01      	subs	r7, #1
 800fd4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fd4c:	2f04      	cmp	r7, #4
 800fd4e:	d806      	bhi.n	800fd5e <_strtod_l+0xee>
 800fd50:	e8df f007 	tbb	[pc, r7]
 800fd54:	201d0314 	.word	0x201d0314
 800fd58:	14          	.byte	0x14
 800fd59:	00          	.byte	0x00
 800fd5a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800fd5e:	05e9      	lsls	r1, r5, #23
 800fd60:	bf48      	it	mi
 800fd62:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800fd66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd6a:	0d1b      	lsrs	r3, r3, #20
 800fd6c:	051b      	lsls	r3, r3, #20
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d1b9      	bne.n	800fce6 <_strtod_l+0x76>
 800fd72:	f7fe fbab 	bl	800e4cc <__errno>
 800fd76:	2322      	movs	r3, #34	; 0x22
 800fd78:	6003      	str	r3, [r0, #0]
 800fd7a:	e7b4      	b.n	800fce6 <_strtod_l+0x76>
 800fd7c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800fd80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fd84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fd88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800fd8c:	e7e7      	b.n	800fd5e <_strtod_l+0xee>
 800fd8e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ff08 <_strtod_l+0x298>
 800fd92:	e7e4      	b.n	800fd5e <_strtod_l+0xee>
 800fd94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800fd98:	f04f 38ff 	mov.w	r8, #4294967295
 800fd9c:	e7df      	b.n	800fd5e <_strtod_l+0xee>
 800fd9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fda0:	1c5a      	adds	r2, r3, #1
 800fda2:	9215      	str	r2, [sp, #84]	; 0x54
 800fda4:	785b      	ldrb	r3, [r3, #1]
 800fda6:	2b30      	cmp	r3, #48	; 0x30
 800fda8:	d0f9      	beq.n	800fd9e <_strtod_l+0x12e>
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d09b      	beq.n	800fce6 <_strtod_l+0x76>
 800fdae:	2301      	movs	r3, #1
 800fdb0:	f04f 0a00 	mov.w	sl, #0
 800fdb4:	9304      	str	r3, [sp, #16]
 800fdb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fdba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800fdbe:	46d3      	mov	fp, sl
 800fdc0:	220a      	movs	r2, #10
 800fdc2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800fdc4:	7806      	ldrb	r6, [r0, #0]
 800fdc6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fdca:	b2d9      	uxtb	r1, r3
 800fdcc:	2909      	cmp	r1, #9
 800fdce:	d926      	bls.n	800fe1e <_strtod_l+0x1ae>
 800fdd0:	494c      	ldr	r1, [pc, #304]	; (800ff04 <_strtod_l+0x294>)
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	f001 f9a6 	bl	8011124 <strncmp>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	d030      	beq.n	800fe3e <_strtod_l+0x1ce>
 800fddc:	2000      	movs	r0, #0
 800fdde:	4632      	mov	r2, r6
 800fde0:	9005      	str	r0, [sp, #20]
 800fde2:	465e      	mov	r6, fp
 800fde4:	4603      	mov	r3, r0
 800fde6:	2a65      	cmp	r2, #101	; 0x65
 800fde8:	d001      	beq.n	800fdee <_strtod_l+0x17e>
 800fdea:	2a45      	cmp	r2, #69	; 0x45
 800fdec:	d113      	bne.n	800fe16 <_strtod_l+0x1a6>
 800fdee:	b91e      	cbnz	r6, 800fdf8 <_strtod_l+0x188>
 800fdf0:	9a04      	ldr	r2, [sp, #16]
 800fdf2:	4302      	orrs	r2, r0
 800fdf4:	d094      	beq.n	800fd20 <_strtod_l+0xb0>
 800fdf6:	2600      	movs	r6, #0
 800fdf8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800fdfa:	1c6a      	adds	r2, r5, #1
 800fdfc:	9215      	str	r2, [sp, #84]	; 0x54
 800fdfe:	786a      	ldrb	r2, [r5, #1]
 800fe00:	2a2b      	cmp	r2, #43	; 0x2b
 800fe02:	d074      	beq.n	800feee <_strtod_l+0x27e>
 800fe04:	2a2d      	cmp	r2, #45	; 0x2d
 800fe06:	d078      	beq.n	800fefa <_strtod_l+0x28a>
 800fe08:	f04f 0c00 	mov.w	ip, #0
 800fe0c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fe10:	2909      	cmp	r1, #9
 800fe12:	d97f      	bls.n	800ff14 <_strtod_l+0x2a4>
 800fe14:	9515      	str	r5, [sp, #84]	; 0x54
 800fe16:	2700      	movs	r7, #0
 800fe18:	e09e      	b.n	800ff58 <_strtod_l+0x2e8>
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	e7c8      	b.n	800fdb0 <_strtod_l+0x140>
 800fe1e:	f1bb 0f08 	cmp.w	fp, #8
 800fe22:	bfd8      	it	le
 800fe24:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fe26:	f100 0001 	add.w	r0, r0, #1
 800fe2a:	bfda      	itte	le
 800fe2c:	fb02 3301 	mlale	r3, r2, r1, r3
 800fe30:	9309      	strle	r3, [sp, #36]	; 0x24
 800fe32:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800fe36:	f10b 0b01 	add.w	fp, fp, #1
 800fe3a:	9015      	str	r0, [sp, #84]	; 0x54
 800fe3c:	e7c1      	b.n	800fdc2 <_strtod_l+0x152>
 800fe3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe40:	1c5a      	adds	r2, r3, #1
 800fe42:	9215      	str	r2, [sp, #84]	; 0x54
 800fe44:	785a      	ldrb	r2, [r3, #1]
 800fe46:	f1bb 0f00 	cmp.w	fp, #0
 800fe4a:	d037      	beq.n	800febc <_strtod_l+0x24c>
 800fe4c:	9005      	str	r0, [sp, #20]
 800fe4e:	465e      	mov	r6, fp
 800fe50:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fe54:	2b09      	cmp	r3, #9
 800fe56:	d912      	bls.n	800fe7e <_strtod_l+0x20e>
 800fe58:	2301      	movs	r3, #1
 800fe5a:	e7c4      	b.n	800fde6 <_strtod_l+0x176>
 800fe5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe5e:	1c5a      	adds	r2, r3, #1
 800fe60:	9215      	str	r2, [sp, #84]	; 0x54
 800fe62:	785a      	ldrb	r2, [r3, #1]
 800fe64:	3001      	adds	r0, #1
 800fe66:	2a30      	cmp	r2, #48	; 0x30
 800fe68:	d0f8      	beq.n	800fe5c <_strtod_l+0x1ec>
 800fe6a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fe6e:	2b08      	cmp	r3, #8
 800fe70:	f200 84c1 	bhi.w	80107f6 <_strtod_l+0xb86>
 800fe74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe76:	9005      	str	r0, [sp, #20]
 800fe78:	2000      	movs	r0, #0
 800fe7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe7c:	4606      	mov	r6, r0
 800fe7e:	3a30      	subs	r2, #48	; 0x30
 800fe80:	f100 0301 	add.w	r3, r0, #1
 800fe84:	d014      	beq.n	800feb0 <_strtod_l+0x240>
 800fe86:	9905      	ldr	r1, [sp, #20]
 800fe88:	4419      	add	r1, r3
 800fe8a:	9105      	str	r1, [sp, #20]
 800fe8c:	4633      	mov	r3, r6
 800fe8e:	eb00 0c06 	add.w	ip, r0, r6
 800fe92:	210a      	movs	r1, #10
 800fe94:	4563      	cmp	r3, ip
 800fe96:	d113      	bne.n	800fec0 <_strtod_l+0x250>
 800fe98:	1833      	adds	r3, r6, r0
 800fe9a:	2b08      	cmp	r3, #8
 800fe9c:	f106 0601 	add.w	r6, r6, #1
 800fea0:	4406      	add	r6, r0
 800fea2:	dc1a      	bgt.n	800feda <_strtod_l+0x26a>
 800fea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fea6:	230a      	movs	r3, #10
 800fea8:	fb03 2301 	mla	r3, r3, r1, r2
 800feac:	9309      	str	r3, [sp, #36]	; 0x24
 800feae:	2300      	movs	r3, #0
 800feb0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800feb2:	1c51      	adds	r1, r2, #1
 800feb4:	9115      	str	r1, [sp, #84]	; 0x54
 800feb6:	7852      	ldrb	r2, [r2, #1]
 800feb8:	4618      	mov	r0, r3
 800feba:	e7c9      	b.n	800fe50 <_strtod_l+0x1e0>
 800febc:	4658      	mov	r0, fp
 800febe:	e7d2      	b.n	800fe66 <_strtod_l+0x1f6>
 800fec0:	2b08      	cmp	r3, #8
 800fec2:	f103 0301 	add.w	r3, r3, #1
 800fec6:	dc03      	bgt.n	800fed0 <_strtod_l+0x260>
 800fec8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800feca:	434f      	muls	r7, r1
 800fecc:	9709      	str	r7, [sp, #36]	; 0x24
 800fece:	e7e1      	b.n	800fe94 <_strtod_l+0x224>
 800fed0:	2b10      	cmp	r3, #16
 800fed2:	bfd8      	it	le
 800fed4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800fed8:	e7dc      	b.n	800fe94 <_strtod_l+0x224>
 800feda:	2e10      	cmp	r6, #16
 800fedc:	bfdc      	itt	le
 800fede:	230a      	movle	r3, #10
 800fee0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800fee4:	e7e3      	b.n	800feae <_strtod_l+0x23e>
 800fee6:	2300      	movs	r3, #0
 800fee8:	9305      	str	r3, [sp, #20]
 800feea:	2301      	movs	r3, #1
 800feec:	e780      	b.n	800fdf0 <_strtod_l+0x180>
 800feee:	f04f 0c00 	mov.w	ip, #0
 800fef2:	1caa      	adds	r2, r5, #2
 800fef4:	9215      	str	r2, [sp, #84]	; 0x54
 800fef6:	78aa      	ldrb	r2, [r5, #2]
 800fef8:	e788      	b.n	800fe0c <_strtod_l+0x19c>
 800fefa:	f04f 0c01 	mov.w	ip, #1
 800fefe:	e7f8      	b.n	800fef2 <_strtod_l+0x282>
 800ff00:	08012d50 	.word	0x08012d50
 800ff04:	08012d4c 	.word	0x08012d4c
 800ff08:	7ff00000 	.word	0x7ff00000
 800ff0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ff0e:	1c51      	adds	r1, r2, #1
 800ff10:	9115      	str	r1, [sp, #84]	; 0x54
 800ff12:	7852      	ldrb	r2, [r2, #1]
 800ff14:	2a30      	cmp	r2, #48	; 0x30
 800ff16:	d0f9      	beq.n	800ff0c <_strtod_l+0x29c>
 800ff18:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ff1c:	2908      	cmp	r1, #8
 800ff1e:	f63f af7a 	bhi.w	800fe16 <_strtod_l+0x1a6>
 800ff22:	3a30      	subs	r2, #48	; 0x30
 800ff24:	9208      	str	r2, [sp, #32]
 800ff26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ff28:	920c      	str	r2, [sp, #48]	; 0x30
 800ff2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ff2c:	1c57      	adds	r7, r2, #1
 800ff2e:	9715      	str	r7, [sp, #84]	; 0x54
 800ff30:	7852      	ldrb	r2, [r2, #1]
 800ff32:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ff36:	f1be 0f09 	cmp.w	lr, #9
 800ff3a:	d938      	bls.n	800ffae <_strtod_l+0x33e>
 800ff3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ff3e:	1a7f      	subs	r7, r7, r1
 800ff40:	2f08      	cmp	r7, #8
 800ff42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ff46:	dc03      	bgt.n	800ff50 <_strtod_l+0x2e0>
 800ff48:	9908      	ldr	r1, [sp, #32]
 800ff4a:	428f      	cmp	r7, r1
 800ff4c:	bfa8      	it	ge
 800ff4e:	460f      	movge	r7, r1
 800ff50:	f1bc 0f00 	cmp.w	ip, #0
 800ff54:	d000      	beq.n	800ff58 <_strtod_l+0x2e8>
 800ff56:	427f      	negs	r7, r7
 800ff58:	2e00      	cmp	r6, #0
 800ff5a:	d14f      	bne.n	800fffc <_strtod_l+0x38c>
 800ff5c:	9904      	ldr	r1, [sp, #16]
 800ff5e:	4301      	orrs	r1, r0
 800ff60:	f47f aec1 	bne.w	800fce6 <_strtod_l+0x76>
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	f47f aedb 	bne.w	800fd20 <_strtod_l+0xb0>
 800ff6a:	2a69      	cmp	r2, #105	; 0x69
 800ff6c:	d029      	beq.n	800ffc2 <_strtod_l+0x352>
 800ff6e:	dc26      	bgt.n	800ffbe <_strtod_l+0x34e>
 800ff70:	2a49      	cmp	r2, #73	; 0x49
 800ff72:	d026      	beq.n	800ffc2 <_strtod_l+0x352>
 800ff74:	2a4e      	cmp	r2, #78	; 0x4e
 800ff76:	f47f aed3 	bne.w	800fd20 <_strtod_l+0xb0>
 800ff7a:	499b      	ldr	r1, [pc, #620]	; (80101e8 <_strtod_l+0x578>)
 800ff7c:	a815      	add	r0, sp, #84	; 0x54
 800ff7e:	f001 fba9 	bl	80116d4 <__match>
 800ff82:	2800      	cmp	r0, #0
 800ff84:	f43f aecc 	beq.w	800fd20 <_strtod_l+0xb0>
 800ff88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	2b28      	cmp	r3, #40	; 0x28
 800ff8e:	d12f      	bne.n	800fff0 <_strtod_l+0x380>
 800ff90:	4996      	ldr	r1, [pc, #600]	; (80101ec <_strtod_l+0x57c>)
 800ff92:	aa18      	add	r2, sp, #96	; 0x60
 800ff94:	a815      	add	r0, sp, #84	; 0x54
 800ff96:	f001 fbb1 	bl	80116fc <__hexnan>
 800ff9a:	2805      	cmp	r0, #5
 800ff9c:	d128      	bne.n	800fff0 <_strtod_l+0x380>
 800ff9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ffa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ffa4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ffa8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ffac:	e69b      	b.n	800fce6 <_strtod_l+0x76>
 800ffae:	9f08      	ldr	r7, [sp, #32]
 800ffb0:	210a      	movs	r1, #10
 800ffb2:	fb01 2107 	mla	r1, r1, r7, r2
 800ffb6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ffba:	9208      	str	r2, [sp, #32]
 800ffbc:	e7b5      	b.n	800ff2a <_strtod_l+0x2ba>
 800ffbe:	2a6e      	cmp	r2, #110	; 0x6e
 800ffc0:	e7d9      	b.n	800ff76 <_strtod_l+0x306>
 800ffc2:	498b      	ldr	r1, [pc, #556]	; (80101f0 <_strtod_l+0x580>)
 800ffc4:	a815      	add	r0, sp, #84	; 0x54
 800ffc6:	f001 fb85 	bl	80116d4 <__match>
 800ffca:	2800      	cmp	r0, #0
 800ffcc:	f43f aea8 	beq.w	800fd20 <_strtod_l+0xb0>
 800ffd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffd2:	4988      	ldr	r1, [pc, #544]	; (80101f4 <_strtod_l+0x584>)
 800ffd4:	3b01      	subs	r3, #1
 800ffd6:	a815      	add	r0, sp, #84	; 0x54
 800ffd8:	9315      	str	r3, [sp, #84]	; 0x54
 800ffda:	f001 fb7b 	bl	80116d4 <__match>
 800ffde:	b910      	cbnz	r0, 800ffe6 <_strtod_l+0x376>
 800ffe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	9315      	str	r3, [sp, #84]	; 0x54
 800ffe6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010204 <_strtod_l+0x594>
 800ffea:	f04f 0800 	mov.w	r8, #0
 800ffee:	e67a      	b.n	800fce6 <_strtod_l+0x76>
 800fff0:	4881      	ldr	r0, [pc, #516]	; (80101f8 <_strtod_l+0x588>)
 800fff2:	f001 f8a9 	bl	8011148 <nan>
 800fff6:	ec59 8b10 	vmov	r8, r9, d0
 800fffa:	e674      	b.n	800fce6 <_strtod_l+0x76>
 800fffc:	9b05      	ldr	r3, [sp, #20]
 800fffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010000:	1afb      	subs	r3, r7, r3
 8010002:	f1bb 0f00 	cmp.w	fp, #0
 8010006:	bf08      	it	eq
 8010008:	46b3      	moveq	fp, r6
 801000a:	2e10      	cmp	r6, #16
 801000c:	9308      	str	r3, [sp, #32]
 801000e:	4635      	mov	r5, r6
 8010010:	bfa8      	it	ge
 8010012:	2510      	movge	r5, #16
 8010014:	f7f0 fa9e 	bl	8000554 <__aeabi_ui2d>
 8010018:	2e09      	cmp	r6, #9
 801001a:	4680      	mov	r8, r0
 801001c:	4689      	mov	r9, r1
 801001e:	dd13      	ble.n	8010048 <_strtod_l+0x3d8>
 8010020:	4b76      	ldr	r3, [pc, #472]	; (80101fc <_strtod_l+0x58c>)
 8010022:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010026:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801002a:	f7f0 fb0d 	bl	8000648 <__aeabi_dmul>
 801002e:	4680      	mov	r8, r0
 8010030:	4650      	mov	r0, sl
 8010032:	4689      	mov	r9, r1
 8010034:	f7f0 fa8e 	bl	8000554 <__aeabi_ui2d>
 8010038:	4602      	mov	r2, r0
 801003a:	460b      	mov	r3, r1
 801003c:	4640      	mov	r0, r8
 801003e:	4649      	mov	r1, r9
 8010040:	f7f0 f94c 	bl	80002dc <__adddf3>
 8010044:	4680      	mov	r8, r0
 8010046:	4689      	mov	r9, r1
 8010048:	2e0f      	cmp	r6, #15
 801004a:	dc38      	bgt.n	80100be <_strtod_l+0x44e>
 801004c:	9b08      	ldr	r3, [sp, #32]
 801004e:	2b00      	cmp	r3, #0
 8010050:	f43f ae49 	beq.w	800fce6 <_strtod_l+0x76>
 8010054:	dd24      	ble.n	80100a0 <_strtod_l+0x430>
 8010056:	2b16      	cmp	r3, #22
 8010058:	dc0b      	bgt.n	8010072 <_strtod_l+0x402>
 801005a:	4968      	ldr	r1, [pc, #416]	; (80101fc <_strtod_l+0x58c>)
 801005c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010064:	4642      	mov	r2, r8
 8010066:	464b      	mov	r3, r9
 8010068:	f7f0 faee 	bl	8000648 <__aeabi_dmul>
 801006c:	4680      	mov	r8, r0
 801006e:	4689      	mov	r9, r1
 8010070:	e639      	b.n	800fce6 <_strtod_l+0x76>
 8010072:	9a08      	ldr	r2, [sp, #32]
 8010074:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010078:	4293      	cmp	r3, r2
 801007a:	db20      	blt.n	80100be <_strtod_l+0x44e>
 801007c:	4c5f      	ldr	r4, [pc, #380]	; (80101fc <_strtod_l+0x58c>)
 801007e:	f1c6 060f 	rsb	r6, r6, #15
 8010082:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8010086:	4642      	mov	r2, r8
 8010088:	464b      	mov	r3, r9
 801008a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801008e:	f7f0 fadb 	bl	8000648 <__aeabi_dmul>
 8010092:	9b08      	ldr	r3, [sp, #32]
 8010094:	1b9e      	subs	r6, r3, r6
 8010096:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801009a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801009e:	e7e3      	b.n	8010068 <_strtod_l+0x3f8>
 80100a0:	9b08      	ldr	r3, [sp, #32]
 80100a2:	3316      	adds	r3, #22
 80100a4:	db0b      	blt.n	80100be <_strtod_l+0x44e>
 80100a6:	9b05      	ldr	r3, [sp, #20]
 80100a8:	1bdf      	subs	r7, r3, r7
 80100aa:	4b54      	ldr	r3, [pc, #336]	; (80101fc <_strtod_l+0x58c>)
 80100ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80100b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100b4:	4640      	mov	r0, r8
 80100b6:	4649      	mov	r1, r9
 80100b8:	f7f0 fbf0 	bl	800089c <__aeabi_ddiv>
 80100bc:	e7d6      	b.n	801006c <_strtod_l+0x3fc>
 80100be:	9b08      	ldr	r3, [sp, #32]
 80100c0:	1b75      	subs	r5, r6, r5
 80100c2:	441d      	add	r5, r3
 80100c4:	2d00      	cmp	r5, #0
 80100c6:	dd70      	ble.n	80101aa <_strtod_l+0x53a>
 80100c8:	f015 030f 	ands.w	r3, r5, #15
 80100cc:	d00a      	beq.n	80100e4 <_strtod_l+0x474>
 80100ce:	494b      	ldr	r1, [pc, #300]	; (80101fc <_strtod_l+0x58c>)
 80100d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80100d4:	4642      	mov	r2, r8
 80100d6:	464b      	mov	r3, r9
 80100d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100dc:	f7f0 fab4 	bl	8000648 <__aeabi_dmul>
 80100e0:	4680      	mov	r8, r0
 80100e2:	4689      	mov	r9, r1
 80100e4:	f035 050f 	bics.w	r5, r5, #15
 80100e8:	d04d      	beq.n	8010186 <_strtod_l+0x516>
 80100ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80100ee:	dd22      	ble.n	8010136 <_strtod_l+0x4c6>
 80100f0:	2500      	movs	r5, #0
 80100f2:	46ab      	mov	fp, r5
 80100f4:	9509      	str	r5, [sp, #36]	; 0x24
 80100f6:	9505      	str	r5, [sp, #20]
 80100f8:	2322      	movs	r3, #34	; 0x22
 80100fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010204 <_strtod_l+0x594>
 80100fe:	6023      	str	r3, [r4, #0]
 8010100:	f04f 0800 	mov.w	r8, #0
 8010104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010106:	2b00      	cmp	r3, #0
 8010108:	f43f aded 	beq.w	800fce6 <_strtod_l+0x76>
 801010c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801010e:	4620      	mov	r0, r4
 8010110:	f7ff f924 	bl	800f35c <_Bfree>
 8010114:	9905      	ldr	r1, [sp, #20]
 8010116:	4620      	mov	r0, r4
 8010118:	f7ff f920 	bl	800f35c <_Bfree>
 801011c:	4659      	mov	r1, fp
 801011e:	4620      	mov	r0, r4
 8010120:	f7ff f91c 	bl	800f35c <_Bfree>
 8010124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010126:	4620      	mov	r0, r4
 8010128:	f7ff f918 	bl	800f35c <_Bfree>
 801012c:	4629      	mov	r1, r5
 801012e:	4620      	mov	r0, r4
 8010130:	f7ff f914 	bl	800f35c <_Bfree>
 8010134:	e5d7      	b.n	800fce6 <_strtod_l+0x76>
 8010136:	4b32      	ldr	r3, [pc, #200]	; (8010200 <_strtod_l+0x590>)
 8010138:	9304      	str	r3, [sp, #16]
 801013a:	2300      	movs	r3, #0
 801013c:	112d      	asrs	r5, r5, #4
 801013e:	4640      	mov	r0, r8
 8010140:	4649      	mov	r1, r9
 8010142:	469a      	mov	sl, r3
 8010144:	2d01      	cmp	r5, #1
 8010146:	dc21      	bgt.n	801018c <_strtod_l+0x51c>
 8010148:	b10b      	cbz	r3, 801014e <_strtod_l+0x4de>
 801014a:	4680      	mov	r8, r0
 801014c:	4689      	mov	r9, r1
 801014e:	492c      	ldr	r1, [pc, #176]	; (8010200 <_strtod_l+0x590>)
 8010150:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010154:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010158:	4642      	mov	r2, r8
 801015a:	464b      	mov	r3, r9
 801015c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010160:	f7f0 fa72 	bl	8000648 <__aeabi_dmul>
 8010164:	4b27      	ldr	r3, [pc, #156]	; (8010204 <_strtod_l+0x594>)
 8010166:	460a      	mov	r2, r1
 8010168:	400b      	ands	r3, r1
 801016a:	4927      	ldr	r1, [pc, #156]	; (8010208 <_strtod_l+0x598>)
 801016c:	428b      	cmp	r3, r1
 801016e:	4680      	mov	r8, r0
 8010170:	d8be      	bhi.n	80100f0 <_strtod_l+0x480>
 8010172:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010176:	428b      	cmp	r3, r1
 8010178:	bf86      	itte	hi
 801017a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801020c <_strtod_l+0x59c>
 801017e:	f04f 38ff 	movhi.w	r8, #4294967295
 8010182:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8010186:	2300      	movs	r3, #0
 8010188:	9304      	str	r3, [sp, #16]
 801018a:	e07b      	b.n	8010284 <_strtod_l+0x614>
 801018c:	07ea      	lsls	r2, r5, #31
 801018e:	d505      	bpl.n	801019c <_strtod_l+0x52c>
 8010190:	9b04      	ldr	r3, [sp, #16]
 8010192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010196:	f7f0 fa57 	bl	8000648 <__aeabi_dmul>
 801019a:	2301      	movs	r3, #1
 801019c:	9a04      	ldr	r2, [sp, #16]
 801019e:	3208      	adds	r2, #8
 80101a0:	f10a 0a01 	add.w	sl, sl, #1
 80101a4:	106d      	asrs	r5, r5, #1
 80101a6:	9204      	str	r2, [sp, #16]
 80101a8:	e7cc      	b.n	8010144 <_strtod_l+0x4d4>
 80101aa:	d0ec      	beq.n	8010186 <_strtod_l+0x516>
 80101ac:	426d      	negs	r5, r5
 80101ae:	f015 020f 	ands.w	r2, r5, #15
 80101b2:	d00a      	beq.n	80101ca <_strtod_l+0x55a>
 80101b4:	4b11      	ldr	r3, [pc, #68]	; (80101fc <_strtod_l+0x58c>)
 80101b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101ba:	4640      	mov	r0, r8
 80101bc:	4649      	mov	r1, r9
 80101be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c2:	f7f0 fb6b 	bl	800089c <__aeabi_ddiv>
 80101c6:	4680      	mov	r8, r0
 80101c8:	4689      	mov	r9, r1
 80101ca:	112d      	asrs	r5, r5, #4
 80101cc:	d0db      	beq.n	8010186 <_strtod_l+0x516>
 80101ce:	2d1f      	cmp	r5, #31
 80101d0:	dd1e      	ble.n	8010210 <_strtod_l+0x5a0>
 80101d2:	2500      	movs	r5, #0
 80101d4:	46ab      	mov	fp, r5
 80101d6:	9509      	str	r5, [sp, #36]	; 0x24
 80101d8:	9505      	str	r5, [sp, #20]
 80101da:	2322      	movs	r3, #34	; 0x22
 80101dc:	f04f 0800 	mov.w	r8, #0
 80101e0:	f04f 0900 	mov.w	r9, #0
 80101e4:	6023      	str	r3, [r4, #0]
 80101e6:	e78d      	b.n	8010104 <_strtod_l+0x494>
 80101e8:	08012b39 	.word	0x08012b39
 80101ec:	08012d64 	.word	0x08012d64
 80101f0:	08012b31 	.word	0x08012b31
 80101f4:	08012b68 	.word	0x08012b68
 80101f8:	08012b2b 	.word	0x08012b2b
 80101fc:	08012c78 	.word	0x08012c78
 8010200:	08012c50 	.word	0x08012c50
 8010204:	7ff00000 	.word	0x7ff00000
 8010208:	7ca00000 	.word	0x7ca00000
 801020c:	7fefffff 	.word	0x7fefffff
 8010210:	f015 0310 	ands.w	r3, r5, #16
 8010214:	bf18      	it	ne
 8010216:	236a      	movne	r3, #106	; 0x6a
 8010218:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80105bc <_strtod_l+0x94c>
 801021c:	9304      	str	r3, [sp, #16]
 801021e:	4640      	mov	r0, r8
 8010220:	4649      	mov	r1, r9
 8010222:	2300      	movs	r3, #0
 8010224:	07ea      	lsls	r2, r5, #31
 8010226:	d504      	bpl.n	8010232 <_strtod_l+0x5c2>
 8010228:	e9da 2300 	ldrd	r2, r3, [sl]
 801022c:	f7f0 fa0c 	bl	8000648 <__aeabi_dmul>
 8010230:	2301      	movs	r3, #1
 8010232:	106d      	asrs	r5, r5, #1
 8010234:	f10a 0a08 	add.w	sl, sl, #8
 8010238:	d1f4      	bne.n	8010224 <_strtod_l+0x5b4>
 801023a:	b10b      	cbz	r3, 8010240 <_strtod_l+0x5d0>
 801023c:	4680      	mov	r8, r0
 801023e:	4689      	mov	r9, r1
 8010240:	9b04      	ldr	r3, [sp, #16]
 8010242:	b1bb      	cbz	r3, 8010274 <_strtod_l+0x604>
 8010244:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010248:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801024c:	2b00      	cmp	r3, #0
 801024e:	4649      	mov	r1, r9
 8010250:	dd10      	ble.n	8010274 <_strtod_l+0x604>
 8010252:	2b1f      	cmp	r3, #31
 8010254:	f340 811e 	ble.w	8010494 <_strtod_l+0x824>
 8010258:	2b34      	cmp	r3, #52	; 0x34
 801025a:	bfde      	ittt	le
 801025c:	f04f 33ff 	movle.w	r3, #4294967295
 8010260:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010264:	4093      	lslle	r3, r2
 8010266:	f04f 0800 	mov.w	r8, #0
 801026a:	bfcc      	ite	gt
 801026c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010270:	ea03 0901 	andle.w	r9, r3, r1
 8010274:	2200      	movs	r2, #0
 8010276:	2300      	movs	r3, #0
 8010278:	4640      	mov	r0, r8
 801027a:	4649      	mov	r1, r9
 801027c:	f7f0 fc4c 	bl	8000b18 <__aeabi_dcmpeq>
 8010280:	2800      	cmp	r0, #0
 8010282:	d1a6      	bne.n	80101d2 <_strtod_l+0x562>
 8010284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801028a:	4633      	mov	r3, r6
 801028c:	465a      	mov	r2, fp
 801028e:	4620      	mov	r0, r4
 8010290:	f7ff f8cc 	bl	800f42c <__s2b>
 8010294:	9009      	str	r0, [sp, #36]	; 0x24
 8010296:	2800      	cmp	r0, #0
 8010298:	f43f af2a 	beq.w	80100f0 <_strtod_l+0x480>
 801029c:	9a08      	ldr	r2, [sp, #32]
 801029e:	9b05      	ldr	r3, [sp, #20]
 80102a0:	2a00      	cmp	r2, #0
 80102a2:	eba3 0307 	sub.w	r3, r3, r7
 80102a6:	bfa8      	it	ge
 80102a8:	2300      	movge	r3, #0
 80102aa:	930c      	str	r3, [sp, #48]	; 0x30
 80102ac:	2500      	movs	r5, #0
 80102ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80102b2:	9312      	str	r3, [sp, #72]	; 0x48
 80102b4:	46ab      	mov	fp, r5
 80102b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b8:	4620      	mov	r0, r4
 80102ba:	6859      	ldr	r1, [r3, #4]
 80102bc:	f7ff f80e 	bl	800f2dc <_Balloc>
 80102c0:	9005      	str	r0, [sp, #20]
 80102c2:	2800      	cmp	r0, #0
 80102c4:	f43f af18 	beq.w	80100f8 <_strtod_l+0x488>
 80102c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102ca:	691a      	ldr	r2, [r3, #16]
 80102cc:	3202      	adds	r2, #2
 80102ce:	f103 010c 	add.w	r1, r3, #12
 80102d2:	0092      	lsls	r2, r2, #2
 80102d4:	300c      	adds	r0, #12
 80102d6:	f7fe f926 	bl	800e526 <memcpy>
 80102da:	ec49 8b10 	vmov	d0, r8, r9
 80102de:	aa18      	add	r2, sp, #96	; 0x60
 80102e0:	a917      	add	r1, sp, #92	; 0x5c
 80102e2:	4620      	mov	r0, r4
 80102e4:	f7ff fbd6 	bl	800fa94 <__d2b>
 80102e8:	ec49 8b18 	vmov	d8, r8, r9
 80102ec:	9016      	str	r0, [sp, #88]	; 0x58
 80102ee:	2800      	cmp	r0, #0
 80102f0:	f43f af02 	beq.w	80100f8 <_strtod_l+0x488>
 80102f4:	2101      	movs	r1, #1
 80102f6:	4620      	mov	r0, r4
 80102f8:	f7ff f930 	bl	800f55c <__i2b>
 80102fc:	4683      	mov	fp, r0
 80102fe:	2800      	cmp	r0, #0
 8010300:	f43f aefa 	beq.w	80100f8 <_strtod_l+0x488>
 8010304:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010306:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010308:	2e00      	cmp	r6, #0
 801030a:	bfab      	itete	ge
 801030c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801030e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010310:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010312:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010316:	bfac      	ite	ge
 8010318:	eb06 0a03 	addge.w	sl, r6, r3
 801031c:	1b9f      	sublt	r7, r3, r6
 801031e:	9b04      	ldr	r3, [sp, #16]
 8010320:	1af6      	subs	r6, r6, r3
 8010322:	4416      	add	r6, r2
 8010324:	4ba0      	ldr	r3, [pc, #640]	; (80105a8 <_strtod_l+0x938>)
 8010326:	3e01      	subs	r6, #1
 8010328:	429e      	cmp	r6, r3
 801032a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801032e:	f280 80c4 	bge.w	80104ba <_strtod_l+0x84a>
 8010332:	1b9b      	subs	r3, r3, r6
 8010334:	2b1f      	cmp	r3, #31
 8010336:	eba2 0203 	sub.w	r2, r2, r3
 801033a:	f04f 0101 	mov.w	r1, #1
 801033e:	f300 80b0 	bgt.w	80104a2 <_strtod_l+0x832>
 8010342:	fa01 f303 	lsl.w	r3, r1, r3
 8010346:	930e      	str	r3, [sp, #56]	; 0x38
 8010348:	2300      	movs	r3, #0
 801034a:	930d      	str	r3, [sp, #52]	; 0x34
 801034c:	eb0a 0602 	add.w	r6, sl, r2
 8010350:	9b04      	ldr	r3, [sp, #16]
 8010352:	45b2      	cmp	sl, r6
 8010354:	4417      	add	r7, r2
 8010356:	441f      	add	r7, r3
 8010358:	4653      	mov	r3, sl
 801035a:	bfa8      	it	ge
 801035c:	4633      	movge	r3, r6
 801035e:	42bb      	cmp	r3, r7
 8010360:	bfa8      	it	ge
 8010362:	463b      	movge	r3, r7
 8010364:	2b00      	cmp	r3, #0
 8010366:	bfc2      	ittt	gt
 8010368:	1af6      	subgt	r6, r6, r3
 801036a:	1aff      	subgt	r7, r7, r3
 801036c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010372:	2b00      	cmp	r3, #0
 8010374:	dd17      	ble.n	80103a6 <_strtod_l+0x736>
 8010376:	4659      	mov	r1, fp
 8010378:	461a      	mov	r2, r3
 801037a:	4620      	mov	r0, r4
 801037c:	f7ff f9ae 	bl	800f6dc <__pow5mult>
 8010380:	4683      	mov	fp, r0
 8010382:	2800      	cmp	r0, #0
 8010384:	f43f aeb8 	beq.w	80100f8 <_strtod_l+0x488>
 8010388:	4601      	mov	r1, r0
 801038a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801038c:	4620      	mov	r0, r4
 801038e:	f7ff f8fb 	bl	800f588 <__multiply>
 8010392:	900b      	str	r0, [sp, #44]	; 0x2c
 8010394:	2800      	cmp	r0, #0
 8010396:	f43f aeaf 	beq.w	80100f8 <_strtod_l+0x488>
 801039a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801039c:	4620      	mov	r0, r4
 801039e:	f7fe ffdd 	bl	800f35c <_Bfree>
 80103a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103a4:	9316      	str	r3, [sp, #88]	; 0x58
 80103a6:	2e00      	cmp	r6, #0
 80103a8:	f300 808c 	bgt.w	80104c4 <_strtod_l+0x854>
 80103ac:	9b08      	ldr	r3, [sp, #32]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	dd08      	ble.n	80103c4 <_strtod_l+0x754>
 80103b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80103b4:	9905      	ldr	r1, [sp, #20]
 80103b6:	4620      	mov	r0, r4
 80103b8:	f7ff f990 	bl	800f6dc <__pow5mult>
 80103bc:	9005      	str	r0, [sp, #20]
 80103be:	2800      	cmp	r0, #0
 80103c0:	f43f ae9a 	beq.w	80100f8 <_strtod_l+0x488>
 80103c4:	2f00      	cmp	r7, #0
 80103c6:	dd08      	ble.n	80103da <_strtod_l+0x76a>
 80103c8:	9905      	ldr	r1, [sp, #20]
 80103ca:	463a      	mov	r2, r7
 80103cc:	4620      	mov	r0, r4
 80103ce:	f7ff f9df 	bl	800f790 <__lshift>
 80103d2:	9005      	str	r0, [sp, #20]
 80103d4:	2800      	cmp	r0, #0
 80103d6:	f43f ae8f 	beq.w	80100f8 <_strtod_l+0x488>
 80103da:	f1ba 0f00 	cmp.w	sl, #0
 80103de:	dd08      	ble.n	80103f2 <_strtod_l+0x782>
 80103e0:	4659      	mov	r1, fp
 80103e2:	4652      	mov	r2, sl
 80103e4:	4620      	mov	r0, r4
 80103e6:	f7ff f9d3 	bl	800f790 <__lshift>
 80103ea:	4683      	mov	fp, r0
 80103ec:	2800      	cmp	r0, #0
 80103ee:	f43f ae83 	beq.w	80100f8 <_strtod_l+0x488>
 80103f2:	9a05      	ldr	r2, [sp, #20]
 80103f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80103f6:	4620      	mov	r0, r4
 80103f8:	f7ff fa52 	bl	800f8a0 <__mdiff>
 80103fc:	4605      	mov	r5, r0
 80103fe:	2800      	cmp	r0, #0
 8010400:	f43f ae7a 	beq.w	80100f8 <_strtod_l+0x488>
 8010404:	68c3      	ldr	r3, [r0, #12]
 8010406:	930b      	str	r3, [sp, #44]	; 0x2c
 8010408:	2300      	movs	r3, #0
 801040a:	60c3      	str	r3, [r0, #12]
 801040c:	4659      	mov	r1, fp
 801040e:	f7ff fa2b 	bl	800f868 <__mcmp>
 8010412:	2800      	cmp	r0, #0
 8010414:	da60      	bge.n	80104d8 <_strtod_l+0x868>
 8010416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010418:	ea53 0308 	orrs.w	r3, r3, r8
 801041c:	f040 8084 	bne.w	8010528 <_strtod_l+0x8b8>
 8010420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010424:	2b00      	cmp	r3, #0
 8010426:	d17f      	bne.n	8010528 <_strtod_l+0x8b8>
 8010428:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801042c:	0d1b      	lsrs	r3, r3, #20
 801042e:	051b      	lsls	r3, r3, #20
 8010430:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010434:	d978      	bls.n	8010528 <_strtod_l+0x8b8>
 8010436:	696b      	ldr	r3, [r5, #20]
 8010438:	b913      	cbnz	r3, 8010440 <_strtod_l+0x7d0>
 801043a:	692b      	ldr	r3, [r5, #16]
 801043c:	2b01      	cmp	r3, #1
 801043e:	dd73      	ble.n	8010528 <_strtod_l+0x8b8>
 8010440:	4629      	mov	r1, r5
 8010442:	2201      	movs	r2, #1
 8010444:	4620      	mov	r0, r4
 8010446:	f7ff f9a3 	bl	800f790 <__lshift>
 801044a:	4659      	mov	r1, fp
 801044c:	4605      	mov	r5, r0
 801044e:	f7ff fa0b 	bl	800f868 <__mcmp>
 8010452:	2800      	cmp	r0, #0
 8010454:	dd68      	ble.n	8010528 <_strtod_l+0x8b8>
 8010456:	9904      	ldr	r1, [sp, #16]
 8010458:	4a54      	ldr	r2, [pc, #336]	; (80105ac <_strtod_l+0x93c>)
 801045a:	464b      	mov	r3, r9
 801045c:	2900      	cmp	r1, #0
 801045e:	f000 8084 	beq.w	801056a <_strtod_l+0x8fa>
 8010462:	ea02 0109 	and.w	r1, r2, r9
 8010466:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801046a:	dc7e      	bgt.n	801056a <_strtod_l+0x8fa>
 801046c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010470:	f77f aeb3 	ble.w	80101da <_strtod_l+0x56a>
 8010474:	4b4e      	ldr	r3, [pc, #312]	; (80105b0 <_strtod_l+0x940>)
 8010476:	4640      	mov	r0, r8
 8010478:	4649      	mov	r1, r9
 801047a:	2200      	movs	r2, #0
 801047c:	f7f0 f8e4 	bl	8000648 <__aeabi_dmul>
 8010480:	4b4a      	ldr	r3, [pc, #296]	; (80105ac <_strtod_l+0x93c>)
 8010482:	400b      	ands	r3, r1
 8010484:	4680      	mov	r8, r0
 8010486:	4689      	mov	r9, r1
 8010488:	2b00      	cmp	r3, #0
 801048a:	f47f ae3f 	bne.w	801010c <_strtod_l+0x49c>
 801048e:	2322      	movs	r3, #34	; 0x22
 8010490:	6023      	str	r3, [r4, #0]
 8010492:	e63b      	b.n	801010c <_strtod_l+0x49c>
 8010494:	f04f 32ff 	mov.w	r2, #4294967295
 8010498:	fa02 f303 	lsl.w	r3, r2, r3
 801049c:	ea03 0808 	and.w	r8, r3, r8
 80104a0:	e6e8      	b.n	8010274 <_strtod_l+0x604>
 80104a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80104a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80104aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80104ae:	36e2      	adds	r6, #226	; 0xe2
 80104b0:	fa01 f306 	lsl.w	r3, r1, r6
 80104b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80104b8:	e748      	b.n	801034c <_strtod_l+0x6dc>
 80104ba:	2100      	movs	r1, #0
 80104bc:	2301      	movs	r3, #1
 80104be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80104c2:	e743      	b.n	801034c <_strtod_l+0x6dc>
 80104c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80104c6:	4632      	mov	r2, r6
 80104c8:	4620      	mov	r0, r4
 80104ca:	f7ff f961 	bl	800f790 <__lshift>
 80104ce:	9016      	str	r0, [sp, #88]	; 0x58
 80104d0:	2800      	cmp	r0, #0
 80104d2:	f47f af6b 	bne.w	80103ac <_strtod_l+0x73c>
 80104d6:	e60f      	b.n	80100f8 <_strtod_l+0x488>
 80104d8:	46ca      	mov	sl, r9
 80104da:	d171      	bne.n	80105c0 <_strtod_l+0x950>
 80104dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80104de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80104e2:	b352      	cbz	r2, 801053a <_strtod_l+0x8ca>
 80104e4:	4a33      	ldr	r2, [pc, #204]	; (80105b4 <_strtod_l+0x944>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d12a      	bne.n	8010540 <_strtod_l+0x8d0>
 80104ea:	9b04      	ldr	r3, [sp, #16]
 80104ec:	4641      	mov	r1, r8
 80104ee:	b1fb      	cbz	r3, 8010530 <_strtod_l+0x8c0>
 80104f0:	4b2e      	ldr	r3, [pc, #184]	; (80105ac <_strtod_l+0x93c>)
 80104f2:	ea09 0303 	and.w	r3, r9, r3
 80104f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80104fa:	f04f 32ff 	mov.w	r2, #4294967295
 80104fe:	d81a      	bhi.n	8010536 <_strtod_l+0x8c6>
 8010500:	0d1b      	lsrs	r3, r3, #20
 8010502:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010506:	fa02 f303 	lsl.w	r3, r2, r3
 801050a:	4299      	cmp	r1, r3
 801050c:	d118      	bne.n	8010540 <_strtod_l+0x8d0>
 801050e:	4b2a      	ldr	r3, [pc, #168]	; (80105b8 <_strtod_l+0x948>)
 8010510:	459a      	cmp	sl, r3
 8010512:	d102      	bne.n	801051a <_strtod_l+0x8aa>
 8010514:	3101      	adds	r1, #1
 8010516:	f43f adef 	beq.w	80100f8 <_strtod_l+0x488>
 801051a:	4b24      	ldr	r3, [pc, #144]	; (80105ac <_strtod_l+0x93c>)
 801051c:	ea0a 0303 	and.w	r3, sl, r3
 8010520:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010524:	f04f 0800 	mov.w	r8, #0
 8010528:	9b04      	ldr	r3, [sp, #16]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d1a2      	bne.n	8010474 <_strtod_l+0x804>
 801052e:	e5ed      	b.n	801010c <_strtod_l+0x49c>
 8010530:	f04f 33ff 	mov.w	r3, #4294967295
 8010534:	e7e9      	b.n	801050a <_strtod_l+0x89a>
 8010536:	4613      	mov	r3, r2
 8010538:	e7e7      	b.n	801050a <_strtod_l+0x89a>
 801053a:	ea53 0308 	orrs.w	r3, r3, r8
 801053e:	d08a      	beq.n	8010456 <_strtod_l+0x7e6>
 8010540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010542:	b1e3      	cbz	r3, 801057e <_strtod_l+0x90e>
 8010544:	ea13 0f0a 	tst.w	r3, sl
 8010548:	d0ee      	beq.n	8010528 <_strtod_l+0x8b8>
 801054a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801054c:	9a04      	ldr	r2, [sp, #16]
 801054e:	4640      	mov	r0, r8
 8010550:	4649      	mov	r1, r9
 8010552:	b1c3      	cbz	r3, 8010586 <_strtod_l+0x916>
 8010554:	f7ff fb6f 	bl	800fc36 <sulp>
 8010558:	4602      	mov	r2, r0
 801055a:	460b      	mov	r3, r1
 801055c:	ec51 0b18 	vmov	r0, r1, d8
 8010560:	f7ef febc 	bl	80002dc <__adddf3>
 8010564:	4680      	mov	r8, r0
 8010566:	4689      	mov	r9, r1
 8010568:	e7de      	b.n	8010528 <_strtod_l+0x8b8>
 801056a:	4013      	ands	r3, r2
 801056c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010570:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8010574:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010578:	f04f 38ff 	mov.w	r8, #4294967295
 801057c:	e7d4      	b.n	8010528 <_strtod_l+0x8b8>
 801057e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010580:	ea13 0f08 	tst.w	r3, r8
 8010584:	e7e0      	b.n	8010548 <_strtod_l+0x8d8>
 8010586:	f7ff fb56 	bl	800fc36 <sulp>
 801058a:	4602      	mov	r2, r0
 801058c:	460b      	mov	r3, r1
 801058e:	ec51 0b18 	vmov	r0, r1, d8
 8010592:	f7ef fea1 	bl	80002d8 <__aeabi_dsub>
 8010596:	2200      	movs	r2, #0
 8010598:	2300      	movs	r3, #0
 801059a:	4680      	mov	r8, r0
 801059c:	4689      	mov	r9, r1
 801059e:	f7f0 fabb 	bl	8000b18 <__aeabi_dcmpeq>
 80105a2:	2800      	cmp	r0, #0
 80105a4:	d0c0      	beq.n	8010528 <_strtod_l+0x8b8>
 80105a6:	e618      	b.n	80101da <_strtod_l+0x56a>
 80105a8:	fffffc02 	.word	0xfffffc02
 80105ac:	7ff00000 	.word	0x7ff00000
 80105b0:	39500000 	.word	0x39500000
 80105b4:	000fffff 	.word	0x000fffff
 80105b8:	7fefffff 	.word	0x7fefffff
 80105bc:	08012d78 	.word	0x08012d78
 80105c0:	4659      	mov	r1, fp
 80105c2:	4628      	mov	r0, r5
 80105c4:	f7ff fac0 	bl	800fb48 <__ratio>
 80105c8:	ec57 6b10 	vmov	r6, r7, d0
 80105cc:	ee10 0a10 	vmov	r0, s0
 80105d0:	2200      	movs	r2, #0
 80105d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80105d6:	4639      	mov	r1, r7
 80105d8:	f7f0 fab2 	bl	8000b40 <__aeabi_dcmple>
 80105dc:	2800      	cmp	r0, #0
 80105de:	d071      	beq.n	80106c4 <_strtod_l+0xa54>
 80105e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d17c      	bne.n	80106e0 <_strtod_l+0xa70>
 80105e6:	f1b8 0f00 	cmp.w	r8, #0
 80105ea:	d15a      	bne.n	80106a2 <_strtod_l+0xa32>
 80105ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d15d      	bne.n	80106b0 <_strtod_l+0xa40>
 80105f4:	4b90      	ldr	r3, [pc, #576]	; (8010838 <_strtod_l+0xbc8>)
 80105f6:	2200      	movs	r2, #0
 80105f8:	4630      	mov	r0, r6
 80105fa:	4639      	mov	r1, r7
 80105fc:	f7f0 fa96 	bl	8000b2c <__aeabi_dcmplt>
 8010600:	2800      	cmp	r0, #0
 8010602:	d15c      	bne.n	80106be <_strtod_l+0xa4e>
 8010604:	4630      	mov	r0, r6
 8010606:	4639      	mov	r1, r7
 8010608:	4b8c      	ldr	r3, [pc, #560]	; (801083c <_strtod_l+0xbcc>)
 801060a:	2200      	movs	r2, #0
 801060c:	f7f0 f81c 	bl	8000648 <__aeabi_dmul>
 8010610:	4606      	mov	r6, r0
 8010612:	460f      	mov	r7, r1
 8010614:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010618:	9606      	str	r6, [sp, #24]
 801061a:	9307      	str	r3, [sp, #28]
 801061c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010620:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010624:	4b86      	ldr	r3, [pc, #536]	; (8010840 <_strtod_l+0xbd0>)
 8010626:	ea0a 0303 	and.w	r3, sl, r3
 801062a:	930d      	str	r3, [sp, #52]	; 0x34
 801062c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801062e:	4b85      	ldr	r3, [pc, #532]	; (8010844 <_strtod_l+0xbd4>)
 8010630:	429a      	cmp	r2, r3
 8010632:	f040 8090 	bne.w	8010756 <_strtod_l+0xae6>
 8010636:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801063a:	ec49 8b10 	vmov	d0, r8, r9
 801063e:	f7ff f9b9 	bl	800f9b4 <__ulp>
 8010642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010646:	ec51 0b10 	vmov	r0, r1, d0
 801064a:	f7ef fffd 	bl	8000648 <__aeabi_dmul>
 801064e:	4642      	mov	r2, r8
 8010650:	464b      	mov	r3, r9
 8010652:	f7ef fe43 	bl	80002dc <__adddf3>
 8010656:	460b      	mov	r3, r1
 8010658:	4979      	ldr	r1, [pc, #484]	; (8010840 <_strtod_l+0xbd0>)
 801065a:	4a7b      	ldr	r2, [pc, #492]	; (8010848 <_strtod_l+0xbd8>)
 801065c:	4019      	ands	r1, r3
 801065e:	4291      	cmp	r1, r2
 8010660:	4680      	mov	r8, r0
 8010662:	d944      	bls.n	80106ee <_strtod_l+0xa7e>
 8010664:	ee18 2a90 	vmov	r2, s17
 8010668:	4b78      	ldr	r3, [pc, #480]	; (801084c <_strtod_l+0xbdc>)
 801066a:	429a      	cmp	r2, r3
 801066c:	d104      	bne.n	8010678 <_strtod_l+0xa08>
 801066e:	ee18 3a10 	vmov	r3, s16
 8010672:	3301      	adds	r3, #1
 8010674:	f43f ad40 	beq.w	80100f8 <_strtod_l+0x488>
 8010678:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801084c <_strtod_l+0xbdc>
 801067c:	f04f 38ff 	mov.w	r8, #4294967295
 8010680:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010682:	4620      	mov	r0, r4
 8010684:	f7fe fe6a 	bl	800f35c <_Bfree>
 8010688:	9905      	ldr	r1, [sp, #20]
 801068a:	4620      	mov	r0, r4
 801068c:	f7fe fe66 	bl	800f35c <_Bfree>
 8010690:	4659      	mov	r1, fp
 8010692:	4620      	mov	r0, r4
 8010694:	f7fe fe62 	bl	800f35c <_Bfree>
 8010698:	4629      	mov	r1, r5
 801069a:	4620      	mov	r0, r4
 801069c:	f7fe fe5e 	bl	800f35c <_Bfree>
 80106a0:	e609      	b.n	80102b6 <_strtod_l+0x646>
 80106a2:	f1b8 0f01 	cmp.w	r8, #1
 80106a6:	d103      	bne.n	80106b0 <_strtod_l+0xa40>
 80106a8:	f1b9 0f00 	cmp.w	r9, #0
 80106ac:	f43f ad95 	beq.w	80101da <_strtod_l+0x56a>
 80106b0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010808 <_strtod_l+0xb98>
 80106b4:	4f60      	ldr	r7, [pc, #384]	; (8010838 <_strtod_l+0xbc8>)
 80106b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80106ba:	2600      	movs	r6, #0
 80106bc:	e7ae      	b.n	801061c <_strtod_l+0x9ac>
 80106be:	4f5f      	ldr	r7, [pc, #380]	; (801083c <_strtod_l+0xbcc>)
 80106c0:	2600      	movs	r6, #0
 80106c2:	e7a7      	b.n	8010614 <_strtod_l+0x9a4>
 80106c4:	4b5d      	ldr	r3, [pc, #372]	; (801083c <_strtod_l+0xbcc>)
 80106c6:	4630      	mov	r0, r6
 80106c8:	4639      	mov	r1, r7
 80106ca:	2200      	movs	r2, #0
 80106cc:	f7ef ffbc 	bl	8000648 <__aeabi_dmul>
 80106d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106d2:	4606      	mov	r6, r0
 80106d4:	460f      	mov	r7, r1
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d09c      	beq.n	8010614 <_strtod_l+0x9a4>
 80106da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80106de:	e79d      	b.n	801061c <_strtod_l+0x9ac>
 80106e0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010810 <_strtod_l+0xba0>
 80106e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80106e8:	ec57 6b17 	vmov	r6, r7, d7
 80106ec:	e796      	b.n	801061c <_strtod_l+0x9ac>
 80106ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80106f2:	9b04      	ldr	r3, [sp, #16]
 80106f4:	46ca      	mov	sl, r9
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d1c2      	bne.n	8010680 <_strtod_l+0xa10>
 80106fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80106fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010700:	0d1b      	lsrs	r3, r3, #20
 8010702:	051b      	lsls	r3, r3, #20
 8010704:	429a      	cmp	r2, r3
 8010706:	d1bb      	bne.n	8010680 <_strtod_l+0xa10>
 8010708:	4630      	mov	r0, r6
 801070a:	4639      	mov	r1, r7
 801070c:	f7f0 fafc 	bl	8000d08 <__aeabi_d2lz>
 8010710:	f7ef ff6c 	bl	80005ec <__aeabi_l2d>
 8010714:	4602      	mov	r2, r0
 8010716:	460b      	mov	r3, r1
 8010718:	4630      	mov	r0, r6
 801071a:	4639      	mov	r1, r7
 801071c:	f7ef fddc 	bl	80002d8 <__aeabi_dsub>
 8010720:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010722:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010726:	ea43 0308 	orr.w	r3, r3, r8
 801072a:	4313      	orrs	r3, r2
 801072c:	4606      	mov	r6, r0
 801072e:	460f      	mov	r7, r1
 8010730:	d054      	beq.n	80107dc <_strtod_l+0xb6c>
 8010732:	a339      	add	r3, pc, #228	; (adr r3, 8010818 <_strtod_l+0xba8>)
 8010734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010738:	f7f0 f9f8 	bl	8000b2c <__aeabi_dcmplt>
 801073c:	2800      	cmp	r0, #0
 801073e:	f47f ace5 	bne.w	801010c <_strtod_l+0x49c>
 8010742:	a337      	add	r3, pc, #220	; (adr r3, 8010820 <_strtod_l+0xbb0>)
 8010744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010748:	4630      	mov	r0, r6
 801074a:	4639      	mov	r1, r7
 801074c:	f7f0 fa0c 	bl	8000b68 <__aeabi_dcmpgt>
 8010750:	2800      	cmp	r0, #0
 8010752:	d095      	beq.n	8010680 <_strtod_l+0xa10>
 8010754:	e4da      	b.n	801010c <_strtod_l+0x49c>
 8010756:	9b04      	ldr	r3, [sp, #16]
 8010758:	b333      	cbz	r3, 80107a8 <_strtod_l+0xb38>
 801075a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801075c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010760:	d822      	bhi.n	80107a8 <_strtod_l+0xb38>
 8010762:	a331      	add	r3, pc, #196	; (adr r3, 8010828 <_strtod_l+0xbb8>)
 8010764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010768:	4630      	mov	r0, r6
 801076a:	4639      	mov	r1, r7
 801076c:	f7f0 f9e8 	bl	8000b40 <__aeabi_dcmple>
 8010770:	b1a0      	cbz	r0, 801079c <_strtod_l+0xb2c>
 8010772:	4639      	mov	r1, r7
 8010774:	4630      	mov	r0, r6
 8010776:	f7f0 fa3f 	bl	8000bf8 <__aeabi_d2uiz>
 801077a:	2801      	cmp	r0, #1
 801077c:	bf38      	it	cc
 801077e:	2001      	movcc	r0, #1
 8010780:	f7ef fee8 	bl	8000554 <__aeabi_ui2d>
 8010784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010786:	4606      	mov	r6, r0
 8010788:	460f      	mov	r7, r1
 801078a:	bb23      	cbnz	r3, 80107d6 <_strtod_l+0xb66>
 801078c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010790:	9010      	str	r0, [sp, #64]	; 0x40
 8010792:	9311      	str	r3, [sp, #68]	; 0x44
 8010794:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010798:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801079c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801079e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80107a4:	1a9b      	subs	r3, r3, r2
 80107a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80107a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80107ac:	eeb0 0a48 	vmov.f32	s0, s16
 80107b0:	eef0 0a68 	vmov.f32	s1, s17
 80107b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80107b8:	f7ff f8fc 	bl	800f9b4 <__ulp>
 80107bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80107c0:	ec53 2b10 	vmov	r2, r3, d0
 80107c4:	f7ef ff40 	bl	8000648 <__aeabi_dmul>
 80107c8:	ec53 2b18 	vmov	r2, r3, d8
 80107cc:	f7ef fd86 	bl	80002dc <__adddf3>
 80107d0:	4680      	mov	r8, r0
 80107d2:	4689      	mov	r9, r1
 80107d4:	e78d      	b.n	80106f2 <_strtod_l+0xa82>
 80107d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80107da:	e7db      	b.n	8010794 <_strtod_l+0xb24>
 80107dc:	a314      	add	r3, pc, #80	; (adr r3, 8010830 <_strtod_l+0xbc0>)
 80107de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e2:	f7f0 f9a3 	bl	8000b2c <__aeabi_dcmplt>
 80107e6:	e7b3      	b.n	8010750 <_strtod_l+0xae0>
 80107e8:	2300      	movs	r3, #0
 80107ea:	930a      	str	r3, [sp, #40]	; 0x28
 80107ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80107ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107f0:	6013      	str	r3, [r2, #0]
 80107f2:	f7ff ba7c 	b.w	800fcee <_strtod_l+0x7e>
 80107f6:	2a65      	cmp	r2, #101	; 0x65
 80107f8:	f43f ab75 	beq.w	800fee6 <_strtod_l+0x276>
 80107fc:	2a45      	cmp	r2, #69	; 0x45
 80107fe:	f43f ab72 	beq.w	800fee6 <_strtod_l+0x276>
 8010802:	2301      	movs	r3, #1
 8010804:	f7ff bbaa 	b.w	800ff5c <_strtod_l+0x2ec>
 8010808:	00000000 	.word	0x00000000
 801080c:	bff00000 	.word	0xbff00000
 8010810:	00000000 	.word	0x00000000
 8010814:	3ff00000 	.word	0x3ff00000
 8010818:	94a03595 	.word	0x94a03595
 801081c:	3fdfffff 	.word	0x3fdfffff
 8010820:	35afe535 	.word	0x35afe535
 8010824:	3fe00000 	.word	0x3fe00000
 8010828:	ffc00000 	.word	0xffc00000
 801082c:	41dfffff 	.word	0x41dfffff
 8010830:	94a03595 	.word	0x94a03595
 8010834:	3fcfffff 	.word	0x3fcfffff
 8010838:	3ff00000 	.word	0x3ff00000
 801083c:	3fe00000 	.word	0x3fe00000
 8010840:	7ff00000 	.word	0x7ff00000
 8010844:	7fe00000 	.word	0x7fe00000
 8010848:	7c9fffff 	.word	0x7c9fffff
 801084c:	7fefffff 	.word	0x7fefffff

08010850 <_strtod_r>:
 8010850:	4b01      	ldr	r3, [pc, #4]	; (8010858 <_strtod_r+0x8>)
 8010852:	f7ff ba0d 	b.w	800fc70 <_strtod_l>
 8010856:	bf00      	nop
 8010858:	20000068 	.word	0x20000068

0801085c <_strtol_l.constprop.0>:
 801085c:	2b01      	cmp	r3, #1
 801085e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010862:	d001      	beq.n	8010868 <_strtol_l.constprop.0+0xc>
 8010864:	2b24      	cmp	r3, #36	; 0x24
 8010866:	d906      	bls.n	8010876 <_strtol_l.constprop.0+0x1a>
 8010868:	f7fd fe30 	bl	800e4cc <__errno>
 801086c:	2316      	movs	r3, #22
 801086e:	6003      	str	r3, [r0, #0]
 8010870:	2000      	movs	r0, #0
 8010872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010876:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801095c <_strtol_l.constprop.0+0x100>
 801087a:	460d      	mov	r5, r1
 801087c:	462e      	mov	r6, r5
 801087e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010882:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010886:	f017 0708 	ands.w	r7, r7, #8
 801088a:	d1f7      	bne.n	801087c <_strtol_l.constprop.0+0x20>
 801088c:	2c2d      	cmp	r4, #45	; 0x2d
 801088e:	d132      	bne.n	80108f6 <_strtol_l.constprop.0+0x9a>
 8010890:	782c      	ldrb	r4, [r5, #0]
 8010892:	2701      	movs	r7, #1
 8010894:	1cb5      	adds	r5, r6, #2
 8010896:	2b00      	cmp	r3, #0
 8010898:	d05b      	beq.n	8010952 <_strtol_l.constprop.0+0xf6>
 801089a:	2b10      	cmp	r3, #16
 801089c:	d109      	bne.n	80108b2 <_strtol_l.constprop.0+0x56>
 801089e:	2c30      	cmp	r4, #48	; 0x30
 80108a0:	d107      	bne.n	80108b2 <_strtol_l.constprop.0+0x56>
 80108a2:	782c      	ldrb	r4, [r5, #0]
 80108a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80108a8:	2c58      	cmp	r4, #88	; 0x58
 80108aa:	d14d      	bne.n	8010948 <_strtol_l.constprop.0+0xec>
 80108ac:	786c      	ldrb	r4, [r5, #1]
 80108ae:	2310      	movs	r3, #16
 80108b0:	3502      	adds	r5, #2
 80108b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80108b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80108ba:	f04f 0e00 	mov.w	lr, #0
 80108be:	fbb8 f9f3 	udiv	r9, r8, r3
 80108c2:	4676      	mov	r6, lr
 80108c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80108c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80108cc:	f1bc 0f09 	cmp.w	ip, #9
 80108d0:	d816      	bhi.n	8010900 <_strtol_l.constprop.0+0xa4>
 80108d2:	4664      	mov	r4, ip
 80108d4:	42a3      	cmp	r3, r4
 80108d6:	dd24      	ble.n	8010922 <_strtol_l.constprop.0+0xc6>
 80108d8:	f1be 3fff 	cmp.w	lr, #4294967295
 80108dc:	d008      	beq.n	80108f0 <_strtol_l.constprop.0+0x94>
 80108de:	45b1      	cmp	r9, r6
 80108e0:	d31c      	bcc.n	801091c <_strtol_l.constprop.0+0xc0>
 80108e2:	d101      	bne.n	80108e8 <_strtol_l.constprop.0+0x8c>
 80108e4:	45a2      	cmp	sl, r4
 80108e6:	db19      	blt.n	801091c <_strtol_l.constprop.0+0xc0>
 80108e8:	fb06 4603 	mla	r6, r6, r3, r4
 80108ec:	f04f 0e01 	mov.w	lr, #1
 80108f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80108f4:	e7e8      	b.n	80108c8 <_strtol_l.constprop.0+0x6c>
 80108f6:	2c2b      	cmp	r4, #43	; 0x2b
 80108f8:	bf04      	itt	eq
 80108fa:	782c      	ldrbeq	r4, [r5, #0]
 80108fc:	1cb5      	addeq	r5, r6, #2
 80108fe:	e7ca      	b.n	8010896 <_strtol_l.constprop.0+0x3a>
 8010900:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010904:	f1bc 0f19 	cmp.w	ip, #25
 8010908:	d801      	bhi.n	801090e <_strtol_l.constprop.0+0xb2>
 801090a:	3c37      	subs	r4, #55	; 0x37
 801090c:	e7e2      	b.n	80108d4 <_strtol_l.constprop.0+0x78>
 801090e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010912:	f1bc 0f19 	cmp.w	ip, #25
 8010916:	d804      	bhi.n	8010922 <_strtol_l.constprop.0+0xc6>
 8010918:	3c57      	subs	r4, #87	; 0x57
 801091a:	e7db      	b.n	80108d4 <_strtol_l.constprop.0+0x78>
 801091c:	f04f 3eff 	mov.w	lr, #4294967295
 8010920:	e7e6      	b.n	80108f0 <_strtol_l.constprop.0+0x94>
 8010922:	f1be 3fff 	cmp.w	lr, #4294967295
 8010926:	d105      	bne.n	8010934 <_strtol_l.constprop.0+0xd8>
 8010928:	2322      	movs	r3, #34	; 0x22
 801092a:	6003      	str	r3, [r0, #0]
 801092c:	4646      	mov	r6, r8
 801092e:	b942      	cbnz	r2, 8010942 <_strtol_l.constprop.0+0xe6>
 8010930:	4630      	mov	r0, r6
 8010932:	e79e      	b.n	8010872 <_strtol_l.constprop.0+0x16>
 8010934:	b107      	cbz	r7, 8010938 <_strtol_l.constprop.0+0xdc>
 8010936:	4276      	negs	r6, r6
 8010938:	2a00      	cmp	r2, #0
 801093a:	d0f9      	beq.n	8010930 <_strtol_l.constprop.0+0xd4>
 801093c:	f1be 0f00 	cmp.w	lr, #0
 8010940:	d000      	beq.n	8010944 <_strtol_l.constprop.0+0xe8>
 8010942:	1e69      	subs	r1, r5, #1
 8010944:	6011      	str	r1, [r2, #0]
 8010946:	e7f3      	b.n	8010930 <_strtol_l.constprop.0+0xd4>
 8010948:	2430      	movs	r4, #48	; 0x30
 801094a:	2b00      	cmp	r3, #0
 801094c:	d1b1      	bne.n	80108b2 <_strtol_l.constprop.0+0x56>
 801094e:	2308      	movs	r3, #8
 8010950:	e7af      	b.n	80108b2 <_strtol_l.constprop.0+0x56>
 8010952:	2c30      	cmp	r4, #48	; 0x30
 8010954:	d0a5      	beq.n	80108a2 <_strtol_l.constprop.0+0x46>
 8010956:	230a      	movs	r3, #10
 8010958:	e7ab      	b.n	80108b2 <_strtol_l.constprop.0+0x56>
 801095a:	bf00      	nop
 801095c:	08012da1 	.word	0x08012da1

08010960 <_strtol_r>:
 8010960:	f7ff bf7c 	b.w	801085c <_strtol_l.constprop.0>

08010964 <__ssputs_r>:
 8010964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010968:	688e      	ldr	r6, [r1, #8]
 801096a:	461f      	mov	r7, r3
 801096c:	42be      	cmp	r6, r7
 801096e:	680b      	ldr	r3, [r1, #0]
 8010970:	4682      	mov	sl, r0
 8010972:	460c      	mov	r4, r1
 8010974:	4690      	mov	r8, r2
 8010976:	d82c      	bhi.n	80109d2 <__ssputs_r+0x6e>
 8010978:	898a      	ldrh	r2, [r1, #12]
 801097a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801097e:	d026      	beq.n	80109ce <__ssputs_r+0x6a>
 8010980:	6965      	ldr	r5, [r4, #20]
 8010982:	6909      	ldr	r1, [r1, #16]
 8010984:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010988:	eba3 0901 	sub.w	r9, r3, r1
 801098c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010990:	1c7b      	adds	r3, r7, #1
 8010992:	444b      	add	r3, r9
 8010994:	106d      	asrs	r5, r5, #1
 8010996:	429d      	cmp	r5, r3
 8010998:	bf38      	it	cc
 801099a:	461d      	movcc	r5, r3
 801099c:	0553      	lsls	r3, r2, #21
 801099e:	d527      	bpl.n	80109f0 <__ssputs_r+0x8c>
 80109a0:	4629      	mov	r1, r5
 80109a2:	f7fc fc99 	bl	800d2d8 <_malloc_r>
 80109a6:	4606      	mov	r6, r0
 80109a8:	b360      	cbz	r0, 8010a04 <__ssputs_r+0xa0>
 80109aa:	6921      	ldr	r1, [r4, #16]
 80109ac:	464a      	mov	r2, r9
 80109ae:	f7fd fdba 	bl	800e526 <memcpy>
 80109b2:	89a3      	ldrh	r3, [r4, #12]
 80109b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80109b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109bc:	81a3      	strh	r3, [r4, #12]
 80109be:	6126      	str	r6, [r4, #16]
 80109c0:	6165      	str	r5, [r4, #20]
 80109c2:	444e      	add	r6, r9
 80109c4:	eba5 0509 	sub.w	r5, r5, r9
 80109c8:	6026      	str	r6, [r4, #0]
 80109ca:	60a5      	str	r5, [r4, #8]
 80109cc:	463e      	mov	r6, r7
 80109ce:	42be      	cmp	r6, r7
 80109d0:	d900      	bls.n	80109d4 <__ssputs_r+0x70>
 80109d2:	463e      	mov	r6, r7
 80109d4:	6820      	ldr	r0, [r4, #0]
 80109d6:	4632      	mov	r2, r6
 80109d8:	4641      	mov	r1, r8
 80109da:	f7fd fcb6 	bl	800e34a <memmove>
 80109de:	68a3      	ldr	r3, [r4, #8]
 80109e0:	1b9b      	subs	r3, r3, r6
 80109e2:	60a3      	str	r3, [r4, #8]
 80109e4:	6823      	ldr	r3, [r4, #0]
 80109e6:	4433      	add	r3, r6
 80109e8:	6023      	str	r3, [r4, #0]
 80109ea:	2000      	movs	r0, #0
 80109ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109f0:	462a      	mov	r2, r5
 80109f2:	f000 ff30 	bl	8011856 <_realloc_r>
 80109f6:	4606      	mov	r6, r0
 80109f8:	2800      	cmp	r0, #0
 80109fa:	d1e0      	bne.n	80109be <__ssputs_r+0x5a>
 80109fc:	6921      	ldr	r1, [r4, #16]
 80109fe:	4650      	mov	r0, sl
 8010a00:	f7fe fc20 	bl	800f244 <_free_r>
 8010a04:	230c      	movs	r3, #12
 8010a06:	f8ca 3000 	str.w	r3, [sl]
 8010a0a:	89a3      	ldrh	r3, [r4, #12]
 8010a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a10:	81a3      	strh	r3, [r4, #12]
 8010a12:	f04f 30ff 	mov.w	r0, #4294967295
 8010a16:	e7e9      	b.n	80109ec <__ssputs_r+0x88>

08010a18 <_svfiprintf_r>:
 8010a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a1c:	4698      	mov	r8, r3
 8010a1e:	898b      	ldrh	r3, [r1, #12]
 8010a20:	061b      	lsls	r3, r3, #24
 8010a22:	b09d      	sub	sp, #116	; 0x74
 8010a24:	4607      	mov	r7, r0
 8010a26:	460d      	mov	r5, r1
 8010a28:	4614      	mov	r4, r2
 8010a2a:	d50e      	bpl.n	8010a4a <_svfiprintf_r+0x32>
 8010a2c:	690b      	ldr	r3, [r1, #16]
 8010a2e:	b963      	cbnz	r3, 8010a4a <_svfiprintf_r+0x32>
 8010a30:	2140      	movs	r1, #64	; 0x40
 8010a32:	f7fc fc51 	bl	800d2d8 <_malloc_r>
 8010a36:	6028      	str	r0, [r5, #0]
 8010a38:	6128      	str	r0, [r5, #16]
 8010a3a:	b920      	cbnz	r0, 8010a46 <_svfiprintf_r+0x2e>
 8010a3c:	230c      	movs	r3, #12
 8010a3e:	603b      	str	r3, [r7, #0]
 8010a40:	f04f 30ff 	mov.w	r0, #4294967295
 8010a44:	e0d0      	b.n	8010be8 <_svfiprintf_r+0x1d0>
 8010a46:	2340      	movs	r3, #64	; 0x40
 8010a48:	616b      	str	r3, [r5, #20]
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8010a4e:	2320      	movs	r3, #32
 8010a50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a58:	2330      	movs	r3, #48	; 0x30
 8010a5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010c00 <_svfiprintf_r+0x1e8>
 8010a5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a62:	f04f 0901 	mov.w	r9, #1
 8010a66:	4623      	mov	r3, r4
 8010a68:	469a      	mov	sl, r3
 8010a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a6e:	b10a      	cbz	r2, 8010a74 <_svfiprintf_r+0x5c>
 8010a70:	2a25      	cmp	r2, #37	; 0x25
 8010a72:	d1f9      	bne.n	8010a68 <_svfiprintf_r+0x50>
 8010a74:	ebba 0b04 	subs.w	fp, sl, r4
 8010a78:	d00b      	beq.n	8010a92 <_svfiprintf_r+0x7a>
 8010a7a:	465b      	mov	r3, fp
 8010a7c:	4622      	mov	r2, r4
 8010a7e:	4629      	mov	r1, r5
 8010a80:	4638      	mov	r0, r7
 8010a82:	f7ff ff6f 	bl	8010964 <__ssputs_r>
 8010a86:	3001      	adds	r0, #1
 8010a88:	f000 80a9 	beq.w	8010bde <_svfiprintf_r+0x1c6>
 8010a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a8e:	445a      	add	r2, fp
 8010a90:	9209      	str	r2, [sp, #36]	; 0x24
 8010a92:	f89a 3000 	ldrb.w	r3, [sl]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	f000 80a1 	beq.w	8010bde <_svfiprintf_r+0x1c6>
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8010aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010aa6:	f10a 0a01 	add.w	sl, sl, #1
 8010aaa:	9304      	str	r3, [sp, #16]
 8010aac:	9307      	str	r3, [sp, #28]
 8010aae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ab2:	931a      	str	r3, [sp, #104]	; 0x68
 8010ab4:	4654      	mov	r4, sl
 8010ab6:	2205      	movs	r2, #5
 8010ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010abc:	4850      	ldr	r0, [pc, #320]	; (8010c00 <_svfiprintf_r+0x1e8>)
 8010abe:	f7ef fbaf 	bl	8000220 <memchr>
 8010ac2:	9a04      	ldr	r2, [sp, #16]
 8010ac4:	b9d8      	cbnz	r0, 8010afe <_svfiprintf_r+0xe6>
 8010ac6:	06d0      	lsls	r0, r2, #27
 8010ac8:	bf44      	itt	mi
 8010aca:	2320      	movmi	r3, #32
 8010acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ad0:	0711      	lsls	r1, r2, #28
 8010ad2:	bf44      	itt	mi
 8010ad4:	232b      	movmi	r3, #43	; 0x2b
 8010ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ada:	f89a 3000 	ldrb.w	r3, [sl]
 8010ade:	2b2a      	cmp	r3, #42	; 0x2a
 8010ae0:	d015      	beq.n	8010b0e <_svfiprintf_r+0xf6>
 8010ae2:	9a07      	ldr	r2, [sp, #28]
 8010ae4:	4654      	mov	r4, sl
 8010ae6:	2000      	movs	r0, #0
 8010ae8:	f04f 0c0a 	mov.w	ip, #10
 8010aec:	4621      	mov	r1, r4
 8010aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010af2:	3b30      	subs	r3, #48	; 0x30
 8010af4:	2b09      	cmp	r3, #9
 8010af6:	d94d      	bls.n	8010b94 <_svfiprintf_r+0x17c>
 8010af8:	b1b0      	cbz	r0, 8010b28 <_svfiprintf_r+0x110>
 8010afa:	9207      	str	r2, [sp, #28]
 8010afc:	e014      	b.n	8010b28 <_svfiprintf_r+0x110>
 8010afe:	eba0 0308 	sub.w	r3, r0, r8
 8010b02:	fa09 f303 	lsl.w	r3, r9, r3
 8010b06:	4313      	orrs	r3, r2
 8010b08:	9304      	str	r3, [sp, #16]
 8010b0a:	46a2      	mov	sl, r4
 8010b0c:	e7d2      	b.n	8010ab4 <_svfiprintf_r+0x9c>
 8010b0e:	9b03      	ldr	r3, [sp, #12]
 8010b10:	1d19      	adds	r1, r3, #4
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	9103      	str	r1, [sp, #12]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	bfbb      	ittet	lt
 8010b1a:	425b      	neglt	r3, r3
 8010b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8010b20:	9307      	strge	r3, [sp, #28]
 8010b22:	9307      	strlt	r3, [sp, #28]
 8010b24:	bfb8      	it	lt
 8010b26:	9204      	strlt	r2, [sp, #16]
 8010b28:	7823      	ldrb	r3, [r4, #0]
 8010b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8010b2c:	d10c      	bne.n	8010b48 <_svfiprintf_r+0x130>
 8010b2e:	7863      	ldrb	r3, [r4, #1]
 8010b30:	2b2a      	cmp	r3, #42	; 0x2a
 8010b32:	d134      	bne.n	8010b9e <_svfiprintf_r+0x186>
 8010b34:	9b03      	ldr	r3, [sp, #12]
 8010b36:	1d1a      	adds	r2, r3, #4
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	9203      	str	r2, [sp, #12]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	bfb8      	it	lt
 8010b40:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b44:	3402      	adds	r4, #2
 8010b46:	9305      	str	r3, [sp, #20]
 8010b48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010c10 <_svfiprintf_r+0x1f8>
 8010b4c:	7821      	ldrb	r1, [r4, #0]
 8010b4e:	2203      	movs	r2, #3
 8010b50:	4650      	mov	r0, sl
 8010b52:	f7ef fb65 	bl	8000220 <memchr>
 8010b56:	b138      	cbz	r0, 8010b68 <_svfiprintf_r+0x150>
 8010b58:	9b04      	ldr	r3, [sp, #16]
 8010b5a:	eba0 000a 	sub.w	r0, r0, sl
 8010b5e:	2240      	movs	r2, #64	; 0x40
 8010b60:	4082      	lsls	r2, r0
 8010b62:	4313      	orrs	r3, r2
 8010b64:	3401      	adds	r4, #1
 8010b66:	9304      	str	r3, [sp, #16]
 8010b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b6c:	4825      	ldr	r0, [pc, #148]	; (8010c04 <_svfiprintf_r+0x1ec>)
 8010b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b72:	2206      	movs	r2, #6
 8010b74:	f7ef fb54 	bl	8000220 <memchr>
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	d038      	beq.n	8010bee <_svfiprintf_r+0x1d6>
 8010b7c:	4b22      	ldr	r3, [pc, #136]	; (8010c08 <_svfiprintf_r+0x1f0>)
 8010b7e:	bb1b      	cbnz	r3, 8010bc8 <_svfiprintf_r+0x1b0>
 8010b80:	9b03      	ldr	r3, [sp, #12]
 8010b82:	3307      	adds	r3, #7
 8010b84:	f023 0307 	bic.w	r3, r3, #7
 8010b88:	3308      	adds	r3, #8
 8010b8a:	9303      	str	r3, [sp, #12]
 8010b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b8e:	4433      	add	r3, r6
 8010b90:	9309      	str	r3, [sp, #36]	; 0x24
 8010b92:	e768      	b.n	8010a66 <_svfiprintf_r+0x4e>
 8010b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b98:	460c      	mov	r4, r1
 8010b9a:	2001      	movs	r0, #1
 8010b9c:	e7a6      	b.n	8010aec <_svfiprintf_r+0xd4>
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	3401      	adds	r4, #1
 8010ba2:	9305      	str	r3, [sp, #20]
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	f04f 0c0a 	mov.w	ip, #10
 8010baa:	4620      	mov	r0, r4
 8010bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bb0:	3a30      	subs	r2, #48	; 0x30
 8010bb2:	2a09      	cmp	r2, #9
 8010bb4:	d903      	bls.n	8010bbe <_svfiprintf_r+0x1a6>
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d0c6      	beq.n	8010b48 <_svfiprintf_r+0x130>
 8010bba:	9105      	str	r1, [sp, #20]
 8010bbc:	e7c4      	b.n	8010b48 <_svfiprintf_r+0x130>
 8010bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	e7f0      	b.n	8010baa <_svfiprintf_r+0x192>
 8010bc8:	ab03      	add	r3, sp, #12
 8010bca:	9300      	str	r3, [sp, #0]
 8010bcc:	462a      	mov	r2, r5
 8010bce:	4b0f      	ldr	r3, [pc, #60]	; (8010c0c <_svfiprintf_r+0x1f4>)
 8010bd0:	a904      	add	r1, sp, #16
 8010bd2:	4638      	mov	r0, r7
 8010bd4:	f7fc fcac 	bl	800d530 <_printf_float>
 8010bd8:	1c42      	adds	r2, r0, #1
 8010bda:	4606      	mov	r6, r0
 8010bdc:	d1d6      	bne.n	8010b8c <_svfiprintf_r+0x174>
 8010bde:	89ab      	ldrh	r3, [r5, #12]
 8010be0:	065b      	lsls	r3, r3, #25
 8010be2:	f53f af2d 	bmi.w	8010a40 <_svfiprintf_r+0x28>
 8010be6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010be8:	b01d      	add	sp, #116	; 0x74
 8010bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bee:	ab03      	add	r3, sp, #12
 8010bf0:	9300      	str	r3, [sp, #0]
 8010bf2:	462a      	mov	r2, r5
 8010bf4:	4b05      	ldr	r3, [pc, #20]	; (8010c0c <_svfiprintf_r+0x1f4>)
 8010bf6:	a904      	add	r1, sp, #16
 8010bf8:	4638      	mov	r0, r7
 8010bfa:	f7fc ff3d 	bl	800da78 <_printf_i>
 8010bfe:	e7eb      	b.n	8010bd8 <_svfiprintf_r+0x1c0>
 8010c00:	08012ea1 	.word	0x08012ea1
 8010c04:	08012eab 	.word	0x08012eab
 8010c08:	0800d531 	.word	0x0800d531
 8010c0c:	08010965 	.word	0x08010965
 8010c10:	08012ea7 	.word	0x08012ea7

08010c14 <__sfputc_r>:
 8010c14:	6893      	ldr	r3, [r2, #8]
 8010c16:	3b01      	subs	r3, #1
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	b410      	push	{r4}
 8010c1c:	6093      	str	r3, [r2, #8]
 8010c1e:	da08      	bge.n	8010c32 <__sfputc_r+0x1e>
 8010c20:	6994      	ldr	r4, [r2, #24]
 8010c22:	42a3      	cmp	r3, r4
 8010c24:	db01      	blt.n	8010c2a <__sfputc_r+0x16>
 8010c26:	290a      	cmp	r1, #10
 8010c28:	d103      	bne.n	8010c32 <__sfputc_r+0x1e>
 8010c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c2e:	f000 b9e3 	b.w	8010ff8 <__swbuf_r>
 8010c32:	6813      	ldr	r3, [r2, #0]
 8010c34:	1c58      	adds	r0, r3, #1
 8010c36:	6010      	str	r0, [r2, #0]
 8010c38:	7019      	strb	r1, [r3, #0]
 8010c3a:	4608      	mov	r0, r1
 8010c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c40:	4770      	bx	lr

08010c42 <__sfputs_r>:
 8010c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c44:	4606      	mov	r6, r0
 8010c46:	460f      	mov	r7, r1
 8010c48:	4614      	mov	r4, r2
 8010c4a:	18d5      	adds	r5, r2, r3
 8010c4c:	42ac      	cmp	r4, r5
 8010c4e:	d101      	bne.n	8010c54 <__sfputs_r+0x12>
 8010c50:	2000      	movs	r0, #0
 8010c52:	e007      	b.n	8010c64 <__sfputs_r+0x22>
 8010c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c58:	463a      	mov	r2, r7
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	f7ff ffda 	bl	8010c14 <__sfputc_r>
 8010c60:	1c43      	adds	r3, r0, #1
 8010c62:	d1f3      	bne.n	8010c4c <__sfputs_r+0xa>
 8010c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010c68 <_vfiprintf_r>:
 8010c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6c:	460d      	mov	r5, r1
 8010c6e:	b09d      	sub	sp, #116	; 0x74
 8010c70:	4614      	mov	r4, r2
 8010c72:	4698      	mov	r8, r3
 8010c74:	4606      	mov	r6, r0
 8010c76:	b118      	cbz	r0, 8010c80 <_vfiprintf_r+0x18>
 8010c78:	6a03      	ldr	r3, [r0, #32]
 8010c7a:	b90b      	cbnz	r3, 8010c80 <_vfiprintf_r+0x18>
 8010c7c:	f7fd faba 	bl	800e1f4 <__sinit>
 8010c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c82:	07d9      	lsls	r1, r3, #31
 8010c84:	d405      	bmi.n	8010c92 <_vfiprintf_r+0x2a>
 8010c86:	89ab      	ldrh	r3, [r5, #12]
 8010c88:	059a      	lsls	r2, r3, #22
 8010c8a:	d402      	bmi.n	8010c92 <_vfiprintf_r+0x2a>
 8010c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c8e:	f7fd fc48 	bl	800e522 <__retarget_lock_acquire_recursive>
 8010c92:	89ab      	ldrh	r3, [r5, #12]
 8010c94:	071b      	lsls	r3, r3, #28
 8010c96:	d501      	bpl.n	8010c9c <_vfiprintf_r+0x34>
 8010c98:	692b      	ldr	r3, [r5, #16]
 8010c9a:	b99b      	cbnz	r3, 8010cc4 <_vfiprintf_r+0x5c>
 8010c9c:	4629      	mov	r1, r5
 8010c9e:	4630      	mov	r0, r6
 8010ca0:	f000 f9e8 	bl	8011074 <__swsetup_r>
 8010ca4:	b170      	cbz	r0, 8010cc4 <_vfiprintf_r+0x5c>
 8010ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ca8:	07dc      	lsls	r4, r3, #31
 8010caa:	d504      	bpl.n	8010cb6 <_vfiprintf_r+0x4e>
 8010cac:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb0:	b01d      	add	sp, #116	; 0x74
 8010cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb6:	89ab      	ldrh	r3, [r5, #12]
 8010cb8:	0598      	lsls	r0, r3, #22
 8010cba:	d4f7      	bmi.n	8010cac <_vfiprintf_r+0x44>
 8010cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cbe:	f7fd fc31 	bl	800e524 <__retarget_lock_release_recursive>
 8010cc2:	e7f3      	b.n	8010cac <_vfiprintf_r+0x44>
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8010cc8:	2320      	movs	r3, #32
 8010cca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cd2:	2330      	movs	r3, #48	; 0x30
 8010cd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010e88 <_vfiprintf_r+0x220>
 8010cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010cdc:	f04f 0901 	mov.w	r9, #1
 8010ce0:	4623      	mov	r3, r4
 8010ce2:	469a      	mov	sl, r3
 8010ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ce8:	b10a      	cbz	r2, 8010cee <_vfiprintf_r+0x86>
 8010cea:	2a25      	cmp	r2, #37	; 0x25
 8010cec:	d1f9      	bne.n	8010ce2 <_vfiprintf_r+0x7a>
 8010cee:	ebba 0b04 	subs.w	fp, sl, r4
 8010cf2:	d00b      	beq.n	8010d0c <_vfiprintf_r+0xa4>
 8010cf4:	465b      	mov	r3, fp
 8010cf6:	4622      	mov	r2, r4
 8010cf8:	4629      	mov	r1, r5
 8010cfa:	4630      	mov	r0, r6
 8010cfc:	f7ff ffa1 	bl	8010c42 <__sfputs_r>
 8010d00:	3001      	adds	r0, #1
 8010d02:	f000 80a9 	beq.w	8010e58 <_vfiprintf_r+0x1f0>
 8010d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d08:	445a      	add	r2, fp
 8010d0a:	9209      	str	r2, [sp, #36]	; 0x24
 8010d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	f000 80a1 	beq.w	8010e58 <_vfiprintf_r+0x1f0>
 8010d16:	2300      	movs	r3, #0
 8010d18:	f04f 32ff 	mov.w	r2, #4294967295
 8010d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d20:	f10a 0a01 	add.w	sl, sl, #1
 8010d24:	9304      	str	r3, [sp, #16]
 8010d26:	9307      	str	r3, [sp, #28]
 8010d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8010d2e:	4654      	mov	r4, sl
 8010d30:	2205      	movs	r2, #5
 8010d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d36:	4854      	ldr	r0, [pc, #336]	; (8010e88 <_vfiprintf_r+0x220>)
 8010d38:	f7ef fa72 	bl	8000220 <memchr>
 8010d3c:	9a04      	ldr	r2, [sp, #16]
 8010d3e:	b9d8      	cbnz	r0, 8010d78 <_vfiprintf_r+0x110>
 8010d40:	06d1      	lsls	r1, r2, #27
 8010d42:	bf44      	itt	mi
 8010d44:	2320      	movmi	r3, #32
 8010d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d4a:	0713      	lsls	r3, r2, #28
 8010d4c:	bf44      	itt	mi
 8010d4e:	232b      	movmi	r3, #43	; 0x2b
 8010d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d54:	f89a 3000 	ldrb.w	r3, [sl]
 8010d58:	2b2a      	cmp	r3, #42	; 0x2a
 8010d5a:	d015      	beq.n	8010d88 <_vfiprintf_r+0x120>
 8010d5c:	9a07      	ldr	r2, [sp, #28]
 8010d5e:	4654      	mov	r4, sl
 8010d60:	2000      	movs	r0, #0
 8010d62:	f04f 0c0a 	mov.w	ip, #10
 8010d66:	4621      	mov	r1, r4
 8010d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d6c:	3b30      	subs	r3, #48	; 0x30
 8010d6e:	2b09      	cmp	r3, #9
 8010d70:	d94d      	bls.n	8010e0e <_vfiprintf_r+0x1a6>
 8010d72:	b1b0      	cbz	r0, 8010da2 <_vfiprintf_r+0x13a>
 8010d74:	9207      	str	r2, [sp, #28]
 8010d76:	e014      	b.n	8010da2 <_vfiprintf_r+0x13a>
 8010d78:	eba0 0308 	sub.w	r3, r0, r8
 8010d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8010d80:	4313      	orrs	r3, r2
 8010d82:	9304      	str	r3, [sp, #16]
 8010d84:	46a2      	mov	sl, r4
 8010d86:	e7d2      	b.n	8010d2e <_vfiprintf_r+0xc6>
 8010d88:	9b03      	ldr	r3, [sp, #12]
 8010d8a:	1d19      	adds	r1, r3, #4
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	9103      	str	r1, [sp, #12]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	bfbb      	ittet	lt
 8010d94:	425b      	neglt	r3, r3
 8010d96:	f042 0202 	orrlt.w	r2, r2, #2
 8010d9a:	9307      	strge	r3, [sp, #28]
 8010d9c:	9307      	strlt	r3, [sp, #28]
 8010d9e:	bfb8      	it	lt
 8010da0:	9204      	strlt	r2, [sp, #16]
 8010da2:	7823      	ldrb	r3, [r4, #0]
 8010da4:	2b2e      	cmp	r3, #46	; 0x2e
 8010da6:	d10c      	bne.n	8010dc2 <_vfiprintf_r+0x15a>
 8010da8:	7863      	ldrb	r3, [r4, #1]
 8010daa:	2b2a      	cmp	r3, #42	; 0x2a
 8010dac:	d134      	bne.n	8010e18 <_vfiprintf_r+0x1b0>
 8010dae:	9b03      	ldr	r3, [sp, #12]
 8010db0:	1d1a      	adds	r2, r3, #4
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	9203      	str	r2, [sp, #12]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	bfb8      	it	lt
 8010dba:	f04f 33ff 	movlt.w	r3, #4294967295
 8010dbe:	3402      	adds	r4, #2
 8010dc0:	9305      	str	r3, [sp, #20]
 8010dc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010e98 <_vfiprintf_r+0x230>
 8010dc6:	7821      	ldrb	r1, [r4, #0]
 8010dc8:	2203      	movs	r2, #3
 8010dca:	4650      	mov	r0, sl
 8010dcc:	f7ef fa28 	bl	8000220 <memchr>
 8010dd0:	b138      	cbz	r0, 8010de2 <_vfiprintf_r+0x17a>
 8010dd2:	9b04      	ldr	r3, [sp, #16]
 8010dd4:	eba0 000a 	sub.w	r0, r0, sl
 8010dd8:	2240      	movs	r2, #64	; 0x40
 8010dda:	4082      	lsls	r2, r0
 8010ddc:	4313      	orrs	r3, r2
 8010dde:	3401      	adds	r4, #1
 8010de0:	9304      	str	r3, [sp, #16]
 8010de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010de6:	4829      	ldr	r0, [pc, #164]	; (8010e8c <_vfiprintf_r+0x224>)
 8010de8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010dec:	2206      	movs	r2, #6
 8010dee:	f7ef fa17 	bl	8000220 <memchr>
 8010df2:	2800      	cmp	r0, #0
 8010df4:	d03f      	beq.n	8010e76 <_vfiprintf_r+0x20e>
 8010df6:	4b26      	ldr	r3, [pc, #152]	; (8010e90 <_vfiprintf_r+0x228>)
 8010df8:	bb1b      	cbnz	r3, 8010e42 <_vfiprintf_r+0x1da>
 8010dfa:	9b03      	ldr	r3, [sp, #12]
 8010dfc:	3307      	adds	r3, #7
 8010dfe:	f023 0307 	bic.w	r3, r3, #7
 8010e02:	3308      	adds	r3, #8
 8010e04:	9303      	str	r3, [sp, #12]
 8010e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e08:	443b      	add	r3, r7
 8010e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8010e0c:	e768      	b.n	8010ce0 <_vfiprintf_r+0x78>
 8010e0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e12:	460c      	mov	r4, r1
 8010e14:	2001      	movs	r0, #1
 8010e16:	e7a6      	b.n	8010d66 <_vfiprintf_r+0xfe>
 8010e18:	2300      	movs	r3, #0
 8010e1a:	3401      	adds	r4, #1
 8010e1c:	9305      	str	r3, [sp, #20]
 8010e1e:	4619      	mov	r1, r3
 8010e20:	f04f 0c0a 	mov.w	ip, #10
 8010e24:	4620      	mov	r0, r4
 8010e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e2a:	3a30      	subs	r2, #48	; 0x30
 8010e2c:	2a09      	cmp	r2, #9
 8010e2e:	d903      	bls.n	8010e38 <_vfiprintf_r+0x1d0>
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d0c6      	beq.n	8010dc2 <_vfiprintf_r+0x15a>
 8010e34:	9105      	str	r1, [sp, #20]
 8010e36:	e7c4      	b.n	8010dc2 <_vfiprintf_r+0x15a>
 8010e38:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	2301      	movs	r3, #1
 8010e40:	e7f0      	b.n	8010e24 <_vfiprintf_r+0x1bc>
 8010e42:	ab03      	add	r3, sp, #12
 8010e44:	9300      	str	r3, [sp, #0]
 8010e46:	462a      	mov	r2, r5
 8010e48:	4b12      	ldr	r3, [pc, #72]	; (8010e94 <_vfiprintf_r+0x22c>)
 8010e4a:	a904      	add	r1, sp, #16
 8010e4c:	4630      	mov	r0, r6
 8010e4e:	f7fc fb6f 	bl	800d530 <_printf_float>
 8010e52:	4607      	mov	r7, r0
 8010e54:	1c78      	adds	r0, r7, #1
 8010e56:	d1d6      	bne.n	8010e06 <_vfiprintf_r+0x19e>
 8010e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e5a:	07d9      	lsls	r1, r3, #31
 8010e5c:	d405      	bmi.n	8010e6a <_vfiprintf_r+0x202>
 8010e5e:	89ab      	ldrh	r3, [r5, #12]
 8010e60:	059a      	lsls	r2, r3, #22
 8010e62:	d402      	bmi.n	8010e6a <_vfiprintf_r+0x202>
 8010e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e66:	f7fd fb5d 	bl	800e524 <__retarget_lock_release_recursive>
 8010e6a:	89ab      	ldrh	r3, [r5, #12]
 8010e6c:	065b      	lsls	r3, r3, #25
 8010e6e:	f53f af1d 	bmi.w	8010cac <_vfiprintf_r+0x44>
 8010e72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e74:	e71c      	b.n	8010cb0 <_vfiprintf_r+0x48>
 8010e76:	ab03      	add	r3, sp, #12
 8010e78:	9300      	str	r3, [sp, #0]
 8010e7a:	462a      	mov	r2, r5
 8010e7c:	4b05      	ldr	r3, [pc, #20]	; (8010e94 <_vfiprintf_r+0x22c>)
 8010e7e:	a904      	add	r1, sp, #16
 8010e80:	4630      	mov	r0, r6
 8010e82:	f7fc fdf9 	bl	800da78 <_printf_i>
 8010e86:	e7e4      	b.n	8010e52 <_vfiprintf_r+0x1ea>
 8010e88:	08012ea1 	.word	0x08012ea1
 8010e8c:	08012eab 	.word	0x08012eab
 8010e90:	0800d531 	.word	0x0800d531
 8010e94:	08010c43 	.word	0x08010c43
 8010e98:	08012ea7 	.word	0x08012ea7

08010e9c <__sflush_r>:
 8010e9c:	898a      	ldrh	r2, [r1, #12]
 8010e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea2:	4605      	mov	r5, r0
 8010ea4:	0710      	lsls	r0, r2, #28
 8010ea6:	460c      	mov	r4, r1
 8010ea8:	d458      	bmi.n	8010f5c <__sflush_r+0xc0>
 8010eaa:	684b      	ldr	r3, [r1, #4]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	dc05      	bgt.n	8010ebc <__sflush_r+0x20>
 8010eb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	dc02      	bgt.n	8010ebc <__sflush_r+0x20>
 8010eb6:	2000      	movs	r0, #0
 8010eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ebe:	2e00      	cmp	r6, #0
 8010ec0:	d0f9      	beq.n	8010eb6 <__sflush_r+0x1a>
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ec8:	682f      	ldr	r7, [r5, #0]
 8010eca:	6a21      	ldr	r1, [r4, #32]
 8010ecc:	602b      	str	r3, [r5, #0]
 8010ece:	d032      	beq.n	8010f36 <__sflush_r+0x9a>
 8010ed0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ed2:	89a3      	ldrh	r3, [r4, #12]
 8010ed4:	075a      	lsls	r2, r3, #29
 8010ed6:	d505      	bpl.n	8010ee4 <__sflush_r+0x48>
 8010ed8:	6863      	ldr	r3, [r4, #4]
 8010eda:	1ac0      	subs	r0, r0, r3
 8010edc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ede:	b10b      	cbz	r3, 8010ee4 <__sflush_r+0x48>
 8010ee0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ee2:	1ac0      	subs	r0, r0, r3
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010eea:	6a21      	ldr	r1, [r4, #32]
 8010eec:	4628      	mov	r0, r5
 8010eee:	47b0      	blx	r6
 8010ef0:	1c43      	adds	r3, r0, #1
 8010ef2:	89a3      	ldrh	r3, [r4, #12]
 8010ef4:	d106      	bne.n	8010f04 <__sflush_r+0x68>
 8010ef6:	6829      	ldr	r1, [r5, #0]
 8010ef8:	291d      	cmp	r1, #29
 8010efa:	d82b      	bhi.n	8010f54 <__sflush_r+0xb8>
 8010efc:	4a29      	ldr	r2, [pc, #164]	; (8010fa4 <__sflush_r+0x108>)
 8010efe:	410a      	asrs	r2, r1
 8010f00:	07d6      	lsls	r6, r2, #31
 8010f02:	d427      	bmi.n	8010f54 <__sflush_r+0xb8>
 8010f04:	2200      	movs	r2, #0
 8010f06:	6062      	str	r2, [r4, #4]
 8010f08:	04d9      	lsls	r1, r3, #19
 8010f0a:	6922      	ldr	r2, [r4, #16]
 8010f0c:	6022      	str	r2, [r4, #0]
 8010f0e:	d504      	bpl.n	8010f1a <__sflush_r+0x7e>
 8010f10:	1c42      	adds	r2, r0, #1
 8010f12:	d101      	bne.n	8010f18 <__sflush_r+0x7c>
 8010f14:	682b      	ldr	r3, [r5, #0]
 8010f16:	b903      	cbnz	r3, 8010f1a <__sflush_r+0x7e>
 8010f18:	6560      	str	r0, [r4, #84]	; 0x54
 8010f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f1c:	602f      	str	r7, [r5, #0]
 8010f1e:	2900      	cmp	r1, #0
 8010f20:	d0c9      	beq.n	8010eb6 <__sflush_r+0x1a>
 8010f22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f26:	4299      	cmp	r1, r3
 8010f28:	d002      	beq.n	8010f30 <__sflush_r+0x94>
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	f7fe f98a 	bl	800f244 <_free_r>
 8010f30:	2000      	movs	r0, #0
 8010f32:	6360      	str	r0, [r4, #52]	; 0x34
 8010f34:	e7c0      	b.n	8010eb8 <__sflush_r+0x1c>
 8010f36:	2301      	movs	r3, #1
 8010f38:	4628      	mov	r0, r5
 8010f3a:	47b0      	blx	r6
 8010f3c:	1c41      	adds	r1, r0, #1
 8010f3e:	d1c8      	bne.n	8010ed2 <__sflush_r+0x36>
 8010f40:	682b      	ldr	r3, [r5, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d0c5      	beq.n	8010ed2 <__sflush_r+0x36>
 8010f46:	2b1d      	cmp	r3, #29
 8010f48:	d001      	beq.n	8010f4e <__sflush_r+0xb2>
 8010f4a:	2b16      	cmp	r3, #22
 8010f4c:	d101      	bne.n	8010f52 <__sflush_r+0xb6>
 8010f4e:	602f      	str	r7, [r5, #0]
 8010f50:	e7b1      	b.n	8010eb6 <__sflush_r+0x1a>
 8010f52:	89a3      	ldrh	r3, [r4, #12]
 8010f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f58:	81a3      	strh	r3, [r4, #12]
 8010f5a:	e7ad      	b.n	8010eb8 <__sflush_r+0x1c>
 8010f5c:	690f      	ldr	r7, [r1, #16]
 8010f5e:	2f00      	cmp	r7, #0
 8010f60:	d0a9      	beq.n	8010eb6 <__sflush_r+0x1a>
 8010f62:	0793      	lsls	r3, r2, #30
 8010f64:	680e      	ldr	r6, [r1, #0]
 8010f66:	bf08      	it	eq
 8010f68:	694b      	ldreq	r3, [r1, #20]
 8010f6a:	600f      	str	r7, [r1, #0]
 8010f6c:	bf18      	it	ne
 8010f6e:	2300      	movne	r3, #0
 8010f70:	eba6 0807 	sub.w	r8, r6, r7
 8010f74:	608b      	str	r3, [r1, #8]
 8010f76:	f1b8 0f00 	cmp.w	r8, #0
 8010f7a:	dd9c      	ble.n	8010eb6 <__sflush_r+0x1a>
 8010f7c:	6a21      	ldr	r1, [r4, #32]
 8010f7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010f80:	4643      	mov	r3, r8
 8010f82:	463a      	mov	r2, r7
 8010f84:	4628      	mov	r0, r5
 8010f86:	47b0      	blx	r6
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	dc06      	bgt.n	8010f9a <__sflush_r+0xfe>
 8010f8c:	89a3      	ldrh	r3, [r4, #12]
 8010f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f92:	81a3      	strh	r3, [r4, #12]
 8010f94:	f04f 30ff 	mov.w	r0, #4294967295
 8010f98:	e78e      	b.n	8010eb8 <__sflush_r+0x1c>
 8010f9a:	4407      	add	r7, r0
 8010f9c:	eba8 0800 	sub.w	r8, r8, r0
 8010fa0:	e7e9      	b.n	8010f76 <__sflush_r+0xda>
 8010fa2:	bf00      	nop
 8010fa4:	dfbffffe 	.word	0xdfbffffe

08010fa8 <_fflush_r>:
 8010fa8:	b538      	push	{r3, r4, r5, lr}
 8010faa:	690b      	ldr	r3, [r1, #16]
 8010fac:	4605      	mov	r5, r0
 8010fae:	460c      	mov	r4, r1
 8010fb0:	b913      	cbnz	r3, 8010fb8 <_fflush_r+0x10>
 8010fb2:	2500      	movs	r5, #0
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	bd38      	pop	{r3, r4, r5, pc}
 8010fb8:	b118      	cbz	r0, 8010fc2 <_fflush_r+0x1a>
 8010fba:	6a03      	ldr	r3, [r0, #32]
 8010fbc:	b90b      	cbnz	r3, 8010fc2 <_fflush_r+0x1a>
 8010fbe:	f7fd f919 	bl	800e1f4 <__sinit>
 8010fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d0f3      	beq.n	8010fb2 <_fflush_r+0xa>
 8010fca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010fcc:	07d0      	lsls	r0, r2, #31
 8010fce:	d404      	bmi.n	8010fda <_fflush_r+0x32>
 8010fd0:	0599      	lsls	r1, r3, #22
 8010fd2:	d402      	bmi.n	8010fda <_fflush_r+0x32>
 8010fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fd6:	f7fd faa4 	bl	800e522 <__retarget_lock_acquire_recursive>
 8010fda:	4628      	mov	r0, r5
 8010fdc:	4621      	mov	r1, r4
 8010fde:	f7ff ff5d 	bl	8010e9c <__sflush_r>
 8010fe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fe4:	07da      	lsls	r2, r3, #31
 8010fe6:	4605      	mov	r5, r0
 8010fe8:	d4e4      	bmi.n	8010fb4 <_fflush_r+0xc>
 8010fea:	89a3      	ldrh	r3, [r4, #12]
 8010fec:	059b      	lsls	r3, r3, #22
 8010fee:	d4e1      	bmi.n	8010fb4 <_fflush_r+0xc>
 8010ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ff2:	f7fd fa97 	bl	800e524 <__retarget_lock_release_recursive>
 8010ff6:	e7dd      	b.n	8010fb4 <_fflush_r+0xc>

08010ff8 <__swbuf_r>:
 8010ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ffa:	460e      	mov	r6, r1
 8010ffc:	4614      	mov	r4, r2
 8010ffe:	4605      	mov	r5, r0
 8011000:	b118      	cbz	r0, 801100a <__swbuf_r+0x12>
 8011002:	6a03      	ldr	r3, [r0, #32]
 8011004:	b90b      	cbnz	r3, 801100a <__swbuf_r+0x12>
 8011006:	f7fd f8f5 	bl	800e1f4 <__sinit>
 801100a:	69a3      	ldr	r3, [r4, #24]
 801100c:	60a3      	str	r3, [r4, #8]
 801100e:	89a3      	ldrh	r3, [r4, #12]
 8011010:	071a      	lsls	r2, r3, #28
 8011012:	d525      	bpl.n	8011060 <__swbuf_r+0x68>
 8011014:	6923      	ldr	r3, [r4, #16]
 8011016:	b31b      	cbz	r3, 8011060 <__swbuf_r+0x68>
 8011018:	6823      	ldr	r3, [r4, #0]
 801101a:	6922      	ldr	r2, [r4, #16]
 801101c:	1a98      	subs	r0, r3, r2
 801101e:	6963      	ldr	r3, [r4, #20]
 8011020:	b2f6      	uxtb	r6, r6
 8011022:	4283      	cmp	r3, r0
 8011024:	4637      	mov	r7, r6
 8011026:	dc04      	bgt.n	8011032 <__swbuf_r+0x3a>
 8011028:	4621      	mov	r1, r4
 801102a:	4628      	mov	r0, r5
 801102c:	f7ff ffbc 	bl	8010fa8 <_fflush_r>
 8011030:	b9e0      	cbnz	r0, 801106c <__swbuf_r+0x74>
 8011032:	68a3      	ldr	r3, [r4, #8]
 8011034:	3b01      	subs	r3, #1
 8011036:	60a3      	str	r3, [r4, #8]
 8011038:	6823      	ldr	r3, [r4, #0]
 801103a:	1c5a      	adds	r2, r3, #1
 801103c:	6022      	str	r2, [r4, #0]
 801103e:	701e      	strb	r6, [r3, #0]
 8011040:	6962      	ldr	r2, [r4, #20]
 8011042:	1c43      	adds	r3, r0, #1
 8011044:	429a      	cmp	r2, r3
 8011046:	d004      	beq.n	8011052 <__swbuf_r+0x5a>
 8011048:	89a3      	ldrh	r3, [r4, #12]
 801104a:	07db      	lsls	r3, r3, #31
 801104c:	d506      	bpl.n	801105c <__swbuf_r+0x64>
 801104e:	2e0a      	cmp	r6, #10
 8011050:	d104      	bne.n	801105c <__swbuf_r+0x64>
 8011052:	4621      	mov	r1, r4
 8011054:	4628      	mov	r0, r5
 8011056:	f7ff ffa7 	bl	8010fa8 <_fflush_r>
 801105a:	b938      	cbnz	r0, 801106c <__swbuf_r+0x74>
 801105c:	4638      	mov	r0, r7
 801105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011060:	4621      	mov	r1, r4
 8011062:	4628      	mov	r0, r5
 8011064:	f000 f806 	bl	8011074 <__swsetup_r>
 8011068:	2800      	cmp	r0, #0
 801106a:	d0d5      	beq.n	8011018 <__swbuf_r+0x20>
 801106c:	f04f 37ff 	mov.w	r7, #4294967295
 8011070:	e7f4      	b.n	801105c <__swbuf_r+0x64>
	...

08011074 <__swsetup_r>:
 8011074:	b538      	push	{r3, r4, r5, lr}
 8011076:	4b2a      	ldr	r3, [pc, #168]	; (8011120 <__swsetup_r+0xac>)
 8011078:	4605      	mov	r5, r0
 801107a:	6818      	ldr	r0, [r3, #0]
 801107c:	460c      	mov	r4, r1
 801107e:	b118      	cbz	r0, 8011088 <__swsetup_r+0x14>
 8011080:	6a03      	ldr	r3, [r0, #32]
 8011082:	b90b      	cbnz	r3, 8011088 <__swsetup_r+0x14>
 8011084:	f7fd f8b6 	bl	800e1f4 <__sinit>
 8011088:	89a3      	ldrh	r3, [r4, #12]
 801108a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801108e:	0718      	lsls	r0, r3, #28
 8011090:	d422      	bmi.n	80110d8 <__swsetup_r+0x64>
 8011092:	06d9      	lsls	r1, r3, #27
 8011094:	d407      	bmi.n	80110a6 <__swsetup_r+0x32>
 8011096:	2309      	movs	r3, #9
 8011098:	602b      	str	r3, [r5, #0]
 801109a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801109e:	81a3      	strh	r3, [r4, #12]
 80110a0:	f04f 30ff 	mov.w	r0, #4294967295
 80110a4:	e034      	b.n	8011110 <__swsetup_r+0x9c>
 80110a6:	0758      	lsls	r0, r3, #29
 80110a8:	d512      	bpl.n	80110d0 <__swsetup_r+0x5c>
 80110aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110ac:	b141      	cbz	r1, 80110c0 <__swsetup_r+0x4c>
 80110ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110b2:	4299      	cmp	r1, r3
 80110b4:	d002      	beq.n	80110bc <__swsetup_r+0x48>
 80110b6:	4628      	mov	r0, r5
 80110b8:	f7fe f8c4 	bl	800f244 <_free_r>
 80110bc:	2300      	movs	r3, #0
 80110be:	6363      	str	r3, [r4, #52]	; 0x34
 80110c0:	89a3      	ldrh	r3, [r4, #12]
 80110c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80110c6:	81a3      	strh	r3, [r4, #12]
 80110c8:	2300      	movs	r3, #0
 80110ca:	6063      	str	r3, [r4, #4]
 80110cc:	6923      	ldr	r3, [r4, #16]
 80110ce:	6023      	str	r3, [r4, #0]
 80110d0:	89a3      	ldrh	r3, [r4, #12]
 80110d2:	f043 0308 	orr.w	r3, r3, #8
 80110d6:	81a3      	strh	r3, [r4, #12]
 80110d8:	6923      	ldr	r3, [r4, #16]
 80110da:	b94b      	cbnz	r3, 80110f0 <__swsetup_r+0x7c>
 80110dc:	89a3      	ldrh	r3, [r4, #12]
 80110de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110e6:	d003      	beq.n	80110f0 <__swsetup_r+0x7c>
 80110e8:	4621      	mov	r1, r4
 80110ea:	4628      	mov	r0, r5
 80110ec:	f000 fc15 	bl	801191a <__smakebuf_r>
 80110f0:	89a0      	ldrh	r0, [r4, #12]
 80110f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110f6:	f010 0301 	ands.w	r3, r0, #1
 80110fa:	d00a      	beq.n	8011112 <__swsetup_r+0x9e>
 80110fc:	2300      	movs	r3, #0
 80110fe:	60a3      	str	r3, [r4, #8]
 8011100:	6963      	ldr	r3, [r4, #20]
 8011102:	425b      	negs	r3, r3
 8011104:	61a3      	str	r3, [r4, #24]
 8011106:	6923      	ldr	r3, [r4, #16]
 8011108:	b943      	cbnz	r3, 801111c <__swsetup_r+0xa8>
 801110a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801110e:	d1c4      	bne.n	801109a <__swsetup_r+0x26>
 8011110:	bd38      	pop	{r3, r4, r5, pc}
 8011112:	0781      	lsls	r1, r0, #30
 8011114:	bf58      	it	pl
 8011116:	6963      	ldrpl	r3, [r4, #20]
 8011118:	60a3      	str	r3, [r4, #8]
 801111a:	e7f4      	b.n	8011106 <__swsetup_r+0x92>
 801111c:	2000      	movs	r0, #0
 801111e:	e7f7      	b.n	8011110 <__swsetup_r+0x9c>
 8011120:	20000064 	.word	0x20000064

08011124 <strncmp>:
 8011124:	b510      	push	{r4, lr}
 8011126:	b16a      	cbz	r2, 8011144 <strncmp+0x20>
 8011128:	3901      	subs	r1, #1
 801112a:	1884      	adds	r4, r0, r2
 801112c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011130:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011134:	429a      	cmp	r2, r3
 8011136:	d103      	bne.n	8011140 <strncmp+0x1c>
 8011138:	42a0      	cmp	r0, r4
 801113a:	d001      	beq.n	8011140 <strncmp+0x1c>
 801113c:	2a00      	cmp	r2, #0
 801113e:	d1f5      	bne.n	801112c <strncmp+0x8>
 8011140:	1ad0      	subs	r0, r2, r3
 8011142:	bd10      	pop	{r4, pc}
 8011144:	4610      	mov	r0, r2
 8011146:	e7fc      	b.n	8011142 <strncmp+0x1e>

08011148 <nan>:
 8011148:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011150 <nan+0x8>
 801114c:	4770      	bx	lr
 801114e:	bf00      	nop
 8011150:	00000000 	.word	0x00000000
 8011154:	7ff80000 	.word	0x7ff80000

08011158 <_calloc_r>:
 8011158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801115a:	fba1 2402 	umull	r2, r4, r1, r2
 801115e:	b94c      	cbnz	r4, 8011174 <_calloc_r+0x1c>
 8011160:	4611      	mov	r1, r2
 8011162:	9201      	str	r2, [sp, #4]
 8011164:	f7fc f8b8 	bl	800d2d8 <_malloc_r>
 8011168:	9a01      	ldr	r2, [sp, #4]
 801116a:	4605      	mov	r5, r0
 801116c:	b930      	cbnz	r0, 801117c <_calloc_r+0x24>
 801116e:	4628      	mov	r0, r5
 8011170:	b003      	add	sp, #12
 8011172:	bd30      	pop	{r4, r5, pc}
 8011174:	220c      	movs	r2, #12
 8011176:	6002      	str	r2, [r0, #0]
 8011178:	2500      	movs	r5, #0
 801117a:	e7f8      	b.n	801116e <_calloc_r+0x16>
 801117c:	4621      	mov	r1, r4
 801117e:	f7fd f8fe 	bl	800e37e <memset>
 8011182:	e7f4      	b.n	801116e <_calloc_r+0x16>

08011184 <rshift>:
 8011184:	6903      	ldr	r3, [r0, #16]
 8011186:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801118a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801118e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011192:	f100 0414 	add.w	r4, r0, #20
 8011196:	dd45      	ble.n	8011224 <rshift+0xa0>
 8011198:	f011 011f 	ands.w	r1, r1, #31
 801119c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80111a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80111a4:	d10c      	bne.n	80111c0 <rshift+0x3c>
 80111a6:	f100 0710 	add.w	r7, r0, #16
 80111aa:	4629      	mov	r1, r5
 80111ac:	42b1      	cmp	r1, r6
 80111ae:	d334      	bcc.n	801121a <rshift+0x96>
 80111b0:	1a9b      	subs	r3, r3, r2
 80111b2:	009b      	lsls	r3, r3, #2
 80111b4:	1eea      	subs	r2, r5, #3
 80111b6:	4296      	cmp	r6, r2
 80111b8:	bf38      	it	cc
 80111ba:	2300      	movcc	r3, #0
 80111bc:	4423      	add	r3, r4
 80111be:	e015      	b.n	80111ec <rshift+0x68>
 80111c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80111c4:	f1c1 0820 	rsb	r8, r1, #32
 80111c8:	40cf      	lsrs	r7, r1
 80111ca:	f105 0e04 	add.w	lr, r5, #4
 80111ce:	46a1      	mov	r9, r4
 80111d0:	4576      	cmp	r6, lr
 80111d2:	46f4      	mov	ip, lr
 80111d4:	d815      	bhi.n	8011202 <rshift+0x7e>
 80111d6:	1a9a      	subs	r2, r3, r2
 80111d8:	0092      	lsls	r2, r2, #2
 80111da:	3a04      	subs	r2, #4
 80111dc:	3501      	adds	r5, #1
 80111de:	42ae      	cmp	r6, r5
 80111e0:	bf38      	it	cc
 80111e2:	2200      	movcc	r2, #0
 80111e4:	18a3      	adds	r3, r4, r2
 80111e6:	50a7      	str	r7, [r4, r2]
 80111e8:	b107      	cbz	r7, 80111ec <rshift+0x68>
 80111ea:	3304      	adds	r3, #4
 80111ec:	1b1a      	subs	r2, r3, r4
 80111ee:	42a3      	cmp	r3, r4
 80111f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80111f4:	bf08      	it	eq
 80111f6:	2300      	moveq	r3, #0
 80111f8:	6102      	str	r2, [r0, #16]
 80111fa:	bf08      	it	eq
 80111fc:	6143      	streq	r3, [r0, #20]
 80111fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011202:	f8dc c000 	ldr.w	ip, [ip]
 8011206:	fa0c fc08 	lsl.w	ip, ip, r8
 801120a:	ea4c 0707 	orr.w	r7, ip, r7
 801120e:	f849 7b04 	str.w	r7, [r9], #4
 8011212:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011216:	40cf      	lsrs	r7, r1
 8011218:	e7da      	b.n	80111d0 <rshift+0x4c>
 801121a:	f851 cb04 	ldr.w	ip, [r1], #4
 801121e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011222:	e7c3      	b.n	80111ac <rshift+0x28>
 8011224:	4623      	mov	r3, r4
 8011226:	e7e1      	b.n	80111ec <rshift+0x68>

08011228 <__hexdig_fun>:
 8011228:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801122c:	2b09      	cmp	r3, #9
 801122e:	d802      	bhi.n	8011236 <__hexdig_fun+0xe>
 8011230:	3820      	subs	r0, #32
 8011232:	b2c0      	uxtb	r0, r0
 8011234:	4770      	bx	lr
 8011236:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801123a:	2b05      	cmp	r3, #5
 801123c:	d801      	bhi.n	8011242 <__hexdig_fun+0x1a>
 801123e:	3847      	subs	r0, #71	; 0x47
 8011240:	e7f7      	b.n	8011232 <__hexdig_fun+0xa>
 8011242:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011246:	2b05      	cmp	r3, #5
 8011248:	d801      	bhi.n	801124e <__hexdig_fun+0x26>
 801124a:	3827      	subs	r0, #39	; 0x27
 801124c:	e7f1      	b.n	8011232 <__hexdig_fun+0xa>
 801124e:	2000      	movs	r0, #0
 8011250:	4770      	bx	lr
	...

08011254 <__gethex>:
 8011254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011258:	4617      	mov	r7, r2
 801125a:	680a      	ldr	r2, [r1, #0]
 801125c:	b085      	sub	sp, #20
 801125e:	f102 0b02 	add.w	fp, r2, #2
 8011262:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011266:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801126a:	4681      	mov	r9, r0
 801126c:	468a      	mov	sl, r1
 801126e:	9302      	str	r3, [sp, #8]
 8011270:	32fe      	adds	r2, #254	; 0xfe
 8011272:	eb02 030b 	add.w	r3, r2, fp
 8011276:	46d8      	mov	r8, fp
 8011278:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801127c:	9301      	str	r3, [sp, #4]
 801127e:	2830      	cmp	r0, #48	; 0x30
 8011280:	d0f7      	beq.n	8011272 <__gethex+0x1e>
 8011282:	f7ff ffd1 	bl	8011228 <__hexdig_fun>
 8011286:	4604      	mov	r4, r0
 8011288:	2800      	cmp	r0, #0
 801128a:	d138      	bne.n	80112fe <__gethex+0xaa>
 801128c:	49a7      	ldr	r1, [pc, #668]	; (801152c <__gethex+0x2d8>)
 801128e:	2201      	movs	r2, #1
 8011290:	4640      	mov	r0, r8
 8011292:	f7ff ff47 	bl	8011124 <strncmp>
 8011296:	4606      	mov	r6, r0
 8011298:	2800      	cmp	r0, #0
 801129a:	d169      	bne.n	8011370 <__gethex+0x11c>
 801129c:	f898 0001 	ldrb.w	r0, [r8, #1]
 80112a0:	465d      	mov	r5, fp
 80112a2:	f7ff ffc1 	bl	8011228 <__hexdig_fun>
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d064      	beq.n	8011374 <__gethex+0x120>
 80112aa:	465a      	mov	r2, fp
 80112ac:	7810      	ldrb	r0, [r2, #0]
 80112ae:	2830      	cmp	r0, #48	; 0x30
 80112b0:	4690      	mov	r8, r2
 80112b2:	f102 0201 	add.w	r2, r2, #1
 80112b6:	d0f9      	beq.n	80112ac <__gethex+0x58>
 80112b8:	f7ff ffb6 	bl	8011228 <__hexdig_fun>
 80112bc:	2301      	movs	r3, #1
 80112be:	fab0 f480 	clz	r4, r0
 80112c2:	0964      	lsrs	r4, r4, #5
 80112c4:	465e      	mov	r6, fp
 80112c6:	9301      	str	r3, [sp, #4]
 80112c8:	4642      	mov	r2, r8
 80112ca:	4615      	mov	r5, r2
 80112cc:	3201      	adds	r2, #1
 80112ce:	7828      	ldrb	r0, [r5, #0]
 80112d0:	f7ff ffaa 	bl	8011228 <__hexdig_fun>
 80112d4:	2800      	cmp	r0, #0
 80112d6:	d1f8      	bne.n	80112ca <__gethex+0x76>
 80112d8:	4994      	ldr	r1, [pc, #592]	; (801152c <__gethex+0x2d8>)
 80112da:	2201      	movs	r2, #1
 80112dc:	4628      	mov	r0, r5
 80112de:	f7ff ff21 	bl	8011124 <strncmp>
 80112e2:	b978      	cbnz	r0, 8011304 <__gethex+0xb0>
 80112e4:	b946      	cbnz	r6, 80112f8 <__gethex+0xa4>
 80112e6:	1c6e      	adds	r6, r5, #1
 80112e8:	4632      	mov	r2, r6
 80112ea:	4615      	mov	r5, r2
 80112ec:	3201      	adds	r2, #1
 80112ee:	7828      	ldrb	r0, [r5, #0]
 80112f0:	f7ff ff9a 	bl	8011228 <__hexdig_fun>
 80112f4:	2800      	cmp	r0, #0
 80112f6:	d1f8      	bne.n	80112ea <__gethex+0x96>
 80112f8:	1b73      	subs	r3, r6, r5
 80112fa:	009e      	lsls	r6, r3, #2
 80112fc:	e004      	b.n	8011308 <__gethex+0xb4>
 80112fe:	2400      	movs	r4, #0
 8011300:	4626      	mov	r6, r4
 8011302:	e7e1      	b.n	80112c8 <__gethex+0x74>
 8011304:	2e00      	cmp	r6, #0
 8011306:	d1f7      	bne.n	80112f8 <__gethex+0xa4>
 8011308:	782b      	ldrb	r3, [r5, #0]
 801130a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801130e:	2b50      	cmp	r3, #80	; 0x50
 8011310:	d13d      	bne.n	801138e <__gethex+0x13a>
 8011312:	786b      	ldrb	r3, [r5, #1]
 8011314:	2b2b      	cmp	r3, #43	; 0x2b
 8011316:	d02f      	beq.n	8011378 <__gethex+0x124>
 8011318:	2b2d      	cmp	r3, #45	; 0x2d
 801131a:	d031      	beq.n	8011380 <__gethex+0x12c>
 801131c:	1c69      	adds	r1, r5, #1
 801131e:	f04f 0b00 	mov.w	fp, #0
 8011322:	7808      	ldrb	r0, [r1, #0]
 8011324:	f7ff ff80 	bl	8011228 <__hexdig_fun>
 8011328:	1e42      	subs	r2, r0, #1
 801132a:	b2d2      	uxtb	r2, r2
 801132c:	2a18      	cmp	r2, #24
 801132e:	d82e      	bhi.n	801138e <__gethex+0x13a>
 8011330:	f1a0 0210 	sub.w	r2, r0, #16
 8011334:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011338:	f7ff ff76 	bl	8011228 <__hexdig_fun>
 801133c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011340:	fa5f fc8c 	uxtb.w	ip, ip
 8011344:	f1bc 0f18 	cmp.w	ip, #24
 8011348:	d91d      	bls.n	8011386 <__gethex+0x132>
 801134a:	f1bb 0f00 	cmp.w	fp, #0
 801134e:	d000      	beq.n	8011352 <__gethex+0xfe>
 8011350:	4252      	negs	r2, r2
 8011352:	4416      	add	r6, r2
 8011354:	f8ca 1000 	str.w	r1, [sl]
 8011358:	b1dc      	cbz	r4, 8011392 <__gethex+0x13e>
 801135a:	9b01      	ldr	r3, [sp, #4]
 801135c:	2b00      	cmp	r3, #0
 801135e:	bf14      	ite	ne
 8011360:	f04f 0800 	movne.w	r8, #0
 8011364:	f04f 0806 	moveq.w	r8, #6
 8011368:	4640      	mov	r0, r8
 801136a:	b005      	add	sp, #20
 801136c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011370:	4645      	mov	r5, r8
 8011372:	4626      	mov	r6, r4
 8011374:	2401      	movs	r4, #1
 8011376:	e7c7      	b.n	8011308 <__gethex+0xb4>
 8011378:	f04f 0b00 	mov.w	fp, #0
 801137c:	1ca9      	adds	r1, r5, #2
 801137e:	e7d0      	b.n	8011322 <__gethex+0xce>
 8011380:	f04f 0b01 	mov.w	fp, #1
 8011384:	e7fa      	b.n	801137c <__gethex+0x128>
 8011386:	230a      	movs	r3, #10
 8011388:	fb03 0002 	mla	r0, r3, r2, r0
 801138c:	e7d0      	b.n	8011330 <__gethex+0xdc>
 801138e:	4629      	mov	r1, r5
 8011390:	e7e0      	b.n	8011354 <__gethex+0x100>
 8011392:	eba5 0308 	sub.w	r3, r5, r8
 8011396:	3b01      	subs	r3, #1
 8011398:	4621      	mov	r1, r4
 801139a:	2b07      	cmp	r3, #7
 801139c:	dc0a      	bgt.n	80113b4 <__gethex+0x160>
 801139e:	4648      	mov	r0, r9
 80113a0:	f7fd ff9c 	bl	800f2dc <_Balloc>
 80113a4:	4604      	mov	r4, r0
 80113a6:	b940      	cbnz	r0, 80113ba <__gethex+0x166>
 80113a8:	4b61      	ldr	r3, [pc, #388]	; (8011530 <__gethex+0x2dc>)
 80113aa:	4602      	mov	r2, r0
 80113ac:	21e4      	movs	r1, #228	; 0xe4
 80113ae:	4861      	ldr	r0, [pc, #388]	; (8011534 <__gethex+0x2e0>)
 80113b0:	f7fb ff32 	bl	800d218 <__assert_func>
 80113b4:	3101      	adds	r1, #1
 80113b6:	105b      	asrs	r3, r3, #1
 80113b8:	e7ef      	b.n	801139a <__gethex+0x146>
 80113ba:	f100 0a14 	add.w	sl, r0, #20
 80113be:	2300      	movs	r3, #0
 80113c0:	495a      	ldr	r1, [pc, #360]	; (801152c <__gethex+0x2d8>)
 80113c2:	f8cd a004 	str.w	sl, [sp, #4]
 80113c6:	469b      	mov	fp, r3
 80113c8:	45a8      	cmp	r8, r5
 80113ca:	d342      	bcc.n	8011452 <__gethex+0x1fe>
 80113cc:	9801      	ldr	r0, [sp, #4]
 80113ce:	f840 bb04 	str.w	fp, [r0], #4
 80113d2:	eba0 000a 	sub.w	r0, r0, sl
 80113d6:	1080      	asrs	r0, r0, #2
 80113d8:	6120      	str	r0, [r4, #16]
 80113da:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80113de:	4658      	mov	r0, fp
 80113e0:	f7fe f86e 	bl	800f4c0 <__hi0bits>
 80113e4:	683d      	ldr	r5, [r7, #0]
 80113e6:	eba8 0000 	sub.w	r0, r8, r0
 80113ea:	42a8      	cmp	r0, r5
 80113ec:	dd59      	ble.n	80114a2 <__gethex+0x24e>
 80113ee:	eba0 0805 	sub.w	r8, r0, r5
 80113f2:	4641      	mov	r1, r8
 80113f4:	4620      	mov	r0, r4
 80113f6:	f7fe fbfd 	bl	800fbf4 <__any_on>
 80113fa:	4683      	mov	fp, r0
 80113fc:	b1b8      	cbz	r0, 801142e <__gethex+0x1da>
 80113fe:	f108 33ff 	add.w	r3, r8, #4294967295
 8011402:	1159      	asrs	r1, r3, #5
 8011404:	f003 021f 	and.w	r2, r3, #31
 8011408:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801140c:	f04f 0b01 	mov.w	fp, #1
 8011410:	fa0b f202 	lsl.w	r2, fp, r2
 8011414:	420a      	tst	r2, r1
 8011416:	d00a      	beq.n	801142e <__gethex+0x1da>
 8011418:	455b      	cmp	r3, fp
 801141a:	dd06      	ble.n	801142a <__gethex+0x1d6>
 801141c:	f1a8 0102 	sub.w	r1, r8, #2
 8011420:	4620      	mov	r0, r4
 8011422:	f7fe fbe7 	bl	800fbf4 <__any_on>
 8011426:	2800      	cmp	r0, #0
 8011428:	d138      	bne.n	801149c <__gethex+0x248>
 801142a:	f04f 0b02 	mov.w	fp, #2
 801142e:	4641      	mov	r1, r8
 8011430:	4620      	mov	r0, r4
 8011432:	f7ff fea7 	bl	8011184 <rshift>
 8011436:	4446      	add	r6, r8
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	42b3      	cmp	r3, r6
 801143c:	da41      	bge.n	80114c2 <__gethex+0x26e>
 801143e:	4621      	mov	r1, r4
 8011440:	4648      	mov	r0, r9
 8011442:	f7fd ff8b 	bl	800f35c <_Bfree>
 8011446:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011448:	2300      	movs	r3, #0
 801144a:	6013      	str	r3, [r2, #0]
 801144c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8011450:	e78a      	b.n	8011368 <__gethex+0x114>
 8011452:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011456:	2a2e      	cmp	r2, #46	; 0x2e
 8011458:	d014      	beq.n	8011484 <__gethex+0x230>
 801145a:	2b20      	cmp	r3, #32
 801145c:	d106      	bne.n	801146c <__gethex+0x218>
 801145e:	9b01      	ldr	r3, [sp, #4]
 8011460:	f843 bb04 	str.w	fp, [r3], #4
 8011464:	f04f 0b00 	mov.w	fp, #0
 8011468:	9301      	str	r3, [sp, #4]
 801146a:	465b      	mov	r3, fp
 801146c:	7828      	ldrb	r0, [r5, #0]
 801146e:	9303      	str	r3, [sp, #12]
 8011470:	f7ff feda 	bl	8011228 <__hexdig_fun>
 8011474:	9b03      	ldr	r3, [sp, #12]
 8011476:	f000 000f 	and.w	r0, r0, #15
 801147a:	4098      	lsls	r0, r3
 801147c:	ea4b 0b00 	orr.w	fp, fp, r0
 8011480:	3304      	adds	r3, #4
 8011482:	e7a1      	b.n	80113c8 <__gethex+0x174>
 8011484:	45a8      	cmp	r8, r5
 8011486:	d8e8      	bhi.n	801145a <__gethex+0x206>
 8011488:	2201      	movs	r2, #1
 801148a:	4628      	mov	r0, r5
 801148c:	9303      	str	r3, [sp, #12]
 801148e:	f7ff fe49 	bl	8011124 <strncmp>
 8011492:	4926      	ldr	r1, [pc, #152]	; (801152c <__gethex+0x2d8>)
 8011494:	9b03      	ldr	r3, [sp, #12]
 8011496:	2800      	cmp	r0, #0
 8011498:	d1df      	bne.n	801145a <__gethex+0x206>
 801149a:	e795      	b.n	80113c8 <__gethex+0x174>
 801149c:	f04f 0b03 	mov.w	fp, #3
 80114a0:	e7c5      	b.n	801142e <__gethex+0x1da>
 80114a2:	da0b      	bge.n	80114bc <__gethex+0x268>
 80114a4:	eba5 0800 	sub.w	r8, r5, r0
 80114a8:	4621      	mov	r1, r4
 80114aa:	4642      	mov	r2, r8
 80114ac:	4648      	mov	r0, r9
 80114ae:	f7fe f96f 	bl	800f790 <__lshift>
 80114b2:	eba6 0608 	sub.w	r6, r6, r8
 80114b6:	4604      	mov	r4, r0
 80114b8:	f100 0a14 	add.w	sl, r0, #20
 80114bc:	f04f 0b00 	mov.w	fp, #0
 80114c0:	e7ba      	b.n	8011438 <__gethex+0x1e4>
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	42b3      	cmp	r3, r6
 80114c6:	dd73      	ble.n	80115b0 <__gethex+0x35c>
 80114c8:	1b9e      	subs	r6, r3, r6
 80114ca:	42b5      	cmp	r5, r6
 80114cc:	dc34      	bgt.n	8011538 <__gethex+0x2e4>
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	2b02      	cmp	r3, #2
 80114d2:	d023      	beq.n	801151c <__gethex+0x2c8>
 80114d4:	2b03      	cmp	r3, #3
 80114d6:	d025      	beq.n	8011524 <__gethex+0x2d0>
 80114d8:	2b01      	cmp	r3, #1
 80114da:	d115      	bne.n	8011508 <__gethex+0x2b4>
 80114dc:	42b5      	cmp	r5, r6
 80114de:	d113      	bne.n	8011508 <__gethex+0x2b4>
 80114e0:	2d01      	cmp	r5, #1
 80114e2:	d10b      	bne.n	80114fc <__gethex+0x2a8>
 80114e4:	9a02      	ldr	r2, [sp, #8]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6013      	str	r3, [r2, #0]
 80114ea:	2301      	movs	r3, #1
 80114ec:	6123      	str	r3, [r4, #16]
 80114ee:	f8ca 3000 	str.w	r3, [sl]
 80114f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114f4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80114f8:	601c      	str	r4, [r3, #0]
 80114fa:	e735      	b.n	8011368 <__gethex+0x114>
 80114fc:	1e69      	subs	r1, r5, #1
 80114fe:	4620      	mov	r0, r4
 8011500:	f7fe fb78 	bl	800fbf4 <__any_on>
 8011504:	2800      	cmp	r0, #0
 8011506:	d1ed      	bne.n	80114e4 <__gethex+0x290>
 8011508:	4621      	mov	r1, r4
 801150a:	4648      	mov	r0, r9
 801150c:	f7fd ff26 	bl	800f35c <_Bfree>
 8011510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011512:	2300      	movs	r3, #0
 8011514:	6013      	str	r3, [r2, #0]
 8011516:	f04f 0850 	mov.w	r8, #80	; 0x50
 801151a:	e725      	b.n	8011368 <__gethex+0x114>
 801151c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801151e:	2b00      	cmp	r3, #0
 8011520:	d1f2      	bne.n	8011508 <__gethex+0x2b4>
 8011522:	e7df      	b.n	80114e4 <__gethex+0x290>
 8011524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011526:	2b00      	cmp	r3, #0
 8011528:	d1dc      	bne.n	80114e4 <__gethex+0x290>
 801152a:	e7ed      	b.n	8011508 <__gethex+0x2b4>
 801152c:	08012d4c 	.word	0x08012d4c
 8011530:	08012be1 	.word	0x08012be1
 8011534:	08012eba 	.word	0x08012eba
 8011538:	f106 38ff 	add.w	r8, r6, #4294967295
 801153c:	f1bb 0f00 	cmp.w	fp, #0
 8011540:	d133      	bne.n	80115aa <__gethex+0x356>
 8011542:	f1b8 0f00 	cmp.w	r8, #0
 8011546:	d004      	beq.n	8011552 <__gethex+0x2fe>
 8011548:	4641      	mov	r1, r8
 801154a:	4620      	mov	r0, r4
 801154c:	f7fe fb52 	bl	800fbf4 <__any_on>
 8011550:	4683      	mov	fp, r0
 8011552:	ea4f 1268 	mov.w	r2, r8, asr #5
 8011556:	2301      	movs	r3, #1
 8011558:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801155c:	f008 081f 	and.w	r8, r8, #31
 8011560:	fa03 f308 	lsl.w	r3, r3, r8
 8011564:	4213      	tst	r3, r2
 8011566:	4631      	mov	r1, r6
 8011568:	4620      	mov	r0, r4
 801156a:	bf18      	it	ne
 801156c:	f04b 0b02 	orrne.w	fp, fp, #2
 8011570:	1bad      	subs	r5, r5, r6
 8011572:	f7ff fe07 	bl	8011184 <rshift>
 8011576:	687e      	ldr	r6, [r7, #4]
 8011578:	f04f 0802 	mov.w	r8, #2
 801157c:	f1bb 0f00 	cmp.w	fp, #0
 8011580:	d04a      	beq.n	8011618 <__gethex+0x3c4>
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2b02      	cmp	r3, #2
 8011586:	d016      	beq.n	80115b6 <__gethex+0x362>
 8011588:	2b03      	cmp	r3, #3
 801158a:	d018      	beq.n	80115be <__gethex+0x36a>
 801158c:	2b01      	cmp	r3, #1
 801158e:	d109      	bne.n	80115a4 <__gethex+0x350>
 8011590:	f01b 0f02 	tst.w	fp, #2
 8011594:	d006      	beq.n	80115a4 <__gethex+0x350>
 8011596:	f8da 3000 	ldr.w	r3, [sl]
 801159a:	ea4b 0b03 	orr.w	fp, fp, r3
 801159e:	f01b 0f01 	tst.w	fp, #1
 80115a2:	d10f      	bne.n	80115c4 <__gethex+0x370>
 80115a4:	f048 0810 	orr.w	r8, r8, #16
 80115a8:	e036      	b.n	8011618 <__gethex+0x3c4>
 80115aa:	f04f 0b01 	mov.w	fp, #1
 80115ae:	e7d0      	b.n	8011552 <__gethex+0x2fe>
 80115b0:	f04f 0801 	mov.w	r8, #1
 80115b4:	e7e2      	b.n	801157c <__gethex+0x328>
 80115b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115b8:	f1c3 0301 	rsb	r3, r3, #1
 80115bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80115be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d0ef      	beq.n	80115a4 <__gethex+0x350>
 80115c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80115c8:	f104 0214 	add.w	r2, r4, #20
 80115cc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80115d0:	9301      	str	r3, [sp, #4]
 80115d2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80115d6:	2300      	movs	r3, #0
 80115d8:	4694      	mov	ip, r2
 80115da:	f852 1b04 	ldr.w	r1, [r2], #4
 80115de:	f1b1 3fff 	cmp.w	r1, #4294967295
 80115e2:	d01e      	beq.n	8011622 <__gethex+0x3ce>
 80115e4:	3101      	adds	r1, #1
 80115e6:	f8cc 1000 	str.w	r1, [ip]
 80115ea:	f1b8 0f02 	cmp.w	r8, #2
 80115ee:	f104 0214 	add.w	r2, r4, #20
 80115f2:	d13d      	bne.n	8011670 <__gethex+0x41c>
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	3b01      	subs	r3, #1
 80115f8:	42ab      	cmp	r3, r5
 80115fa:	d10b      	bne.n	8011614 <__gethex+0x3c0>
 80115fc:	1169      	asrs	r1, r5, #5
 80115fe:	2301      	movs	r3, #1
 8011600:	f005 051f 	and.w	r5, r5, #31
 8011604:	fa03 f505 	lsl.w	r5, r3, r5
 8011608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801160c:	421d      	tst	r5, r3
 801160e:	bf18      	it	ne
 8011610:	f04f 0801 	movne.w	r8, #1
 8011614:	f048 0820 	orr.w	r8, r8, #32
 8011618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801161a:	601c      	str	r4, [r3, #0]
 801161c:	9b02      	ldr	r3, [sp, #8]
 801161e:	601e      	str	r6, [r3, #0]
 8011620:	e6a2      	b.n	8011368 <__gethex+0x114>
 8011622:	4290      	cmp	r0, r2
 8011624:	f842 3c04 	str.w	r3, [r2, #-4]
 8011628:	d8d6      	bhi.n	80115d8 <__gethex+0x384>
 801162a:	68a2      	ldr	r2, [r4, #8]
 801162c:	4593      	cmp	fp, r2
 801162e:	db17      	blt.n	8011660 <__gethex+0x40c>
 8011630:	6861      	ldr	r1, [r4, #4]
 8011632:	4648      	mov	r0, r9
 8011634:	3101      	adds	r1, #1
 8011636:	f7fd fe51 	bl	800f2dc <_Balloc>
 801163a:	4682      	mov	sl, r0
 801163c:	b918      	cbnz	r0, 8011646 <__gethex+0x3f2>
 801163e:	4b1b      	ldr	r3, [pc, #108]	; (80116ac <__gethex+0x458>)
 8011640:	4602      	mov	r2, r0
 8011642:	2184      	movs	r1, #132	; 0x84
 8011644:	e6b3      	b.n	80113ae <__gethex+0x15a>
 8011646:	6922      	ldr	r2, [r4, #16]
 8011648:	3202      	adds	r2, #2
 801164a:	f104 010c 	add.w	r1, r4, #12
 801164e:	0092      	lsls	r2, r2, #2
 8011650:	300c      	adds	r0, #12
 8011652:	f7fc ff68 	bl	800e526 <memcpy>
 8011656:	4621      	mov	r1, r4
 8011658:	4648      	mov	r0, r9
 801165a:	f7fd fe7f 	bl	800f35c <_Bfree>
 801165e:	4654      	mov	r4, sl
 8011660:	6922      	ldr	r2, [r4, #16]
 8011662:	1c51      	adds	r1, r2, #1
 8011664:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011668:	6121      	str	r1, [r4, #16]
 801166a:	2101      	movs	r1, #1
 801166c:	6151      	str	r1, [r2, #20]
 801166e:	e7bc      	b.n	80115ea <__gethex+0x396>
 8011670:	6921      	ldr	r1, [r4, #16]
 8011672:	4559      	cmp	r1, fp
 8011674:	dd0b      	ble.n	801168e <__gethex+0x43a>
 8011676:	2101      	movs	r1, #1
 8011678:	4620      	mov	r0, r4
 801167a:	f7ff fd83 	bl	8011184 <rshift>
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	3601      	adds	r6, #1
 8011682:	42b3      	cmp	r3, r6
 8011684:	f6ff aedb 	blt.w	801143e <__gethex+0x1ea>
 8011688:	f04f 0801 	mov.w	r8, #1
 801168c:	e7c2      	b.n	8011614 <__gethex+0x3c0>
 801168e:	f015 051f 	ands.w	r5, r5, #31
 8011692:	d0f9      	beq.n	8011688 <__gethex+0x434>
 8011694:	9b01      	ldr	r3, [sp, #4]
 8011696:	441a      	add	r2, r3
 8011698:	f1c5 0520 	rsb	r5, r5, #32
 801169c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80116a0:	f7fd ff0e 	bl	800f4c0 <__hi0bits>
 80116a4:	42a8      	cmp	r0, r5
 80116a6:	dbe6      	blt.n	8011676 <__gethex+0x422>
 80116a8:	e7ee      	b.n	8011688 <__gethex+0x434>
 80116aa:	bf00      	nop
 80116ac:	08012be1 	.word	0x08012be1

080116b0 <L_shift>:
 80116b0:	f1c2 0208 	rsb	r2, r2, #8
 80116b4:	0092      	lsls	r2, r2, #2
 80116b6:	b570      	push	{r4, r5, r6, lr}
 80116b8:	f1c2 0620 	rsb	r6, r2, #32
 80116bc:	6843      	ldr	r3, [r0, #4]
 80116be:	6804      	ldr	r4, [r0, #0]
 80116c0:	fa03 f506 	lsl.w	r5, r3, r6
 80116c4:	432c      	orrs	r4, r5
 80116c6:	40d3      	lsrs	r3, r2
 80116c8:	6004      	str	r4, [r0, #0]
 80116ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80116ce:	4288      	cmp	r0, r1
 80116d0:	d3f4      	bcc.n	80116bc <L_shift+0xc>
 80116d2:	bd70      	pop	{r4, r5, r6, pc}

080116d4 <__match>:
 80116d4:	b530      	push	{r4, r5, lr}
 80116d6:	6803      	ldr	r3, [r0, #0]
 80116d8:	3301      	adds	r3, #1
 80116da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116de:	b914      	cbnz	r4, 80116e6 <__match+0x12>
 80116e0:	6003      	str	r3, [r0, #0]
 80116e2:	2001      	movs	r0, #1
 80116e4:	bd30      	pop	{r4, r5, pc}
 80116e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80116ee:	2d19      	cmp	r5, #25
 80116f0:	bf98      	it	ls
 80116f2:	3220      	addls	r2, #32
 80116f4:	42a2      	cmp	r2, r4
 80116f6:	d0f0      	beq.n	80116da <__match+0x6>
 80116f8:	2000      	movs	r0, #0
 80116fa:	e7f3      	b.n	80116e4 <__match+0x10>

080116fc <__hexnan>:
 80116fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011700:	680b      	ldr	r3, [r1, #0]
 8011702:	6801      	ldr	r1, [r0, #0]
 8011704:	115e      	asrs	r6, r3, #5
 8011706:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801170a:	f013 031f 	ands.w	r3, r3, #31
 801170e:	b087      	sub	sp, #28
 8011710:	bf18      	it	ne
 8011712:	3604      	addne	r6, #4
 8011714:	2500      	movs	r5, #0
 8011716:	1f37      	subs	r7, r6, #4
 8011718:	4682      	mov	sl, r0
 801171a:	4690      	mov	r8, r2
 801171c:	9301      	str	r3, [sp, #4]
 801171e:	f846 5c04 	str.w	r5, [r6, #-4]
 8011722:	46b9      	mov	r9, r7
 8011724:	463c      	mov	r4, r7
 8011726:	9502      	str	r5, [sp, #8]
 8011728:	46ab      	mov	fp, r5
 801172a:	784a      	ldrb	r2, [r1, #1]
 801172c:	1c4b      	adds	r3, r1, #1
 801172e:	9303      	str	r3, [sp, #12]
 8011730:	b342      	cbz	r2, 8011784 <__hexnan+0x88>
 8011732:	4610      	mov	r0, r2
 8011734:	9105      	str	r1, [sp, #20]
 8011736:	9204      	str	r2, [sp, #16]
 8011738:	f7ff fd76 	bl	8011228 <__hexdig_fun>
 801173c:	2800      	cmp	r0, #0
 801173e:	d14f      	bne.n	80117e0 <__hexnan+0xe4>
 8011740:	9a04      	ldr	r2, [sp, #16]
 8011742:	9905      	ldr	r1, [sp, #20]
 8011744:	2a20      	cmp	r2, #32
 8011746:	d818      	bhi.n	801177a <__hexnan+0x7e>
 8011748:	9b02      	ldr	r3, [sp, #8]
 801174a:	459b      	cmp	fp, r3
 801174c:	dd13      	ble.n	8011776 <__hexnan+0x7a>
 801174e:	454c      	cmp	r4, r9
 8011750:	d206      	bcs.n	8011760 <__hexnan+0x64>
 8011752:	2d07      	cmp	r5, #7
 8011754:	dc04      	bgt.n	8011760 <__hexnan+0x64>
 8011756:	462a      	mov	r2, r5
 8011758:	4649      	mov	r1, r9
 801175a:	4620      	mov	r0, r4
 801175c:	f7ff ffa8 	bl	80116b0 <L_shift>
 8011760:	4544      	cmp	r4, r8
 8011762:	d950      	bls.n	8011806 <__hexnan+0x10a>
 8011764:	2300      	movs	r3, #0
 8011766:	f1a4 0904 	sub.w	r9, r4, #4
 801176a:	f844 3c04 	str.w	r3, [r4, #-4]
 801176e:	f8cd b008 	str.w	fp, [sp, #8]
 8011772:	464c      	mov	r4, r9
 8011774:	461d      	mov	r5, r3
 8011776:	9903      	ldr	r1, [sp, #12]
 8011778:	e7d7      	b.n	801172a <__hexnan+0x2e>
 801177a:	2a29      	cmp	r2, #41	; 0x29
 801177c:	d155      	bne.n	801182a <__hexnan+0x12e>
 801177e:	3102      	adds	r1, #2
 8011780:	f8ca 1000 	str.w	r1, [sl]
 8011784:	f1bb 0f00 	cmp.w	fp, #0
 8011788:	d04f      	beq.n	801182a <__hexnan+0x12e>
 801178a:	454c      	cmp	r4, r9
 801178c:	d206      	bcs.n	801179c <__hexnan+0xa0>
 801178e:	2d07      	cmp	r5, #7
 8011790:	dc04      	bgt.n	801179c <__hexnan+0xa0>
 8011792:	462a      	mov	r2, r5
 8011794:	4649      	mov	r1, r9
 8011796:	4620      	mov	r0, r4
 8011798:	f7ff ff8a 	bl	80116b0 <L_shift>
 801179c:	4544      	cmp	r4, r8
 801179e:	d934      	bls.n	801180a <__hexnan+0x10e>
 80117a0:	f1a8 0204 	sub.w	r2, r8, #4
 80117a4:	4623      	mov	r3, r4
 80117a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80117aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80117ae:	429f      	cmp	r7, r3
 80117b0:	d2f9      	bcs.n	80117a6 <__hexnan+0xaa>
 80117b2:	1b3b      	subs	r3, r7, r4
 80117b4:	f023 0303 	bic.w	r3, r3, #3
 80117b8:	3304      	adds	r3, #4
 80117ba:	3e03      	subs	r6, #3
 80117bc:	3401      	adds	r4, #1
 80117be:	42a6      	cmp	r6, r4
 80117c0:	bf38      	it	cc
 80117c2:	2304      	movcc	r3, #4
 80117c4:	4443      	add	r3, r8
 80117c6:	2200      	movs	r2, #0
 80117c8:	f843 2b04 	str.w	r2, [r3], #4
 80117cc:	429f      	cmp	r7, r3
 80117ce:	d2fb      	bcs.n	80117c8 <__hexnan+0xcc>
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	b91b      	cbnz	r3, 80117dc <__hexnan+0xe0>
 80117d4:	4547      	cmp	r7, r8
 80117d6:	d126      	bne.n	8011826 <__hexnan+0x12a>
 80117d8:	2301      	movs	r3, #1
 80117da:	603b      	str	r3, [r7, #0]
 80117dc:	2005      	movs	r0, #5
 80117de:	e025      	b.n	801182c <__hexnan+0x130>
 80117e0:	3501      	adds	r5, #1
 80117e2:	2d08      	cmp	r5, #8
 80117e4:	f10b 0b01 	add.w	fp, fp, #1
 80117e8:	dd06      	ble.n	80117f8 <__hexnan+0xfc>
 80117ea:	4544      	cmp	r4, r8
 80117ec:	d9c3      	bls.n	8011776 <__hexnan+0x7a>
 80117ee:	2300      	movs	r3, #0
 80117f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80117f4:	2501      	movs	r5, #1
 80117f6:	3c04      	subs	r4, #4
 80117f8:	6822      	ldr	r2, [r4, #0]
 80117fa:	f000 000f 	and.w	r0, r0, #15
 80117fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011802:	6020      	str	r0, [r4, #0]
 8011804:	e7b7      	b.n	8011776 <__hexnan+0x7a>
 8011806:	2508      	movs	r5, #8
 8011808:	e7b5      	b.n	8011776 <__hexnan+0x7a>
 801180a:	9b01      	ldr	r3, [sp, #4]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d0df      	beq.n	80117d0 <__hexnan+0xd4>
 8011810:	f1c3 0320 	rsb	r3, r3, #32
 8011814:	f04f 32ff 	mov.w	r2, #4294967295
 8011818:	40da      	lsrs	r2, r3
 801181a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801181e:	4013      	ands	r3, r2
 8011820:	f846 3c04 	str.w	r3, [r6, #-4]
 8011824:	e7d4      	b.n	80117d0 <__hexnan+0xd4>
 8011826:	3f04      	subs	r7, #4
 8011828:	e7d2      	b.n	80117d0 <__hexnan+0xd4>
 801182a:	2004      	movs	r0, #4
 801182c:	b007      	add	sp, #28
 801182e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011832 <__ascii_mbtowc>:
 8011832:	b082      	sub	sp, #8
 8011834:	b901      	cbnz	r1, 8011838 <__ascii_mbtowc+0x6>
 8011836:	a901      	add	r1, sp, #4
 8011838:	b142      	cbz	r2, 801184c <__ascii_mbtowc+0x1a>
 801183a:	b14b      	cbz	r3, 8011850 <__ascii_mbtowc+0x1e>
 801183c:	7813      	ldrb	r3, [r2, #0]
 801183e:	600b      	str	r3, [r1, #0]
 8011840:	7812      	ldrb	r2, [r2, #0]
 8011842:	1e10      	subs	r0, r2, #0
 8011844:	bf18      	it	ne
 8011846:	2001      	movne	r0, #1
 8011848:	b002      	add	sp, #8
 801184a:	4770      	bx	lr
 801184c:	4610      	mov	r0, r2
 801184e:	e7fb      	b.n	8011848 <__ascii_mbtowc+0x16>
 8011850:	f06f 0001 	mvn.w	r0, #1
 8011854:	e7f8      	b.n	8011848 <__ascii_mbtowc+0x16>

08011856 <_realloc_r>:
 8011856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801185a:	4680      	mov	r8, r0
 801185c:	4614      	mov	r4, r2
 801185e:	460e      	mov	r6, r1
 8011860:	b921      	cbnz	r1, 801186c <_realloc_r+0x16>
 8011862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011866:	4611      	mov	r1, r2
 8011868:	f7fb bd36 	b.w	800d2d8 <_malloc_r>
 801186c:	b92a      	cbnz	r2, 801187a <_realloc_r+0x24>
 801186e:	f7fd fce9 	bl	800f244 <_free_r>
 8011872:	4625      	mov	r5, r4
 8011874:	4628      	mov	r0, r5
 8011876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801187a:	f000 f8ad 	bl	80119d8 <_malloc_usable_size_r>
 801187e:	4284      	cmp	r4, r0
 8011880:	4607      	mov	r7, r0
 8011882:	d802      	bhi.n	801188a <_realloc_r+0x34>
 8011884:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011888:	d812      	bhi.n	80118b0 <_realloc_r+0x5a>
 801188a:	4621      	mov	r1, r4
 801188c:	4640      	mov	r0, r8
 801188e:	f7fb fd23 	bl	800d2d8 <_malloc_r>
 8011892:	4605      	mov	r5, r0
 8011894:	2800      	cmp	r0, #0
 8011896:	d0ed      	beq.n	8011874 <_realloc_r+0x1e>
 8011898:	42bc      	cmp	r4, r7
 801189a:	4622      	mov	r2, r4
 801189c:	4631      	mov	r1, r6
 801189e:	bf28      	it	cs
 80118a0:	463a      	movcs	r2, r7
 80118a2:	f7fc fe40 	bl	800e526 <memcpy>
 80118a6:	4631      	mov	r1, r6
 80118a8:	4640      	mov	r0, r8
 80118aa:	f7fd fccb 	bl	800f244 <_free_r>
 80118ae:	e7e1      	b.n	8011874 <_realloc_r+0x1e>
 80118b0:	4635      	mov	r5, r6
 80118b2:	e7df      	b.n	8011874 <_realloc_r+0x1e>

080118b4 <__ascii_wctomb>:
 80118b4:	b149      	cbz	r1, 80118ca <__ascii_wctomb+0x16>
 80118b6:	2aff      	cmp	r2, #255	; 0xff
 80118b8:	bf85      	ittet	hi
 80118ba:	238a      	movhi	r3, #138	; 0x8a
 80118bc:	6003      	strhi	r3, [r0, #0]
 80118be:	700a      	strbls	r2, [r1, #0]
 80118c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80118c4:	bf98      	it	ls
 80118c6:	2001      	movls	r0, #1
 80118c8:	4770      	bx	lr
 80118ca:	4608      	mov	r0, r1
 80118cc:	4770      	bx	lr

080118ce <__swhatbuf_r>:
 80118ce:	b570      	push	{r4, r5, r6, lr}
 80118d0:	460c      	mov	r4, r1
 80118d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118d6:	2900      	cmp	r1, #0
 80118d8:	b096      	sub	sp, #88	; 0x58
 80118da:	4615      	mov	r5, r2
 80118dc:	461e      	mov	r6, r3
 80118de:	da0d      	bge.n	80118fc <__swhatbuf_r+0x2e>
 80118e0:	89a3      	ldrh	r3, [r4, #12]
 80118e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80118e6:	f04f 0100 	mov.w	r1, #0
 80118ea:	bf0c      	ite	eq
 80118ec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80118f0:	2340      	movne	r3, #64	; 0x40
 80118f2:	2000      	movs	r0, #0
 80118f4:	6031      	str	r1, [r6, #0]
 80118f6:	602b      	str	r3, [r5, #0]
 80118f8:	b016      	add	sp, #88	; 0x58
 80118fa:	bd70      	pop	{r4, r5, r6, pc}
 80118fc:	466a      	mov	r2, sp
 80118fe:	f000 f849 	bl	8011994 <_fstat_r>
 8011902:	2800      	cmp	r0, #0
 8011904:	dbec      	blt.n	80118e0 <__swhatbuf_r+0x12>
 8011906:	9901      	ldr	r1, [sp, #4]
 8011908:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801190c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011910:	4259      	negs	r1, r3
 8011912:	4159      	adcs	r1, r3
 8011914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011918:	e7eb      	b.n	80118f2 <__swhatbuf_r+0x24>

0801191a <__smakebuf_r>:
 801191a:	898b      	ldrh	r3, [r1, #12]
 801191c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801191e:	079d      	lsls	r5, r3, #30
 8011920:	4606      	mov	r6, r0
 8011922:	460c      	mov	r4, r1
 8011924:	d507      	bpl.n	8011936 <__smakebuf_r+0x1c>
 8011926:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801192a:	6023      	str	r3, [r4, #0]
 801192c:	6123      	str	r3, [r4, #16]
 801192e:	2301      	movs	r3, #1
 8011930:	6163      	str	r3, [r4, #20]
 8011932:	b002      	add	sp, #8
 8011934:	bd70      	pop	{r4, r5, r6, pc}
 8011936:	ab01      	add	r3, sp, #4
 8011938:	466a      	mov	r2, sp
 801193a:	f7ff ffc8 	bl	80118ce <__swhatbuf_r>
 801193e:	9900      	ldr	r1, [sp, #0]
 8011940:	4605      	mov	r5, r0
 8011942:	4630      	mov	r0, r6
 8011944:	f7fb fcc8 	bl	800d2d8 <_malloc_r>
 8011948:	b948      	cbnz	r0, 801195e <__smakebuf_r+0x44>
 801194a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801194e:	059a      	lsls	r2, r3, #22
 8011950:	d4ef      	bmi.n	8011932 <__smakebuf_r+0x18>
 8011952:	f023 0303 	bic.w	r3, r3, #3
 8011956:	f043 0302 	orr.w	r3, r3, #2
 801195a:	81a3      	strh	r3, [r4, #12]
 801195c:	e7e3      	b.n	8011926 <__smakebuf_r+0xc>
 801195e:	89a3      	ldrh	r3, [r4, #12]
 8011960:	6020      	str	r0, [r4, #0]
 8011962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011966:	81a3      	strh	r3, [r4, #12]
 8011968:	9b00      	ldr	r3, [sp, #0]
 801196a:	6163      	str	r3, [r4, #20]
 801196c:	9b01      	ldr	r3, [sp, #4]
 801196e:	6120      	str	r0, [r4, #16]
 8011970:	b15b      	cbz	r3, 801198a <__smakebuf_r+0x70>
 8011972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011976:	4630      	mov	r0, r6
 8011978:	f000 f81e 	bl	80119b8 <_isatty_r>
 801197c:	b128      	cbz	r0, 801198a <__smakebuf_r+0x70>
 801197e:	89a3      	ldrh	r3, [r4, #12]
 8011980:	f023 0303 	bic.w	r3, r3, #3
 8011984:	f043 0301 	orr.w	r3, r3, #1
 8011988:	81a3      	strh	r3, [r4, #12]
 801198a:	89a3      	ldrh	r3, [r4, #12]
 801198c:	431d      	orrs	r5, r3
 801198e:	81a5      	strh	r5, [r4, #12]
 8011990:	e7cf      	b.n	8011932 <__smakebuf_r+0x18>
	...

08011994 <_fstat_r>:
 8011994:	b538      	push	{r3, r4, r5, lr}
 8011996:	4d07      	ldr	r5, [pc, #28]	; (80119b4 <_fstat_r+0x20>)
 8011998:	2300      	movs	r3, #0
 801199a:	4604      	mov	r4, r0
 801199c:	4608      	mov	r0, r1
 801199e:	4611      	mov	r1, r2
 80119a0:	602b      	str	r3, [r5, #0]
 80119a2:	f7f3 f808 	bl	80049b6 <_fstat>
 80119a6:	1c43      	adds	r3, r0, #1
 80119a8:	d102      	bne.n	80119b0 <_fstat_r+0x1c>
 80119aa:	682b      	ldr	r3, [r5, #0]
 80119ac:	b103      	cbz	r3, 80119b0 <_fstat_r+0x1c>
 80119ae:	6023      	str	r3, [r4, #0]
 80119b0:	bd38      	pop	{r3, r4, r5, pc}
 80119b2:	bf00      	nop
 80119b4:	200005bc 	.word	0x200005bc

080119b8 <_isatty_r>:
 80119b8:	b538      	push	{r3, r4, r5, lr}
 80119ba:	4d06      	ldr	r5, [pc, #24]	; (80119d4 <_isatty_r+0x1c>)
 80119bc:	2300      	movs	r3, #0
 80119be:	4604      	mov	r4, r0
 80119c0:	4608      	mov	r0, r1
 80119c2:	602b      	str	r3, [r5, #0]
 80119c4:	f7f3 f807 	bl	80049d6 <_isatty>
 80119c8:	1c43      	adds	r3, r0, #1
 80119ca:	d102      	bne.n	80119d2 <_isatty_r+0x1a>
 80119cc:	682b      	ldr	r3, [r5, #0]
 80119ce:	b103      	cbz	r3, 80119d2 <_isatty_r+0x1a>
 80119d0:	6023      	str	r3, [r4, #0]
 80119d2:	bd38      	pop	{r3, r4, r5, pc}
 80119d4:	200005bc 	.word	0x200005bc

080119d8 <_malloc_usable_size_r>:
 80119d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119dc:	1f18      	subs	r0, r3, #4
 80119de:	2b00      	cmp	r3, #0
 80119e0:	bfbc      	itt	lt
 80119e2:	580b      	ldrlt	r3, [r1, r0]
 80119e4:	18c0      	addlt	r0, r0, r3
 80119e6:	4770      	bx	lr

080119e8 <_init>:
 80119e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ea:	bf00      	nop
 80119ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119ee:	bc08      	pop	{r3}
 80119f0:	469e      	mov	lr, r3
 80119f2:	4770      	bx	lr

080119f4 <_fini>:
 80119f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119f6:	bf00      	nop
 80119f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119fa:	bc08      	pop	{r3}
 80119fc:	469e      	mov	lr, r3
 80119fe:	4770      	bx	lr
