
STM32G4_GY91_Cyphal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f0c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000154c  080120f0  080120f0  000130f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801363c  0801363c  000151d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801363c  0801363c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013644  08013644  000151d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08013644  08013644  00014644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08013654  08013654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08013664  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  200001d8  08013838  000151d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  08013838  00015714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000151d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ae2c  00000000  00000000  00015204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007866  00000000  00000000  00050030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e98  00000000  00000000  00057898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017bc  00000000  00000000  00059730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f9c5  00000000  00000000  0005aeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b1e3  00000000  00000000  0008a8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113765  00000000  00000000  000b5a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001c91f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000978c  00000000  00000000  001c9280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001d2a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000037  00000000  00000000  001d2a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080120d4 	.word	0x080120d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	080120d4 	.word	0x080120d4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	08012b1c 	.word	0x08012b1c

08001054 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	08012b1c 	.word	0x08012b1c

08001074 <_ZN15Adafruit_SensorD0Ev>:
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe9 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001082:	2108      	movs	r1, #8
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f00c fc6a 	bl	800d95e <_ZdlPvj>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_ZN3imu10QuaternionC1Edddd>:
class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}

    Quaternion(double w, double x, double y, double z):
 80010ac:	b480      	push	{r7}
 80010ae:	b08b      	sub	sp, #44	@ 0x2c
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6278      	str	r0, [r7, #36]	@ 0x24
 80010b4:	ed87 0b06 	vstr	d0, [r7, #24]
 80010b8:	ed87 1b04 	vstr	d1, [r7, #16]
 80010bc:	ed87 2b02 	vstr	d2, [r7, #8]
 80010c0:	ed87 3b00 	vstr	d3, [r7]
        _w(w), _x(x), _y(y), _z(z) {}
 80010c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010ca:	e9c1 2300 	strd	r2, r3, [r1]
 80010ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80010d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010de:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80010e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	4618      	mov	r0, r3
 80010f0:	372c      	adds	r7, #44	@ 0x2c
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	4613      	mov	r3, r2
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff91 	bl	8001034 <_ZN15Adafruit_SensorC1Ev>
 8001112:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <_ZN15Adafruit_BNO055C1Elh+0x34>)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	609a      	str	r2, [r3, #8]
  _address = address;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	715a      	strb	r2, [r3, #5]
}
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	08012b00 	.word	0x08012b00

08001134 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
/*!
    @brief  Sets up the HW
*/
/**************************************************************************/
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
#ifdef ESP8266
  Wire.setClockStretchLimit(1000); // Allow for 1000us of clock stretching
#endif

  /* Make sure we have the right device */
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
 8001140:	2100      	movs	r1, #0
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fb82 	bl	800184c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 8001148:	4603      	mov	r3, r0
 800114a:	73fb      	strb	r3, [r7, #15]
  if(id != BNO055_ID)
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001150:	d00e      	beq.n	8001170 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3c>
  {
    delay(1000); // hold on for boot
 8001152:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001156:	f001 f9be 	bl	80024d6 <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
 800115a:	2100      	movs	r1, #0
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 fb75 	bl	800184c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]
    if(id != BNO055_ID) {
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	2ba0      	cmp	r3, #160	@ 0xa0
 800116a:	d001      	beq.n	8001170 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3c>
      return false;  // still not? ok bail
 800116c:	2300      	movs	r3, #0
 800116e:	e04b      	b.n	8001208 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd4>
    }
  }

  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f84c 	bl	8001210 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
 8001178:	2220      	movs	r2, #32
 800117a:	213f      	movs	r1, #63	@ 0x3f
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 fb52 	bl	8001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(1000);
 8001182:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001186:	f001 f9a6 	bl	80024d6 <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
 800118a:	e002      	b.n	8001192 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5e>
  {
    delay(10);
 800118c:	200a      	movs	r0, #10
 800118e:	f001 f9a2 	bl	80024d6 <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
 8001192:	2100      	movs	r1, #0
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 fb59 	bl	800184c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 800119a:	4603      	mov	r3, r0
 800119c:	2ba0      	cmp	r3, #160	@ 0xa0
 800119e:	bf14      	ite	ne
 80011a0:	2301      	movne	r3, #1
 80011a2:	2300      	moveq	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
  }
  delay(50);
 80011aa:	2032      	movs	r0, #50	@ 0x32
 80011ac:	f001 f993 	bl	80024d6 <delay>

  /* Set to normal power mode */
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
 80011b0:	2200      	movs	r2, #0
 80011b2:	213e      	movs	r1, #62	@ 0x3e
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 fb36 	bl	8001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(50);
 80011ba:	2032      	movs	r0, #50	@ 0x32
 80011bc:	f001 f98b 	bl	80024d6 <delay>

  write8(BNO055_PAGE_ID_ADDR, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2107      	movs	r1, #7
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 fb2e 	bl	8001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(50);
 80011ca:	2032      	movs	r0, #50	@ 0x32
 80011cc:	f001 f983 	bl	80024d6 <delay>

  /* Set the output units */
  
  uint8_t unitsel = (0 << 7) | // Orientation
 80011d0:	2306      	movs	r3, #6
 80011d2:	73bb      	strb	r3, [r7, #14]
                    (0 << 4) | // Temperature = Celsius
                    (1 << 2) | // Euler 
                    (1 << 1) | // Gyro = Rads
                    (0 << 0);  // Accelerometer = m/s^2
  write8(BNO055_UNIT_SEL_ADDR, unitsel);
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	461a      	mov	r2, r3
 80011d8:	213b      	movs	r1, #59	@ 0x3b
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fb23 	bl	8001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(50);
 80011e0:	2032      	movs	r0, #50	@ 0x32
 80011e2:	f001 f978 	bl	80024d6 <delay>
  delay(10);
  write8(BNO055_AXIS_MAP_SIGN_ADDR, REMAP_SIGN_P2); // P0-P7, Default is P1
  delay(10);
  */

  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	213f      	movs	r1, #63	@ 0x3f
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fb1b 	bl	8001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(50);
 80011f0:	2032      	movs	r0, #50	@ 0x32
 80011f2:	f001 f970 	bl	80024d6 <delay>
  /* Set the requested operating mode (see section 3.3) */
  setMode(mode);
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f808 	bl	8001210 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(50);
 8001200:	2032      	movs	r0, #50	@ 0x32
 8001202:	f001 f968 	bl	80024d6 <delay>

  return true;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
/*!
    @brief  Puts the chip in the specified operating mode
*/
/**************************************************************************/
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
  _mode = mode;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	78fa      	ldrb	r2, [r7, #3]
 8001220:	731a      	strb	r2, [r3, #12]
  write8(BNO055_OPR_MODE_ADDR, _mode);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7b1b      	ldrb	r3, [r3, #12]
 8001226:	461a      	mov	r2, r3
 8001228:	213d      	movs	r1, #61	@ 0x3d
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fafb 	bl	8001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
 8001230:	201e      	movs	r0, #30
 8001232:	f001 f950 	bl	80024d6 <delay>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	4613      	mov	r3, r2
 800124c:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 fb52 	bl	80018f8 <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2206      	movs	r2, #6
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f00d fc52 	bl	800eb06 <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	83fb      	strh	r3, [r7, #30]
 8001266:	8bfb      	ldrh	r3, [r7, #30]
 8001268:	83bb      	strh	r3, [r7, #28]
 800126a:	8bbb      	ldrh	r3, [r7, #28]
 800126c:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 800126e:	f107 0214 	add.w	r2, r7, #20
 8001272:	79f9      	ldrb	r1, [r7, #7]
 8001274:	2306      	movs	r3, #6
 8001276:	68b8      	ldr	r0, [r7, #8]
 8001278:	f000 fafb 	bl	8001872 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 800127c:	7d3b      	ldrb	r3, [r7, #20]
 800127e:	b21a      	sxth	r2, r3
 8001280:	7d7b      	ldrb	r3, [r7, #21]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800128a:	7dbb      	ldrb	r3, [r7, #22]
 800128c:	b21a      	sxth	r2, r3
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b21b      	sxth	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 8001298:	7e3b      	ldrb	r3, [r7, #24]
 800129a:	b21a      	sxth	r2, r3
 800129c:	7e7b      	ldrb	r3, [r7, #25]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	3b08      	subs	r3, #8
 80012aa:	2b26      	cmp	r3, #38	@ 0x26
 80012ac:	f200 8152 	bhi.w	8001554 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 80012b0:	a201      	add	r2, pc, #4	@ (adr r2, 80012b8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 80012b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b6:	bf00      	nop
 80012b8:	080014d5 	.word	0x080014d5
 80012bc:	08001555 	.word	0x08001555
 80012c0:	08001555 	.word	0x08001555
 80012c4:	08001555 	.word	0x08001555
 80012c8:	08001555 	.word	0x08001555
 80012cc:	08001555 	.word	0x08001555
 80012d0:	08001355 	.word	0x08001355
 80012d4:	08001555 	.word	0x08001555
 80012d8:	08001555 	.word	0x08001555
 80012dc:	08001555 	.word	0x08001555
 80012e0:	08001555 	.word	0x08001555
 80012e4:	08001555 	.word	0x08001555
 80012e8:	080013d5 	.word	0x080013d5
 80012ec:	08001555 	.word	0x08001555
 80012f0:	08001555 	.word	0x08001555
 80012f4:	08001555 	.word	0x08001555
 80012f8:	08001555 	.word	0x08001555
 80012fc:	08001555 	.word	0x08001555
 8001300:	08001455 	.word	0x08001455
 8001304:	08001555 	.word	0x08001555
 8001308:	08001555 	.word	0x08001555
 800130c:	08001555 	.word	0x08001555
 8001310:	08001555 	.word	0x08001555
 8001314:	08001555 	.word	0x08001555
 8001318:	08001555 	.word	0x08001555
 800131c:	08001555 	.word	0x08001555
 8001320:	08001555 	.word	0x08001555
 8001324:	08001555 	.word	0x08001555
 8001328:	08001555 	.word	0x08001555
 800132c:	08001555 	.word	0x08001555
 8001330:	08001555 	.word	0x08001555
 8001334:	08001555 	.word	0x08001555
 8001338:	080014d5 	.word	0x080014d5
 800133c:	08001555 	.word	0x08001555
 8001340:	08001555 	.word	0x08001555
 8001344:	08001555 	.word	0x08001555
 8001348:	08001555 	.word	0x08001555
 800134c:	08001555 	.word	0x08001555
 8001350:	080014d5 	.word	0x080014d5
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 8001354:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f90b 	bl	8000574 <__aeabi_i2d>
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b7f      	ldr	r3, [pc, #508]	@ (8001560 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001364:	f7ff fa9a 	bl	800089c <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4614      	mov	r4, r2
 800136e:	461d      	mov	r5, r3
 8001370:	2100      	movs	r1, #0
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f000 facf 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 8001378:	4603      	mov	r3, r0
 800137a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 800137e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8f6 	bl	8000574 <__aeabi_i2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b74      	ldr	r3, [pc, #464]	@ (8001560 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800138e:	f7ff fa85 	bl	800089c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4614      	mov	r4, r2
 8001398:	461d      	mov	r5, r3
 800139a:	2101      	movs	r1, #1
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f000 faba 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 80013a2:	4603      	mov	r3, r0
 80013a4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 80013a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8e1 	bl	8000574 <__aeabi_i2d>
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001560 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 80013b8:	f7ff fa70 	bl	800089c <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4614      	mov	r4, r2
 80013c2:	461d      	mov	r5, r3
 80013c4:	2102      	movs	r1, #2
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 faa5 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 80013cc:	4603      	mov	r3, r0
 80013ce:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80013d2:	e0bf      	b.n	8001554 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 80013d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8cb 	bl	8000574 <__aeabi_i2d>
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b60      	ldr	r3, [pc, #384]	@ (8001564 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80013e4:	f7ff fa5a 	bl	800089c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4614      	mov	r4, r2
 80013ee:	461d      	mov	r5, r3
 80013f0:	2100      	movs	r1, #0
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f000 fa8f 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 80013f8:	4603      	mov	r3, r0
 80013fa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80013fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f8b6 	bl	8000574 <__aeabi_i2d>
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b55      	ldr	r3, [pc, #340]	@ (8001564 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800140e:	f7ff fa45 	bl	800089c <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	461d      	mov	r5, r3
 800141a:	2101      	movs	r1, #1
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 fa7a 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 8001422:	4603      	mov	r3, r0
 8001424:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 8001428:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f8a1 	bl	8000574 <__aeabi_i2d>
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b4b      	ldr	r3, [pc, #300]	@ (8001564 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001438:	f7ff fa30 	bl	800089c <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4614      	mov	r4, r2
 8001442:	461d      	mov	r5, r3
 8001444:	2102      	movs	r1, #2
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fa65 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 800144c:	4603      	mov	r3, r0
 800144e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001452:	e07f      	b.n	8001554 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001454:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f88b 	bl	8000574 <__aeabi_i2d>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	4b40      	ldr	r3, [pc, #256]	@ (8001564 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001464:	f7ff fa1a 	bl	800089c <__aeabi_ddiv>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4614      	mov	r4, r2
 800146e:	461d      	mov	r5, r3
 8001470:	2100      	movs	r1, #0
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 fa4f 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 8001478:	4603      	mov	r3, r0
 800147a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 800147e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f876 	bl	8000574 <__aeabi_i2d>
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	4b35      	ldr	r3, [pc, #212]	@ (8001564 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800148e:	f7ff fa05 	bl	800089c <__aeabi_ddiv>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4614      	mov	r4, r2
 8001498:	461d      	mov	r5, r3
 800149a:	2101      	movs	r1, #1
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f000 fa3a 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 80014a2:	4603      	mov	r3, r0
 80014a4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80014a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f861 	bl	8000574 <__aeabi_i2d>
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001564 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80014b8:	f7ff f9f0 	bl	800089c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4614      	mov	r4, r2
 80014c2:	461d      	mov	r5, r3
 80014c4:	2102      	movs	r1, #2
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 fa25 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 80014cc:	4603      	mov	r3, r0
 80014ce:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80014d2:	e03f      	b.n	8001554 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 80014d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f84b 	bl	8000574 <__aeabi_i2d>
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80014e4:	f7ff f9da 	bl	800089c <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4614      	mov	r4, r2
 80014ee:	461d      	mov	r5, r3
 80014f0:	2100      	movs	r1, #0
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 fa0f 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 80014f8:	4603      	mov	r3, r0
 80014fa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80014fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f836 	bl	8000574 <__aeabi_i2d>
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 800150e:	f7ff f9c5 	bl	800089c <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4614      	mov	r4, r2
 8001518:	461d      	mov	r5, r3
 800151a:	2101      	movs	r1, #1
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 f9fa 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 8001522:	4603      	mov	r3, r0
 8001524:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 8001528:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f821 	bl	8000574 <__aeabi_i2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001538:	f7ff f9b0 	bl	800089c <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4614      	mov	r4, r2
 8001542:	461d      	mov	r5, r3
 8001544:	2102      	movs	r1, #2
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f9e5 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 800154c:	4603      	mov	r3, r0
 800154e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001552:	bf00      	nop
  }

  return xyz;
 8001554:	bf00      	nop
}
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	bf00      	nop
 8001560:	40300000 	.word	0x40300000
 8001564:	408c2000 	.word	0x408c2000
 8001568:	40590000 	.word	0x40590000

0800156c <_ZN15Adafruit_BNO0557getQuatEv>:
/*!
    @brief  Gets a quaternion reading from the specified source
*/
/**************************************************************************/
imu::Quaternion Adafruit_BNO055::getQuat(void)
{
 800156c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001570:	ed2d 8b06 	vpush	{d8-d10}
 8001574:	b0a0      	sub	sp, #128	@ 0x80
 8001576:	af00      	add	r7, sp, #0
 8001578:	6278      	str	r0, [r7, #36]	@ 0x24
  uint8_t buffer[8];
  memset (buffer, 0, 8);
 800157a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800157e:	2208      	movs	r2, #8
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f00d fabf 	bl	800eb06 <memset>

  int16_t x, y, z, w;
  x = y = z = w = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 800158e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001592:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 8001596:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800159a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 800159e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80015a2:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

  /* Read quat data (8 bytes) */
  readLen(BNO055_QUATERNION_DATA_W_LSB_ADDR, buffer, 8);
 80015a6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80015aa:	2308      	movs	r3, #8
 80015ac:	2120      	movs	r1, #32
 80015ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015b0:	f000 f95f 	bl	8001872 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  w = (((uint16_t)buffer[1]) << 8) | ((uint16_t)buffer[0]);
 80015b4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
  x = (((uint16_t)buffer[3]) << 8) | ((uint16_t)buffer[2]);
 80015c8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
 80015dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
 80015f0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

  /* Assign to Quaternion */
  /* See http://ae-bst.resource.bosch.com/media/products/dokumente/bno055/BST_BNO055_DS000_12~1.pdf
     3.6.5.5 Orientation (Quaternion)  */
  const double scale = (1.0 / (1<<14));
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	4b3f      	ldr	r3, [pc, #252]	@ (8001708 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 800160a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
 800160e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ffae 	bl	8000574 <__aeabi_i2d>
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4b3a      	ldr	r3, [pc, #232]	@ (8001708 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 800161e:	f7ff f813 	bl	8000648 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	ec43 2b18 	vmov	d8, r2, r3
 800162a:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ffa0 	bl	8000574 <__aeabi_i2d>
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	4b33      	ldr	r3, [pc, #204]	@ (8001708 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 800163a:	f7ff f805 	bl	8000648 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	ec43 2b19 	vmov	d9, r2, r3
 8001646:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff92 	bl	8000574 <__aeabi_i2d>
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b2c      	ldr	r3, [pc, #176]	@ (8001708 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 8001656:	f7fe fff7 	bl	8000648 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	ec43 2b1a 	vmov	d10, r2, r3
 8001662:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff84 	bl	8000574 <__aeabi_i2d>
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b25      	ldr	r3, [pc, #148]	@ (8001708 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 8001672:	f7fe ffe9 	bl	8000648 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	ec43 2b17 	vmov	d7, r2, r3
 800167e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001682:	eeb0 3a47 	vmov.f32	s6, s14
 8001686:	eef0 3a67 	vmov.f32	s7, s15
 800168a:	eeb0 2a4a 	vmov.f32	s4, s20
 800168e:	eef0 2a6a 	vmov.f32	s5, s21
 8001692:	eeb0 1a49 	vmov.f32	s2, s18
 8001696:	eef0 1a69 	vmov.f32	s3, s19
 800169a:	eeb0 0a48 	vmov.f32	s0, s16
 800169e:	eef0 0a68 	vmov.f32	s1, s17
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd02 	bl	80010ac <_ZN3imu10QuaternionC1Edddd>
  return quat;
 80016a8:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80016ac:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 80016b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016bc:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80016c0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80016c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80016c8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80016cc:	ec49 8b14 	vmov	d4, r8, r9
 80016d0:	ec45 4b15 	vmov	d5, r4, r5
 80016d4:	ec41 0b16 	vmov	d6, r0, r1
 80016d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80016dc:	eeb0 0a44 	vmov.f32	s0, s8
 80016e0:	eef0 0a64 	vmov.f32	s1, s9
 80016e4:	eeb0 1a45 	vmov.f32	s2, s10
 80016e8:	eef0 1a65 	vmov.f32	s3, s11
 80016ec:	eeb0 2a46 	vmov.f32	s4, s12
 80016f0:	eef0 2a66 	vmov.f32	s5, s13
 80016f4:	eeb0 3a47 	vmov.f32	s6, s14
 80016f8:	eef0 3a67 	vmov.f32	s7, s15
 80016fc:	3780      	adds	r7, #128	@ 0x80
 80016fe:	46bd      	mov	sp, r7
 8001700:	ecbd 8b06 	vpop	{d8-d10}
 8001704:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001708:	3f100000 	.word	0x3f100000

0800170c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8001716:	2228      	movs	r2, #40	@ 0x28
 8001718:	2100      	movs	r1, #0
 800171a:	6838      	ldr	r0, [r7, #0]
 800171c:	f00d f9f3 	bl	800eb06 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	220b      	movs	r2, #11
 8001724:	4911      	ldr	r1, [pc, #68]	@ (800176c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 8001726:	4618      	mov	r0, r3
 8001728:	f00d f9f5 	bl	800eb16 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2201      	movs	r2, #1
 8001736:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2203      	movs	r2, #3
 8001744:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2200      	movs	r2, #0
 800174a:	625a      	str	r2, [r3, #36]	@ 0x24
  sensor->max_value   = 0.0F;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001760:	621a      	str	r2, [r3, #32]
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	080120f0 	.word	0x080120f0
 8001770:	3c23d70a 	.word	0x3c23d70a

08001774 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 800177e:	2224      	movs	r2, #36	@ 0x24
 8001780:	2100      	movs	r1, #0
 8001782:	6838      	ldr	r0, [r7, #0]
 8001784:	f00d f9bf 	bl	800eb06 <memset>

  event->version   = sizeof(sensors_event_t);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2224      	movs	r2, #36	@ 0x24
 800178c:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2203      	movs	r2, #3
 800179a:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 800179c:	f004 f9a0 	bl	8005ae0 <HAL_GetTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	221a      	movs	r2, #26
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fd45 	bl	8001240 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f879 	bl	80018b2 <_ZN3imu6VectorILh3EE1xEv>
 80017c0:	4603      	mov	r3, r0
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff fa35 	bl	8000c38 <__aeabi_d2f>
 80017ce:	4602      	mov	r2, r0
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 f875 	bl	80018c8 <_ZN3imu6VectorILh3EE1yEv>
 80017de:	4603      	mov	r3, r0
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff fa26 	bl	8000c38 <__aeabi_d2f>
 80017ec:	4602      	mov	r2, r0
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f872 	bl	80018e0 <_ZN3imu6VectorILh3EE1zEv>
 80017fc:	4603      	mov	r3, r0
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff fa17 	bl	8000c38 <__aeabi_d2f>
 800180a:	4602      	mov	r2, r0
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	61da      	str	r2, [r3, #28]

  return true;
 8001810:	2401      	movs	r4, #1
}
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f840 	bl	800189c <_ZN3imu6VectorILh3EED1Ev>
  return true;
 800181c:	4623      	mov	r3, r4
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	@ 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}

08001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
/*!
    @brief  Writes an 8 bit value over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	70fb      	strb	r3, [r7, #3]
 8001832:	4613      	mov	r3, r2
 8001834:	70bb      	strb	r3, [r7, #2]
  I2C_byte_transmit(reg, value);
 8001836:	78ba      	ldrb	r2, [r7, #2]
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fa31 	bl	8001ca4 <I2C_byte_transmit>
  /* ToDo: Check for error! */
  return true;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg )
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	70fb      	strb	r3, [r7, #3]
  byte value = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]
  
  value = I2C_byte_receive((uint8_t)reg);
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f9f6 	bl	8001c50 <I2C_byte_receive>
 8001864:	4603      	mov	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]

  return value;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	461a      	mov	r2, r3
 800187e:	460b      	mov	r3, r1
 8001880:	72fb      	strb	r3, [r7, #11]
 8001882:	4613      	mov	r3, r2
 8001884:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 8001886:	7aba      	ldrb	r2, [r7, #10]
 8001888:	7afb      	ldrb	r3, [r7, #11]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fa2b 	bl	8001ce8 <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
    {
    }
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3308      	adds	r3, #8
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3310      	adds	r3, #16
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2218      	movs	r2, #24
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f00d f8fd 	bl	800eb06 <memset>
    }
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4413      	add	r3, r2
    }
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <_ZN15Adafruit_BNO055D1Ev+0x20>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fb85 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	08012b00 	.word	0x08012b00

08001958 <_ZN15Adafruit_BNO055D0Ev>:
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ffe7 	bl	8001934 <_ZN15Adafruit_BNO055D1Ev>
 8001966:	2110      	movs	r1, #16
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f00b fff8 	bl	800d95e <_ZdlPvj>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_ZN3imu10QuaternionC1Ev>:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <_ZN3imu10QuaternionC1Ev+0x4c>)
 8001988:	e9c1 2300 	strd	r2, r3, [r1]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	3ff00000 	.word	0x3ff00000

080019c8 <_ZN3imu10Quaternion1wEv>:

    Quaternion(double w, Vector<3> vec):
        _w(w), _x(vec.x()), _y(vec.y()), _z(vec.z()) {}

    double& w()
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    {
        return _w;
 80019d0:	687b      	ldr	r3, [r7, #4]
    }
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_ZN3imu10Quaternion1xEv>:
    double& x()
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
    {
        return _x;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3308      	adds	r3, #8
    }
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_ZN3imu10Quaternion1yEv>:
    double& y()
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
    {
        return _y;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3310      	adds	r3, #16
    }
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_ZN3imu10Quaternion1zEv>:
    double& z()
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
    {
        return _z;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3318      	adds	r3, #24
    }
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <imu_get_quat>:

imu::Quaternion quat;
imu::Vector<3> vec;

void imu_get_quat(vec_4ax *vector)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if( BNO_conf == 1)
 8001a30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <imu_get_quat+0xbc>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d150      	bne.n	8001ada <imu_get_quat+0xb2>
  {
    quat = bno.getQuat();
 8001a38:	482b      	ldr	r0, [pc, #172]	@ (8001ae8 <imu_get_quat+0xc0>)
 8001a3a:	f7ff fd97 	bl	800156c <_ZN15Adafruit_BNO0557getQuatEv>
 8001a3e:	eeb0 4a40 	vmov.f32	s8, s0
 8001a42:	eef0 4a60 	vmov.f32	s9, s1
 8001a46:	eeb0 5a41 	vmov.f32	s10, s2
 8001a4a:	eef0 5a61 	vmov.f32	s11, s3
 8001a4e:	eeb0 6a42 	vmov.f32	s12, s4
 8001a52:	eef0 6a62 	vmov.f32	s13, s5
 8001a56:	eeb0 7a43 	vmov.f32	s14, s6
 8001a5a:	eef0 7a63 	vmov.f32	s15, s7
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <imu_get_quat+0xc4>)
 8001a60:	ed83 4b00 	vstr	d4, [r3]
 8001a64:	ed83 5b02 	vstr	d5, [r3, #8]
 8001a68:	ed83 6b04 	vstr	d6, [r3, #16]
 8001a6c:	ed83 7b06 	vstr	d7, [r3, #24]
    vector->x = quat.x();
 8001a70:	481e      	ldr	r0, [pc, #120]	@ (8001aec <imu_get_quat+0xc4>)
 8001a72:	f7ff ffb4 	bl	80019de <_ZN3imu10Quaternion1xEv>
 8001a76:	4603      	mov	r3, r0
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f8da 	bl	8000c38 <__aeabi_d2f>
 8001a84:	4602      	mov	r2, r0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	601a      	str	r2, [r3, #0]
    vector->y = quat.y();
 8001a8a:	4818      	ldr	r0, [pc, #96]	@ (8001aec <imu_get_quat+0xc4>)
 8001a8c:	f7ff ffb3 	bl	80019f6 <_ZN3imu10Quaternion1yEv>
 8001a90:	4603      	mov	r3, r0
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7ff f8cd 	bl	8000c38 <__aeabi_d2f>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	605a      	str	r2, [r3, #4]
    vector->z = quat.z();
 8001aa4:	4811      	ldr	r0, [pc, #68]	@ (8001aec <imu_get_quat+0xc4>)
 8001aa6:	f7ff ffb2 	bl	8001a0e <_ZN3imu10Quaternion1zEv>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff f8c0 	bl	8000c38 <__aeabi_d2f>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	609a      	str	r2, [r3, #8]
    vector->w = quat.w();
 8001abe:	480b      	ldr	r0, [pc, #44]	@ (8001aec <imu_get_quat+0xc4>)
 8001ac0:	f7ff ff82 	bl	80019c8 <_ZN3imu10Quaternion1wEv>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff f8b3 	bl	8000c38 <__aeabi_d2f>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	60da      	str	r2, [r3, #12]
  }
  return ;
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
}
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000204 	.word	0x20000204
 8001ae8:	200001f4 	.word	0x200001f4
 8001aec:	20000208 	.word	0x20000208

08001af0 <imu_get_linear>:

void imu_get_linear(vec_4ax *vector)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if( BNO_conf == 1)
 8001af8:	4b20      	ldr	r3, [pc, #128]	@ (8001b7c <imu_get_linear+0x8c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d139      	bne.n	8001b74 <imu_get_linear+0x84>
  {
    vec = bno.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	2228      	movs	r2, #40	@ 0x28
 8001b06:	491e      	ldr	r1, [pc, #120]	@ (8001b80 <imu_get_linear+0x90>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fb99 	bl	8001240 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	4619      	mov	r1, r3
 8001b14:	481b      	ldr	r0, [pc, #108]	@ (8001b84 <imu_get_linear+0x94>)
 8001b16:	f000 f913 	bl	8001d40 <_ZN3imu6VectorILh3EEaSERKS1_>
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff febc 	bl	800189c <_ZN3imu6VectorILh3EED1Ev>
    vector->x = vec.x();
 8001b24:	4817      	ldr	r0, [pc, #92]	@ (8001b84 <imu_get_linear+0x94>)
 8001b26:	f7ff fec4 	bl	80018b2 <_ZN3imu6VectorILh3EE1xEv>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7ff f880 	bl	8000c38 <__aeabi_d2f>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	601a      	str	r2, [r3, #0]
    vector->y = vec.y();
 8001b3e:	4811      	ldr	r0, [pc, #68]	@ (8001b84 <imu_get_linear+0x94>)
 8001b40:	f7ff fec2 	bl	80018c8 <_ZN3imu6VectorILh3EE1yEv>
 8001b44:	4603      	mov	r3, r0
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f7ff f873 	bl	8000c38 <__aeabi_d2f>
 8001b52:	4602      	mov	r2, r0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	605a      	str	r2, [r3, #4]
    vector->z = vec.z();
 8001b58:	480a      	ldr	r0, [pc, #40]	@ (8001b84 <imu_get_linear+0x94>)
 8001b5a:	f7ff fec1 	bl	80018e0 <_ZN3imu6VectorILh3EE1zEv>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7ff f866 	bl	8000c38 <__aeabi_d2f>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	609a      	str	r2, [r3, #8]
  }
  return ;
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
}
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000204 	.word	0x20000204
 8001b80:	200001f4 	.word	0x200001f4
 8001b84:	20000228 	.word	0x20000228

08001b88 <imu_get_gyro>:

void imu_get_gyro(vec_4ax *vector)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if( BNO_conf == 1)
 8001b90:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <imu_get_gyro+0x8c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d139      	bne.n	8001c0c <imu_get_gyro+0x84>
  {
    vec = bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
 8001b98:	f107 0308 	add.w	r3, r7, #8
 8001b9c:	2214      	movs	r2, #20
 8001b9e:	491e      	ldr	r1, [pc, #120]	@ (8001c18 <imu_get_gyro+0x90>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fb4d 	bl	8001240 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	4619      	mov	r1, r3
 8001bac:	481b      	ldr	r0, [pc, #108]	@ (8001c1c <imu_get_gyro+0x94>)
 8001bae:	f000 f8c7 	bl	8001d40 <_ZN3imu6VectorILh3EEaSERKS1_>
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fe70 	bl	800189c <_ZN3imu6VectorILh3EED1Ev>
    vector->x = vec.x();
 8001bbc:	4817      	ldr	r0, [pc, #92]	@ (8001c1c <imu_get_gyro+0x94>)
 8001bbe:	f7ff fe78 	bl	80018b2 <_ZN3imu6VectorILh3EE1xEv>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7ff f834 	bl	8000c38 <__aeabi_d2f>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
    vector->y = vec.y();
 8001bd6:	4811      	ldr	r0, [pc, #68]	@ (8001c1c <imu_get_gyro+0x94>)
 8001bd8:	f7ff fe76 	bl	80018c8 <_ZN3imu6VectorILh3EE1yEv>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7ff f827 	bl	8000c38 <__aeabi_d2f>
 8001bea:	4602      	mov	r2, r0
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	605a      	str	r2, [r3, #4]
    vector->z = vec.z();
 8001bf0:	480a      	ldr	r0, [pc, #40]	@ (8001c1c <imu_get_gyro+0x94>)
 8001bf2:	f7ff fe75 	bl	80018e0 <_ZN3imu6VectorILh3EE1zEv>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f7ff f81a 	bl	8000c38 <__aeabi_d2f>
 8001c04:	4602      	mov	r2, r0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	609a      	str	r2, [r3, #8]
  }
  return ;
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
}
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000204 	.word	0x20000204
 8001c18:	200001f4 	.word	0x200001f4
 8001c1c:	20000228 	.word	0x20000228

08001c20 <IMU_setup>:
  }
  return ;
}

void IMU_setup(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
//  HAL_Delay(5);
//  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_SET);
//  HAL_Delay(50);

  BNO_conf = 0;
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <IMU_setup+0x28>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
  if(bno.begin())
 8001c2a:	210c      	movs	r1, #12
 8001c2c:	4807      	ldr	r0, [pc, #28]	@ (8001c4c <IMU_setup+0x2c>)
 8001c2e:	f7ff fa81 	bl	8001134 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <IMU_setup+0x20>
  {
    BNO_conf = 1;
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <IMU_setup+0x28>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    IMU_setup();
  }
  return ;
 8001c3e:	e002      	b.n	8001c46 <IMU_setup+0x26>
    IMU_setup();
 8001c40:	f7ff ffee 	bl	8001c20 <IMU_setup>
  return ;
 8001c44:	bf00      	nop
}
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000204 	.word	0x20000204
 8001c4c:	200001f4 	.word	0x200001f4

08001c50 <I2C_byte_receive>:
}

extern I2C_HandleTypeDef hi2c4;

uint8_t I2C_byte_receive(uint8_t address)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  uint8_t value = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73bb      	strb	r3, [r7, #14]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, &value, 1, 100);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	2364      	movs	r3, #100	@ 0x64
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	2301      	movs	r3, #1
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	f107 030e 	add.w	r3, r7, #14
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2301      	movs	r3, #1
 8001c72:	2152      	movs	r1, #82	@ 0x52
 8001c74:	480a      	ldr	r0, [pc, #40]	@ (8001ca0 <I2C_byte_receive+0x50>)
 8001c76:	f005 fae3 	bl	8007240 <HAL_I2C_Mem_Read>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 8001c7e:	bf00      	nop
 8001c80:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <I2C_byte_receive+0x50>)
 8001c82:	f005 fcac 	bl	80075de <HAL_I2C_GetState>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f4      	bne.n	8001c80 <I2C_byte_receive+0x30>

  return value;
 8001c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200002a4 	.word	0x200002a4

08001ca4 <I2C_byte_transmit>:

uint8_t I2C_byte_transmit(uint8_t address, uint8_t byte)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af04      	add	r7, sp, #16
 8001caa:	4603      	mov	r3, r0
 8001cac:	460a      	mov	r2, r1
 8001cae:	71fb      	strb	r3, [r7, #7]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, BNO055<<1, address, 1, &byte, 1, 100);
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	2364      	movs	r3, #100	@ 0x64
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	1dbb      	adds	r3, r7, #6
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	2152      	movs	r1, #82	@ 0x52
 8001cc8:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <I2C_byte_transmit+0x40>)
 8001cca:	f005 f9a5 	bl	8007018 <HAL_I2C_Mem_Write>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(1);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f003 ff10 	bl	8005af8 <HAL_Delay>

  return 0;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200002a4 	.word	0x200002a4

08001ce8 <I2C_n_byte_receive>:

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af04      	add	r7, sp, #16
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	79bb      	ldrb	r3, [r7, #6]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2164      	movs	r1, #100	@ 0x64
 8001d02:	9102      	str	r1, [sp, #8]
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	2152      	movs	r1, #82	@ 0x52
 8001d0e:	480b      	ldr	r0, [pc, #44]	@ (8001d3c <I2C_n_byte_receive+0x54>)
 8001d10:	f005 fa96 	bl	8007240 <HAL_I2C_Mem_Read>
 8001d14:	4603      	mov	r3, r0
 8001d16:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 8001d18:	bf00      	nop
 8001d1a:	4808      	ldr	r0, [pc, #32]	@ (8001d3c <I2C_n_byte_receive+0x54>)
 8001d1c:	f005 fc5f 	bl	80075de <HAL_I2C_GetState>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	bf14      	ite	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	2300      	moveq	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f4      	bne.n	8001d1a <I2C_n_byte_receive+0x32>

  return 0;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200002a4 	.word	0x200002a4

08001d40 <_ZN3imu6VectorILh3EEaSERKS1_>:
    Vector& operator=(const Vector& v)
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
        for (int x = 0; x < N; x++ )
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	e00e      	b.n	8001d6e <_ZN3imu6VectorILh3EEaSERKS1_+0x2e>
            p_vec[x] = v.p_vec[x];
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	68f9      	ldr	r1, [r7, #12]
 8001d60:	00c9      	lsls	r1, r1, #3
 8001d62:	4401      	add	r1, r0
 8001d64:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < N; x++ )
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	dded      	ble.n	8001d50 <_ZN3imu6VectorILh3EEaSERKS1_+0x10>
        return *this;
 8001d74:	687b      	ldr	r3, [r7, #4]
    }
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d10f      	bne.n	8001db4 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10a      	bne.n	8001db4 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 8001d9e:	2229      	movs	r2, #41	@ 0x29
 8001da0:	2137      	movs	r1, #55	@ 0x37
 8001da2:	480d      	ldr	r0, [pc, #52]	@ (8001dd8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001da4:	f7ff f9aa 	bl	80010fc <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 8001da8:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001daa:	f7ff fde5 	bl	8001978 <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 8001dae:	480c      	ldr	r0, [pc, #48]	@ (8001de0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001db0:	f7ff fda2 	bl	80018f8 <_ZN3imu6VectorILh3EEC1Ev>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10a      	bne.n	8001dd0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d105      	bne.n	8001dd0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001dc4:	4806      	ldr	r0, [pc, #24]	@ (8001de0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001dc6:	f7ff fd69 	bl	800189c <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 8001dca:	4803      	ldr	r0, [pc, #12]	@ (8001dd8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001dcc:	f7ff fdb2 	bl	8001934 <_ZN15Adafruit_BNO055D1Ev>
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200001f4 	.word	0x200001f4
 8001ddc:	20000208 	.word	0x20000208
 8001de0:	20000228 	.word	0x20000228

08001de4 <_GLOBAL__sub_I_bno>:
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001dec:	2001      	movs	r0, #1
 8001dee:	f7ff ffc9 	bl	8001d84 <_Z41__static_initialization_and_destruction_0ii>
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_GLOBAL__sub_D_bno>:
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7ff ffc1 	bl	8001d84 <_Z41__static_initialization_and_destruction_0ii>
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e0a:	4b16      	ldr	r3, [pc, #88]	@ (8001e64 <MX_DMA_Init+0x60>)
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e0e:	4a15      	ldr	r2, [pc, #84]	@ (8001e64 <MX_DMA_Init+0x60>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e16:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <MX_DMA_Init+0x60>)
 8001e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e22:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <MX_DMA_Init+0x60>)
 8001e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e26:	4a0f      	ldr	r2, [pc, #60]	@ (8001e64 <MX_DMA_Init+0x60>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <MX_DMA_Init+0x60>)
 8001e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	200b      	movs	r0, #11
 8001e40:	f003 ff57 	bl	8005cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e44:	200b      	movs	r0, #11
 8001e46:	f003 ff6e 	bl	8005d26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	200c      	movs	r0, #12
 8001e50:	f003 ff4f 	bl	8005cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e54:	200c      	movs	r0, #12
 8001e56:	f003 ff66 	bl	8005d26 <HAL_NVIC_EnableIRQ>

}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000

08001e68 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001e6c:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e6e:	4a21      	ldr	r2, [pc, #132]	@ (8001ef4 <MX_FDCAN1_Init+0x8c>)
 8001e70:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001e72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e7a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001e7e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8001e8c:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001e92:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001e98:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001ea6:	221d      	movs	r2, #29
 8001ea8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001eac:	220a      	movs	r2, #10
 8001eae:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 8001ece:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001edc:	f004 f9c6 	bl	800626c <HAL_FDCAN_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001ee6:	f000 fb01 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000240 	.word	0x20000240
 8001ef4:	40006400 	.word	0x40006400

08001ef8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b09e      	sub	sp, #120	@ 0x78
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	2254      	movs	r2, #84	@ 0x54
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f00c fdf4 	bl	800eb06 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a20      	ldr	r2, [pc, #128]	@ (8001fa4 <HAL_FDCAN_MspInit+0xac>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d138      	bne.n	8001f9a <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f32:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f007 fa1b 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001f44:	f000 fad2 	bl	80024ec <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f48:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <HAL_FDCAN_MspInit+0xb0>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4c:	4a16      	ldr	r2, [pc, #88]	@ (8001fa8 <HAL_FDCAN_MspInit+0xb0>)
 8001f4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f52:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f54:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <HAL_FDCAN_MspInit+0xb0>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f60:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <HAL_FDCAN_MspInit+0xb0>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f64:	4a10      	ldr	r2, [pc, #64]	@ (8001fa8 <HAL_FDCAN_MspInit+0xb0>)
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_FDCAN_MspInit+0xb0>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f7c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f8a:	2309      	movs	r3, #9
 8001f8c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	@ (8001fac <HAL_FDCAN_MspInit+0xb4>)
 8001f96:	f004 fdef 	bl	8006b78 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3778      	adds	r7, #120	@ 0x78
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40006400 	.word	0x40006400
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	48000400 	.word	0x48000400

08001fb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	@ 0x28
 8001fb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
 8001fc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc6:	4b34      	ldr	r3, [pc, #208]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	4a33      	ldr	r2, [pc, #204]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001fcc:	f043 0320 	orr.w	r3, r3, #32
 8001fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd2:	4b31      	ldr	r3, [pc, #196]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b2e      	ldr	r3, [pc, #184]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fea:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	4b28      	ldr	r3, [pc, #160]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	4a27      	ldr	r2, [pc, #156]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002002:	4b25      	ldr	r3, [pc, #148]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800200e:	4b22      	ldr	r3, [pc, #136]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	4a21      	ldr	r2, [pc, #132]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800201a:	4b1f      	ldr	r3, [pc, #124]	@ (8002098 <MX_GPIO_Init+0xe8>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b1c      	ldr	r3, [pc, #112]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <MX_GPIO_Init+0xe8>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	2120      	movs	r1, #32
 8002042:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002046:	f004 ff19 	bl	8006e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	2104      	movs	r1, #4
 800204e:	4813      	ldr	r0, [pc, #76]	@ (800209c <MX_GPIO_Init+0xec>)
 8002050:	f004 ff14 	bl	8006e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8002054:	2320      	movs	r3, #32
 8002056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002058:	2301      	movs	r3, #1
 800205a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800206e:	f004 fd83 	bl	8006b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002072:	2304      	movs	r3, #4
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002076:	2301      	movs	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	4804      	ldr	r0, [pc, #16]	@ (800209c <MX_GPIO_Init+0xec>)
 800208a:	f004 fd75 	bl	8006b78 <HAL_GPIO_Init>

}
 800208e:	bf00      	nop
 8002090:	3728      	adds	r7, #40	@ 0x28
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	48000c00 	.word	0x48000c00

080020a0 <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <MX_I2C4_Init+0x78>)
 80020a8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <MX_I2C4_Init+0x7c>)
 80020ae:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80020b0:	4b18      	ldr	r3, [pc, #96]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b6:	4b17      	ldr	r3, [pc, #92]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020bc:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80020c2:	4b14      	ldr	r3, [pc, #80]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020c8:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ce:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80020da:	480e      	ldr	r0, [pc, #56]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020dc:	f004 ff00 	bl	8006ee0 <HAL_I2C_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80020e6:	f000 fa01 	bl	80024ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020ea:	2100      	movs	r1, #0
 80020ec:	4809      	ldr	r0, [pc, #36]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020ee:	f006 fa69 	bl	80085c4 <HAL_I2CEx_ConfigAnalogFilter>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80020f8:	f000 f9f8 	bl	80024ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80020fc:	2100      	movs	r1, #0
 80020fe:	4805      	ldr	r0, [pc, #20]	@ (8002114 <MX_I2C4_Init+0x74>)
 8002100:	f006 faab 	bl	800865a <HAL_I2CEx_ConfigDigitalFilter>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800210a:	f000 f9ef 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200002a4 	.word	0x200002a4
 8002118:	40008400 	.word	0x40008400
 800211c:	00702991 	.word	0x00702991

08002120 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b0a0      	sub	sp, #128	@ 0x80
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002138:	f107 0318 	add.w	r3, r7, #24
 800213c:	2254      	movs	r2, #84	@ 0x54
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f00c fce0 	bl	800eb06 <memset>
  if(i2cHandle->Instance==I2C4)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a5e      	ldr	r2, [pc, #376]	@ (80022c4 <HAL_I2C_MspInit+0x1a4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	f040 80b5 	bne.w	80022bc <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002152:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002156:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002158:	2300      	movs	r3, #0
 800215a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800215c:	f107 0318 	add.w	r3, r7, #24
 8002160:	4618      	mov	r0, r3
 8002162:	f007 f907 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800216c:	f000 f9be 	bl	80024ec <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002170:	4b55      	ldr	r3, [pc, #340]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 8002172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002174:	4a54      	ldr	r2, [pc, #336]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217c:	4b52      	ldr	r3, [pc, #328]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 800217e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002188:	4b4f      	ldr	r3, [pc, #316]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 800218a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218c:	4a4e      	ldr	r2, [pc, #312]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002194:	4b4c      	ldr	r3, [pc, #304]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021a0:	2340      	movs	r3, #64	@ 0x40
 80021a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a4:	2312      	movs	r3, #18
 80021a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 80021b0:	2308      	movs	r3, #8
 80021b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021b8:	4619      	mov	r1, r3
 80021ba:	4844      	ldr	r0, [pc, #272]	@ (80022cc <HAL_I2C_MspInit+0x1ac>)
 80021bc:	f004 fcdc 	bl	8006b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021c0:	2380      	movs	r3, #128	@ 0x80
 80021c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c4:	2312      	movs	r3, #18
 80021c6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80021d0:	2303      	movs	r3, #3
 80021d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021d8:	4619      	mov	r1, r3
 80021da:	483d      	ldr	r0, [pc, #244]	@ (80022d0 <HAL_I2C_MspInit+0x1b0>)
 80021dc:	f004 fccc 	bl	8006b78 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80021e0:	4b39      	ldr	r3, [pc, #228]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 80021e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e4:	4a38      	ldr	r2, [pc, #224]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 80021e6:	f043 0302 	orr.w	r3, r3, #2
 80021ea:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80021ec:	4b36      	ldr	r3, [pc, #216]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 80021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 80021f8:	4b36      	ldr	r3, [pc, #216]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 80021fa:	4a37      	ldr	r2, [pc, #220]	@ (80022d8 <HAL_I2C_MspInit+0x1b8>)
 80021fc:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 80021fe:	4b35      	ldr	r3, [pc, #212]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002200:	2216      	movs	r2, #22
 8002202:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002204:	4b33      	ldr	r3, [pc, #204]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800220a:	4b32      	ldr	r3, [pc, #200]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 800220c:	2200      	movs	r2, #0
 800220e:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002210:	4b30      	ldr	r3, [pc, #192]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002212:	2280      	movs	r2, #128	@ 0x80
 8002214:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002216:	4b2f      	ldr	r3, [pc, #188]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002218:	2200      	movs	r2, #0
 800221a:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800221c:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8002222:	4b2c      	ldr	r3, [pc, #176]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002224:	2200      	movs	r2, #0
 8002226:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002228:	4b2a      	ldr	r3, [pc, #168]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 800222a:	2200      	movs	r2, #0
 800222c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 800222e:	4829      	ldr	r0, [pc, #164]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002230:	f003 fd94 	bl	8005d5c <HAL_DMA_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 800223a:	f000 f957 	bl	80024ec <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a24      	ldr	r2, [pc, #144]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002242:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002244:	4a23      	ldr	r2, [pc, #140]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 800224a:	4b24      	ldr	r3, [pc, #144]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 800224c:	4a24      	ldr	r2, [pc, #144]	@ (80022e0 <HAL_I2C_MspInit+0x1c0>)
 800224e:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8002250:	4b22      	ldr	r3, [pc, #136]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002252:	2217      	movs	r2, #23
 8002254:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002256:	4b21      	ldr	r3, [pc, #132]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002258:	2210      	movs	r2, #16
 800225a:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800225c:	4b1f      	ldr	r3, [pc, #124]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002262:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002264:	2280      	movs	r2, #128	@ 0x80
 8002266:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002268:	4b1c      	ldr	r3, [pc, #112]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 800226a:	2200      	movs	r2, #0
 800226c:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800226e:	4b1b      	ldr	r3, [pc, #108]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8002274:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800227a:	4b18      	ldr	r3, [pc, #96]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8002280:	4816      	ldr	r0, [pc, #88]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002282:	f003 fd6b 	bl	8005d5c <HAL_DMA_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 800228c:	f000 f92e 	bl	80024ec <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a12      	ldr	r2, [pc, #72]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002294:	639a      	str	r2, [r3, #56]	@ 0x38
 8002296:	4a11      	ldr	r2, [pc, #68]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	2052      	movs	r0, #82	@ 0x52
 80022a2:	f003 fd26 	bl	8005cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80022a6:	2052      	movs	r0, #82	@ 0x52
 80022a8:	f003 fd3d 	bl	8005d26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	2053      	movs	r0, #83	@ 0x53
 80022b2:	f003 fd1e 	bl	8005cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80022b6:	2053      	movs	r0, #83	@ 0x53
 80022b8:	f003 fd35 	bl	8005d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80022bc:	bf00      	nop
 80022be:	3780      	adds	r7, #128	@ 0x80
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40008400 	.word	0x40008400
 80022c8:	40021000 	.word	0x40021000
 80022cc:	48000800 	.word	0x48000800
 80022d0:	48000400 	.word	0x48000400
 80022d4:	200002f8 	.word	0x200002f8
 80022d8:	40020008 	.word	0x40020008
 80022dc:	20000358 	.word	0x20000358
 80022e0:	4002001c 	.word	0x4002001c

080022e4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <MX_IWDG_Init+0x34>)
 80022ea:	4a0c      	ldr	r2, [pc, #48]	@ (800231c <MX_IWDG_Init+0x38>)
 80022ec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80022ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <MX_IWDG_Init+0x34>)
 80022f0:	2203      	movs	r2, #3
 80022f2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4000;
 80022f4:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <MX_IWDG_Init+0x34>)
 80022f6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80022fa:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4000;
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <MX_IWDG_Init+0x34>)
 80022fe:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8002302:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002304:	4804      	ldr	r0, [pc, #16]	@ (8002318 <MX_IWDG_Init+0x34>)
 8002306:	f006 f9f4 	bl	80086f2 <HAL_IWDG_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002310:	f000 f8ec 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200003b8 	.word	0x200003b8
 800231c:	40003000 	.word	0x40003000

08002320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b09b      	sub	sp, #108	@ 0x6c
 8002324:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002326:	f003 fb76 	bl	8005a16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800232a:	f000 f887 	bl	800243c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800232e:	f7ff fe3f 	bl	8001fb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002332:	f7ff fd67 	bl	8001e04 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002336:	f7ff fd97 	bl	8001e68 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 800233a:	f7ff feb1 	bl	80020a0 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 800233e:	f003 fa95 	bl	800586c <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8002342:	f7ff ffcf 	bl	80022e4 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  cyphal_can_starter(&hfdcan1);
 8002346:	483b      	ldr	r0, [pc, #236]	@ (8002434 <main+0x114>)
 8002348:	f001 fbc2 	bl	8003ad0 <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 800234c:	4839      	ldr	r0, [pc, #228]	@ (8002434 <main+0x114>)
 800234e:	f001 fb6d 	bl	8003a2c <setup_cyphal>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t msg[10];
  int i = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	647b      	str	r3, [r7, #68]	@ 0x44
  //uint16_t addr9250=0xD0; //0x68<<1

  HAL_StatusTypeDef rv;


  uint32_t last_hbeat = HAL_GetTick();
 8002356:	f003 fbc3 	bl	8005ae0 <HAL_GetTick>
 800235a:	64f8      	str	r0, [r7, #76]	@ 0x4c
  uint32_t last_imu_send = HAL_GetTick();
 800235c:	f003 fbc0 	bl	8005ae0 <HAL_GetTick>
 8002360:	64b8      	str	r0, [r7, #72]	@ 0x48

  vec_4ax linear = {0};
 8002362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
  vec_4ax quat = {0};
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
  vec_4ax gyro = {0};
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]


  IMU_setup();
 800238a:	f7ff fc49 	bl	8001c20 <IMU_setup>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 800238e:	2201      	movs	r2, #1
 8002390:	2104      	movs	r1, #4
 8002392:	4829      	ldr	r0, [pc, #164]	@ (8002438 <main+0x118>)
 8002394:	f004 fd72 	bl	8006e7c <HAL_GPIO_WritePin>

  while (1)
  {
      uint32_t now = HAL_GetTick();
 8002398:	f003 fba2 	bl	8005ae0 <HAL_GetTick>
 800239c:	6438      	str	r0, [r7, #64]	@ 0x40
      if ( (now - last_imu_send) >= 50) //50 milliseconds soft delay
 800239e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b31      	cmp	r3, #49	@ 0x31
 80023a6:	d938      	bls.n	800241a <main+0xfa>
      {
      	  imu_get_quat(&quat);
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fb3b 	bl	8001a28 <imu_get_quat>
      	  imu_get_linear(&linear);
 80023b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fb9a 	bl	8001af0 <imu_get_linear>
      	  imu_get_gyro(&gyro);
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fbe2 	bl	8001b88 <imu_get_gyro>
      	  last_imu_send = now;
 80023c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023c6:	64bb      	str	r3, [r7, #72]	@ 0x48
          heartbeat();
 80023c8:	f001 fb00 	bl	80039cc <heartbeat>
          //sprintf(msg,"%d\n\0", q[1]);
          //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
          send_IMU(&quat.w, &quat.x, &quat.y, &quat.z, &linear.x, &linear.y, &linear.z, &gyro.x, &gyro.y, &gyro.z);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	f103 0408 	add.w	r4, r3, #8
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	1d1a      	adds	r2, r3, #4
 80023da:	f107 0114 	add.w	r1, r7, #20
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	f103 000c 	add.w	r0, r3, #12
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	3308      	adds	r3, #8
 80023ea:	9305      	str	r3, [sp, #20]
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	3304      	adds	r3, #4
 80023f0:	9304      	str	r3, [sp, #16]
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	9303      	str	r3, [sp, #12]
 80023f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023fa:	3308      	adds	r3, #8
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002402:	3304      	adds	r3, #4
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4623      	mov	r3, r4
 800240e:	f001 fa79 	bl	8003904 <send_IMU>
          HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8002412:	2104      	movs	r1, #4
 8002414:	4808      	ldr	r0, [pc, #32]	@ (8002438 <main+0x118>)
 8002416:	f004 fd49 	bl	8006eac <HAL_GPIO_TogglePin>
      }
      if ( (now - last_hbeat) >= 1000) //1 second soft delay
 800241a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800241c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002424:	d303      	bcc.n	800242e <main+0x10e>
      {
          heartbeat();
 8002426:	f001 fad1 	bl	80039cc <heartbeat>
          last_hbeat = now;
 800242a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800242c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      cyphal_loop();
 800242e:	f001 fb41 	bl	8003ab4 <cyphal_loop>
  {
 8002432:	e7b1      	b.n	8002398 <main+0x78>
 8002434:	20000240 	.word	0x20000240
 8002438:	48000c00 	.word	0x48000c00

0800243c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b094      	sub	sp, #80	@ 0x50
 8002440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002442:	f107 0318 	add.w	r3, r7, #24
 8002446:	2238      	movs	r2, #56	@ 0x38
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f00c fb5b 	bl	800eb06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800245e:	2000      	movs	r0, #0
 8002460:	f006 f9a6 	bl	80087b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002464:	2309      	movs	r3, #9
 8002466:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002468:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800246c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800246e:	2301      	movs	r3, #1
 8002470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002472:	2302      	movs	r3, #2
 8002474:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002476:	2303      	movs	r3, #3
 8002478:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800247a:	2301      	movs	r3, #1
 800247c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800247e:	2328      	movs	r3, #40	@ 0x28
 8002480:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002482:	2302      	movs	r3, #2
 8002484:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002486:	2302      	movs	r3, #2
 8002488:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800248a:	2302      	movs	r3, #2
 800248c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800248e:	f107 0318 	add.w	r3, r7, #24
 8002492:	4618      	mov	r0, r3
 8002494:	f006 fa40 	bl	8008918 <HAL_RCC_OscConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800249e:	f000 f825 	bl	80024ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024a2:	230f      	movs	r3, #15
 80024a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024a6:	2303      	movs	r3, #3
 80024a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	2104      	movs	r1, #4
 80024be:	4618      	mov	r0, r3
 80024c0:	f006 fd3c 	bl	8008f3c <HAL_RCC_ClockConfig>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80024ca:	f000 f80f 	bl	80024ec <Error_Handler>
  }
}
 80024ce:	bf00      	nop
 80024d0:	3750      	adds	r7, #80	@ 0x50
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <delay>:

/* USER CODE BEGIN 4 */
void delay(uint32_t delay)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f003 fb0a 	bl	8005af8 <HAL_Delay>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f0:	b672      	cpsid	i
}
 80024f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <Error_Handler+0x8>

080024f8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	1e5a      	subs	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d019      	beq.n	8002586 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3308      	adds	r3, #8
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	1e5a      	subs	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	330c      	adds	r3, #12
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	4798      	blx	r3
        }
    }
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	2203      	movs	r2, #3
 80025d4:	4798      	blx	r3
    }
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf0c      	ite	eq
 80025f0:	2301      	moveq	r3, #1
 80025f2:	2300      	movne	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ffd4 	bl	80025ba <_ZNSt14_Function_baseD1Ev>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <_ZNSt8functionIFvvEED1Ev>:
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ffc7 	bl	80025ba <_ZNSt14_Function_baseD1Ev>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	4618      	mov	r0, r3
 8002648:	f001 fb18 	bl	8003c7c <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3310      	adds	r3, #16
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	f001 fb3d 	bl	8003cd2 <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	4a06      	ldr	r2, [pc, #24]	@ (800268c <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	08012b84 	.word	0x08012b84

08002690 <_Z7alloc_fP14CanardInstancej>:
#include <cyphal/definitions.h>
#include <libcanard/canard.h>

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 800269a:	480d      	ldr	r0, [pc, #52]	@ (80026d0 <_Z7alloc_fP14CanardInstancej+0x40>)
 800269c:	f001 fb44 	bl	8003d28 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f083 0301 	eor.w	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f00b f99d 	bl	800d9ec <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 80026b2:	4807      	ldr	r0, [pc, #28]	@ (80026d0 <_Z7alloc_fP14CanardInstancej+0x40>)
 80026b4:	f001 fb49 	bl	8003d4a <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 80026b8:	4603      	mov	r3, r0
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	6814      	ldr	r4, [r2, #0]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4618      	mov	r0, r3
 80026c4:	47a0      	blx	r4
 80026c6:	4603      	mov	r3, r0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd90      	pop	{r4, r7, pc}
 80026d0:	200005c0 	.word	0x200005c0

080026d4 <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 80026de:	480d      	ldr	r0, [pc, #52]	@ (8002714 <_Z6free_fP14CanardInstancePv+0x40>)
 80026e0:	f001 fb22 	bl	8003d28 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f083 0301 	eor.w	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 80026f0:	2001      	movs	r0, #1
 80026f2:	f00b f97b 	bl	800d9ec <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 80026f6:	4807      	ldr	r0, [pc, #28]	@ (8002714 <_Z6free_fP14CanardInstancePv+0x40>)
 80026f8:	f001 fb27 	bl	8003d4a <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 80026fc:	4603      	mov	r3, r0
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	3204      	adds	r2, #4
 8002702:	6814      	ldr	r4, [r2, #0]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	47a0      	blx	r4
 800270c:	bf00      	nop
}
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bd90      	pop	{r4, r7, pc}
 8002714:	200005c0 	.word	0x200005c0

08002718 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
        CANARD_MTU(canard_mtu),
        WIRE_MTU(wire_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 8002726:	4a0c      	ldr	r2, [pc, #48]	@ (8002758 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	330c      	adds	r3, #12
 8002740:	6839      	ldr	r1, [r7, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f00a fe46 	bl	800d3d4 <canardTxInit>
        utilities(utilities)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	63da      	str	r2, [r3, #60]	@ 0x3c
    {};
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	08012d48 	.word	0x08012d48

0800275c <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>:
private:
    const CanardNodeID node_id;
    UtilityConfig& utilities;
    std::unique_ptr<AbstractCANProvider> provider;
public:
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config, AbstractCANProvider* provider) :
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	460b      	mov	r3, r1
 800276a:	72fb      	strb	r3, [r7, #11]
		node_id(node_id), utilities(config), provider(provider) {};
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	7afa      	ldrb	r2, [r7, #11]
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3308      	adds	r3, #8
 800277c:	6839      	ldr	r1, [r7, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f001 faff 	bl	8003d82 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2248      	movs	r2, #72	@ 0x48
 80027a8:	2140      	movs	r1, #64	@ 0x40
 80027aa:	f7ff ffb5 	bl	8002718 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 80027ae:	4a05      	ldr	r2, [pc, #20]	@ (80027c4 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	08012d24 	.word	0x08012d24

080027c8 <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include <cyphal/allocators/allocator.h>

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff42 	bl	8002664 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 80027e0:	4a03      	ldr	r2, [pc, #12]	@ (80027f0 <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	08012c08 	.word	0x08012c08

080027f4 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d201      	bcs.n	800280a <nunavutChooseMin+0x16>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	e000      	b.n	800280c <nunavutChooseMin+0x18>
 800280a:	683b      	ldr	r3, [r7, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	6978      	ldr	r0, [r7, #20]
 800282e:	f7ff ffe1 	bl	80027f4 <nunavutChooseMin>
 8002832:	4602      	mov	r2, r0
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 800283a:	6939      	ldr	r1, [r7, #16]
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ffd9 	bl	80027f4 <nunavutChooseMin>
 8002842:	4603      	mov	r3, r0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b092      	sub	sp, #72	@ 0x48
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 800285a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	2b00      	cmp	r3, #0
 8002862:	d145      	bne.n	80028f0 <nunavutCopyBits+0xa4>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	2b00      	cmp	r3, #0
 800286c:	d140      	bne.n	80028f0 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	08db      	lsrs	r3, r3, #3
 8002872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8002874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002876:	08db      	lsrs	r3, r3, #3
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	4413      	add	r3, r2
 800287c:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	08db      	lsrs	r3, r3, #3
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4413      	add	r3, r2
 8002886:	637b      	str	r3, [r7, #52]	@ 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8002888:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800288a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800288c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800288e:	f00c f920 	bl	800ead2 <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 800289e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 808a 	beq.w	80029bc <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 80028a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ac:	4413      	add	r3, r2
 80028ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 80028b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028b4:	4413      	add	r3, r2
 80028b6:	62bb      	str	r3, [r7, #40]	@ 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 80028b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80028bc:	2201      	movs	r2, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 80028ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028d2:	43db      	mvns	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	4013      	ands	r3, r2
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028dc:	7819      	ldrb	r1, [r3, #0]
 80028de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028e2:	400b      	ands	r3, r1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4313      	orrs	r3, r2
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ec:	701a      	strb	r2, [r3, #0]
        }
    }
 80028ee:	e065      	b.n	80029bc <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 80028f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028fa:	647b      	str	r3, [r7, #68]	@ 0x44
        size_t       dst_off  = dst_offset_bits;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	643b      	str	r3, [r7, #64]	@ 0x40
        const size_t last_bit = src_off + length_bits;
 8002900:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 8002908:	e053      	b.n	80029b2 <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 800290a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 8002914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 800291e:	7dfa      	ldrb	r2, [r7, #23]
 8002920:	7dbb      	ldrb	r3, [r7, #22]
 8002922:	429a      	cmp	r2, r3
 8002924:	d901      	bls.n	800292a <nunavutCopyBits+0xde>
 8002926:	7dfb      	ldrb	r3, [r7, #23]
 8002928:	e000      	b.n	800292c <nunavutCopyBits+0xe0>
 800292a:	7dbb      	ldrb	r3, [r7, #22]
 800292c:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 800292e:	7d7b      	ldrb	r3, [r7, #21]
 8002930:	f1c3 0008 	rsb	r0, r3, #8
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	4619      	mov	r1, r3
 800293c:	f7ff ff5a 	bl	80027f4 <nunavutChooseMin>
 8002940:	4603      	mov	r3, r0
 8002942:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 8002944:	7d3b      	ldrb	r3, [r7, #20]
 8002946:	2201      	movs	r2, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	7dbb      	ldrb	r3, [r7, #22]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 8002956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002958:	08db      	lsrs	r3, r3, #3
 800295a:	6a3a      	ldr	r2, [r7, #32]
 800295c:	4413      	add	r3, r2
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	fa42 f303 	asr.w	r3, r2, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	7dbb      	ldrb	r3, [r7, #22]
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8002974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002976:	08db      	lsrs	r3, r3, #3
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	4413      	add	r3, r2
 800297c:	781a      	ldrb	r2, [r3, #0]
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	43db      	mvns	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4013      	ands	r3, r2
 8002986:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8002988:	7cba      	ldrb	r2, [r7, #18]
 800298a:	7cfb      	ldrb	r3, [r7, #19]
 800298c:	4013      	ands	r3, r2
 800298e:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8002990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002992:	08db      	lsrs	r3, r3, #3
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	7c79      	ldrb	r1, [r7, #17]
 800299a:	7c3a      	ldrb	r2, [r7, #16]
 800299c:	430a      	orrs	r2, r1
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]
            src_off += size;
 80029a2:	7d3b      	ldrb	r3, [r7, #20]
 80029a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029a6:	4413      	add	r3, r2
 80029a8:	647b      	str	r3, [r7, #68]	@ 0x44
            dst_off += size;
 80029aa:	7d3b      	ldrb	r3, [r7, #20]
 80029ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029ae:	4413      	add	r3, r2
 80029b0:	643b      	str	r3, [r7, #64]	@ 0x40
        while (last_bit > src_off)
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d8a7      	bhi.n	800290a <nunavutCopyBits+0xbe>
        }

    }
}
 80029ba:	e000      	b.n	80029be <nunavutCopyBits+0x172>
    }
 80029bc:	bf00      	nop
}
 80029be:	bf00      	nop
 80029c0:	3748      	adds	r7, #72	@ 0x48
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b088      	sub	sp, #32
 80029ca:	af02      	add	r7, sp, #8
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	00da      	lsls	r2, r3, #3
 80029d6:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	440b      	add	r3, r1
 80029de:	429a      	cmp	r2, r3
 80029e0:	d202      	bcs.n	80029e8 <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80029e2:	f06f 0302 	mvn.w	r3, #2
 80029e6:	e010      	b.n	8002a0a <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 80029e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80029ec:	2140      	movs	r1, #64	@ 0x40
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff00 	bl	80027f4 <nunavutChooseMin>
 80029f4:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 80029f6:	2300      	movs	r3, #0
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	f107 0320 	add.w	r3, r7, #32
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7ff ff22 	bl	800284c <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b088      	sub	sp, #32
 8002a16:	af02      	add	r7, sp, #8
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	2120      	movs	r1, #32
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fee5 	bl	80027f4 <nunavutChooseMin>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	68b8      	ldr	r0, [r7, #8]
 8002a32:	f7ff fef1 	bl	8002818 <nunavutSaturateBufferFragmentBitLength>
 8002a36:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8002a3c:	f107 0010 	add.w	r0, r7, #16
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	2100      	movs	r1, #0
 8002a4a:	f7ff feff 	bl	800284c <nunavutCopyBits>
    return val;
 8002a4e:	693b      	ldr	r3, [r7, #16]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08c      	sub	sp, #48	@ 0x30
 8002a5c:	af04      	add	r7, sp, #16
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <uavcan_node_Health_1_0_serialize_+0x1e>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <uavcan_node_Health_1_0_serialize_+0x1e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002a76:	f06f 0301 	mvn.w	r3, #1
 8002a7a:	e048      	b.n	8002b0e <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	2b07      	cmp	r3, #7
 8002a88:	d802      	bhi.n	8002a90 <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002a8a:	f06f 0302 	mvn.w	r3, #2
 8002a8e:	e03e      	b.n	8002b0e <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8002a9a:	7efb      	ldrb	r3, [r7, #27]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d901      	bls.n	8002aa4 <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	4413      	add	r3, r2
 8002aac:	7efa      	ldrb	r2, [r7, #27]
 8002aae:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d021      	beq.n	8002b04 <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f1c3 0308 	rsb	r3, r3, #8
 8002ace:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	9302      	str	r3, [sp, #8]
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9cd 2300 	strd	r2, r3, [sp]
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	6979      	ldr	r1, [r7, #20]
 8002ae4:	68b8      	ldr	r0, [r7, #8]
 8002ae6:	f7ff ff6e 	bl	80029c6 <nunavutSetUxx>
 8002aea:	4603      	mov	r3, r0
 8002aec:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002aee:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	da02      	bge.n	8002afc <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002af6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002afa:	e008      	b.n	8002b0e <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	4413      	add	r3, r2
 8002b02:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	08da      	lsrs	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <uavcan_node_Health_1_0_deserialize_+0x26>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d006      	beq.n	8002b3e <uavcan_node_Health_1_0_deserialize_+0x26>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <uavcan_node_Health_1_0_deserialize_+0x2c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002b3e:	f06f 0301 	mvn.w	r3, #1
 8002b42:	e030      	b.n	8002ba6 <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002b4a:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <uavcan_node_Health_1_0_deserialize_+0x98>)
 8002b4c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3302      	adds	r3, #2
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d30a      	bcc.n	8002b7e <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	08db      	lsrs	r3, r3, #3
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e002      	b.n	8002b84 <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3302      	adds	r3, #2
 8002b88:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3307      	adds	r3, #7
 8002b8e:	f023 0307 	bic.w	r3, r3, #7
 8002b92:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002b94:	69b9      	ldr	r1, [r7, #24]
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f7ff fe2c 	bl	80027f4 <nunavutChooseMin>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	08da      	lsrs	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	08012b30 	.word	0x08012b30

08002bb4 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	@ 0x30
 8002bb8:	af04      	add	r7, sp, #16
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d102      	bne.n	8002bd8 <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002bd2:	f06f 0301 	mvn.w	r3, #1
 8002bd6:	e048      	b.n	8002c6a <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	2b07      	cmp	r3, #7
 8002be4:	d802      	bhi.n	8002bec <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002be6:	f06f 0302 	mvn.w	r3, #2
 8002bea:	e03e      	b.n	8002c6a <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8002bf6:	7efb      	ldrb	r3, [r7, #27]
 8002bf8:	2b07      	cmp	r3, #7
 8002bfa:	d901      	bls.n	8002c00 <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 8002bfc:	2307      	movs	r3, #7
 8002bfe:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	08db      	lsrs	r3, r3, #3
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	4413      	add	r3, r2
 8002c08:	7efa      	ldrb	r2, [r7, #27]
 8002c0a:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3303      	adds	r3, #3
 8002c10:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d021      	beq.n	8002c60 <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f1c3 0308 	rsb	r3, r3, #8
 8002c2a:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	9302      	str	r3, [sp, #8]
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	e9cd 2300 	strd	r2, r3, [sp]
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	6979      	ldr	r1, [r7, #20]
 8002c40:	68b8      	ldr	r0, [r7, #8]
 8002c42:	f7ff fec0 	bl	80029c6 <nunavutSetUxx>
 8002c46:	4603      	mov	r3, r0
 8002c48:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002c4a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	da02      	bge.n	8002c58 <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002c52:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002c56:	e008      	b.n	8002c6a <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	08da      	lsrs	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d009      	beq.n	8002c9a <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <uavcan_node_Mode_1_0_deserialize_+0x2c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002c9a:	f06f 0301 	mvn.w	r3, #1
 8002c9e:	e030      	b.n	8002d02 <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002ca6:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <uavcan_node_Mode_1_0_deserialize_+0x98>)
 8002ca8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	3303      	adds	r3, #3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d30a      	bcc.n	8002cda <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	08db      	lsrs	r3, r3, #3
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	4413      	add	r3, r2
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	e002      	b.n	8002ce0 <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	3303      	adds	r3, #3
 8002ce4:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3307      	adds	r3, #7
 8002cea:	f023 0307 	bic.w	r3, r3, #7
 8002cee:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002cf0:	69b9      	ldr	r1, [r7, #24]
 8002cf2:	6978      	ldr	r0, [r7, #20]
 8002cf4:	f7ff fd7e 	bl	80027f4 <nunavutChooseMin>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	08da      	lsrs	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	08012b30 	.word	0x08012b30

08002d10 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08e      	sub	sp, #56	@ 0x38
 8002d14:	af04      	add	r7, sp, #16
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002d2e:	f06f 0301 	mvn.w	r3, #1
 8002d32:	e0cf      	b.n	8002ed4 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	2b37      	cmp	r3, #55	@ 0x37
 8002d40:	d802      	bhi.n	8002d48 <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002d42:	f06f 0302 	mvn.w	r3, #2
 8002d46:	e0c5      	b.n	8002ed4 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	08db      	lsrs	r3, r3, #3
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	4413      	add	r3, r2
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	3320      	adds	r3, #32
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d021      	beq.n	8002dae <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f1c3 0308 	rsb	r3, r3, #8
 8002d78:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002d7a:	7ffb      	ldrb	r3, [r7, #31]
 8002d7c:	9302      	str	r3, [sp, #8]
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e9cd 2300 	strd	r2, r3, [sp]
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d8c:	6a39      	ldr	r1, [r7, #32]
 8002d8e:	68b8      	ldr	r0, [r7, #8]
 8002d90:	f7ff fe19 	bl	80029c6 <nunavutSetUxx>
 8002d94:	4603      	mov	r3, r0
 8002d96:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 8002d98:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	da02      	bge.n	8002da6 <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 8002da0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002da4:	e096      	b.n	8002ed4 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 8002da6:	7ffb      	ldrb	r3, [r7, #31]
 8002da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002daa:	4413      	add	r3, r2
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8002dae:	2301      	movs	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db8:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f107 0214 	add.w	r2, r7, #20
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f7ff fe48 	bl	8002a58 <uavcan_node_Health_1_0_serialize_>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8002dcc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	da02      	bge.n	8002dda <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 8002dd4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002dd8:	e07c      	b.n	8002ed4 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de0:	4413      	add	r3, r2
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d021      	beq.n	8002e32 <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f1c3 0308 	rsb	r3, r3, #8
 8002dfc:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002dfe:	7f3b      	ldrb	r3, [r7, #28]
 8002e00:	9302      	str	r3, [sp, #8]
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9cd 2300 	strd	r2, r3, [sp]
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e10:	6a39      	ldr	r1, [r7, #32]
 8002e12:	68b8      	ldr	r0, [r7, #8]
 8002e14:	f7ff fdd7 	bl	80029c6 <nunavutSetUxx>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 8002e1c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	da02      	bge.n	8002e2a <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 8002e24:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e28:	e054      	b.n	8002ed4 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 8002e2a:	7f3b      	ldrb	r3, [r7, #28]
 8002e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2e:	4413      	add	r3, r2
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8002e32:	2301      	movs	r3, #1
 8002e34:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	4413      	add	r3, r2
 8002e42:	f107 0210 	add.w	r2, r7, #16
 8002e46:	4619      	mov	r1, r3
 8002e48:	f7ff feb4 	bl	8002bb4 <uavcan_node_Mode_1_0_serialize_>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8002e50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da02      	bge.n	8002e5e <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 8002e58:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002e5c:	e03a      	b.n	8002ed4 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e64:	4413      	add	r3, r2
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	08db      	lsrs	r3, r3, #3
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	4413      	add	r3, r2
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	7992      	ldrb	r2, [r2, #6]
 8002e74:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	3308      	adds	r3, #8
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d021      	beq.n	8002eca <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f1c3 0308 	rsb	r3, r3, #8
 8002e94:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8002e96:	7e7b      	ldrb	r3, [r7, #25]
 8002e98:	9302      	str	r3, [sp, #8]
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	e9cd 2300 	strd	r2, r3, [sp]
 8002ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea8:	6a39      	ldr	r1, [r7, #32]
 8002eaa:	68b8      	ldr	r0, [r7, #8]
 8002eac:	f7ff fd8b 	bl	80029c6 <nunavutSetUxx>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 8002eb4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da02      	bge.n	8002ec2 <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 8002ebc:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002ec0:	e008      	b.n	8002ed4 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 8002ec2:	7e7b      	ldrb	r3, [r7, #25]
 8002ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec6:	4413      	add	r3, r2
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	08da      	lsrs	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3728      	adds	r7, #40	@ 0x28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	@ 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d006      	beq.n	8002f02 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002f02:	f06f 0301 	mvn.w	r3, #1
 8002f06:	e089      	b.n	800301c <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002f0e:	4b45      	ldr	r3, [pc, #276]	@ (8003024 <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 8002f10:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 8002f22:	2320      	movs	r3, #32
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f28:	68b8      	ldr	r0, [r7, #8]
 8002f2a:	f7ff fd72 	bl	8002a12 <nunavutGetU32>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3320      	adds	r3, #32
 8002f38:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3307      	adds	r3, #7
 8002f3e:	f023 0307 	bic.w	r3, r3, #7
 8002f42:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	08db      	lsrs	r3, r3, #3
 8002f48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fc52 	bl	80027f4 <nunavutChooseMin>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	4413      	add	r3, r2
 8002f64:	f107 0214 	add.w	r2, r7, #20
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f7ff fdd5 	bl	8002b18 <uavcan_node_Health_1_0_deserialize_>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 8002f72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	da02      	bge.n	8002f80 <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 8002f7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002f7e:	e04d      	b.n	800301c <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	4413      	add	r3, r2
 8002f88:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3307      	adds	r3, #7
 8002f8e:	f023 0307 	bic.w	r3, r3, #7
 8002f92:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	08db      	lsrs	r3, r3, #3
 8002f98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fc2a 	bl	80027f4 <nunavutChooseMin>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f107 0210 	add.w	r2, r7, #16
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f7ff fe5b 	bl	8002c74 <uavcan_node_Mode_1_0_deserialize_>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 8002fc2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da02      	bge.n	8002fd0 <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8002fca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002fce:	e025      	b.n	800301c <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3308      	adds	r3, #8
 8002fde:	6a3a      	ldr	r2, [r7, #32]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d307      	bcc.n	8002ff4 <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	08db      	lsrs	r3, r3, #3
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	4413      	add	r3, r2
 8002fec:	781a      	ldrb	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	719a      	strb	r2, [r3, #6]
 8002ff2:	e002      	b.n	8002ffa <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	3307      	adds	r3, #7
 8003004:	f023 0307 	bic.w	r3, r3, #7
 8003008:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800300a:	6a39      	ldr	r1, [r7, #32]
 800300c:	69f8      	ldr	r0, [r7, #28]
 800300e:	f7ff fbf1 	bl	80027f4 <nunavutChooseMin>
 8003012:	4603      	mov	r3, r0
 8003014:	08da      	lsrs	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3728      	adds	r7, #40	@ 0x28
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	08012b30 	.word	0x08012b30

08003028 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_(
    const uavcan_si_unit_angular_velocity_Vector3_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08c      	sub	sp, #48	@ 0x30
 800302c:	af04      	add	r7, sp, #16
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x1e>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x1e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d102      	bne.n	800304c <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003046:	f06f 0301 	mvn.w	r3, #1
 800304a:	e042      	b.n	80030d2 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 96UL)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	2b5f      	cmp	r3, #95	@ 0x5f
 8003058:	d802      	bhi.n	8003060 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800305a:	f06f 0302 	mvn.w	r3, #2
 800305e:	e038      	b.n	80030d2 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 3UL * 32UL, &obj->radian_per_second[0], 0U);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	9200      	str	r2, [sp, #0]
 800306a:	2260      	movs	r2, #96	@ 0x60
 800306c:	69f9      	ldr	r1, [r7, #28]
 800306e:	68b8      	ldr	r0, [r7, #8]
 8003070:	f7ff fbec 	bl	800284c <nunavutCopyBits>
        offset_bits += 3UL * 32UL;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	3360      	adds	r3, #96	@ 0x60
 8003078:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	2b00      	cmp	r3, #0
 8003082:	d021      	beq.n	80030c8 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f1c3 0308 	rsb	r3, r3, #8
 8003092:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	9302      	str	r3, [sp, #8]
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9cd 2300 	strd	r2, r3, [sp]
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	69b9      	ldr	r1, [r7, #24]
 80030a8:	68b8      	ldr	r0, [r7, #8]
 80030aa:	f7ff fc8c 	bl	80029c6 <nunavutSetUxx>
 80030ae:	4603      	mov	r3, r0
 80030b0:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80030b2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	da02      	bge.n	80030c0 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x98>
        {
            return _err0_;
 80030ba:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80030be:	e008      	b.n	80030d2 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	08da      	lsrs	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <uavcan_si_unit_velocity_Vector3_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_velocity_Vector3_1_0_serialize_(
    const uavcan_si_unit_velocity_Vector3_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b08c      	sub	sp, #48	@ 0x30
 80030de:	af04      	add	r7, sp, #16
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x1e>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x1e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80030f8:	f06f 0301 	mvn.w	r3, #1
 80030fc:	e042      	b.n	8003184 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 96UL)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	2b5f      	cmp	r3, #95	@ 0x5f
 800310a:	d802      	bhi.n	8003112 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800310c:	f06f 0302 	mvn.w	r3, #2
 8003110:	e038      	b.n	8003184 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 3UL * 32UL, &obj->meter_per_second[0], 0U);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	9200      	str	r2, [sp, #0]
 800311c:	2260      	movs	r2, #96	@ 0x60
 800311e:	69f9      	ldr	r1, [r7, #28]
 8003120:	68b8      	ldr	r0, [r7, #8]
 8003122:	f7ff fb93 	bl	800284c <nunavutCopyBits>
        offset_bits += 3UL * 32UL;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3360      	adds	r3, #96	@ 0x60
 800312a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	2b00      	cmp	r3, #0
 8003134:	d021      	beq.n	800317a <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f1c3 0308 	rsb	r3, r3, #8
 8003144:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	9302      	str	r3, [sp, #8]
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9cd 2300 	strd	r2, r3, [sp]
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	69b9      	ldr	r1, [r7, #24]
 800315a:	68b8      	ldr	r0, [r7, #8]
 800315c:	f7ff fc33 	bl	80029c6 <nunavutSetUxx>
 8003160:	4603      	mov	r3, r0
 8003162:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003164:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003168:	2b00      	cmp	r3, #0
 800316a:	da02      	bge.n	8003172 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x98>
        {
            return _err0_;
 800316c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003170:	e008      	b.n	8003184 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 8003172:	7dfb      	ldrb	r3, [r7, #23]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	4413      	add	r3, r2
 8003178:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	08da      	lsrs	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3720      	adds	r7, #32
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_(
    const reg_udral_physics_kinematics_cartesian_Twist_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08e      	sub	sp, #56	@ 0x38
 8003190:	af04      	add	r7, sp, #16
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x1e>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x1e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80031aa:	f06f 0301 	mvn.w	r3, #1
 80031ae:	e094      	b.n	80032da <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 192UL)
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	2bbf      	cmp	r3, #191	@ 0xbf
 80031bc:	d802      	bhi.n	80031c4 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80031be:	f06f 0302 	mvn.w	r3, #2
 80031c2:	e08a      	b.n	80032da <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.si.unit.velocity.Vector3.1.0 linear
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 12UL;  // Nested object (max) size, in bytes.
 80031c8:	230c      	movs	r3, #12
 80031ca:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_velocity_Vector3_1_0_serialize_(
 80031cc:	68f8      	ldr	r0, [r7, #12]
            &obj->linear, &buffer[offset_bits / 8U], &_size_bytes0_);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_velocity_Vector3_1_0_serialize_(
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	4413      	add	r3, r2
 80031d6:	f107 0214 	add.w	r2, r7, #20
 80031da:	4619      	mov	r1, r3
 80031dc:	f7ff ff7d 	bl	80030da <uavcan_si_unit_velocity_Vector3_1_0_serialize_>
 80031e0:	4603      	mov	r3, r0
 80031e2:	77fb      	strb	r3, [r7, #31]
        if (_err0_ < 0)
 80031e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da02      	bge.n	80031f2 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x66>
        {
            return _err0_;
 80031ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031f0:	e073      	b.n	80032da <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 96ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f8:	4413      	add	r3, r2
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80031fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	2b00      	cmp	r3, #0
 8003204:	d021      	beq.n	800324a <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0xbe>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f1c3 0308 	rsb	r3, r3, #8
 8003214:	77bb      	strb	r3, [r7, #30]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003216:	7fbb      	ldrb	r3, [r7, #30]
 8003218:	9302      	str	r3, [sp, #8]
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	e9cd 2300 	strd	r2, r3, [sp]
 8003226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003228:	6a39      	ldr	r1, [r7, #32]
 800322a:	68b8      	ldr	r0, [r7, #8]
 800322c:	f7ff fbcb 	bl	80029c6 <nunavutSetUxx>
 8003230:	4603      	mov	r3, r0
 8003232:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8003234:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003238:	2b00      	cmp	r3, #0
 800323a:	da02      	bge.n	8003242 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0xb6>
        {
            return _err1_;
 800323c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003240:	e04b      	b.n	80032da <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        offset_bits += _pad0_;
 8003242:	7fbb      	ldrb	r3, [r7, #30]
 8003244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003246:	4413      	add	r3, r2
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.si.unit.angular_velocity.Vector3.1.0 angular
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 12UL;  // Nested object (max) size, in bytes.
 800324a:	230c      	movs	r3, #12
 800324c:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_(
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f103 000c 	add.w	r0, r3, #12
            &obj->angular, &buffer[offset_bits / 8U], &_size_bytes1_);
 8003254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003256:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_(
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	4413      	add	r3, r2
 800325c:	f107 0210 	add.w	r2, r7, #16
 8003260:	4619      	mov	r1, r3
 8003262:	f7ff fee1 	bl	8003028 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_>
 8003266:	4603      	mov	r3, r0
 8003268:	773b      	strb	r3, [r7, #28]
        if (_err2_ < 0)
 800326a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	da02      	bge.n	8003278 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0xec>
        {
            return _err2_;
 8003272:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003276:	e030      	b.n	80032da <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 96ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800327e:	4413      	add	r3, r2
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	2b00      	cmp	r3, #0
 800328a:	d021      	beq.n	80032d0 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x144>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f1c3 0308 	rsb	r3, r3, #8
 800329a:	76fb      	strb	r3, [r7, #27]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 800329c:	7efb      	ldrb	r3, [r7, #27]
 800329e:	9302      	str	r3, [sp, #8]
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9cd 2300 	strd	r2, r3, [sp]
 80032ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ae:	6a39      	ldr	r1, [r7, #32]
 80032b0:	68b8      	ldr	r0, [r7, #8]
 80032b2:	f7ff fb88 	bl	80029c6 <nunavutSetUxx>
 80032b6:	4603      	mov	r3, r0
 80032b8:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 80032ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	da02      	bge.n	80032c8 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x13c>
        {
            return _err3_;
 80032c2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80032c6:	e008      	b.n	80032da <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        offset_bits += _pad1_;
 80032c8:	7efb      	ldrb	r3, [r7, #27]
 80032ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032cc:	4413      	add	r3, r2
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 192ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	08da      	lsrs	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3728      	adds	r7, #40	@ 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <uavcan_si_unit_length_WideVector3_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_length_WideVector3_1_0_serialize_(
    const uavcan_si_unit_length_WideVector3_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b08c      	sub	sp, #48	@ 0x30
 80032e6:	af04      	add	r7, sp, #16
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x1e>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x1e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003300:	f06f 0301 	mvn.w	r3, #1
 8003304:	e042      	b.n	800338c <uavcan_si_unit_length_WideVector3_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 192UL)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	2bbf      	cmp	r3, #191	@ 0xbf
 8003312:	d802      	bhi.n	800331a <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003314:	f06f 0302 	mvn.w	r3, #2
 8003318:	e038      	b.n	800338c <uavcan_si_unit_length_WideVector3_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT((offset_bits + 192ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 3UL * 64UL, &obj->meter[0], 0U);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	9200      	str	r2, [sp, #0]
 8003324:	22c0      	movs	r2, #192	@ 0xc0
 8003326:	69f9      	ldr	r1, [r7, #28]
 8003328:	68b8      	ldr	r0, [r7, #8]
 800332a:	f7ff fa8f 	bl	800284c <nunavutCopyBits>
        offset_bits += 3UL * 64UL;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	33c0      	adds	r3, #192	@ 0xc0
 8003332:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	2b00      	cmp	r3, #0
 800333c:	d021      	beq.n	8003382 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f1c3 0308 	rsb	r3, r3, #8
 800334c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	9302      	str	r3, [sp, #8]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	e9cd 2300 	strd	r2, r3, [sp]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	69b9      	ldr	r1, [r7, #24]
 8003362:	68b8      	ldr	r0, [r7, #8]
 8003364:	f7ff fb2f 	bl	80029c6 <nunavutSetUxx>
 8003368:	4603      	mov	r3, r0
 800336a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800336c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003370:	2b00      	cmp	r3, #0
 8003372:	da02      	bge.n	800337a <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x98>
        {
            return _err0_;
 8003374:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003378:	e008      	b.n	800338c <uavcan_si_unit_length_WideVector3_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	4413      	add	r3, r2
 8003380:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 192ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	08da      	lsrs	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3720      	adds	r7, #32
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_(
    const reg_udral_physics_kinematics_cartesian_Point_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08c      	sub	sp, #48	@ 0x30
 8003398:	af04      	add	r7, sp, #16
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x1e>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x1e>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80033b2:	f06f 0301 	mvn.w	r3, #1
 80033b6:	e051      	b.n	800345c <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xc8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 192UL)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	2bbf      	cmp	r3, #191	@ 0xbf
 80033c4:	d802      	bhi.n	80033cc <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80033c6:	f06f 0302 	mvn.w	r3, #2
 80033ca:	e047      	b.n	800345c <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xc8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]

    {   // uavcan.si.unit.length.WideVector3.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 192ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 24UL;  // Nested object (max) size, in bytes.
 80033d0:	2318      	movs	r3, #24
 80033d2:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_length_WideVector3_1_0_serialize_(
 80033d4:	68f8      	ldr	r0, [r7, #12]
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes0_);
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_length_WideVector3_1_0_serialize_(
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	4413      	add	r3, r2
 80033de:	f107 0210 	add.w	r2, r7, #16
 80033e2:	4619      	mov	r1, r3
 80033e4:	f7ff ff7d 	bl	80032e2 <uavcan_si_unit_length_WideVector3_1_0_serialize_>
 80033e8:	4603      	mov	r3, r0
 80033ea:	75fb      	strb	r3, [r7, #23]
        if (_err0_ < 0)
 80033ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da02      	bge.n	80033fa <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x66>
        {
            return _err0_;
 80033f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033f8:	e030      	b.n	800345c <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xc8>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 192ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	2b00      	cmp	r3, #0
 800340c:	d021      	beq.n	8003452 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xbe>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f1c3 0308 	rsb	r3, r3, #8
 800341c:	75bb      	strb	r3, [r7, #22]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800341e:	7dbb      	ldrb	r3, [r7, #22]
 8003420:	9302      	str	r3, [sp, #8]
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	e9cd 2300 	strd	r2, r3, [sp]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	69b9      	ldr	r1, [r7, #24]
 8003432:	68b8      	ldr	r0, [r7, #8]
 8003434:	f7ff fac7 	bl	80029c6 <nunavutSetUxx>
 8003438:	4603      	mov	r3, r0
 800343a:	757b      	strb	r3, [r7, #21]
        if (_err1_ < 0)
 800343c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003440:	2b00      	cmp	r3, #0
 8003442:	da02      	bge.n	800344a <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xb6>
        {
            return _err1_;
 8003444:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003448:	e008      	b.n	800345c <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xc8>
        }
        offset_bits += _pad0_;
 800344a:	7dbb      	ldrb	r3, [r7, #22]
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	4413      	add	r3, r2
 8003450:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 192ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	08da      	lsrs	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3720      	adds	r7, #32
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <uavcan_si_unit_angle_Quaternion_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Quaternion_1_0_serialize_(
    const uavcan_si_unit_angle_Quaternion_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08c      	sub	sp, #48	@ 0x30
 8003468:	af04      	add	r7, sp, #16
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x1e>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x1e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003482:	f06f 0301 	mvn.w	r3, #1
 8003486:	e042      	b.n	800350e <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 128UL)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	2b7f      	cmp	r3, #127	@ 0x7f
 8003494:	d802      	bhi.n	800349c <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003496:	f06f 0302 	mvn.w	r3, #2
 800349a:	e038      	b.n	800350e <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 4UL * 32UL, &obj->wxyz[0], 0U);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	9200      	str	r2, [sp, #0]
 80034a6:	2280      	movs	r2, #128	@ 0x80
 80034a8:	69f9      	ldr	r1, [r7, #28]
 80034aa:	68b8      	ldr	r0, [r7, #8]
 80034ac:	f7ff f9ce 	bl	800284c <nunavutCopyBits>
        offset_bits += 4UL * 32UL;
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	3380      	adds	r3, #128	@ 0x80
 80034b4:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d021      	beq.n	8003504 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f1c3 0308 	rsb	r3, r3, #8
 80034ce:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	9302      	str	r3, [sp, #8]
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	e9cd 2300 	strd	r2, r3, [sp]
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	69b9      	ldr	r1, [r7, #24]
 80034e4:	68b8      	ldr	r0, [r7, #8]
 80034e6:	f7ff fa6e 	bl	80029c6 <nunavutSetUxx>
 80034ea:	4603      	mov	r3, r0
 80034ec:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80034ee:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da02      	bge.n	80034fc <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x98>
        {
            return _err0_;
 80034f6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034fa:	e008      	b.n	800350e <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 128ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_(
    const reg_udral_physics_kinematics_cartesian_Pose_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b08e      	sub	sp, #56	@ 0x38
 800351a:	af04      	add	r7, sp, #16
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x1e>
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x1e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d102      	bne.n	800353a <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003534:	f06f 0301 	mvn.w	r3, #1
 8003538:	e095      	b.n	8003666 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 320UL)
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003548:	d202      	bcs.n	8003550 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800354a:	f06f 0302 	mvn.w	r3, #2
 800354e:	e08a      	b.n	8003666 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // reg.udral.physics.kinematics.cartesian.Point.0.1 position
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 192ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 24UL;  // Nested object (max) size, in bytes.
 8003554:	2318      	movs	r3, #24
 8003556:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_(
 8003558:	68f8      	ldr	r0, [r7, #12]
            &obj->position, &buffer[offset_bits / 8U], &_size_bytes0_);
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_(
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	4413      	add	r3, r2
 8003562:	f107 0214 	add.w	r2, r7, #20
 8003566:	4619      	mov	r1, r3
 8003568:	f7ff ff14 	bl	8003394 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_>
 800356c:	4603      	mov	r3, r0
 800356e:	77fb      	strb	r3, [r7, #31]
        if (_err0_ < 0)
 8003570:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003574:	2b00      	cmp	r3, #0
 8003576:	da02      	bge.n	800357e <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x68>
        {
            return _err0_;
 8003578:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800357c:	e073      	b.n	8003666 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 192ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003584:	4413      	add	r3, r2
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	2b00      	cmp	r3, #0
 8003590:	d021      	beq.n	80035d6 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0xc0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f1c3 0308 	rsb	r3, r3, #8
 80035a0:	77bb      	strb	r3, [r7, #30]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80035a2:	7fbb      	ldrb	r3, [r7, #30]
 80035a4:	9302      	str	r3, [sp, #8]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9cd 2300 	strd	r2, r3, [sp]
 80035b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b4:	6a39      	ldr	r1, [r7, #32]
 80035b6:	68b8      	ldr	r0, [r7, #8]
 80035b8:	f7ff fa05 	bl	80029c6 <nunavutSetUxx>
 80035bc:	4603      	mov	r3, r0
 80035be:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 80035c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	da02      	bge.n	80035ce <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0xb8>
        {
            return _err1_;
 80035c8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80035cc:	e04b      	b.n	8003666 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
        }
        offset_bits += _pad0_;
 80035ce:	7fbb      	ldrb	r3, [r7, #30]
 80035d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d2:	4413      	add	r3, r2
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.si.unit.angle.Quaternion.1.0 orientation
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 16UL;  // Nested object (max) size, in bytes.
 80035d6:	2310      	movs	r3, #16
 80035d8:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angle_Quaternion_1_0_serialize_(
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f103 0018 	add.w	r0, r3, #24
            &obj->orientation, &buffer[offset_bits / 8U], &_size_bytes1_);
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angle_Quaternion_1_0_serialize_(
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	4413      	add	r3, r2
 80035e8:	f107 0210 	add.w	r2, r7, #16
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7ff ff39 	bl	8003464 <uavcan_si_unit_angle_Quaternion_1_0_serialize_>
 80035f2:	4603      	mov	r3, r0
 80035f4:	773b      	strb	r3, [r7, #28]
        if (_err2_ < 0)
 80035f6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	da02      	bge.n	8003604 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0xee>
        {
            return _err2_;
 80035fe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003602:	e030      	b.n	8003666 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 128ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360a:	4413      	add	r3, r2
 800360c:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	2b00      	cmp	r3, #0
 8003616:	d021      	beq.n	800365c <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x146>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f1c3 0308 	rsb	r3, r3, #8
 8003626:	76fb      	strb	r3, [r7, #27]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8003628:	7efb      	ldrb	r3, [r7, #27]
 800362a:	9302      	str	r3, [sp, #8]
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9cd 2300 	strd	r2, r3, [sp]
 8003638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363a:	6a39      	ldr	r1, [r7, #32]
 800363c:	68b8      	ldr	r0, [r7, #8]
 800363e:	f7ff f9c2 	bl	80029c6 <nunavutSetUxx>
 8003642:	4603      	mov	r3, r0
 8003644:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8003646:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800364a:	2b00      	cmp	r3, #0
 800364c:	da02      	bge.n	8003654 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x13e>
        {
            return _err3_;
 800364e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003652:	e008      	b.n	8003666 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
        }
        offset_bits += _pad1_;
 8003654:	7efb      	ldrb	r3, [r7, #27]
 8003656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003658:	4413      	add	r3, r2
 800365a:	627b      	str	r3, [r7, #36]	@ 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 320ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365e:	08da      	lsrs	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3728      	adds	r7, #40	@ 0x28
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_cartesian_State_0_1_serialize_(
    const reg_udral_physics_kinematics_cartesian_State_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b08e      	sub	sp, #56	@ 0x38
 8003672:	af04      	add	r7, sp, #16
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x1e>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x1e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800368c:	f06f 0301 	mvn.w	r3, #1
 8003690:	e095      	b.n	80037be <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 512UL)
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a0:	d202      	bcs.n	80036a8 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80036a2:	f06f 0302 	mvn.w	r3, #2
 80036a6:	e08a      	b.n	80037be <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // reg.udral.physics.kinematics.cartesian.Pose.0.1 pose
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 320ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 40UL;  // Nested object (max) size, in bytes.
 80036ac:	2328      	movs	r3, #40	@ 0x28
 80036ae:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_(
 80036b0:	68f8      	ldr	r0, [r7, #12]
            &obj->pose, &buffer[offset_bits / 8U], &_size_bytes0_);
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_(
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4413      	add	r3, r2
 80036ba:	f107 0214 	add.w	r2, r7, #20
 80036be:	4619      	mov	r1, r3
 80036c0:	f7ff ff29 	bl	8003516 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_>
 80036c4:	4603      	mov	r3, r0
 80036c6:	77fb      	strb	r3, [r7, #31]
        if (_err0_ < 0)
 80036c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	da02      	bge.n	80036d6 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x68>
        {
            return _err0_;
 80036d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036d4:	e073      	b.n	80037be <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 320ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036dc:	4413      	add	r3, r2
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d021      	beq.n	800372e <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0xc0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f1c3 0308 	rsb	r3, r3, #8
 80036f8:	77bb      	strb	r3, [r7, #30]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80036fa:	7fbb      	ldrb	r3, [r7, #30]
 80036fc:	9302      	str	r3, [sp, #8]
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9cd 2300 	strd	r2, r3, [sp]
 800370a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370c:	6a39      	ldr	r1, [r7, #32]
 800370e:	68b8      	ldr	r0, [r7, #8]
 8003710:	f7ff f959 	bl	80029c6 <nunavutSetUxx>
 8003714:	4603      	mov	r3, r0
 8003716:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8003718:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800371c:	2b00      	cmp	r3, #0
 800371e:	da02      	bge.n	8003726 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0xb8>
        {
            return _err1_;
 8003720:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003724:	e04b      	b.n	80037be <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
        }
        offset_bits += _pad0_;
 8003726:	7fbb      	ldrb	r3, [r7, #30]
 8003728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372a:	4413      	add	r3, r2
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // reg.udral.physics.kinematics.cartesian.Twist.0.1 twist
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 192ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 24UL;  // Nested object (max) size, in bytes.
 800372e:	2318      	movs	r3, #24
 8003730:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_(
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f103 0028 	add.w	r0, r3, #40	@ 0x28
            &obj->twist, &buffer[offset_bits / 8U], &_size_bytes1_);
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_(
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	4413      	add	r3, r2
 8003740:	f107 0210 	add.w	r2, r7, #16
 8003744:	4619      	mov	r1, r3
 8003746:	f7ff fd21 	bl	800318c <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_>
 800374a:	4603      	mov	r3, r0
 800374c:	773b      	strb	r3, [r7, #28]
        if (_err2_ < 0)
 800374e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	da02      	bge.n	800375c <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0xee>
        {
            return _err2_;
 8003756:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800375a:	e030      	b.n	80037be <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 192ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003762:	4413      	add	r3, r2
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	2b00      	cmp	r3, #0
 800376e:	d021      	beq.n	80037b4 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x146>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8003770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f1c3 0308 	rsb	r3, r3, #8
 800377e:	76fb      	strb	r3, [r7, #27]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8003780:	7efb      	ldrb	r3, [r7, #27]
 8003782:	9302      	str	r3, [sp, #8]
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9cd 2300 	strd	r2, r3, [sp]
 8003790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003792:	6a39      	ldr	r1, [r7, #32]
 8003794:	68b8      	ldr	r0, [r7, #8]
 8003796:	f7ff f916 	bl	80029c6 <nunavutSetUxx>
 800379a:	4603      	mov	r3, r0
 800379c:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 800379e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	da02      	bge.n	80037ac <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x13e>
        {
            return _err3_;
 80037a6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80037aa:	e008      	b.n	80037be <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
        }
        offset_bits += _pad1_;
 80037ac:	7efb      	ldrb	r3, [r7, #27]
 80037ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b0:	4413      	add	r3, r2
 80037b2:	627b      	str	r3, [r7, #36]	@ 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 512ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	08da      	lsrs	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3728      	adds	r7, #40	@ 0x28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fb06 	bl	8003de4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
      { }
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <error_handler>:


std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;

void error_handler() { Error_Handler(); }
 80037fe:	b580      	push	{r7, lr}
 8003800:	af00      	add	r7, sp, #0
 8003802:	f7fe fe73 	bl	80024ec <Error_Handler>
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}

0800380a <micros_64>:
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 800380a:	b5b0      	push	{r4, r5, r7, lr}
 800380c:	af00      	add	r7, sp, #0
 800380e:	f002 f967 	bl	8005ae0 <HAL_GetTick>
 8003812:	4603      	mov	r3, r0
 8003814:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	2200      	movs	r2, #0
 800381e:	461c      	mov	r4, r3
 8003820:	4615      	mov	r5, r2
 8003822:	4622      	mov	r2, r4
 8003824:	462b      	mov	r3, r5
 8003826:	4610      	mov	r0, r2
 8003828:	4619      	mov	r1, r3
 800382a:	bdb0      	pop	{r4, r5, r7, pc}

0800382c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	1d1a      	adds	r2, r3, #4
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f000 fb3d 	bl	8003ec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ffdf 	bl	800382c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff ff9f 	bl	80037c6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 800389e:	687c      	ldr	r4, [r7, #4]
 80038a0:	f107 0308 	add.w	r3, r7, #8
 80038a4:	6839      	ldr	r1, [r7, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff ffd6 	bl	8003858 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80038ac:	f107 0308 	add.w	r3, r7, #8
 80038b0:	f641 5255 	movw	r2, #7509	@ 0x1d55
 80038b4:	4619      	mov	r1, r3
 80038b6:	4620      	mov	r0, r4
 80038b8:	f000 fb1d 	bl	8003ef6 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 80038bc:	f107 0308 	add.w	r3, r7, #8
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ffd9 	bl	8003878 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80038c6:	4a04      	ldr	r2, [pc, #16]	@ (80038d8 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}
 80038d6:	bf00      	nop
 80038d8:	08012b58 	.word	0x08012b58

080038dc <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80038e8:	2120      	movs	r1, #32
 80038ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038ee:	f003 fadd 	bl	8006eac <HAL_GPIO_TogglePin>
    	HAL_IWDG_Refresh(&hiwdg);
 80038f2:	4803      	ldr	r0, [pc, #12]	@ (8003900 <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer+0x24>)
 80038f4:	f004 ff4c 	bl	8008790 <HAL_IWDG_Refresh>
    }
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	200003b8 	.word	0x200003b8

08003904 <send_IMU>:
};



void send_IMU(float* qw, float* qx, float* qy, float* qz, float* ax, float* ay, float* az, float* gx, float* gy, float* gz)
{
 8003904:	b5b0      	push	{r4, r5, r7, lr}
 8003906:	b0aa      	sub	sp, #168	@ 0xa8
 8003908:	af06      	add	r7, sp, #24
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
	static uint8_t state_buffer[State::buffer_size];
	static CanardTransferID int_transfer_id = 0;

	reg_udral_physics_kinematics_cartesian_Pose_0_1 imu_pose;
	imu_pose.orientation = {*qw, *qx, *qy, *qz};
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8003926:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 800392a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800392e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	reg_udral_physics_kinematics_cartesian_Twist_0_1 imu_twist;
	imu_twist.angular = {*ax, *ay, *az};
 8003932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003936:	6819      	ldr	r1, [r3, #0]
 8003938:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8003946:	663a      	str	r2, [r7, #96]	@ 0x60
 8003948:	667b      	str	r3, [r7, #100]	@ 0x64
	imu_twist.linear = {*gx, *gy, *gz};
 800394a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800394e:	6819      	ldr	r1, [r3, #0]
 8003950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6539      	str	r1, [r7, #80]	@ 0x50
 800395e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003960:	65bb      	str	r3, [r7, #88]	@ 0x58

	reg_udral_physics_kinematics_cartesian_State_0_1 state_msg =
	{
			.pose = imu_pose,
			.twist = imu_twist
	};
 8003962:	f107 0410 	add.w	r4, r7, #16
 8003966:	f107 0568 	add.w	r5, r7, #104	@ 0x68
 800396a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800396c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800396e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003972:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003976:	e884 0003 	stmia.w	r4, {r0, r1}
 800397a:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800397e:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8003982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003986:	e895 0003 	ldmia.w	r5, {r0, r1}
 800398a:	e884 0003 	stmia.w	r4, {r0, r1}
    interface->send_msg<State>(
 800398e:	480b      	ldr	r0, [pc, #44]	@ (80039bc <send_IMU+0xb8>)
 8003990:	f000 fae0 	bl	8003f54 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003994:	f107 0110 	add.w	r1, r7, #16
 8003998:	2304      	movs	r3, #4
 800399a:	9304      	str	r3, [sp, #16]
 800399c:	4a08      	ldr	r2, [pc, #32]	@ (80039c0 <send_IMU+0xbc>)
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039a6:	4b07      	ldr	r3, [pc, #28]	@ (80039c4 <send_IMU+0xc0>)
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	f240 5339 	movw	r3, #1337	@ 0x539
 80039ae:	4a06      	ldr	r2, [pc, #24]	@ (80039c8 <send_IMU+0xc4>)
 80039b0:	f000 fadc 	bl	8003f6c <_ZNK15CyphalInterface8send_msgI5StateEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&state_msg,
		state_buffer,
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}
 80039b4:	bf00      	nop
 80039b6:	3790      	adds	r7, #144	@ 0x90
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bdb0      	pop	{r4, r5, r7, pc}
 80039bc:	20000420 	.word	0x20000420
 80039c0:	000f4240 	.word	0x000f4240
 80039c4:	2000048c 	.word	0x2000048c
 80039c8:	2000044c 	.word	0x2000044c

080039cc <heartbeat>:

void heartbeat() {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af06      	add	r7, sp, #24
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 80039d2:	463b      	mov	r3, r7
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 80039da:	4b0f      	ldr	r3, [pc, #60]	@ (8003a18 <heartbeat+0x4c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	603b      	str	r3, [r7, #0]
    interface->send_msg<HBeat>(
 80039e0:	480e      	ldr	r0, [pc, #56]	@ (8003a1c <heartbeat+0x50>)
 80039e2:	f000 fab7 	bl	8003f54 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80039e6:	4639      	mov	r1, r7
 80039e8:	2304      	movs	r3, #4
 80039ea:	9304      	str	r3, [sp, #16]
 80039ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003a20 <heartbeat+0x54>)
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <heartbeat+0x58>)
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	f641 5355 	movw	r3, #7509	@ 0x1d55
 80039fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003a28 <heartbeat+0x5c>)
 8003a00:	f000 fad3 	bl	8003faa <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 8003a04:	4b04      	ldr	r3, [pc, #16]	@ (8003a18 <heartbeat+0x4c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	4a03      	ldr	r2, [pc, #12]	@ (8003a18 <heartbeat+0x4c>)
 8003a0c:	6013      	str	r3, [r2, #0]

}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000498 	.word	0x20000498
 8003a1c:	20000420 	.word	0x20000420
 8003a20:	000f4240 	.word	0x000f4240
 8003a24:	20000497 	.word	0x20000497
 8003a28:	20000490 	.word	0x20000490

08003a2c <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 8003a2c:	b590      	push	{r4, r7, lr}
 8003a2e:	b089      	sub	sp, #36	@ 0x24
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 8003a34:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa4 <setup_cyphal+0x78>)
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	2107      	movs	r1, #7
 8003a40:	4819      	ldr	r0, [pc, #100]	@ (8003aa8 <setup_cyphal+0x7c>)
 8003a42:	f000 fad1 	bl	8003fe8 <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 8003a46:	4602      	mov	r2, r0
 8003a48:	f107 0308 	add.w	r3, r7, #8
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 faf3 	bl	800403a <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		CyphalInterface::create_bss<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 8003a54:	f107 0308 	add.w	r3, r7, #8
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4814      	ldr	r0, [pc, #80]	@ (8003aac <setup_cyphal+0x80>)
 8003a5c:	f000 fafc 	bl	8004058 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 8003a60:	f107 0308 	add.w	r3, r7, #8
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff07 	bl	8003878 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 8003a6a:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8003a6e:	f009 ff78 	bl	800d962 <_Znwj>
 8003a72:	4603      	mov	r3, r0
 8003a74:	461c      	mov	r4, r3
 8003a76:	f107 0310 	add.w	r3, r7, #16
 8003a7a:	490c      	ldr	r1, [pc, #48]	@ (8003aac <setup_cyphal+0x80>)
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff feeb 	bl	8003858 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8003a82:	f107 0310 	add.w	r3, r7, #16
 8003a86:	4619      	mov	r1, r3
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7ff ff03 	bl	8003894 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8003a8e:	4b08      	ldr	r3, [pc, #32]	@ (8003ab0 <setup_cyphal+0x84>)
 8003a90:	601c      	str	r4, [r3, #0]
 8003a92:	f107 0310 	add.w	r3, r7, #16
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff feee 	bl	8003878 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8003a9c:	bf00      	nop
 8003a9e:	371c      	adds	r7, #28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd90      	pop	{r4, r7, pc}
 8003aa4:	20000428 	.word	0x20000428
 8003aa8:	200003c8 	.word	0x200003c8
 8003aac:	20000420 	.word	0x20000420
 8003ab0:	20000448 	.word	0x20000448

08003ab4 <cyphal_loop>:

void cyphal_loop() {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
    interface->loop();
 8003ab8:	4804      	ldr	r0, [pc, #16]	@ (8003acc <cyphal_loop+0x18>)
 8003aba:	f000 fa4b 	bl	8003f54 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f007 f98d 	bl	800ade0 <_ZN15CyphalInterface4loopEv>
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000420 	.word	0x20000420

08003ad0 <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	@ 0x30
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 8003ad8:	f107 0320 	add.w	r3, r7, #32
 8003adc:	2107      	movs	r1, #7
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f009 fef0 	bl	800d8c4 <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(1125);//JS_SUB_PORT_ID
 8003ae4:	f107 0318 	add.w	r3, r7, #24
 8003ae8:	f240 4165 	movw	r1, #1125	@ 0x465
 8003aec:	4618      	mov	r0, r3
 8003aee:	f009 fec9 	bl	800d884 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 8003af2:	f107 0310 	add.w	r3, r7, #16
 8003af6:	f641 5155 	movw	r1, #7509	@ 0x1d55
 8003afa:	4618      	mov	r0, r3
 8003afc:	f009 fec2 	bl	800d884 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_consolidated = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 8003b00:	f107 0308 	add.w	r3, r7, #8
 8003b04:	f107 0218 	add.w	r2, r7, #24
 8003b08:	f107 0120 	add.w	r1, r7, #32
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f009 fefb 	bl	800d908 <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8003b12:	4b45      	ldr	r3, [pc, #276]	@ (8003c28 <cyphal_can_starter+0x158>)
 8003b14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b18:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 8003b1a:	4b43      	ldr	r3, [pc, #268]	@ (8003c28 <cyphal_can_starter+0x158>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003b20:	4b41      	ldr	r3, [pc, #260]	@ (8003c28 <cyphal_can_starter+0x158>)
 8003b22:	2202      	movs	r2, #2
 8003b24:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003b26:	4b40      	ldr	r3, [pc, #256]	@ (8003c28 <cyphal_can_starter+0x158>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	4a3e      	ldr	r2, [pc, #248]	@ (8003c28 <cyphal_can_starter+0x158>)
 8003b30:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	4a3c      	ldr	r2, [pc, #240]	@ (8003c28 <cyphal_can_starter+0x158>)
 8003b36:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8003b38:	4b3c      	ldr	r3, [pc, #240]	@ (8003c2c <cyphal_can_starter+0x15c>)
 8003b3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b3e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8003b40:	4b3a      	ldr	r3, [pc, #232]	@ (8003c2c <cyphal_can_starter+0x15c>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003b46:	4b39      	ldr	r3, [pc, #228]	@ (8003c2c <cyphal_can_starter+0x15c>)
 8003b48:	2202      	movs	r2, #2
 8003b4a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003b4c:	4b37      	ldr	r3, [pc, #220]	@ (8003c2c <cyphal_can_starter+0x15c>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	4a35      	ldr	r2, [pc, #212]	@ (8003c2c <cyphal_can_starter+0x15c>)
 8003b56:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	4a34      	ldr	r2, [pc, #208]	@ (8003c2c <cyphal_can_starter+0x15c>)
 8003b5c:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8003b5e:	4b34      	ldr	r3, [pc, #208]	@ (8003c30 <cyphal_can_starter+0x160>)
 8003b60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b64:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 1;
 8003b66:	4b32      	ldr	r3, [pc, #200]	@ (8003c30 <cyphal_can_starter+0x160>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003b6c:	4b30      	ldr	r3, [pc, #192]	@ (8003c30 <cyphal_can_starter+0x160>)
 8003b6e:	2202      	movs	r2, #2
 8003b70:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003b72:	4b2f      	ldr	r3, [pc, #188]	@ (8003c30 <cyphal_can_starter+0x160>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8003c30 <cyphal_can_starter+0x160>)
 8003b7c:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	4a2b      	ldr	r2, [pc, #172]	@ (8003c30 <cyphal_can_starter+0x160>)
 8003b82:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8003b84:	2300      	movs	r3, #0
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	2102      	movs	r1, #2
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f002 fd20 	bl	80065d4 <HAL_FDCAN_ConfigGlobalFilter>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf14      	ite	ne
 8003b9a:	2301      	movne	r3, #1
 8003b9c:	2300      	moveq	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 8003ba4:	f7fe fca2 	bl	80024ec <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 8003ba8:	491f      	ldr	r1, [pc, #124]	@ (8003c28 <cyphal_can_starter+0x158>)
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f002 fcb8 	bl	8006520 <HAL_FDCAN_ConfigFilter>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <cyphal_can_starter+0xf4>
	  Error_Handler();
 8003bc0:	f7fe fc94 	bl	80024ec <Error_Handler>
	}
//	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
//	  Error_Handler();
//	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 8003bc4:	491a      	ldr	r1, [pc, #104]	@ (8003c30 <cyphal_can_starter+0x160>)
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f002 fcaa 	bl	8006520 <HAL_FDCAN_ConfigFilter>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bf14      	ite	ne
 8003bd2:	2301      	movne	r3, #1
 8003bd4:	2300      	moveq	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <cyphal_can_starter+0x110>
	  Error_Handler();
 8003bdc:	f7fe fc86 	bl	80024ec <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 8003be0:	2200      	movs	r2, #0
 8003be2:	2105      	movs	r1, #5
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f002 fd26 	bl	8006636 <HAL_FDCAN_ConfigTxDelayCompensation>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <cyphal_can_starter+0x12e>
	  Error_Handler();
 8003bfa:	f7fe fc77 	bl	80024ec <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f002 fd3b 	bl	800667a <HAL_FDCAN_EnableTxDelayCompensation>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <cyphal_can_starter+0x148>
	  Error_Handler();
 8003c14:	f7fe fc6a 	bl	80024ec <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f002 fd4f 	bl	80066bc <HAL_FDCAN_Start>
}
 8003c1e:	bf00      	nop
 8003c20:	3728      	adds	r7, #40	@ 0x28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	200004cc 	.word	0x200004cc
 8003c2c:	2000049c 	.word	0x2000049c
 8003c30:	200004b4 	.word	0x200004b4

08003c34 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
      { delete this; }
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3304      	adds	r3, #4
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	461a      	mov	r2, r3
 8003c62:	2300      	movs	r3, #0
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	6053      	str	r3, [r2, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	6053      	str	r3, [r2, #4]
 8003c90:	6093      	str	r3, [r2, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ffde 	bl	8003c56 <_ZNSt14_Function_baseC1Ev>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 8003ca0:	6838      	ldr	r0, [r7, #0]
 8003ca2:	f000 fa0d 	bl	80040c0 <_ZNKSt8functionIFyvEEcvbEv>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00d      	beq.n	8003cc8 <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	6839      	ldr	r1, [r7, #0]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
	  }
      }
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	6053      	str	r3, [r2, #4]
 8003ce6:	6093      	str	r3, [r2, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ffb3 	bl	8003c56 <_ZNSt14_Function_baseC1Ev>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8003cf6:	6838      	ldr	r0, [r7, #0]
 8003cf8:	f000 f9f2 	bl	80040e0 <_ZNKSt8functionIFvvEEcvbEv>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00d      	beq.n	8003d1e <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	609a      	str	r2, [r3, #8]
      }
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      _GLIBCXX23_CONSTEXPR
      explicit operator bool() const noexcept
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f9e5 	bl	8004100 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
	return get();
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f9d4 	bl	8004100 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8003d58:	4603      	mov	r3, r0
      }
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	6039      	str	r1, [r7, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f9d1 	bl	800411a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6839      	ldr	r1, [r7, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff ffe6 	bl	8003d62 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f9c9 	bl	8004142 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8003db0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00c      	beq.n	8003dd4 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9ce 	bl	800415c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f9d7 	bl	8004176 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f000 f9dc 	bl	800418c <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
      }
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd90      	pop	{r4, r7, pc}

08003de4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fe fb98 	bl	800252e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	461a      	mov	r2, r3
 8003e16:	2300      	movs	r3, #0
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	6053      	str	r3, [r2, #4]
 8003e1c:	6093      	str	r3, [r2, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff18 	bl	8003c56 <_ZNSt14_Function_baseC1Ev>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8003e2c:	6838      	ldr	r0, [r7, #0]
 8003e2e:	f000 f9be 	bl	80041ae <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00e      	beq.n	8003e56 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8003e38:	687c      	ldr	r4, [r7, #4]
 8003e3a:	6838      	ldr	r0, [r7, #0]
 8003e3c:	f000 f9c7 	bl	80041ce <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4619      	mov	r1, r3
 8003e44:	4620      	mov	r0, r4
 8003e46:	f000 f9cd 	bl	80041e4 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a04      	ldr	r2, [pc, #16]	@ (8003e60 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 8003e4e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a04      	ldr	r2, [pc, #16]	@ (8003e64 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 8003e54:	609a      	str	r2, [r3, #8]
	    }
	}
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd90      	pop	{r4, r7, pc}
 8003e60:	08004209 	.word	0x08004209
 8003e64:	0800422d 	.word	0x0800422d

08003e68 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	461a      	mov	r2, r3
 8003e76:	2300      	movs	r3, #0
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	6053      	str	r3, [r2, #4]
 8003e7c:	6093      	str	r3, [r2, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fee8 	bl	8003c56 <_ZNSt14_Function_baseC1Ev>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8003e8c:	6838      	ldr	r0, [r7, #0]
 8003e8e:	f000 f9ec 	bl	800426a <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00e      	beq.n	8003eb6 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8003e98:	687c      	ldr	r4, [r7, #4]
 8003e9a:	6838      	ldr	r0, [r7, #0]
 8003e9c:	f000 f9f5 	bl	800428a <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	f000 f9fb 	bl	80042a0 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a04      	ldr	r2, [pc, #16]	@ (8003ec0 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 8003eae:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a04      	ldr	r2, [pc, #16]	@ (8003ec4 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 8003eb4:	609a      	str	r2, [r3, #8]
	}
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd90      	pop	{r4, r7, pc}
 8003ec0:	080042c5 	.word	0x080042c5
 8003ec4:	080042e3 	.word	0x080042e3

08003ec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d004      	beq.n	8003eec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe fb12 	bl	8002510 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b086      	sub	sp, #24
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	4613      	mov	r3, r2
 8003f02:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8003f04:	f107 0310 	add.w	r3, r7, #16
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff fca4 	bl	8003858 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8003f10:	88fa      	ldrh	r2, [r7, #6]
 8003f12:	f107 0110 	add.w	r1, r7, #16
 8003f16:	2300      	movs	r3, #0
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fa01 	bl	8004320 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8003f1e:	f107 0310 	add.w	r3, r7, #16
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fca8 	bl	8003878 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	4a04      	ldr	r2, [pc, #16]	@ (8003f50 <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	08012b78 	.word	0x08012b78

08003f54 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	return _M_get();
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fa11 	bl	8004384 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8003f62:	4603      	mov	r3, r0
      }
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_ZNK15CyphalInterface8send_msgI5StateEEvPNT_4TypeEPhtS5_y14CanardPriority>:
    );
    (*transfer_id)++;
}

template <typename TypeAlias>
inline void CyphalInterface::send_msg(
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	@ 0x28
 8003f70:	af06      	add	r7, sp, #24
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	807b      	strh	r3, [r7, #2]
    CanardPortID port,
    CanardTransferID *transfer_id,
    uint64_t timeout_delta,
    CanardPriority priority
) const {
    send<TypeAlias>(
 8003f7a:	8879      	ldrh	r1, [r7, #2]
 8003f7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f84:	23ff      	movs	r3, #255	@ 0xff
 8003f86:	9303      	str	r3, [sp, #12]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9302      	str	r3, [sp, #8]
 8003f8c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	460b      	mov	r3, r1
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f9fd 	bl	800439c <_ZNK15CyphalInterface4sendI5StateEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
        priority,
        CanardTransferKindMessage,
        CANARD_NODE_ID_UNSET,
        timeout_delta
    );
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b08a      	sub	sp, #40	@ 0x28
 8003fae:	af06      	add	r7, sp, #24
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 8003fb8:	8879      	ldrh	r1, [r7, #2]
 8003fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fc2:	23ff      	movs	r3, #255	@ 0xff
 8003fc4:	9303      	str	r3, [sp, #12]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	9302      	str	r3, [sp, #8]
 8003fca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fa28 	bl	8004430 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create_bss(
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b08b      	sub	sp, #44	@ 0x2c
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 8003ff8:	f107 030c 	add.w	r3, r7, #12
 8003ffc:	61fb      	str	r3, [r7, #28]
        AbstractCANProvider* provider  = Provider::template create_bss<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config);
 8003ffe:	7afa      	ldrb	r2, [r7, #11]
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	69f8      	ldr	r0, [r7, #28]
 800400a:	f000 fa5b 	bl	80044c4 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 800400e:	61b8      	str	r0, [r7, #24]

        std::byte* interface_ptr = *inout_buffer;
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	617b      	str	r3, [r7, #20]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config, provider);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	4619      	mov	r1, r3
 800401a:	200c      	movs	r0, #12
 800401c:	f7fe fa6c 	bl	80024f8 <_ZnwjPv>
 8004020:	4604      	mov	r4, r0
 8004022:	7af9      	ldrb	r1, [r7, #11]
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004028:	4620      	mov	r0, r4
 800402a:	f7fe fb97 	bl	800275c <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>
 800402e:	613c      	str	r4, [r7, #16]

        return interface;
 8004030:	693b      	ldr	r3, [r7, #16]
    }
 8004032:	4618      	mov	r0, r3
 8004034:	3724      	adds	r7, #36	@ 0x24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd90      	pop	{r4, r7, pc}

0800403a <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 800403a:	b580      	push	{r7, lr}
 800403c:	b082      	sub	sp, #8
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6839      	ldr	r1, [r7, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fa89 	bl	8004560 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8004062:	687c      	ldr	r4, [r7, #4]
 8004064:	6838      	ldr	r0, [r7, #0]
 8004066:	f000 fa93 	bl	8004590 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 800406a:	4603      	mov	r3, r0
 800406c:	4619      	mov	r1, r3
 800406e:	4620      	mov	r0, r4
 8004070:	f000 fa99 	bl	80045a6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8004074:	687b      	ldr	r3, [r7, #4]
      }
 8004076:	4618      	mov	r0, r3
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	bd90      	pop	{r4, r7, pc}
	...

08004080 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
      { }
 8004088:	4a04      	ldr	r2, [pc, #16]	@ (800409c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	08012b9c 	.word	0x08012b9c

080040a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
      { }
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ffe9 	bl	8004080 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80040ae:	210c      	movs	r1, #12
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f009 fc54 	bl	800d95e <_ZdlPvj>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return `true` when this function object contains a target,
       *  or `false` when it is empty.
       *
       *  This function will not throw exceptions.
       */
      explicit operator bool() const noexcept
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe fa88 	bl	80025e0 <_ZNKSt14_Function_base8_M_emptyEv>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f083 0301 	eor.w	r3, r3, #1
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe fa78 	bl	80025e0 <_ZNKSt14_Function_base8_M_emptyEv>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f083 0301 	eor.w	r3, r3, #1
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fa6a 	bl	80045e4 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8004110:	4603      	mov	r3, r0
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800411a:	b590      	push	{r4, r7, lr}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fa6a 	bl	8004600 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800412c:	683c      	ldr	r4, [r7, #0]
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f807 	bl	8004142 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8004134:	4603      	mov	r3, r0
 8004136:	601c      	str	r4, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bd90      	pop	{r4, r7, pc}

08004142 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fa64 	bl	800461a <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004152:	4603      	mov	r3, r0
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fa64 	bl	8004634 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 800416c:	4603      	mov	r3, r0
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x1a>
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	3218      	adds	r2, #24
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	4790      	blx	r2
      }
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf14      	ite	ne
 80041bc:	2301      	movne	r3, #1
 80041be:	2300      	moveq	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	4618      	mov	r0, r3
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80041e4:	b590      	push	{r4, r7, lr}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80041ee:	6838      	ldr	r0, [r7, #0]
 80041f0:	f7ff ffed 	bl	80041ce <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80041f4:	4603      	mov	r3, r0
 80041f6:	4622      	mov	r2, r4
 80041f8:	4619      	mov	r1, r3
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa27 	bl	800464e <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	bd90      	pop	{r4, r7, pc}

08004208 <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fa34 	bl	800467e <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8004216:	4603      	mov	r3, r0
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fa40 	bl	800469e <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
      }
 8004222:	4610      	mov	r0, r2
 8004224:	4619      	mov	r1, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	4613      	mov	r3, r2
 8004238:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d109      	bne.n	8004254 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8004240:	68b8      	ldr	r0, [r7, #8]
 8004242:	f000 fa1c 	bl	800467e <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8004246:	4604      	mov	r4, r0
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fa3b 	bl	80046c4 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 800424e:	4603      	mov	r3, r0
 8004250:	601c      	str	r4, [r3, #0]
	    break;
 8004252:	e005      	b.n	8004260 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	461a      	mov	r2, r3
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fa3e 	bl	80046dc <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8004260:	2300      	movs	r3, #0
      }
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	bd90      	pop	{r4, r7, pc}

0800426a <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf14      	ite	ne
 8004278:	2301      	movne	r3, #1
 800427a:	2300      	moveq	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80042a0:	b590      	push	{r4, r7, lr}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80042aa:	6838      	ldr	r0, [r7, #0]
 80042ac:	f7ff ffed 	bl	800428a <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80042b0:	4603      	mov	r3, r0
 80042b2:	4622      	mov	r2, r4
 80042b4:	4619      	mov	r1, r3
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fa4a 	bl	8004750 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd90      	pop	{r4, r7, pc}

080042c4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fa57 	bl	8004780 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fa63 	bl	80047a0 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 80042da:	bf00      	nop
      }
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80042e2:	b590      	push	{r4, r7, lr}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	4613      	mov	r3, r2
 80042ee:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d109      	bne.n	800430a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80042f6:	68b8      	ldr	r0, [r7, #8]
 80042f8:	f000 fa42 	bl	8004780 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80042fc:	4604      	mov	r4, r0
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fa5e 	bl	80047c0 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8004304:	4603      	mov	r3, r0
 8004306:	601c      	str	r4, [r3, #0]
	    break;
 8004308:	e005      	b.n	8004316 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	461a      	mov	r2, r3
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fa61 	bl	80047d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8004316:	2300      	movs	r3, #0
      }
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	bd90      	pop	{r4, r7, pc}

08004320 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	4611      	mov	r1, r2
 800432c:	461a      	mov	r2, r3
 800432e:	460b      	mov	r3, r1
 8004330:	80fb      	strh	r3, [r7, #6]
 8004332:	4613      	mov	r3, r2
 8004334:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface), kind(kind) {
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fdfb 	bl	8003f34 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 800433e:	4a10      	ldr	r2, [pc, #64]	@ (8004380 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	797a      	ldrb	r2, [r7, #5]
 8004348:	711a      	strb	r2, [r3, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3308      	adds	r3, #8
 800434e:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f00a fbd6 	bl	800eb06 <memset>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff fa78 	bl	8003858 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8004368:	797a      	ldrb	r2, [r7, #5]
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	4619      	mov	r1, r3
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fa6c 	bl	800484c <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	08012b68 	.word	0x08012b68

08004384 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fa7b 	bl	8004888 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8004392:	4603      	mov	r3, r0
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <_ZNK15CyphalInterface4sendI5StateEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 800439c:	b5b0      	push	{r4, r5, r7, lr}
 800439e:	b08c      	sub	sp, #48	@ 0x30
 80043a0:	af04      	add	r7, sp, #16
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80043aa:	2340      	movs	r3, #64	@ 0x40
 80043ac:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 80043ae:	f107 031c 	add.w	r3, r7, #28
 80043b2:	461a      	mov	r2, r3
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	68b8      	ldr	r0, [r7, #8]
 80043b8:	f7ff f959 	bl	800366e <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_>
 80043bc:	4603      	mov	r3, r0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	09db      	lsrs	r3, r3, #7
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <_ZNK15CyphalInterface4sendI5StateEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	3310      	adds	r3, #16
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fa66 	bl	80048a0 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80043d4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80043d8:	753b      	strb	r3, [r7, #20]
 80043da:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80043de:	757b      	strb	r3, [r7, #21]
 80043e0:	887b      	ldrh	r3, [r7, #2]
 80043e2:	82fb      	strh	r3, [r7, #22]
 80043e4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80043e8:	763b      	strb	r3, [r7, #24]
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fa69 	bl	80048cc <_ZNKSt8functionIFyvEEclEv>
    push(
 80043fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043fe:	1884      	adds	r4, r0, r2
 8004400:	eb41 0503 	adc.w	r5, r1, r3
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	9202      	str	r2, [sp, #8]
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	f107 0314 	add.w	r3, r7, #20
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	4622      	mov	r2, r4
 8004414:	462b      	mov	r3, r5
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f006 fc74 	bl	800ad04 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 800441c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	b2da      	uxtb	r2, r3
 8004424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004426:	701a      	strb	r2, [r3, #0]
}
 8004428:	bf00      	nop
 800442a:	3720      	adds	r7, #32
 800442c:	46bd      	mov	sp, r7
 800442e:	bdb0      	pop	{r4, r5, r7, pc}

08004430 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 8004430:	b5b0      	push	{r4, r5, r7, lr}
 8004432:	b08c      	sub	sp, #48	@ 0x30
 8004434:	af04      	add	r7, sp, #16
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 800443e:	2307      	movs	r3, #7
 8004440:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8004442:	f107 031c 	add.w	r3, r7, #28
 8004446:	461a      	mov	r2, r3
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	68b8      	ldr	r0, [r7, #8]
 800444c:	f7fe fc60 	bl	8002d10 <uavcan_node_Heartbeat_1_0_serialize_>
 8004450:	4603      	mov	r3, r0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	09db      	lsrs	r3, r3, #7
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	3310      	adds	r3, #16
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fa1c 	bl	80048a0 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8004468:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800446c:	753b      	strb	r3, [r7, #20]
 800446e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8004472:	757b      	strb	r3, [r7, #21]
 8004474:	887b      	ldrh	r3, [r7, #2]
 8004476:	82fb      	strh	r3, [r7, #22]
 8004478:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800447c:	763b      	strb	r3, [r7, #24]
 800447e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fa1f 	bl	80048cc <_ZNKSt8functionIFyvEEclEv>
    push(
 800448e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004492:	1884      	adds	r4, r0, r2
 8004494:	eb41 0503 	adc.w	r5, r1, r3
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	9202      	str	r2, [sp, #8]
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	f107 0314 	add.w	r3, r7, #20
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	4622      	mov	r2, r4
 80044a8:	462b      	mov	r3, r5
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f006 fc2a 	bl	800ad04 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 80044b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	701a      	strb	r2, [r3, #0]
}
 80044bc:	bf00      	nop
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bdb0      	pop	{r4, r5, r7, pc}

080044c4 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create_bss(
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b089      	sub	sp, #36	@ 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem) * 2.5, args..., utilities);
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4619      	mov	r1, r3
 80044de:	2008      	movs	r0, #8
 80044e0:	f7fe f80a 	bl	80024f8 <_ZnwjPv>
 80044e4:	4604      	mov	r4, r0
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4413      	add	r3, r2
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fc f82f 	bl	8000554 <__aeabi_ui2d>
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	4b18      	ldr	r3, [pc, #96]	@ (800455c <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig+0x98>)
 80044fc:	f7fc f8a4 	bl	8000648 <__aeabi_dmul>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4610      	mov	r0, r2
 8004506:	4619      	mov	r1, r3
 8004508:	f7fc fb76 	bl	8000bf8 <__aeabi_d2uiz>
 800450c:	4603      	mov	r3, r0
 800450e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004510:	4619      	mov	r1, r3
 8004512:	4620      	mov	r0, r4
 8004514:	f7fe f958 	bl	80027c8 <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 8004518:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3308      	adds	r3, #8
 800451e:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len, utilities);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	4619      	mov	r1, r3
 8004524:	2044      	movs	r0, #68	@ 0x44
 8004526:	f7fd ffe7 	bl	80024f8 <_ZnwjPv>
 800452a:	4604      	mov	r4, r0
 800452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	4620      	mov	r0, r4
 8004534:	f7fe f92c 	bl	8002790 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 8004538:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	79fa      	ldrb	r2, [r7, #7]
 800453e:	69b9      	ldr	r1, [r7, #24]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 f9dd 	bl	8004900 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	601a      	str	r2, [r3, #0]
        return ptr;
 8004550:	693b      	ldr	r3, [r7, #16]
    }
 8004552:	4618      	mov	r0, r3
 8004554:	3724      	adds	r7, #36	@ 0x24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd90      	pop	{r4, r7, pc}
 800455a:	bf00      	nop
 800455c:	40040000 	.word	0x40040000

08004560 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8004560:	b590      	push	{r4, r7, lr}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3304      	adds	r3, #4
 8004574:	4622      	mov	r2, r4
 8004576:	6839      	ldr	r1, [r7, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fa05 	bl	8004988 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 800457e:	6839      	ldr	r1, [r7, #0]
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fa10 	bl	80049a6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	bd90      	pop	{r4, r7, pc}

08004590 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 80045b0:	6838      	ldr	r0, [r7, #0]
 80045b2:	f000 fa03 	bl	80049bc <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 80045b6:	4602      	mov	r2, r0
 80045b8:	f107 0308 	add.w	r3, r7, #8
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fa07 	bl	80049d2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 80045c4:	f107 0308 	add.w	r3, r7, #8
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fa1f 	bl	8004a0e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 80045d0:	f107 0308 	add.w	r3, r7, #8
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff f8f6 	bl	80037c6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 80045da:	687b      	ldr	r3, [r7, #4]
      }
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fa24 	bl	8004a3c <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80045f4:	4603      	mov	r3, r0
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fa23 	bl	8004a56 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fa26 	bl	8004a76 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800462a:	4603      	mov	r3, r0
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fa25 	bl	8004a8e <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004644:	4603      	mov	r3, r0
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800464e:	b590      	push	{r4, r7, lr}
 8004650:	b085      	sub	sp, #20
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7fd ff97 	bl	800258e <_ZNSt9_Any_data9_M_accessEv>
 8004660:	4603      	mov	r3, r0
 8004662:	4619      	mov	r1, r3
 8004664:	2004      	movs	r0, #4
 8004666:	f7fd ff47 	bl	80024f8 <_ZnwjPv>
 800466a:	4604      	mov	r4, r0
 800466c:	68b8      	ldr	r0, [r7, #8]
 800466e:	f7ff fdae 	bl	80041ce <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004672:	4603      	mov	r3, r0
 8004674:	6023      	str	r3, [r4, #0]
	  }
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	bd90      	pop	{r4, r7, pc}

0800467e <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fa0d 	bl	8004aa6 <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 800468c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 fa15 	bl	8004abe <_ZSt11__addressofIKPFyvEEPT_RS3_>
 8004694:	4603      	mov	r3, r0
	}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800469e:	b590      	push	{r4, r7, lr}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fa14 	bl	8004ad4 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80046ac:	4603      	mov	r3, r0
 80046ae:	4619      	mov	r1, r3
 80046b0:	4620      	mov	r0, r4
 80046b2:	f000 fa1a 	bl	8004aea <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 80046ba:	4610      	mov	r0, r2
 80046bc:	4619      	mov	r1, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd90      	pop	{r4, r7, pc}

080046c4 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access() noexcept
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7fd ff5e 	bl	800258e <_ZNSt9_Any_data9_M_accessEv>
 80046d2:	4603      	mov	r3, r0
 80046d4:	4618      	mov	r0, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80046dc:	b590      	push	{r4, r7, lr}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d82a      	bhi.n	8004746 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 80046f0:	a201      	add	r2, pc, #4	@ (adr r2, 80046f8 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	08004709 	.word	0x08004709
 80046fc:	08004717 	.word	0x08004717
 8004700:	0800472b 	.word	0x0800472b
 8004704:	0800473d 	.word	0x0800473d
	      __dest._M_access<const type_info*>() = nullptr;
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fa00 	bl	8004b0e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800470e:	4603      	mov	r3, r0
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
	      break;
 8004714:	e017      	b.n	8004746 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004716:	68b8      	ldr	r0, [r7, #8]
 8004718:	f7ff ffb1 	bl	800467e <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 800471c:	4604      	mov	r4, r0
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff ffd0 	bl	80046c4 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8004724:	4603      	mov	r3, r0
 8004726:	601c      	str	r4, [r3, #0]
	      break;
 8004728:	e00d      	b.n	8004746 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800472a:	68b8      	ldr	r0, [r7, #8]
 800472c:	f7ff ffa7 	bl	800467e <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8004730:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8004732:	4619      	mov	r1, r3
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f9f6 	bl	8004b26 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800473a:	e004      	b.n	8004746 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800473c:	4621      	mov	r1, r4
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fa03 	bl	8004b4a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004744:	bf00      	nop
	  return false;
 8004746:	2300      	movs	r3, #0
	}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	bd90      	pop	{r4, r7, pc}

08004750 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f7fd ff16 	bl	800258e <_ZNSt9_Any_data9_M_accessEv>
 8004762:	4603      	mov	r3, r0
 8004764:	4619      	mov	r1, r3
 8004766:	2004      	movs	r0, #4
 8004768:	f7fd fec6 	bl	80024f8 <_ZnwjPv>
 800476c:	4604      	mov	r4, r0
 800476e:	68b8      	ldr	r0, [r7, #8]
 8004770:	f7ff fd8b 	bl	800428a <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004774:	4603      	mov	r3, r0
 8004776:	6023      	str	r3, [r4, #0]
	  }
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	bd90      	pop	{r4, r7, pc}

08004780 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f9ea 	bl	8004b62 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 800478e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f9f2 	bl	8004b7a <_ZSt11__addressofIKPFvvEEPT_RS3_>
 8004796:	4603      	mov	r3, r0
	}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f9f1 	bl	8004b90 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4619      	mov	r1, r3
 80047b2:	4620      	mov	r0, r4
 80047b4:	f000 f9f7 	bl	8004ba6 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd90      	pop	{r4, r7, pc}

080047c0 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access() noexcept
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7fd fee0 	bl	800258e <_ZNSt9_Any_data9_M_accessEv>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	4613      	mov	r3, r2
 80047e4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d82a      	bhi.n	8004842 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 80047ec:	a201      	add	r2, pc, #4	@ (adr r2, 80047f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 80047ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f2:	bf00      	nop
 80047f4:	08004805 	.word	0x08004805
 80047f8:	08004813 	.word	0x08004813
 80047fc:	08004827 	.word	0x08004827
 8004800:	08004839 	.word	0x08004839
	      __dest._M_access<const type_info*>() = nullptr;
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f982 	bl	8004b0e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800480a:	4603      	mov	r3, r0
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
	      break;
 8004810:	e017      	b.n	8004842 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004812:	68b8      	ldr	r0, [r7, #8]
 8004814:	f7ff ffb4 	bl	8004780 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8004818:	4604      	mov	r4, r0
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7ff ffd0 	bl	80047c0 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8004820:	4603      	mov	r3, r0
 8004822:	601c      	str	r4, [r3, #0]
	      break;
 8004824:	e00d      	b.n	8004842 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8004826:	68b8      	ldr	r0, [r7, #8]
 8004828:	f7ff ffaa 	bl	8004780 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800482c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800482e:	4619      	mov	r1, r3
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f9c7 	bl	8004bc4 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8004836:	e004      	b.n	8004842 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8004838:	4621      	mov	r1, r4
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f9d4 	bl	8004be8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004840:	bf00      	nop
	  return false;
 8004842:	2300      	movs	r3, #0
	}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	bd90      	pop	{r4, r7, pc}

0800484c <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af02      	add	r7, sp, #8
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]
 8004858:	4613      	mov	r3, r2
 800485a:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fb73 	bl	8003f54 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3308      	adds	r3, #8
 8004872:	787a      	ldrb	r2, [r7, #1]
 8004874:	8879      	ldrh	r1, [r7, #2]
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	4613      	mov	r3, r2
 800487a:	220c      	movs	r2, #12
 800487c:	f006 fa7c 	bl	800ad78 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fd fe98 	bl	80025e0 <_ZNKSt14_Function_base8_M_emptyEv>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 80048b6:	f009 f865 	bl	800d984 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	4610      	mov	r0, r2
 80048c2:	4798      	blx	r3
 80048c4:	bf00      	nop
      }
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fd fe82 	bl	80025e0 <_ZNKSt14_Function_base8_M_emptyEv>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 80048e2:	f009 f84f 	bl	800d984 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4610      	mov	r0, r2
 80048ee:	4798      	blx	r3
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
      }
 80048f4:	4610      	mov	r0, r2
 80048f6:	4619      	mov	r1, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8004900:	b5b0      	push	{r4, r5, r7, lr}
 8004902:	b08e      	sub	sp, #56	@ 0x38
 8004904:	af00      	add	r7, sp, #0
 8004906:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004908:	62b9      	str	r1, [r7, #40]	@ 0x28
 800490a:	4613      	mov	r3, r2
 800490c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8004910:	481a      	ldr	r0, [pc, #104]	@ (800497c <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8004912:	f7ff fa09 	bl	8003d28 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 800491c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004920:	3310      	adds	r3, #16
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff ffbc 	bl	80048a0 <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 8004928:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800492c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f976 	bl	8004c20 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8004934:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004938:	4619      	mov	r1, r3
 800493a:	4810      	ldr	r0, [pc, #64]	@ (800497c <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 800493c:	f000 f9a1 	bl	8004c82 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 8004940:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004944:	4618      	mov	r0, r3
 8004946:	f000 f97a 	bl	8004c3e <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 800494a:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 800494c:	463b      	mov	r3, r7
 800494e:	4a0c      	ldr	r2, [pc, #48]	@ (8004980 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 8004950:	490c      	ldr	r1, [pc, #48]	@ (8004984 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 8004952:	4618      	mov	r0, r3
 8004954:	f008 fd00 	bl	800d358 <canardInit>
 8004958:	3420      	adds	r4, #32
 800495a:	463d      	mov	r5, r7
 800495c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800495e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004960:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004964:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 8004968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800496e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 8004972:	bf00      	nop
 8004974:	3738      	adds	r7, #56	@ 0x38
 8004976:	46bd      	mov	sp, r7
 8004978:	bdb0      	pop	{r4, r5, r7, pc}
 800497a:	bf00      	nop
 800497c:	200005c0 	.word	0x200005c0
 8004980:	080026d5 	.word	0x080026d5
 8004984:	08002691 	.word	0x08002691

08004988 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f9a4 	bl	8004ce4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	6039      	str	r1, [r7, #0]
	{ }
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fe fefa 	bl	80037e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	1d1a      	adds	r2, r3, #4
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	3304      	adds	r3, #4
 80049f6:	4619      	mov	r1, r3
 80049f8:	4610      	mov	r0, r2
 80049fa:	f000 f98b 	bl	8004d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
      }
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 f98d 	bl	8004d3e <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	1d1a      	adds	r2, r3, #4
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f000 f970 	bl	8004d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f998 	bl	8004d7c <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f998 	bl	8004d94 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 f9a0 	bl	8004dac <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f9a2 	bl	8004dc8 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 8004a84:	4603      	mov	r3, r0
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f9a3 	bl	8004de2 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const noexcept
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fd fd78 	bl	80025a4 <_ZNKSt9_Any_data9_M_accessEv>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	7138      	strb	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004af4:	6838      	ldr	r0, [r7, #0]
 8004af6:	f7ff ffed 	bl	8004ad4 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004afa:	4603      	mov	r3, r0
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4798      	blx	r3
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4610      	mov	r0, r2
 8004b06:	4619      	mov	r1, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fd fd39 	bl	800258e <_ZNSt9_Any_data9_M_accessEv>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8004b26:	b590      	push	{r4, r7, lr}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004b30:	6838      	ldr	r0, [r7, #0]
 8004b32:	f000 f962 	bl	8004dfa <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004b36:	4603      	mov	r3, r0
 8004b38:	4622      	mov	r2, r4
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f967 	bl	8004e10 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd90      	pop	{r4, r7, pc}

08004b4a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f974 	bl	8004e42 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const noexcept
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fd fd1a 	bl	80025a4 <_ZNKSt9_Any_data9_M_accessEv>
 8004b70:	4603      	mov	r3, r0
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	7138      	strb	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004bb0:	6838      	ldr	r0, [r7, #0]
 8004bb2:	f7ff ffed 	bl	8004b90 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4798      	blx	r3
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004bce:	6838      	ldr	r0, [r7, #0]
 8004bd0:	f000 f943 	bl	8004e5a <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	4619      	mov	r1, r3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f948 	bl	8004e70 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd90      	pop	{r4, r7, pc}

08004be8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f955 	bl	8004ea2 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f952 	bl	8004eba <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6839      	ldr	r1, [r7, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff ffe6 	bl	8004c00 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8004c3e:	b590      	push	{r4, r7, lr}
 8004c40:	b085      	sub	sp, #20
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 f94a 	bl	8004ee2 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8004c4e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00c      	beq.n	8004c72 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f94f 	bl	8004efc <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8004c5e:	4604      	mov	r4, r0
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f958 	bl	8004f16 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8004c66:	4603      	mov	r3, r0
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f000 f95d 	bl	8004f2c <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
      }
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd90      	pop	{r4, r7, pc}

08004c82 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 8004c8c:	6838      	ldr	r0, [r7, #0]
 8004c8e:	f000 f972 	bl	8004f76 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8004c92:	4603      	mov	r3, r0
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f959 	bl	8004f4e <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8004c9c:	6838      	ldr	r0, [r7, #0]
 8004c9e:	f000 f92d 	bl	8004efc <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 f980 	bl	8004faa <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004caa:	4602      	mov	r2, r0
 8004cac:	f107 030c 	add.w	r3, r7, #12
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f984 	bl	8004fc0 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f969 	bl	8004f90 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8004cbe:	687b      	ldr	r3, [r7, #4]
	}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff f863 	bl	8003da0 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8004ce4:	b590      	push	{r4, r7, lr}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8004cf4:	2010      	movs	r0, #16
 8004cf6:	f008 fe34 	bl	800d962 <_Znwj>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	461c      	mov	r4, r3
 8004cfe:	6839      	ldr	r1, [r7, #0]
 8004d00:	4620      	mov	r0, r4
 8004d02:	f000 f969 	bl	8004fd8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	601c      	str	r4, [r3, #0]
	}
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd90      	pop	{r4, r7, pc}

08004d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	601a      	str	r2, [r3, #0]
      }
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f95b 	bl	8005004 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8004d54:	6838      	ldr	r0, [r7, #0]
 8004d56:	f000 f955 	bl	8005004 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8004d62:	f107 030c 	add.w	r3, r7, #12
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f94c 	bl	8005004 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	601a      	str	r2, [r3, #0]
    }
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f948 	bl	800501a <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f949 	bl	8005034 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f939 	bl	800504a <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f938 	bl	8005060 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 8004df0:	4603      	mov	r3, r0
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f7fd fbb6 	bl	800258e <_ZNSt9_Any_data9_M_accessEv>
 8004e22:	4603      	mov	r3, r0
 8004e24:	4619      	mov	r1, r3
 8004e26:	2004      	movs	r0, #4
 8004e28:	f7fd fb66 	bl	80024f8 <_ZnwjPv>
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	68b8      	ldr	r0, [r7, #8]
 8004e30:	f7ff ffe3 	bl	8004dfa <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e34:	4603      	mov	r3, r0
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6023      	str	r3, [r4, #0]
	  }
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd90      	pop	{r4, r7, pc}

08004e42 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access() noexcept
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b082      	sub	sp, #8
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fd fb9f 	bl	800258e <_ZNSt9_Any_data9_M_accessEv>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8004e70:	b590      	push	{r4, r7, lr}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7fd fb86 	bl	800258e <_ZNSt9_Any_data9_M_accessEv>
 8004e82:	4603      	mov	r3, r0
 8004e84:	4619      	mov	r1, r3
 8004e86:	2004      	movs	r0, #4
 8004e88:	f7fd fb36 	bl	80024f8 <_ZnwjPv>
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	68b8      	ldr	r0, [r7, #8]
 8004e90:	f7ff ffe3 	bl	8004e5a <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e94:	4603      	mov	r3, r0
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6023      	str	r3, [r4, #0]
	  }
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd90      	pop	{r4, r7, pc}

08004ea2 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access() noexcept
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fd fb6f 	bl	800258e <_ZNSt9_Any_data9_M_accessEv>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8004eba:	b590      	push	{r4, r7, lr}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f8d6 	bl	8005078 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8004ecc:	683c      	ldr	r4, [r7, #0]
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f807 	bl	8004ee2 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	601c      	str	r4, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd90      	pop	{r4, r7, pc}

08004ee2 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 f8d0 	bl	8005092 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 f8d0 	bl	80050ac <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d004      	beq.n	8004f46 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	320c      	adds	r2, #12
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	4790      	blx	r2
      }
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      _GLIBCXX23_CONSTEXPR
      void
      reset(pointer __p = pointer()) noexcept
 8004f4e:	b590      	push	{r4, r7, lr}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8004f58:	687c      	ldr	r4, [r7, #4]
 8004f5a:	463b      	mov	r3, r7
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 f8b2 	bl	80050c6 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8004f62:	4603      	mov	r3, r0
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4619      	mov	r1, r3
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f000 f8b7 	bl	80050dc <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd90      	pop	{r4, r7, pc}

08004f76 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 f8cb 	bl	800511c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8004f86:	4603      	mov	r3, r0
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 f8d3 	bl	8005146 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 f8bb 	bl	8005160 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8004fea:	4a05      	ldr	r2, [pc, #20]	@ (8005000 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	60da      	str	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	08012b3c 	.word	0x08012b3c

08005004 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4618      	mov	r0, r3
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4618      	mov	r0, r3
 8005026:	f000 f8b1 	bl	800518c <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 800502a:	4603      	mov	r3, r0
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f89a 	bl	80051a2 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 800506e:	4603      	mov	r3, r0
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 f898 	bl	80051b8 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4618      	mov	r0, r3
 800509e:	f000 f89b 	bl	80051d8 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80050a2:	4603      	mov	r3, r0
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 f89a 	bl	80051f0 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80050bc:	4603      	mov	r3, r0
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 80050dc:	b590      	push	{r4, r7, lr}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f88e 	bl	8005208 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80050ec:	4603      	mov	r3, r0
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80050f2:	683c      	ldr	r4, [r7, #0]
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f887 	bl	8005208 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80050fa:	4603      	mov	r3, r0
 80050fc:	601c      	str	r4, [r3, #0]
	if (__old_p)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f81e 	bl	8005146 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 800510a:	4603      	mov	r3, r0
 800510c:	68f9      	ldr	r1, [r7, #12]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f887 	bl	8005222 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	bd90      	pop	{r4, r7, pc}

0800511c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff fedc 	bl	8004ee2 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800512a:	4603      	mov	r3, r0
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fed6 	bl	8004ee2 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8005136:	4603      	mov	r3, r0
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
	return __p;
 800513c:	68fb      	ldr	r3, [r7, #12]
      }
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 f877 	bl	8005244 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8005156:	4603      	mov	r3, r0
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8005168:	4a07      	ldr	r2, [pc, #28]	@ (8005188 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	605a      	str	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	609a      	str	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4618      	mov	r0, r3
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	08012b9c 	.word	0x08012b9c

0800518c <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4618      	mov	r0, r3
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f84b 	bl	800525c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 f853 	bl	8005274 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f855 	bl	8005290 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 80051e6:	4603      	mov	r3, r0
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f856 	bl	80052aa <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80051fe:	4603      	mov	r3, r0
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f855 	bl	80052c2 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8005218:	4603      	mov	r3, r0
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d004      	beq.n	800523c <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	320c      	adds	r2, #12
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	4790      	blx	r2
      }
 800523c:	bf00      	nop
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f845 	bl	80052dc <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8005252:	4603      	mov	r3, r0
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f845 	bl	80052f4 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4618      	mov	r0, r3
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4618      	mov	r0, r3
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4618      	mov	r0, r3
 800529c:	f000 f835 	bl	800530a <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 80052a0:	4603      	mov	r3, r0
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b082      	sub	sp, #8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f834 	bl	8005320 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 80052b8:	4603      	mov	r3, r0
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b082      	sub	sp, #8
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f833 	bl	8005338 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80052d2:	4603      	mov	r3, r0
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f833 	bl	8005350 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 80052ea:	4603      	mov	r3, r0
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f81d 	bl	8005368 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 800532e:	4603      	mov	r3, r0
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f81c 	bl	800537e <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8005346:	4603      	mov	r3, r0
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f81d 	bl	8005398 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 800535e:	4603      	mov	r3, r0
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4618      	mov	r0, r3
 800538a:	f000 f810 	bl	80053ae <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 800538e:	4603      	mov	r3, r0
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	4a05      	ldr	r2, [pc, #20]	@ (80053e4 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fe fe53 	bl	8004080 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	08012b3c 	.word	0x08012b3c

080053e8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff ffe7 	bl	80053c4 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80053f6:	2110      	movs	r1, #16
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f008 fab0 	bl	800d95e <_ZdlPvj>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3310      	adds	r3, #16
 8005414:	4618      	mov	r0, r3
 8005416:	f7fd f901 	bl	800261c <_ZNSt8functionIFvvEED1Ev>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4618      	mov	r0, r3
 800541e:	f7fd f8f0 	bl	8002602 <_ZNSt8functionIFyvEED1Ev>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <_Z41__static_initialization_and_destruction_0ii>:

}
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	@ 0x28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d122      	bne.n	8005482 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005442:	4293      	cmp	r3, r2
 8005444:	d11d      	bne.n	8005482 <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 8005446:	f107 0308 	add.w	r3, r7, #8
 800544a:	4917      	ldr	r1, [pc, #92]	@ (80054a8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800544c:	4618      	mov	r0, r3
 800544e:	f7fe fcdb 	bl	8003e08 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 8005452:	f107 0318 	add.w	r3, r7, #24
 8005456:	4915      	ldr	r1, [pc, #84]	@ (80054ac <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005458:	4618      	mov	r0, r3
 800545a:	f7fe fd05 	bl	8003e68 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 800545e:	f107 0218 	add.w	r2, r7, #24
 8005462:	f107 0308 	add.w	r3, r7, #8
 8005466:	4619      	mov	r1, r3
 8005468:	4811      	ldr	r0, [pc, #68]	@ (80054b0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800546a:	f7fd f8e4 	bl	8002636 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 800546e:	f107 0318 	add.w	r3, r7, #24
 8005472:	4618      	mov	r0, r3
 8005474:	f7fd f8d2 	bl	800261c <_ZNSt8functionIFvvEED1Ev>
 8005478:	f107 0308 	add.w	r3, r7, #8
 800547c:	4618      	mov	r0, r3
 800547e:	f7fd f8c0 	bl	8002602 <_ZNSt8functionIFyvEED1Ev>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800548e:	4293      	cmp	r3, r2
 8005490:	d105      	bne.n	800549e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8005492:	4807      	ldr	r0, [pc, #28]	@ (80054b0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005494:	f7ff ffb8 	bl	8005408 <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 8005498:	4806      	ldr	r0, [pc, #24]	@ (80054b4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800549a:	f7fe f9ed 	bl	8003878 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 800549e:	bf00      	nop
 80054a0:	3728      	adds	r7, #40	@ 0x28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	0800380b 	.word	0x0800380b
 80054ac:	080037ff 	.word	0x080037ff
 80054b0:	20000428 	.word	0x20000428
 80054b4:	20000420 	.word	0x20000420

080054b8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80054b8:	b590      	push	{r4, r7, lr}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68dc      	ldr	r4, [r3, #12]
 80054c4:	2c00      	cmp	r4, #0
 80054c6:	d006      	beq.n	80054d6 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 80054c8:	4620      	mov	r0, r4
 80054ca:	f7ff fbfd 	bl	8004cc8 <_ZN15CyphalInterfaceD1Ev>
 80054ce:	210c      	movs	r1, #12
 80054d0:	4620      	mov	r0, r4
 80054d2:	f008 fa44 	bl	800d95e <_ZdlPvj>
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd90      	pop	{r4, r7, pc}

080054de <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80054de:	b580      	push	{r7, lr}
 80054e0:	b082      	sub	sp, #8
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
      { delete this; }
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7ff ff7b 	bl	80053e8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80054f2:	bf00      	nop
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8005504:	2300      	movs	r3, #0
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
                break;
        }

        return out;
    }
    void accept(CanardRxTransfer* transfer) {
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
        Type object;
        interface->deserialize_transfer<T>(&object, transfer);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fd16 	bl	8003f54 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8005528:	f107 0308 	add.w	r3, r7, #8
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	4619      	mov	r1, r3
 8005530:	f000 f80d 	bl	800554e <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3304      	adds	r3, #4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f107 0108 	add.w	r1, r7, #8
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
    }
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::deserialize_transfer(
 800554e:	b580      	push	{r7, lr}
 8005550:	b086      	sub	sp, #24
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 800555a:	230c      	movs	r3, #12
 800555c:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f107 0214 	add.w	r2, r7, #20
 8005566:	4619      	mov	r1, r3
 8005568:	68b8      	ldr	r0, [r7, #8]
 800556a:	f7fd fcb7 	bl	8002edc <uavcan_node_Heartbeat_1_0_deserialize_>
 800556e:	4603      	mov	r3, r0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	09db      	lsrs	r3, r3, #7
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	3310      	adds	r3, #16
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff f98d 	bl	80048a0 <_ZNKSt8functionIFvvEEclEv>
    }
}
 8005586:	bf00      	nop
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <_GLOBAL__sub_I_buffer>:
 800558e:	b580      	push	{r7, lr}
 8005590:	af00      	add	r7, sp, #0
 8005592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005596:	2001      	movs	r0, #1
 8005598:	f7ff ff48 	bl	800542c <_Z41__static_initialization_and_destruction_0ii>
 800559c:	bd80      	pop	{r7, pc}

0800559e <_GLOBAL__sub_D_buffer>:
 800559e:	b580      	push	{r7, lr}
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80055a6:	2000      	movs	r0, #0
 80055a8:	f7ff ff40 	bl	800542c <_Z41__static_initialization_and_destruction_0ii>
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055b6:	4b0f      	ldr	r3, [pc, #60]	@ (80055f4 <HAL_MspInit+0x44>)
 80055b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ba:	4a0e      	ldr	r2, [pc, #56]	@ (80055f4 <HAL_MspInit+0x44>)
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80055c2:	4b0c      	ldr	r3, [pc, #48]	@ (80055f4 <HAL_MspInit+0x44>)
 80055c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	607b      	str	r3, [r7, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055ce:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <HAL_MspInit+0x44>)
 80055d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d2:	4a08      	ldr	r2, [pc, #32]	@ (80055f4 <HAL_MspInit+0x44>)
 80055d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80055da:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <HAL_MspInit+0x44>)
 80055dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80055e6:	f003 f987 	bl	80088f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40021000 	.word	0x40021000

080055f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80055fc:	bf00      	nop
 80055fe:	e7fd      	b.n	80055fc <NMI_Handler+0x4>

08005600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <HardFault_Handler+0x4>

08005608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <MemManage_Handler+0x4>

08005610 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005614:	bf00      	nop
 8005616:	e7fd      	b.n	8005614 <BusFault_Handler+0x4>

08005618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800561c:	bf00      	nop
 800561e:	e7fd      	b.n	800561c <UsageFault_Handler+0x4>

08005620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005624:	bf00      	nop
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800562e:	b480      	push	{r7}
 8005630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005632:	bf00      	nop
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005640:	bf00      	nop
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800564e:	f000 fa35 	bl	8005abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005652:	bf00      	nop
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 800565c:	4802      	ldr	r0, [pc, #8]	@ (8005668 <DMA1_Channel1_IRQHandler+0x10>)
 800565e:	f000 fce5 	bl	800602c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005662:	bf00      	nop
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	200002f8 	.word	0x200002f8

0800566c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8005670:	4802      	ldr	r0, [pc, #8]	@ (800567c <DMA1_Channel2_IRQHandler+0x10>)
 8005672:	f000 fcdb 	bl	800602c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005676:	bf00      	nop
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000358 	.word	0x20000358

08005680 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005684:	4802      	ldr	r0, [pc, #8]	@ (8005690 <USART2_IRQHandler+0x10>)
 8005686:	f004 f913 	bl	80098b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800568a:	bf00      	nop
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	200004e8 	.word	0x200004e8

08005694 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8005698:	4802      	ldr	r0, [pc, #8]	@ (80056a4 <I2C4_EV_IRQHandler+0x10>)
 800569a:	f001 feeb 	bl	8007474 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 800569e:	bf00      	nop
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	200002a4 	.word	0x200002a4

080056a8 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80056ac:	4802      	ldr	r0, [pc, #8]	@ (80056b8 <I2C4_ER_IRQHandler+0x10>)
 80056ae:	f001 fefb 	bl	80074a8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	200002a4 	.word	0x200002a4

080056bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  return 1;
 80056c0:	2301      	movs	r3, #1
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <_kill>:

int _kill(int pid, int sig)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80056d6:	f009 facf 	bl	800ec78 <__errno>
 80056da:	4603      	mov	r3, r0
 80056dc:	2216      	movs	r2, #22
 80056de:	601a      	str	r2, [r3, #0]
  return -1;
 80056e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <_exit>:

void _exit (int status)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80056f4:	f04f 31ff 	mov.w	r1, #4294967295
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff ffe7 	bl	80056cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80056fe:	bf00      	nop
 8005700:	e7fd      	b.n	80056fe <_exit+0x12>

08005702 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b086      	sub	sp, #24
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	e00a      	b.n	800572a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005714:	f3af 8000 	nop.w
 8005718:	4601      	mov	r1, r0
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	60ba      	str	r2, [r7, #8]
 8005720:	b2ca      	uxtb	r2, r1
 8005722:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	3301      	adds	r3, #1
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	429a      	cmp	r2, r3
 8005730:	dbf0      	blt.n	8005714 <_read+0x12>
  }

  return len;
 8005732:	687b      	ldr	r3, [r7, #4]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	e009      	b.n	8005762 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	60ba      	str	r2, [r7, #8]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	3301      	adds	r3, #1
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	dbf1      	blt.n	800574e <_write+0x12>
  }
  return len;
 800576a:	687b      	ldr	r3, [r7, #4]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <_close>:

int _close(int file)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800577c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800579c:	605a      	str	r2, [r3, #4]
  return 0;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <_isatty>:

int _isatty(int file)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80057b4:	2301      	movs	r3, #1
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b085      	sub	sp, #20
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057e4:	4a14      	ldr	r2, [pc, #80]	@ (8005838 <_sbrk+0x5c>)
 80057e6:	4b15      	ldr	r3, [pc, #84]	@ (800583c <_sbrk+0x60>)
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057f0:	4b13      	ldr	r3, [pc, #76]	@ (8005840 <_sbrk+0x64>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d102      	bne.n	80057fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057f8:	4b11      	ldr	r3, [pc, #68]	@ (8005840 <_sbrk+0x64>)
 80057fa:	4a12      	ldr	r2, [pc, #72]	@ (8005844 <_sbrk+0x68>)
 80057fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057fe:	4b10      	ldr	r3, [pc, #64]	@ (8005840 <_sbrk+0x64>)
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4413      	add	r3, r2
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	429a      	cmp	r2, r3
 800580a:	d207      	bcs.n	800581c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800580c:	f009 fa34 	bl	800ec78 <__errno>
 8005810:	4603      	mov	r3, r0
 8005812:	220c      	movs	r2, #12
 8005814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005816:	f04f 33ff 	mov.w	r3, #4294967295
 800581a:	e009      	b.n	8005830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800581c:	4b08      	ldr	r3, [pc, #32]	@ (8005840 <_sbrk+0x64>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005822:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <_sbrk+0x64>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4413      	add	r3, r2
 800582a:	4a05      	ldr	r2, [pc, #20]	@ (8005840 <_sbrk+0x64>)
 800582c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800582e:	68fb      	ldr	r3, [r7, #12]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	20020000 	.word	0x20020000
 800583c:	00000400 	.word	0x00000400
 8005840:	200004e4 	.word	0x200004e4
 8005844:	20000718 	.word	0x20000718

08005848 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800584c:	4b06      	ldr	r3, [pc, #24]	@ (8005868 <SystemInit+0x20>)
 800584e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005852:	4a05      	ldr	r2, [pc, #20]	@ (8005868 <SystemInit+0x20>)
 8005854:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005858:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800585c:	bf00      	nop
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	e000ed00 	.word	0xe000ed00

0800586c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005870:	4b22      	ldr	r3, [pc, #136]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 8005872:	4a23      	ldr	r2, [pc, #140]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 8005874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005876:	4b21      	ldr	r3, [pc, #132]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 8005878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800587c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800587e:	4b1f      	ldr	r3, [pc, #124]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 8005880:	2200      	movs	r2, #0
 8005882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005884:	4b1d      	ldr	r3, [pc, #116]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 8005886:	2200      	movs	r2, #0
 8005888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800588a:	4b1c      	ldr	r3, [pc, #112]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 800588c:	2200      	movs	r2, #0
 800588e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005890:	4b1a      	ldr	r3, [pc, #104]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 8005892:	220c      	movs	r2, #12
 8005894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005896:	4b19      	ldr	r3, [pc, #100]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 8005898:	2200      	movs	r2, #0
 800589a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800589c:	4b17      	ldr	r3, [pc, #92]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 800589e:	2200      	movs	r2, #0
 80058a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058a2:	4b16      	ldr	r3, [pc, #88]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80058a8:	4b14      	ldr	r3, [pc, #80]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058ae:	4b13      	ldr	r3, [pc, #76]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80058b4:	4811      	ldr	r0, [pc, #68]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 80058b6:	f003 ffab 	bl	8009810 <HAL_UART_Init>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80058c0:	f7fc fe14 	bl	80024ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058c4:	2100      	movs	r1, #0
 80058c6:	480d      	ldr	r0, [pc, #52]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 80058c8:	f005 f8e9 	bl	800aa9e <HAL_UARTEx_SetTxFifoThreshold>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80058d2:	f7fc fe0b 	bl	80024ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058d6:	2100      	movs	r1, #0
 80058d8:	4808      	ldr	r0, [pc, #32]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 80058da:	f005 f91e 	bl	800ab1a <HAL_UARTEx_SetRxFifoThreshold>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80058e4:	f7fc fe02 	bl	80024ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80058e8:	4804      	ldr	r0, [pc, #16]	@ (80058fc <MX_USART2_UART_Init+0x90>)
 80058ea:	f005 f89f 	bl	800aa2c <HAL_UARTEx_DisableFifoMode>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80058f4:	f7fc fdfa 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80058f8:	bf00      	nop
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	200004e8 	.word	0x200004e8
 8005900:	40004400 	.word	0x40004400

08005904 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b09e      	sub	sp, #120	@ 0x78
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800590c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800591c:	f107 0310 	add.w	r3, r7, #16
 8005920:	2254      	movs	r2, #84	@ 0x54
 8005922:	2100      	movs	r1, #0
 8005924:	4618      	mov	r0, r3
 8005926:	f009 f8ee 	bl	800eb06 <memset>
  if(uartHandle->Instance==USART2)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a23      	ldr	r2, [pc, #140]	@ (80059bc <HAL_UART_MspInit+0xb8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d13e      	bne.n	80059b2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005934:	2302      	movs	r3, #2
 8005936:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005938:	2300      	movs	r3, #0
 800593a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800593c:	f107 0310 	add.w	r3, r7, #16
 8005940:	4618      	mov	r0, r3
 8005942:	f003 fd17 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800594c:	f7fc fdce 	bl	80024ec <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005950:	4b1b      	ldr	r3, [pc, #108]	@ (80059c0 <HAL_UART_MspInit+0xbc>)
 8005952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005954:	4a1a      	ldr	r2, [pc, #104]	@ (80059c0 <HAL_UART_MspInit+0xbc>)
 8005956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800595a:	6593      	str	r3, [r2, #88]	@ 0x58
 800595c:	4b18      	ldr	r3, [pc, #96]	@ (80059c0 <HAL_UART_MspInit+0xbc>)
 800595e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005968:	4b15      	ldr	r3, [pc, #84]	@ (80059c0 <HAL_UART_MspInit+0xbc>)
 800596a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596c:	4a14      	ldr	r2, [pc, #80]	@ (80059c0 <HAL_UART_MspInit+0xbc>)
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005974:	4b12      	ldr	r3, [pc, #72]	@ (80059c0 <HAL_UART_MspInit+0xbc>)
 8005976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005980:	230c      	movs	r3, #12
 8005982:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005984:	2302      	movs	r3, #2
 8005986:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005988:	2300      	movs	r3, #0
 800598a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800598c:	2300      	movs	r3, #0
 800598e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005990:	2307      	movs	r3, #7
 8005992:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005994:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005998:	4619      	mov	r1, r3
 800599a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800599e:	f001 f8eb 	bl	8006b78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80059a2:	2200      	movs	r2, #0
 80059a4:	2100      	movs	r1, #0
 80059a6:	2026      	movs	r0, #38	@ 0x26
 80059a8:	f000 f9a3 	bl	8005cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80059ac:	2026      	movs	r0, #38	@ 0x26
 80059ae:	f000 f9ba 	bl	8005d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80059b2:	bf00      	nop
 80059b4:	3778      	adds	r7, #120	@ 0x78
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40004400 	.word	0x40004400
 80059c0:	40021000 	.word	0x40021000

080059c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80059c4:	480d      	ldr	r0, [pc, #52]	@ (80059fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80059c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80059c8:	f7ff ff3e 	bl	8005848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059cc:	480c      	ldr	r0, [pc, #48]	@ (8005a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80059ce:	490d      	ldr	r1, [pc, #52]	@ (8005a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80059d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005a08 <LoopForever+0xe>)
  movs r3, #0
 80059d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80059d4:	e002      	b.n	80059dc <LoopCopyDataInit>

080059d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059da:	3304      	adds	r3, #4

080059dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059e0:	d3f9      	bcc.n	80059d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059e2:	4a0a      	ldr	r2, [pc, #40]	@ (8005a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80059e4:	4c0a      	ldr	r4, [pc, #40]	@ (8005a10 <LoopForever+0x16>)
  movs r3, #0
 80059e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059e8:	e001      	b.n	80059ee <LoopFillZerobss>

080059ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059ec:	3204      	adds	r2, #4

080059ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059f0:	d3fb      	bcc.n	80059ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059f2:	f009 f947 	bl	800ec84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80059f6:	f7fc fc93 	bl	8002320 <main>

080059fa <LoopForever>:

LoopForever:
    b LoopForever
 80059fa:	e7fe      	b.n	80059fa <LoopForever>
  ldr   r0, =_estack
 80059fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a04:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8005a08:	08013664 	.word	0x08013664
  ldr r2, =_sbss
 8005a0c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8005a10:	20000714 	.word	0x20000714

08005a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005a14:	e7fe      	b.n	8005a14 <ADC1_2_IRQHandler>

08005a16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a20:	2003      	movs	r0, #3
 8005a22:	f000 f95b 	bl	8005cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a26:	200f      	movs	r0, #15
 8005a28:	f000 f80e 	bl	8005a48 <HAL_InitTick>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	71fb      	strb	r3, [r7, #7]
 8005a36:	e001      	b.n	8005a3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005a38:	f7ff fdba 	bl	80055b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a3c:	79fb      	ldrb	r3, [r7, #7]

}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005a54:	4b16      	ldr	r3, [pc, #88]	@ (8005ab0 <HAL_InitTick+0x68>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d022      	beq.n	8005aa2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005a5c:	4b15      	ldr	r3, [pc, #84]	@ (8005ab4 <HAL_InitTick+0x6c>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	4b13      	ldr	r3, [pc, #76]	@ (8005ab0 <HAL_InitTick+0x68>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 f966 	bl	8005d42 <HAL_SYSTICK_Config>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10f      	bne.n	8005a9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b0f      	cmp	r3, #15
 8005a80:	d809      	bhi.n	8005a96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a82:	2200      	movs	r2, #0
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8a:	f000 f932 	bl	8005cf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab8 <HAL_InitTick+0x70>)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	e007      	b.n	8005aa6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
 8005a9a:	e004      	b.n	8005aa6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
 8005aa0:	e001      	b.n	8005aa6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000008 	.word	0x20000008
 8005ab4:	20000000 	.word	0x20000000
 8005ab8:	20000004 	.word	0x20000004

08005abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ac0:	4b05      	ldr	r3, [pc, #20]	@ (8005ad8 <HAL_IncTick+0x1c>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <HAL_IncTick+0x20>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4413      	add	r3, r2
 8005aca:	4a03      	ldr	r2, [pc, #12]	@ (8005ad8 <HAL_IncTick+0x1c>)
 8005acc:	6013      	str	r3, [r2, #0]
}
 8005ace:	bf00      	nop
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	2000057c 	.word	0x2000057c
 8005adc:	20000008 	.word	0x20000008

08005ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8005ae4:	4b03      	ldr	r3, [pc, #12]	@ (8005af4 <HAL_GetTick+0x14>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	2000057c 	.word	0x2000057c

08005af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b00:	f7ff ffee 	bl	8005ae0 <HAL_GetTick>
 8005b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d004      	beq.n	8005b1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b12:	4b09      	ldr	r3, [pc, #36]	@ (8005b38 <HAL_Delay+0x40>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b1c:	bf00      	nop
 8005b1e:	f7ff ffdf 	bl	8005ae0 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d8f7      	bhi.n	8005b1e <HAL_Delay+0x26>
  {
  }
}
 8005b2e:	bf00      	nop
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000008 	.word	0x20000008

08005b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b80 <__NVIC_SetPriorityGrouping+0x44>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b6e:	4a04      	ldr	r2, [pc, #16]	@ (8005b80 <__NVIC_SetPriorityGrouping+0x44>)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	60d3      	str	r3, [r2, #12]
}
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	e000ed00 	.word	0xe000ed00

08005b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b88:	4b04      	ldr	r3, [pc, #16]	@ (8005b9c <__NVIC_GetPriorityGrouping+0x18>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	0a1b      	lsrs	r3, r3, #8
 8005b8e:	f003 0307 	and.w	r3, r3, #7
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	e000ed00 	.word	0xe000ed00

08005ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	db0b      	blt.n	8005bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	f003 021f 	and.w	r2, r3, #31
 8005bb8:	4907      	ldr	r1, [pc, #28]	@ (8005bd8 <__NVIC_EnableIRQ+0x38>)
 8005bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8005bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	e000e100 	.word	0xe000e100

08005bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	6039      	str	r1, [r7, #0]
 8005be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	db0a      	blt.n	8005c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	490c      	ldr	r1, [pc, #48]	@ (8005c28 <__NVIC_SetPriority+0x4c>)
 8005bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfa:	0112      	lsls	r2, r2, #4
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	440b      	add	r3, r1
 8005c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c04:	e00a      	b.n	8005c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	4908      	ldr	r1, [pc, #32]	@ (8005c2c <__NVIC_SetPriority+0x50>)
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	3b04      	subs	r3, #4
 8005c14:	0112      	lsls	r2, r2, #4
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	440b      	add	r3, r1
 8005c1a:	761a      	strb	r2, [r3, #24]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	e000e100 	.word	0xe000e100
 8005c2c:	e000ed00 	.word	0xe000ed00

08005c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b089      	sub	sp, #36	@ 0x24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f1c3 0307 	rsb	r3, r3, #7
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	bf28      	it	cs
 8005c4e:	2304      	movcs	r3, #4
 8005c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3304      	adds	r3, #4
 8005c56:	2b06      	cmp	r3, #6
 8005c58:	d902      	bls.n	8005c60 <NVIC_EncodePriority+0x30>
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	3b03      	subs	r3, #3
 8005c5e:	e000      	b.n	8005c62 <NVIC_EncodePriority+0x32>
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	43da      	mvns	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	401a      	ands	r2, r3
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c78:	f04f 31ff 	mov.w	r1, #4294967295
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	43d9      	mvns	r1, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c88:	4313      	orrs	r3, r2
         );
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3724      	adds	r7, #36	@ 0x24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
	...

08005c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ca8:	d301      	bcc.n	8005cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005caa:	2301      	movs	r3, #1
 8005cac:	e00f      	b.n	8005cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cae:	4a0a      	ldr	r2, [pc, #40]	@ (8005cd8 <SysTick_Config+0x40>)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cb6:	210f      	movs	r1, #15
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbc:	f7ff ff8e 	bl	8005bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cc0:	4b05      	ldr	r3, [pc, #20]	@ (8005cd8 <SysTick_Config+0x40>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cc6:	4b04      	ldr	r3, [pc, #16]	@ (8005cd8 <SysTick_Config+0x40>)
 8005cc8:	2207      	movs	r2, #7
 8005cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	e000e010 	.word	0xe000e010

08005cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff ff29 	bl	8005b3c <__NVIC_SetPriorityGrouping>
}
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b086      	sub	sp, #24
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
 8005cfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d00:	f7ff ff40 	bl	8005b84 <__NVIC_GetPriorityGrouping>
 8005d04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	6978      	ldr	r0, [r7, #20]
 8005d0c:	f7ff ff90 	bl	8005c30 <NVIC_EncodePriority>
 8005d10:	4602      	mov	r2, r0
 8005d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d16:	4611      	mov	r1, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff ff5f 	bl	8005bdc <__NVIC_SetPriority>
}
 8005d1e:	bf00      	nop
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff ff33 	bl	8005ba0 <__NVIC_EnableIRQ>
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff ffa4 	bl	8005c98 <SysTick_Config>
 8005d50:	4603      	mov	r3, r0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e08d      	b.n	8005e8a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	4b47      	ldr	r3, [pc, #284]	@ (8005e94 <HAL_DMA_Init+0x138>)
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d80f      	bhi.n	8005d9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	4b45      	ldr	r3, [pc, #276]	@ (8005e98 <HAL_DMA_Init+0x13c>)
 8005d82:	4413      	add	r3, r2
 8005d84:	4a45      	ldr	r2, [pc, #276]	@ (8005e9c <HAL_DMA_Init+0x140>)
 8005d86:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8a:	091b      	lsrs	r3, r3, #4
 8005d8c:	009a      	lsls	r2, r3, #2
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a42      	ldr	r2, [pc, #264]	@ (8005ea0 <HAL_DMA_Init+0x144>)
 8005d96:	641a      	str	r2, [r3, #64]	@ 0x40
 8005d98:	e00e      	b.n	8005db8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4b40      	ldr	r3, [pc, #256]	@ (8005ea4 <HAL_DMA_Init+0x148>)
 8005da2:	4413      	add	r3, r2
 8005da4:	4a3d      	ldr	r2, [pc, #244]	@ (8005e9c <HAL_DMA_Init+0x140>)
 8005da6:	fba2 2303 	umull	r2, r3, r2, r3
 8005daa:	091b      	lsrs	r3, r3, #4
 8005dac:	009a      	lsls	r2, r3, #2
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ea8 <HAL_DMA_Init+0x14c>)
 8005db6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005df4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f9cc 	bl	80061a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e18:	d102      	bne.n	8005e20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e34:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d010      	beq.n	8005e60 <HAL_DMA_Init+0x104>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d80c      	bhi.n	8005e60 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f9ec 	bl	8006224 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e5c:	605a      	str	r2, [r3, #4]
 8005e5e:	e008      	b.n	8005e72 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40020407 	.word	0x40020407
 8005e98:	bffdfff8 	.word	0xbffdfff8
 8005e9c:	cccccccd 	.word	0xcccccccd
 8005ea0:	40020000 	.word	0x40020000
 8005ea4:	bffdfbf8 	.word	0xbffdfbf8
 8005ea8:	40020400 	.word	0x40020400

08005eac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d005      	beq.n	8005ed0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	73fb      	strb	r3, [r7, #15]
 8005ece:	e037      	b.n	8005f40 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 020e 	bic.w	r2, r2, #14
 8005ede:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005eee:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0201 	bic.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f04:	f003 021f 	and.w	r2, r3, #31
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f12:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f1c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00c      	beq.n	8005f40 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f34:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f3e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d00d      	beq.n	8005f92 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
 8005f90:	e047      	b.n	8006022 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 020e 	bic.w	r2, r2, #14
 8005fa0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0201 	bic.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc6:	f003 021f 	and.w	r2, r3, #31
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fce:	2101      	movs	r1, #1
 8005fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8005fd4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005fde:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00c      	beq.n	8006002 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ff6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006000:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	4798      	blx	r3
    }
  }
  return status;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006048:	f003 031f 	and.w	r3, r3, #31
 800604c:	2204      	movs	r2, #4
 800604e:	409a      	lsls	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4013      	ands	r3, r2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d026      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x7a>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 0304 	and.w	r3, r3, #4
 800605e:	2b00      	cmp	r3, #0
 8006060:	d021      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b00      	cmp	r3, #0
 800606e:	d107      	bne.n	8006080 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0204 	bic.w	r2, r2, #4
 800607e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006084:	f003 021f 	and.w	r2, r3, #31
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608c:	2104      	movs	r1, #4
 800608e:	fa01 f202 	lsl.w	r2, r1, r2
 8006092:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006098:	2b00      	cmp	r3, #0
 800609a:	d071      	beq.n	8006180 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80060a4:	e06c      	b.n	8006180 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	2202      	movs	r2, #2
 80060b0:	409a      	lsls	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4013      	ands	r3, r2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d02e      	beq.n	8006118 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d029      	beq.n	8006118 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10b      	bne.n	80060ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 020a 	bic.w	r2, r2, #10
 80060e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ee:	f003 021f 	and.w	r2, r3, #31
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f6:	2102      	movs	r1, #2
 80060f8:	fa01 f202 	lsl.w	r2, r1, r2
 80060fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d038      	beq.n	8006180 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006116:	e033      	b.n	8006180 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	2208      	movs	r2, #8
 8006122:	409a      	lsls	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4013      	ands	r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d02a      	beq.n	8006182 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d025      	beq.n	8006182 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 020e 	bic.w	r2, r2, #14
 8006144:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614a:	f003 021f 	and.w	r2, r3, #31
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006152:	2101      	movs	r1, #1
 8006154:	fa01 f202 	lsl.w	r2, r1, r2
 8006158:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006174:	2b00      	cmp	r3, #0
 8006176:	d004      	beq.n	8006182 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006180:	bf00      	nop
 8006182:	bf00      	nop
}
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006198:	b2db      	uxtb	r3, r3
}
 800619a:	4618      	mov	r0, r3
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
	...

080061a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	4b16      	ldr	r3, [pc, #88]	@ (8006210 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d802      	bhi.n	80061c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80061bc:	4b15      	ldr	r3, [pc, #84]	@ (8006214 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	e001      	b.n	80061c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80061c2:	4b15      	ldr	r3, [pc, #84]	@ (8006218 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80061c4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	3b08      	subs	r3, #8
 80061d2:	4a12      	ldr	r2, [pc, #72]	@ (800621c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80061d4:	fba2 2303 	umull	r2, r3, r2, r3
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e0:	089b      	lsrs	r3, r3, #2
 80061e2:	009a      	lsls	r2, r3, #2
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4413      	add	r3, r2
 80061e8:	461a      	mov	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a0b      	ldr	r2, [pc, #44]	@ (8006220 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80061f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	2201      	movs	r2, #1
 80061fc:	409a      	lsls	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40020407 	.word	0x40020407
 8006214:	40020800 	.word	0x40020800
 8006218:	40020820 	.word	0x40020820
 800621c:	cccccccd 	.word	0xcccccccd
 8006220:	40020880 	.word	0x40020880

08006224 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4b0b      	ldr	r3, [pc, #44]	@ (8006264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	461a      	mov	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a08      	ldr	r2, [pc, #32]	@ (8006268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006246:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3b01      	subs	r3, #1
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	2201      	movs	r2, #1
 8006252:	409a      	lsls	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006258:	bf00      	nop
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	1000823f 	.word	0x1000823f
 8006268:	40020940 	.word	0x40020940

0800626c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e147      	b.n	800650e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fb fe30 	bl	8001ef8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0210 	bic.w	r2, r2, #16
 80062a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062a8:	f7ff fc1a 	bl	8005ae0 <HAL_GetTick>
 80062ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80062ae:	e012      	b.n	80062d6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80062b0:	f7ff fc16 	bl	8005ae0 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b0a      	cmp	r3, #10
 80062bc:	d90b      	bls.n	80062d6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c2:	f043 0201 	orr.w	r2, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2203      	movs	r2, #3
 80062ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e11b      	b.n	800650e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d0e5      	beq.n	80062b0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699a      	ldr	r2, [r3, #24]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062f4:	f7ff fbf4 	bl	8005ae0 <HAL_GetTick>
 80062f8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80062fa:	e012      	b.n	8006322 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80062fc:	f7ff fbf0 	bl	8005ae0 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b0a      	cmp	r3, #10
 8006308:	d90b      	bls.n	8006322 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800630e:	f043 0201 	orr.w	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2203      	movs	r2, #3
 800631a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e0f5      	b.n	800650e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0e5      	beq.n	80062fc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0202 	orr.w	r2, r2, #2
 800633e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a74      	ldr	r2, [pc, #464]	@ (8006518 <HAL_FDCAN_Init+0x2ac>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d103      	bne.n	8006352 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800634a:	4a74      	ldr	r2, [pc, #464]	@ (800651c <HAL_FDCAN_Init+0x2b0>)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	7c1b      	ldrb	r3, [r3, #16]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d108      	bne.n	800636c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699a      	ldr	r2, [r3, #24]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006368:	619a      	str	r2, [r3, #24]
 800636a:	e007      	b.n	800637c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699a      	ldr	r2, [r3, #24]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800637a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	7c5b      	ldrb	r3, [r3, #17]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d108      	bne.n	8006396 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006392:	619a      	str	r2, [r3, #24]
 8006394:	e007      	b.n	80063a6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699a      	ldr	r2, [r3, #24]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063a4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	7c9b      	ldrb	r3, [r3, #18]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d108      	bne.n	80063c0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699a      	ldr	r2, [r3, #24]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063bc:	619a      	str	r2, [r3, #24]
 80063be:	e007      	b.n	80063d0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	699a      	ldr	r2, [r3, #24]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80063ce:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699a      	ldr	r2, [r3, #24]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80063f4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0210 	bic.w	r2, r2, #16
 8006404:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d108      	bne.n	8006420 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699a      	ldr	r2, [r3, #24]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0204 	orr.w	r2, r2, #4
 800641c:	619a      	str	r2, [r3, #24]
 800641e:	e02c      	b.n	800647a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d028      	beq.n	800647a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d01c      	beq.n	800646a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800643e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0210 	orr.w	r2, r2, #16
 800644e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	2b03      	cmp	r3, #3
 8006456:	d110      	bne.n	800647a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0220 	orr.w	r2, r2, #32
 8006466:	619a      	str	r2, [r3, #24]
 8006468:	e007      	b.n	800647a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699a      	ldr	r2, [r3, #24]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0220 	orr.w	r2, r2, #32
 8006478:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	3b01      	subs	r3, #1
 8006480:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	3b01      	subs	r3, #1
 8006488:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800648a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006492:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	3b01      	subs	r3, #1
 800649c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80064a2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064a4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ae:	d115      	bne.n	80064dc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ba:	3b01      	subs	r3, #1
 80064bc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80064be:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c4:	3b01      	subs	r3, #1
 80064c6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80064c8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d0:	3b01      	subs	r3, #1
 80064d2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80064d8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80064da:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa58 	bl	80069a8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	40006400 	.word	0x40006400
 800651c:	40006500 	.word	0x40006500

08006520 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006530:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006532:	7dfb      	ldrb	r3, [r7, #23]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d002      	beq.n	800653e <HAL_FDCAN_ConfigFilter+0x1e>
 8006538:	7dfb      	ldrb	r3, [r7, #23]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d13d      	bne.n	80065ba <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d119      	bne.n	800657a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006552:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800655a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006560:	4313      	orrs	r3, r2
 8006562:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	e01d      	b.n	80065b6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	075a      	lsls	r2, r3, #29
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	4313      	orrs	r3, r2
 8006586:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	079a      	lsls	r2, r3, #30
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	4413      	add	r3, r2
 80065a2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	3304      	adds	r3, #4
 80065ae:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	e006      	b.n	80065c8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065be:	f043 0202 	orr.w	r2, r3, #2
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
  }
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d116      	bne.n	800661c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065f6:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	011a      	lsls	r2, r3, #4
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	431a      	orrs	r2, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	431a      	orrs	r2, r3
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	431a      	orrs	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	e006      	b.n	800662a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006620:	f043 0204 	orr.w	r2, r3, #4
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
  }
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b01      	cmp	r3, #1
 800664c:	d108      	bne.n	8006660 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	0219      	lsls	r1, r3, #8
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	430a      	orrs	r2, r1
 800665a:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	e006      	b.n	800666e <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006664:	f043 0204 	orr.w	r2, r3, #4
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
  }
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b01      	cmp	r3, #1
 800668c:	d109      	bne.n	80066a2 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800669c:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	e006      	b.n	80066b0 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066a6:	f043 0204 	orr.w	r2, r3, #4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
  }
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d110      	bne.n	80066f2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e006      	b.n	8006700 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f6:	f043 0204 	orr.w	r2, r3, #4
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
  }
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d12c      	bne.n	800677e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800672c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006738:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e023      	b.n	800678c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800674c:	0c1b      	lsrs	r3, r3, #16
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 f990 	bl	8006a80 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2101      	movs	r1, #1
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	fa01 f202 	lsl.w	r2, r1, r2
 800676c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006770:	2201      	movs	r2, #1
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	409a      	lsls	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	e006      	b.n	800678c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006782:	f043 0208 	orr.w	r2, r3, #8
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
  }
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006794:	b480      	push	{r7}
 8006796:	b08b      	sub	sp, #44	@ 0x2c
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80067a8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80067aa:	7efb      	ldrb	r3, [r7, #27]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	f040 80bc 	bne.w	800692a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b40      	cmp	r3, #64	@ 0x40
 80067b6:	d121      	bne.n	80067fc <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d107      	bne.n	80067d8 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e0af      	b.n	8006938 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e0:	0a1b      	lsrs	r3, r3, #8
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	4613      	mov	r3, r2
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	4413      	add	r3, r2
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	440b      	add	r3, r1
 80067f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067fa:	e020      	b.n	800683e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006804:	f003 030f 	and.w	r3, r3, #15
 8006808:	2b00      	cmp	r3, #0
 800680a:	d107      	bne.n	800681c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006810:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e08d      	b.n	8006938 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006824:	0a1b      	lsrs	r3, r3, #8
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	4613      	mov	r3, r2
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	4413      	add	r3, r2
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	440b      	add	r3, r1
 800683c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d107      	bne.n	8006862 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	0c9b      	lsrs	r3, r3, #18
 8006858:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	e005      	b.n	800686e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	3304      	adds	r3, #4
 800688a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800688c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	b29a      	uxth	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	0e1b      	lsrs	r3, r3, #24
 80068c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80068c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	0fda      	lsrs	r2, r3, #31
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	3304      	adds	r3, #4
 80068d6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80068dc:	2300      	movs	r3, #0
 80068de:	623b      	str	r3, [r7, #32]
 80068e0:	e00a      	b.n	80068f8 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	441a      	add	r2, r3
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	440b      	add	r3, r1
 80068ee:	7812      	ldrb	r2, [r2, #0]
 80068f0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	3301      	adds	r3, #1
 80068f6:	623b      	str	r3, [r7, #32]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	0c1b      	lsrs	r3, r3, #16
 80068fe:	4a11      	ldr	r2, [pc, #68]	@ (8006944 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8006900:	5cd3      	ldrb	r3, [r2, r3]
 8006902:	461a      	mov	r2, r3
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	4293      	cmp	r3, r2
 8006908:	d3eb      	bcc.n	80068e2 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b40      	cmp	r3, #64	@ 0x40
 800690e:	d105      	bne.n	800691c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800691a:	e004      	b.n	8006926 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	e006      	b.n	8006938 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800692e:	f043 0208 	orr.w	r2, r3, #8
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
  }
}
 8006938:	4618      	mov	r0, r3
 800693a:	372c      	adds	r7, #44	@ 0x2c
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	08012bc8 	.word	0x08012bc8

08006948 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b40      	cmp	r3, #64	@ 0x40
 8006956:	d107      	bne.n	8006968 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e006      	b.n	8006976 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006970:	f003 030f 	and.w	r3, r3, #15
 8006974:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8006976:	68fb      	ldr	r3, [r7, #12]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006994:	f003 0307 	and.w	r3, r3, #7
 8006998:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800699a:	68fb      	ldr	r3, [r7, #12]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80069b0:	4b30      	ldr	r3, [pc, #192]	@ (8006a74 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80069b2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2f      	ldr	r2, [pc, #188]	@ (8006a78 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d103      	bne.n	80069c6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80069c4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a2c      	ldr	r2, [pc, #176]	@ (8006a7c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d103      	bne.n	80069d8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80069d6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069e6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ee:	041a      	lsls	r2, r3, #16
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a0c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a14:	061a      	lsls	r2, r3, #24
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	e005      	b.n	8006a5a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3304      	adds	r3, #4
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d3f3      	bcc.n	8006a4e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	4000a400 	.word	0x4000a400
 8006a78:	40006800 	.word	0x40006800
 8006a7c:	40006c00 	.word	0x40006c00

08006a80 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b089      	sub	sp, #36	@ 0x24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10a      	bne.n	8006aac <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006a9e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	61fb      	str	r3, [r7, #28]
 8006aaa:	e00a      	b.n	8006ac2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006ab4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006aba:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006abc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ac0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006acc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006ad2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006ad8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	4413      	add	r3, r2
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	440b      	add	r3, r1
 8006af2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	3304      	adds	r3, #4
 8006afe:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	e020      	b.n	8006b54 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	3303      	adds	r3, #3
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	4413      	add	r3, r2
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	3302      	adds	r3, #2
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	440b      	add	r3, r1
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b2a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	440b      	add	r3, r1
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b38:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	440a      	add	r2, r1
 8006b40:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b42:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	3304      	adds	r3, #4
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	0c1b      	lsrs	r3, r3, #16
 8006b5a:	4a06      	ldr	r2, [pc, #24]	@ (8006b74 <FDCAN_CopyMessageToRAM+0xf4>)
 8006b5c:	5cd3      	ldrb	r3, [r2, r3]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d3d5      	bcc.n	8006b12 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	3724      	adds	r7, #36	@ 0x24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	08012bc8 	.word	0x08012bc8

08006b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006b86:	e15a      	b.n	8006e3e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	fa01 f303 	lsl.w	r3, r1, r3
 8006b94:	4013      	ands	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 814c 	beq.w	8006e38 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f003 0303 	and.w	r3, r3, #3
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d005      	beq.n	8006bb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d130      	bne.n	8006c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	2203      	movs	r2, #3
 8006bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc8:	43db      	mvns	r3, r3
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bee:	2201      	movs	r2, #1
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	091b      	lsrs	r3, r3, #4
 8006c04:	f003 0201 	and.w	r2, r3, #1
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d017      	beq.n	8006c56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	2203      	movs	r2, #3
 8006c32:	fa02 f303 	lsl.w	r3, r2, r3
 8006c36:	43db      	mvns	r3, r3
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d123      	bne.n	8006caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	08da      	lsrs	r2, r3, #3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3208      	adds	r2, #8
 8006c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	220f      	movs	r2, #15
 8006c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7e:	43db      	mvns	r3, r3
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4013      	ands	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	691a      	ldr	r2, [r3, #16]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	08da      	lsrs	r2, r3, #3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3208      	adds	r2, #8
 8006ca4:	6939      	ldr	r1, [r7, #16]
 8006ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cba:	43db      	mvns	r3, r3
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f003 0203 	and.w	r2, r3, #3
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 80a6 	beq.w	8006e38 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cec:	4b5b      	ldr	r3, [pc, #364]	@ (8006e5c <HAL_GPIO_Init+0x2e4>)
 8006cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf0:	4a5a      	ldr	r2, [pc, #360]	@ (8006e5c <HAL_GPIO_Init+0x2e4>)
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	6613      	str	r3, [r2, #96]	@ 0x60
 8006cf8:	4b58      	ldr	r3, [pc, #352]	@ (8006e5c <HAL_GPIO_Init+0x2e4>)
 8006cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	60bb      	str	r3, [r7, #8]
 8006d02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d04:	4a56      	ldr	r2, [pc, #344]	@ (8006e60 <HAL_GPIO_Init+0x2e8>)
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	089b      	lsrs	r3, r3, #2
 8006d0a:	3302      	adds	r3, #2
 8006d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	220f      	movs	r2, #15
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	43db      	mvns	r3, r3
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4013      	ands	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006d2e:	d01f      	beq.n	8006d70 <HAL_GPIO_Init+0x1f8>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a4c      	ldr	r2, [pc, #304]	@ (8006e64 <HAL_GPIO_Init+0x2ec>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d019      	beq.n	8006d6c <HAL_GPIO_Init+0x1f4>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a4b      	ldr	r2, [pc, #300]	@ (8006e68 <HAL_GPIO_Init+0x2f0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d013      	beq.n	8006d68 <HAL_GPIO_Init+0x1f0>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a4a      	ldr	r2, [pc, #296]	@ (8006e6c <HAL_GPIO_Init+0x2f4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00d      	beq.n	8006d64 <HAL_GPIO_Init+0x1ec>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a49      	ldr	r2, [pc, #292]	@ (8006e70 <HAL_GPIO_Init+0x2f8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d007      	beq.n	8006d60 <HAL_GPIO_Init+0x1e8>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a48      	ldr	r2, [pc, #288]	@ (8006e74 <HAL_GPIO_Init+0x2fc>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d101      	bne.n	8006d5c <HAL_GPIO_Init+0x1e4>
 8006d58:	2305      	movs	r3, #5
 8006d5a:	e00a      	b.n	8006d72 <HAL_GPIO_Init+0x1fa>
 8006d5c:	2306      	movs	r3, #6
 8006d5e:	e008      	b.n	8006d72 <HAL_GPIO_Init+0x1fa>
 8006d60:	2304      	movs	r3, #4
 8006d62:	e006      	b.n	8006d72 <HAL_GPIO_Init+0x1fa>
 8006d64:	2303      	movs	r3, #3
 8006d66:	e004      	b.n	8006d72 <HAL_GPIO_Init+0x1fa>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e002      	b.n	8006d72 <HAL_GPIO_Init+0x1fa>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e000      	b.n	8006d72 <HAL_GPIO_Init+0x1fa>
 8006d70:	2300      	movs	r3, #0
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	f002 0203 	and.w	r2, r2, #3
 8006d78:	0092      	lsls	r2, r2, #2
 8006d7a:	4093      	lsls	r3, r2
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d82:	4937      	ldr	r1, [pc, #220]	@ (8006e60 <HAL_GPIO_Init+0x2e8>)
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	089b      	lsrs	r3, r3, #2
 8006d88:	3302      	adds	r3, #2
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d90:	4b39      	ldr	r3, [pc, #228]	@ (8006e78 <HAL_GPIO_Init+0x300>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	43db      	mvns	r3, r3
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006db4:	4a30      	ldr	r2, [pc, #192]	@ (8006e78 <HAL_GPIO_Init+0x300>)
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006dba:	4b2f      	ldr	r3, [pc, #188]	@ (8006e78 <HAL_GPIO_Init+0x300>)
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	43db      	mvns	r3, r3
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006dde:	4a26      	ldr	r2, [pc, #152]	@ (8006e78 <HAL_GPIO_Init+0x300>)
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006de4:	4b24      	ldr	r3, [pc, #144]	@ (8006e78 <HAL_GPIO_Init+0x300>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	43db      	mvns	r3, r3
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4013      	ands	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006e08:	4a1b      	ldr	r2, [pc, #108]	@ (8006e78 <HAL_GPIO_Init+0x300>)
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8006e78 <HAL_GPIO_Init+0x300>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	43db      	mvns	r3, r3
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006e32:	4a11      	ldr	r2, [pc, #68]	@ (8006e78 <HAL_GPIO_Init+0x300>)
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	fa22 f303 	lsr.w	r3, r2, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f47f ae9d 	bne.w	8006b88 <HAL_GPIO_Init+0x10>
  }
}
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	371c      	adds	r7, #28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	40010000 	.word	0x40010000
 8006e64:	48000400 	.word	0x48000400
 8006e68:	48000800 	.word	0x48000800
 8006e6c:	48000c00 	.word	0x48000c00
 8006e70:	48001000 	.word	0x48001000
 8006e74:	48001400 	.word	0x48001400
 8006e78:	40010400 	.word	0x40010400

08006e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	807b      	strh	r3, [r7, #2]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e8c:	787b      	ldrb	r3, [r7, #1]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e92:	887a      	ldrh	r2, [r7, #2]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e98:	e002      	b.n	8006ea0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e9a:	887a      	ldrh	r2, [r7, #2]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ebe:	887a      	ldrh	r2, [r7, #2]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	041a      	lsls	r2, r3, #16
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	43d9      	mvns	r1, r3
 8006eca:	887b      	ldrh	r3, [r7, #2]
 8006ecc:	400b      	ands	r3, r1
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	619a      	str	r2, [r3, #24]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e08d      	b.n	800700e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fb f90a 	bl	8002120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2224      	movs	r2, #36	@ 0x24
 8006f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0201 	bic.w	r2, r2, #1
 8006f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006f30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d107      	bne.n	8006f5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f56:	609a      	str	r2, [r3, #8]
 8006f58:	e006      	b.n	8006f68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006f66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d108      	bne.n	8006f82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f7e:	605a      	str	r2, [r3, #4]
 8006f80:	e007      	b.n	8006f92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6812      	ldr	r2, [r2, #0]
 8006f9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006fa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	69d9      	ldr	r1, [r3, #28]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a1a      	ldr	r2, [r3, #32]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0201 	orr.w	r2, r2, #1
 8006fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af02      	add	r7, sp, #8
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	4608      	mov	r0, r1
 8007022:	4611      	mov	r1, r2
 8007024:	461a      	mov	r2, r3
 8007026:	4603      	mov	r3, r0
 8007028:	817b      	strh	r3, [r7, #10]
 800702a:	460b      	mov	r3, r1
 800702c:	813b      	strh	r3, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b20      	cmp	r3, #32
 800703c:	f040 80f9 	bne.w	8007232 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <HAL_I2C_Mem_Write+0x34>
 8007046:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007048:	2b00      	cmp	r3, #0
 800704a:	d105      	bne.n	8007058 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007052:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e0ed      	b.n	8007234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800705e:	2b01      	cmp	r3, #1
 8007060:	d101      	bne.n	8007066 <HAL_I2C_Mem_Write+0x4e>
 8007062:	2302      	movs	r3, #2
 8007064:	e0e6      	b.n	8007234 <HAL_I2C_Mem_Write+0x21c>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800706e:	f7fe fd37 	bl	8005ae0 <HAL_GetTick>
 8007072:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	2319      	movs	r3, #25
 800707a:	2201      	movs	r2, #1
 800707c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f001 f84c 	bl	800811e <I2C_WaitOnFlagUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e0d1      	b.n	8007234 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2221      	movs	r2, #33	@ 0x21
 8007094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2240      	movs	r2, #64	@ 0x40
 800709c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a3a      	ldr	r2, [r7, #32]
 80070aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80070b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070b8:	88f8      	ldrh	r0, [r7, #6]
 80070ba:	893a      	ldrh	r2, [r7, #8]
 80070bc:	8979      	ldrh	r1, [r7, #10]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	4603      	mov	r3, r0
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fb8f 	bl	80077ec <I2C_RequestMemoryWrite>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e0a9      	b.n	8007234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2bff      	cmp	r3, #255	@ 0xff
 80070e8:	d90e      	bls.n	8007108 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	22ff      	movs	r2, #255	@ 0xff
 80070ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	8979      	ldrh	r1, [r7, #10]
 80070f8:	2300      	movs	r3, #0
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f001 f9cf 	bl	80084a4 <I2C_TransferConfig>
 8007106:	e00f      	b.n	8007128 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710c:	b29a      	uxth	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007116:	b2da      	uxtb	r2, r3
 8007118:	8979      	ldrh	r1, [r7, #10]
 800711a:	2300      	movs	r3, #0
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f001 f9be 	bl	80084a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f001 f84f 	bl	80081d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e07b      	b.n	8007234 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007140:	781a      	ldrb	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007156:	b29b      	uxth	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007170:	b29b      	uxth	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d034      	beq.n	80071e0 <HAL_I2C_Mem_Write+0x1c8>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800717a:	2b00      	cmp	r3, #0
 800717c:	d130      	bne.n	80071e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007184:	2200      	movs	r2, #0
 8007186:	2180      	movs	r1, #128	@ 0x80
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 ffc8 	bl	800811e <I2C_WaitOnFlagUntilTimeout>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e04d      	b.n	8007234 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800719c:	b29b      	uxth	r3, r3
 800719e:	2bff      	cmp	r3, #255	@ 0xff
 80071a0:	d90e      	bls.n	80071c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	22ff      	movs	r2, #255	@ 0xff
 80071a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	8979      	ldrh	r1, [r7, #10]
 80071b0:	2300      	movs	r3, #0
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f001 f973 	bl	80084a4 <I2C_TransferConfig>
 80071be:	e00f      	b.n	80071e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	8979      	ldrh	r1, [r7, #10]
 80071d2:	2300      	movs	r3, #0
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f001 f962 	bl	80084a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d19e      	bne.n	8007128 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f001 f835 	bl	800825e <I2C_WaitOnSTOPFlagUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e01a      	b.n	8007234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2220      	movs	r2, #32
 8007204:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6859      	ldr	r1, [r3, #4]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	4b0a      	ldr	r3, [pc, #40]	@ (800723c <HAL_I2C_Mem_Write+0x224>)
 8007212:	400b      	ands	r3, r1
 8007214:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2220      	movs	r2, #32
 800721a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	e000      	b.n	8007234 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007232:	2302      	movs	r3, #2
  }
}
 8007234:	4618      	mov	r0, r3
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	fe00e800 	.word	0xfe00e800

08007240 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af02      	add	r7, sp, #8
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	461a      	mov	r2, r3
 800724e:	4603      	mov	r3, r0
 8007250:	817b      	strh	r3, [r7, #10]
 8007252:	460b      	mov	r3, r1
 8007254:	813b      	strh	r3, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b20      	cmp	r3, #32
 8007264:	f040 80fd 	bne.w	8007462 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_I2C_Mem_Read+0x34>
 800726e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	d105      	bne.n	8007280 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800727a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0f1      	b.n	8007464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <HAL_I2C_Mem_Read+0x4e>
 800728a:	2302      	movs	r3, #2
 800728c:	e0ea      	b.n	8007464 <HAL_I2C_Mem_Read+0x224>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007296:	f7fe fc23 	bl	8005ae0 <HAL_GetTick>
 800729a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	2319      	movs	r3, #25
 80072a2:	2201      	movs	r2, #1
 80072a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 ff38 	bl	800811e <I2C_WaitOnFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e0d5      	b.n	8007464 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2222      	movs	r2, #34	@ 0x22
 80072bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2240      	movs	r2, #64	@ 0x40
 80072c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a3a      	ldr	r2, [r7, #32]
 80072d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80072d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072e0:	88f8      	ldrh	r0, [r7, #6]
 80072e2:	893a      	ldrh	r2, [r7, #8]
 80072e4:	8979      	ldrh	r1, [r7, #10]
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	4603      	mov	r3, r0
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 facf 	bl	8007894 <I2C_RequestMemoryRead>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e0ad      	b.n	8007464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800730c:	b29b      	uxth	r3, r3
 800730e:	2bff      	cmp	r3, #255	@ 0xff
 8007310:	d90e      	bls.n	8007330 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	22ff      	movs	r2, #255	@ 0xff
 8007316:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800731c:	b2da      	uxtb	r2, r3
 800731e:	8979      	ldrh	r1, [r7, #10]
 8007320:	4b52      	ldr	r3, [pc, #328]	@ (800746c <HAL_I2C_Mem_Read+0x22c>)
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f001 f8bb 	bl	80084a4 <I2C_TransferConfig>
 800732e:	e00f      	b.n	8007350 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800733e:	b2da      	uxtb	r2, r3
 8007340:	8979      	ldrh	r1, [r7, #10]
 8007342:	4b4a      	ldr	r3, [pc, #296]	@ (800746c <HAL_I2C_Mem_Read+0x22c>)
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f001 f8aa 	bl	80084a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007356:	2200      	movs	r2, #0
 8007358:	2104      	movs	r1, #4
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 fedf 	bl	800811e <I2C_WaitOnFlagUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e07c      	b.n	8007464 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d034      	beq.n	8007410 <HAL_I2C_Mem_Read+0x1d0>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d130      	bne.n	8007410 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b4:	2200      	movs	r2, #0
 80073b6:	2180      	movs	r1, #128	@ 0x80
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 feb0 	bl	800811e <I2C_WaitOnFlagUntilTimeout>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e04d      	b.n	8007464 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2bff      	cmp	r3, #255	@ 0xff
 80073d0:	d90e      	bls.n	80073f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	22ff      	movs	r2, #255	@ 0xff
 80073d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	8979      	ldrh	r1, [r7, #10]
 80073e0:	2300      	movs	r3, #0
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f001 f85b 	bl	80084a4 <I2C_TransferConfig>
 80073ee:	e00f      	b.n	8007410 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	8979      	ldrh	r1, [r7, #10]
 8007402:	2300      	movs	r3, #0
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f001 f84a 	bl	80084a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007414:	b29b      	uxth	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d19a      	bne.n	8007350 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 ff1d 	bl	800825e <I2C_WaitOnSTOPFlagUntilTimeout>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e01a      	b.n	8007464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2220      	movs	r2, #32
 8007434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6859      	ldr	r1, [r3, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	4b0b      	ldr	r3, [pc, #44]	@ (8007470 <HAL_I2C_Mem_Read+0x230>)
 8007442:	400b      	ands	r3, r1
 8007444:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	e000      	b.n	8007464 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007462:	2302      	movs	r3, #2
  }
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	80002400 	.word	0x80002400
 8007470:	fe00e800 	.word	0xfe00e800

08007474 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	68f9      	ldr	r1, [r7, #12]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
  }
}
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00f      	beq.n	80074ea <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00a      	beq.n	80074ea <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d8:	f043 0201 	orr.w	r2, r3, #1
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074e8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00f      	beq.n	8007514 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007502:	f043 0208 	orr.w	r2, r3, #8
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007512:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00f      	beq.n	800753e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800752c:	f043 0202 	orr.w	r2, r3, #2
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800753c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007542:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 030b 	and.w	r3, r3, #11
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800754e:	68f9      	ldr	r1, [r7, #12]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fc8b 	bl	8007e6c <I2C_ITError>
  }
}
 8007556:	bf00      	nop
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007586:	b480      	push	{r7}
 8007588:	b083      	sub	sp, #12
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	460b      	mov	r3, r1
 8007590:	70fb      	strb	r3, [r7, #3]
 8007592:	4613      	mov	r3, r2
 8007594:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80075be:	bf00      	nop
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ec:	b2db      	uxtb	r3, r3
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b086      	sub	sp, #24
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007616:	2b01      	cmp	r3, #1
 8007618:	d101      	bne.n	800761e <I2C_Slave_ISR_IT+0x24>
 800761a:	2302      	movs	r3, #2
 800761c:	e0e2      	b.n	80077e4 <I2C_Slave_ISR_IT+0x1ea>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f003 0320 	and.w	r3, r3, #32
 800762c:	2b00      	cmp	r3, #0
 800762e:	d009      	beq.n	8007644 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800763a:	6939      	ldr	r1, [r7, #16]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 fa5d 	bl	8007afc <I2C_ITSlaveCplt>
 8007642:	e0ca      	b.n	80077da <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f003 0310 	and.w	r3, r3, #16
 800764a:	2b00      	cmp	r3, #0
 800764c:	d04b      	beq.n	80076e6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007654:	2b00      	cmp	r3, #0
 8007656:	d046      	beq.n	80076e6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800765c:	b29b      	uxth	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d128      	bne.n	80076b4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b28      	cmp	r3, #40	@ 0x28
 800766c:	d108      	bne.n	8007680 <I2C_Slave_ISR_IT+0x86>
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007674:	d104      	bne.n	8007680 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007676:	6939      	ldr	r1, [r7, #16]
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 fba3 	bl	8007dc4 <I2C_ITListenCplt>
 800767e:	e031      	b.n	80076e4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b29      	cmp	r3, #41	@ 0x29
 800768a:	d10e      	bne.n	80076aa <I2C_Slave_ISR_IT+0xb0>
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007692:	d00a      	beq.n	80076aa <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2210      	movs	r2, #16
 800769a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 fcfc 	bl	800809a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 f9ce 	bl	8007a44 <I2C_ITSlaveSeqCplt>
 80076a8:	e01c      	b.n	80076e4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2210      	movs	r2, #16
 80076b0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80076b2:	e08f      	b.n	80077d4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2210      	movs	r2, #16
 80076ba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c0:	f043 0204 	orr.w	r2, r3, #4
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <I2C_Slave_ISR_IT+0xdc>
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076d4:	d17e      	bne.n	80077d4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076da:	4619      	mov	r1, r3
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fbc5 	bl	8007e6c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80076e2:	e077      	b.n	80077d4 <I2C_Slave_ISR_IT+0x1da>
 80076e4:	e076      	b.n	80077d4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d02f      	beq.n	8007750 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d02a      	beq.n	8007750 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076fe:	b29b      	uxth	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d018      	beq.n	8007736 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800773a:	b29b      	uxth	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d14b      	bne.n	80077d8 <I2C_Slave_ISR_IT+0x1de>
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007746:	d047      	beq.n	80077d8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 f97b 	bl	8007a44 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800774e:	e043      	b.n	80077d8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d009      	beq.n	800776e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007760:	2b00      	cmp	r3, #0
 8007762:	d004      	beq.n	800776e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007764:	6939      	ldr	r1, [r7, #16]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 f8e8 	bl	800793c <I2C_ITAddrCplt>
 800776c:	e035      	b.n	80077da <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d030      	beq.n	80077da <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800777e:	2b00      	cmp	r3, #0
 8007780:	d02b      	beq.n	80077da <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007786:	b29b      	uxth	r3, r3
 8007788:	2b00      	cmp	r3, #0
 800778a:	d018      	beq.n	80077be <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007790:	781a      	ldrb	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b4:	3b01      	subs	r3, #1
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	851a      	strh	r2, [r3, #40]	@ 0x28
 80077bc:	e00d      	b.n	80077da <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077c4:	d002      	beq.n	80077cc <I2C_Slave_ISR_IT+0x1d2>
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d106      	bne.n	80077da <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f939 	bl	8007a44 <I2C_ITSlaveSeqCplt>
 80077d2:	e002      	b.n	80077da <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80077d4:	bf00      	nop
 80077d6:	e000      	b.n	80077da <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80077d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	817b      	strh	r3, [r7, #10]
 80077fe:	460b      	mov	r3, r1
 8007800:	813b      	strh	r3, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	b2da      	uxtb	r2, r3
 800780a:	8979      	ldrh	r1, [r7, #10]
 800780c:	4b20      	ldr	r3, [pc, #128]	@ (8007890 <I2C_RequestMemoryWrite+0xa4>)
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 fe45 	bl	80084a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800781a:	69fa      	ldr	r2, [r7, #28]
 800781c:	69b9      	ldr	r1, [r7, #24]
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 fcd6 	bl	80081d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e02c      	b.n	8007888 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800782e:	88fb      	ldrh	r3, [r7, #6]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d105      	bne.n	8007840 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007834:	893b      	ldrh	r3, [r7, #8]
 8007836:	b2da      	uxtb	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	629a      	str	r2, [r3, #40]	@ 0x28
 800783e:	e015      	b.n	800786c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007840:	893b      	ldrh	r3, [r7, #8]
 8007842:	0a1b      	lsrs	r3, r3, #8
 8007844:	b29b      	uxth	r3, r3
 8007846:	b2da      	uxtb	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	69b9      	ldr	r1, [r7, #24]
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 fcbc 	bl	80081d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e012      	b.n	8007888 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007862:	893b      	ldrh	r3, [r7, #8]
 8007864:	b2da      	uxtb	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	2200      	movs	r2, #0
 8007874:	2180      	movs	r1, #128	@ 0x80
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 fc51 	bl	800811e <I2C_WaitOnFlagUntilTimeout>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e000      	b.n	8007888 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	80002000 	.word	0x80002000

08007894 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af02      	add	r7, sp, #8
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	4608      	mov	r0, r1
 800789e:	4611      	mov	r1, r2
 80078a0:	461a      	mov	r2, r3
 80078a2:	4603      	mov	r3, r0
 80078a4:	817b      	strh	r3, [r7, #10]
 80078a6:	460b      	mov	r3, r1
 80078a8:	813b      	strh	r3, [r7, #8]
 80078aa:	4613      	mov	r3, r2
 80078ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80078ae:	88fb      	ldrh	r3, [r7, #6]
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	8979      	ldrh	r1, [r7, #10]
 80078b4:	4b20      	ldr	r3, [pc, #128]	@ (8007938 <I2C_RequestMemoryRead+0xa4>)
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	2300      	movs	r3, #0
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fdf2 	bl	80084a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078c0:	69fa      	ldr	r2, [r7, #28]
 80078c2:	69b9      	ldr	r1, [r7, #24]
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 fc83 	bl	80081d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e02c      	b.n	800792e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078d4:	88fb      	ldrh	r3, [r7, #6]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d105      	bne.n	80078e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078da:	893b      	ldrh	r3, [r7, #8]
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80078e4:	e015      	b.n	8007912 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80078e6:	893b      	ldrh	r3, [r7, #8]
 80078e8:	0a1b      	lsrs	r3, r3, #8
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	69b9      	ldr	r1, [r7, #24]
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 fc69 	bl	80081d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e012      	b.n	800792e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007908:	893b      	ldrh	r3, [r7, #8]
 800790a:	b2da      	uxtb	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	2200      	movs	r2, #0
 800791a:	2140      	movs	r1, #64	@ 0x40
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 fbfe 	bl	800811e <I2C_WaitOnFlagUntilTimeout>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	80002000 	.word	0x80002000

0800793c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800794c:	b2db      	uxtb	r3, r3
 800794e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007952:	2b28      	cmp	r3, #40	@ 0x28
 8007954:	d16a      	bne.n	8007a2c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	0c1b      	lsrs	r3, r3, #16
 800795e:	b2db      	uxtb	r3, r3
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	0c1b      	lsrs	r3, r3, #16
 800796e:	b29b      	uxth	r3, r3
 8007970:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007974:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	b29b      	uxth	r3, r3
 800797e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007982:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	b29b      	uxth	r3, r3
 800798c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007990:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d138      	bne.n	8007a0c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800799a:	897b      	ldrh	r3, [r7, #10]
 800799c:	09db      	lsrs	r3, r3, #7
 800799e:	b29a      	uxth	r2, r3
 80079a0:	89bb      	ldrh	r3, [r7, #12]
 80079a2:	4053      	eors	r3, r2
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f003 0306 	and.w	r3, r3, #6
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d11c      	bne.n	80079e8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80079ae:	897b      	ldrh	r3, [r7, #10]
 80079b0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d13b      	bne.n	8007a3c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2208      	movs	r2, #8
 80079d0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80079da:	89ba      	ldrh	r2, [r7, #12]
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff fdd0 	bl	8007586 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80079e6:	e029      	b.n	8007a3c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80079e8:	893b      	ldrh	r3, [r7, #8]
 80079ea:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80079ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fd89 	bl	8008508 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80079fe:	89ba      	ldrh	r2, [r7, #12]
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff fdbe 	bl	8007586 <HAL_I2C_AddrCallback>
}
 8007a0a:	e017      	b.n	8007a3c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007a0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fd79 	bl	8008508 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007a1e:	89ba      	ldrh	r2, [r7, #12]
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff fdae 	bl	8007586 <HAL_I2C_AddrCallback>
}
 8007a2a:	e007      	b.n	8007a3c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2208      	movs	r2, #8
 8007a32:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007a3c:	bf00      	nop
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d008      	beq.n	8007a78 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	e00c      	b.n	8007a92 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d007      	beq.n	8007a92 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a90:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b29      	cmp	r3, #41	@ 0x29
 8007a9c:	d112      	bne.n	8007ac4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2228      	movs	r2, #40	@ 0x28
 8007aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2221      	movs	r2, #33	@ 0x21
 8007aaa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007aac:	2101      	movs	r1, #1
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fd2a 	bl	8008508 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff fd4e 	bl	800755e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007ac2:	e017      	b.n	8007af4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ace:	d111      	bne.n	8007af4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2228      	movs	r2, #40	@ 0x28
 8007ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2222      	movs	r2, #34	@ 0x22
 8007adc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007ade:	2102      	movs	r1, #2
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fd11 	bl	8008508 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff fd3f 	bl	8007572 <HAL_I2C_SlaveRxCpltCallback>
}
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b16:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b1e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2220      	movs	r2, #32
 8007b26:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007b28:	7afb      	ldrb	r3, [r7, #11]
 8007b2a:	2b21      	cmp	r3, #33	@ 0x21
 8007b2c:	d002      	beq.n	8007b34 <I2C_ITSlaveCplt+0x38>
 8007b2e:	7afb      	ldrb	r3, [r7, #11]
 8007b30:	2b29      	cmp	r3, #41	@ 0x29
 8007b32:	d108      	bne.n	8007b46 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007b34:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fce5 	bl	8008508 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2221      	movs	r2, #33	@ 0x21
 8007b42:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b44:	e019      	b.n	8007b7a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	2b22      	cmp	r3, #34	@ 0x22
 8007b4a:	d002      	beq.n	8007b52 <I2C_ITSlaveCplt+0x56>
 8007b4c:	7afb      	ldrb	r3, [r7, #11]
 8007b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b50:	d108      	bne.n	8007b64 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007b52:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fcd6 	bl	8008508 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2222      	movs	r2, #34	@ 0x22
 8007b60:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b62:	e00a      	b.n	8007b7a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007b64:	7afb      	ldrb	r3, [r7, #11]
 8007b66:	2b28      	cmp	r3, #40	@ 0x28
 8007b68:	d107      	bne.n	8007b7a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007b6a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fcca 	bl	8008508 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b88:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6859      	ldr	r1, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	4b89      	ldr	r3, [pc, #548]	@ (8007dbc <I2C_ITSlaveCplt+0x2c0>)
 8007b96:	400b      	ands	r3, r1
 8007b98:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fa7d 	bl	800809a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d013      	beq.n	8007bd2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007bb8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d01f      	beq.n	8007c02 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007bd0:	e017      	b.n	8007c02 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d012      	beq.n	8007c02 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007bea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d006      	beq.n	8007c02 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d020      	beq.n	8007c4e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f023 0304 	bic.w	r3, r3, #4
 8007c12:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00c      	beq.n	8007c4e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	3b01      	subs	r3, #1
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c5c:	f043 0204 	orr.w	r2, r3, #4
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f003 0310 	and.w	r3, r3, #16
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d049      	beq.n	8007d02 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d044      	beq.n	8007d02 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d128      	bne.n	8007cd4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b28      	cmp	r3, #40	@ 0x28
 8007c8c:	d108      	bne.n	8007ca0 <I2C_ITSlaveCplt+0x1a4>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c94:	d104      	bne.n	8007ca0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007c96:	6979      	ldr	r1, [r7, #20]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f893 	bl	8007dc4 <I2C_ITListenCplt>
 8007c9e:	e030      	b.n	8007d02 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b29      	cmp	r3, #41	@ 0x29
 8007caa:	d10e      	bne.n	8007cca <I2C_ITSlaveCplt+0x1ce>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007cb2:	d00a      	beq.n	8007cca <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2210      	movs	r2, #16
 8007cba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f9ec 	bl	800809a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff febe 	bl	8007a44 <I2C_ITSlaveSeqCplt>
 8007cc8:	e01b      	b.n	8007d02 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2210      	movs	r2, #16
 8007cd0:	61da      	str	r2, [r3, #28]
 8007cd2:	e016      	b.n	8007d02 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2210      	movs	r2, #16
 8007cda:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce0:	f043 0204 	orr.w	r2, r3, #4
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <I2C_ITSlaveCplt+0x1fa>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cf4:	d105      	bne.n	8007d02 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f8b5 	bl	8007e6c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d010      	beq.n	8007d3a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f8a4 	bl	8007e6c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b28      	cmp	r3, #40	@ 0x28
 8007d2e:	d141      	bne.n	8007db4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007d30:	6979      	ldr	r1, [r7, #20]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f846 	bl	8007dc4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d38:	e03c      	b.n	8007db4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d42:	d014      	beq.n	8007d6e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff fe7d 	bl	8007a44 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8007dc0 <I2C_ITSlaveCplt+0x2c4>)
 8007d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2220      	movs	r2, #32
 8007d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7ff fc1b 	bl	80075a2 <HAL_I2C_ListenCpltCallback>
}
 8007d6c:	e022      	b.n	8007db4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b22      	cmp	r3, #34	@ 0x22
 8007d78:	d10e      	bne.n	8007d98 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff fbee 	bl	8007572 <HAL_I2C_SlaveRxCpltCallback>
}
 8007d96:	e00d      	b.n	8007db4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff fbd5 	bl	800755e <HAL_I2C_SlaveTxCpltCallback>
}
 8007db4:	bf00      	nop
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	fe00e800 	.word	0xfe00e800
 8007dc0:	ffff0000 	.word	0xffff0000

08007dc4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a25      	ldr	r2, [pc, #148]	@ (8007e68 <I2C_ITListenCplt+0xa4>)
 8007dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	f003 0304 	and.w	r3, r3, #4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d022      	beq.n	8007e40 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e04:	b2d2      	uxtb	r2, r2
 8007e06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d012      	beq.n	8007e40 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e38:	f043 0204 	orr.w	r2, r3, #4
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007e40:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fb5f 	bl	8008508 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2210      	movs	r2, #16
 8007e50:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff fba1 	bl	80075a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	ffff0000 	.word	0xffff0000

08007e6c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e7c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a6d      	ldr	r2, [pc, #436]	@ (8008040 <I2C_ITError+0x1d4>)
 8007e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	2b28      	cmp	r3, #40	@ 0x28
 8007ea2:	d005      	beq.n	8007eb0 <I2C_ITError+0x44>
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	2b29      	cmp	r3, #41	@ 0x29
 8007ea8:	d002      	beq.n	8007eb0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eae:	d10b      	bne.n	8007ec8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007eb0:	2103      	movs	r1, #3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fb28 	bl	8008508 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2228      	movs	r2, #40	@ 0x28
 8007ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a60      	ldr	r2, [pc, #384]	@ (8008044 <I2C_ITError+0x1d8>)
 8007ec4:	635a      	str	r2, [r3, #52]	@ 0x34
 8007ec6:	e030      	b.n	8007f2a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007ec8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fb1b 	bl	8008508 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f8e1 	bl	800809a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b60      	cmp	r3, #96	@ 0x60
 8007ee2:	d01f      	beq.n	8007f24 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	2b20      	cmp	r3, #32
 8007ef8:	d114      	bne.n	8007f24 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	f003 0310 	and.w	r3, r3, #16
 8007f04:	2b10      	cmp	r3, #16
 8007f06:	d109      	bne.n	8007f1c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2210      	movs	r2, #16
 8007f0e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f14:	f043 0204 	orr.w	r2, r3, #4
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2220      	movs	r2, #32
 8007f22:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f2e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d039      	beq.n	8007fac <I2C_ITError+0x140>
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b11      	cmp	r3, #17
 8007f3c:	d002      	beq.n	8007f44 <I2C_ITError+0xd8>
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2b21      	cmp	r3, #33	@ 0x21
 8007f42:	d133      	bne.n	8007fac <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f52:	d107      	bne.n	8007f64 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007f62:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fe f90e 	bl	800618a <HAL_DMA_GetState>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d017      	beq.n	8007fa4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f78:	4a33      	ldr	r2, [pc, #204]	@ (8008048 <I2C_ITError+0x1dc>)
 8007f7a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fd ffe8 	bl	8005f5e <HAL_DMA_Abort_IT>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d04d      	beq.n	8008030 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007fa2:	e045      	b.n	8008030 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f851 	bl	800804c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007faa:	e041      	b.n	8008030 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d039      	beq.n	8008028 <I2C_ITError+0x1bc>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b12      	cmp	r3, #18
 8007fb8:	d002      	beq.n	8007fc0 <I2C_ITError+0x154>
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2b22      	cmp	r3, #34	@ 0x22
 8007fbe:	d133      	bne.n	8008028 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fce:	d107      	bne.n	8007fe0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007fde:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fe f8d0 	bl	800618a <HAL_DMA_GetState>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d017      	beq.n	8008020 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff4:	4a14      	ldr	r2, [pc, #80]	@ (8008048 <I2C_ITError+0x1dc>)
 8007ff6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008004:	4618      	mov	r0, r3
 8008006:	f7fd ffaa 	bl	8005f5e <HAL_DMA_Abort_IT>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d011      	beq.n	8008034 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800801a:	4610      	mov	r0, r2
 800801c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800801e:	e009      	b.n	8008034 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f813 	bl	800804c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008026:	e005      	b.n	8008034 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f80f 	bl	800804c <I2C_TreatErrorCallback>
  }
}
 800802e:	e002      	b.n	8008036 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008030:	bf00      	nop
 8008032:	e000      	b.n	8008036 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008034:	bf00      	nop
}
 8008036:	bf00      	nop
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	ffff0000 	.word	0xffff0000
 8008044:	080075fb 	.word	0x080075fb
 8008048:	080080e3 	.word	0x080080e3

0800804c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b60      	cmp	r3, #96	@ 0x60
 800805e:	d10e      	bne.n	800807e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff faa7 	bl	80075ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800807c:	e009      	b.n	8008092 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff fa92 	bl	80075b6 <HAL_I2C_ErrorCallback>
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800809a:	b480      	push	{r7}
 800809c:	b083      	sub	sp, #12
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d103      	bne.n	80080b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2200      	movs	r2, #0
 80080b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d007      	beq.n	80080d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	699a      	ldr	r2, [r3, #24]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f042 0201 	orr.w	r2, r2, #1
 80080d4:	619a      	str	r2, [r3, #24]
  }
}
 80080d6:	bf00      	nop
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fc:	2200      	movs	r2, #0
 80080fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800810c:	2200      	movs	r2, #0
 800810e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f7ff ff9b 	bl	800804c <I2C_TreatErrorCallback>
}
 8008116:	bf00      	nop
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	603b      	str	r3, [r7, #0]
 800812a:	4613      	mov	r3, r2
 800812c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800812e:	e03b      	b.n	80081a8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 f8d5 	bl	80082e4 <I2C_IsErrorOccurred>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e041      	b.n	80081c8 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814a:	d02d      	beq.n	80081a8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800814c:	f7fd fcc8 	bl	8005ae0 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d302      	bcc.n	8008162 <I2C_WaitOnFlagUntilTimeout+0x44>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d122      	bne.n	80081a8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	699a      	ldr	r2, [r3, #24]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4013      	ands	r3, r2
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	429a      	cmp	r2, r3
 8008170:	bf0c      	ite	eq
 8008172:	2301      	moveq	r3, #1
 8008174:	2300      	movne	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	79fb      	ldrb	r3, [r7, #7]
 800817c:	429a      	cmp	r2, r3
 800817e:	d113      	bne.n	80081a8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008184:	f043 0220 	orr.w	r2, r3, #32
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2220      	movs	r2, #32
 8008190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e00f      	b.n	80081c8 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699a      	ldr	r2, [r3, #24]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	4013      	ands	r3, r2
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	bf0c      	ite	eq
 80081b8:	2301      	moveq	r3, #1
 80081ba:	2300      	movne	r3, #0
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	461a      	mov	r2, r3
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d0b4      	beq.n	8008130 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80081dc:	e033      	b.n	8008246 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	68b9      	ldr	r1, [r7, #8]
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f000 f87e 	bl	80082e4 <I2C_IsErrorOccurred>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e031      	b.n	8008256 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f8:	d025      	beq.n	8008246 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fa:	f7fd fc71 	bl	8005ae0 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	429a      	cmp	r2, r3
 8008208:	d302      	bcc.n	8008210 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d11a      	bne.n	8008246 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b02      	cmp	r3, #2
 800821c:	d013      	beq.n	8008246 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008222:	f043 0220 	orr.w	r2, r3, #32
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2220      	movs	r2, #32
 800822e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e007      	b.n	8008256 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b02      	cmp	r3, #2
 8008252:	d1c4      	bne.n	80081de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800826a:	e02f      	b.n	80082cc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	68b9      	ldr	r1, [r7, #8]
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 f837 	bl	80082e4 <I2C_IsErrorOccurred>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e02d      	b.n	80082dc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008280:	f7fd fc2e 	bl	8005ae0 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	429a      	cmp	r2, r3
 800828e:	d302      	bcc.n	8008296 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d11a      	bne.n	80082cc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b20      	cmp	r3, #32
 80082a2:	d013      	beq.n	80082cc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082a8:	f043 0220 	orr.w	r2, r3, #32
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2220      	movs	r2, #32
 80082b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e007      	b.n	80082dc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	f003 0320 	and.w	r3, r3, #32
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	d1c8      	bne.n	800826c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b08a      	sub	sp, #40	@ 0x28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	f003 0310 	and.w	r3, r3, #16
 800830c:	2b00      	cmp	r3, #0
 800830e:	d068      	beq.n	80083e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2210      	movs	r2, #16
 8008316:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008318:	e049      	b.n	80083ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008320:	d045      	beq.n	80083ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008322:	f7fd fbdd 	bl	8005ae0 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	429a      	cmp	r2, r3
 8008330:	d302      	bcc.n	8008338 <I2C_IsErrorOccurred+0x54>
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d13a      	bne.n	80083ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008342:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800834a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800835a:	d121      	bne.n	80083a0 <I2C_IsErrorOccurred+0xbc>
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008362:	d01d      	beq.n	80083a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008364:	7cfb      	ldrb	r3, [r7, #19]
 8008366:	2b20      	cmp	r3, #32
 8008368:	d01a      	beq.n	80083a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008378:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800837a:	f7fd fbb1 	bl	8005ae0 <HAL_GetTick>
 800837e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008380:	e00e      	b.n	80083a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008382:	f7fd fbad 	bl	8005ae0 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	2b19      	cmp	r3, #25
 800838e:	d907      	bls.n	80083a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008390:	6a3b      	ldr	r3, [r7, #32]
 8008392:	f043 0320 	orr.w	r3, r3, #32
 8008396:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800839e:	e006      	b.n	80083ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	f003 0320 	and.w	r3, r3, #32
 80083aa:	2b20      	cmp	r3, #32
 80083ac:	d1e9      	bne.n	8008382 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	d003      	beq.n	80083c4 <I2C_IsErrorOccurred+0xe0>
 80083bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0aa      	beq.n	800831a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80083c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d103      	bne.n	80083d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2220      	movs	r2, #32
 80083d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	f043 0304 	orr.w	r3, r3, #4
 80083da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00b      	beq.n	800840c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	f043 0301 	orr.w	r3, r3, #1
 80083fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008404:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00b      	beq.n	800842e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	f043 0308 	orr.w	r3, r3, #8
 800841c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008426:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00b      	beq.n	8008450 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	f043 0302 	orr.w	r3, r3, #2
 800843e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008448:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008454:	2b00      	cmp	r3, #0
 8008456:	d01c      	beq.n	8008492 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f7ff fe1e 	bl	800809a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6859      	ldr	r1, [r3, #4]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	4b0d      	ldr	r3, [pc, #52]	@ (80084a0 <I2C_IsErrorOccurred+0x1bc>)
 800846a:	400b      	ands	r3, r1
 800846c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	431a      	orrs	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2220      	movs	r2, #32
 800847e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008492:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008496:	4618      	mov	r0, r3
 8008498:	3728      	adds	r7, #40	@ 0x28
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	fe00e800 	.word	0xfe00e800

080084a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	607b      	str	r3, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	817b      	strh	r3, [r7, #10]
 80084b2:	4613      	mov	r3, r2
 80084b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084b6:	897b      	ldrh	r3, [r7, #10]
 80084b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084bc:	7a7b      	ldrb	r3, [r7, #9]
 80084be:	041b      	lsls	r3, r3, #16
 80084c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	0d5b      	lsrs	r3, r3, #21
 80084de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80084e2:	4b08      	ldr	r3, [pc, #32]	@ (8008504 <I2C_TransferConfig+0x60>)
 80084e4:	430b      	orrs	r3, r1
 80084e6:	43db      	mvns	r3, r3
 80084e8:	ea02 0103 	and.w	r1, r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80084f6:	bf00      	nop
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	03ff63ff 	.word	0x03ff63ff

08008508 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008518:	887b      	ldrh	r3, [r7, #2]
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00f      	beq.n	8008542 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008528:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008530:	b2db      	uxtb	r3, r3
 8008532:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008536:	2b28      	cmp	r3, #40	@ 0x28
 8008538:	d003      	beq.n	8008542 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008540:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008542:	887b      	ldrh	r3, [r7, #2]
 8008544:	f003 0302 	and.w	r3, r3, #2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00f      	beq.n	800856c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008552:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800855a:	b2db      	uxtb	r3, r3
 800855c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008560:	2b28      	cmp	r3, #40	@ 0x28
 8008562:	d003      	beq.n	800856c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800856a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800856c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008570:	2b00      	cmp	r3, #0
 8008572:	da03      	bge.n	800857c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800857a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800857c:	887b      	ldrh	r3, [r7, #2]
 800857e:	2b10      	cmp	r3, #16
 8008580:	d103      	bne.n	800858a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008588:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800858a:	887b      	ldrh	r3, [r7, #2]
 800858c:	2b20      	cmp	r3, #32
 800858e:	d103      	bne.n	8008598 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f043 0320 	orr.w	r3, r3, #32
 8008596:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008598:	887b      	ldrh	r3, [r7, #2]
 800859a:	2b40      	cmp	r3, #64	@ 0x40
 800859c:	d103      	bne.n	80085a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6819      	ldr	r1, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	43da      	mvns	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	400a      	ands	r2, r1
 80085b6:	601a      	str	r2, [r3, #0]
}
 80085b8:	bf00      	nop
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b20      	cmp	r3, #32
 80085d8:	d138      	bne.n	800864c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d101      	bne.n	80085e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80085e4:	2302      	movs	r3, #2
 80085e6:	e032      	b.n	800864e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2224      	movs	r2, #36	@ 0x24
 80085f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f022 0201 	bic.w	r2, r2, #1
 8008606:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008616:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6819      	ldr	r1, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f042 0201 	orr.w	r2, r2, #1
 8008636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2220      	movs	r2, #32
 800863c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	e000      	b.n	800864e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800864c:	2302      	movs	r3, #2
  }
}
 800864e:	4618      	mov	r0, r3
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800865a:	b480      	push	{r7}
 800865c:	b085      	sub	sp, #20
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b20      	cmp	r3, #32
 800866e:	d139      	bne.n	80086e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008676:	2b01      	cmp	r3, #1
 8008678:	d101      	bne.n	800867e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800867a:	2302      	movs	r3, #2
 800867c:	e033      	b.n	80086e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2224      	movs	r2, #36	@ 0x24
 800868a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 0201 	bic.w	r2, r2, #1
 800869c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80086ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	021b      	lsls	r3, r3, #8
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f042 0201 	orr.w	r2, r2, #1
 80086ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	e000      	b.n	80086e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80086e4:	2302      	movs	r3, #2
  }
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e041      	b.n	8008788 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800870c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f245 5255 	movw	r2, #21845	@ 0x5555
 8008716:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	6852      	ldr	r2, [r2, #4]
 8008720:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	6892      	ldr	r2, [r2, #8]
 800872a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800872c:	f7fd f9d8 	bl	8005ae0 <HAL_GetTick>
 8008730:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008732:	e00f      	b.n	8008754 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008734:	f7fd f9d4 	bl	8005ae0 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b31      	cmp	r3, #49	@ 0x31
 8008740:	d908      	bls.n	8008754 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	f003 0307 	and.w	r3, r3, #7
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e019      	b.n	8008788 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f003 0307 	and.w	r3, r3, #7
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1e8      	bne.n	8008734 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	691a      	ldr	r2, [r3, #16]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	429a      	cmp	r2, r3
 800876e:	d005      	beq.n	800877c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	68d2      	ldr	r2, [r2, #12]
 8008778:	611a      	str	r2, [r3, #16]
 800877a:	e004      	b.n	8008786 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8008784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80087a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d141      	bne.n	8008842 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80087be:	4b4b      	ldr	r3, [pc, #300]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80087c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087ca:	d131      	bne.n	8008830 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087cc:	4b47      	ldr	r3, [pc, #284]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087d2:	4a46      	ldr	r2, [pc, #280]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087dc:	4b43      	ldr	r3, [pc, #268]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80087e4:	4a41      	ldr	r2, [pc, #260]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80087ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80087ec:	4b40      	ldr	r3, [pc, #256]	@ (80088f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2232      	movs	r2, #50	@ 0x32
 80087f2:	fb02 f303 	mul.w	r3, r2, r3
 80087f6:	4a3f      	ldr	r2, [pc, #252]	@ (80088f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80087f8:	fba2 2303 	umull	r2, r3, r2, r3
 80087fc:	0c9b      	lsrs	r3, r3, #18
 80087fe:	3301      	adds	r3, #1
 8008800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008802:	e002      	b.n	800880a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3b01      	subs	r3, #1
 8008808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800880a:	4b38      	ldr	r3, [pc, #224]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008816:	d102      	bne.n	800881e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1f2      	bne.n	8008804 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800881e:	4b33      	ldr	r3, [pc, #204]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800882a:	d158      	bne.n	80088de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e057      	b.n	80088e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008830:	4b2e      	ldr	r3, [pc, #184]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008836:	4a2d      	ldr	r2, [pc, #180]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800883c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008840:	e04d      	b.n	80088de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008848:	d141      	bne.n	80088ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800884a:	4b28      	ldr	r3, [pc, #160]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008856:	d131      	bne.n	80088bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008858:	4b24      	ldr	r3, [pc, #144]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800885a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800885e:	4a23      	ldr	r2, [pc, #140]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008864:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008868:	4b20      	ldr	r3, [pc, #128]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008870:	4a1e      	ldr	r2, [pc, #120]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008872:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008876:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008878:	4b1d      	ldr	r3, [pc, #116]	@ (80088f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2232      	movs	r2, #50	@ 0x32
 800887e:	fb02 f303 	mul.w	r3, r2, r3
 8008882:	4a1c      	ldr	r2, [pc, #112]	@ (80088f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008884:	fba2 2303 	umull	r2, r3, r2, r3
 8008888:	0c9b      	lsrs	r3, r3, #18
 800888a:	3301      	adds	r3, #1
 800888c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800888e:	e002      	b.n	8008896 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3b01      	subs	r3, #1
 8008894:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008896:	4b15      	ldr	r3, [pc, #84]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800889e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088a2:	d102      	bne.n	80088aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1f2      	bne.n	8008890 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80088aa:	4b10      	ldr	r3, [pc, #64]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088b6:	d112      	bne.n	80088de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e011      	b.n	80088e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80088bc:	4b0b      	ldr	r3, [pc, #44]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088c2:	4a0a      	ldr	r2, [pc, #40]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80088cc:	e007      	b.n	80088de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80088ce:	4b07      	ldr	r3, [pc, #28]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80088d6:	4a05      	ldr	r2, [pc, #20]	@ (80088ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80088dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	40007000 	.word	0x40007000
 80088f0:	20000000 	.word	0x20000000
 80088f4:	431bde83 	.word	0x431bde83

080088f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80088f8:	b480      	push	{r7}
 80088fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80088fc:	4b05      	ldr	r3, [pc, #20]	@ (8008914 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	4a04      	ldr	r2, [pc, #16]	@ (8008914 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008902:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008906:	6093      	str	r3, [r2, #8]
}
 8008908:	bf00      	nop
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	40007000 	.word	0x40007000

08008918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e2fe      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d075      	beq.n	8008a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008936:	4b97      	ldr	r3, [pc, #604]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f003 030c 	and.w	r3, r3, #12
 800893e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008940:	4b94      	ldr	r3, [pc, #592]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	f003 0303 	and.w	r3, r3, #3
 8008948:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	2b0c      	cmp	r3, #12
 800894e:	d102      	bne.n	8008956 <HAL_RCC_OscConfig+0x3e>
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	2b03      	cmp	r3, #3
 8008954:	d002      	beq.n	800895c <HAL_RCC_OscConfig+0x44>
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	2b08      	cmp	r3, #8
 800895a:	d10b      	bne.n	8008974 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800895c:	4b8d      	ldr	r3, [pc, #564]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d05b      	beq.n	8008a20 <HAL_RCC_OscConfig+0x108>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d157      	bne.n	8008a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e2d9      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800897c:	d106      	bne.n	800898c <HAL_RCC_OscConfig+0x74>
 800897e:	4b85      	ldr	r3, [pc, #532]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a84      	ldr	r2, [pc, #528]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008988:	6013      	str	r3, [r2, #0]
 800898a:	e01d      	b.n	80089c8 <HAL_RCC_OscConfig+0xb0>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008994:	d10c      	bne.n	80089b0 <HAL_RCC_OscConfig+0x98>
 8008996:	4b7f      	ldr	r3, [pc, #508]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a7e      	ldr	r2, [pc, #504]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 800899c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80089a0:	6013      	str	r3, [r2, #0]
 80089a2:	4b7c      	ldr	r3, [pc, #496]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a7b      	ldr	r2, [pc, #492]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 80089a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	e00b      	b.n	80089c8 <HAL_RCC_OscConfig+0xb0>
 80089b0:	4b78      	ldr	r3, [pc, #480]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a77      	ldr	r2, [pc, #476]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 80089b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	4b75      	ldr	r3, [pc, #468]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a74      	ldr	r2, [pc, #464]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 80089c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d013      	beq.n	80089f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d0:	f7fd f886 	bl	8005ae0 <HAL_GetTick>
 80089d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089d6:	e008      	b.n	80089ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089d8:	f7fd f882 	bl	8005ae0 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	2b64      	cmp	r3, #100	@ 0x64
 80089e4:	d901      	bls.n	80089ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e29e      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089ea:	4b6a      	ldr	r3, [pc, #424]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0f0      	beq.n	80089d8 <HAL_RCC_OscConfig+0xc0>
 80089f6:	e014      	b.n	8008a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f8:	f7fd f872 	bl	8005ae0 <HAL_GetTick>
 80089fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089fe:	e008      	b.n	8008a12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a00:	f7fd f86e 	bl	8005ae0 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b64      	cmp	r3, #100	@ 0x64
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e28a      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008a12:	4b60      	ldr	r3, [pc, #384]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1f0      	bne.n	8008a00 <HAL_RCC_OscConfig+0xe8>
 8008a1e:	e000      	b.n	8008a22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d075      	beq.n	8008b1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a2e:	4b59      	ldr	r3, [pc, #356]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f003 030c 	and.w	r3, r3, #12
 8008a36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a38:	4b56      	ldr	r3, [pc, #344]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f003 0303 	and.w	r3, r3, #3
 8008a40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	2b0c      	cmp	r3, #12
 8008a46:	d102      	bne.n	8008a4e <HAL_RCC_OscConfig+0x136>
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d002      	beq.n	8008a54 <HAL_RCC_OscConfig+0x13c>
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2b04      	cmp	r3, #4
 8008a52:	d11f      	bne.n	8008a94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a54:	4b4f      	ldr	r3, [pc, #316]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <HAL_RCC_OscConfig+0x154>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e25d      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a6c:	4b49      	ldr	r3, [pc, #292]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	061b      	lsls	r3, r3, #24
 8008a7a:	4946      	ldr	r1, [pc, #280]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008a80:	4b45      	ldr	r3, [pc, #276]	@ (8008b98 <HAL_RCC_OscConfig+0x280>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fc ffdf 	bl	8005a48 <HAL_InitTick>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d043      	beq.n	8008b18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e249      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d023      	beq.n	8008ae4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a9c:	4b3d      	ldr	r3, [pc, #244]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa8:	f7fd f81a 	bl	8005ae0 <HAL_GetTick>
 8008aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008aae:	e008      	b.n	8008ac2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ab0:	f7fd f816 	bl	8005ae0 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d901      	bls.n	8008ac2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e232      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ac2:	4b34      	ldr	r3, [pc, #208]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0f0      	beq.n	8008ab0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ace:	4b31      	ldr	r3, [pc, #196]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	061b      	lsls	r3, r3, #24
 8008adc:	492d      	ldr	r1, [pc, #180]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	604b      	str	r3, [r1, #4]
 8008ae2:	e01a      	b.n	8008b1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008aea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af0:	f7fc fff6 	bl	8005ae0 <HAL_GetTick>
 8008af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008af6:	e008      	b.n	8008b0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008af8:	f7fc fff2 	bl	8005ae0 <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d901      	bls.n	8008b0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e20e      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008b0a:	4b22      	ldr	r3, [pc, #136]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1f0      	bne.n	8008af8 <HAL_RCC_OscConfig+0x1e0>
 8008b16:	e000      	b.n	8008b1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0308 	and.w	r3, r3, #8
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d041      	beq.n	8008baa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d01c      	beq.n	8008b68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b2e:	4b19      	ldr	r3, [pc, #100]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b34:	4a17      	ldr	r2, [pc, #92]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008b36:	f043 0301 	orr.w	r3, r3, #1
 8008b3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b3e:	f7fc ffcf 	bl	8005ae0 <HAL_GetTick>
 8008b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b44:	e008      	b.n	8008b58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b46:	f7fc ffcb 	bl	8005ae0 <HAL_GetTick>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d901      	bls.n	8008b58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e1e7      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b58:	4b0e      	ldr	r3, [pc, #56]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0ef      	beq.n	8008b46 <HAL_RCC_OscConfig+0x22e>
 8008b66:	e020      	b.n	8008baa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b68:	4b0a      	ldr	r3, [pc, #40]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b6e:	4a09      	ldr	r2, [pc, #36]	@ (8008b94 <HAL_RCC_OscConfig+0x27c>)
 8008b70:	f023 0301 	bic.w	r3, r3, #1
 8008b74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b78:	f7fc ffb2 	bl	8005ae0 <HAL_GetTick>
 8008b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b7e:	e00d      	b.n	8008b9c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b80:	f7fc ffae 	bl	8005ae0 <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d906      	bls.n	8008b9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e1ca      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
 8008b92:	bf00      	nop
 8008b94:	40021000 	.word	0x40021000
 8008b98:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1ea      	bne.n	8008b80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0304 	and.w	r3, r3, #4
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f000 80a6 	beq.w	8008d04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008bbc:	4b84      	ldr	r3, [pc, #528]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <HAL_RCC_OscConfig+0x2b4>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e000      	b.n	8008bce <HAL_RCC_OscConfig+0x2b6>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00d      	beq.n	8008bee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bde:	4b7c      	ldr	r3, [pc, #496]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008bea:	2301      	movs	r3, #1
 8008bec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bee:	4b79      	ldr	r3, [pc, #484]	@ (8008dd4 <HAL_RCC_OscConfig+0x4bc>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d118      	bne.n	8008c2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008bfa:	4b76      	ldr	r3, [pc, #472]	@ (8008dd4 <HAL_RCC_OscConfig+0x4bc>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a75      	ldr	r2, [pc, #468]	@ (8008dd4 <HAL_RCC_OscConfig+0x4bc>)
 8008c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c06:	f7fc ff6b 	bl	8005ae0 <HAL_GetTick>
 8008c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c0c:	e008      	b.n	8008c20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c0e:	f7fc ff67 	bl	8005ae0 <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d901      	bls.n	8008c20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e183      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c20:	4b6c      	ldr	r3, [pc, #432]	@ (8008dd4 <HAL_RCC_OscConfig+0x4bc>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d0f0      	beq.n	8008c0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d108      	bne.n	8008c46 <HAL_RCC_OscConfig+0x32e>
 8008c34:	4b66      	ldr	r3, [pc, #408]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c3a:	4a65      	ldr	r2, [pc, #404]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c3c:	f043 0301 	orr.w	r3, r3, #1
 8008c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c44:	e024      	b.n	8008c90 <HAL_RCC_OscConfig+0x378>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	2b05      	cmp	r3, #5
 8008c4c:	d110      	bne.n	8008c70 <HAL_RCC_OscConfig+0x358>
 8008c4e:	4b60      	ldr	r3, [pc, #384]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c54:	4a5e      	ldr	r2, [pc, #376]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c56:	f043 0304 	orr.w	r3, r3, #4
 8008c5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c64:	4a5a      	ldr	r2, [pc, #360]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c66:	f043 0301 	orr.w	r3, r3, #1
 8008c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c6e:	e00f      	b.n	8008c90 <HAL_RCC_OscConfig+0x378>
 8008c70:	4b57      	ldr	r3, [pc, #348]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c76:	4a56      	ldr	r2, [pc, #344]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c78:	f023 0301 	bic.w	r3, r3, #1
 8008c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c80:	4b53      	ldr	r3, [pc, #332]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c86:	4a52      	ldr	r2, [pc, #328]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c88:	f023 0304 	bic.w	r3, r3, #4
 8008c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d016      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c98:	f7fc ff22 	bl	8005ae0 <HAL_GetTick>
 8008c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c9e:	e00a      	b.n	8008cb6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ca0:	f7fc ff1e 	bl	8005ae0 <HAL_GetTick>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d901      	bls.n	8008cb6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e138      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cb6:	4b46      	ldr	r3, [pc, #280]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d0ed      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x388>
 8008cc4:	e015      	b.n	8008cf2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cc6:	f7fc ff0b 	bl	8005ae0 <HAL_GetTick>
 8008cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ccc:	e00a      	b.n	8008ce4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cce:	f7fc ff07 	bl	8005ae0 <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d901      	bls.n	8008ce4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e121      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1ed      	bne.n	8008cce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008cf2:	7ffb      	ldrb	r3, [r7, #31]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d105      	bne.n	8008d04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cf8:	4b35      	ldr	r3, [pc, #212]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cfc:	4a34      	ldr	r2, [pc, #208]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008cfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d03c      	beq.n	8008d8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d01c      	beq.n	8008d52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d18:	4b2d      	ldr	r3, [pc, #180]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008d20:	f043 0301 	orr.w	r3, r3, #1
 8008d24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d28:	f7fc feda 	bl	8005ae0 <HAL_GetTick>
 8008d2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008d2e:	e008      	b.n	8008d42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d30:	f7fc fed6 	bl	8005ae0 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e0f2      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008d42:	4b23      	ldr	r3, [pc, #140]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d0ef      	beq.n	8008d30 <HAL_RCC_OscConfig+0x418>
 8008d50:	e01b      	b.n	8008d8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d52:	4b1f      	ldr	r3, [pc, #124]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008d54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d58:	4a1d      	ldr	r2, [pc, #116]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008d5a:	f023 0301 	bic.w	r3, r3, #1
 8008d5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d62:	f7fc febd 	bl	8005ae0 <HAL_GetTick>
 8008d66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d68:	e008      	b.n	8008d7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d6a:	f7fc feb9 	bl	8005ae0 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d901      	bls.n	8008d7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e0d5      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d7c:	4b14      	ldr	r3, [pc, #80]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d82:	f003 0302 	and.w	r3, r3, #2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1ef      	bne.n	8008d6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 80c9 	beq.w	8008f26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d94:	4b0e      	ldr	r3, [pc, #56]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f003 030c 	and.w	r3, r3, #12
 8008d9c:	2b0c      	cmp	r3, #12
 8008d9e:	f000 8083 	beq.w	8008ea8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d15e      	bne.n	8008e68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008daa:	4b09      	ldr	r3, [pc, #36]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a08      	ldr	r2, [pc, #32]	@ (8008dd0 <HAL_RCC_OscConfig+0x4b8>)
 8008db0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db6:	f7fc fe93 	bl	8005ae0 <HAL_GetTick>
 8008dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dbc:	e00c      	b.n	8008dd8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dbe:	f7fc fe8f 	bl	8005ae0 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d905      	bls.n	8008dd8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e0ab      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
 8008dd0:	40021000 	.word	0x40021000
 8008dd4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dd8:	4b55      	ldr	r3, [pc, #340]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1ec      	bne.n	8008dbe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008de4:	4b52      	ldr	r3, [pc, #328]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	4b52      	ldr	r3, [pc, #328]	@ (8008f34 <HAL_RCC_OscConfig+0x61c>)
 8008dea:	4013      	ands	r3, r2
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	6a11      	ldr	r1, [r2, #32]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008df4:	3a01      	subs	r2, #1
 8008df6:	0112      	lsls	r2, r2, #4
 8008df8:	4311      	orrs	r1, r2
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008dfe:	0212      	lsls	r2, r2, #8
 8008e00:	4311      	orrs	r1, r2
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008e06:	0852      	lsrs	r2, r2, #1
 8008e08:	3a01      	subs	r2, #1
 8008e0a:	0552      	lsls	r2, r2, #21
 8008e0c:	4311      	orrs	r1, r2
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008e12:	0852      	lsrs	r2, r2, #1
 8008e14:	3a01      	subs	r2, #1
 8008e16:	0652      	lsls	r2, r2, #25
 8008e18:	4311      	orrs	r1, r2
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008e1e:	06d2      	lsls	r2, r2, #27
 8008e20:	430a      	orrs	r2, r1
 8008e22:	4943      	ldr	r1, [pc, #268]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e28:	4b41      	ldr	r3, [pc, #260]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a40      	ldr	r2, [pc, #256]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008e34:	4b3e      	ldr	r3, [pc, #248]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	4a3d      	ldr	r2, [pc, #244]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e40:	f7fc fe4e 	bl	8005ae0 <HAL_GetTick>
 8008e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e46:	e008      	b.n	8008e5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e48:	f7fc fe4a 	bl	8005ae0 <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d901      	bls.n	8008e5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e066      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e5a:	4b35      	ldr	r3, [pc, #212]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d0f0      	beq.n	8008e48 <HAL_RCC_OscConfig+0x530>
 8008e66:	e05e      	b.n	8008f26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e68:	4b31      	ldr	r3, [pc, #196]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a30      	ldr	r2, [pc, #192]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e74:	f7fc fe34 	bl	8005ae0 <HAL_GetTick>
 8008e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e7a:	e008      	b.n	8008e8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e7c:	f7fc fe30 	bl	8005ae0 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e04c      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e8e:	4b28      	ldr	r3, [pc, #160]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1f0      	bne.n	8008e7c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008e9a:	4b25      	ldr	r3, [pc, #148]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008e9c:	68da      	ldr	r2, [r3, #12]
 8008e9e:	4924      	ldr	r1, [pc, #144]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008ea0:	4b25      	ldr	r3, [pc, #148]	@ (8008f38 <HAL_RCC_OscConfig+0x620>)
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	60cb      	str	r3, [r1, #12]
 8008ea6:	e03e      	b.n	8008f26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d101      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e039      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8008f30 <HAL_RCC_OscConfig+0x618>)
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f003 0203 	and.w	r2, r3, #3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a1b      	ldr	r3, [r3, #32]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d12c      	bne.n	8008f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d123      	bne.n	8008f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d11b      	bne.n	8008f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d113      	bne.n	8008f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f04:	085b      	lsrs	r3, r3, #1
 8008f06:	3b01      	subs	r3, #1
 8008f08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d109      	bne.n	8008f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f18:	085b      	lsrs	r3, r3, #1
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d001      	beq.n	8008f26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e000      	b.n	8008f28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3720      	adds	r7, #32
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	40021000 	.word	0x40021000
 8008f34:	019f800c 	.word	0x019f800c
 8008f38:	feeefffc 	.word	0xfeeefffc

08008f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e11e      	b.n	8009192 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f54:	4b91      	ldr	r3, [pc, #580]	@ (800919c <HAL_RCC_ClockConfig+0x260>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 030f 	and.w	r3, r3, #15
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d910      	bls.n	8008f84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f62:	4b8e      	ldr	r3, [pc, #568]	@ (800919c <HAL_RCC_ClockConfig+0x260>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f023 020f 	bic.w	r2, r3, #15
 8008f6a:	498c      	ldr	r1, [pc, #560]	@ (800919c <HAL_RCC_ClockConfig+0x260>)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f72:	4b8a      	ldr	r3, [pc, #552]	@ (800919c <HAL_RCC_ClockConfig+0x260>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 030f 	and.w	r3, r3, #15
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d001      	beq.n	8008f84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e106      	b.n	8009192 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d073      	beq.n	8009078 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d129      	bne.n	8008fec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f98:	4b81      	ldr	r3, [pc, #516]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e0f4      	b.n	8009192 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008fa8:	f000 f99e 	bl	80092e8 <RCC_GetSysClockFreqFromPLLSource>
 8008fac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	4a7c      	ldr	r2, [pc, #496]	@ (80091a4 <HAL_RCC_ClockConfig+0x268>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d93f      	bls.n	8009036 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008fb6:	4b7a      	ldr	r3, [pc, #488]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d009      	beq.n	8008fd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d033      	beq.n	8009036 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d12f      	bne.n	8009036 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008fd6:	4b72      	ldr	r3, [pc, #456]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fde:	4a70      	ldr	r2, [pc, #448]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8008fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fe4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008fe6:	2380      	movs	r3, #128	@ 0x80
 8008fe8:	617b      	str	r3, [r7, #20]
 8008fea:	e024      	b.n	8009036 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d107      	bne.n	8009004 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ff4:	4b6a      	ldr	r3, [pc, #424]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d109      	bne.n	8009014 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e0c6      	b.n	8009192 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009004:	4b66      	ldr	r3, [pc, #408]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e0be      	b.n	8009192 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009014:	f000 f8ce 	bl	80091b4 <HAL_RCC_GetSysClockFreq>
 8009018:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	4a61      	ldr	r2, [pc, #388]	@ (80091a4 <HAL_RCC_ClockConfig+0x268>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d909      	bls.n	8009036 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009022:	4b5f      	ldr	r3, [pc, #380]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800902a:	4a5d      	ldr	r2, [pc, #372]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 800902c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009030:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009032:	2380      	movs	r3, #128	@ 0x80
 8009034:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009036:	4b5a      	ldr	r3, [pc, #360]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f023 0203 	bic.w	r2, r3, #3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	4957      	ldr	r1, [pc, #348]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8009044:	4313      	orrs	r3, r2
 8009046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009048:	f7fc fd4a 	bl	8005ae0 <HAL_GetTick>
 800904c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800904e:	e00a      	b.n	8009066 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009050:	f7fc fd46 	bl	8005ae0 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800905e:	4293      	cmp	r3, r2
 8009060:	d901      	bls.n	8009066 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e095      	b.n	8009192 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009066:	4b4e      	ldr	r3, [pc, #312]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f003 020c 	and.w	r2, r3, #12
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	429a      	cmp	r2, r3
 8009076:	d1eb      	bne.n	8009050 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0302 	and.w	r3, r3, #2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d023      	beq.n	80090cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d005      	beq.n	800909c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009090:	4b43      	ldr	r3, [pc, #268]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	4a42      	ldr	r2, [pc, #264]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8009096:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800909a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0308 	and.w	r3, r3, #8
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d007      	beq.n	80090b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80090a8:	4b3d      	ldr	r3, [pc, #244]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80090b0:	4a3b      	ldr	r2, [pc, #236]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 80090b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80090b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090b8:	4b39      	ldr	r3, [pc, #228]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	4936      	ldr	r1, [pc, #216]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	608b      	str	r3, [r1, #8]
 80090ca:	e008      	b.n	80090de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2b80      	cmp	r3, #128	@ 0x80
 80090d0:	d105      	bne.n	80090de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80090d2:	4b33      	ldr	r3, [pc, #204]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	4a32      	ldr	r2, [pc, #200]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 80090d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090de:	4b2f      	ldr	r3, [pc, #188]	@ (800919c <HAL_RCC_ClockConfig+0x260>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 030f 	and.w	r3, r3, #15
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d21d      	bcs.n	8009128 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090ec:	4b2b      	ldr	r3, [pc, #172]	@ (800919c <HAL_RCC_ClockConfig+0x260>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f023 020f 	bic.w	r2, r3, #15
 80090f4:	4929      	ldr	r1, [pc, #164]	@ (800919c <HAL_RCC_ClockConfig+0x260>)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80090fc:	f7fc fcf0 	bl	8005ae0 <HAL_GetTick>
 8009100:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009102:	e00a      	b.n	800911a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009104:	f7fc fcec 	bl	8005ae0 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009112:	4293      	cmp	r3, r2
 8009114:	d901      	bls.n	800911a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e03b      	b.n	8009192 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800911a:	4b20      	ldr	r3, [pc, #128]	@ (800919c <HAL_RCC_ClockConfig+0x260>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 030f 	and.w	r3, r3, #15
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	429a      	cmp	r2, r3
 8009126:	d1ed      	bne.n	8009104 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0304 	and.w	r3, r3, #4
 8009130:	2b00      	cmp	r3, #0
 8009132:	d008      	beq.n	8009146 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009134:	4b1a      	ldr	r3, [pc, #104]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	4917      	ldr	r1, [pc, #92]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8009142:	4313      	orrs	r3, r2
 8009144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0308 	and.w	r3, r3, #8
 800914e:	2b00      	cmp	r3, #0
 8009150:	d009      	beq.n	8009166 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009152:	4b13      	ldr	r3, [pc, #76]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	490f      	ldr	r1, [pc, #60]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 8009162:	4313      	orrs	r3, r2
 8009164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009166:	f000 f825 	bl	80091b4 <HAL_RCC_GetSysClockFreq>
 800916a:	4602      	mov	r2, r0
 800916c:	4b0c      	ldr	r3, [pc, #48]	@ (80091a0 <HAL_RCC_ClockConfig+0x264>)
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	091b      	lsrs	r3, r3, #4
 8009172:	f003 030f 	and.w	r3, r3, #15
 8009176:	490c      	ldr	r1, [pc, #48]	@ (80091a8 <HAL_RCC_ClockConfig+0x26c>)
 8009178:	5ccb      	ldrb	r3, [r1, r3]
 800917a:	f003 031f 	and.w	r3, r3, #31
 800917e:	fa22 f303 	lsr.w	r3, r2, r3
 8009182:	4a0a      	ldr	r2, [pc, #40]	@ (80091ac <HAL_RCC_ClockConfig+0x270>)
 8009184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009186:	4b0a      	ldr	r3, [pc, #40]	@ (80091b0 <HAL_RCC_ClockConfig+0x274>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4618      	mov	r0, r3
 800918c:	f7fc fc5c 	bl	8005a48 <HAL_InitTick>
 8009190:	4603      	mov	r3, r0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	40022000 	.word	0x40022000
 80091a0:	40021000 	.word	0x40021000
 80091a4:	04c4b400 	.word	0x04c4b400
 80091a8:	08012bb0 	.word	0x08012bb0
 80091ac:	20000000 	.word	0x20000000
 80091b0:	20000004 	.word	0x20000004

080091b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80091ba:	4b2c      	ldr	r3, [pc, #176]	@ (800926c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f003 030c 	and.w	r3, r3, #12
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d102      	bne.n	80091cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80091c6:	4b2a      	ldr	r3, [pc, #168]	@ (8009270 <HAL_RCC_GetSysClockFreq+0xbc>)
 80091c8:	613b      	str	r3, [r7, #16]
 80091ca:	e047      	b.n	800925c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80091cc:	4b27      	ldr	r3, [pc, #156]	@ (800926c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f003 030c 	and.w	r3, r3, #12
 80091d4:	2b08      	cmp	r3, #8
 80091d6:	d102      	bne.n	80091de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80091d8:	4b26      	ldr	r3, [pc, #152]	@ (8009274 <HAL_RCC_GetSysClockFreq+0xc0>)
 80091da:	613b      	str	r3, [r7, #16]
 80091dc:	e03e      	b.n	800925c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80091de:	4b23      	ldr	r3, [pc, #140]	@ (800926c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f003 030c 	and.w	r3, r3, #12
 80091e6:	2b0c      	cmp	r3, #12
 80091e8:	d136      	bne.n	8009258 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80091ea:	4b20      	ldr	r3, [pc, #128]	@ (800926c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	f003 0303 	and.w	r3, r3, #3
 80091f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80091f4:	4b1d      	ldr	r3, [pc, #116]	@ (800926c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	091b      	lsrs	r3, r3, #4
 80091fa:	f003 030f 	and.w	r3, r3, #15
 80091fe:	3301      	adds	r3, #1
 8009200:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b03      	cmp	r3, #3
 8009206:	d10c      	bne.n	8009222 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009208:	4a1a      	ldr	r2, [pc, #104]	@ (8009274 <HAL_RCC_GetSysClockFreq+0xc0>)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009210:	4a16      	ldr	r2, [pc, #88]	@ (800926c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009212:	68d2      	ldr	r2, [r2, #12]
 8009214:	0a12      	lsrs	r2, r2, #8
 8009216:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800921a:	fb02 f303 	mul.w	r3, r2, r3
 800921e:	617b      	str	r3, [r7, #20]
      break;
 8009220:	e00c      	b.n	800923c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009222:	4a13      	ldr	r2, [pc, #76]	@ (8009270 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	fbb2 f3f3 	udiv	r3, r2, r3
 800922a:	4a10      	ldr	r2, [pc, #64]	@ (800926c <HAL_RCC_GetSysClockFreq+0xb8>)
 800922c:	68d2      	ldr	r2, [r2, #12]
 800922e:	0a12      	lsrs	r2, r2, #8
 8009230:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009234:	fb02 f303 	mul.w	r3, r2, r3
 8009238:	617b      	str	r3, [r7, #20]
      break;
 800923a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800923c:	4b0b      	ldr	r3, [pc, #44]	@ (800926c <HAL_RCC_GetSysClockFreq+0xb8>)
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	0e5b      	lsrs	r3, r3, #25
 8009242:	f003 0303 	and.w	r3, r3, #3
 8009246:	3301      	adds	r3, #1
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	fbb2 f3f3 	udiv	r3, r2, r3
 8009254:	613b      	str	r3, [r7, #16]
 8009256:	e001      	b.n	800925c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800925c:	693b      	ldr	r3, [r7, #16]
}
 800925e:	4618      	mov	r0, r3
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	40021000 	.word	0x40021000
 8009270:	00f42400 	.word	0x00f42400
 8009274:	007a1200 	.word	0x007a1200

08009278 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800927c:	4b03      	ldr	r3, [pc, #12]	@ (800928c <HAL_RCC_GetHCLKFreq+0x14>)
 800927e:	681b      	ldr	r3, [r3, #0]
}
 8009280:	4618      	mov	r0, r3
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20000000 	.word	0x20000000

08009290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009294:	f7ff fff0 	bl	8009278 <HAL_RCC_GetHCLKFreq>
 8009298:	4602      	mov	r2, r0
 800929a:	4b06      	ldr	r3, [pc, #24]	@ (80092b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	0a1b      	lsrs	r3, r3, #8
 80092a0:	f003 0307 	and.w	r3, r3, #7
 80092a4:	4904      	ldr	r1, [pc, #16]	@ (80092b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092a6:	5ccb      	ldrb	r3, [r1, r3]
 80092a8:	f003 031f 	and.w	r3, r3, #31
 80092ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	40021000 	.word	0x40021000
 80092b8:	08012bc0 	.word	0x08012bc0

080092bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80092c0:	f7ff ffda 	bl	8009278 <HAL_RCC_GetHCLKFreq>
 80092c4:	4602      	mov	r2, r0
 80092c6:	4b06      	ldr	r3, [pc, #24]	@ (80092e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	0adb      	lsrs	r3, r3, #11
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	4904      	ldr	r1, [pc, #16]	@ (80092e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092d2:	5ccb      	ldrb	r3, [r1, r3]
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092dc:	4618      	mov	r0, r3
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	40021000 	.word	0x40021000
 80092e4:	08012bc0 	.word	0x08012bc0

080092e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80092ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f003 0303 	and.w	r3, r3, #3
 80092f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80092f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	091b      	lsrs	r3, r3, #4
 80092fe:	f003 030f 	and.w	r3, r3, #15
 8009302:	3301      	adds	r3, #1
 8009304:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	2b03      	cmp	r3, #3
 800930a:	d10c      	bne.n	8009326 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800930c:	4a17      	ldr	r2, [pc, #92]	@ (800936c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	fbb2 f3f3 	udiv	r3, r2, r3
 8009314:	4a14      	ldr	r2, [pc, #80]	@ (8009368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009316:	68d2      	ldr	r2, [r2, #12]
 8009318:	0a12      	lsrs	r2, r2, #8
 800931a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800931e:	fb02 f303 	mul.w	r3, r2, r3
 8009322:	617b      	str	r3, [r7, #20]
    break;
 8009324:	e00c      	b.n	8009340 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009326:	4a12      	ldr	r2, [pc, #72]	@ (8009370 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	fbb2 f3f3 	udiv	r3, r2, r3
 800932e:	4a0e      	ldr	r2, [pc, #56]	@ (8009368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009330:	68d2      	ldr	r2, [r2, #12]
 8009332:	0a12      	lsrs	r2, r2, #8
 8009334:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009338:	fb02 f303 	mul.w	r3, r2, r3
 800933c:	617b      	str	r3, [r7, #20]
    break;
 800933e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009340:	4b09      	ldr	r3, [pc, #36]	@ (8009368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	0e5b      	lsrs	r3, r3, #25
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	3301      	adds	r3, #1
 800934c:	005b      	lsls	r3, r3, #1
 800934e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	fbb2 f3f3 	udiv	r3, r2, r3
 8009358:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800935a:	687b      	ldr	r3, [r7, #4]
}
 800935c:	4618      	mov	r0, r3
 800935e:	371c      	adds	r7, #28
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	40021000 	.word	0x40021000
 800936c:	007a1200 	.word	0x007a1200
 8009370:	00f42400 	.word	0x00f42400

08009374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800937c:	2300      	movs	r3, #0
 800937e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009380:	2300      	movs	r3, #0
 8009382:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 8098 	beq.w	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009392:	2300      	movs	r3, #0
 8009394:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009396:	4b43      	ldr	r3, [pc, #268]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800939a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10d      	bne.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093a2:	4b40      	ldr	r3, [pc, #256]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093a6:	4a3f      	ldr	r2, [pc, #252]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80093ae:	4b3d      	ldr	r3, [pc, #244]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093b6:	60bb      	str	r3, [r7, #8]
 80093b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093ba:	2301      	movs	r3, #1
 80093bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093be:	4b3a      	ldr	r3, [pc, #232]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a39      	ldr	r2, [pc, #228]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093ca:	f7fc fb89 	bl	8005ae0 <HAL_GetTick>
 80093ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093d0:	e009      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093d2:	f7fc fb85 	bl	8005ae0 <HAL_GetTick>
 80093d6:	4602      	mov	r2, r0
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d902      	bls.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	74fb      	strb	r3, [r7, #19]
        break;
 80093e4:	e005      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093e6:	4b30      	ldr	r3, [pc, #192]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0ef      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80093f2:	7cfb      	ldrb	r3, [r7, #19]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d159      	bne.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80093f8:	4b2a      	ldr	r3, [pc, #168]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009402:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d01e      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	429a      	cmp	r2, r3
 8009412:	d019      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009414:	4b23      	ldr	r3, [pc, #140]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800941a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800941e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009420:	4b20      	ldr	r3, [pc, #128]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009426:	4a1f      	ldr	r2, [pc, #124]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800942c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009430:	4b1c      	ldr	r3, [pc, #112]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009436:	4a1b      	ldr	r2, [pc, #108]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800943c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009440:	4a18      	ldr	r2, [pc, #96]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	d016      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009452:	f7fc fb45 	bl	8005ae0 <HAL_GetTick>
 8009456:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009458:	e00b      	b.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800945a:	f7fc fb41 	bl	8005ae0 <HAL_GetTick>
 800945e:	4602      	mov	r2, r0
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009468:	4293      	cmp	r3, r2
 800946a:	d902      	bls.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	74fb      	strb	r3, [r7, #19]
            break;
 8009470:	e006      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009472:	4b0c      	ldr	r3, [pc, #48]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0ec      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009480:	7cfb      	ldrb	r3, [r7, #19]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10b      	bne.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009486:	4b07      	ldr	r3, [pc, #28]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800948c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009494:	4903      	ldr	r1, [pc, #12]	@ (80094a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009496:	4313      	orrs	r3, r2
 8009498:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800949c:	e008      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800949e:	7cfb      	ldrb	r3, [r7, #19]
 80094a0:	74bb      	strb	r3, [r7, #18]
 80094a2:	e005      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80094a4:	40021000 	.word	0x40021000
 80094a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ac:	7cfb      	ldrb	r3, [r7, #19]
 80094ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094b0:	7c7b      	ldrb	r3, [r7, #17]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d105      	bne.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094b6:	4ba7      	ldr	r3, [pc, #668]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ba:	4aa6      	ldr	r2, [pc, #664]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00a      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094ce:	4ba1      	ldr	r3, [pc, #644]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d4:	f023 0203 	bic.w	r2, r3, #3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	499d      	ldr	r1, [pc, #628]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0302 	and.w	r3, r3, #2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00a      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094f0:	4b98      	ldr	r3, [pc, #608]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094f6:	f023 020c 	bic.w	r2, r3, #12
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	4995      	ldr	r1, [pc, #596]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009500:	4313      	orrs	r3, r2
 8009502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 0304 	and.w	r3, r3, #4
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00a      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009512:	4b90      	ldr	r3, [pc, #576]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009518:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	498c      	ldr	r1, [pc, #560]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009522:	4313      	orrs	r3, r2
 8009524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0308 	and.w	r3, r3, #8
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00a      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009534:	4b87      	ldr	r3, [pc, #540]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800953a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	4984      	ldr	r1, [pc, #528]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009544:	4313      	orrs	r3, r2
 8009546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0310 	and.w	r3, r3, #16
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009556:	4b7f      	ldr	r3, [pc, #508]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800955c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	497b      	ldr	r1, [pc, #492]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009566:	4313      	orrs	r3, r2
 8009568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0320 	and.w	r3, r3, #32
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00a      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009578:	4b76      	ldr	r3, [pc, #472]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800957a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800957e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	4973      	ldr	r1, [pc, #460]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009588:	4313      	orrs	r3, r2
 800958a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800959a:	4b6e      	ldr	r3, [pc, #440]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800959c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	69db      	ldr	r3, [r3, #28]
 80095a8:	496a      	ldr	r1, [pc, #424]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00a      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80095bc:	4b65      	ldr	r3, [pc, #404]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	4962      	ldr	r1, [pc, #392]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095cc:	4313      	orrs	r3, r2
 80095ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00a      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80095de:	4b5d      	ldr	r3, [pc, #372]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ec:	4959      	ldr	r1, [pc, #356]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00a      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009600:	4b54      	ldr	r3, [pc, #336]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009602:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009606:	f023 0203 	bic.w	r2, r3, #3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960e:	4951      	ldr	r1, [pc, #324]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009610:	4313      	orrs	r3, r2
 8009612:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00a      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009622:	4b4c      	ldr	r3, [pc, #304]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009628:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009630:	4948      	ldr	r1, [pc, #288]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009632:	4313      	orrs	r3, r2
 8009634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009640:	2b00      	cmp	r3, #0
 8009642:	d015      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009644:	4b43      	ldr	r3, [pc, #268]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800964a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009652:	4940      	ldr	r1, [pc, #256]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009654:	4313      	orrs	r3, r2
 8009656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800965e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009662:	d105      	bne.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009664:	4b3b      	ldr	r3, [pc, #236]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	4a3a      	ldr	r2, [pc, #232]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800966a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800966e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009678:	2b00      	cmp	r3, #0
 800967a:	d015      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800967c:	4b35      	ldr	r3, [pc, #212]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800967e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009682:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800968a:	4932      	ldr	r1, [pc, #200]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800968c:	4313      	orrs	r3, r2
 800968e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800969a:	d105      	bne.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800969c:	4b2d      	ldr	r3, [pc, #180]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	4a2c      	ldr	r2, [pc, #176]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d015      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80096b4:	4b27      	ldr	r3, [pc, #156]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c2:	4924      	ldr	r1, [pc, #144]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80096d2:	d105      	bne.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096d4:	4b1f      	ldr	r3, [pc, #124]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	4a1e      	ldr	r2, [pc, #120]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d015      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096ec:	4b19      	ldr	r3, [pc, #100]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096fa:	4916      	ldr	r1, [pc, #88]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009706:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800970a:	d105      	bne.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800970c:	4b11      	ldr	r3, [pc, #68]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	4a10      	ldr	r2, [pc, #64]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009716:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d019      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009724:	4b0b      	ldr	r3, [pc, #44]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800972a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009732:	4908      	ldr	r1, [pc, #32]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009734:	4313      	orrs	r3, r2
 8009736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800973e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009742:	d109      	bne.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009744:	4b03      	ldr	r3, [pc, #12]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	4a02      	ldr	r2, [pc, #8]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800974a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800974e:	60d3      	str	r3, [r2, #12]
 8009750:	e002      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009752:	bf00      	nop
 8009754:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d015      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009764:	4b29      	ldr	r3, [pc, #164]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800976a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009772:	4926      	ldr	r1, [pc, #152]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009774:	4313      	orrs	r3, r2
 8009776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800977e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009782:	d105      	bne.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009784:	4b21      	ldr	r3, [pc, #132]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	4a20      	ldr	r2, [pc, #128]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800978a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800978e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d015      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800979c:	4b1b      	ldr	r3, [pc, #108]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800979e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097a2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097aa:	4918      	ldr	r1, [pc, #96]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097ac:	4313      	orrs	r3, r2
 80097ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ba:	d105      	bne.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80097bc:	4b13      	ldr	r3, [pc, #76]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	4a12      	ldr	r2, [pc, #72]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d015      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80097d4:	4b0d      	ldr	r3, [pc, #52]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097e2:	490a      	ldr	r1, [pc, #40]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097f2:	d105      	bne.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097f4:	4b05      	ldr	r3, [pc, #20]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	4a04      	ldr	r2, [pc, #16]	@ (800980c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009800:	7cbb      	ldrb	r3, [r7, #18]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3718      	adds	r7, #24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	40021000 	.word	0x40021000

08009810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e042      	b.n	80098a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009828:	2b00      	cmp	r3, #0
 800982a:	d106      	bne.n	800983a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7fc f865 	bl	8005904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2224      	movs	r2, #36	@ 0x24
 800983e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0201 	bic.w	r2, r2, #1
 8009850:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009856:	2b00      	cmp	r3, #0
 8009858:	d002      	beq.n	8009860 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fe68 	bl	800a530 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fb69 	bl	8009f38 <UART_SetConfig>
 8009866:	4603      	mov	r3, r0
 8009868:	2b01      	cmp	r3, #1
 800986a:	d101      	bne.n	8009870 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e01b      	b.n	80098a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800987e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	689a      	ldr	r2, [r3, #8]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800988e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 0201 	orr.w	r2, r2, #1
 800989e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fee7 	bl	800a674 <UART_CheckIdleState>
 80098a6:	4603      	mov	r3, r0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b0ba      	sub	sp, #232	@ 0xe8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80098d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80098da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80098de:	4013      	ands	r3, r2
 80098e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80098e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d11b      	bne.n	8009924 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f0:	f003 0320 	and.w	r3, r3, #32
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d015      	beq.n	8009924 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098fc:	f003 0320 	and.w	r3, r3, #32
 8009900:	2b00      	cmp	r3, #0
 8009902:	d105      	bne.n	8009910 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d009      	beq.n	8009924 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 82e3 	beq.w	8009ee0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	4798      	blx	r3
      }
      return;
 8009922:	e2dd      	b.n	8009ee0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009924:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 8123 	beq.w	8009b74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800992e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009932:	4b8d      	ldr	r3, [pc, #564]	@ (8009b68 <HAL_UART_IRQHandler+0x2b8>)
 8009934:	4013      	ands	r3, r2
 8009936:	2b00      	cmp	r3, #0
 8009938:	d106      	bne.n	8009948 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800993a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800993e:	4b8b      	ldr	r3, [pc, #556]	@ (8009b6c <HAL_UART_IRQHandler+0x2bc>)
 8009940:	4013      	ands	r3, r2
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 8116 	beq.w	8009b74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	d011      	beq.n	8009978 <HAL_UART_IRQHandler+0xc8>
 8009954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00b      	beq.n	8009978 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2201      	movs	r2, #1
 8009966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800996e:	f043 0201 	orr.w	r2, r3, #1
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800997c:	f003 0302 	and.w	r3, r3, #2
 8009980:	2b00      	cmp	r3, #0
 8009982:	d011      	beq.n	80099a8 <HAL_UART_IRQHandler+0xf8>
 8009984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00b      	beq.n	80099a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2202      	movs	r2, #2
 8009996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800999e:	f043 0204 	orr.w	r2, r3, #4
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ac:	f003 0304 	and.w	r3, r3, #4
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d011      	beq.n	80099d8 <HAL_UART_IRQHandler+0x128>
 80099b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00b      	beq.n	80099d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2204      	movs	r2, #4
 80099c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ce:	f043 0202 	orr.w	r2, r3, #2
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80099d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099dc:	f003 0308 	and.w	r3, r3, #8
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d017      	beq.n	8009a14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099e8:	f003 0320 	and.w	r3, r3, #32
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d105      	bne.n	80099fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80099f4:	4b5c      	ldr	r3, [pc, #368]	@ (8009b68 <HAL_UART_IRQHandler+0x2b8>)
 80099f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00b      	beq.n	8009a14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2208      	movs	r2, #8
 8009a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a0a:	f043 0208 	orr.w	r2, r3, #8
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d012      	beq.n	8009a46 <HAL_UART_IRQHandler+0x196>
 8009a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00c      	beq.n	8009a46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a3c:	f043 0220 	orr.w	r2, r3, #32
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 8249 	beq.w	8009ee4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a56:	f003 0320 	and.w	r3, r3, #32
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d013      	beq.n	8009a86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d007      	beq.n	8009a86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a9a:	2b40      	cmp	r3, #64	@ 0x40
 8009a9c:	d005      	beq.n	8009aaa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009aa2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d054      	beq.n	8009b54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fef9 	bl	800a8a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aba:	2b40      	cmp	r3, #64	@ 0x40
 8009abc:	d146      	bne.n	8009b4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	3308      	adds	r3, #8
 8009ac4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009acc:	e853 3f00 	ldrex	r3, [r3]
 8009ad0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009aea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009aee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009af6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009afa:	e841 2300 	strex	r3, r2, [r1]
 8009afe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009b02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1d9      	bne.n	8009abe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d017      	beq.n	8009b44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b1a:	4a15      	ldr	r2, [pc, #84]	@ (8009b70 <HAL_UART_IRQHandler+0x2c0>)
 8009b1c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fc fa1a 	bl	8005f5e <HAL_DMA_Abort_IT>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d019      	beq.n	8009b64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009b3e:	4610      	mov	r0, r2
 8009b40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b42:	e00f      	b.n	8009b64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f9e1 	bl	8009f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b4a:	e00b      	b.n	8009b64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f9dd 	bl	8009f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b52:	e007      	b.n	8009b64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f9d9 	bl	8009f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009b62:	e1bf      	b.n	8009ee4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b64:	bf00      	nop
    return;
 8009b66:	e1bd      	b.n	8009ee4 <HAL_UART_IRQHandler+0x634>
 8009b68:	10000001 	.word	0x10000001
 8009b6c:	04000120 	.word	0x04000120
 8009b70:	0800a96f 	.word	0x0800a96f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	f040 8153 	bne.w	8009e24 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b82:	f003 0310 	and.w	r3, r3, #16
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f000 814c 	beq.w	8009e24 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b90:	f003 0310 	and.w	r3, r3, #16
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 8145 	beq.w	8009e24 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2210      	movs	r2, #16
 8009ba0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bac:	2b40      	cmp	r3, #64	@ 0x40
 8009bae:	f040 80bb 	bne.w	8009d28 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009bc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 818f 	beq.w	8009ee8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	f080 8187 	bcs.w	8009ee8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009be0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f040 8087 	bne.w	8009d06 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c04:	e853 3f00 	ldrex	r3, [r3]
 8009c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009c2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009c32:	e841 2300 	strex	r3, r2, [r1]
 8009c36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1da      	bne.n	8009bf8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3308      	adds	r3, #8
 8009c48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c4c:	e853 3f00 	ldrex	r3, [r3]
 8009c50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009c52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c54:	f023 0301 	bic.w	r3, r3, #1
 8009c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3308      	adds	r3, #8
 8009c62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009c66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e1      	bne.n	8009c42 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3308      	adds	r3, #8
 8009c84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c88:	e853 3f00 	ldrex	r3, [r3]
 8009c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ca2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009ca8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009caa:	e841 2300 	strex	r3, r2, [r1]
 8009cae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009cb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e3      	bne.n	8009c7e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2220      	movs	r2, #32
 8009cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ccc:	e853 3f00 	ldrex	r3, [r3]
 8009cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cd4:	f023 0310 	bic.w	r3, r3, #16
 8009cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ce6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ce8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009cec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009cee:	e841 2300 	strex	r3, r2, [r1]
 8009cf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1e4      	bne.n	8009cc4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fc f8d3 	bl	8005eac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2202      	movs	r2, #2
 8009d0a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f8fd 	bl	8009f20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d26:	e0df      	b.n	8009ee8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 80d1 	beq.w	8009eec <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009d4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f000 80cc 	beq.w	8009eec <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5c:	e853 3f00 	ldrex	r3, [r3]
 8009d60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	461a      	mov	r2, r3
 8009d72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d76:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d78:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d7e:	e841 2300 	strex	r3, r2, [r1]
 8009d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1e4      	bne.n	8009d54 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3308      	adds	r3, #8
 8009d90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d94:	e853 3f00 	ldrex	r3, [r3]
 8009d98:	623b      	str	r3, [r7, #32]
   return(result);
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009da0:	f023 0301 	bic.w	r3, r3, #1
 8009da4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	3308      	adds	r3, #8
 8009dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009db2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dba:	e841 2300 	strex	r3, r2, [r1]
 8009dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1e1      	bne.n	8009d8a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	e853 3f00 	ldrex	r3, [r3]
 8009de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f023 0310 	bic.w	r3, r3, #16
 8009dee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009dfc:	61fb      	str	r3, [r7, #28]
 8009dfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e00:	69b9      	ldr	r1, [r7, #24]
 8009e02:	69fa      	ldr	r2, [r7, #28]
 8009e04:	e841 2300 	strex	r3, r2, [r1]
 8009e08:	617b      	str	r3, [r7, #20]
   return(result);
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1e4      	bne.n	8009dda <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2202      	movs	r2, #2
 8009e14:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f87f 	bl	8009f20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e22:	e063      	b.n	8009eec <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00e      	beq.n	8009e4e <HAL_UART_IRQHandler+0x59e>
 8009e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d008      	beq.n	8009e4e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009e44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fdd2 	bl	800a9f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e4c:	e051      	b.n	8009ef2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d014      	beq.n	8009e84 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d105      	bne.n	8009e72 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d008      	beq.n	8009e84 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d03a      	beq.n	8009ef0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	4798      	blx	r3
    }
    return;
 8009e82:	e035      	b.n	8009ef0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d009      	beq.n	8009ea4 <HAL_UART_IRQHandler+0x5f4>
 8009e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d003      	beq.n	8009ea4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fd7c 	bl	800a99a <UART_EndTransmit_IT>
    return;
 8009ea2:	e026      	b.n	8009ef2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ea8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d009      	beq.n	8009ec4 <HAL_UART_IRQHandler+0x614>
 8009eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009eb4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fdab 	bl	800aa18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ec2:	e016      	b.n	8009ef2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ec8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d010      	beq.n	8009ef2 <HAL_UART_IRQHandler+0x642>
 8009ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	da0c      	bge.n	8009ef2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fd93 	bl	800aa04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ede:	e008      	b.n	8009ef2 <HAL_UART_IRQHandler+0x642>
      return;
 8009ee0:	bf00      	nop
 8009ee2:	e006      	b.n	8009ef2 <HAL_UART_IRQHandler+0x642>
    return;
 8009ee4:	bf00      	nop
 8009ee6:	e004      	b.n	8009ef2 <HAL_UART_IRQHandler+0x642>
      return;
 8009ee8:	bf00      	nop
 8009eea:	e002      	b.n	8009ef2 <HAL_UART_IRQHandler+0x642>
      return;
 8009eec:	bf00      	nop
 8009eee:	e000      	b.n	8009ef2 <HAL_UART_IRQHandler+0x642>
    return;
 8009ef0:	bf00      	nop
  }
}
 8009ef2:	37e8      	adds	r7, #232	@ 0xe8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f2c:	bf00      	nop
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f3c:	b08c      	sub	sp, #48	@ 0x30
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	689a      	ldr	r2, [r3, #8]
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	431a      	orrs	r2, r3
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	431a      	orrs	r2, r3
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	69db      	ldr	r3, [r3, #28]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	4baa      	ldr	r3, [pc, #680]	@ (800a210 <UART_SetConfig+0x2d8>)
 8009f68:	4013      	ands	r3, r2
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	6812      	ldr	r2, [r2, #0]
 8009f6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f70:	430b      	orrs	r3, r1
 8009f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	68da      	ldr	r2, [r3, #12]
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	430a      	orrs	r2, r1
 8009f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a9f      	ldr	r2, [pc, #636]	@ (800a214 <UART_SetConfig+0x2dc>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d004      	beq.n	8009fa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	6a1b      	ldr	r3, [r3, #32]
 8009f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009fae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	6812      	ldr	r2, [r2, #0]
 8009fb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fb8:	430b      	orrs	r3, r1
 8009fba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc2:	f023 010f 	bic.w	r1, r3, #15
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	430a      	orrs	r2, r1
 8009fd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a90      	ldr	r2, [pc, #576]	@ (800a218 <UART_SetConfig+0x2e0>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d125      	bne.n	800a028 <UART_SetConfig+0xf0>
 8009fdc:	4b8f      	ldr	r3, [pc, #572]	@ (800a21c <UART_SetConfig+0x2e4>)
 8009fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fe2:	f003 0303 	and.w	r3, r3, #3
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d81a      	bhi.n	800a020 <UART_SetConfig+0xe8>
 8009fea:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff0 <UART_SetConfig+0xb8>)
 8009fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff0:	0800a001 	.word	0x0800a001
 8009ff4:	0800a011 	.word	0x0800a011
 8009ff8:	0800a009 	.word	0x0800a009
 8009ffc:	0800a019 	.word	0x0800a019
 800a000:	2301      	movs	r3, #1
 800a002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a006:	e116      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a008:	2302      	movs	r3, #2
 800a00a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a00e:	e112      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a010:	2304      	movs	r3, #4
 800a012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a016:	e10e      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a018:	2308      	movs	r3, #8
 800a01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a01e:	e10a      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a020:	2310      	movs	r3, #16
 800a022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a026:	e106      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a7c      	ldr	r2, [pc, #496]	@ (800a220 <UART_SetConfig+0x2e8>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d138      	bne.n	800a0a4 <UART_SetConfig+0x16c>
 800a032:	4b7a      	ldr	r3, [pc, #488]	@ (800a21c <UART_SetConfig+0x2e4>)
 800a034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a038:	f003 030c 	and.w	r3, r3, #12
 800a03c:	2b0c      	cmp	r3, #12
 800a03e:	d82d      	bhi.n	800a09c <UART_SetConfig+0x164>
 800a040:	a201      	add	r2, pc, #4	@ (adr r2, 800a048 <UART_SetConfig+0x110>)
 800a042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a046:	bf00      	nop
 800a048:	0800a07d 	.word	0x0800a07d
 800a04c:	0800a09d 	.word	0x0800a09d
 800a050:	0800a09d 	.word	0x0800a09d
 800a054:	0800a09d 	.word	0x0800a09d
 800a058:	0800a08d 	.word	0x0800a08d
 800a05c:	0800a09d 	.word	0x0800a09d
 800a060:	0800a09d 	.word	0x0800a09d
 800a064:	0800a09d 	.word	0x0800a09d
 800a068:	0800a085 	.word	0x0800a085
 800a06c:	0800a09d 	.word	0x0800a09d
 800a070:	0800a09d 	.word	0x0800a09d
 800a074:	0800a09d 	.word	0x0800a09d
 800a078:	0800a095 	.word	0x0800a095
 800a07c:	2300      	movs	r3, #0
 800a07e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a082:	e0d8      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a084:	2302      	movs	r3, #2
 800a086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a08a:	e0d4      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a08c:	2304      	movs	r3, #4
 800a08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a092:	e0d0      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a094:	2308      	movs	r3, #8
 800a096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a09a:	e0cc      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a09c:	2310      	movs	r3, #16
 800a09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a2:	e0c8      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a5e      	ldr	r2, [pc, #376]	@ (800a224 <UART_SetConfig+0x2ec>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d125      	bne.n	800a0fa <UART_SetConfig+0x1c2>
 800a0ae:	4b5b      	ldr	r3, [pc, #364]	@ (800a21c <UART_SetConfig+0x2e4>)
 800a0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a0b8:	2b30      	cmp	r3, #48	@ 0x30
 800a0ba:	d016      	beq.n	800a0ea <UART_SetConfig+0x1b2>
 800a0bc:	2b30      	cmp	r3, #48	@ 0x30
 800a0be:	d818      	bhi.n	800a0f2 <UART_SetConfig+0x1ba>
 800a0c0:	2b20      	cmp	r3, #32
 800a0c2:	d00a      	beq.n	800a0da <UART_SetConfig+0x1a2>
 800a0c4:	2b20      	cmp	r3, #32
 800a0c6:	d814      	bhi.n	800a0f2 <UART_SetConfig+0x1ba>
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d002      	beq.n	800a0d2 <UART_SetConfig+0x19a>
 800a0cc:	2b10      	cmp	r3, #16
 800a0ce:	d008      	beq.n	800a0e2 <UART_SetConfig+0x1aa>
 800a0d0:	e00f      	b.n	800a0f2 <UART_SetConfig+0x1ba>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0d8:	e0ad      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a0da:	2302      	movs	r3, #2
 800a0dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0e0:	e0a9      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a0e2:	2304      	movs	r3, #4
 800a0e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0e8:	e0a5      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a0ea:	2308      	movs	r3, #8
 800a0ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0f0:	e0a1      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a0f2:	2310      	movs	r3, #16
 800a0f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0f8:	e09d      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a4a      	ldr	r2, [pc, #296]	@ (800a228 <UART_SetConfig+0x2f0>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d125      	bne.n	800a150 <UART_SetConfig+0x218>
 800a104:	4b45      	ldr	r3, [pc, #276]	@ (800a21c <UART_SetConfig+0x2e4>)
 800a106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a10a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a10e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a110:	d016      	beq.n	800a140 <UART_SetConfig+0x208>
 800a112:	2bc0      	cmp	r3, #192	@ 0xc0
 800a114:	d818      	bhi.n	800a148 <UART_SetConfig+0x210>
 800a116:	2b80      	cmp	r3, #128	@ 0x80
 800a118:	d00a      	beq.n	800a130 <UART_SetConfig+0x1f8>
 800a11a:	2b80      	cmp	r3, #128	@ 0x80
 800a11c:	d814      	bhi.n	800a148 <UART_SetConfig+0x210>
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <UART_SetConfig+0x1f0>
 800a122:	2b40      	cmp	r3, #64	@ 0x40
 800a124:	d008      	beq.n	800a138 <UART_SetConfig+0x200>
 800a126:	e00f      	b.n	800a148 <UART_SetConfig+0x210>
 800a128:	2300      	movs	r3, #0
 800a12a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a12e:	e082      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a130:	2302      	movs	r3, #2
 800a132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a136:	e07e      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a138:	2304      	movs	r3, #4
 800a13a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a13e:	e07a      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a140:	2308      	movs	r3, #8
 800a142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a146:	e076      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a148:	2310      	movs	r3, #16
 800a14a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a14e:	e072      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a35      	ldr	r2, [pc, #212]	@ (800a22c <UART_SetConfig+0x2f4>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d12a      	bne.n	800a1b0 <UART_SetConfig+0x278>
 800a15a:	4b30      	ldr	r3, [pc, #192]	@ (800a21c <UART_SetConfig+0x2e4>)
 800a15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a160:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a164:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a168:	d01a      	beq.n	800a1a0 <UART_SetConfig+0x268>
 800a16a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a16e:	d81b      	bhi.n	800a1a8 <UART_SetConfig+0x270>
 800a170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a174:	d00c      	beq.n	800a190 <UART_SetConfig+0x258>
 800a176:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a17a:	d815      	bhi.n	800a1a8 <UART_SetConfig+0x270>
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d003      	beq.n	800a188 <UART_SetConfig+0x250>
 800a180:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a184:	d008      	beq.n	800a198 <UART_SetConfig+0x260>
 800a186:	e00f      	b.n	800a1a8 <UART_SetConfig+0x270>
 800a188:	2300      	movs	r3, #0
 800a18a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a18e:	e052      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a190:	2302      	movs	r3, #2
 800a192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a196:	e04e      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a198:	2304      	movs	r3, #4
 800a19a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a19e:	e04a      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a1a0:	2308      	movs	r3, #8
 800a1a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1a6:	e046      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a1a8:	2310      	movs	r3, #16
 800a1aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ae:	e042      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a17      	ldr	r2, [pc, #92]	@ (800a214 <UART_SetConfig+0x2dc>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d13a      	bne.n	800a230 <UART_SetConfig+0x2f8>
 800a1ba:	4b18      	ldr	r3, [pc, #96]	@ (800a21c <UART_SetConfig+0x2e4>)
 800a1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a1c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1c8:	d01a      	beq.n	800a200 <UART_SetConfig+0x2c8>
 800a1ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1ce:	d81b      	bhi.n	800a208 <UART_SetConfig+0x2d0>
 800a1d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1d4:	d00c      	beq.n	800a1f0 <UART_SetConfig+0x2b8>
 800a1d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1da:	d815      	bhi.n	800a208 <UART_SetConfig+0x2d0>
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d003      	beq.n	800a1e8 <UART_SetConfig+0x2b0>
 800a1e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1e4:	d008      	beq.n	800a1f8 <UART_SetConfig+0x2c0>
 800a1e6:	e00f      	b.n	800a208 <UART_SetConfig+0x2d0>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ee:	e022      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1f6:	e01e      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a1f8:	2304      	movs	r3, #4
 800a1fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1fe:	e01a      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a200:	2308      	movs	r3, #8
 800a202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a206:	e016      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a208:	2310      	movs	r3, #16
 800a20a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a20e:	e012      	b.n	800a236 <UART_SetConfig+0x2fe>
 800a210:	cfff69f3 	.word	0xcfff69f3
 800a214:	40008000 	.word	0x40008000
 800a218:	40013800 	.word	0x40013800
 800a21c:	40021000 	.word	0x40021000
 800a220:	40004400 	.word	0x40004400
 800a224:	40004800 	.word	0x40004800
 800a228:	40004c00 	.word	0x40004c00
 800a22c:	40005000 	.word	0x40005000
 800a230:	2310      	movs	r3, #16
 800a232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4aae      	ldr	r2, [pc, #696]	@ (800a4f4 <UART_SetConfig+0x5bc>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	f040 8097 	bne.w	800a370 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a242:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a246:	2b08      	cmp	r3, #8
 800a248:	d823      	bhi.n	800a292 <UART_SetConfig+0x35a>
 800a24a:	a201      	add	r2, pc, #4	@ (adr r2, 800a250 <UART_SetConfig+0x318>)
 800a24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a250:	0800a275 	.word	0x0800a275
 800a254:	0800a293 	.word	0x0800a293
 800a258:	0800a27d 	.word	0x0800a27d
 800a25c:	0800a293 	.word	0x0800a293
 800a260:	0800a283 	.word	0x0800a283
 800a264:	0800a293 	.word	0x0800a293
 800a268:	0800a293 	.word	0x0800a293
 800a26c:	0800a293 	.word	0x0800a293
 800a270:	0800a28b 	.word	0x0800a28b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a274:	f7ff f80c 	bl	8009290 <HAL_RCC_GetPCLK1Freq>
 800a278:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a27a:	e010      	b.n	800a29e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a27c:	4b9e      	ldr	r3, [pc, #632]	@ (800a4f8 <UART_SetConfig+0x5c0>)
 800a27e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a280:	e00d      	b.n	800a29e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a282:	f7fe ff97 	bl	80091b4 <HAL_RCC_GetSysClockFreq>
 800a286:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a288:	e009      	b.n	800a29e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a28a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a28e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a290:	e005      	b.n	800a29e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a29c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 8130 	beq.w	800a506 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2aa:	4a94      	ldr	r2, [pc, #592]	@ (800a4fc <UART_SetConfig+0x5c4>)
 800a2ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	4413      	add	r3, r2
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d305      	bcc.n	800a2d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2d0:	69ba      	ldr	r2, [r7, #24]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d903      	bls.n	800a2de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2dc:	e113      	b.n	800a506 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	60bb      	str	r3, [r7, #8]
 800a2e4:	60fa      	str	r2, [r7, #12]
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ea:	4a84      	ldr	r2, [pc, #528]	@ (800a4fc <UART_SetConfig+0x5c4>)
 800a2ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	603b      	str	r3, [r7, #0]
 800a2f6:	607a      	str	r2, [r7, #4]
 800a2f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a300:	f7f6 fcea 	bl	8000cd8 <__aeabi_uldivmod>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	4610      	mov	r0, r2
 800a30a:	4619      	mov	r1, r3
 800a30c:	f04f 0200 	mov.w	r2, #0
 800a310:	f04f 0300 	mov.w	r3, #0
 800a314:	020b      	lsls	r3, r1, #8
 800a316:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a31a:	0202      	lsls	r2, r0, #8
 800a31c:	6979      	ldr	r1, [r7, #20]
 800a31e:	6849      	ldr	r1, [r1, #4]
 800a320:	0849      	lsrs	r1, r1, #1
 800a322:	2000      	movs	r0, #0
 800a324:	460c      	mov	r4, r1
 800a326:	4605      	mov	r5, r0
 800a328:	eb12 0804 	adds.w	r8, r2, r4
 800a32c:	eb43 0905 	adc.w	r9, r3, r5
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	469a      	mov	sl, r3
 800a338:	4693      	mov	fp, r2
 800a33a:	4652      	mov	r2, sl
 800a33c:	465b      	mov	r3, fp
 800a33e:	4640      	mov	r0, r8
 800a340:	4649      	mov	r1, r9
 800a342:	f7f6 fcc9 	bl	8000cd8 <__aeabi_uldivmod>
 800a346:	4602      	mov	r2, r0
 800a348:	460b      	mov	r3, r1
 800a34a:	4613      	mov	r3, r2
 800a34c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a34e:	6a3b      	ldr	r3, [r7, #32]
 800a350:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a354:	d308      	bcc.n	800a368 <UART_SetConfig+0x430>
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a35c:	d204      	bcs.n	800a368 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6a3a      	ldr	r2, [r7, #32]
 800a364:	60da      	str	r2, [r3, #12]
 800a366:	e0ce      	b.n	800a506 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a36e:	e0ca      	b.n	800a506 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	69db      	ldr	r3, [r3, #28]
 800a374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a378:	d166      	bne.n	800a448 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a37a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a37e:	2b08      	cmp	r3, #8
 800a380:	d827      	bhi.n	800a3d2 <UART_SetConfig+0x49a>
 800a382:	a201      	add	r2, pc, #4	@ (adr r2, 800a388 <UART_SetConfig+0x450>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a3ad 	.word	0x0800a3ad
 800a38c:	0800a3b5 	.word	0x0800a3b5
 800a390:	0800a3bd 	.word	0x0800a3bd
 800a394:	0800a3d3 	.word	0x0800a3d3
 800a398:	0800a3c3 	.word	0x0800a3c3
 800a39c:	0800a3d3 	.word	0x0800a3d3
 800a3a0:	0800a3d3 	.word	0x0800a3d3
 800a3a4:	0800a3d3 	.word	0x0800a3d3
 800a3a8:	0800a3cb 	.word	0x0800a3cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3ac:	f7fe ff70 	bl	8009290 <HAL_RCC_GetPCLK1Freq>
 800a3b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3b2:	e014      	b.n	800a3de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3b4:	f7fe ff82 	bl	80092bc <HAL_RCC_GetPCLK2Freq>
 800a3b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3ba:	e010      	b.n	800a3de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3bc:	4b4e      	ldr	r3, [pc, #312]	@ (800a4f8 <UART_SetConfig+0x5c0>)
 800a3be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3c0:	e00d      	b.n	800a3de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3c2:	f7fe fef7 	bl	80091b4 <HAL_RCC_GetSysClockFreq>
 800a3c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3c8:	e009      	b.n	800a3de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3d0:	e005      	b.n	800a3de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a3dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f000 8090 	beq.w	800a506 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ea:	4a44      	ldr	r2, [pc, #272]	@ (800a4fc <UART_SetConfig+0x5c4>)
 800a3ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3f8:	005a      	lsls	r2, r3, #1
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	085b      	lsrs	r3, r3, #1
 800a400:	441a      	add	r2, r3
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	fbb2 f3f3 	udiv	r3, r2, r3
 800a40a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	2b0f      	cmp	r3, #15
 800a410:	d916      	bls.n	800a440 <UART_SetConfig+0x508>
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a418:	d212      	bcs.n	800a440 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	f023 030f 	bic.w	r3, r3, #15
 800a422:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	085b      	lsrs	r3, r3, #1
 800a428:	b29b      	uxth	r3, r3
 800a42a:	f003 0307 	and.w	r3, r3, #7
 800a42e:	b29a      	uxth	r2, r3
 800a430:	8bfb      	ldrh	r3, [r7, #30]
 800a432:	4313      	orrs	r3, r2
 800a434:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	8bfa      	ldrh	r2, [r7, #30]
 800a43c:	60da      	str	r2, [r3, #12]
 800a43e:	e062      	b.n	800a506 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a446:	e05e      	b.n	800a506 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a448:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d828      	bhi.n	800a4a2 <UART_SetConfig+0x56a>
 800a450:	a201      	add	r2, pc, #4	@ (adr r2, 800a458 <UART_SetConfig+0x520>)
 800a452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a456:	bf00      	nop
 800a458:	0800a47d 	.word	0x0800a47d
 800a45c:	0800a485 	.word	0x0800a485
 800a460:	0800a48d 	.word	0x0800a48d
 800a464:	0800a4a3 	.word	0x0800a4a3
 800a468:	0800a493 	.word	0x0800a493
 800a46c:	0800a4a3 	.word	0x0800a4a3
 800a470:	0800a4a3 	.word	0x0800a4a3
 800a474:	0800a4a3 	.word	0x0800a4a3
 800a478:	0800a49b 	.word	0x0800a49b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a47c:	f7fe ff08 	bl	8009290 <HAL_RCC_GetPCLK1Freq>
 800a480:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a482:	e014      	b.n	800a4ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a484:	f7fe ff1a 	bl	80092bc <HAL_RCC_GetPCLK2Freq>
 800a488:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a48a:	e010      	b.n	800a4ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a48c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4f8 <UART_SetConfig+0x5c0>)
 800a48e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a490:	e00d      	b.n	800a4ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a492:	f7fe fe8f 	bl	80091b4 <HAL_RCC_GetSysClockFreq>
 800a496:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a498:	e009      	b.n	800a4ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a49a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a49e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4a0:	e005      	b.n	800a4ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a4ac:	bf00      	nop
    }

    if (pclk != 0U)
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d028      	beq.n	800a506 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b8:	4a10      	ldr	r2, [pc, #64]	@ (800a4fc <UART_SetConfig+0x5c4>)
 800a4ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	085b      	lsrs	r3, r3, #1
 800a4cc:	441a      	add	r2, r3
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	2b0f      	cmp	r3, #15
 800a4dc:	d910      	bls.n	800a500 <UART_SetConfig+0x5c8>
 800a4de:	6a3b      	ldr	r3, [r7, #32]
 800a4e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4e4:	d20c      	bcs.n	800a500 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	60da      	str	r2, [r3, #12]
 800a4f0:	e009      	b.n	800a506 <UART_SetConfig+0x5ce>
 800a4f2:	bf00      	nop
 800a4f4:	40008000 	.word	0x40008000
 800a4f8:	00f42400 	.word	0x00f42400
 800a4fc:	08012bd8 	.word	0x08012bd8
      }
      else
      {
        ret = HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2201      	movs	r2, #1
 800a50a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	2201      	movs	r2, #1
 800a512:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2200      	movs	r2, #0
 800a51a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	2200      	movs	r2, #0
 800a520:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a522:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a526:	4618      	mov	r0, r3
 800a528:	3730      	adds	r7, #48	@ 0x30
 800a52a:	46bd      	mov	sp, r7
 800a52c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a53c:	f003 0308 	and.w	r3, r3, #8
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00a      	beq.n	800a55a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	430a      	orrs	r2, r1
 800a558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00a      	beq.n	800a57c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	430a      	orrs	r2, r1
 800a57a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a580:	f003 0302 	and.w	r3, r3, #2
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00a      	beq.n	800a59e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a2:	f003 0304 	and.w	r3, r3, #4
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c4:	f003 0310 	and.w	r3, r3, #16
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00a      	beq.n	800a5e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	430a      	orrs	r2, r1
 800a5e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e6:	f003 0320 	and.w	r3, r3, #32
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	430a      	orrs	r2, r1
 800a602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d01a      	beq.n	800a646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	430a      	orrs	r2, r1
 800a624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a62a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a62e:	d10a      	bne.n	800a646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00a      	beq.n	800a668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	430a      	orrs	r2, r1
 800a666:	605a      	str	r2, [r3, #4]
  }
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b098      	sub	sp, #96	@ 0x60
 800a678:	af02      	add	r7, sp, #8
 800a67a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a684:	f7fb fa2c 	bl	8005ae0 <HAL_GetTick>
 800a688:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 0308 	and.w	r3, r3, #8
 800a694:	2b08      	cmp	r3, #8
 800a696:	d12f      	bne.n	800a6f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a698:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f88e 	bl	800a7c8 <UART_WaitOnFlagUntilTimeout>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d022      	beq.n	800a6f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ba:	e853 3f00 	ldrex	r3, [r3]
 800a6be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6d8:	e841 2300 	strex	r3, r2, [r1]
 800a6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e6      	bne.n	800a6b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e063      	b.n	800a7c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0304 	and.w	r3, r3, #4
 800a702:	2b04      	cmp	r3, #4
 800a704:	d149      	bne.n	800a79a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a706:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a70e:	2200      	movs	r2, #0
 800a710:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f857 	bl	800a7c8 <UART_WaitOnFlagUntilTimeout>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d03c      	beq.n	800a79a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a728:	e853 3f00 	ldrex	r3, [r3]
 800a72c:	623b      	str	r3, [r7, #32]
   return(result);
 800a72e:	6a3b      	ldr	r3, [r7, #32]
 800a730:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a734:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	461a      	mov	r2, r3
 800a73c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a73e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a740:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a742:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a746:	e841 2300 	strex	r3, r2, [r1]
 800a74a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1e6      	bne.n	800a720 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3308      	adds	r3, #8
 800a758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	e853 3f00 	ldrex	r3, [r3]
 800a760:	60fb      	str	r3, [r7, #12]
   return(result);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f023 0301 	bic.w	r3, r3, #1
 800a768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	3308      	adds	r3, #8
 800a770:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a772:	61fa      	str	r2, [r7, #28]
 800a774:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a776:	69b9      	ldr	r1, [r7, #24]
 800a778:	69fa      	ldr	r2, [r7, #28]
 800a77a:	e841 2300 	strex	r3, r2, [r1]
 800a77e:	617b      	str	r3, [r7, #20]
   return(result);
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1e5      	bne.n	800a752 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2220      	movs	r2, #32
 800a78a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a796:	2303      	movs	r3, #3
 800a798:	e012      	b.n	800a7c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2220      	movs	r2, #32
 800a79e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2220      	movs	r2, #32
 800a7a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3758      	adds	r7, #88	@ 0x58
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	603b      	str	r3, [r7, #0]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7d8:	e04f      	b.n	800a87a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e0:	d04b      	beq.n	800a87a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7e2:	f7fb f97d 	bl	8005ae0 <HAL_GetTick>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	69ba      	ldr	r2, [r7, #24]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d302      	bcc.n	800a7f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d101      	bne.n	800a7fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e04e      	b.n	800a89a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f003 0304 	and.w	r3, r3, #4
 800a806:	2b00      	cmp	r3, #0
 800a808:	d037      	beq.n	800a87a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	2b80      	cmp	r3, #128	@ 0x80
 800a80e:	d034      	beq.n	800a87a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2b40      	cmp	r3, #64	@ 0x40
 800a814:	d031      	beq.n	800a87a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	69db      	ldr	r3, [r3, #28]
 800a81c:	f003 0308 	and.w	r3, r3, #8
 800a820:	2b08      	cmp	r3, #8
 800a822:	d110      	bne.n	800a846 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2208      	movs	r2, #8
 800a82a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f000 f838 	bl	800a8a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2208      	movs	r2, #8
 800a836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e029      	b.n	800a89a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	69db      	ldr	r3, [r3, #28]
 800a84c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a854:	d111      	bne.n	800a87a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a85e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 f81e 	bl	800a8a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2220      	movs	r2, #32
 800a86a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e00f      	b.n	800a89a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	69da      	ldr	r2, [r3, #28]
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	4013      	ands	r3, r2
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	429a      	cmp	r2, r3
 800a888:	bf0c      	ite	eq
 800a88a:	2301      	moveq	r3, #1
 800a88c:	2300      	movne	r3, #0
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	461a      	mov	r2, r3
 800a892:	79fb      	ldrb	r3, [r7, #7]
 800a894:	429a      	cmp	r2, r3
 800a896:	d0a0      	beq.n	800a7da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b095      	sub	sp, #84	@ 0x54
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b2:	e853 3f00 	ldrex	r3, [r3]
 800a8b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8d0:	e841 2300 	strex	r3, r2, [r1]
 800a8d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1e6      	bne.n	800a8aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e4:	6a3b      	ldr	r3, [r7, #32]
 800a8e6:	e853 3f00 	ldrex	r3, [r3]
 800a8ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8f2:	f023 0301 	bic.w	r3, r3, #1
 800a8f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	3308      	adds	r3, #8
 800a8fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a900:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a902:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a904:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a908:	e841 2300 	strex	r3, r2, [r1]
 800a90c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1e3      	bne.n	800a8dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d118      	bne.n	800a94e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	e853 3f00 	ldrex	r3, [r3]
 800a928:	60bb      	str	r3, [r7, #8]
   return(result);
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	f023 0310 	bic.w	r3, r3, #16
 800a930:	647b      	str	r3, [r7, #68]	@ 0x44
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	461a      	mov	r2, r3
 800a938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a93a:	61bb      	str	r3, [r7, #24]
 800a93c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93e:	6979      	ldr	r1, [r7, #20]
 800a940:	69ba      	ldr	r2, [r7, #24]
 800a942:	e841 2300 	strex	r3, r2, [r1]
 800a946:	613b      	str	r3, [r7, #16]
   return(result);
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1e6      	bne.n	800a91c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2220      	movs	r2, #32
 800a952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a962:	bf00      	nop
 800a964:	3754      	adds	r7, #84	@ 0x54
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a97a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f7ff fabd 	bl	8009f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a992:	bf00      	nop
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b088      	sub	sp, #32
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	e853 3f00 	ldrex	r3, [r3]
 800a9ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9b6:	61fb      	str	r3, [r7, #28]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	61bb      	str	r3, [r7, #24]
 800a9c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c4:	6979      	ldr	r1, [r7, #20]
 800a9c6:	69ba      	ldr	r2, [r7, #24]
 800a9c8:	e841 2300 	strex	r3, r2, [r1]
 800a9cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1e6      	bne.n	800a9a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7ff fa88 	bl	8009ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9e8:	bf00      	nop
 800a9ea:	3720      	adds	r7, #32
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d101      	bne.n	800aa42 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa3e:	2302      	movs	r3, #2
 800aa40:	e027      	b.n	800aa92 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2224      	movs	r2, #36	@ 0x24
 800aa4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f022 0201 	bic.w	r2, r2, #1
 800aa68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aa70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2220      	movs	r2, #32
 800aa84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3714      	adds	r7, #20
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d101      	bne.n	800aab6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aab2:	2302      	movs	r3, #2
 800aab4:	e02d      	b.n	800ab12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2224      	movs	r2, #36	@ 0x24
 800aac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f022 0201 	bic.w	r2, r2, #1
 800aadc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	683a      	ldr	r2, [r7, #0]
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f850 	bl	800ab98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2220      	movs	r2, #32
 800ab04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d101      	bne.n	800ab32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab2e:	2302      	movs	r3, #2
 800ab30:	e02d      	b.n	800ab8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2224      	movs	r2, #36	@ 0x24
 800ab3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f022 0201 	bic.w	r2, r2, #1
 800ab58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	683a      	ldr	r2, [r7, #0]
 800ab6a:	430a      	orrs	r2, r1
 800ab6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f812 	bl	800ab98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2220      	movs	r2, #32
 800ab80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d108      	bne.n	800abba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abb8:	e031      	b.n	800ac1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abba:	2308      	movs	r3, #8
 800abbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abbe:	2308      	movs	r3, #8
 800abc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	0e5b      	lsrs	r3, r3, #25
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	f003 0307 	and.w	r3, r3, #7
 800abd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	0f5b      	lsrs	r3, r3, #29
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	f003 0307 	and.w	r3, r3, #7
 800abe0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abe2:	7bbb      	ldrb	r3, [r7, #14]
 800abe4:	7b3a      	ldrb	r2, [r7, #12]
 800abe6:	4911      	ldr	r1, [pc, #68]	@ (800ac2c <UARTEx_SetNbDataToProcess+0x94>)
 800abe8:	5c8a      	ldrb	r2, [r1, r2]
 800abea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800abee:	7b3a      	ldrb	r2, [r7, #12]
 800abf0:	490f      	ldr	r1, [pc, #60]	@ (800ac30 <UARTEx_SetNbDataToProcess+0x98>)
 800abf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abf4:	fb93 f3f2 	sdiv	r3, r3, r2
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
 800ac02:	7b7a      	ldrb	r2, [r7, #13]
 800ac04:	4909      	ldr	r1, [pc, #36]	@ (800ac2c <UARTEx_SetNbDataToProcess+0x94>)
 800ac06:	5c8a      	ldrb	r2, [r1, r2]
 800ac08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac0c:	7b7a      	ldrb	r2, [r7, #13]
 800ac0e:	4908      	ldr	r1, [pc, #32]	@ (800ac30 <UARTEx_SetNbDataToProcess+0x98>)
 800ac10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac12:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ac1e:	bf00      	nop
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	08012bf0 	.word	0x08012bf0
 800ac30:	08012bf8 	.word	0x08012bf8

0800ac34 <_ZN17AbstractAllocatorD1Ev>:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
    virtual void* allocate(CanardInstance* ins, size_t amount) = 0;
    virtual void free(CanardInstance* ins, void* pointer) = 0;
    virtual ~AbstractAllocator() {}
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	4a04      	ldr	r2, [pc, #16]	@ (800ac50 <_ZN17AbstractAllocatorD1Ev+0x1c>)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4618      	mov	r0, r3
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	08012b84 	.word	0x08012b84

0800ac54 <_ZN17AbstractAllocatorD0Ev>:
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7ff ffe9 	bl	800ac34 <_ZN17AbstractAllocatorD1Ev>
 800ac62:	2108      	movs	r1, #8
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f002 fe7a 	bl	800d95e <_ZdlPvj>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
#include <cyphal/allocators/sys/sys_allocator.h>
#include <cstdlib>

void* SystemAllocator::allocate(CanardInstance* const ins, const size_t amount) {
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	607a      	str	r2, [r7, #4]
    (void)ins;
    void* mem;

    CRITICAL_SECTION({ mem = std::malloc(amount); })
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f002 fec5 	bl	800da10 <malloc>
 800ac86:	4603      	mov	r3, r0
 800ac88:	617b      	str	r3, [r7, #20]
    if (mem == nullptr) {
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d105      	bne.n	800ac9c <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
        utilities.error_handler();
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	3310      	adds	r3, #16
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7f9 fe02 	bl	80048a0 <_ZNKSt8functionIFvvEEclEv>
    }
    return mem;
 800ac9c:	697b      	ldr	r3, [r7, #20]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3718      	adds	r7, #24
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <_ZN15SystemAllocator4freeEP14CanardInstancePv>:

void SystemAllocator::free(CanardInstance* const ins, void* const pointer) {
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b084      	sub	sp, #16
 800acaa:	af00      	add	r7, sp, #0
 800acac:	60f8      	str	r0, [r7, #12]
 800acae:	60b9      	str	r1, [r7, #8]
 800acb0:	607a      	str	r2, [r7, #4]
    (void)ins;
    CRITICAL_SECTION({ std::free(pointer); })
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f002 feb4 	bl	800da20 <free>
}
 800acb8:	bf00      	nop
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <_ZN15SystemAllocatorD1Ev>:
class SystemAllocator : public AbstractAllocator {
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	4a05      	ldr	r2, [pc, #20]	@ (800ace0 <_ZN15SystemAllocatorD1Ev+0x20>)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	601a      	str	r2, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7ff ffaf 	bl	800ac34 <_ZN17AbstractAllocatorD1Ev>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4618      	mov	r0, r3
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	08012c08 	.word	0x08012c08

0800ace4 <_ZN15SystemAllocatorD0Ev>:
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff ffe7 	bl	800acc0 <_ZN15SystemAllocatorD1Ev>
 800acf2:	2108      	movs	r1, #8
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f002 fe32 	bl	800d95e <_ZdlPvj>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4618      	mov	r0, r3
 800acfe:	3708      	adds	r7, #8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
void CyphalInterface::push(
    const CanardMicrosecond tx_deadline_usec,
    const CanardTransferMetadata* const metadata,
    const size_t payload_size,
    const void* const payload
) const {
 800ad04:	b590      	push	{r4, r7, lr}
 800ad06:	b08b      	sub	sp, #44	@ 0x2c
 800ad08:	af04      	add	r7, sp, #16
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t push_state = canardTxPush(
        &provider->queue,
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	3308      	adds	r3, #8
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 f876 	bl	800ae06 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800ad1a:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800ad1c:	f103 040c 	add.w	r4, r3, #12
        &provider->canard,
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3308      	adds	r3, #8
 800ad24:	4618      	mov	r0, r3
 800ad26:	f000 f86e 	bl	800ae06 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800ad2a:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800ad2c:	f103 0120 	add.w	r1, r3, #32
 800ad30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad32:	9302      	str	r3, [sp, #8]
 800ad34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad36:	9301      	str	r3, [sp, #4]
 800ad38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad40:	4620      	mov	r0, r4
 800ad42:	f002 fb65 	bl	800d410 <canardTxPush>
 800ad46:	6178      	str	r0, [r7, #20]
        tx_deadline_usec,
        metadata,
        payload_size,
        payload
    );
    if (push_state == -CANARD_ERROR_OUT_OF_MEMORY) {
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	f113 0f03 	cmn.w	r3, #3
 800ad4e:	d106      	bne.n	800ad5e <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
#ifdef __linux__
        std::cerr << "[Error: OOM] Tried to send to port: " << metadata->port_id << ", node: " << +metadata->remote_node_id << std::endl;
#else
        utilities.error_handler();
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	3310      	adds	r3, #16
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7f9 fda2 	bl	80048a0 <_ZNKSt8functionIFvvEEclEv>
#endif
        return;
 800ad5c:	e008      	b.n	800ad70 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
    }
    if (push_state < 0) {
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	da05      	bge.n	800ad70 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
        utilities.error_handler();
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	3310      	adds	r3, #16
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7f9 fd98 	bl	80048a0 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800ad70:	371c      	adds	r7, #28
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd90      	pop	{r4, r7, pc}
	...

0800ad78 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
void CyphalInterface::subscribe(
    CanardPortID port_id,
    size_t extent,
    CanardTransferKind kind,
    CanardRxSubscription* subscription
) const {
 800ad78:	b590      	push	{r4, r7, lr}
 800ad7a:	b089      	sub	sp, #36	@ 0x24
 800ad7c:	af04      	add	r7, sp, #16
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	607a      	str	r2, [r7, #4]
 800ad82:	461a      	mov	r2, r3
 800ad84:	460b      	mov	r3, r1
 800ad86:	817b      	strh	r3, [r7, #10]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	727b      	strb	r3, [r7, #9]
    if (canardRxSubscribe(
            (CanardInstance* const)&provider->canard,
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	3308      	adds	r3, #8
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 f838 	bl	800ae06 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800ad96:	4603      	mov	r3, r0
    if (canardRxSubscribe(
 800ad98:	f103 0020 	add.w	r0, r3, #32
 800ad9c:	897c      	ldrh	r4, [r7, #10]
 800ad9e:	7a79      	ldrb	r1, [r7, #9]
 800ada0:	6a3b      	ldr	r3, [r7, #32]
 800ada2:	9302      	str	r3, [sp, #8]
 800ada4:	4a0d      	ldr	r2, [pc, #52]	@ (800addc <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 800ada6:	f04f 0300 	mov.w	r3, #0
 800adaa:	e9cd 2300 	strd	r2, r3, [sp]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4622      	mov	r2, r4
 800adb2:	f002 fc7d 	bl	800d6b0 <canardRxSubscribe>
 800adb6:	4603      	mov	r3, r0
            kind,
            port_id,
            extent,
            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
            subscription
        ) != 1) {
 800adb8:	2b01      	cmp	r3, #1
 800adba:	bf14      	ite	ne
 800adbc:	2301      	movne	r3, #1
 800adbe:	2300      	moveq	r3, #0
 800adc0:	b2db      	uxtb	r3, r3
    if (canardRxSubscribe(
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d005      	beq.n	800add2 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
        utilities.error_handler();
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	3310      	adds	r3, #16
 800adcc:	4618      	mov	r0, r3
 800adce:	f7f9 fd67 	bl	80048a0 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800add2:	bf00      	nop
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	bd90      	pop	{r4, r7, pc}
 800adda:	bf00      	nop
 800addc:	001e8480 	.word	0x001e8480

0800ade0 <_ZN15CyphalInterface4loopEv>:

void CyphalInterface::loop() {
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
    provider->can_loop();
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	3308      	adds	r3, #8
 800adec:	4618      	mov	r0, r3
 800adee:	f000 f80a 	bl	800ae06 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800adf2:	4603      	mov	r3, r0
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	3208      	adds	r2, #8
 800adf8:	6812      	ldr	r2, [r2, #0]
 800adfa:	4618      	mov	r0, r3
 800adfc:	4790      	blx	r2
}
 800adfe:	bf00      	nop
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b082      	sub	sp, #8
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
	return get();
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f805 	bl	800ae1e <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 800ae14:	4603      	mov	r3, r0
      }
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b082      	sub	sp, #8
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 f805 	bl	800ae38 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f000 f806 	bl	800ae54 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 f805 	bl	800ae6e <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ae64:	4603      	mov	r3, r0
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f805 	bl	800ae86 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b082      	sub	sp, #8
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 f805 	bl	800aea0 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 800ae96:	4603      	mov	r3, r0
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr

0800aeb6 <_Z16fdcan_dlc_to_lenm>:
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
};

size_t fdcan_dlc_to_len(uint32_t dlc) {
 800aeb6:	b480      	push	{r7}
 800aeb8:	b085      	sub	sp, #20
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
    auto dlc_index = (uint8_t)(dlc / 65536);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	0c1b      	lsrs	r3, r3, #16
 800aec2:	73fb      	strb	r3, [r7, #15]
    if (dlc_index <= 8) {
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
 800aec6:	2b08      	cmp	r3, #8
 800aec8:	d801      	bhi.n	800aece <_Z16fdcan_dlc_to_lenm+0x18>
        return dlc_index;
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
 800aecc:	e009      	b.n	800aee2 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    if (dlc_index <= 12) {
 800aece:	7bfb      	ldrb	r3, [r7, #15]
 800aed0:	2b0c      	cmp	r3, #12
 800aed2:	d803      	bhi.n	800aedc <_Z16fdcan_dlc_to_lenm+0x26>
        return 8 + 4 * (dlc_index - 8);
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
 800aed6:	3b06      	subs	r3, #6
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	e002      	b.n	800aee2 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    return 32 + 16 * (dlc_index - 13);
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
 800aede:	3b0b      	subs	r3, #11
 800aee0:	011b      	lsls	r3, r3, #4
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
	...

0800aef0 <_ZL12delay_cyclest>:
       bne     .L3               // 1 + 1-3 такта, в среднем 2(3?)
     *
     * Всего 5 тактов на цикл + 8 в начале.
     */

    uint8_t real_cycles = (cycles - 8) / 5;
 800aef0:	f1a0 0308 	sub.w	r3, r0, #8
 800aef4:	4a07      	ldr	r2, [pc, #28]	@ (800af14 <_ZL12delay_cyclest+0x24>)
 800aef6:	fb82 1203 	smull	r1, r2, r2, r3
 800aefa:	17db      	asrs	r3, r3, #31
 800aefc:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    while (real_cycles--) {
 800af00:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 800af04:	d004      	beq.n	800af10 <_ZL12delay_cyclest+0x20>
        __asm__("nop");
 800af06:	bf00      	nop
    while (real_cycles--) {
 800af08:	3b01      	subs	r3, #1
 800af0a:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 800af0e:	d1fa      	bne.n	800af06 <_ZL12delay_cyclest+0x16>
    }
}
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	66666667 	.word	0x66666667

0800af18 <_ZN5G4CAN10len_to_dlcEj>:
#if (defined(STM32G474xx) || defined(STM32_G)) && defined(HAL_FDCAN_MODULE_ENABLED)
#include <cstring>

#include <cyphal/providers/FDCAN_generic.h>

uint32_t G4CAN::len_to_dlc(size_t len) {
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
    return CanardFDCANLengthToDLC[len];
 800af22:	4a05      	ldr	r2, [pc, #20]	@ (800af38 <_ZN5G4CAN10len_to_dlcEj+0x20>)
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	08012c18 	.word	0x08012c18

0800af3c <_ZN5G4CAN10dlc_to_lenEm>:

size_t G4CAN::dlc_to_len(uint32_t dlc) {
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
    return fdcan_dlc_to_len(dlc);
 800af46:	6838      	ldr	r0, [r7, #0]
 800af48:	f7ff ffb5 	bl	800aeb6 <_Z16fdcan_dlc_to_lenm>
 800af4c:	4603      	mov	r3, r0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <_ZN5G4CAN8can_loopEv>:

void G4CAN::can_loop() {
 800af56:	b580      	push	{r7, lr}
 800af58:	b086      	sub	sp, #24
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800af5e:	e017      	b.n	800af90 <_ZN5G4CAN8can_loopEv+0x3a>
        CanardFrame frame;
        bool has_read = read_frame(&frame);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	330c      	adds	r3, #12
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f107 0208 	add.w	r2, r7, #8
 800af6c:	4611      	mov	r1, r2
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	4798      	blx	r3
 800af72:	4603      	mov	r3, r0
 800af74:	75fb      	strb	r3, [r7, #23]
        if (!has_read)
 800af76:	7dfb      	ldrb	r3, [r7, #23]
 800af78:	f083 0301 	eor.w	r3, r3, #1
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d115      	bne.n	800afae <_ZN5G4CAN8can_loopEv+0x58>
            break;
        process_canard_rx(&frame);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f107 0208 	add.w	r2, r7, #8
 800af88:	4611      	mov	r1, r2
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f904 	bl	800b198 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af94:	2140      	movs	r1, #64	@ 0x40
 800af96:	4618      	mov	r0, r3
 800af98:	f7fb fcd6 	bl	8006948 <HAL_FDCAN_GetRxFifoFillLevel>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bf14      	ite	ne
 800afa2:	2301      	movne	r3, #1
 800afa4:	2300      	moveq	r3, #0
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1d9      	bne.n	800af60 <_ZN5G4CAN8can_loopEv+0xa>
 800afac:	e000      	b.n	800afb0 <_ZN5G4CAN8can_loopEv+0x5a>
            break;
 800afae:	bf00      	nop
    }

    process_canard_tx();
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f000 f944 	bl	800b240 <_ZN19AbstractCANProvider17process_canard_txEv>
}
 800afb8:	bf00      	nop
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <_ZN5G4CAN10read_frameEP11CanardFrame>:

static uint8_t RxData[64] = {};
bool G4CAN::read_frame(CanardFrame* rxf) {
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08e      	sub	sp, #56	@ 0x38
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
    uint32_t rx_fifo = -1;
 800afca:	f04f 33ff 	mov.w	r3, #4294967295
 800afce:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0)) {
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd4:	2140      	movs	r1, #64	@ 0x40
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fb fcb6 	bl	8006948 <HAL_FDCAN_GetRxFifoFillLevel>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	bf14      	ite	ne
 800afe2:	2301      	movne	r3, #1
 800afe4:	2300      	moveq	r3, #0
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
        rx_fifo = FDCAN_RX_FIFO0;
 800afec:	2340      	movs	r3, #64	@ 0x40
 800afee:	637b      	str	r3, [r7, #52]	@ 0x34
 800aff0:	e00f      	b.n	800b012 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
    } else if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO1)) {
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff6:	2141      	movs	r1, #65	@ 0x41
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fb fca5 	bl	8006948 <HAL_FDCAN_GetRxFifoFillLevel>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	bf14      	ite	ne
 800b004:	2301      	movne	r3, #1
 800b006:	2300      	moveq	r3, #0
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
        rx_fifo = FDCAN_RX_FIFO1;
 800b00e:	2341      	movs	r3, #65	@ 0x41
 800b010:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if (rx_fifo == (uint32_t)-1) {
 800b012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b018:	d101      	bne.n	800b01e <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
        return false;
 800b01a:	2300      	movs	r3, #0
 800b01c:	e02e      	b.n	800b07c <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
    }

    FDCAN_RxHeaderTypeDef RxHeader = {};
 800b01e:	f107 030c 	add.w	r3, r7, #12
 800b022:	2228      	movs	r2, #40	@ 0x28
 800b024:	2100      	movs	r1, #0
 800b026:	4618      	mov	r0, r3
 800b028:	f003 fd6d 	bl	800eb06 <memset>
    if (HAL_FDCAN_GetRxMessage(handler, rx_fifo, &RxHeader, RxData) != HAL_OK) {
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800b030:	f107 020c 	add.w	r2, r7, #12
 800b034:	4b13      	ldr	r3, [pc, #76]	@ (800b084 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800b036:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b038:	f7fb fbac 	bl	8006794 <HAL_FDCAN_GetRxMessage>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	bf14      	ite	ne
 800b042:	2301      	movne	r3, #1
 800b044:	2300      	moveq	r3, #0
 800b046:	b2db      	uxtb	r3, r3
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d005      	beq.n	800b058 <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
        utilities.error_handler();
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b050:	3310      	adds	r3, #16
 800b052:	4618      	mov	r0, r3
 800b054:	f7f9 fc24 	bl	80048a0 <_ZNKSt8functionIFvvEEclEv>
    }

    rxf->extended_can_id = RxHeader.Identifier;
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	601a      	str	r2, [r3, #0]
    rxf->payload_size = dlc_to_len(RxHeader.DataLength);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3304      	adds	r3, #4
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	69ba      	ldr	r2, [r7, #24]
 800b068:	4611      	mov	r1, r2
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	4798      	blx	r3
 800b06e:	4602      	mov	r2, r0
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	605a      	str	r2, [r3, #4]
    rxf->payload = (void*)RxData;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	4a03      	ldr	r2, [pc, #12]	@ (800b084 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800b078:	609a      	str	r2, [r3, #8]
    return true;
 800b07a:	2301      	movs	r3, #1
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3738      	adds	r7, #56	@ 0x38
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	20000580 	.word	0x20000580

0800b088 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:

int G4CAN::write_frame(const CanardTxQueueItem* ti) {
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08c      	sub	sp, #48	@ 0x30
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = ti->frame.extended_can_id;
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 800b098:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b09c:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = CanardFDCANLengthToDLC[ti->frame.payload_size];
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a6:	4a2a      	ldr	r2, [pc, #168]	@ (800b150 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 800b0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0ac:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800b0b2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b0b6:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 800b0b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b0bc:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 800b0be:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b0c2:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.MessageMarker = 0x0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	62bb      	str	r3, [r7, #40]	@ 0x28

    // all mailboxes should be free -
    // https://forum.opencyphal.org/t/uavcan-v0-found-data-transfer-reversal/1476/6
    // "Reduce the number of enqueued frames to 1" - fix to inner priority inversion
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0cc:	e006      	b.n	800b0dc <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
        delay_cycles(ONE_FULL_FRAME_CYCLES);
 800b0ce:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 800b0d2:	f7ff ff0d 	bl	800aef0 <_ZL12delay_cyclest>
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800b0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d8:	3301      	adds	r3, #1
 800b0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7fb fc4f 	bl	8006984 <HAL_FDCAN_GetTxFifoFreeLevel>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b03      	cmp	r3, #3
 800b0ea:	d004      	beq.n	800b0f6 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800b0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	dc01      	bgt.n	800b0f6 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e000      	b.n	800b0f8 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1e8      	bne.n	800b0ce <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
    } // wait for message to transmit
    if (HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3) {
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b100:	4618      	mov	r0, r3
 800b102:	f7fb fc3f 	bl	8006984 <HAL_FDCAN_GetTxFifoFreeLevel>
 800b106:	4603      	mov	r3, r0
 800b108:	2b03      	cmp	r3, #3
 800b10a:	bf14      	ite	ne
 800b10c:	2301      	movne	r3, #1
 800b10e:	2300      	moveq	r3, #0
 800b110:	b2db      	uxtb	r3, r3
 800b112:	2b00      	cmp	r3, #0
 800b114:	d002      	beq.n	800b11c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
        return -1;
 800b116:	f04f 33ff 	mov.w	r3, #4294967295
 800b11a:	e014      	b.n	800b146 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }

    if (HAL_FDCAN_AddMessageToTxFifoQ(handler, &TxHeader, (uint8_t *)ti->frame.payload) != HAL_OK) {
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b124:	f107 0308 	add.w	r3, r7, #8
 800b128:	4619      	mov	r1, r3
 800b12a:	f7fb faef 	bl	800670c <HAL_FDCAN_AddMessageToTxFifoQ>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	bf14      	ite	ne
 800b134:	2301      	movne	r3, #1
 800b136:	2300      	moveq	r3, #0
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
        return -1;
 800b13e:	f04f 33ff 	mov.w	r3, #4294967295
 800b142:	e000      	b.n	800b146 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }
    return TxHeader.DataLength;
 800b144:	697b      	ldr	r3, [r7, #20]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3730      	adds	r7, #48	@ 0x30
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	08012c18 	.word	0x08012c18

0800b154 <_ZN5G4CAND1Ev>:
class G4CAN : public AbstractCANProvider {
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	4a05      	ldr	r2, [pc, #20]	@ (800b174 <_ZN5G4CAND1Ev+0x20>)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4618      	mov	r0, r3
 800b166:	f000 f8b1 	bl	800b2cc <_ZN19AbstractCANProviderD1Ev>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4618      	mov	r0, r3
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	08012d24 	.word	0x08012d24

0800b178 <_ZN5G4CAND0Ev>:
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7ff ffe7 	bl	800b154 <_ZN5G4CAND1Ev>
 800b186:	2144      	movs	r1, #68	@ 0x44
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f002 fbe8 	bl	800d95e <_ZdlPvj>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4618      	mov	r0, r3
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
CanardInstance canard{};

std::unique_ptr<AbstractAllocator> _alloc_ptr;


void AbstractCANProvider::process_canard_rx(CanardFrame* frame) {
 800b198:	b590      	push	{r4, r7, lr}
 800b19a:	b091      	sub	sp, #68	@ 0x44
 800b19c:	af04      	add	r7, sp, #16
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
    CanardRxTransfer transfer = {.payload = nullptr};
 800b1a2:	f107 0310 	add.w	r3, r7, #16
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	605a      	str	r2, [r3, #4]
 800b1ac:	609a      	str	r2, [r3, #8]
 800b1ae:	60da      	str	r2, [r3, #12]
 800b1b0:	611a      	str	r2, [r3, #16]
 800b1b2:	615a      	str	r2, [r3, #20]
    CanardRxSubscription* subscription = nullptr;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60fb      	str	r3, [r7, #12]

    const int8_t accept_result = canardRxAccept(
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f103 0420 	add.w	r4, r3, #32
        (CanardInstance* const)&canard,
        utilities.micros_64(),
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    const int8_t accept_result = canardRxAccept(
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7f9 fb82 	bl	80048cc <_ZNKSt8functionIFyvEEclEv>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	f107 010c 	add.w	r1, r7, #12
 800b1d0:	9103      	str	r1, [sp, #12]
 800b1d2:	f107 0110 	add.w	r1, r7, #16
 800b1d6:	9102      	str	r1, [sp, #8]
 800b1d8:	2100      	movs	r1, #0
 800b1da:	9101      	str	r1, [sp, #4]
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	9100      	str	r1, [sp, #0]
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f002 f9d5 	bl	800d590 <canardRxAccept>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        frame,
        0,
        &transfer,
        &subscription
    );
    if (accept_result == 1) {
 800b1ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d10e      	bne.n	800b212 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x7a>
        IListener<CanardRxTransfer*>* listener = reinterpret_cast<IListener<CanardRxTransfer*>*>(subscription->user_reference);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6a1b      	ldr	r3, [r3, #32]
 800b1f8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (listener != nullptr) {
 800b1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d010      	beq.n	800b222 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
            listener->accept(&transfer);
 800b200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f107 0210 	add.w	r2, r7, #16
 800b20a:	4611      	mov	r1, r2
 800b20c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b20e:	4798      	blx	r3
 800b210:	e007      	b.n	800b222 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
        }
    }
    else if (accept_result == 0 || accept_result > 1) {
 800b212:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00e      	beq.n	800b238 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 800b21a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b21e:	2b01      	cmp	r3, #1
 800b220:	dc0a      	bgt.n	800b238 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
        // The received frame is either invalid or it's a non-last frame of a multi-frame transfer.
        return;
    }

    if (transfer.payload != nullptr) {
 800b222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b224:	2b00      	cmp	r3, #0
 800b226:	d008      	beq.n	800b23a <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
        canard.memory_free(&canard, transfer.payload);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	3220      	adds	r2, #32
 800b230:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b232:	4610      	mov	r0, r2
 800b234:	4798      	blx	r3
 800b236:	e000      	b.n	800b23a <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
        return;
 800b238:	bf00      	nop
    }
}
 800b23a:	3734      	adds	r7, #52	@ 0x34
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd90      	pop	{r4, r7, pc}

0800b240 <_ZN19AbstractCANProvider17process_canard_txEv>:

void AbstractCANProvider::process_canard_tx() {
 800b240:	b5b0      	push	{r4, r5, r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
    // Look at top of the TX queue of individual CAN frames
    while (queue.size != 0) {
 800b248:	e036      	b.n	800b2b8 <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
        const CanardTxQueueItem* ti = canardTxPeek(&queue);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	330c      	adds	r3, #12
 800b24e:	4618      	mov	r0, r3
 800b250:	f002 f968 	bl	800d524 <canardTxPeek>
 800b254:	60f8      	str	r0, [r7, #12]

        if (0U == ti->tx_deadline_usec || ti->tx_deadline_usec > utilities.micros_64()) {
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	d00c      	beq.n	800b27a <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7f9 fb2e 	bl	80048cc <_ZNKSt8functionIFyvEEclEv>
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	42a2      	cmp	r2, r4
 800b276:	41ab      	sbcs	r3, r5
 800b278:	d201      	bcs.n	800b27e <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 800b27a:	2301      	movs	r3, #1
 800b27c:	e000      	b.n	800b280 <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 800b27e:	2300      	movs	r3, #0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00a      	beq.n	800b29a <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
            int written = write_frame(ti);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3310      	adds	r3, #16
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68f9      	ldr	r1, [r7, #12]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	4798      	blx	r3
 800b292:	60b8      	str	r0, [r7, #8]
            if (written < 0) {
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2b00      	cmp	r3, #0
 800b298:	db13      	blt.n	800b2c2 <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
                break;
            }
        }
        // After the frame is transmitted or if it has timed out while waiting,
        // pop it from the queue and deallocate:
        canard.memory_free(&canard, canardTxPop(&queue, ti));
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f103 0520 	add.w	r5, r3, #32
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	330c      	adds	r3, #12
 800b2a8:	68f9      	ldr	r1, [r7, #12]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f002 f94f 	bl	800d54e <canardTxPop>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	47a0      	blx	r4
    while (queue.size != 0) {
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1c4      	bne.n	800b24a <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
    }
}
 800b2c0:	e000      	b.n	800b2c4 <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
                break;
 800b2c2:	bf00      	nop
}
 800b2c4:	bf00      	nop
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bdb0      	pop	{r4, r5, r7, pc}

0800b2cc <_ZN19AbstractCANProviderD1Ev>:

AbstractCANProvider::~AbstractCANProvider() {
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	4a04      	ldr	r2, [pc, #16]	@ (800b2e8 <_ZN19AbstractCANProviderD1Ev+0x1c>)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	601a      	str	r2, [r3, #0]

}
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	08012d48 	.word	0x08012d48

0800b2ec <_Z41__static_initialization_and_destruction_0ii>:
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d107      	bne.n	800b30c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b302:	4293      	cmp	r3, r2
 800b304:	d102      	bne.n	800b30c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b306:	4803      	ldr	r0, [pc, #12]	@ (800b314 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800b308:	f000 f806 	bl	800b318 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 800b30c:	bf00      	nop
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	200005c0 	.word	0x200005c0

0800b318 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800b318:	b590      	push	{r4, r7, lr}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4618      	mov	r0, r3
 800b324:	f7f9 ff70 	bl	8005208 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800b328:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00c      	beq.n	800b34c <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7f9 fe2c 	bl	8004f90 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 800b338:	4604      	mov	r4, r0
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f7f9 fec3 	bl	80050c6 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 800b340:	4603      	mov	r3, r0
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4619      	mov	r1, r3
 800b346:	4620      	mov	r0, r4
 800b348:	f7f9 ff6b 	bl	8005222 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2200      	movs	r2, #0
 800b350:	601a      	str	r2, [r3, #0]
      }
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4618      	mov	r0, r3
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd90      	pop	{r4, r7, pc}

0800b35c <_GLOBAL__sub_I_queue>:
 800b35c:	b580      	push	{r7, lr}
 800b35e:	af00      	add	r7, sp, #0
 800b360:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b364:	2001      	movs	r0, #1
 800b366:	f7ff ffc1 	bl	800b2ec <_Z41__static_initialization_and_destruction_0ii>
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <_GLOBAL__sub_D_queue>:
 800b36c:	b580      	push	{r7, lr}
 800b36e:	af00      	add	r7, sp, #0
 800b370:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b374:	2000      	movs	r0, #0
 800b376:	f7ff ffb9 	bl	800b2ec <_Z41__static_initialization_and_destruction_0ii>
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 800b388:	2300      	movs	r3, #0
 800b38a:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800b390:	e007      	b.n	800b3a2 <cavlFindExtremum+0x26>
    {
        result = c;
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 800b396:	78fb      	ldrb	r3, [r7, #3]
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	4413      	add	r3, r2
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1f4      	bne.n	800b392 <cavlFindExtremum+0x16>
    }
    return result;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3714      	adds	r7, #20
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
	...

0800b3b8 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d014      	beq.n	800b3f4 <cavlPrivateRotate+0x3c>
 800b3ca:	78fb      	ldrb	r3, [r7, #3]
 800b3cc:	f083 0301 	eor.w	r3, r3, #1
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00a      	beq.n	800b3f4 <cavlPrivateRotate+0x3c>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e8:	db04      	blt.n	800b3f4 <cavlPrivateRotate+0x3c>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	dd05      	ble.n	800b400 <cavlPrivateRotate+0x48>
 800b3f4:	4b2a      	ldr	r3, [pc, #168]	@ (800b4a0 <cavlPrivateRotate+0xe8>)
 800b3f6:	4a2b      	ldr	r2, [pc, #172]	@ (800b4a4 <cavlPrivateRotate+0xec>)
 800b3f8:	2162      	movs	r1, #98	@ 0x62
 800b3fa:	482b      	ldr	r0, [pc, #172]	@ (800b4a8 <cavlPrivateRotate+0xf0>)
 800b3fc:	f002 fad8 	bl	800d9b0 <__assert_func>
    Cavl* const z = x->lr[!r];
 800b400:	78fb      	ldrb	r3, [r7, #3]
 800b402:	f083 0301 	eor.w	r3, r3, #1
 800b406:	b2db      	uxtb	r3, r3
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4413      	add	r3, r2
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00e      	beq.n	800b438 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	6879      	ldr	r1, [r7, #4]
 800b426:	4299      	cmp	r1, r3
 800b428:	bf0c      	ite	eq
 800b42a:	2301      	moveq	r3, #1
 800b42c:	2300      	movne	r3, #0
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4413      	add	r3, r2
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	601a      	str	r2, [r3, #0]
    x->up     = z;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 800b446:	78fb      	ldrb	r3, [r7, #3]
 800b448:	78fa      	ldrb	r2, [r7, #3]
 800b44a:	f082 0201 	eor.w	r2, r2, #1
 800b44e:	b2d2      	uxtb	r2, r2
 800b450:	4610      	mov	r0, r2
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4413      	add	r3, r2
 800b458:	685a      	ldr	r2, [r3, #4]
 800b45a:	6879      	ldr	r1, [r7, #4]
 800b45c:	0083      	lsls	r3, r0, #2
 800b45e:	440b      	add	r3, r1
 800b460:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 800b462:	78fb      	ldrb	r3, [r7, #3]
 800b464:	f083 0301 	eor.w	r3, r3, #1
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4413      	add	r3, r2
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d009      	beq.n	800b48a <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 800b476:	78fb      	ldrb	r3, [r7, #3]
 800b478:	f083 0301 	eor.w	r3, r3, #1
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 800b48a:	78fb      	ldrb	r3, [r7, #3]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	605a      	str	r2, [r3, #4]
}
 800b496:	bf00      	nop
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	080120f8 	.word	0x080120f8
 800b4a4:	080130d0 	.word	0x080130d0
 800b4a8:	08012140 	.word	0x08012140

0800b4ac <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00a      	beq.n	800b4d4 <cavlPrivateAdjustBalance+0x28>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c8:	db04      	blt.n	800b4d4 <cavlPrivateAdjustBalance+0x28>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	dd05      	ble.n	800b4e0 <cavlPrivateAdjustBalance+0x34>
 800b4d4:	4b61      	ldr	r3, [pc, #388]	@ (800b65c <cavlPrivateAdjustBalance+0x1b0>)
 800b4d6:	4a62      	ldr	r2, [pc, #392]	@ (800b660 <cavlPrivateAdjustBalance+0x1b4>)
 800b4d8:	2177      	movs	r1, #119	@ 0x77
 800b4da:	4862      	ldr	r0, [pc, #392]	@ (800b664 <cavlPrivateAdjustBalance+0x1b8>)
 800b4dc:	f002 fa68 	bl	800d9b0 <__assert_func>
    Cavl*        out    = x;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	78fa      	ldrb	r2, [r7, #3]
 800b4ee:	2a00      	cmp	r2, #0
 800b4f0:	d001      	beq.n	800b4f6 <cavlPrivateAdjustBalance+0x4a>
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	e000      	b.n	800b4f8 <cavlPrivateAdjustBalance+0x4c>
 800b4f6:	22ff      	movs	r2, #255	@ 0xff
 800b4f8:	4413      	add	r3, r2
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 800b4fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b506:	db04      	blt.n	800b512 <cavlPrivateAdjustBalance+0x66>
 800b508:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	f340 809c 	ble.w	800b64a <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 800b512:	7cfb      	ldrb	r3, [r7, #19]
 800b514:	09db      	lsrs	r3, r3, #7
 800b516:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 800b518:	7cbb      	ldrb	r3, [r7, #18]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d001      	beq.n	800b522 <cavlPrivateAdjustBalance+0x76>
 800b51e:	2301      	movs	r3, #1
 800b520:	e001      	b.n	800b526 <cavlPrivateAdjustBalance+0x7a>
 800b522:	f04f 33ff 	mov.w	r3, #4294967295
 800b526:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 800b528:	7cbb      	ldrb	r3, [r7, #18]
 800b52a:	f083 0301 	eor.w	r3, r3, #1
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	4413      	add	r3, r2
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d105      	bne.n	800b54c <cavlPrivateAdjustBalance+0xa0>
 800b540:	4b49      	ldr	r3, [pc, #292]	@ (800b668 <cavlPrivateAdjustBalance+0x1bc>)
 800b542:	4a47      	ldr	r2, [pc, #284]	@ (800b660 <cavlPrivateAdjustBalance+0x1b4>)
 800b544:	217f      	movs	r1, #127	@ 0x7f
 800b546:	4847      	ldr	r0, [pc, #284]	@ (800b664 <cavlPrivateAdjustBalance+0x1b8>)
 800b548:	f002 fa32 	bl	800d9b0 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b552:	461a      	mov	r2, r3
 800b554:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b558:	fb02 f303 	mul.w	r3, r2, r3
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	dc1c      	bgt.n	800b59a <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 800b564:	7cbb      	ldrb	r3, [r7, #18]
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7ff ff25 	bl	800b3b8 <cavlPrivateRotate>
            if (0 == z->bf)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d109      	bne.n	800b58c <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 800b578:	7c7b      	ldrb	r3, [r7, #17]
 800b57a:	425b      	negs	r3, r3
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	b25a      	sxtb	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	7c7a      	ldrb	r2, [r7, #17]
 800b588:	731a      	strb	r2, [r3, #12]
    {
 800b58a:	e061      	b.n	800b650 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	731a      	strb	r2, [r3, #12]
    {
 800b598:	e05a      	b.n	800b650 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 800b59a:	7cbb      	ldrb	r3, [r7, #18]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d105      	bne.n	800b5b8 <cavlPrivateAdjustBalance+0x10c>
 800b5ac:	4b2f      	ldr	r3, [pc, #188]	@ (800b66c <cavlPrivateAdjustBalance+0x1c0>)
 800b5ae:	4a2c      	ldr	r2, [pc, #176]	@ (800b660 <cavlPrivateAdjustBalance+0x1b4>)
 800b5b0:	2192      	movs	r1, #146	@ 0x92
 800b5b2:	482c      	ldr	r0, [pc, #176]	@ (800b664 <cavlPrivateAdjustBalance+0x1b8>)
 800b5b4:	f002 f9fc 	bl	800d9b0 <__assert_func>
            out = y;
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 800b5bc:	7cbb      	ldrb	r3, [r7, #18]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	bf14      	ite	ne
 800b5c2:	2301      	movne	r3, #1
 800b5c4:	2300      	moveq	r3, #0
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	f083 0301 	eor.w	r3, r3, #1
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	f003 0301 	and.w	r3, r3, #1
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f7ff feee 	bl	800b3b8 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 800b5dc:	7cbb      	ldrb	r3, [r7, #18]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7ff fee9 	bl	800b3b8 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b5f2:	fb02 f303 	mul.w	r3, r2, r3
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	da09      	bge.n	800b60e <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	7c7a      	ldrb	r2, [r7, #17]
 800b5fe:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	2200      	movs	r2, #0
 800b604:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	731a      	strb	r2, [r3, #12]
    {
 800b60c:	e020      	b.n	800b650 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b614:	461a      	mov	r2, r3
 800b616:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b61a:	fb02 f303 	mul.w	r3, r2, r3
 800b61e:	2b00      	cmp	r3, #0
 800b620:	dd0c      	ble.n	800b63c <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	2200      	movs	r2, #0
 800b62c:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 800b62e:	7c7b      	ldrb	r3, [r7, #17]
 800b630:	425b      	negs	r3, r3
 800b632:	b2db      	uxtb	r3, r3
 800b634:	b25a      	sxtb	r2, r3
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	731a      	strb	r2, [r3, #12]
    {
 800b63a:	e009      	b.n	800b650 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	731a      	strb	r2, [r3, #12]
    {
 800b648:	e002      	b.n	800b650 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	7cfa      	ldrb	r2, [r7, #19]
 800b64e:	731a      	strb	r2, [r3, #12]
    }
    return out;
 800b650:	697b      	ldr	r3, [r7, #20]
}
 800b652:	4618      	mov	r0, r3
 800b654:	3718      	adds	r7, #24
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	0801216c 	.word	0x0801216c
 800b660:	080130b4 	.word	0x080130b4
 800b664:	08012140 	.word	0x08012140
 800b668:	0801219c 	.word	0x0801219c
 800b66c:	080121a8 	.word	0x080121a8

0800b670 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d004      	beq.n	800b688 <cavlPrivateRetraceOnGrowth+0x18>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d005      	beq.n	800b694 <cavlPrivateRetraceOnGrowth+0x24>
 800b688:	4b23      	ldr	r3, [pc, #140]	@ (800b718 <cavlPrivateRetraceOnGrowth+0xa8>)
 800b68a:	4a24      	ldr	r2, [pc, #144]	@ (800b71c <cavlPrivateRetraceOnGrowth+0xac>)
 800b68c:	21b5      	movs	r1, #181	@ 0xb5
 800b68e:	4824      	ldr	r0, [pc, #144]	@ (800b720 <cavlPrivateRetraceOnGrowth+0xb0>)
 800b690:	f002 f98e 	bl	800d9b0 <__assert_func>
    Cavl* c = added;      // Child
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 800b69e:	e023      	b.n	800b6e8 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	697a      	ldr	r2, [r7, #20]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	bf0c      	ite	eq
 800b6aa:	2301      	moveq	r3, #1
 800b6ac:	2300      	movne	r3, #0
 800b6ae:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
 800b6b2:	693a      	ldr	r2, [r7, #16]
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	4413      	add	r3, r2
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d005      	beq.n	800b6cc <cavlPrivateRetraceOnGrowth+0x5c>
 800b6c0:	4b18      	ldr	r3, [pc, #96]	@ (800b724 <cavlPrivateRetraceOnGrowth+0xb4>)
 800b6c2:	4a16      	ldr	r2, [pc, #88]	@ (800b71c <cavlPrivateRetraceOnGrowth+0xac>)
 800b6c4:	21bb      	movs	r1, #187	@ 0xbb
 800b6c6:	4816      	ldr	r0, [pc, #88]	@ (800b720 <cavlPrivateRetraceOnGrowth+0xb0>)
 800b6c8:	f002 f972 	bl	800d9b0 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6938      	ldr	r0, [r7, #16]
 800b6d2:	f7ff feeb 	bl	800b4ac <cavlPrivateAdjustBalance>
 800b6d6:	6178      	str	r0, [r7, #20]
        p = c->up;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d003      	beq.n	800b6f0 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1d8      	bne.n	800b6a0 <cavlPrivateRetraceOnGrowth+0x30>
 800b6ee:	e000      	b.n	800b6f2 <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 800b6f0:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d105      	bne.n	800b704 <cavlPrivateRetraceOnGrowth+0x94>
 800b6f8:	4b0b      	ldr	r3, [pc, #44]	@ (800b728 <cavlPrivateRetraceOnGrowth+0xb8>)
 800b6fa:	4a08      	ldr	r2, [pc, #32]	@ (800b71c <cavlPrivateRetraceOnGrowth+0xac>)
 800b6fc:	21c3      	movs	r1, #195	@ 0xc3
 800b6fe:	4808      	ldr	r0, [pc, #32]	@ (800b720 <cavlPrivateRetraceOnGrowth+0xb0>)
 800b700:	f002 f956 	bl	800d9b0 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d101      	bne.n	800b70e <cavlPrivateRetraceOnGrowth+0x9e>
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	e000      	b.n	800b710 <cavlPrivateRetraceOnGrowth+0xa0>
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	080121b4 	.word	0x080121b4
 800b71c:	08013098 	.word	0x08013098
 800b720:	08012140 	.word	0x08012140
 800b724:	080121d8 	.word	0x080121d8
 800b728:	080121e8 	.word	0x080121e8

0800b72c <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b08a      	sub	sp, #40	@ 0x28
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 800b73a:	2300      	movs	r3, #0
 800b73c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d065      	beq.n	800b810 <cavlSearch+0xe4>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d062      	beq.n	800b810 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 800b754:	e02f      	b.n	800b7b6 <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4611      	mov	r1, r2
 800b75e:	68b8      	ldr	r0, [r7, #8]
 800b760:	4798      	blx	r3
 800b762:	4603      	mov	r3, r0
 800b764:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 800b766:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d103      	bne.n	800b776 <cavlSearch+0x4a>
            {
                out = *n;
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800b774:	e023      	b.n	800b7be <cavlSearch+0x92>
            }
            up = *n;
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b784:	2b00      	cmp	r3, #0
 800b786:	bfcc      	ite	gt
 800b788:	2301      	movgt	r3, #1
 800b78a:	2300      	movle	r3, #0
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	4413      	add	r3, r2
 800b792:	3304      	adds	r3, #4
 800b794:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00b      	beq.n	800b7b6 <cavlSearch+0x8a>
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	6a3a      	ldr	r2, [r7, #32]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d005      	beq.n	800b7b6 <cavlSearch+0x8a>
 800b7aa:	4b1c      	ldr	r3, [pc, #112]	@ (800b81c <cavlSearch+0xf0>)
 800b7ac:	4a1c      	ldr	r2, [pc, #112]	@ (800b820 <cavlSearch+0xf4>)
 800b7ae:	21db      	movs	r1, #219	@ 0xdb
 800b7b0:	481c      	ldr	r0, [pc, #112]	@ (800b824 <cavlSearch+0xf8>)
 800b7b2:	f002 f8fd 	bl	800d9b0 <__assert_func>
        while (*n != NULL)
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1cb      	bne.n	800b756 <cavlSearch+0x2a>
        }
        if (NULL == out)
 800b7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d125      	bne.n	800b810 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d004      	beq.n	800b7d4 <cavlSearch+0xa8>
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	68b8      	ldr	r0, [r7, #8]
 800b7ce:	4798      	blx	r3
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	e000      	b.n	800b7d6 <cavlSearch+0xaa>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d018      	beq.n	800b810 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7e2:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 800b7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	609a      	str	r2, [r3, #8]
                out->up        = up;
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f2:	6a3a      	ldr	r2, [r7, #32]
 800b7f4:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 800b7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 800b7fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b7fe:	f7ff ff37 	bl	800b670 <cavlPrivateRetraceOnGrowth>
 800b802:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d002      	beq.n	800b810 <cavlSearch+0xe4>
                {
                    *root = rt;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	697a      	ldr	r2, [r7, #20]
 800b80e:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 800b810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b812:	4618      	mov	r0, r3
 800b814:	3728      	adds	r7, #40	@ 0x28
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	080121f4 	.word	0x080121f4
 800b820:	0801308c 	.word	0x0801308c
 800b824:	08012140 	.word	0x08012140

0800b828 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	f000 8116 	beq.w	800ba66 <cavlRemove+0x23e>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f000 8112 	beq.w	800ba66 <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d105      	bne.n	800b856 <cavlRemove+0x2e>
 800b84a:	4b89      	ldr	r3, [pc, #548]	@ (800ba70 <cavlRemove+0x248>)
 800b84c:	4a89      	ldr	r2, [pc, #548]	@ (800ba74 <cavlRemove+0x24c>)
 800b84e:	21f6      	movs	r1, #246	@ 0xf6
 800b850:	4889      	ldr	r0, [pc, #548]	@ (800ba78 <cavlRemove+0x250>)
 800b852:	f002 f8ad 	bl	800d9b0 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10a      	bne.n	800b874 <cavlRemove+0x4c>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	429a      	cmp	r2, r3
 800b866:	d005      	beq.n	800b874 <cavlRemove+0x4c>
 800b868:	4b84      	ldr	r3, [pc, #528]	@ (800ba7c <cavlRemove+0x254>)
 800b86a:	4a82      	ldr	r2, [pc, #520]	@ (800ba74 <cavlRemove+0x24c>)
 800b86c:	21f7      	movs	r1, #247	@ 0xf7
 800b86e:	4882      	ldr	r0, [pc, #520]	@ (800ba78 <cavlRemove+0x250>)
 800b870:	f002 f89e 	bl	800d9b0 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 800b874:	2300      	movs	r3, #0
 800b876:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 800b878:	2300      	movs	r3, #0
 800b87a:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d073      	beq.n	800b96c <cavlRemove+0x144>
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d06f      	beq.n	800b96c <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	2100      	movs	r1, #0
 800b892:	4618      	mov	r0, r3
 800b894:	f7ff fd72 	bl	800b37c <cavlFindExtremum>
 800b898:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d007      	beq.n	800b8b0 <cavlRemove+0x88>
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d103      	bne.n	800b8b0 <cavlRemove+0x88>
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d105      	bne.n	800b8bc <cavlRemove+0x94>
 800b8b0:	4b73      	ldr	r3, [pc, #460]	@ (800ba80 <cavlRemove+0x258>)
 800b8b2:	4a70      	ldr	r2, [pc, #448]	@ (800ba74 <cavlRemove+0x24c>)
 800b8b4:	21ff      	movs	r1, #255	@ 0xff
 800b8b6:	4870      	ldr	r0, [pc, #448]	@ (800ba78 <cavlRemove+0x250>)
 800b8b8:	f002 f87a 	bl	800d9b0 <__assert_func>
            re->bf        = node->bf;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	685a      	ldr	r2, [r3, #4]
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d025      	beq.n	800b92c <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d006      	beq.n	800b8fe <cavlRemove+0xd6>
 800b8f0:	4b64      	ldr	r3, [pc, #400]	@ (800ba84 <cavlRemove+0x25c>)
 800b8f2:	4a60      	ldr	r2, [pc, #384]	@ (800ba74 <cavlRemove+0x24c>)
 800b8f4:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800b8f8:	485f      	ldr	r0, [pc, #380]	@ (800ba78 <cavlRemove+0x250>)
 800b8fa:	f002 f859 	bl	800d9b0 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	689a      	ldr	r2, [r3, #8]
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d003      	beq.n	800b916 <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	69fa      	ldr	r2, [r7, #28]
 800b914:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	689a      	ldr	r2, [r3, #8]
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	601a      	str	r2, [r3, #0]
                r             = false;
 800b926:	2300      	movs	r3, #0
 800b928:	76fb      	strb	r3, [r7, #27]
 800b92a:	e003      	b.n	800b934 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 800b930:	2301      	movs	r3, #1
 800b932:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00f      	beq.n	800b964 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	4299      	cmp	r1, r3
 800b952:	bf0c      	ite	eq
 800b954:	2301      	moveq	r3, #1
 800b956:	2300      	movne	r3, #0
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	4413      	add	r3, r2
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	605a      	str	r2, [r3, #4]
        {
 800b962:	e046      	b.n	800b9f2 <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	697a      	ldr	r2, [r7, #20]
 800b968:	601a      	str	r2, [r3, #0]
        {
 800b96a:	e042      	b.n	800b9f2 <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	2b00      	cmp	r3, #0
 800b978:	bf14      	ite	ne
 800b97a:	2301      	movne	r3, #1
 800b97c:	2300      	moveq	r3, #0
 800b97e:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 800b980:	7cfb      	ldrb	r3, [r7, #19]
 800b982:	683a      	ldr	r2, [r7, #0]
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4413      	add	r3, r2
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d006      	beq.n	800b99c <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 800b98e:	7cfb      	ldrb	r3, [r7, #19]
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	69fa      	ldr	r2, [r7, #28]
 800b99a:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d020      	beq.n	800b9e4 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	bf0c      	ite	eq
 800b9ac:	2301      	moveq	r3, #1
 800b9ae:	2300      	movne	r3, #0
 800b9b0:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 800b9b2:	7cfb      	ldrb	r3, [r7, #19]
 800b9b4:	7ef8      	ldrb	r0, [r7, #27]
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	4413      	add	r3, r2
 800b9bc:	685a      	ldr	r2, [r3, #4]
 800b9be:	69f9      	ldr	r1, [r7, #28]
 800b9c0:	0083      	lsls	r3, r0, #2
 800b9c2:	440b      	add	r3, r1
 800b9c4:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 800b9c6:	7efb      	ldrb	r3, [r7, #27]
 800b9c8:	69fa      	ldr	r2, [r7, #28]
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4413      	add	r3, r2
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00e      	beq.n	800b9f2 <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 800b9d4:	7efb      	ldrb	r3, [r7, #27]
 800b9d6:	69fa      	ldr	r2, [r7, #28]
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4413      	add	r3, r2
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	69fa      	ldr	r2, [r7, #28]
 800b9e0:	601a      	str	r2, [r3, #0]
 800b9e2:	e006      	b.n	800b9f2 <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 800b9e4:	7cfb      	ldrb	r3, [r7, #19]
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	685a      	ldr	r2, [r3, #4]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d036      	beq.n	800ba66 <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 800b9fc:	7efb      	ldrb	r3, [r7, #27]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	bf14      	ite	ne
 800ba02:	2301      	movne	r3, #1
 800ba04:	2300      	moveq	r3, #0
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	f083 0301 	eor.w	r3, r3, #1
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	f003 0301 	and.w	r3, r3, #1
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	4619      	mov	r1, r3
 800ba16:	69f8      	ldr	r0, [r7, #28]
 800ba18:	f7ff fd48 	bl	800b4ac <cavlPrivateAdjustBalance>
 800ba1c:	60f8      	str	r0, [r7, #12]
                p = c->up;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10b      	bne.n	800ba46 <cavlRemove+0x21e>
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d008      	beq.n	800ba46 <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	bf0c      	ite	eq
 800ba3e:	2301      	moveq	r3, #1
 800ba40:	2300      	movne	r3, #0
 800ba42:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 800ba44:	e7da      	b.n	800b9fc <cavlRemove+0x1d4>
            }
            if (NULL == p)
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d10c      	bne.n	800ba66 <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d106      	bne.n	800ba60 <cavlRemove+0x238>
 800ba52:	4b0d      	ldr	r3, [pc, #52]	@ (800ba88 <cavlRemove+0x260>)
 800ba54:	4a07      	ldr	r2, [pc, #28]	@ (800ba74 <cavlRemove+0x24c>)
 800ba56:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800ba5a:	4807      	ldr	r0, [pc, #28]	@ (800ba78 <cavlRemove+0x250>)
 800ba5c:	f001 ffa8 	bl	800d9b0 <__assert_func>
                *root = c;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 800ba66:	bf00      	nop
 800ba68:	3720      	adds	r7, #32
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	08012218 	.word	0x08012218
 800ba74:	08013114 	.word	0x08013114
 800ba78:	08012140 	.word	0x08012140
 800ba7c:	08012228 	.word	0x08012228
 800ba80:	08012250 	.word	0x08012250
 800ba84:	08012288 	.word	0x08012288
 800ba88:	080121e8 	.word	0x080121e8

0800ba8c <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 800ba94:	687b      	ldr	r3, [r7, #4]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	370c      	adds	r7, #12
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
	...

0800baa4 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	460a      	mov	r2, r1
 800baae:	80fb      	strh	r3, [r7, #6]
 800bab0:	4613      	mov	r3, r2
 800bab2:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800bab4:	88fb      	ldrh	r3, [r7, #6]
 800bab6:	021b      	lsls	r3, r3, #8
 800bab8:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 800baba:	88fb      	ldrh	r3, [r7, #6]
 800babc:	0a1b      	lsrs	r3, r3, #8
 800babe:	b299      	uxth	r1, r3
 800bac0:	797b      	ldrb	r3, [r7, #5]
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	404b      	eors	r3, r1
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	4905      	ldr	r1, [pc, #20]	@ (800bae0 <crcAddByte+0x3c>)
 800bacc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800bad0:	4053      	eors	r3, r2
 800bad2:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr
 800bae0:	08012d64 	.word	0x08012d64

0800bae4 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b088      	sub	sp, #32
 800bae8:	af00      	add	r7, sp, #0
 800baea:	4603      	mov	r3, r0
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d108      	bne.n	800bb0a <crcAdd+0x26>
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d005      	beq.n	800bb0a <crcAdd+0x26>
 800bafe:	4b12      	ldr	r3, [pc, #72]	@ (800bb48 <crcAdd+0x64>)
 800bb00:	4a12      	ldr	r2, [pc, #72]	@ (800bb4c <crcAdd+0x68>)
 800bb02:	2185      	movs	r1, #133	@ 0x85
 800bb04:	4812      	ldr	r0, [pc, #72]	@ (800bb50 <crcAdd+0x6c>)
 800bb06:	f001 ff53 	bl	800d9b0 <__assert_func>
    TransferCRC    out = crc;
 800bb0a:	89fb      	ldrh	r3, [r7, #14]
 800bb0c:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800bb12:	2300      	movs	r3, #0
 800bb14:	617b      	str	r3, [r7, #20]
 800bb16:	e00e      	b.n	800bb36 <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	781a      	ldrb	r2, [r3, #0]
 800bb1c:	8bfb      	ldrh	r3, [r7, #30]
 800bb1e:	4611      	mov	r1, r2
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7ff ffbf 	bl	800baa4 <crcAddByte>
 800bb26:	4603      	mov	r3, r0
 800bb28:	83fb      	strh	r3, [r7, #30]
        ++p;
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	3301      	adds	r3, #1
 800bb34:	617b      	str	r3, [r7, #20]
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d3ec      	bcc.n	800bb18 <crcAdd+0x34>
    }
    return out;
 800bb3e:	8bfb      	ldrh	r3, [r7, #30]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3720      	adds	r7, #32
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	08012298 	.word	0x08012298
 800bb4c:	08012fe0 	.word	0x08012fe0
 800bb50:	080122c0 	.word	0x080122c0

0800bb54 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	460a      	mov	r2, r1
 800bb5e:	80fb      	strh	r3, [r7, #6]
 800bb60:	4613      	mov	r3, r2
 800bb62:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800bb64:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	da05      	bge.n	800bb78 <txMakeMessageSessionSpecifier+0x24>
 800bb6c:	4b0e      	ldr	r3, [pc, #56]	@ (800bba8 <txMakeMessageSessionSpecifier+0x54>)
 800bb6e:	4a0f      	ldr	r2, [pc, #60]	@ (800bbac <txMakeMessageSessionSpecifier+0x58>)
 800bb70:	21ac      	movs	r1, #172	@ 0xac
 800bb72:	480f      	ldr	r0, [pc, #60]	@ (800bbb0 <txMakeMessageSessionSpecifier+0x5c>)
 800bb74:	f001 ff1c 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 800bb78:	88fb      	ldrh	r3, [r7, #6]
 800bb7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb7e:	d305      	bcc.n	800bb8c <txMakeMessageSessionSpecifier+0x38>
 800bb80:	4b0c      	ldr	r3, [pc, #48]	@ (800bbb4 <txMakeMessageSessionSpecifier+0x60>)
 800bb82:	4a0a      	ldr	r2, [pc, #40]	@ (800bbac <txMakeMessageSessionSpecifier+0x58>)
 800bb84:	21ad      	movs	r1, #173	@ 0xad
 800bb86:	480a      	ldr	r0, [pc, #40]	@ (800bbb0 <txMakeMessageSessionSpecifier+0x5c>)
 800bb88:	f001 ff12 	bl	800d9b0 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 800bb8c:	88fb      	ldrh	r3, [r7, #6]
 800bb8e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 800bb96:	797a      	ldrb	r2, [r7, #5]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	021b      	lsls	r3, r3, #8
 800bb9c:	4313      	orrs	r3, r2
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	080122f0 	.word	0x080122f0
 800bbac:	08012fe8 	.word	0x08012fe8
 800bbb0:	080122c0 	.word	0x080122c0
 800bbb4:	08012304 	.word	0x08012304

0800bbb8 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 800bbb8:	b590      	push	{r4, r7, lr}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	4608      	mov	r0, r1
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	4623      	mov	r3, r4
 800bbc8:	80fb      	strh	r3, [r7, #6]
 800bbca:	4603      	mov	r3, r0
 800bbcc:	717b      	strb	r3, [r7, #5]
 800bbce:	460b      	mov	r3, r1
 800bbd0:	713b      	strb	r3, [r7, #4]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800bbd6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	da05      	bge.n	800bbea <txMakeServiceSessionSpecifier+0x32>
 800bbde:	4b17      	ldr	r3, [pc, #92]	@ (800bc3c <txMakeServiceSessionSpecifier+0x84>)
 800bbe0:	4a17      	ldr	r2, [pc, #92]	@ (800bc40 <txMakeServiceSessionSpecifier+0x88>)
 800bbe2:	21b7      	movs	r1, #183	@ 0xb7
 800bbe4:	4817      	ldr	r0, [pc, #92]	@ (800bc44 <txMakeServiceSessionSpecifier+0x8c>)
 800bbe6:	f001 fee3 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 800bbea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	da05      	bge.n	800bbfe <txMakeServiceSessionSpecifier+0x46>
 800bbf2:	4b15      	ldr	r3, [pc, #84]	@ (800bc48 <txMakeServiceSessionSpecifier+0x90>)
 800bbf4:	4a12      	ldr	r2, [pc, #72]	@ (800bc40 <txMakeServiceSessionSpecifier+0x88>)
 800bbf6:	21b8      	movs	r1, #184	@ 0xb8
 800bbf8:	4812      	ldr	r0, [pc, #72]	@ (800bc44 <txMakeServiceSessionSpecifier+0x8c>)
 800bbfa:	f001 fed9 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 800bbfe:	88fb      	ldrh	r3, [r7, #6]
 800bc00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc04:	d305      	bcc.n	800bc12 <txMakeServiceSessionSpecifier+0x5a>
 800bc06:	4b11      	ldr	r3, [pc, #68]	@ (800bc4c <txMakeServiceSessionSpecifier+0x94>)
 800bc08:	4a0d      	ldr	r2, [pc, #52]	@ (800bc40 <txMakeServiceSessionSpecifier+0x88>)
 800bc0a:	21b9      	movs	r1, #185	@ 0xb9
 800bc0c:	480d      	ldr	r0, [pc, #52]	@ (800bc44 <txMakeServiceSessionSpecifier+0x8c>)
 800bc0e:	f001 fecf 	bl	800d9b0 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800bc12:	793a      	ldrb	r2, [r7, #4]
 800bc14:	78fb      	ldrb	r3, [r7, #3]
 800bc16:	01db      	lsls	r3, r3, #7
 800bc18:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800bc1a:	88fb      	ldrh	r3, [r7, #6]
 800bc1c:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800bc1e:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800bc20:	797a      	ldrb	r2, [r7, #5]
 800bc22:	2a00      	cmp	r2, #0
 800bc24:	d002      	beq.n	800bc2c <txMakeServiceSessionSpecifier+0x74>
 800bc26:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bc2a:	e000      	b.n	800bc2e <txMakeServiceSessionSpecifier+0x76>
 800bc2c:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800bc2e:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800bc30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd90      	pop	{r4, r7, pc}
 800bc3c:	080122f0 	.word	0x080122f0
 800bc40:	08013008 	.word	0x08013008
 800bc44:	080122c0 	.word	0x080122c0
 800bc48:	08012318 	.word	0x08012318
 800bc4c:	0801232c 	.word	0x0801232c

0800bc50 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 800bc58:	2340      	movs	r3, #64	@ 0x40
 800bc5a:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2b07      	cmp	r3, #7
 800bc64:	d802      	bhi.n	800bc6c <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 800bc66:	2308      	movs	r3, #8
 800bc68:	60fb      	str	r3, [r7, #12]
 800bc6a:	e014      	b.n	800bc96 <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d808      	bhi.n	800bc86 <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 800bc74:	4a0c      	ldr	r2, [pc, #48]	@ (800bca8 <adjustPresentationLayerMTU+0x58>)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4413      	add	r3, r2
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	4b0b      	ldr	r3, [pc, #44]	@ (800bcac <adjustPresentationLayerMTU+0x5c>)
 800bc80:	5c9b      	ldrb	r3, [r3, r2]
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	e007      	b.n	800bc96 <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 800bc86:	4a08      	ldr	r2, [pc, #32]	@ (800bca8 <adjustPresentationLayerMTU+0x58>)
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	461a      	mov	r2, r3
 800bc90:	4b06      	ldr	r3, [pc, #24]	@ (800bcac <adjustPresentationLayerMTU+0x5c>)
 800bc92:	5c9b      	ldrb	r3, [r3, r2]
 800bc94:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	3b01      	subs	r3, #1
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	08012f74 	.word	0x08012f74
 800bcac:	08012f64 	.word	0x08012f64

0800bcb0 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b08a      	sub	sp, #40	@ 0x28
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
 800bcbc:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d105      	bne.n	800bcd0 <txMakeCANID+0x20>
 800bcc4:	4b60      	ldr	r3, [pc, #384]	@ (800be48 <txMakeCANID+0x198>)
 800bcc6:	4a61      	ldr	r2, [pc, #388]	@ (800be4c <txMakeCANID+0x19c>)
 800bcc8:	21d9      	movs	r1, #217	@ 0xd9
 800bcca:	4861      	ldr	r0, [pc, #388]	@ (800be50 <txMakeCANID+0x1a0>)
 800bccc:	f001 fe70 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 800bcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d105      	bne.n	800bce2 <txMakeCANID+0x32>
 800bcd6:	4b5f      	ldr	r3, [pc, #380]	@ (800be54 <txMakeCANID+0x1a4>)
 800bcd8:	4a5c      	ldr	r2, [pc, #368]	@ (800be4c <txMakeCANID+0x19c>)
 800bcda:	21da      	movs	r1, #218	@ 0xda
 800bcdc:	485c      	ldr	r0, [pc, #368]	@ (800be50 <txMakeCANID+0x1a0>)
 800bcde:	f001 fe67 	bl	800d9b0 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800bce2:	f06f 0301 	mvn.w	r3, #1
 800bce6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	785b      	ldrb	r3, [r3, #1]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d157      	bne.n	800bda0 <txMakeCANID+0xf0>
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	791b      	ldrb	r3, [r3, #4]
 800bcf4:	2bff      	cmp	r3, #255	@ 0xff
 800bcf6:	d153      	bne.n	800bda0 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800bcfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd00:	d24e      	bcs.n	800bda0 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bd02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	db11      	blt.n	800bd2e <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	885b      	ldrh	r3, [r3, #2]
 800bd0e:	78fa      	ldrb	r2, [r7, #3]
 800bd10:	4611      	mov	r1, r2
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff ff1e 	bl	800bb54 <txMakeMessageSessionSpecifier>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 800bd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	da75      	bge.n	800be0e <txMakeCANID+0x15e>
 800bd22:	4b4d      	ldr	r3, [pc, #308]	@ (800be58 <txMakeCANID+0x1a8>)
 800bd24:	4a49      	ldr	r2, [pc, #292]	@ (800be4c <txMakeCANID+0x19c>)
 800bd26:	21e2      	movs	r1, #226	@ 0xe2
 800bd28:	4849      	ldr	r0, [pc, #292]	@ (800be50 <txMakeCANID+0x1a0>)
 800bd2a:	f001 fe41 	bl	800d9b0 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d830      	bhi.n	800bd98 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d108      	bne.n	800bd4e <txMakeCANID+0x9e>
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d005      	beq.n	800bd4e <txMakeCANID+0x9e>
 800bd42:	4b46      	ldr	r3, [pc, #280]	@ (800be5c <txMakeCANID+0x1ac>)
 800bd44:	4a41      	ldr	r2, [pc, #260]	@ (800be4c <txMakeCANID+0x19c>)
 800bd46:	21e6      	movs	r1, #230	@ 0xe6
 800bd48:	4841      	ldr	r0, [pc, #260]	@ (800be50 <txMakeCANID+0x1a0>)
 800bd4a:	f001 fe31 	bl	800d9b0 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	68b9      	ldr	r1, [r7, #8]
 800bd52:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800bd56:	f7ff fec5 	bl	800bae4 <crcAdd>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	885b      	ldrh	r3, [r3, #2]
 800bd6a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800bd6e:	4611      	mov	r1, r2
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff feef 	bl	800bb54 <txMakeMessageSessionSpecifier>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bd7c:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 800bd7e:	69fb      	ldr	r3, [r7, #28]
 800bd80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd84:	d305      	bcc.n	800bd92 <txMakeCANID+0xe2>
 800bd86:	4b36      	ldr	r3, [pc, #216]	@ (800be60 <txMakeCANID+0x1b0>)
 800bd88:	4a30      	ldr	r2, [pc, #192]	@ (800be4c <txMakeCANID+0x19c>)
 800bd8a:	21e9      	movs	r1, #233	@ 0xe9
 800bd8c:	4830      	ldr	r0, [pc, #192]	@ (800be50 <txMakeCANID+0x1a0>)
 800bd8e:	f001 fe0f 	bl	800d9b0 <__assert_func>
            out = (int32_t) spec;
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bd96:	e03a      	b.n	800be0e <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 800bd98:	f06f 0301 	mvn.w	r3, #1
 800bd9c:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bd9e:	e036      	b.n	800be0e <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	785b      	ldrb	r3, [r3, #1]
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d003      	beq.n	800bdb0 <txMakeCANID+0x100>
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	785b      	ldrb	r3, [r3, #1]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d12a      	bne.n	800be06 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	791b      	ldrb	r3, [r3, #4]
 800bdb4:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	db25      	blt.n	800be06 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	885b      	ldrh	r3, [r3, #2]
 800bdbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdc2:	d220      	bcs.n	800be06 <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bdc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	db18      	blt.n	800bdfe <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	bf0c      	ite	eq
 800bdd8:	2301      	moveq	r3, #1
 800bdda:	2300      	movne	r3, #0
 800bddc:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800bde2:	78fa      	ldrb	r2, [r7, #3]
 800bde4:	f7ff fee8 	bl	800bbb8 <txMakeServiceSessionSpecifier>
 800bde8:	4603      	mov	r3, r0
 800bdea:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 800bdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	da0f      	bge.n	800be12 <txMakeCANID+0x162>
 800bdf2:	4b19      	ldr	r3, [pc, #100]	@ (800be58 <txMakeCANID+0x1a8>)
 800bdf4:	4a15      	ldr	r2, [pc, #84]	@ (800be4c <txMakeCANID+0x19c>)
 800bdf6:	21fa      	movs	r1, #250	@ 0xfa
 800bdf8:	4815      	ldr	r0, [pc, #84]	@ (800be50 <txMakeCANID+0x1a0>)
 800bdfa:	f001 fdd9 	bl	800d9b0 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 800bdfe:	f06f 0301 	mvn.w	r3, #1
 800be02:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800be04:	e005      	b.n	800be12 <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 800be06:	f06f 0301 	mvn.w	r3, #1
 800be0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800be0c:	e002      	b.n	800be14 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800be0e:	bf00      	nop
 800be10:	e000      	b.n	800be14 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800be12:	bf00      	nop
    }

    if (out >= 0)
 800be14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be16:	2b00      	cmp	r3, #0
 800be18:	db10      	blt.n	800be3c <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	2b07      	cmp	r3, #7
 800be24:	d807      	bhi.n	800be36 <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	069a      	lsls	r2, r3, #26
 800be2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be2c:	4313      	orrs	r3, r2
 800be2e:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	627b      	str	r3, [r7, #36]	@ 0x24
 800be34:	e002      	b.n	800be3c <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 800be36:	f06f 0301 	mvn.w	r3, #1
 800be3a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 800be3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3728      	adds	r7, #40	@ 0x28
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	08012340 	.word	0x08012340
 800be4c:	08012fd4 	.word	0x08012fd4
 800be50:	080122c0 	.word	0x080122c0
 800be54:	08012354 	.word	0x08012354
 800be58:	08012370 	.word	0x08012370
 800be5c:	0801237c 	.word	0x0801237c
 800be60:	080123b0 	.word	0x080123b0

0800be64 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 800be64:	b590      	push	{r4, r7, lr}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	4604      	mov	r4, r0
 800be6c:	4608      	mov	r0, r1
 800be6e:	4611      	mov	r1, r2
 800be70:	461a      	mov	r2, r3
 800be72:	4623      	mov	r3, r4
 800be74:	71fb      	strb	r3, [r7, #7]
 800be76:	4603      	mov	r3, r0
 800be78:	71bb      	strb	r3, [r7, #6]
 800be7a:	460b      	mov	r3, r1
 800be7c:	717b      	strb	r3, [r7, #5]
 800be7e:	4613      	mov	r3, r2
 800be80:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 800be82:	79fb      	ldrb	r3, [r7, #7]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d009      	beq.n	800be9c <txMakeTailByte+0x38>
 800be88:	797b      	ldrb	r3, [r7, #5]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d006      	beq.n	800be9c <txMakeTailByte+0x38>
 800be8e:	4b13      	ldr	r3, [pc, #76]	@ (800bedc <txMakeTailByte+0x78>)
 800be90:	4a13      	ldr	r2, [pc, #76]	@ (800bee0 <txMakeTailByte+0x7c>)
 800be92:	f240 111b 	movw	r1, #283	@ 0x11b
 800be96:	4813      	ldr	r0, [pc, #76]	@ (800bee4 <txMakeTailByte+0x80>)
 800be98:	f001 fd8a 	bl	800d9b0 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800be9c:	79fb      	ldrb	r3, [r7, #7]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d001      	beq.n	800bea6 <txMakeTailByte+0x42>
 800bea2:	2280      	movs	r2, #128	@ 0x80
 800bea4:	e000      	b.n	800bea8 <txMakeTailByte+0x44>
 800bea6:	2200      	movs	r2, #0
 800bea8:	79bb      	ldrb	r3, [r7, #6]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <txMakeTailByte+0x4e>
 800beae:	2340      	movs	r3, #64	@ 0x40
 800beb0:	e000      	b.n	800beb4 <txMakeTailByte+0x50>
 800beb2:	2300      	movs	r3, #0
 800beb4:	4313      	orrs	r3, r2
 800beb6:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 800beb8:	797a      	ldrb	r2, [r7, #5]
 800beba:	2a00      	cmp	r2, #0
 800bebc:	d001      	beq.n	800bec2 <txMakeTailByte+0x5e>
 800bebe:	2220      	movs	r2, #32
 800bec0:	e000      	b.n	800bec4 <txMakeTailByte+0x60>
 800bec2:	2200      	movs	r2, #0
 800bec4:	4313      	orrs	r3, r2
 800bec6:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 800bec8:	793b      	ldrb	r3, [r7, #4]
 800beca:	f003 031f 	and.w	r3, r3, #31
 800bece:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800bed0:	4313      	orrs	r3, r2
 800bed2:	b2db      	uxtb	r3, r3
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd90      	pop	{r4, r7, pc}
 800bedc:	080123cc 	.word	0x080123cc
 800bee0:	0801307c 	.word	0x0801307c
 800bee4:	080122c0 	.word	0x080122c0

0800bee8 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b40      	cmp	r3, #64	@ 0x40
 800bef4:	d906      	bls.n	800bf04 <txRoundFramePayloadSizeUp+0x1c>
 800bef6:	4b0f      	ldr	r3, [pc, #60]	@ (800bf34 <txRoundFramePayloadSizeUp+0x4c>)
 800bef8:	4a0f      	ldr	r2, [pc, #60]	@ (800bf38 <txRoundFramePayloadSizeUp+0x50>)
 800befa:	f44f 7192 	mov.w	r1, #292	@ 0x124
 800befe:	480f      	ldr	r0, [pc, #60]	@ (800bf3c <txRoundFramePayloadSizeUp+0x54>)
 800bf00:	f001 fd56 	bl	800d9b0 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 800bf04:	4a0e      	ldr	r2, [pc, #56]	@ (800bf40 <txRoundFramePayloadSizeUp+0x58>)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4413      	add	r3, r2
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2b0f      	cmp	r3, #15
 800bf12:	d906      	bls.n	800bf22 <txRoundFramePayloadSizeUp+0x3a>
 800bf14:	4b0b      	ldr	r3, [pc, #44]	@ (800bf44 <txRoundFramePayloadSizeUp+0x5c>)
 800bf16:	4a08      	ldr	r2, [pc, #32]	@ (800bf38 <txRoundFramePayloadSizeUp+0x50>)
 800bf18:	f240 1127 	movw	r1, #295	@ 0x127
 800bf1c:	4807      	ldr	r0, [pc, #28]	@ (800bf3c <txRoundFramePayloadSizeUp+0x54>)
 800bf1e:	f001 fd47 	bl	800d9b0 <__assert_func>
    return CanardCANDLCToLength[y];
 800bf22:	4a09      	ldr	r2, [pc, #36]	@ (800bf48 <txRoundFramePayloadSizeUp+0x60>)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	4413      	add	r3, r2
 800bf28:	781b      	ldrb	r3, [r3, #0]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	080123f4 	.word	0x080123f4
 800bf38:	0801304c 	.word	0x0801304c
 800bf3c:	080122c0 	.word	0x080122c0
 800bf40:	08012f74 	.word	0x08012f74
 800bf44:	0801243c 	.word	0x0801243c
 800bf48:	08012f64 	.word	0x08012f64

0800bf4c <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b086      	sub	sp, #24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d106      	bne.n	800bf6e <txAllocateQueueItem+0x22>
 800bf60:	4b1f      	ldr	r3, [pc, #124]	@ (800bfe0 <txAllocateQueueItem+0x94>)
 800bf62:	4a20      	ldr	r2, [pc, #128]	@ (800bfe4 <txAllocateQueueItem+0x98>)
 800bf64:	f240 1131 	movw	r1, #305	@ 0x131
 800bf68:	481f      	ldr	r0, [pc, #124]	@ (800bfe8 <txAllocateQueueItem+0x9c>)
 800bf6a:	f001 fd21 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 800bf6e:	6a3b      	ldr	r3, [r7, #32]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d106      	bne.n	800bf82 <txAllocateQueueItem+0x36>
 800bf74:	4b1d      	ldr	r3, [pc, #116]	@ (800bfec <txAllocateQueueItem+0xa0>)
 800bf76:	4a1b      	ldr	r2, [pc, #108]	@ (800bfe4 <txAllocateQueueItem+0x98>)
 800bf78:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800bf7c:	481a      	ldr	r0, [pc, #104]	@ (800bfe8 <txAllocateQueueItem+0x9c>)
 800bf7e:	f001 fd17 	bl	800d9b0 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	6a3a      	ldr	r2, [r7, #32]
 800bf88:	3230      	adds	r2, #48	@ 0x30
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	4798      	blx	r3
 800bf90:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d01e      	beq.n	800bfd6 <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	2200      	movs	r2, #0
 800bfae:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 800bfb6:	6979      	ldr	r1, [r7, #20]
 800bfb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfbc:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	6a3a      	ldr	r2, [r7, #32]
 800bfc4:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	621a      	str	r2, [r3, #32]
    }
    return out;
 800bfd6:	697b      	ldr	r3, [r7, #20]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	08012484 	.word	0x08012484
 800bfe4:	08013068 	.word	0x08013068
 800bfe8:	080122c0 	.word	0x080122c0
 800bfec:	08012498 	.word	0x08012498

0800bff0 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <txAVLPredicate+0x1e>
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d106      	bne.n	800c01c <txAVLPredicate+0x2c>
 800c00e:	4b0a      	ldr	r3, [pc, #40]	@ (800c038 <txAVLPredicate+0x48>)
 800c010:	4a0a      	ldr	r2, [pc, #40]	@ (800c03c <txAVLPredicate+0x4c>)
 800c012:	f240 114d 	movw	r1, #333	@ 0x14d
 800c016:	480a      	ldr	r0, [pc, #40]	@ (800c040 <txAVLPredicate+0x50>)
 800c018:	f001 fcca 	bl	800d9b0 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6a1a      	ldr	r2, [r3, #32]
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	6a1b      	ldr	r3, [r3, #32]
 800c024:	429a      	cmp	r2, r3
 800c026:	d301      	bcc.n	800c02c <txAVLPredicate+0x3c>
 800c028:	2301      	movs	r3, #1
 800c02a:	e001      	b.n	800c030 <txAVLPredicate+0x40>
 800c02c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	080124ac 	.word	0x080124ac
 800c03c:	0801303c 	.word	0x0801303c
 800c040:	080122c0 	.word	0x080122c0

0800c044 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 800c044:	b590      	push	{r4, r7, lr}
 800c046:	b08d      	sub	sp, #52	@ 0x34
 800c048:	af02      	add	r7, sp, #8
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d106      	bne.n	800c066 <txPushSingleFrame+0x22>
 800c058:	4b5c      	ldr	r3, [pc, #368]	@ (800c1cc <txPushSingleFrame+0x188>)
 800c05a:	4a5d      	ldr	r2, [pc, #372]	@ (800c1d0 <txPushSingleFrame+0x18c>)
 800c05c:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 800c060:	485c      	ldr	r0, [pc, #368]	@ (800c1d4 <txPushSingleFrame+0x190>)
 800c062:	f001 fca5 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 800c066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d109      	bne.n	800c080 <txPushSingleFrame+0x3c>
 800c06c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d006      	beq.n	800c080 <txPushSingleFrame+0x3c>
 800c072:	4b59      	ldr	r3, [pc, #356]	@ (800c1d8 <txPushSingleFrame+0x194>)
 800c074:	4a56      	ldr	r2, [pc, #344]	@ (800c1d0 <txPushSingleFrame+0x18c>)
 800c076:	f240 115b 	movw	r1, #347	@ 0x15b
 800c07a:	4856      	ldr	r0, [pc, #344]	@ (800c1d4 <txPushSingleFrame+0x190>)
 800c07c:	f001 fc98 	bl	800d9b0 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 800c080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c082:	3301      	adds	r3, #1
 800c084:	4618      	mov	r0, r3
 800c086:	f7ff ff2f 	bl	800bee8 <txRoundFramePayloadSizeUp>
 800c08a:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 800c08c:	6a3a      	ldr	r2, [r7, #32]
 800c08e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c090:	429a      	cmp	r2, r3
 800c092:	d806      	bhi.n	800c0a2 <txPushSingleFrame+0x5e>
 800c094:	4b51      	ldr	r3, [pc, #324]	@ (800c1dc <txPushSingleFrame+0x198>)
 800c096:	4a4e      	ldr	r2, [pc, #312]	@ (800c1d0 <txPushSingleFrame+0x18c>)
 800c098:	f240 115d 	movw	r1, #349	@ 0x15d
 800c09c:	484d      	ldr	r0, [pc, #308]	@ (800c1d4 <txPushSingleFrame+0x190>)
 800c09e:	f001 fc87 	bl	800d9b0 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 800c0a2:	6a3a      	ldr	r2, [r7, #32]
 800c0a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0a6:	1ad3      	subs	r3, r2, r3
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 800c0ac:	69fa      	ldr	r2, [r7, #28]
 800c0ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0b0:	4413      	add	r3, r2
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	6a3a      	ldr	r2, [r7, #32]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d006      	beq.n	800c0c8 <txPushSingleFrame+0x84>
 800c0ba:	4b49      	ldr	r3, [pc, #292]	@ (800c1e0 <txPushSingleFrame+0x19c>)
 800c0bc:	4a44      	ldr	r2, [pc, #272]	@ (800c1d0 <txPushSingleFrame+0x18c>)
 800c0be:	f240 115f 	movw	r1, #351	@ 0x15f
 800c0c2:	4844      	ldr	r0, [pc, #272]	@ (800c1d4 <txPushSingleFrame+0x190>)
 800c0c4:	f001 fc74 	bl	800d9b0 <__assert_func>
    int32_t       out = 0;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	689a      	ldr	r2, [r3, #8]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d209      	bcs.n	800c0ec <txPushSingleFrame+0xa8>
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c0e2:	68b8      	ldr	r0, [r7, #8]
 800c0e4:	f7ff ff32 	bl	800bf4c <txAllocateQueueItem>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	e000      	b.n	800c0ee <txPushSingleFrame+0xaa>
 800c0ec:	2300      	movs	r3, #0
    TxItem* const tqi =
 800c0ee:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d054      	beq.n	800c1a0 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 800c0f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d010      	beq.n	800c11e <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 800c0fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <txPushSingleFrame+0xcc>
 800c102:	4b38      	ldr	r3, [pc, #224]	@ (800c1e4 <txPushSingleFrame+0x1a0>)
 800c104:	4a32      	ldr	r2, [pc, #200]	@ (800c1d0 <txPushSingleFrame+0x18c>)
 800c106:	f240 1167 	movw	r1, #359	@ 0x167
 800c10a:	4832      	ldr	r0, [pc, #200]	@ (800c1d4 <txPushSingleFrame+0x190>)
 800c10c:	f001 fc50 	bl	800d9b0 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	3330      	adds	r3, #48	@ 0x30
 800c114:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c116:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c118:	4618      	mov	r0, r3
 800c11a:	f002 fdda 	bl	800ecd2 <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800c11e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c120:	3330      	adds	r3, #48	@ 0x30
 800c122:	69ba      	ldr	r2, [r7, #24]
 800c124:	4413      	add	r3, r2
 800c126:	69fa      	ldr	r2, [r7, #28]
 800c128:	2100      	movs	r1, #0
 800c12a:	4618      	mov	r0, r3
 800c12c:	f002 fceb 	bl	800eb06 <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	1e5c      	subs	r4, r3, #1
 800c134:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800c138:	2201      	movs	r2, #1
 800c13a:	2101      	movs	r1, #1
 800c13c:	2001      	movs	r0, #1
 800c13e:	f7ff fe91 	bl	800be64 <txMakeTailByte>
 800c142:	4603      	mov	r3, r0
 800c144:	461a      	mov	r2, r3
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	4423      	add	r3, r4
 800c14a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f103 000c 	add.w	r0, r3, #12
 800c154:	69b9      	ldr	r1, [r7, #24]
 800c156:	4b24      	ldr	r3, [pc, #144]	@ (800c1e8 <txPushSingleFrame+0x1a4>)
 800c158:	4a24      	ldr	r2, [pc, #144]	@ (800c1ec <txPushSingleFrame+0x1a8>)
 800c15a:	f7ff fae7 	bl	800b72c <cavlSearch>
 800c15e:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	697a      	ldr	r2, [r7, #20]
 800c164:	429a      	cmp	r2, r3
 800c166:	d006      	beq.n	800c176 <txPushSingleFrame+0x132>
 800c168:	4b21      	ldr	r3, [pc, #132]	@ (800c1f0 <txPushSingleFrame+0x1ac>)
 800c16a:	4a19      	ldr	r2, [pc, #100]	@ (800c1d0 <txPushSingleFrame+0x18c>)
 800c16c:	f240 1173 	movw	r1, #371	@ 0x173
 800c170:	4818      	ldr	r0, [pc, #96]	@ (800c1d4 <txPushSingleFrame+0x190>)
 800c172:	f001 fc1d 	bl	800d9b0 <__assert_func>
        que->size++;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	1c5a      	adds	r2, r3, #1
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	689a      	ldr	r2, [r3, #8]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d906      	bls.n	800c19a <txPushSingleFrame+0x156>
 800c18c:	4b19      	ldr	r3, [pc, #100]	@ (800c1f4 <txPushSingleFrame+0x1b0>)
 800c18e:	4a10      	ldr	r2, [pc, #64]	@ (800c1d0 <txPushSingleFrame+0x18c>)
 800c190:	f240 1175 	movw	r1, #373	@ 0x175
 800c194:	480f      	ldr	r0, [pc, #60]	@ (800c1d4 <txPushSingleFrame+0x190>)
 800c196:	f001 fc0b 	bl	800d9b0 <__assert_func>
        out = 1;  // One frame enqueued.
 800c19a:	2301      	movs	r3, #1
 800c19c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c19e:	e002      	b.n	800c1a6 <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800c1a0:	f06f 0302 	mvn.w	r3, #2
 800c1a4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	db09      	blt.n	800c1c0 <txPushSingleFrame+0x17c>
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d006      	beq.n	800c1c0 <txPushSingleFrame+0x17c>
 800c1b2:	4b11      	ldr	r3, [pc, #68]	@ (800c1f8 <txPushSingleFrame+0x1b4>)
 800c1b4:	4a06      	ldr	r2, [pc, #24]	@ (800c1d0 <txPushSingleFrame+0x18c>)
 800c1b6:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800c1ba:	4806      	ldr	r0, [pc, #24]	@ (800c1d4 <txPushSingleFrame+0x190>)
 800c1bc:	f001 fbf8 	bl	800d9b0 <__assert_func>
    return out;
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	372c      	adds	r7, #44	@ 0x2c
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd90      	pop	{r4, r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	08012484 	.word	0x08012484
 800c1d0:	08013028 	.word	0x08013028
 800c1d4:	080122c0 	.word	0x080122c0
 800c1d8:	080124e0 	.word	0x080124e0
 800c1dc:	08012510 	.word	0x08012510
 800c1e0:	08012534 	.word	0x08012534
 800c1e4:	08012570 	.word	0x08012570
 800c1e8:	0800ba8d 	.word	0x0800ba8d
 800c1ec:	0800bff1 	.word	0x0800bff1
 800c1f0:	08012588 	.word	0x08012588
 800c1f4:	080125a0 	.word	0x080125a0
 800c1f8:	080125bc 	.word	0x080125bc

0800c1fc <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 800c1fc:	b590      	push	{r4, r7, lr}
 800c1fe:	b093      	sub	sp, #76	@ 0x4c
 800c200:	af02      	add	r7, sp, #8
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d106      	bne.n	800c21c <txGenerateMultiFrameChain+0x20>
 800c20e:	4b93      	ldr	r3, [pc, #588]	@ (800c45c <txGenerateMultiFrameChain+0x260>)
 800c210:	4a93      	ldr	r2, [pc, #588]	@ (800c460 <txGenerateMultiFrameChain+0x264>)
 800c212:	f240 1189 	movw	r1, #393	@ 0x189
 800c216:	4893      	ldr	r0, [pc, #588]	@ (800c464 <txGenerateMultiFrameChain+0x268>)
 800c218:	f001 fbca 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d106      	bne.n	800c230 <txGenerateMultiFrameChain+0x34>
 800c222:	4b91      	ldr	r3, [pc, #580]	@ (800c468 <txGenerateMultiFrameChain+0x26c>)
 800c224:	4a8e      	ldr	r2, [pc, #568]	@ (800c460 <txGenerateMultiFrameChain+0x264>)
 800c226:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 800c22a:	488e      	ldr	r0, [pc, #568]	@ (800c464 <txGenerateMultiFrameChain+0x268>)
 800c22c:	f001 fbc0 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800c230:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	429a      	cmp	r2, r3
 800c236:	d806      	bhi.n	800c246 <txGenerateMultiFrameChain+0x4a>
 800c238:	4b8c      	ldr	r3, [pc, #560]	@ (800c46c <txGenerateMultiFrameChain+0x270>)
 800c23a:	4a89      	ldr	r2, [pc, #548]	@ (800c460 <txGenerateMultiFrameChain+0x264>)
 800c23c:	f240 118b 	movw	r1, #395	@ 0x18b
 800c240:	4888      	ldr	r0, [pc, #544]	@ (800c464 <txGenerateMultiFrameChain+0x268>)
 800c242:	f001 fbb5 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 800c246:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d106      	bne.n	800c25a <txGenerateMultiFrameChain+0x5e>
 800c24c:	4b88      	ldr	r3, [pc, #544]	@ (800c470 <txGenerateMultiFrameChain+0x274>)
 800c24e:	4a84      	ldr	r2, [pc, #528]	@ (800c460 <txGenerateMultiFrameChain+0x264>)
 800c250:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800c254:	4883      	ldr	r0, [pc, #524]	@ (800c464 <txGenerateMultiFrameChain+0x268>)
 800c256:	f001 fbab 	bl	800d9b0 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 800c25a:	2300      	movs	r3, #0
 800c25c:	613b      	str	r3, [r7, #16]
 800c25e:	2300      	movs	r3, #0
 800c260:	617b      	str	r3, [r7, #20]
 800c262:	2300      	movs	r3, #0
 800c264:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800c266:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c268:	3302      	adds	r3, #2
 800c26a:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 800c26c:	2300      	movs	r3, #0
 800c26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 800c270:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c272:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c274:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800c278:	f7ff fc34 	bl	800bae4 <crcAdd>
 800c27c:	4603      	mov	r3, r0
 800c27e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 800c280:	2301      	movs	r3, #1
 800c282:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 800c286:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c288:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 800c28a:	e0d4      	b.n	800c436 <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	3301      	adds	r3, #1
 800c290:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 800c292:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c296:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d908      	bls.n	800c2b0 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 800c29e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7ff fe1e 	bl	800bee8 <txRoundFramePayloadSizeUp>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	e001      	b.n	800c2b4 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 800c2b4:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c2be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c2c0:	68b8      	ldr	r0, [r7, #8]
 800c2c2:	f7ff fe43 	bl	800bf4c <txAllocateQueueItem>
 800c2c6:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d102      	bne.n	800c2d4 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 800c2ce:	6a3b      	ldr	r3, [r7, #32]
 800c2d0:	613b      	str	r3, [r7, #16]
 800c2d2:	e002      	b.n	800c2da <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	6a3a      	ldr	r2, [r7, #32]
 800c2d8:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f000 80ae 	beq.w	800c442 <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 800c2f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c2f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d21c      	bcs.n	800c332 <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 800c2f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c2fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2fc:	1ad3      	subs	r3, r2, r3
 800c2fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 800c300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	429a      	cmp	r2, r3
 800c306:	d901      	bls.n	800c30c <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	3330      	adds	r3, #48	@ 0x30
 800c310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c312:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c314:	4618      	mov	r0, r3
 800c316:	f002 fcdc 	bl	800ecd2 <memcpy>
            frame_offset = frame_offset + move_size;
 800c31a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31e:	4413      	add	r3, r2
 800c320:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 800c322:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c326:	4413      	add	r3, r2
 800c328:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 800c32a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c32e:	4413      	add	r3, r2
 800c330:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 800c332:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c334:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c336:	429a      	cmp	r2, r3
 800c338:	d343      	bcc.n	800c3c2 <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800c33a:	e00f      	b.n	800c35c <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c340:	4413      	add	r3, r2
 800c342:	3330      	adds	r3, #48	@ 0x30
 800c344:	2200      	movs	r2, #0
 800c346:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800c348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c34a:	3301      	adds	r3, #1
 800c34c:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 800c34e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c350:	2100      	movs	r1, #0
 800c352:	4618      	mov	r0, r3
 800c354:	f7ff fba6 	bl	800baa4 <crcAddByte>
 800c358:	4603      	mov	r3, r0
 800c35a:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800c35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c35e:	3302      	adds	r3, #2
 800c360:	69fa      	ldr	r2, [r7, #28]
 800c362:	429a      	cmp	r2, r3
 800c364:	d8ea      	bhi.n	800c33c <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 800c366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d213      	bcs.n	800c396 <txGenerateMultiFrameChain+0x19a>
 800c36e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c370:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c372:	429a      	cmp	r2, r3
 800c374:	d10f      	bne.n	800c396 <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 800c376:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c378:	0a1b      	lsrs	r3, r3, #8
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	697a      	ldr	r2, [r7, #20]
 800c37e:	b2d9      	uxtb	r1, r3
 800c380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c382:	4413      	add	r3, r2
 800c384:	3330      	adds	r3, #48	@ 0x30
 800c386:	460a      	mov	r2, r1
 800c388:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800c38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38c:	3301      	adds	r3, #1
 800c38e:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 800c390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c392:	3301      	adds	r3, #1
 800c394:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 800c396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d211      	bcs.n	800c3c2 <txGenerateMultiFrameChain+0x1c6>
 800c39e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c3a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d90d      	bls.n	800c3c2 <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 800c3a6:	697a      	ldr	r2, [r7, #20]
 800c3a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c3aa:	b2d9      	uxtb	r1, r3
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ae:	4413      	add	r3, r2
 800c3b0:	3330      	adds	r3, #48	@ 0x30
 800c3b2:	460a      	mov	r2, r1
 800c3b4:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 800c3bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3be:	3301      	adds	r3, #1
 800c3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c4:	1c5a      	adds	r2, r3, #1
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d006      	beq.n	800c3dc <txGenerateMultiFrameChain+0x1e0>
 800c3ce:	4b29      	ldr	r3, [pc, #164]	@ (800c474 <txGenerateMultiFrameChain+0x278>)
 800c3d0:	4a23      	ldr	r2, [pc, #140]	@ (800c460 <txGenerateMultiFrameChain+0x264>)
 800c3d2:	f240 11d9 	movw	r1, #473	@ 0x1d9
 800c3d6:	4823      	ldr	r0, [pc, #140]	@ (800c464 <txGenerateMultiFrameChain+0x268>)
 800c3d8:	f001 faea 	bl	800d9b0 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800c3dc:	693a      	ldr	r2, [r7, #16]
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	bf0c      	ite	eq
 800c3e4:	2301      	moveq	r3, #1
 800c3e6:	2300      	movne	r3, #0
 800c3e8:	b2d8      	uxtb	r0, r3
 800c3ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	bf2c      	ite	cs
 800c3f2:	2301      	movcs	r3, #1
 800c3f4:	2300      	movcc	r3, #0
 800c3f6:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800c3f8:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800c3fa:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800c3fe:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800c402:	f7ff fd2f 	bl	800be64 <txMakeTailByte>
 800c406:	4603      	mov	r3, r0
 800c408:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800c40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c40c:	4423      	add	r3, r4
 800c40e:	3330      	adds	r3, #48	@ 0x30
 800c410:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 800c412:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800c416:	2b00      	cmp	r3, #0
 800c418:	bf14      	ite	ne
 800c41a:	2301      	movne	r3, #1
 800c41c:	2300      	moveq	r3, #0
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	f083 0301 	eor.w	r3, r3, #1
 800c424:	b2db      	uxtb	r3, r3
 800c426:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800c42a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800c42e:	f003 0301 	and.w	r3, r3, #1
 800c432:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 800c436:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43a:	429a      	cmp	r2, r3
 800c43c:	f4ff af26 	bcc.w	800c28c <txGenerateMultiFrameChain+0x90>
 800c440:	e000      	b.n	800c444 <txGenerateMultiFrameChain+0x248>
            break;
 800c442:	bf00      	nop
    }
    return out;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	461c      	mov	r4, r3
 800c448:	f107 0310 	add.w	r3, r7, #16
 800c44c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c450:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	3744      	adds	r7, #68	@ 0x44
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd90      	pop	{r4, r7, pc}
 800c45c:	08012484 	.word	0x08012484
 800c460:	080130f8 	.word	0x080130f8
 800c464:	080122c0 	.word	0x080122c0
 800c468:	080125d4 	.word	0x080125d4
 800c46c:	080125f0 	.word	0x080125f0
 800c470:	08012570 	.word	0x08012570
 800c474:	08012618 	.word	0x08012618

0800c478 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b094      	sub	sp, #80	@ 0x50
 800c47c:	af06      	add	r7, sp, #24
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d002      	beq.n	800c490 <txPushMultiFrame+0x18>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d106      	bne.n	800c49e <txPushMultiFrame+0x26>
 800c490:	4b65      	ldr	r3, [pc, #404]	@ (800c628 <txPushMultiFrame+0x1b0>)
 800c492:	4a66      	ldr	r2, [pc, #408]	@ (800c62c <txPushMultiFrame+0x1b4>)
 800c494:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 800c498:	4865      	ldr	r0, [pc, #404]	@ (800c630 <txPushMultiFrame+0x1b8>)
 800c49a:	f001 fa89 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d106      	bne.n	800c4b2 <txPushMultiFrame+0x3a>
 800c4a4:	4b63      	ldr	r3, [pc, #396]	@ (800c634 <txPushMultiFrame+0x1bc>)
 800c4a6:	4a61      	ldr	r2, [pc, #388]	@ (800c62c <txPushMultiFrame+0x1b4>)
 800c4a8:	f240 11ed 	movw	r1, #493	@ 0x1ed
 800c4ac:	4860      	ldr	r0, [pc, #384]	@ (800c630 <txPushMultiFrame+0x1b8>)
 800c4ae:	f001 fa7f 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800c4b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d806      	bhi.n	800c4c8 <txPushMultiFrame+0x50>
 800c4ba:	4b5f      	ldr	r3, [pc, #380]	@ (800c638 <txPushMultiFrame+0x1c0>)
 800c4bc:	4a5b      	ldr	r2, [pc, #364]	@ (800c62c <txPushMultiFrame+0x1b4>)
 800c4be:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 800c4c2:	485b      	ldr	r0, [pc, #364]	@ (800c630 <txPushMultiFrame+0x1b8>)
 800c4c4:	f001 fa74 	bl	800d9b0 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800c4cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4ce:	3302      	adds	r3, #2
 800c4d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 800c4d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	1e5a      	subs	r2, r3, #1
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4e0:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d806      	bhi.n	800c4f6 <txPushMultiFrame+0x7e>
 800c4e8:	4b54      	ldr	r3, [pc, #336]	@ (800c63c <txPushMultiFrame+0x1c4>)
 800c4ea:	4a50      	ldr	r2, [pc, #320]	@ (800c62c <txPushMultiFrame+0x1b4>)
 800c4ec:	f240 11f3 	movw	r1, #499	@ 0x1f3
 800c4f0:	484f      	ldr	r0, [pc, #316]	@ (800c630 <txPushMultiFrame+0x1b8>)
 800c4f2:	f001 fa5d 	bl	800d9b0 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	689a      	ldr	r2, [r3, #8]
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4fc:	441a      	add	r2, r3
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	429a      	cmp	r2, r3
 800c504:	d87b      	bhi.n	800c5fe <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 800c506:	f107 0010 	add.w	r0, r7, #16
 800c50a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c50c:	9305      	str	r3, [sp, #20]
 800c50e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c510:	9304      	str	r3, [sp, #16]
 800c512:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800c516:	9303      	str	r3, [sp, #12]
 800c518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c51a:	9302      	str	r3, [sp, #8]
 800c51c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c520:	e9cd 2300 	strd	r2, r3, [sp]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	68b9      	ldr	r1, [r7, #8]
 800c528:	f7ff fe68 	bl	800c1fc <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d051      	beq.n	800c5d6 <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f103 000c 	add.w	r0, r3, #12
 800c53c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c53e:	4b40      	ldr	r3, [pc, #256]	@ (800c640 <txPushMultiFrame+0x1c8>)
 800c540:	4a40      	ldr	r2, [pc, #256]	@ (800c644 <txPushMultiFrame+0x1cc>)
 800c542:	f7ff f8f3 	bl	800b72c <cavlSearch>
 800c546:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 800c548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54a:	69fa      	ldr	r2, [r7, #28]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d006      	beq.n	800c55e <txPushMultiFrame+0xe6>
 800c550:	4b3d      	ldr	r3, [pc, #244]	@ (800c648 <txPushMultiFrame+0x1d0>)
 800c552:	4a36      	ldr	r2, [pc, #216]	@ (800c62c <txPushMultiFrame+0x1b4>)
 800c554:	f240 2105 	movw	r1, #517	@ 0x205
 800c558:	4835      	ldr	r0, [pc, #212]	@ (800c630 <txPushMultiFrame+0x1b8>)
 800c55a:	f001 fa29 	bl	800d9b0 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d106      	bne.n	800c574 <txPushMultiFrame+0xfc>
 800c566:	4b39      	ldr	r3, [pc, #228]	@ (800c64c <txPushMultiFrame+0x1d4>)
 800c568:	4a30      	ldr	r2, [pc, #192]	@ (800c62c <txPushMultiFrame+0x1b4>)
 800c56a:	f240 2106 	movw	r1, #518	@ 0x206
 800c56e:	4830      	ldr	r0, [pc, #192]	@ (800c630 <txPushMultiFrame+0x1b8>)
 800c570:	f001 fa1e 	bl	800d9b0 <__assert_func>
                next = next->next_in_transfer;
 800c574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c576:	691b      	ldr	r3, [r3, #16]
 800c578:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 800c57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1da      	bne.n	800c536 <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c584:	429a      	cmp	r2, r3
 800c586:	d006      	beq.n	800c596 <txPushMultiFrame+0x11e>
 800c588:	4b31      	ldr	r3, [pc, #196]	@ (800c650 <txPushMultiFrame+0x1d8>)
 800c58a:	4a28      	ldr	r2, [pc, #160]	@ (800c62c <txPushMultiFrame+0x1b4>)
 800c58c:	f240 2109 	movw	r1, #521	@ 0x209
 800c590:	4827      	ldr	r0, [pc, #156]	@ (800c630 <txPushMultiFrame+0x1b8>)
 800c592:	f001 fa0d 	bl	800d9b0 <__assert_func>
            que->size += sq.size;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	689a      	ldr	r2, [r3, #8]
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	441a      	add	r2, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	689a      	ldr	r2, [r3, #8]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d906      	bls.n	800c5bc <txPushMultiFrame+0x144>
 800c5ae:	4b29      	ldr	r3, [pc, #164]	@ (800c654 <txPushMultiFrame+0x1dc>)
 800c5b0:	4a1e      	ldr	r2, [pc, #120]	@ (800c62c <txPushMultiFrame+0x1b4>)
 800c5b2:	f240 210b 	movw	r1, #523	@ 0x20b
 800c5b6:	481e      	ldr	r0, [pc, #120]	@ (800c630 <txPushMultiFrame+0x1b8>)
 800c5b8:	f001 f9fa 	bl	800d9b0 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	da06      	bge.n	800c5d0 <txPushMultiFrame+0x158>
 800c5c2:	4b25      	ldr	r3, [pc, #148]	@ (800c658 <txPushMultiFrame+0x1e0>)
 800c5c4:	4a19      	ldr	r2, [pc, #100]	@ (800c62c <txPushMultiFrame+0x1b4>)
 800c5c6:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 800c5ca:	4819      	ldr	r0, [pc, #100]	@ (800c630 <txPushMultiFrame+0x1b8>)
 800c5cc:	f001 f9f0 	bl	800d9b0 <__assert_func>
            out = (int32_t) sq.size;
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5d4:	e016      	b.n	800c604 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 800c5d6:	f06f 0302 	mvn.w	r3, #2
 800c5da:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 800c5e0:	e009      	b.n	800c5f6 <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 800c5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5ee:	68b8      	ldr	r0, [r7, #8]
 800c5f0:	4798      	blx	r3
                head = next;
 800c5f2:	6a3b      	ldr	r3, [r7, #32]
 800c5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 800c5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1f2      	bne.n	800c5e2 <txPushMultiFrame+0x16a>
 800c5fc:	e002      	b.n	800c604 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800c5fe:	f06f 0302 	mvn.w	r3, #2
 800c602:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 800c604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c606:	2b00      	cmp	r3, #0
 800c608:	db09      	blt.n	800c61e <txPushMultiFrame+0x1a6>
 800c60a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	dc06      	bgt.n	800c61e <txPushMultiFrame+0x1a6>
 800c610:	4b12      	ldr	r3, [pc, #72]	@ (800c65c <txPushMultiFrame+0x1e4>)
 800c612:	4a06      	ldr	r2, [pc, #24]	@ (800c62c <txPushMultiFrame+0x1b4>)
 800c614:	f240 211f 	movw	r1, #543	@ 0x21f
 800c618:	4805      	ldr	r0, [pc, #20]	@ (800c630 <txPushMultiFrame+0x1b8>)
 800c61a:	f001 f9c9 	bl	800d9b0 <__assert_func>
    return out;
 800c61e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c620:	4618      	mov	r0, r3
 800c622:	3738      	adds	r7, #56	@ 0x38
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	08012654 	.word	0x08012654
 800c62c:	080130e4 	.word	0x080130e4
 800c630:	080122c0 	.word	0x080122c0
 800c634:	080125d4 	.word	0x080125d4
 800c638:	080125f0 	.word	0x080125f0
 800c63c:	08012684 	.word	0x08012684
 800c640:	0800ba8d 	.word	0x0800ba8d
 800c644:	0800bff1 	.word	0x0800bff1
 800c648:	08012694 	.word	0x08012694
 800c64c:	080126a8 	.word	0x080126a8
 800c650:	080126c4 	.word	0x080126c4
 800c654:	080125a0 	.word	0x080125a0
 800c658:	080126dc 	.word	0x080126dc
 800c65c:	08012700 	.word	0x08012700

0800c660 <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid UAVCAN/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800c66a:	607a      	str	r2, [r7, #4]
 800c66c:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d106      	bne.n	800c682 <rxTryParseFrame+0x22>
 800c674:	4b96      	ldr	r3, [pc, #600]	@ (800c8d0 <rxTryParseFrame+0x270>)
 800c676:	4a97      	ldr	r2, [pc, #604]	@ (800c8d4 <rxTryParseFrame+0x274>)
 800c678:	f240 214e 	movw	r1, #590	@ 0x24e
 800c67c:	4896      	ldr	r0, [pc, #600]	@ (800c8d8 <rxTryParseFrame+0x278>)
 800c67e:	f001 f997 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c68a:	d306      	bcc.n	800c69a <rxTryParseFrame+0x3a>
 800c68c:	4b93      	ldr	r3, [pc, #588]	@ (800c8dc <rxTryParseFrame+0x27c>)
 800c68e:	4a91      	ldr	r2, [pc, #580]	@ (800c8d4 <rxTryParseFrame+0x274>)
 800c690:	f240 214f 	movw	r1, #591	@ 0x24f
 800c694:	4890      	ldr	r0, [pc, #576]	@ (800c8d8 <rxTryParseFrame+0x278>)
 800c696:	f001 f98b 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(out != NULL);
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d106      	bne.n	800c6ae <rxTryParseFrame+0x4e>
 800c6a0:	4b8f      	ldr	r3, [pc, #572]	@ (800c8e0 <rxTryParseFrame+0x280>)
 800c6a2:	4a8c      	ldr	r2, [pc, #560]	@ (800c8d4 <rxTryParseFrame+0x274>)
 800c6a4:	f44f 7114 	mov.w	r1, #592	@ 0x250
 800c6a8:	488b      	ldr	r0, [pc, #556]	@ (800c8d8 <rxTryParseFrame+0x278>)
 800c6aa:	f001 f981 	bl	800d9b0 <__assert_func>
    bool valid = false;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	f000 8105 	beq.w	800c8c6 <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d106      	bne.n	800c6d2 <rxTryParseFrame+0x72>
 800c6c4:	4b87      	ldr	r3, [pc, #540]	@ (800c8e4 <rxTryParseFrame+0x284>)
 800c6c6:	4a83      	ldr	r2, [pc, #524]	@ (800c8d4 <rxTryParseFrame+0x274>)
 800c6c8:	f44f 7115 	mov.w	r1, #596	@ 0x254
 800c6cc:	4882      	ldr	r0, [pc, #520]	@ (800c8d8 <rxTryParseFrame+0x278>)
 800c6ce:	f001 f96f 	bl	800d9b0 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 800c6d2:	6839      	ldr	r1, [r7, #0]
 800c6d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c6d8:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	0e9b      	lsrs	r3, r3, #26
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	f003 0307 	and.w	r3, r3, #7
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c706:	2b00      	cmp	r3, #0
 800c708:	d128      	bne.n	800c75c <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	2200      	movs	r2, #0
 800c70e:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	0a1b      	lsrs	r3, r3, #8
 800c714:	b29b      	uxth	r3, r3
 800c716:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c726:	2b00      	cmp	r3, #0
 800c728:	d002      	beq.n	800c730 <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	22ff      	movs	r2, #255	@ 0xff
 800c72e:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	22ff      	movs	r2, #255	@ 0xff
 800c734:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d106      	bne.n	800c74e <rxTryParseFrame+0xee>
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c746:	2b00      	cmp	r3, #0
 800c748:	d101      	bne.n	800c74e <rxTryParseFrame+0xee>
 800c74a:	2301      	movs	r3, #1
 800c74c:	e000      	b.n	800c750 <rxTryParseFrame+0xf0>
 800c74e:	2300      	movs	r3, #0
 800c750:	77fb      	strb	r3, [r7, #31]
 800c752:	7ffb      	ldrb	r3, [r7, #31]
 800c754:	f003 0301 	and.w	r3, r3, #1
 800c758:	77fb      	strb	r3, [r7, #31]
 800c75a:	e02c      	b.n	800c7b6 <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <rxTryParseFrame+0x10a>
 800c766:	2202      	movs	r2, #2
 800c768:	e000      	b.n	800c76c <rxTryParseFrame+0x10c>
 800c76a:	2201      	movs	r2, #1
            out->transfer_kind =
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	0b9b      	lsrs	r3, r3, #14
 800c774:	b29b      	uxth	r3, r3
 800c776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	09db      	lsrs	r3, r3, #7
 800c784:	b2db      	uxtb	r3, r3
 800c786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c78a:	b2da      	uxtb	r2, r3
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c796:	2b00      	cmp	r3, #0
 800c798:	d107      	bne.n	800c7aa <rxTryParseFrame+0x14a>
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	7b1a      	ldrb	r2, [r3, #12]
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	7b5b      	ldrb	r3, [r3, #13]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d001      	beq.n	800c7aa <rxTryParseFrame+0x14a>
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e000      	b.n	800c7ac <rxTryParseFrame+0x14c>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	77fb      	strb	r3, [r7, #31]
 800c7ae:	7ffb      	ldrb	r3, [r7, #31]
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	1e5a      	subs	r2, r3, #1
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	689a      	ldr	r2, [r3, #8]
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	699a      	ldr	r2, [r3, #24]
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	695b      	ldr	r3, [r3, #20]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 800c7d6:	7dfb      	ldrb	r3, [r7, #23]
 800c7d8:	f003 031f 	and.w	r3, r3, #31
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 800c7e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	09db      	lsrs	r3, r3, #7
 800c7ea:	b2da      	uxtb	r2, r3
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 800c7f0:	7dfb      	ldrb	r3, [r7, #23]
 800c7f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	bf14      	ite	ne
 800c7fa:	2301      	movne	r3, #1
 800c7fc:	2300      	moveq	r3, #0
 800c7fe:	b2da      	uxtb	r2, r3
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 800c804:	7dfb      	ldrb	r3, [r7, #23]
 800c806:	f003 0320 	and.w	r3, r3, #32
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	bf14      	ite	ne
 800c80e:	2301      	movne	r3, #1
 800c810:	2300      	moveq	r3, #0
 800c812:	b2da      	uxtb	r2, r3
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 800c818:	7ffb      	ldrb	r3, [r7, #31]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00c      	beq.n	800c838 <rxTryParseFrame+0x1d8>
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	7bdb      	ldrb	r3, [r3, #15]
 800c822:	f083 0301 	eor.w	r3, r3, #1
 800c826:	b2db      	uxtb	r3, r3
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d103      	bne.n	800c834 <rxTryParseFrame+0x1d4>
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	7c5b      	ldrb	r3, [r3, #17]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <rxTryParseFrame+0x1d8>
 800c834:	2301      	movs	r3, #1
 800c836:	e000      	b.n	800c83a <rxTryParseFrame+0x1da>
 800c838:	2300      	movs	r3, #0
 800c83a:	77fb      	strb	r3, [r7, #31]
 800c83c:	7ffb      	ldrb	r3, [r7, #31]
 800c83e:	f003 0301 	and.w	r3, r3, #1
 800c842:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 800c844:	7ffb      	ldrb	r3, [r7, #31]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d00d      	beq.n	800c866 <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d003      	beq.n	800c85a <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	7c1b      	ldrb	r3, [r3, #16]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d103      	bne.n	800c862 <rxTryParseFrame+0x202>
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	7b1b      	ldrb	r3, [r3, #12]
 800c85e:	2bff      	cmp	r3, #255	@ 0xff
 800c860:	d001      	beq.n	800c866 <rxTryParseFrame+0x206>
        valid = valid &&
 800c862:	2301      	movs	r3, #1
 800c864:	e000      	b.n	800c868 <rxTryParseFrame+0x208>
 800c866:	2300      	movs	r3, #0
 800c868:	77fb      	strb	r3, [r7, #31]
 800c86a:	7ffb      	ldrb	r3, [r7, #31]
 800c86c:	f003 0301 	and.w	r3, r3, #1
 800c870:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 800c872:	7ffb      	ldrb	r3, [r7, #31]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d009      	beq.n	800c88c <rxTryParseFrame+0x22c>
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	695b      	ldr	r3, [r3, #20]
 800c87c:	2b06      	cmp	r3, #6
 800c87e:	d803      	bhi.n	800c888 <rxTryParseFrame+0x228>
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	7c1b      	ldrb	r3, [r3, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <rxTryParseFrame+0x22c>
 800c888:	2301      	movs	r3, #1
 800c88a:	e000      	b.n	800c88e <rxTryParseFrame+0x22e>
 800c88c:	2300      	movs	r3, #0
 800c88e:	77fb      	strb	r3, [r7, #31]
 800c890:	7ffb      	ldrb	r3, [r7, #31]
 800c892:	f003 0301 	and.w	r3, r3, #1
 800c896:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 800c898:	7ffb      	ldrb	r3, [r7, #31]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00d      	beq.n	800c8ba <rxTryParseFrame+0x25a>
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d107      	bne.n	800c8b6 <rxTryParseFrame+0x256>
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	7bdb      	ldrb	r3, [r3, #15]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d005      	beq.n	800c8ba <rxTryParseFrame+0x25a>
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	7c1b      	ldrb	r3, [r3, #16]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d001      	beq.n	800c8ba <rxTryParseFrame+0x25a>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e000      	b.n	800c8bc <rxTryParseFrame+0x25c>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	77fb      	strb	r3, [r7, #31]
 800c8be:	7ffb      	ldrb	r3, [r7, #31]
 800c8c0:	f003 0301 	and.w	r3, r3, #1
 800c8c4:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 800c8c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3720      	adds	r7, #32
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	08012718 	.word	0x08012718
 800c8d4:	08013134 	.word	0x08013134
 800c8d8:	080122c0 	.word	0x080122c0
 800c8dc:	08012730 	.word	0x08012730
 800c8e0:	08012760 	.word	0x08012760
 800c8e4:	08012774 	.word	0x08012774

0800c8e8 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d106      	bne.n	800c906 <rxInitTransferMetadataFromFrame+0x1e>
 800c8f8:	4b19      	ldr	r3, [pc, #100]	@ (800c960 <rxInitTransferMetadataFromFrame+0x78>)
 800c8fa:	4a1a      	ldr	r2, [pc, #104]	@ (800c964 <rxInitTransferMetadataFromFrame+0x7c>)
 800c8fc:	f240 218f 	movw	r1, #655	@ 0x28f
 800c900:	4819      	ldr	r0, [pc, #100]	@ (800c968 <rxInitTransferMetadataFromFrame+0x80>)
 800c902:	f001 f855 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d106      	bne.n	800c91c <rxInitTransferMetadataFromFrame+0x34>
 800c90e:	4b17      	ldr	r3, [pc, #92]	@ (800c96c <rxInitTransferMetadataFromFrame+0x84>)
 800c910:	4a14      	ldr	r2, [pc, #80]	@ (800c964 <rxInitTransferMetadataFromFrame+0x7c>)
 800c912:	f44f 7124 	mov.w	r1, #656	@ 0x290
 800c916:	4814      	ldr	r0, [pc, #80]	@ (800c968 <rxInitTransferMetadataFromFrame+0x80>)
 800c918:	f001 f84a 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d106      	bne.n	800c930 <rxInitTransferMetadataFromFrame+0x48>
 800c922:	4b13      	ldr	r3, [pc, #76]	@ (800c970 <rxInitTransferMetadataFromFrame+0x88>)
 800c924:	4a0f      	ldr	r2, [pc, #60]	@ (800c964 <rxInitTransferMetadataFromFrame+0x7c>)
 800c926:	f240 2191 	movw	r1, #657	@ 0x291
 800c92a:	480f      	ldr	r0, [pc, #60]	@ (800c968 <rxInitTransferMetadataFromFrame+0x80>)
 800c92c:	f001 f840 	bl	800d9b0 <__assert_func>
    out_transfer->priority       = frame->priority;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	7a1a      	ldrb	r2, [r3, #8]
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	7a5a      	ldrb	r2, [r3, #9]
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	895a      	ldrh	r2, [r3, #10]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	7b1a      	ldrb	r2, [r3, #12]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	7b9a      	ldrb	r2, [r3, #14]
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	715a      	strb	r2, [r3, #5]
}
 800c958:	bf00      	nop
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	08012718 	.word	0x08012718
 800c964:	080131c8 	.word	0x080131c8
 800c968:	080122c0 	.word	0x080122c0
 800c96c:	08012774 	.word	0x08012774
 800c970:	08012794 	.word	0x08012794

0800c974 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	4603      	mov	r3, r0
 800c97c:	460a      	mov	r2, r1
 800c97e:	71fb      	strb	r3, [r7, #7]
 800c980:	4613      	mov	r3, r2
 800c982:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 800c984:	79fb      	ldrb	r3, [r7, #7]
 800c986:	2b1f      	cmp	r3, #31
 800c988:	d906      	bls.n	800c998 <rxComputeTransferIDDifference+0x24>
 800c98a:	4b15      	ldr	r3, [pc, #84]	@ (800c9e0 <rxComputeTransferIDDifference+0x6c>)
 800c98c:	4a15      	ldr	r2, [pc, #84]	@ (800c9e4 <rxComputeTransferIDDifference+0x70>)
 800c98e:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 800c992:	4815      	ldr	r0, [pc, #84]	@ (800c9e8 <rxComputeTransferIDDifference+0x74>)
 800c994:	f001 f80c 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 800c998:	79bb      	ldrb	r3, [r7, #6]
 800c99a:	2b1f      	cmp	r3, #31
 800c99c:	d906      	bls.n	800c9ac <rxComputeTransferIDDifference+0x38>
 800c99e:	4b13      	ldr	r3, [pc, #76]	@ (800c9ec <rxComputeTransferIDDifference+0x78>)
 800c9a0:	4a10      	ldr	r2, [pc, #64]	@ (800c9e4 <rxComputeTransferIDDifference+0x70>)
 800c9a2:	f240 219d 	movw	r1, #669	@ 0x29d
 800c9a6:	4810      	ldr	r0, [pc, #64]	@ (800c9e8 <rxComputeTransferIDDifference+0x74>)
 800c9a8:	f001 f802 	bl	800d9b0 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 800c9ac:	79fb      	ldrb	r3, [r7, #7]
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	79bb      	ldrb	r3, [r7, #6]
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 800c9ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	da07      	bge.n	800c9d2 <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 800c9c2:	2320      	movs	r3, #32
 800c9c4:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 800c9c6:	7b7b      	ldrb	r3, [r7, #13]
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	89fb      	ldrh	r3, [r7, #14]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 800c9d2:	89fb      	ldrh	r3, [r7, #14]
 800c9d4:	b2db      	uxtb	r3, r3
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	080127b0 	.word	0x080127b0
 800c9e4:	08013164 	.word	0x08013164
 800c9e8:	080122c0 	.word	0x080122c0
 800c9ec:	080127c8 	.word	0x080127c8

0800c9f0 <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
 800c9fc:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d106      	bne.n	800ca12 <rxSessionWritePayload+0x22>
 800ca04:	4b67      	ldr	r3, [pc, #412]	@ (800cba4 <rxSessionWritePayload+0x1b4>)
 800ca06:	4a68      	ldr	r2, [pc, #416]	@ (800cba8 <rxSessionWritePayload+0x1b8>)
 800ca08:	f240 21ad 	movw	r1, #685	@ 0x2ad
 800ca0c:	4867      	ldr	r0, [pc, #412]	@ (800cbac <rxSessionWritePayload+0x1bc>)
 800ca0e:	f000 ffcf 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d106      	bne.n	800ca26 <rxSessionWritePayload+0x36>
 800ca18:	4b65      	ldr	r3, [pc, #404]	@ (800cbb0 <rxSessionWritePayload+0x1c0>)
 800ca1a:	4a63      	ldr	r2, [pc, #396]	@ (800cba8 <rxSessionWritePayload+0x1b8>)
 800ca1c:	f240 21ae 	movw	r1, #686	@ 0x2ae
 800ca20:	4862      	ldr	r0, [pc, #392]	@ (800cbac <rxSessionWritePayload+0x1bc>)
 800ca22:	f000 ffc5 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800ca26:	6a3b      	ldr	r3, [r7, #32]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d109      	bne.n	800ca40 <rxSessionWritePayload+0x50>
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d006      	beq.n	800ca40 <rxSessionWritePayload+0x50>
 800ca32:	4b60      	ldr	r3, [pc, #384]	@ (800cbb4 <rxSessionWritePayload+0x1c4>)
 800ca34:	4a5c      	ldr	r2, [pc, #368]	@ (800cba8 <rxSessionWritePayload+0x1b8>)
 800ca36:	f240 21af 	movw	r1, #687	@ 0x2af
 800ca3a:	485c      	ldr	r0, [pc, #368]	@ (800cbac <rxSessionWritePayload+0x1bc>)
 800ca3c:	f000 ffb8 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d206      	bcs.n	800ca58 <rxSessionWritePayload+0x68>
 800ca4a:	4b5b      	ldr	r3, [pc, #364]	@ (800cbb8 <rxSessionWritePayload+0x1c8>)
 800ca4c:	4a56      	ldr	r2, [pc, #344]	@ (800cba8 <rxSessionWritePayload+0x1b8>)
 800ca4e:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 800ca52:	4856      	ldr	r0, [pc, #344]	@ (800cbac <rxSessionWritePayload+0x1bc>)
 800ca54:	f000 ffac 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	68da      	ldr	r2, [r3, #12]
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d906      	bls.n	800ca72 <rxSessionWritePayload+0x82>
 800ca64:	4b55      	ldr	r3, [pc, #340]	@ (800cbbc <rxSessionWritePayload+0x1cc>)
 800ca66:	4a50      	ldr	r2, [pc, #320]	@ (800cba8 <rxSessionWritePayload+0x1b8>)
 800ca68:	f240 21b1 	movw	r1, #689	@ 0x2b1
 800ca6c:	484f      	ldr	r0, [pc, #316]	@ (800cbac <rxSessionWritePayload+0x1bc>)
 800ca6e:	f000 ff9f 	bl	800d9b0 <__assert_func>

    rxs->total_payload_size += payload_size;
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	689a      	ldr	r2, [r3, #8]
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	441a      	add	r2, r3
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	691b      	ldr	r3, [r3, #16]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d115      	bne.n	800cab2 <rxSessionWritePayload+0xc2>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d012      	beq.n	800cab2 <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d006      	beq.n	800caa2 <rxSessionWritePayload+0xb2>
 800ca94:	4b4a      	ldr	r3, [pc, #296]	@ (800cbc0 <rxSessionWritePayload+0x1d0>)
 800ca96:	4a44      	ldr	r2, [pc, #272]	@ (800cba8 <rxSessionWritePayload+0x1b8>)
 800ca98:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 800ca9c:	4843      	ldr	r0, [pc, #268]	@ (800cbac <rxSessionWritePayload+0x1bc>)
 800ca9e:	f000 ff87 	bl	800d9b0 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	6879      	ldr	r1, [r7, #4]
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	4798      	blx	r3
 800caac:	4602      	mov	r2, r0
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 800cab2:	2300      	movs	r3, #0
 800cab4:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d04e      	beq.n	800cb5c <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	68da      	ldr	r2, [r3, #12]
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	4413      	add	r3, r2
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d229      	bcs.n	800cb24 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d206      	bcs.n	800cae8 <rxSessionWritePayload+0xf8>
 800cada:	4b37      	ldr	r3, [pc, #220]	@ (800cbb8 <rxSessionWritePayload+0x1c8>)
 800cadc:	4a32      	ldr	r2, [pc, #200]	@ (800cba8 <rxSessionWritePayload+0x1b8>)
 800cade:	f240 21c3 	movw	r1, #707	@ 0x2c3
 800cae2:	4832      	ldr	r0, [pc, #200]	@ (800cbac <rxSessionWritePayload+0x1bc>)
 800cae4:	f000 ff64 	bl	800d9b0 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	68da      	ldr	r2, [r3, #12]
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	4413      	add	r3, r2
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d006      	beq.n	800cb0e <rxSessionWritePayload+0x11e>
 800cb00:	4b30      	ldr	r3, [pc, #192]	@ (800cbc4 <rxSessionWritePayload+0x1d4>)
 800cb02:	4a29      	ldr	r2, [pc, #164]	@ (800cba8 <rxSessionWritePayload+0x1b8>)
 800cb04:	f240 21c5 	movw	r1, #709	@ 0x2c5
 800cb08:	4828      	ldr	r0, [pc, #160]	@ (800cbac <rxSessionWritePayload+0x1bc>)
 800cb0a:	f000 ff51 	bl	800d9b0 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 800cb0e:	693a      	ldr	r2, [r7, #16]
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d306      	bcc.n	800cb24 <rxSessionWritePayload+0x134>
 800cb16:	4b2c      	ldr	r3, [pc, #176]	@ (800cbc8 <rxSessionWritePayload+0x1d8>)
 800cb18:	4a23      	ldr	r2, [pc, #140]	@ (800cba8 <rxSessionWritePayload+0x1b8>)
 800cb1a:	f240 21c6 	movw	r1, #710	@ 0x2c6
 800cb1e:	4823      	ldr	r0, [pc, #140]	@ (800cbac <rxSessionWritePayload+0x1bc>)
 800cb20:	f000 ff46 	bl	800d9b0 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	691a      	ldr	r2, [r3, #16]
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	693a      	ldr	r2, [r7, #16]
 800cb30:	6a39      	ldr	r1, [r7, #32]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f002 f8cd 	bl	800ecd2 <memcpy>
        rxs->payload_size += bytes_to_copy;
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	68da      	ldr	r2, [r3, #12]
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	441a      	add	r2, r3
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d219      	bcs.n	800cb82 <rxSessionWritePayload+0x192>
 800cb4e:	4b1a      	ldr	r3, [pc, #104]	@ (800cbb8 <rxSessionWritePayload+0x1c8>)
 800cb50:	4a15      	ldr	r2, [pc, #84]	@ (800cba8 <rxSessionWritePayload+0x1b8>)
 800cb52:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 800cb56:	4815      	ldr	r0, [pc, #84]	@ (800cbac <rxSessionWritePayload+0x1bc>)
 800cb58:	f000 ff2a 	bl	800d9b0 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d006      	beq.n	800cb72 <rxSessionWritePayload+0x182>
 800cb64:	4b16      	ldr	r3, [pc, #88]	@ (800cbc0 <rxSessionWritePayload+0x1d0>)
 800cb66:	4a10      	ldr	r2, [pc, #64]	@ (800cba8 <rxSessionWritePayload+0x1b8>)
 800cb68:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 800cb6c:	480f      	ldr	r0, [pc, #60]	@ (800cbac <rxSessionWritePayload+0x1bc>)
 800cb6e:	f000 ff1f 	bl	800d9b0 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d002      	beq.n	800cb7e <rxSessionWritePayload+0x18e>
 800cb78:	f06f 0302 	mvn.w	r3, #2
 800cb7c:	e000      	b.n	800cb80 <rxSessionWritePayload+0x190>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 800cb82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	dd06      	ble.n	800cb98 <rxSessionWritePayload+0x1a8>
 800cb8a:	4b10      	ldr	r3, [pc, #64]	@ (800cbcc <rxSessionWritePayload+0x1dc>)
 800cb8c:	4a06      	ldr	r2, [pc, #24]	@ (800cba8 <rxSessionWritePayload+0x1b8>)
 800cb8e:	f240 21d7 	movw	r1, #727	@ 0x2d7
 800cb92:	4806      	ldr	r0, [pc, #24]	@ (800cbac <rxSessionWritePayload+0x1bc>)
 800cb94:	f000 ff0c 	bl	800d9b0 <__assert_func>
    return out;
 800cb98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3718      	adds	r7, #24
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	08012484 	.word	0x08012484
 800cba8:	080131b0 	.word	0x080131b0
 800cbac:	080122c0 	.word	0x080122c0
 800cbb0:	080127e0 	.word	0x080127e0
 800cbb4:	0801237c 	.word	0x0801237c
 800cbb8:	080127f4 	.word	0x080127f4
 800cbbc:	08012810 	.word	0x08012810
 800cbc0:	08012840 	.word	0x08012840
 800cbc4:	08012858 	.word	0x08012858
 800cbc8:	08012888 	.word	0x08012888
 800cbcc:	080128a8 	.word	0x080128a8

0800cbd0 <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d106      	bne.n	800cbee <rxSessionRestart+0x1e>
 800cbe0:	4b1a      	ldr	r3, [pc, #104]	@ (800cc4c <rxSessionRestart+0x7c>)
 800cbe2:	4a1b      	ldr	r2, [pc, #108]	@ (800cc50 <rxSessionRestart+0x80>)
 800cbe4:	f240 21dd 	movw	r1, #733	@ 0x2dd
 800cbe8:	481a      	ldr	r0, [pc, #104]	@ (800cc54 <rxSessionRestart+0x84>)
 800cbea:	f000 fee1 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d106      	bne.n	800cc02 <rxSessionRestart+0x32>
 800cbf4:	4b18      	ldr	r3, [pc, #96]	@ (800cc58 <rxSessionRestart+0x88>)
 800cbf6:	4a16      	ldr	r2, [pc, #88]	@ (800cc50 <rxSessionRestart+0x80>)
 800cbf8:	f240 21de 	movw	r1, #734	@ 0x2de
 800cbfc:	4815      	ldr	r0, [pc, #84]	@ (800cc54 <rxSessionRestart+0x84>)
 800cbfe:	f000 fed7 	bl	800d9b0 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	683a      	ldr	r2, [r7, #0]
 800cc08:	6912      	ldr	r2, [r2, #16]
 800cc0a:	4611      	mov	r1, r2
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	2200      	movs	r2, #0
 800cc14:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cc28:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	7d9b      	ldrb	r3, [r3, #22]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	f003 031f 	and.w	r3, r3, #31
 800cc36:	b2da      	uxtb	r2, r3
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	761a      	strb	r2, [r3, #24]
}
 800cc42:	bf00      	nop
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	08012484 	.word	0x08012484
 800cc50:	08013184 	.word	0x08013184
 800cc54:	080122c0 	.word	0x080122c0
 800cc58:	080127e0 	.word	0x080127e0

0800cc5c <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b088      	sub	sp, #32
 800cc60:	af02      	add	r7, sp, #8
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	607a      	str	r2, [r7, #4]
 800cc68:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d106      	bne.n	800cc7e <rxSessionAcceptFrame+0x22>
 800cc70:	4b81      	ldr	r3, [pc, #516]	@ (800ce78 <rxSessionAcceptFrame+0x21c>)
 800cc72:	4a82      	ldr	r2, [pc, #520]	@ (800ce7c <rxSessionAcceptFrame+0x220>)
 800cc74:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cc78:	4881      	ldr	r0, [pc, #516]	@ (800ce80 <rxSessionAcceptFrame+0x224>)
 800cc7a:	f000 fe99 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d106      	bne.n	800cc92 <rxSessionAcceptFrame+0x36>
 800cc84:	4b7f      	ldr	r3, [pc, #508]	@ (800ce84 <rxSessionAcceptFrame+0x228>)
 800cc86:	4a7d      	ldr	r2, [pc, #500]	@ (800ce7c <rxSessionAcceptFrame+0x220>)
 800cc88:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 800cc8c:	487c      	ldr	r0, [pc, #496]	@ (800ce80 <rxSessionAcceptFrame+0x224>)
 800cc8e:	f000 fe8f 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d106      	bne.n	800cca6 <rxSessionAcceptFrame+0x4a>
 800cc98:	4b7b      	ldr	r3, [pc, #492]	@ (800ce88 <rxSessionAcceptFrame+0x22c>)
 800cc9a:	4a78      	ldr	r2, [pc, #480]	@ (800ce7c <rxSessionAcceptFrame+0x220>)
 800cc9c:	f240 21f1 	movw	r1, #753	@ 0x2f1
 800cca0:	4877      	ldr	r0, [pc, #476]	@ (800ce80 <rxSessionAcceptFrame+0x224>)
 800cca2:	f000 fe85 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d106      	bne.n	800ccbc <rxSessionAcceptFrame+0x60>
 800ccae:	4b77      	ldr	r3, [pc, #476]	@ (800ce8c <rxSessionAcceptFrame+0x230>)
 800ccb0:	4a72      	ldr	r2, [pc, #456]	@ (800ce7c <rxSessionAcceptFrame+0x220>)
 800ccb2:	f240 21f2 	movw	r1, #754	@ 0x2f2
 800ccb6:	4872      	ldr	r0, [pc, #456]	@ (800ce80 <rxSessionAcceptFrame+0x224>)
 800ccb8:	f000 fe7a 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	7b9b      	ldrb	r3, [r3, #14]
 800ccc0:	2b1f      	cmp	r3, #31
 800ccc2:	d906      	bls.n	800ccd2 <rxSessionAcceptFrame+0x76>
 800ccc4:	4b72      	ldr	r3, [pc, #456]	@ (800ce90 <rxSessionAcceptFrame+0x234>)
 800ccc6:	4a6d      	ldr	r2, [pc, #436]	@ (800ce7c <rxSessionAcceptFrame+0x220>)
 800ccc8:	f240 21f3 	movw	r1, #755	@ 0x2f3
 800cccc:	486c      	ldr	r0, [pc, #432]	@ (800ce80 <rxSessionAcceptFrame+0x224>)
 800ccce:	f000 fe6f 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800ccd2:	6a3b      	ldr	r3, [r7, #32]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d106      	bne.n	800cce6 <rxSessionAcceptFrame+0x8a>
 800ccd8:	4b6e      	ldr	r3, [pc, #440]	@ (800ce94 <rxSessionAcceptFrame+0x238>)
 800ccda:	4a68      	ldr	r2, [pc, #416]	@ (800ce7c <rxSessionAcceptFrame+0x220>)
 800ccdc:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 800cce0:	4867      	ldr	r0, [pc, #412]	@ (800ce80 <rxSessionAcceptFrame+0x224>)
 800cce2:	f000 fe65 	bl	800d9b0 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	7bdb      	ldrb	r3, [r3, #15]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d005      	beq.n	800ccfa <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf4:	68b9      	ldr	r1, [r7, #8]
 800ccf6:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	7bdb      	ldrb	r3, [r3, #15]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d005      	beq.n	800cd0e <rxSessionAcceptFrame+0xb2>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	7c1b      	ldrb	r3, [r3, #16]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d001      	beq.n	800cd0e <rxSessionAcceptFrame+0xb2>
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e000      	b.n	800cd10 <rxSessionAcceptFrame+0xb4>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	75bb      	strb	r3, [r7, #22]
 800cd12:	7dbb      	ldrb	r3, [r7, #22]
 800cd14:	f003 0301 	and.w	r3, r3, #1
 800cd18:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 800cd1a:	7dbb      	ldrb	r3, [r7, #22]
 800cd1c:	f083 0301 	eor.w	r3, r3, #1
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00c      	beq.n	800cd40 <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	8a98      	ldrh	r0, [r3, #20]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6959      	ldr	r1, [r3, #20]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	699b      	ldr	r3, [r3, #24]
 800cd32:	461a      	mov	r2, r3
 800cd34:	f7fe fed6 	bl	800bae4 <crcAdd>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	695a      	ldr	r2, [r3, #20]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	699b      	ldr	r3, [r3, #24]
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	683a      	ldr	r2, [r7, #0]
 800cd4e:	68b9      	ldr	r1, [r7, #8]
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f7ff fe4d 	bl	800c9f0 <rxSessionWritePayload>
 800cd56:	4603      	mov	r3, r0
 800cd58:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 800cd5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	da10      	bge.n	800cd84 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 800cd62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd66:	f113 0f03 	cmn.w	r3, #3
 800cd6a:	d006      	beq.n	800cd7a <rxSessionAcceptFrame+0x11e>
 800cd6c:	4b4a      	ldr	r3, [pc, #296]	@ (800ce98 <rxSessionAcceptFrame+0x23c>)
 800cd6e:	4a43      	ldr	r2, [pc, #268]	@ (800ce7c <rxSessionAcceptFrame+0x220>)
 800cd70:	f240 3106 	movw	r1, #774	@ 0x306
 800cd74:	4842      	ldr	r0, [pc, #264]	@ (800ce80 <rxSessionAcceptFrame+0x224>)
 800cd76:	f000 fe1b 	bl	800d9b0 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 800cd7a:	68b9      	ldr	r1, [r7, #8]
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f7ff ff27 	bl	800cbd0 <rxSessionRestart>
 800cd82:	e072      	b.n	800ce6a <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	7c1b      	ldrb	r3, [r3, #16]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d05f      	beq.n	800ce4c <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 800cd8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d006      	beq.n	800cda2 <rxSessionAcceptFrame+0x146>
 800cd94:	4b41      	ldr	r3, [pc, #260]	@ (800ce9c <rxSessionAcceptFrame+0x240>)
 800cd96:	4a39      	ldr	r2, [pc, #228]	@ (800ce7c <rxSessionAcceptFrame+0x220>)
 800cd98:	f240 310b 	movw	r1, #779	@ 0x30b
 800cd9c:	4838      	ldr	r0, [pc, #224]	@ (800ce80 <rxSessionAcceptFrame+0x224>)
 800cd9e:	f000 fe07 	bl	800d9b0 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 800cda2:	7dbb      	ldrb	r3, [r7, #22]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d103      	bne.n	800cdb0 <rxSessionAcceptFrame+0x154>
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	8a9b      	ldrh	r3, [r3, #20]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d148      	bne.n	800ce42 <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800cdb4:	6a3b      	ldr	r3, [r7, #32]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f7ff fd95 	bl	800c8e8 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc4:	6a39      	ldr	r1, [r7, #32]
 800cdc6:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	68da      	ldr	r2, [r3, #12]
 800cdce:	6a3b      	ldr	r3, [r7, #32]
 800cdd0:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	691a      	ldr	r2, [r3, #16]
 800cdd6:	6a3b      	ldr	r3, [r7, #32]
 800cdd8:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	689a      	ldr	r2, [r3, #8]
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d206      	bcs.n	800cdf4 <rxSessionAcceptFrame+0x198>
 800cde6:	4b2e      	ldr	r3, [pc, #184]	@ (800cea0 <rxSessionAcceptFrame+0x244>)
 800cde8:	4a24      	ldr	r2, [pc, #144]	@ (800ce7c <rxSessionAcceptFrame+0x220>)
 800cdea:	f240 3115 	movw	r1, #789	@ 0x315
 800cdee:	4824      	ldr	r0, [pc, #144]	@ (800ce80 <rxSessionAcceptFrame+0x224>)
 800cdf0:	f000 fdde 	bl	800d9b0 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	689a      	ldr	r2, [r3, #8]
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 800ce00:	7dbb      	ldrb	r3, [r7, #22]
 800ce02:	f083 0301 	eor.w	r3, r3, #1
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d017      	beq.n	800ce3c <rxSessionAcceptFrame+0x1e0>
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d814      	bhi.n	800ce3c <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 800ce12:	6a3b      	ldr	r3, [r7, #32]
 800ce14:	691a      	ldr	r2, [r3, #16]
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	f1c3 0302 	rsb	r3, r3, #2
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d206      	bcs.n	800ce2e <rxSessionAcceptFrame+0x1d2>
 800ce20:	4b20      	ldr	r3, [pc, #128]	@ (800cea4 <rxSessionAcceptFrame+0x248>)
 800ce22:	4a16      	ldr	r2, [pc, #88]	@ (800ce7c <rxSessionAcceptFrame+0x220>)
 800ce24:	f240 3119 	movw	r1, #793	@ 0x319
 800ce28:	4815      	ldr	r0, [pc, #84]	@ (800ce80 <rxSessionAcceptFrame+0x224>)
 800ce2a:	f000 fdc1 	bl	800d9b0 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 800ce2e:	6a3b      	ldr	r3, [r7, #32]
 800ce30:	691a      	ldr	r2, [r3, #16]
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	4413      	add	r3, r2
 800ce36:	1e9a      	subs	r2, r3, #2
 800ce38:	6a3b      	ldr	r3, [r7, #32]
 800ce3a:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 800ce42:	68b9      	ldr	r1, [r7, #8]
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f7ff fec3 	bl	800cbd0 <rxSessionRestart>
 800ce4a:	e00e      	b.n	800ce6a <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	7e1b      	ldrb	r3, [r3, #24]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	bf14      	ite	ne
 800ce54:	2301      	movne	r3, #1
 800ce56:	2300      	moveq	r3, #0
 800ce58:	b2db      	uxtb	r3, r3
 800ce5a:	f083 0301 	eor.w	r3, r3, #1
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	f003 0301 	and.w	r3, r3, #1
 800ce64:	b2da      	uxtb	r2, r3
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	761a      	strb	r2, [r3, #24]
    }
    return out;
 800ce6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3718      	adds	r7, #24
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	08012484 	.word	0x08012484
 800ce7c:	08013198 	.word	0x08013198
 800ce80:	080122c0 	.word	0x080122c0
 800ce84:	080127e0 	.word	0x080127e0
 800ce88:	08012718 	.word	0x08012718
 800ce8c:	08012774 	.word	0x08012774
 800ce90:	080128b4 	.word	0x080128b4
 800ce94:	08012794 	.word	0x08012794
 800ce98:	080128dc 	.word	0x080128dc
 800ce9c:	080128e8 	.word	0x080128e8
 800cea0:	080128f4 	.word	0x080128f4
 800cea4:	08012924 	.word	0x08012924

0800cea8 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_transport_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 800cea8:	b5b0      	push	{r4, r5, r7, lr}
 800ceaa:	b088      	sub	sp, #32
 800ceac:	af02      	add	r7, sp, #8
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
 800ceb4:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d106      	bne.n	800ceca <rxSessionUpdate+0x22>
 800cebc:	4b6d      	ldr	r3, [pc, #436]	@ (800d074 <rxSessionUpdate+0x1cc>)
 800cebe:	4a6e      	ldr	r2, [pc, #440]	@ (800d078 <rxSessionUpdate+0x1d0>)
 800cec0:	f240 3137 	movw	r1, #823	@ 0x337
 800cec4:	486d      	ldr	r0, [pc, #436]	@ (800d07c <rxSessionUpdate+0x1d4>)
 800cec6:	f000 fd73 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d106      	bne.n	800cede <rxSessionUpdate+0x36>
 800ced0:	4b6b      	ldr	r3, [pc, #428]	@ (800d080 <rxSessionUpdate+0x1d8>)
 800ced2:	4a69      	ldr	r2, [pc, #420]	@ (800d078 <rxSessionUpdate+0x1d0>)
 800ced4:	f44f 714e 	mov.w	r1, #824	@ 0x338
 800ced8:	4868      	ldr	r0, [pc, #416]	@ (800d07c <rxSessionUpdate+0x1d4>)
 800ceda:	f000 fd69 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d106      	bne.n	800cef2 <rxSessionUpdate+0x4a>
 800cee4:	4b67      	ldr	r3, [pc, #412]	@ (800d084 <rxSessionUpdate+0x1dc>)
 800cee6:	4a64      	ldr	r2, [pc, #400]	@ (800d078 <rxSessionUpdate+0x1d0>)
 800cee8:	f240 3139 	movw	r1, #825	@ 0x339
 800ceec:	4863      	ldr	r0, [pc, #396]	@ (800d07c <rxSessionUpdate+0x1d4>)
 800ceee:	f000 fd5f 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800cef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d106      	bne.n	800cf06 <rxSessionUpdate+0x5e>
 800cef8:	4b63      	ldr	r3, [pc, #396]	@ (800d088 <rxSessionUpdate+0x1e0>)
 800cefa:	4a5f      	ldr	r2, [pc, #380]	@ (800d078 <rxSessionUpdate+0x1d0>)
 800cefc:	f240 313a 	movw	r1, #826	@ 0x33a
 800cf00:	485e      	ldr	r0, [pc, #376]	@ (800d07c <rxSessionUpdate+0x1d4>)
 800cf02:	f000 fd55 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	7d9b      	ldrb	r3, [r3, #22]
 800cf0a:	2b1f      	cmp	r3, #31
 800cf0c:	d906      	bls.n	800cf1c <rxSessionUpdate+0x74>
 800cf0e:	4b5f      	ldr	r3, [pc, #380]	@ (800d08c <rxSessionUpdate+0x1e4>)
 800cf10:	4a59      	ldr	r2, [pc, #356]	@ (800d078 <rxSessionUpdate+0x1d0>)
 800cf12:	f240 313b 	movw	r1, #827	@ 0x33b
 800cf16:	4859      	ldr	r0, [pc, #356]	@ (800d07c <rxSessionUpdate+0x1d4>)
 800cf18:	f000 fd4a 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	7b9b      	ldrb	r3, [r3, #14]
 800cf20:	2b1f      	cmp	r3, #31
 800cf22:	d906      	bls.n	800cf32 <rxSessionUpdate+0x8a>
 800cf24:	4b5a      	ldr	r3, [pc, #360]	@ (800d090 <rxSessionUpdate+0x1e8>)
 800cf26:	4a54      	ldr	r2, [pc, #336]	@ (800d078 <rxSessionUpdate+0x1d0>)
 800cf28:	f44f 714f 	mov.w	r1, #828	@ 0x33c
 800cf2c:	4853      	ldr	r0, [pc, #332]	@ (800d07c <rxSessionUpdate+0x1d4>)
 800cf2e:	f000 fd3f 	bl	800d9b0 <__assert_func>

    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf38:	68b9      	ldr	r1, [r7, #8]
 800cf3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf3e:	4290      	cmp	r0, r2
 800cf40:	eb71 0303 	sbcs.w	r3, r1, r3
 800cf44:	d20f      	bcs.n	800cf66 <rxSessionUpdate+0xbe>
                               ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf52:	1a84      	subs	r4, r0, r2
 800cf54:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800cf58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cf5c:	42a2      	cmp	r2, r4
 800cf5e:	41ab      	sbcs	r3, r5
 800cf60:	d201      	bcs.n	800cf66 <rxSessionUpdate+0xbe>
 800cf62:	2301      	movs	r3, #1
 800cf64:	e000      	b.n	800cf68 <rxSessionUpdate+0xc0>
 800cf66:	2300      	movs	r3, #0
 800cf68:	75bb      	strb	r3, [r7, #22]
 800cf6a:	7dbb      	ldrb	r3, [r7, #22]
 800cf6c:	f003 0301 	and.w	r3, r3, #1
 800cf70:	75bb      	strb	r3, [r7, #22]

    const bool not_previous_tid = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	7d9a      	ldrb	r2, [r3, #22]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	7b9b      	ldrb	r3, [r3, #14]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	f7ff fcf9 	bl	800c974 <rxComputeTransferIDDifference>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	bf8c      	ite	hi
 800cf88:	2301      	movhi	r3, #1
 800cf8a:	2300      	movls	r3, #0
 800cf8c:	757b      	strb	r3, [r7, #21]

    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800cf8e:	7dbb      	ldrb	r3, [r7, #22]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d10b      	bne.n	800cfac <rxSessionUpdate+0x104>
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	7ddb      	ldrb	r3, [r3, #23]
 800cf98:	78fa      	ldrb	r2, [r7, #3]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d108      	bne.n	800cfb0 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	7bdb      	ldrb	r3, [r3, #15]
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d004      	beq.n	800cfb0 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 800cfa6:	7d7b      	ldrb	r3, [r7, #21]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d001      	beq.n	800cfb0 <rxSessionUpdate+0x108>
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800cfac:	2301      	movs	r3, #1
 800cfae:	e000      	b.n	800cfb2 <rxSessionUpdate+0x10a>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	753b      	strb	r3, [r7, #20]
 800cfb4:	7d3b      	ldrb	r3, [r7, #20]
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	753b      	strb	r3, [r7, #20]

    if (need_restart)
 800cfbc:	7d3b      	ldrb	r3, [r7, #20]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d013      	beq.n	800cfea <rxSessionUpdate+0x142>
    {
        rxs->total_payload_size        = 0U;
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	609a      	str	r2, [r3, #8]
        rxs->payload_size              = 0U;
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc            = CRC_INITIAL;
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cfd4:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id               = frame->transfer_id;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	7b9a      	ldrb	r2, [r3, #14]
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	759a      	strb	r2, [r3, #22]
        rxs->toggle                    = INITIAL_TOGGLE_STATE;
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	761a      	strb	r2, [r3, #24]
        rxs->redundant_transport_index = redundant_transport_index;
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	78fa      	ldrb	r2, [r7, #3]
 800cfe8:	75da      	strb	r2, [r3, #23]
    }

    int8_t out = 0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	75fb      	strb	r3, [r7, #23]
    if (need_restart && (!frame->start_of_transfer))
 800cfee:	7d3b      	ldrb	r3, [r7, #20]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00b      	beq.n	800d00c <rxSessionUpdate+0x164>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	7bdb      	ldrb	r3, [r3, #15]
 800cff8:	f083 0301 	eor.w	r3, r3, #1
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d004      	beq.n	800d00c <rxSessionUpdate+0x164>
    {
        rxSessionRestart(ins, rxs);  // SOT-miss, no point going further.
 800d002:	68b9      	ldr	r1, [r7, #8]
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f7ff fde3 	bl	800cbd0 <rxSessionRestart>
 800d00a:	e02c      	b.n	800d066 <rxSessionUpdate+0x1be>
    }
    else
    {
        const bool correct_transport = (rxs->redundant_transport_index == redundant_transport_index);
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	7ddb      	ldrb	r3, [r3, #23]
 800d010:	78fa      	ldrb	r2, [r7, #3]
 800d012:	429a      	cmp	r2, r3
 800d014:	bf0c      	ite	eq
 800d016:	2301      	moveq	r3, #1
 800d018:	2300      	movne	r3, #0
 800d01a:	74fb      	strb	r3, [r7, #19]
        const bool correct_toggle    = (frame->toggle == rxs->toggle);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	7c5a      	ldrb	r2, [r3, #17]
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	7e1b      	ldrb	r3, [r3, #24]
 800d024:	429a      	cmp	r2, r3
 800d026:	bf0c      	ite	eq
 800d028:	2301      	moveq	r3, #1
 800d02a:	2300      	movne	r3, #0
 800d02c:	74bb      	strb	r3, [r7, #18]
        const bool correct_tid       = (frame->transfer_id == rxs->transfer_id);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	7b9a      	ldrb	r2, [r3, #14]
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	7d9b      	ldrb	r3, [r3, #22]
 800d036:	429a      	cmp	r2, r3
 800d038:	bf0c      	ite	eq
 800d03a:	2301      	moveq	r3, #1
 800d03c:	2300      	movne	r3, #0
 800d03e:	747b      	strb	r3, [r7, #17]
        if (correct_transport && correct_toggle && correct_tid)
 800d040:	7cfb      	ldrb	r3, [r7, #19]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00f      	beq.n	800d066 <rxSessionUpdate+0x1be>
 800d046:	7cbb      	ldrb	r3, [r7, #18]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00c      	beq.n	800d066 <rxSessionUpdate+0x1be>
 800d04c:	7c7b      	ldrb	r3, [r7, #17]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d009      	beq.n	800d066 <rxSessionUpdate+0x1be>
        {
            out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 800d052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d054:	9300      	str	r3, [sp, #0]
 800d056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	68b9      	ldr	r1, [r7, #8]
 800d05c:	68f8      	ldr	r0, [r7, #12]
 800d05e:	f7ff fdfd 	bl	800cc5c <rxSessionAcceptFrame>
 800d062:	4603      	mov	r3, r0
 800d064:	75fb      	strb	r3, [r7, #23]
        }
    }
    return out;
 800d066:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3718      	adds	r7, #24
 800d06e:	46bd      	mov	sp, r7
 800d070:	bdb0      	pop	{r4, r5, r7, pc}
 800d072:	bf00      	nop
 800d074:	08012484 	.word	0x08012484
 800d078:	08013154 	.word	0x08013154
 800d07c:	080122c0 	.word	0x080122c0
 800d080:	080127e0 	.word	0x080127e0
 800d084:	08012718 	.word	0x08012718
 800d088:	08012794 	.word	0x08012794
 800d08c:	0801295c 	.word	0x0801295c
 800d090:	080128b4 	.word	0x080128b4

0800d094 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_transport_index,
                                    CanardRxTransfer* const     out_transfer)
{
 800d094:	b5b0      	push	{r4, r5, r7, lr}
 800d096:	b08c      	sub	sp, #48	@ 0x30
 800d098:	af04      	add	r7, sp, #16
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
 800d0a0:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d106      	bne.n	800d0b6 <rxAcceptFrame+0x22>
 800d0a8:	4b85      	ldr	r3, [pc, #532]	@ (800d2c0 <rxAcceptFrame+0x22c>)
 800d0aa:	4a86      	ldr	r2, [pc, #536]	@ (800d2c4 <rxAcceptFrame+0x230>)
 800d0ac:	f44f 715a 	mov.w	r1, #872	@ 0x368
 800d0b0:	4885      	ldr	r0, [pc, #532]	@ (800d2c8 <rxAcceptFrame+0x234>)
 800d0b2:	f000 fc7d 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d106      	bne.n	800d0ca <rxAcceptFrame+0x36>
 800d0bc:	4b83      	ldr	r3, [pc, #524]	@ (800d2cc <rxAcceptFrame+0x238>)
 800d0be:	4a81      	ldr	r2, [pc, #516]	@ (800d2c4 <rxAcceptFrame+0x230>)
 800d0c0:	f240 3169 	movw	r1, #873	@ 0x369
 800d0c4:	4880      	ldr	r0, [pc, #512]	@ (800d2c8 <rxAcceptFrame+0x234>)
 800d0c6:	f000 fc73 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	8b9a      	ldrh	r2, [r3, #28]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	895b      	ldrh	r3, [r3, #10]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d006      	beq.n	800d0e4 <rxAcceptFrame+0x50>
 800d0d6:	4b7e      	ldr	r3, [pc, #504]	@ (800d2d0 <rxAcceptFrame+0x23c>)
 800d0d8:	4a7a      	ldr	r2, [pc, #488]	@ (800d2c4 <rxAcceptFrame+0x230>)
 800d0da:	f240 316a 	movw	r1, #874	@ 0x36a
 800d0de:	487a      	ldr	r0, [pc, #488]	@ (800d2c8 <rxAcceptFrame+0x234>)
 800d0e0:	f000 fc66 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d106      	bne.n	800d0f8 <rxAcceptFrame+0x64>
 800d0ea:	4b7a      	ldr	r3, [pc, #488]	@ (800d2d4 <rxAcceptFrame+0x240>)
 800d0ec:	4a75      	ldr	r2, [pc, #468]	@ (800d2c4 <rxAcceptFrame+0x230>)
 800d0ee:	f240 316b 	movw	r1, #875	@ 0x36b
 800d0f2:	4875      	ldr	r0, [pc, #468]	@ (800d2c8 <rxAcceptFrame+0x234>)
 800d0f4:	f000 fc5c 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	699b      	ldr	r3, [r3, #24]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d106      	bne.n	800d10e <rxAcceptFrame+0x7a>
 800d100:	4b75      	ldr	r3, [pc, #468]	@ (800d2d8 <rxAcceptFrame+0x244>)
 800d102:	4a70      	ldr	r2, [pc, #448]	@ (800d2c4 <rxAcceptFrame+0x230>)
 800d104:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 800d108:	486f      	ldr	r0, [pc, #444]	@ (800d2c8 <rxAcceptFrame+0x234>)
 800d10a:	f000 fc51 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	7b9b      	ldrb	r3, [r3, #14]
 800d112:	2b1f      	cmp	r3, #31
 800d114:	d906      	bls.n	800d124 <rxAcceptFrame+0x90>
 800d116:	4b71      	ldr	r3, [pc, #452]	@ (800d2dc <rxAcceptFrame+0x248>)
 800d118:	4a6a      	ldr	r2, [pc, #424]	@ (800d2c4 <rxAcceptFrame+0x230>)
 800d11a:	f240 316d 	movw	r1, #877	@ 0x36d
 800d11e:	486a      	ldr	r0, [pc, #424]	@ (800d2c8 <rxAcceptFrame+0x234>)
 800d120:	f000 fc46 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	7b5b      	ldrb	r3, [r3, #13]
 800d128:	2bff      	cmp	r3, #255	@ 0xff
 800d12a:	d00c      	beq.n	800d146 <rxAcceptFrame+0xb2>
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	791a      	ldrb	r2, [r3, #4]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	7b5b      	ldrb	r3, [r3, #13]
 800d134:	429a      	cmp	r2, r3
 800d136:	d006      	beq.n	800d146 <rxAcceptFrame+0xb2>
 800d138:	4b69      	ldr	r3, [pc, #420]	@ (800d2e0 <rxAcceptFrame+0x24c>)
 800d13a:	4a62      	ldr	r2, [pc, #392]	@ (800d2c4 <rxAcceptFrame+0x230>)
 800d13c:	f240 316e 	movw	r1, #878	@ 0x36e
 800d140:	4861      	ldr	r0, [pc, #388]	@ (800d2c8 <rxAcceptFrame+0x234>)
 800d142:	f000 fc35 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800d146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d106      	bne.n	800d15a <rxAcceptFrame+0xc6>
 800d14c:	4b65      	ldr	r3, [pc, #404]	@ (800d2e4 <rxAcceptFrame+0x250>)
 800d14e:	4a5d      	ldr	r2, [pc, #372]	@ (800d2c4 <rxAcceptFrame+0x230>)
 800d150:	f240 316f 	movw	r1, #879	@ 0x36f
 800d154:	485c      	ldr	r0, [pc, #368]	@ (800d2c8 <rxAcceptFrame+0x234>)
 800d156:	f000 fc2b 	bl	800d9b0 <__assert_func>

    int8_t out = 0;
 800d15a:	2300      	movs	r3, #0
 800d15c:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	7b1b      	ldrb	r3, [r3, #12]
 800d162:	b25b      	sxtb	r3, r3
 800d164:	2b00      	cmp	r3, #0
 800d166:	db6c      	blt.n	800d242 <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	7b1b      	ldrb	r3, [r3, #12]
 800d16c:	68ba      	ldr	r2, [r7, #8]
 800d16e:	3308      	adds	r3, #8
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	4413      	add	r3, r2
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d134      	bne.n	800d1e4 <rxAcceptFrame+0x150>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	7bdb      	ldrb	r3, [r3, #15]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d030      	beq.n	800d1e4 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	2120      	movs	r1, #32
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	4798      	blx	r3
 800d18c:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	7b1b      	ldrb	r3, [r3, #12]
 800d192:	68ba      	ldr	r2, [r7, #8]
 800d194:	3308      	adds	r3, #8
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4413      	add	r3, r2
 800d19a:	693a      	ldr	r2, [r7, #16]
 800d19c:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d01d      	beq.n	800d1e0 <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec   = frame->timestamp_usec;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	6939      	ldr	r1, [r7, #16]
 800d1ac:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size        = 0U;
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	609a      	str	r2, [r3, #8]
                rxs->payload_size              = 0U;
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	60da      	str	r2, [r3, #12]
                rxs->payload                   = NULL;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc            = CRC_INITIAL;
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d1c8:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id               = frame->transfer_id;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	7b9a      	ldrb	r2, [r3, #14]
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	759a      	strb	r2, [r3, #22]
                rxs->redundant_transport_index = redundant_transport_index;
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	78fa      	ldrb	r2, [r7, #3]
 800d1d6:	75da      	strb	r2, [r3, #23]
                rxs->toggle                    = INITIAL_TOGGLE_STATE;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	2201      	movs	r2, #1
 800d1dc:	761a      	strb	r2, [r3, #24]
 800d1de:	e001      	b.n	800d1e4 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 800d1e0:	23fd      	movs	r3, #253	@ 0xfd
 800d1e2:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	7b1b      	ldrb	r3, [r3, #12]
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	3308      	adds	r3, #8
 800d1ec:	009b      	lsls	r3, r3, #2
 800d1ee:	4413      	add	r3, r2
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d05e      	beq.n	800d2b4 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 800d1f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d006      	beq.n	800d20c <rxAcceptFrame+0x178>
 800d1fe:	4b3a      	ldr	r3, [pc, #232]	@ (800d2e8 <rxAcceptFrame+0x254>)
 800d200:	4a30      	ldr	r2, [pc, #192]	@ (800d2c4 <rxAcceptFrame+0x230>)
 800d202:	f240 318e 	movw	r1, #910	@ 0x38e
 800d206:	4830      	ldr	r0, [pc, #192]	@ (800d2c8 <rxAcceptFrame+0x234>)
 800d208:	f000 fbd2 	bl	800d9b0 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	7b1b      	ldrb	r3, [r3, #12]
 800d210:	68ba      	ldr	r2, [r7, #8]
 800d212:	3308      	adds	r3, #8
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	4413      	add	r3, r2
 800d218:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d220:	68b9      	ldr	r1, [r7, #8]
 800d222:	6989      	ldr	r1, [r1, #24]
 800d224:	78fd      	ldrb	r5, [r7, #3]
 800d226:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d228:	9003      	str	r0, [sp, #12]
 800d22a:	9102      	str	r1, [sp, #8]
 800d22c:	e9cd 2300 	strd	r2, r3, [sp]
 800d230:	462b      	mov	r3, r5
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	4621      	mov	r1, r4
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f7ff fe36 	bl	800cea8 <rxSessionUpdate>
 800d23c:	4603      	mov	r3, r0
 800d23e:	77fb      	strb	r3, [r7, #31]
 800d240:	e038      	b.n	800d2b4 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	7b1b      	ldrb	r3, [r3, #12]
 800d246:	2bff      	cmp	r3, #255	@ 0xff
 800d248:	d006      	beq.n	800d258 <rxAcceptFrame+0x1c4>
 800d24a:	4b28      	ldr	r3, [pc, #160]	@ (800d2ec <rxAcceptFrame+0x258>)
 800d24c:	4a1d      	ldr	r2, [pc, #116]	@ (800d2c4 <rxAcceptFrame+0x230>)
 800d24e:	f240 319a 	movw	r1, #922	@ 0x39a
 800d252:	481d      	ldr	r0, [pc, #116]	@ (800d2c8 <rxAcceptFrame+0x234>)
 800d254:	f000 fbac 	bl	800d9b0 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	695a      	ldr	r2, [r3, #20]
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 800d260:	4293      	cmp	r3, r2
 800d262:	bf28      	it	cs
 800d264:	4613      	movcs	r3, r2
 800d266:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	69b9      	ldr	r1, [r7, #24]
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	4798      	blx	r3
 800d272:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d01a      	beq.n	800d2b0 <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800d27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27c:	4619      	mov	r1, r3
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7ff fb32 	bl	800c8e8 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d28c:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 800d290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d292:	69ba      	ldr	r2, [r7, #24]
 800d294:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 800d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d298:	697a      	ldr	r2, [r7, #20]
 800d29a:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	699b      	ldr	r3, [r3, #24]
 800d2a0:	69ba      	ldr	r2, [r7, #24]
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6978      	ldr	r0, [r7, #20]
 800d2a6:	f001 fd14 	bl	800ecd2 <memcpy>
            out = 1;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	77fb      	strb	r3, [r7, #31]
 800d2ae:	e001      	b.n	800d2b4 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 800d2b0:	23fd      	movs	r3, #253	@ 0xfd
 800d2b2:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800d2b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3720      	adds	r7, #32
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bdb0      	pop	{r4, r5, r7, pc}
 800d2c0:	08012484 	.word	0x08012484
 800d2c4:	08013144 	.word	0x08013144
 800d2c8:	080122c0 	.word	0x080122c0
 800d2cc:	08012984 	.word	0x08012984
 800d2d0:	080129a0 	.word	0x080129a0
 800d2d4:	08012718 	.word	0x08012718
 800d2d8:	08012774 	.word	0x08012774
 800d2dc:	080128b4 	.word	0x080128b4
 800d2e0:	080129c8 	.word	0x080129c8
 800d2e4:	08012794 	.word	0x08012794
 800d2e8:	08012a20 	.word	0x08012a20
 800d2ec:	08012a2c 	.word	0x08012a2c

0800d2f0 <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	881b      	ldrh	r3, [r3, #0]
 800d2fe:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) node)->port_id;
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	8b9b      	ldrh	r3, [r3, #28]
 800d304:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 800d306:	89fa      	ldrh	r2, [r7, #14]
 800d308:	89bb      	ldrh	r3, [r7, #12]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d00a      	beq.n	800d324 <rxSubscriptionPredicateOnPortID+0x34>
 800d30e:	89fa      	ldrh	r2, [r7, #14]
 800d310:	89bb      	ldrh	r3, [r7, #12]
 800d312:	429a      	cmp	r2, r3
 800d314:	bf8c      	ite	hi
 800d316:	2301      	movhi	r3, #1
 800d318:	2300      	movls	r3, #0
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	461a      	mov	r2, r3
 800d31e:	4b05      	ldr	r3, [pc, #20]	@ (800d334 <rxSubscriptionPredicateOnPortID+0x44>)
 800d320:	569b      	ldrsb	r3, [r3, r2]
 800d322:	e000      	b.n	800d326 <rxSubscriptionPredicateOnPortID+0x36>
 800d324:	2300      	movs	r3, #0
}
 800d326:	4618      	mov	r0, r3
 800d328:	3714      	adds	r7, #20
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop
 800d334:	08013130 	.word	0x08013130

0800d338 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	331c      	adds	r3, #28
 800d346:	6839      	ldr	r1, [r7, #0]
 800d348:	4618      	mov	r0, r3
 800d34a:	f7ff ffd1 	bl	800d2f0 <rxSubscriptionPredicateOnPortID>
 800d34e:	4603      	mov	r3, r0
}
 800d350:	4618      	mov	r0, r3
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 800d358:	b5b0      	push	{r4, r5, r7, lr}
 800d35a:	b08c      	sub	sp, #48	@ 0x30
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d106      	bne.n	800d378 <canardInit+0x20>
 800d36a:	4b16      	ldr	r3, [pc, #88]	@ (800d3c4 <canardInit+0x6c>)
 800d36c:	4a16      	ldr	r2, [pc, #88]	@ (800d3c8 <canardInit+0x70>)
 800d36e:	f240 31d6 	movw	r1, #982	@ 0x3d6
 800d372:	4816      	ldr	r0, [pc, #88]	@ (800d3cc <canardInit+0x74>)
 800d374:	f000 fb1c 	bl	800d9b0 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d106      	bne.n	800d38c <canardInit+0x34>
 800d37e:	4b14      	ldr	r3, [pc, #80]	@ (800d3d0 <canardInit+0x78>)
 800d380:	4a11      	ldr	r2, [pc, #68]	@ (800d3c8 <canardInit+0x70>)
 800d382:	f240 31d7 	movw	r1, #983	@ 0x3d7
 800d386:	4811      	ldr	r0, [pc, #68]	@ (800d3cc <canardInit+0x74>)
 800d388:	f000 fb12 	bl	800d9b0 <__assert_func>
    const CanardInstance out = {
 800d38c:	2300      	movs	r3, #0
 800d38e:	617b      	str	r3, [r7, #20]
 800d390:	23ff      	movs	r3, #255	@ 0xff
 800d392:	763b      	strb	r3, [r7, #24]
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	61fb      	str	r3, [r7, #28]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	623b      	str	r3, [r7, #32]
 800d39c:	2300      	movs	r3, #0
 800d39e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	461d      	mov	r5, r3
 800d3ac:	f107 0414 	add.w	r4, r7, #20
 800d3b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d3b4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d3b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	3730      	adds	r7, #48	@ 0x30
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bdb0      	pop	{r4, r5, r7, pc}
 800d3c4:	08012a4c 	.word	0x08012a4c
 800d3c8:	08012fb8 	.word	0x08012fb8
 800d3cc:	080122c0 	.word	0x080122c0
 800d3d0:	08012a6c 	.word	0x08012a6c

0800d3d4 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 800d3d4:	b4b0      	push	{r4, r5, r7}
 800d3d6:	b08b      	sub	sp, #44	@ 0x2c
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	617b      	str	r3, [r7, #20]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	61bb      	str	r3, [r7, #24]
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	61fb      	str	r3, [r7, #28]
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	623b      	str	r3, [r7, #32]
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	627b      	str	r3, [r7, #36]	@ 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	461d      	mov	r5, r3
 800d3f8:	f107 0414 	add.w	r4, r7, #20
 800d3fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d400:	6823      	ldr	r3, [r4, #0]
 800d402:	602b      	str	r3, [r5, #0]
}
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	372c      	adds	r7, #44	@ 0x2c
 800d408:	46bd      	mov	sp, r7
 800d40a:	bcb0      	pop	{r4, r5, r7}
 800d40c:	4770      	bx	lr
	...

0800d410 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b08e      	sub	sp, #56	@ 0x38
 800d414:	af06      	add	r7, sp, #24
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800d41e:	f06f 0301 	mvn.w	r3, #1
 800d422:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d062      	beq.n	800d4f0 <canardTxPush+0xe0>
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d05f      	beq.n	800d4f0 <canardTxPush+0xe0>
 800d430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d432:	2b00      	cmp	r3, #0
 800d434:	d05c      	beq.n	800d4f0 <canardTxPush+0xe0>
 800d436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d102      	bne.n	800d442 <canardTxPush+0x32>
 800d43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d156      	bne.n	800d4f0 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	4618      	mov	r0, r3
 800d448:	f7fe fc02 	bl	800bc50 <adjustPresentationLayerMTU>
 800d44c:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	791a      	ldrb	r2, [r3, #4]
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	4613      	mov	r3, r2
 800d458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d45a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d45c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d45e:	f7fe fc27 	bl	800bcb0 <txMakeCANID>
 800d462:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	2b00      	cmp	r3, #0
 800d468:	db40      	blt.n	800d4ec <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 800d46a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d81c      	bhi.n	800d4ac <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800d472:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 800d474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d476:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 800d478:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d47a:	9103      	str	r1, [sp, #12]
 800d47c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d47e:	9102      	str	r1, [sp, #8]
 800d480:	9201      	str	r2, [sp, #4]
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d488:	68b9      	ldr	r1, [r7, #8]
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	f7fe fdda 	bl	800c044 <txPushSingleFrame>
 800d490:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	2b00      	cmp	r3, #0
 800d496:	db2b      	blt.n	800d4f0 <canardTxPush+0xe0>
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d028      	beq.n	800d4f0 <canardTxPush+0xe0>
 800d49e:	4b1c      	ldr	r3, [pc, #112]	@ (800d510 <canardTxPush+0x100>)
 800d4a0:	4a1c      	ldr	r2, [pc, #112]	@ (800d514 <canardTxPush+0x104>)
 800d4a2:	f240 4105 	movw	r1, #1029	@ 0x405
 800d4a6:	481c      	ldr	r0, [pc, #112]	@ (800d518 <canardTxPush+0x108>)
 800d4a8:	f000 fa82 	bl	800d9b0 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 800d4ac:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 800d4ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4b0:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 800d4b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d4b4:	9105      	str	r1, [sp, #20]
 800d4b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4b8:	9104      	str	r1, [sp, #16]
 800d4ba:	9203      	str	r2, [sp, #12]
 800d4bc:	9302      	str	r3, [sp, #8]
 800d4be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4c2:	e9cd 2300 	strd	r2, r3, [sp]
 800d4c6:	69ba      	ldr	r2, [r7, #24]
 800d4c8:	68b9      	ldr	r1, [r7, #8]
 800d4ca:	68f8      	ldr	r0, [r7, #12]
 800d4cc:	f7fe ffd4 	bl	800c478 <txPushMultiFrame>
 800d4d0:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	db0b      	blt.n	800d4f0 <canardTxPush+0xe0>
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	dc08      	bgt.n	800d4f0 <canardTxPush+0xe0>
 800d4de:	4b0f      	ldr	r3, [pc, #60]	@ (800d51c <canardTxPush+0x10c>)
 800d4e0:	4a0c      	ldr	r2, [pc, #48]	@ (800d514 <canardTxPush+0x104>)
 800d4e2:	f240 4111 	movw	r1, #1041	@ 0x411
 800d4e6:	480c      	ldr	r0, [pc, #48]	@ (800d518 <canardTxPush+0x108>)
 800d4e8:	f000 fa62 	bl	800d9b0 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d106      	bne.n	800d504 <canardTxPush+0xf4>
 800d4f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d520 <canardTxPush+0x110>)
 800d4f8:	4a06      	ldr	r2, [pc, #24]	@ (800d514 <canardTxPush+0x104>)
 800d4fa:	f240 4119 	movw	r1, #1049	@ 0x419
 800d4fe:	4806      	ldr	r0, [pc, #24]	@ (800d518 <canardTxPush+0x108>)
 800d500:	f000 fa56 	bl	800d9b0 <__assert_func>
    return out;
 800d504:	69fb      	ldr	r3, [r7, #28]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3720      	adds	r7, #32
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	080125bc 	.word	0x080125bc
 800d514:	08012fc4 	.word	0x08012fc4
 800d518:	080122c0 	.word	0x080122c0
 800d51c:	08012700 	.word	0x08012700
 800d520:	08012a88 	.word	0x08012a88

0800d524 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 800d52c:	2300      	movs	r3, #0
 800d52e:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d006      	beq.n	800d544 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) cavlFindExtremum(que->root, false);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	2100      	movs	r1, #0
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7fd ff1d 	bl	800b37c <cavlFindExtremum>
 800d542:	60f8      	str	r0, [r7, #12]
    }
    return out;
 800d544:	68fb      	ldr	r3, [r7, #12]
}
 800d546:	4618      	mov	r0, r3
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}

0800d54e <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 800d54e:	b580      	push	{r7, lr}
 800d550:	b084      	sub	sp, #16
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
 800d556:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 800d558:	2300      	movs	r3, #0
 800d55a:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d010      	beq.n	800d584 <canardTxPop+0x36>
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00d      	beq.n	800d584 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	330c      	adds	r3, #12
 800d570:	683a      	ldr	r2, [r7, #0]
 800d572:	4611      	mov	r1, r2
 800d574:	4618      	mov	r0, r3
 800d576:	f7fe f957 	bl	800b828 <cavlRemove>
        que->size--;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	1e5a      	subs	r2, r3, #1
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	609a      	str	r2, [r3, #8]
    }
    return out;
 800d584:	68fb      	ldr	r3, [r7, #12]
}
 800d586:	4618      	mov	r0, r3
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
	...

0800d590 <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_transport_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b090      	sub	sp, #64	@ 0x40
 800d594:	af02      	add	r7, sp, #8
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800d59c:	23fe      	movs	r3, #254	@ 0xfe
 800d59e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d068      	beq.n	800d67a <canardRxAccept+0xea>
 800d5a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d065      	beq.n	800d67a <canardRxAccept+0xea>
 800d5ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d062      	beq.n	800d67a <canardRxAccept+0xea>
 800d5b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d5bc:	d25d      	bcs.n	800d67a <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800d5be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5c0:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d103      	bne.n	800d5ce <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800d5c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d155      	bne.n	800d67a <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 800d5ce:	f107 0310 	add.w	r3, r7, #16
 800d5d2:	2220      	movs	r2, #32
 800d5d4:	2100      	movs	r1, #0
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f001 fa95 	bl	800eb06 <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 800d5dc:	f107 0310 	add.w	r3, r7, #16
 800d5e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d5e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d5e6:	f7ff f83b 	bl	800c660 <rxTryParseFrame>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d041      	beq.n	800d674 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 800d5f0:	7f7b      	ldrb	r3, [r7, #29]
 800d5f2:	2bff      	cmp	r3, #255	@ 0xff
 800d5f4:	d004      	beq.n	800d600 <canardRxAccept+0x70>
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	791a      	ldrb	r2, [r3, #4]
 800d5fa:	7f7b      	ldrb	r3, [r7, #29]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d135      	bne.n	800d66c <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 800d600:	7e7b      	ldrb	r3, [r7, #25]
 800d602:	3304      	adds	r3, #4
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	18d0      	adds	r0, r2, r3
 800d60a:	f107 0310 	add.w	r3, r7, #16
 800d60e:	f103 010a 	add.w	r1, r3, #10
 800d612:	2300      	movs	r3, #0
 800d614:	4a21      	ldr	r2, [pc, #132]	@ (800d69c <canardRxAccept+0x10c>)
 800d616:	f7fe f889 	bl	800b72c <cavlSearch>
 800d61a:	6338      	str	r0, [r7, #48]	@ 0x30
                                                       &model.port_id,
                                                       &rxSubscriptionPredicateOnPortID,
                                                       NULL);
                if (out_subscription != NULL)
 800d61c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d002      	beq.n	800d628 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 800d622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d626:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 800d628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d01a      	beq.n	800d664 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 800d62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d630:	8b9a      	ldrh	r2, [r3, #28]
 800d632:	8b7b      	ldrh	r3, [r7, #26]
 800d634:	429a      	cmp	r2, r3
 800d636:	d006      	beq.n	800d646 <canardRxAccept+0xb6>
 800d638:	4b19      	ldr	r3, [pc, #100]	@ (800d6a0 <canardRxAccept+0x110>)
 800d63a:	4a1a      	ldr	r2, [pc, #104]	@ (800d6a4 <canardRxAccept+0x114>)
 800d63c:	f240 415a 	movw	r1, #1114	@ 0x45a
 800d640:	4819      	ldr	r0, [pc, #100]	@ (800d6a8 <canardRxAccept+0x118>)
 800d642:	f000 f9b5 	bl	800d9b0 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_transport_index, out_transfer);
 800d646:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 800d64a:	f107 0210 	add.w	r2, r7, #16
 800d64e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	460b      	mov	r3, r1
 800d654:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	f7ff fd1c 	bl	800d094 <rxAcceptFrame>
 800d65c:	4603      	mov	r3, r0
 800d65e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 800d662:	e00a      	b.n	800d67a <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 800d664:	2300      	movs	r3, #0
 800d666:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 800d66a:	e006      	b.n	800d67a <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 800d66c:	2300      	movs	r3, #0
 800d66e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d672:	e002      	b.n	800d67a <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-UAVCAN/CAN input frame.
 800d674:	2300      	movs	r3, #0
 800d676:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 800d67a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d67e:	2b01      	cmp	r3, #1
 800d680:	dd06      	ble.n	800d690 <canardRxAccept+0x100>
 800d682:	4b0a      	ldr	r3, [pc, #40]	@ (800d6ac <canardRxAccept+0x11c>)
 800d684:	4a07      	ldr	r2, [pc, #28]	@ (800d6a4 <canardRxAccept+0x114>)
 800d686:	f240 416c 	movw	r1, #1132	@ 0x46c
 800d68a:	4807      	ldr	r0, [pc, #28]	@ (800d6a8 <canardRxAccept+0x118>)
 800d68c:	f000 f990 	bl	800d9b0 <__assert_func>
    return out;
 800d690:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d694:	4618      	mov	r0, r3
 800d696:	3738      	adds	r7, #56	@ 0x38
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	0800d2f1 	.word	0x0800d2f1
 800d6a0:	08012a94 	.word	0x08012a94
 800d6a4:	08013120 	.word	0x08013120
 800d6a8:	080122c0 	.word	0x080122c0
 800d6ac:	08012ab4 	.word	0x08012ab4

0800d6b0 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b088      	sub	sp, #32
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	607b      	str	r3, [r7, #4]
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	72fb      	strb	r3, [r7, #11]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800d6c2:	23fe      	movs	r3, #254	@ 0xfe
 800d6c4:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800d6c6:	7afb      	ldrb	r3, [r7, #11]
 800d6c8:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d04a      	beq.n	800d766 <canardRxSubscribe+0xb6>
 800d6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d047      	beq.n	800d766 <canardRxSubscribe+0xb6>
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	2b02      	cmp	r3, #2
 800d6da:	d844      	bhi.n	800d766 <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 800d6dc:	893a      	ldrh	r2, [r7, #8]
 800d6de:	7afb      	ldrb	r3, [r7, #11]
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	68f8      	ldr	r0, [r7, #12]
 800d6e4:	f000 f850 	bl	800d788 <canardRxUnsubscribe>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 800d6ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	db38      	blt.n	800d766 <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 800d6f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d6f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d6fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 800d704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d706:	893a      	ldrh	r2, [r7, #8]
 800d708:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800d70a:	2300      	movs	r3, #0
 800d70c:	61bb      	str	r3, [r7, #24]
 800d70e:	e009      	b.n	800d724 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 800d710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d712:	69bb      	ldr	r3, [r7, #24]
 800d714:	3308      	adds	r3, #8
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	4413      	add	r3, r2
 800d71a:	2200      	movs	r2, #0
 800d71c:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	3301      	adds	r3, #1
 800d722:	61bb      	str	r3, [r7, #24]
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	2b7f      	cmp	r3, #127	@ 0x7f
 800d728:	d9f2      	bls.n	800d710 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	3304      	adds	r3, #4
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	18d0      	adds	r0, r2, r3
 800d734:	4b0f      	ldr	r3, [pc, #60]	@ (800d774 <canardRxSubscribe+0xc4>)
 800d736:	4a10      	ldr	r2, [pc, #64]	@ (800d778 <canardRxSubscribe+0xc8>)
 800d738:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d73a:	f7fd fff7 	bl	800b72c <cavlSearch>
 800d73e:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 800d740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d742:	693a      	ldr	r2, [r7, #16]
 800d744:	429a      	cmp	r2, r3
 800d746:	d006      	beq.n	800d756 <canardRxSubscribe+0xa6>
 800d748:	4b0c      	ldr	r3, [pc, #48]	@ (800d77c <canardRxSubscribe+0xcc>)
 800d74a:	4a0d      	ldr	r2, [pc, #52]	@ (800d780 <canardRxSubscribe+0xd0>)
 800d74c:	f44f 6192 	mov.w	r1, #1168	@ 0x490
 800d750:	480c      	ldr	r0, [pc, #48]	@ (800d784 <canardRxSubscribe+0xd4>)
 800d752:	f000 f92d 	bl	800d9b0 <__assert_func>
            out = (out > 0) ? 0 : 1;
 800d756:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	bfd4      	ite	le
 800d75e:	2301      	movle	r3, #1
 800d760:	2300      	movgt	r3, #0
 800d762:	b2db      	uxtb	r3, r3
 800d764:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800d766:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3720      	adds	r7, #32
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	0800ba8d 	.word	0x0800ba8d
 800d778:	0800d339 	.word	0x0800d339
 800d77c:	08012ac0 	.word	0x08012ac0
 800d780:	080131e8 	.word	0x080131e8
 800d784:	080122c0 	.word	0x080122c0

0800d788 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b088      	sub	sp, #32
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	460b      	mov	r3, r1
 800d792:	70fb      	strb	r3, [r7, #3]
 800d794:	4613      	mov	r3, r2
 800d796:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800d798:	23fe      	movs	r3, #254	@ 0xfe
 800d79a:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800d79c:	78fb      	ldrb	r3, [r7, #3]
 800d79e:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d05f      	beq.n	800d866 <canardRxUnsubscribe+0xde>
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	2b02      	cmp	r3, #2
 800d7aa:	d85c      	bhi.n	800d866 <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 800d7ac:	883b      	ldrh	r3, [r7, #0]
 800d7ae:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	3304      	adds	r3, #4
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	18d0      	adds	r0, r2, r3
 800d7ba:	f107 010e 	add.w	r1, r7, #14
 800d7be:	2300      	movs	r3, #0
 800d7c0:	4a2c      	ldr	r2, [pc, #176]	@ (800d874 <canardRxUnsubscribe+0xec>)
 800d7c2:	f7fd ffb3 	bl	800b72c <cavlSearch>
 800d7c6:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d049      	beq.n	800d862 <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	3304      	adds	r3, #4
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	693a      	ldr	r2, [r7, #16]
 800d7da:	4611      	mov	r1, r2
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7fe f823 	bl	800b828 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	8b9b      	ldrh	r3, [r3, #28]
 800d7e6:	883a      	ldrh	r2, [r7, #0]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d006      	beq.n	800d7fa <canardRxUnsubscribe+0x72>
 800d7ec:	4b22      	ldr	r3, [pc, #136]	@ (800d878 <canardRxUnsubscribe+0xf0>)
 800d7ee:	4a23      	ldr	r2, [pc, #140]	@ (800d87c <canardRxUnsubscribe+0xf4>)
 800d7f0:	f240 41a5 	movw	r1, #1189	@ 0x4a5
 800d7f4:	4822      	ldr	r0, [pc, #136]	@ (800d880 <canardRxUnsubscribe+0xf8>)
 800d7f6:	f000 f8db 	bl	800d9b0 <__assert_func>
            out = 1;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800d7fe:	2300      	movs	r3, #0
 800d800:	61bb      	str	r3, [r7, #24]
 800d802:	e02a      	b.n	800d85a <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	68da      	ldr	r2, [r3, #12]
 800d808:	6939      	ldr	r1, [r7, #16]
 800d80a:	69bb      	ldr	r3, [r7, #24]
 800d80c:	3308      	adds	r3, #8
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	440b      	add	r3, r1
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d007      	beq.n	800d828 <canardRxUnsubscribe+0xa0>
 800d818:	6939      	ldr	r1, [r7, #16]
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	3308      	adds	r3, #8
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	440b      	add	r3, r1
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	691b      	ldr	r3, [r3, #16]
 800d826:	e000      	b.n	800d82a <canardRxUnsubscribe+0xa2>
 800d828:	2300      	movs	r3, #0
 800d82a:	4619      	mov	r1, r3
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	68da      	ldr	r2, [r3, #12]
 800d834:	6939      	ldr	r1, [r7, #16]
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	3308      	adds	r3, #8
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	440b      	add	r3, r1
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	4619      	mov	r1, r3
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	4790      	blx	r2
                sub->sessions[i] = NULL;
 800d846:	693a      	ldr	r2, [r7, #16]
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	3308      	adds	r3, #8
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4413      	add	r3, r2
 800d850:	2200      	movs	r2, #0
 800d852:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	3301      	adds	r3, #1
 800d858:	61bb      	str	r3, [r7, #24]
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d85e:	d9d1      	bls.n	800d804 <canardRxUnsubscribe+0x7c>
 800d860:	e001      	b.n	800d866 <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 800d862:	2300      	movs	r3, #0
 800d864:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800d866:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3720      	adds	r7, #32
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	0800d2f1 	.word	0x0800d2f1
 800d878:	08012ae0 	.word	0x08012ae0
 800d87c:	080131fc 	.word	0x080131fc
 800d880:	080122c0 	.word	0x080122c0

0800d884 <canardMakeFilterForSubject>:

CanardFilter canardMakeFilterForSubject(const CanardPortID subject_id)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	460b      	mov	r3, r1
 800d88e:	807b      	strh	r3, [r7, #2]
    CanardFilter out = {0};
 800d890:	f107 0308 	add.w	r3, r7, #8
 800d894:	2200      	movs	r2, #0
 800d896:	601a      	str	r2, [r3, #0]
 800d898:	605a      	str	r2, [r3, #4]

    out.extended_can_id = ((uint32_t) subject_id) << OFFSET_SUBJECT_ID;
 800d89a:	887b      	ldrh	r3, [r7, #2]
 800d89c:	021b      	lsls	r3, r3, #8
 800d89e:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_07 | (CANARD_SUBJECT_ID_MAX << OFFSET_SUBJECT_ID);
 800d8a0:	4b07      	ldr	r3, [pc, #28]	@ (800d8c0 <canardMakeFilterForSubject+0x3c>)
 800d8a2:	60fb      	str	r3, [r7, #12]

    return out;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	f107 0308 	add.w	r3, r7, #8
 800d8ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d8b0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	3714      	adds	r7, #20
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr
 800d8c0:	021fff80 	.word	0x021fff80

0800d8c4 <canardMakeFilterForServices>:

    return out;
}

CanardFilter canardMakeFilterForServices(const CanardNodeID local_node_id)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	70fb      	strb	r3, [r7, #3]
    CanardFilter out = {0};
 800d8d0:	f107 0308 	add.w	r3, r7, #8
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	601a      	str	r2, [r3, #0]
 800d8d8:	605a      	str	r2, [r3, #4]

    out.extended_can_id = FLAG_SERVICE_NOT_MESSAGE | (((uint32_t) local_node_id) << OFFSET_DST_NODE_ID);
 800d8da:	78fb      	ldrb	r3, [r7, #3]
 800d8dc:	01db      	lsls	r3, r3, #7
 800d8de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d8e2:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_23 | (CANARD_NODE_ID_MAX << OFFSET_DST_NODE_ID);
 800d8e4:	4b07      	ldr	r3, [pc, #28]	@ (800d904 <canardMakeFilterForServices+0x40>)
 800d8e6:	60fb      	str	r3, [r7, #12]

    return out;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	f107 0308 	add.w	r3, r7, #8
 800d8f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d8f4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	3714      	adds	r7, #20
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr
 800d904:	02803f80 	.word	0x02803f80

0800d908 <canardConsolidateFilters>:

CanardFilter canardConsolidateFilters(const CanardFilter* a, const CanardFilter* b)
{
 800d908:	b480      	push	{r7}
 800d90a:	b087      	sub	sp, #28
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	607a      	str	r2, [r7, #4]
    CanardFilter out = {0};
 800d914:	f107 0310 	add.w	r3, r7, #16
 800d918:	2200      	movs	r2, #0
 800d91a:	601a      	str	r2, [r3, #0]
 800d91c:	605a      	str	r2, [r3, #4]

    out.extended_mask   = a->extended_mask & b->extended_mask & ~(a->extended_can_id ^ b->extended_can_id);
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	685a      	ldr	r2, [r3, #4]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	401a      	ands	r2, r3
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	6819      	ldr	r1, [r3, #0]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	404b      	eors	r3, r1
 800d932:	43db      	mvns	r3, r3
 800d934:	4013      	ands	r3, r2
 800d936:	617b      	str	r3, [r7, #20]
    out.extended_can_id = a->extended_can_id & out.extended_mask;
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	4013      	ands	r3, r2
 800d940:	613b      	str	r3, [r7, #16]

    return out;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	461a      	mov	r2, r3
 800d946:	f107 0310 	add.w	r3, r7, #16
 800d94a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d94e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	371c      	adds	r7, #28
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr

0800d95e <_ZdlPvj>:
 800d95e:	f000 b814 	b.w	800d98a <_ZdlPv>

0800d962 <_Znwj>:
 800d962:	2801      	cmp	r0, #1
 800d964:	bf38      	it	cc
 800d966:	2001      	movcc	r0, #1
 800d968:	b510      	push	{r4, lr}
 800d96a:	4604      	mov	r4, r0
 800d96c:	4620      	mov	r0, r4
 800d96e:	f000 f84f 	bl	800da10 <malloc>
 800d972:	b100      	cbz	r0, 800d976 <_Znwj+0x14>
 800d974:	bd10      	pop	{r4, pc}
 800d976:	f000 f80b 	bl	800d990 <_ZSt15get_new_handlerv>
 800d97a:	b908      	cbnz	r0, 800d980 <_Znwj+0x1e>
 800d97c:	f000 f810 	bl	800d9a0 <abort>
 800d980:	4780      	blx	r0
 800d982:	e7f3      	b.n	800d96c <_Znwj+0xa>

0800d984 <_ZSt25__throw_bad_function_callv>:
 800d984:	b508      	push	{r3, lr}
 800d986:	f000 f80b 	bl	800d9a0 <abort>

0800d98a <_ZdlPv>:
 800d98a:	f000 b849 	b.w	800da20 <free>
	...

0800d990 <_ZSt15get_new_handlerv>:
 800d990:	4b02      	ldr	r3, [pc, #8]	@ (800d99c <_ZSt15get_new_handlerv+0xc>)
 800d992:	6818      	ldr	r0, [r3, #0]
 800d994:	f3bf 8f5b 	dmb	ish
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop
 800d99c:	200005c4 	.word	0x200005c4

0800d9a0 <abort>:
 800d9a0:	b508      	push	{r3, lr}
 800d9a2:	2006      	movs	r0, #6
 800d9a4:	f001 f8f2 	bl	800eb8c <raise>
 800d9a8:	2001      	movs	r0, #1
 800d9aa:	f7f7 fe9f 	bl	80056ec <_exit>
	...

0800d9b0 <__assert_func>:
 800d9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9b2:	4614      	mov	r4, r2
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	4b09      	ldr	r3, [pc, #36]	@ (800d9dc <__assert_func+0x2c>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4605      	mov	r5, r0
 800d9bc:	68d8      	ldr	r0, [r3, #12]
 800d9be:	b954      	cbnz	r4, 800d9d6 <__assert_func+0x26>
 800d9c0:	4b07      	ldr	r3, [pc, #28]	@ (800d9e0 <__assert_func+0x30>)
 800d9c2:	461c      	mov	r4, r3
 800d9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9c8:	9100      	str	r1, [sp, #0]
 800d9ca:	462b      	mov	r3, r5
 800d9cc:	4905      	ldr	r1, [pc, #20]	@ (800d9e4 <__assert_func+0x34>)
 800d9ce:	f000 ffed 	bl	800e9ac <fiprintf>
 800d9d2:	f7ff ffe5 	bl	800d9a0 <abort>
 800d9d6:	4b04      	ldr	r3, [pc, #16]	@ (800d9e8 <__assert_func+0x38>)
 800d9d8:	e7f4      	b.n	800d9c4 <__assert_func+0x14>
 800d9da:	bf00      	nop
 800d9dc:	20000018 	.word	0x20000018
 800d9e0:	0801324b 	.word	0x0801324b
 800d9e4:	0801321d 	.word	0x0801321d
 800d9e8:	08013210 	.word	0x08013210

0800d9ec <exit>:
 800d9ec:	b508      	push	{r3, lr}
 800d9ee:	4b06      	ldr	r3, [pc, #24]	@ (800da08 <exit+0x1c>)
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	b113      	cbz	r3, 800d9fa <exit+0xe>
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	f3af 8000 	nop.w
 800d9fa:	4b04      	ldr	r3, [pc, #16]	@ (800da0c <exit+0x20>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	b103      	cbz	r3, 800da02 <exit+0x16>
 800da00:	4798      	blx	r3
 800da02:	4620      	mov	r0, r4
 800da04:	f7f7 fe72 	bl	80056ec <_exit>
 800da08:	00000000 	.word	0x00000000
 800da0c:	20000708 	.word	0x20000708

0800da10 <malloc>:
 800da10:	4b02      	ldr	r3, [pc, #8]	@ (800da1c <malloc+0xc>)
 800da12:	4601      	mov	r1, r0
 800da14:	6818      	ldr	r0, [r3, #0]
 800da16:	f000 b82d 	b.w	800da74 <_malloc_r>
 800da1a:	bf00      	nop
 800da1c:	20000018 	.word	0x20000018

0800da20 <free>:
 800da20:	4b02      	ldr	r3, [pc, #8]	@ (800da2c <free+0xc>)
 800da22:	4601      	mov	r1, r0
 800da24:	6818      	ldr	r0, [r3, #0]
 800da26:	f001 bfb7 	b.w	800f998 <_free_r>
 800da2a:	bf00      	nop
 800da2c:	20000018 	.word	0x20000018

0800da30 <sbrk_aligned>:
 800da30:	b570      	push	{r4, r5, r6, lr}
 800da32:	4e0f      	ldr	r6, [pc, #60]	@ (800da70 <sbrk_aligned+0x40>)
 800da34:	460c      	mov	r4, r1
 800da36:	6831      	ldr	r1, [r6, #0]
 800da38:	4605      	mov	r5, r0
 800da3a:	b911      	cbnz	r1, 800da42 <sbrk_aligned+0x12>
 800da3c:	f001 f8fa 	bl	800ec34 <_sbrk_r>
 800da40:	6030      	str	r0, [r6, #0]
 800da42:	4621      	mov	r1, r4
 800da44:	4628      	mov	r0, r5
 800da46:	f001 f8f5 	bl	800ec34 <_sbrk_r>
 800da4a:	1c43      	adds	r3, r0, #1
 800da4c:	d103      	bne.n	800da56 <sbrk_aligned+0x26>
 800da4e:	f04f 34ff 	mov.w	r4, #4294967295
 800da52:	4620      	mov	r0, r4
 800da54:	bd70      	pop	{r4, r5, r6, pc}
 800da56:	1cc4      	adds	r4, r0, #3
 800da58:	f024 0403 	bic.w	r4, r4, #3
 800da5c:	42a0      	cmp	r0, r4
 800da5e:	d0f8      	beq.n	800da52 <sbrk_aligned+0x22>
 800da60:	1a21      	subs	r1, r4, r0
 800da62:	4628      	mov	r0, r5
 800da64:	f001 f8e6 	bl	800ec34 <_sbrk_r>
 800da68:	3001      	adds	r0, #1
 800da6a:	d1f2      	bne.n	800da52 <sbrk_aligned+0x22>
 800da6c:	e7ef      	b.n	800da4e <sbrk_aligned+0x1e>
 800da6e:	bf00      	nop
 800da70:	200005c8 	.word	0x200005c8

0800da74 <_malloc_r>:
 800da74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da78:	1ccd      	adds	r5, r1, #3
 800da7a:	f025 0503 	bic.w	r5, r5, #3
 800da7e:	3508      	adds	r5, #8
 800da80:	2d0c      	cmp	r5, #12
 800da82:	bf38      	it	cc
 800da84:	250c      	movcc	r5, #12
 800da86:	2d00      	cmp	r5, #0
 800da88:	4606      	mov	r6, r0
 800da8a:	db01      	blt.n	800da90 <_malloc_r+0x1c>
 800da8c:	42a9      	cmp	r1, r5
 800da8e:	d904      	bls.n	800da9a <_malloc_r+0x26>
 800da90:	230c      	movs	r3, #12
 800da92:	6033      	str	r3, [r6, #0]
 800da94:	2000      	movs	r0, #0
 800da96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800db70 <_malloc_r+0xfc>
 800da9e:	f000 f869 	bl	800db74 <__malloc_lock>
 800daa2:	f8d8 3000 	ldr.w	r3, [r8]
 800daa6:	461c      	mov	r4, r3
 800daa8:	bb44      	cbnz	r4, 800dafc <_malloc_r+0x88>
 800daaa:	4629      	mov	r1, r5
 800daac:	4630      	mov	r0, r6
 800daae:	f7ff ffbf 	bl	800da30 <sbrk_aligned>
 800dab2:	1c43      	adds	r3, r0, #1
 800dab4:	4604      	mov	r4, r0
 800dab6:	d158      	bne.n	800db6a <_malloc_r+0xf6>
 800dab8:	f8d8 4000 	ldr.w	r4, [r8]
 800dabc:	4627      	mov	r7, r4
 800dabe:	2f00      	cmp	r7, #0
 800dac0:	d143      	bne.n	800db4a <_malloc_r+0xd6>
 800dac2:	2c00      	cmp	r4, #0
 800dac4:	d04b      	beq.n	800db5e <_malloc_r+0xea>
 800dac6:	6823      	ldr	r3, [r4, #0]
 800dac8:	4639      	mov	r1, r7
 800daca:	4630      	mov	r0, r6
 800dacc:	eb04 0903 	add.w	r9, r4, r3
 800dad0:	f001 f8b0 	bl	800ec34 <_sbrk_r>
 800dad4:	4581      	cmp	r9, r0
 800dad6:	d142      	bne.n	800db5e <_malloc_r+0xea>
 800dad8:	6821      	ldr	r1, [r4, #0]
 800dada:	1a6d      	subs	r5, r5, r1
 800dadc:	4629      	mov	r1, r5
 800dade:	4630      	mov	r0, r6
 800dae0:	f7ff ffa6 	bl	800da30 <sbrk_aligned>
 800dae4:	3001      	adds	r0, #1
 800dae6:	d03a      	beq.n	800db5e <_malloc_r+0xea>
 800dae8:	6823      	ldr	r3, [r4, #0]
 800daea:	442b      	add	r3, r5
 800daec:	6023      	str	r3, [r4, #0]
 800daee:	f8d8 3000 	ldr.w	r3, [r8]
 800daf2:	685a      	ldr	r2, [r3, #4]
 800daf4:	bb62      	cbnz	r2, 800db50 <_malloc_r+0xdc>
 800daf6:	f8c8 7000 	str.w	r7, [r8]
 800dafa:	e00f      	b.n	800db1c <_malloc_r+0xa8>
 800dafc:	6822      	ldr	r2, [r4, #0]
 800dafe:	1b52      	subs	r2, r2, r5
 800db00:	d420      	bmi.n	800db44 <_malloc_r+0xd0>
 800db02:	2a0b      	cmp	r2, #11
 800db04:	d917      	bls.n	800db36 <_malloc_r+0xc2>
 800db06:	1961      	adds	r1, r4, r5
 800db08:	42a3      	cmp	r3, r4
 800db0a:	6025      	str	r5, [r4, #0]
 800db0c:	bf18      	it	ne
 800db0e:	6059      	strne	r1, [r3, #4]
 800db10:	6863      	ldr	r3, [r4, #4]
 800db12:	bf08      	it	eq
 800db14:	f8c8 1000 	streq.w	r1, [r8]
 800db18:	5162      	str	r2, [r4, r5]
 800db1a:	604b      	str	r3, [r1, #4]
 800db1c:	4630      	mov	r0, r6
 800db1e:	f000 f82f 	bl	800db80 <__malloc_unlock>
 800db22:	f104 000b 	add.w	r0, r4, #11
 800db26:	1d23      	adds	r3, r4, #4
 800db28:	f020 0007 	bic.w	r0, r0, #7
 800db2c:	1ac2      	subs	r2, r0, r3
 800db2e:	bf1c      	itt	ne
 800db30:	1a1b      	subne	r3, r3, r0
 800db32:	50a3      	strne	r3, [r4, r2]
 800db34:	e7af      	b.n	800da96 <_malloc_r+0x22>
 800db36:	6862      	ldr	r2, [r4, #4]
 800db38:	42a3      	cmp	r3, r4
 800db3a:	bf0c      	ite	eq
 800db3c:	f8c8 2000 	streq.w	r2, [r8]
 800db40:	605a      	strne	r2, [r3, #4]
 800db42:	e7eb      	b.n	800db1c <_malloc_r+0xa8>
 800db44:	4623      	mov	r3, r4
 800db46:	6864      	ldr	r4, [r4, #4]
 800db48:	e7ae      	b.n	800daa8 <_malloc_r+0x34>
 800db4a:	463c      	mov	r4, r7
 800db4c:	687f      	ldr	r7, [r7, #4]
 800db4e:	e7b6      	b.n	800dabe <_malloc_r+0x4a>
 800db50:	461a      	mov	r2, r3
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	42a3      	cmp	r3, r4
 800db56:	d1fb      	bne.n	800db50 <_malloc_r+0xdc>
 800db58:	2300      	movs	r3, #0
 800db5a:	6053      	str	r3, [r2, #4]
 800db5c:	e7de      	b.n	800db1c <_malloc_r+0xa8>
 800db5e:	230c      	movs	r3, #12
 800db60:	6033      	str	r3, [r6, #0]
 800db62:	4630      	mov	r0, r6
 800db64:	f000 f80c 	bl	800db80 <__malloc_unlock>
 800db68:	e794      	b.n	800da94 <_malloc_r+0x20>
 800db6a:	6005      	str	r5, [r0, #0]
 800db6c:	e7d6      	b.n	800db1c <_malloc_r+0xa8>
 800db6e:	bf00      	nop
 800db70:	200005cc 	.word	0x200005cc

0800db74 <__malloc_lock>:
 800db74:	4801      	ldr	r0, [pc, #4]	@ (800db7c <__malloc_lock+0x8>)
 800db76:	f001 b8aa 	b.w	800ecce <__retarget_lock_acquire_recursive>
 800db7a:	bf00      	nop
 800db7c:	20000710 	.word	0x20000710

0800db80 <__malloc_unlock>:
 800db80:	4801      	ldr	r0, [pc, #4]	@ (800db88 <__malloc_unlock+0x8>)
 800db82:	f001 b8a5 	b.w	800ecd0 <__retarget_lock_release_recursive>
 800db86:	bf00      	nop
 800db88:	20000710 	.word	0x20000710

0800db8c <__cvt>:
 800db8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db90:	ec57 6b10 	vmov	r6, r7, d0
 800db94:	2f00      	cmp	r7, #0
 800db96:	460c      	mov	r4, r1
 800db98:	4619      	mov	r1, r3
 800db9a:	463b      	mov	r3, r7
 800db9c:	bfbb      	ittet	lt
 800db9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800dba2:	461f      	movlt	r7, r3
 800dba4:	2300      	movge	r3, #0
 800dba6:	232d      	movlt	r3, #45	@ 0x2d
 800dba8:	700b      	strb	r3, [r1, #0]
 800dbaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dbac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dbb0:	4691      	mov	r9, r2
 800dbb2:	f023 0820 	bic.w	r8, r3, #32
 800dbb6:	bfbc      	itt	lt
 800dbb8:	4632      	movlt	r2, r6
 800dbba:	4616      	movlt	r6, r2
 800dbbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dbc0:	d005      	beq.n	800dbce <__cvt+0x42>
 800dbc2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dbc6:	d100      	bne.n	800dbca <__cvt+0x3e>
 800dbc8:	3401      	adds	r4, #1
 800dbca:	2102      	movs	r1, #2
 800dbcc:	e000      	b.n	800dbd0 <__cvt+0x44>
 800dbce:	2103      	movs	r1, #3
 800dbd0:	ab03      	add	r3, sp, #12
 800dbd2:	9301      	str	r3, [sp, #4]
 800dbd4:	ab02      	add	r3, sp, #8
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	ec47 6b10 	vmov	d0, r6, r7
 800dbdc:	4653      	mov	r3, sl
 800dbde:	4622      	mov	r2, r4
 800dbe0:	f001 f916 	bl	800ee10 <_dtoa_r>
 800dbe4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800dbe8:	4605      	mov	r5, r0
 800dbea:	d119      	bne.n	800dc20 <__cvt+0x94>
 800dbec:	f019 0f01 	tst.w	r9, #1
 800dbf0:	d00e      	beq.n	800dc10 <__cvt+0x84>
 800dbf2:	eb00 0904 	add.w	r9, r0, r4
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	4639      	mov	r1, r7
 800dbfe:	f7f2 ff8b 	bl	8000b18 <__aeabi_dcmpeq>
 800dc02:	b108      	cbz	r0, 800dc08 <__cvt+0x7c>
 800dc04:	f8cd 900c 	str.w	r9, [sp, #12]
 800dc08:	2230      	movs	r2, #48	@ 0x30
 800dc0a:	9b03      	ldr	r3, [sp, #12]
 800dc0c:	454b      	cmp	r3, r9
 800dc0e:	d31e      	bcc.n	800dc4e <__cvt+0xc2>
 800dc10:	9b03      	ldr	r3, [sp, #12]
 800dc12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc14:	1b5b      	subs	r3, r3, r5
 800dc16:	4628      	mov	r0, r5
 800dc18:	6013      	str	r3, [r2, #0]
 800dc1a:	b004      	add	sp, #16
 800dc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dc24:	eb00 0904 	add.w	r9, r0, r4
 800dc28:	d1e5      	bne.n	800dbf6 <__cvt+0x6a>
 800dc2a:	7803      	ldrb	r3, [r0, #0]
 800dc2c:	2b30      	cmp	r3, #48	@ 0x30
 800dc2e:	d10a      	bne.n	800dc46 <__cvt+0xba>
 800dc30:	2200      	movs	r2, #0
 800dc32:	2300      	movs	r3, #0
 800dc34:	4630      	mov	r0, r6
 800dc36:	4639      	mov	r1, r7
 800dc38:	f7f2 ff6e 	bl	8000b18 <__aeabi_dcmpeq>
 800dc3c:	b918      	cbnz	r0, 800dc46 <__cvt+0xba>
 800dc3e:	f1c4 0401 	rsb	r4, r4, #1
 800dc42:	f8ca 4000 	str.w	r4, [sl]
 800dc46:	f8da 3000 	ldr.w	r3, [sl]
 800dc4a:	4499      	add	r9, r3
 800dc4c:	e7d3      	b.n	800dbf6 <__cvt+0x6a>
 800dc4e:	1c59      	adds	r1, r3, #1
 800dc50:	9103      	str	r1, [sp, #12]
 800dc52:	701a      	strb	r2, [r3, #0]
 800dc54:	e7d9      	b.n	800dc0a <__cvt+0x7e>

0800dc56 <__exponent>:
 800dc56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc58:	2900      	cmp	r1, #0
 800dc5a:	bfba      	itte	lt
 800dc5c:	4249      	neglt	r1, r1
 800dc5e:	232d      	movlt	r3, #45	@ 0x2d
 800dc60:	232b      	movge	r3, #43	@ 0x2b
 800dc62:	2909      	cmp	r1, #9
 800dc64:	7002      	strb	r2, [r0, #0]
 800dc66:	7043      	strb	r3, [r0, #1]
 800dc68:	dd29      	ble.n	800dcbe <__exponent+0x68>
 800dc6a:	f10d 0307 	add.w	r3, sp, #7
 800dc6e:	461d      	mov	r5, r3
 800dc70:	270a      	movs	r7, #10
 800dc72:	461a      	mov	r2, r3
 800dc74:	fbb1 f6f7 	udiv	r6, r1, r7
 800dc78:	fb07 1416 	mls	r4, r7, r6, r1
 800dc7c:	3430      	adds	r4, #48	@ 0x30
 800dc7e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dc82:	460c      	mov	r4, r1
 800dc84:	2c63      	cmp	r4, #99	@ 0x63
 800dc86:	f103 33ff 	add.w	r3, r3, #4294967295
 800dc8a:	4631      	mov	r1, r6
 800dc8c:	dcf1      	bgt.n	800dc72 <__exponent+0x1c>
 800dc8e:	3130      	adds	r1, #48	@ 0x30
 800dc90:	1e94      	subs	r4, r2, #2
 800dc92:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dc96:	1c41      	adds	r1, r0, #1
 800dc98:	4623      	mov	r3, r4
 800dc9a:	42ab      	cmp	r3, r5
 800dc9c:	d30a      	bcc.n	800dcb4 <__exponent+0x5e>
 800dc9e:	f10d 0309 	add.w	r3, sp, #9
 800dca2:	1a9b      	subs	r3, r3, r2
 800dca4:	42ac      	cmp	r4, r5
 800dca6:	bf88      	it	hi
 800dca8:	2300      	movhi	r3, #0
 800dcaa:	3302      	adds	r3, #2
 800dcac:	4403      	add	r3, r0
 800dcae:	1a18      	subs	r0, r3, r0
 800dcb0:	b003      	add	sp, #12
 800dcb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcb4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dcb8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dcbc:	e7ed      	b.n	800dc9a <__exponent+0x44>
 800dcbe:	2330      	movs	r3, #48	@ 0x30
 800dcc0:	3130      	adds	r1, #48	@ 0x30
 800dcc2:	7083      	strb	r3, [r0, #2]
 800dcc4:	70c1      	strb	r1, [r0, #3]
 800dcc6:	1d03      	adds	r3, r0, #4
 800dcc8:	e7f1      	b.n	800dcae <__exponent+0x58>
	...

0800dccc <_printf_float>:
 800dccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd0:	b08d      	sub	sp, #52	@ 0x34
 800dcd2:	460c      	mov	r4, r1
 800dcd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dcd8:	4616      	mov	r6, r2
 800dcda:	461f      	mov	r7, r3
 800dcdc:	4605      	mov	r5, r0
 800dcde:	f000 ff5d 	bl	800eb9c <_localeconv_r>
 800dce2:	6803      	ldr	r3, [r0, #0]
 800dce4:	9304      	str	r3, [sp, #16]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7f2 faea 	bl	80002c0 <strlen>
 800dcec:	2300      	movs	r3, #0
 800dcee:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcf0:	f8d8 3000 	ldr.w	r3, [r8]
 800dcf4:	9005      	str	r0, [sp, #20]
 800dcf6:	3307      	adds	r3, #7
 800dcf8:	f023 0307 	bic.w	r3, r3, #7
 800dcfc:	f103 0208 	add.w	r2, r3, #8
 800dd00:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dd04:	f8d4 b000 	ldr.w	fp, [r4]
 800dd08:	f8c8 2000 	str.w	r2, [r8]
 800dd0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800dd14:	9307      	str	r3, [sp, #28]
 800dd16:	f8cd 8018 	str.w	r8, [sp, #24]
 800dd1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800dd1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd22:	4b9c      	ldr	r3, [pc, #624]	@ (800df94 <_printf_float+0x2c8>)
 800dd24:	f04f 32ff 	mov.w	r2, #4294967295
 800dd28:	f7f2 ff28 	bl	8000b7c <__aeabi_dcmpun>
 800dd2c:	bb70      	cbnz	r0, 800dd8c <_printf_float+0xc0>
 800dd2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd32:	4b98      	ldr	r3, [pc, #608]	@ (800df94 <_printf_float+0x2c8>)
 800dd34:	f04f 32ff 	mov.w	r2, #4294967295
 800dd38:	f7f2 ff02 	bl	8000b40 <__aeabi_dcmple>
 800dd3c:	bb30      	cbnz	r0, 800dd8c <_printf_float+0xc0>
 800dd3e:	2200      	movs	r2, #0
 800dd40:	2300      	movs	r3, #0
 800dd42:	4640      	mov	r0, r8
 800dd44:	4649      	mov	r1, r9
 800dd46:	f7f2 fef1 	bl	8000b2c <__aeabi_dcmplt>
 800dd4a:	b110      	cbz	r0, 800dd52 <_printf_float+0x86>
 800dd4c:	232d      	movs	r3, #45	@ 0x2d
 800dd4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd52:	4a91      	ldr	r2, [pc, #580]	@ (800df98 <_printf_float+0x2cc>)
 800dd54:	4b91      	ldr	r3, [pc, #580]	@ (800df9c <_printf_float+0x2d0>)
 800dd56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dd5a:	bf94      	ite	ls
 800dd5c:	4690      	movls	r8, r2
 800dd5e:	4698      	movhi	r8, r3
 800dd60:	2303      	movs	r3, #3
 800dd62:	6123      	str	r3, [r4, #16]
 800dd64:	f02b 0304 	bic.w	r3, fp, #4
 800dd68:	6023      	str	r3, [r4, #0]
 800dd6a:	f04f 0900 	mov.w	r9, #0
 800dd6e:	9700      	str	r7, [sp, #0]
 800dd70:	4633      	mov	r3, r6
 800dd72:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dd74:	4621      	mov	r1, r4
 800dd76:	4628      	mov	r0, r5
 800dd78:	f000 f9d2 	bl	800e120 <_printf_common>
 800dd7c:	3001      	adds	r0, #1
 800dd7e:	f040 808d 	bne.w	800de9c <_printf_float+0x1d0>
 800dd82:	f04f 30ff 	mov.w	r0, #4294967295
 800dd86:	b00d      	add	sp, #52	@ 0x34
 800dd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd8c:	4642      	mov	r2, r8
 800dd8e:	464b      	mov	r3, r9
 800dd90:	4640      	mov	r0, r8
 800dd92:	4649      	mov	r1, r9
 800dd94:	f7f2 fef2 	bl	8000b7c <__aeabi_dcmpun>
 800dd98:	b140      	cbz	r0, 800ddac <_printf_float+0xe0>
 800dd9a:	464b      	mov	r3, r9
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	bfbc      	itt	lt
 800dda0:	232d      	movlt	r3, #45	@ 0x2d
 800dda2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800dda6:	4a7e      	ldr	r2, [pc, #504]	@ (800dfa0 <_printf_float+0x2d4>)
 800dda8:	4b7e      	ldr	r3, [pc, #504]	@ (800dfa4 <_printf_float+0x2d8>)
 800ddaa:	e7d4      	b.n	800dd56 <_printf_float+0x8a>
 800ddac:	6863      	ldr	r3, [r4, #4]
 800ddae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ddb2:	9206      	str	r2, [sp, #24]
 800ddb4:	1c5a      	adds	r2, r3, #1
 800ddb6:	d13b      	bne.n	800de30 <_printf_float+0x164>
 800ddb8:	2306      	movs	r3, #6
 800ddba:	6063      	str	r3, [r4, #4]
 800ddbc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	6022      	str	r2, [r4, #0]
 800ddc4:	9303      	str	r3, [sp, #12]
 800ddc6:	ab0a      	add	r3, sp, #40	@ 0x28
 800ddc8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ddcc:	ab09      	add	r3, sp, #36	@ 0x24
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	6861      	ldr	r1, [r4, #4]
 800ddd2:	ec49 8b10 	vmov	d0, r8, r9
 800ddd6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ddda:	4628      	mov	r0, r5
 800dddc:	f7ff fed6 	bl	800db8c <__cvt>
 800dde0:	9b06      	ldr	r3, [sp, #24]
 800dde2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dde4:	2b47      	cmp	r3, #71	@ 0x47
 800dde6:	4680      	mov	r8, r0
 800dde8:	d129      	bne.n	800de3e <_printf_float+0x172>
 800ddea:	1cc8      	adds	r0, r1, #3
 800ddec:	db02      	blt.n	800ddf4 <_printf_float+0x128>
 800ddee:	6863      	ldr	r3, [r4, #4]
 800ddf0:	4299      	cmp	r1, r3
 800ddf2:	dd41      	ble.n	800de78 <_printf_float+0x1ac>
 800ddf4:	f1aa 0a02 	sub.w	sl, sl, #2
 800ddf8:	fa5f fa8a 	uxtb.w	sl, sl
 800ddfc:	3901      	subs	r1, #1
 800ddfe:	4652      	mov	r2, sl
 800de00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800de04:	9109      	str	r1, [sp, #36]	@ 0x24
 800de06:	f7ff ff26 	bl	800dc56 <__exponent>
 800de0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de0c:	1813      	adds	r3, r2, r0
 800de0e:	2a01      	cmp	r2, #1
 800de10:	4681      	mov	r9, r0
 800de12:	6123      	str	r3, [r4, #16]
 800de14:	dc02      	bgt.n	800de1c <_printf_float+0x150>
 800de16:	6822      	ldr	r2, [r4, #0]
 800de18:	07d2      	lsls	r2, r2, #31
 800de1a:	d501      	bpl.n	800de20 <_printf_float+0x154>
 800de1c:	3301      	adds	r3, #1
 800de1e:	6123      	str	r3, [r4, #16]
 800de20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800de24:	2b00      	cmp	r3, #0
 800de26:	d0a2      	beq.n	800dd6e <_printf_float+0xa2>
 800de28:	232d      	movs	r3, #45	@ 0x2d
 800de2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de2e:	e79e      	b.n	800dd6e <_printf_float+0xa2>
 800de30:	9a06      	ldr	r2, [sp, #24]
 800de32:	2a47      	cmp	r2, #71	@ 0x47
 800de34:	d1c2      	bne.n	800ddbc <_printf_float+0xf0>
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1c0      	bne.n	800ddbc <_printf_float+0xf0>
 800de3a:	2301      	movs	r3, #1
 800de3c:	e7bd      	b.n	800ddba <_printf_float+0xee>
 800de3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800de42:	d9db      	bls.n	800ddfc <_printf_float+0x130>
 800de44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800de48:	d118      	bne.n	800de7c <_printf_float+0x1b0>
 800de4a:	2900      	cmp	r1, #0
 800de4c:	6863      	ldr	r3, [r4, #4]
 800de4e:	dd0b      	ble.n	800de68 <_printf_float+0x19c>
 800de50:	6121      	str	r1, [r4, #16]
 800de52:	b913      	cbnz	r3, 800de5a <_printf_float+0x18e>
 800de54:	6822      	ldr	r2, [r4, #0]
 800de56:	07d0      	lsls	r0, r2, #31
 800de58:	d502      	bpl.n	800de60 <_printf_float+0x194>
 800de5a:	3301      	adds	r3, #1
 800de5c:	440b      	add	r3, r1
 800de5e:	6123      	str	r3, [r4, #16]
 800de60:	65a1      	str	r1, [r4, #88]	@ 0x58
 800de62:	f04f 0900 	mov.w	r9, #0
 800de66:	e7db      	b.n	800de20 <_printf_float+0x154>
 800de68:	b913      	cbnz	r3, 800de70 <_printf_float+0x1a4>
 800de6a:	6822      	ldr	r2, [r4, #0]
 800de6c:	07d2      	lsls	r2, r2, #31
 800de6e:	d501      	bpl.n	800de74 <_printf_float+0x1a8>
 800de70:	3302      	adds	r3, #2
 800de72:	e7f4      	b.n	800de5e <_printf_float+0x192>
 800de74:	2301      	movs	r3, #1
 800de76:	e7f2      	b.n	800de5e <_printf_float+0x192>
 800de78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800de7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de7e:	4299      	cmp	r1, r3
 800de80:	db05      	blt.n	800de8e <_printf_float+0x1c2>
 800de82:	6823      	ldr	r3, [r4, #0]
 800de84:	6121      	str	r1, [r4, #16]
 800de86:	07d8      	lsls	r0, r3, #31
 800de88:	d5ea      	bpl.n	800de60 <_printf_float+0x194>
 800de8a:	1c4b      	adds	r3, r1, #1
 800de8c:	e7e7      	b.n	800de5e <_printf_float+0x192>
 800de8e:	2900      	cmp	r1, #0
 800de90:	bfd4      	ite	le
 800de92:	f1c1 0202 	rsble	r2, r1, #2
 800de96:	2201      	movgt	r2, #1
 800de98:	4413      	add	r3, r2
 800de9a:	e7e0      	b.n	800de5e <_printf_float+0x192>
 800de9c:	6823      	ldr	r3, [r4, #0]
 800de9e:	055a      	lsls	r2, r3, #21
 800dea0:	d407      	bmi.n	800deb2 <_printf_float+0x1e6>
 800dea2:	6923      	ldr	r3, [r4, #16]
 800dea4:	4642      	mov	r2, r8
 800dea6:	4631      	mov	r1, r6
 800dea8:	4628      	mov	r0, r5
 800deaa:	47b8      	blx	r7
 800deac:	3001      	adds	r0, #1
 800deae:	d12b      	bne.n	800df08 <_printf_float+0x23c>
 800deb0:	e767      	b.n	800dd82 <_printf_float+0xb6>
 800deb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800deb6:	f240 80dd 	bls.w	800e074 <_printf_float+0x3a8>
 800deba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800debe:	2200      	movs	r2, #0
 800dec0:	2300      	movs	r3, #0
 800dec2:	f7f2 fe29 	bl	8000b18 <__aeabi_dcmpeq>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	d033      	beq.n	800df32 <_printf_float+0x266>
 800deca:	4a37      	ldr	r2, [pc, #220]	@ (800dfa8 <_printf_float+0x2dc>)
 800decc:	2301      	movs	r3, #1
 800dece:	4631      	mov	r1, r6
 800ded0:	4628      	mov	r0, r5
 800ded2:	47b8      	blx	r7
 800ded4:	3001      	adds	r0, #1
 800ded6:	f43f af54 	beq.w	800dd82 <_printf_float+0xb6>
 800deda:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dede:	4543      	cmp	r3, r8
 800dee0:	db02      	blt.n	800dee8 <_printf_float+0x21c>
 800dee2:	6823      	ldr	r3, [r4, #0]
 800dee4:	07d8      	lsls	r0, r3, #31
 800dee6:	d50f      	bpl.n	800df08 <_printf_float+0x23c>
 800dee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800deec:	4631      	mov	r1, r6
 800deee:	4628      	mov	r0, r5
 800def0:	47b8      	blx	r7
 800def2:	3001      	adds	r0, #1
 800def4:	f43f af45 	beq.w	800dd82 <_printf_float+0xb6>
 800def8:	f04f 0900 	mov.w	r9, #0
 800defc:	f108 38ff 	add.w	r8, r8, #4294967295
 800df00:	f104 0a1a 	add.w	sl, r4, #26
 800df04:	45c8      	cmp	r8, r9
 800df06:	dc09      	bgt.n	800df1c <_printf_float+0x250>
 800df08:	6823      	ldr	r3, [r4, #0]
 800df0a:	079b      	lsls	r3, r3, #30
 800df0c:	f100 8103 	bmi.w	800e116 <_printf_float+0x44a>
 800df10:	68e0      	ldr	r0, [r4, #12]
 800df12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df14:	4298      	cmp	r0, r3
 800df16:	bfb8      	it	lt
 800df18:	4618      	movlt	r0, r3
 800df1a:	e734      	b.n	800dd86 <_printf_float+0xba>
 800df1c:	2301      	movs	r3, #1
 800df1e:	4652      	mov	r2, sl
 800df20:	4631      	mov	r1, r6
 800df22:	4628      	mov	r0, r5
 800df24:	47b8      	blx	r7
 800df26:	3001      	adds	r0, #1
 800df28:	f43f af2b 	beq.w	800dd82 <_printf_float+0xb6>
 800df2c:	f109 0901 	add.w	r9, r9, #1
 800df30:	e7e8      	b.n	800df04 <_printf_float+0x238>
 800df32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df34:	2b00      	cmp	r3, #0
 800df36:	dc39      	bgt.n	800dfac <_printf_float+0x2e0>
 800df38:	4a1b      	ldr	r2, [pc, #108]	@ (800dfa8 <_printf_float+0x2dc>)
 800df3a:	2301      	movs	r3, #1
 800df3c:	4631      	mov	r1, r6
 800df3e:	4628      	mov	r0, r5
 800df40:	47b8      	blx	r7
 800df42:	3001      	adds	r0, #1
 800df44:	f43f af1d 	beq.w	800dd82 <_printf_float+0xb6>
 800df48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800df4c:	ea59 0303 	orrs.w	r3, r9, r3
 800df50:	d102      	bne.n	800df58 <_printf_float+0x28c>
 800df52:	6823      	ldr	r3, [r4, #0]
 800df54:	07d9      	lsls	r1, r3, #31
 800df56:	d5d7      	bpl.n	800df08 <_printf_float+0x23c>
 800df58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df5c:	4631      	mov	r1, r6
 800df5e:	4628      	mov	r0, r5
 800df60:	47b8      	blx	r7
 800df62:	3001      	adds	r0, #1
 800df64:	f43f af0d 	beq.w	800dd82 <_printf_float+0xb6>
 800df68:	f04f 0a00 	mov.w	sl, #0
 800df6c:	f104 0b1a 	add.w	fp, r4, #26
 800df70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df72:	425b      	negs	r3, r3
 800df74:	4553      	cmp	r3, sl
 800df76:	dc01      	bgt.n	800df7c <_printf_float+0x2b0>
 800df78:	464b      	mov	r3, r9
 800df7a:	e793      	b.n	800dea4 <_printf_float+0x1d8>
 800df7c:	2301      	movs	r3, #1
 800df7e:	465a      	mov	r2, fp
 800df80:	4631      	mov	r1, r6
 800df82:	4628      	mov	r0, r5
 800df84:	47b8      	blx	r7
 800df86:	3001      	adds	r0, #1
 800df88:	f43f aefb 	beq.w	800dd82 <_printf_float+0xb6>
 800df8c:	f10a 0a01 	add.w	sl, sl, #1
 800df90:	e7ee      	b.n	800df70 <_printf_float+0x2a4>
 800df92:	bf00      	nop
 800df94:	7fefffff 	.word	0x7fefffff
 800df98:	0801324c 	.word	0x0801324c
 800df9c:	08013250 	.word	0x08013250
 800dfa0:	08013254 	.word	0x08013254
 800dfa4:	08013258 	.word	0x08013258
 800dfa8:	0801325c 	.word	0x0801325c
 800dfac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dfae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dfb2:	4553      	cmp	r3, sl
 800dfb4:	bfa8      	it	ge
 800dfb6:	4653      	movge	r3, sl
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	4699      	mov	r9, r3
 800dfbc:	dc36      	bgt.n	800e02c <_printf_float+0x360>
 800dfbe:	f04f 0b00 	mov.w	fp, #0
 800dfc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dfc6:	f104 021a 	add.w	r2, r4, #26
 800dfca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dfcc:	9306      	str	r3, [sp, #24]
 800dfce:	eba3 0309 	sub.w	r3, r3, r9
 800dfd2:	455b      	cmp	r3, fp
 800dfd4:	dc31      	bgt.n	800e03a <_printf_float+0x36e>
 800dfd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfd8:	459a      	cmp	sl, r3
 800dfda:	dc3a      	bgt.n	800e052 <_printf_float+0x386>
 800dfdc:	6823      	ldr	r3, [r4, #0]
 800dfde:	07da      	lsls	r2, r3, #31
 800dfe0:	d437      	bmi.n	800e052 <_printf_float+0x386>
 800dfe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfe4:	ebaa 0903 	sub.w	r9, sl, r3
 800dfe8:	9b06      	ldr	r3, [sp, #24]
 800dfea:	ebaa 0303 	sub.w	r3, sl, r3
 800dfee:	4599      	cmp	r9, r3
 800dff0:	bfa8      	it	ge
 800dff2:	4699      	movge	r9, r3
 800dff4:	f1b9 0f00 	cmp.w	r9, #0
 800dff8:	dc33      	bgt.n	800e062 <_printf_float+0x396>
 800dffa:	f04f 0800 	mov.w	r8, #0
 800dffe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e002:	f104 0b1a 	add.w	fp, r4, #26
 800e006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e008:	ebaa 0303 	sub.w	r3, sl, r3
 800e00c:	eba3 0309 	sub.w	r3, r3, r9
 800e010:	4543      	cmp	r3, r8
 800e012:	f77f af79 	ble.w	800df08 <_printf_float+0x23c>
 800e016:	2301      	movs	r3, #1
 800e018:	465a      	mov	r2, fp
 800e01a:	4631      	mov	r1, r6
 800e01c:	4628      	mov	r0, r5
 800e01e:	47b8      	blx	r7
 800e020:	3001      	adds	r0, #1
 800e022:	f43f aeae 	beq.w	800dd82 <_printf_float+0xb6>
 800e026:	f108 0801 	add.w	r8, r8, #1
 800e02a:	e7ec      	b.n	800e006 <_printf_float+0x33a>
 800e02c:	4642      	mov	r2, r8
 800e02e:	4631      	mov	r1, r6
 800e030:	4628      	mov	r0, r5
 800e032:	47b8      	blx	r7
 800e034:	3001      	adds	r0, #1
 800e036:	d1c2      	bne.n	800dfbe <_printf_float+0x2f2>
 800e038:	e6a3      	b.n	800dd82 <_printf_float+0xb6>
 800e03a:	2301      	movs	r3, #1
 800e03c:	4631      	mov	r1, r6
 800e03e:	4628      	mov	r0, r5
 800e040:	9206      	str	r2, [sp, #24]
 800e042:	47b8      	blx	r7
 800e044:	3001      	adds	r0, #1
 800e046:	f43f ae9c 	beq.w	800dd82 <_printf_float+0xb6>
 800e04a:	9a06      	ldr	r2, [sp, #24]
 800e04c:	f10b 0b01 	add.w	fp, fp, #1
 800e050:	e7bb      	b.n	800dfca <_printf_float+0x2fe>
 800e052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e056:	4631      	mov	r1, r6
 800e058:	4628      	mov	r0, r5
 800e05a:	47b8      	blx	r7
 800e05c:	3001      	adds	r0, #1
 800e05e:	d1c0      	bne.n	800dfe2 <_printf_float+0x316>
 800e060:	e68f      	b.n	800dd82 <_printf_float+0xb6>
 800e062:	9a06      	ldr	r2, [sp, #24]
 800e064:	464b      	mov	r3, r9
 800e066:	4442      	add	r2, r8
 800e068:	4631      	mov	r1, r6
 800e06a:	4628      	mov	r0, r5
 800e06c:	47b8      	blx	r7
 800e06e:	3001      	adds	r0, #1
 800e070:	d1c3      	bne.n	800dffa <_printf_float+0x32e>
 800e072:	e686      	b.n	800dd82 <_printf_float+0xb6>
 800e074:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e078:	f1ba 0f01 	cmp.w	sl, #1
 800e07c:	dc01      	bgt.n	800e082 <_printf_float+0x3b6>
 800e07e:	07db      	lsls	r3, r3, #31
 800e080:	d536      	bpl.n	800e0f0 <_printf_float+0x424>
 800e082:	2301      	movs	r3, #1
 800e084:	4642      	mov	r2, r8
 800e086:	4631      	mov	r1, r6
 800e088:	4628      	mov	r0, r5
 800e08a:	47b8      	blx	r7
 800e08c:	3001      	adds	r0, #1
 800e08e:	f43f ae78 	beq.w	800dd82 <_printf_float+0xb6>
 800e092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e096:	4631      	mov	r1, r6
 800e098:	4628      	mov	r0, r5
 800e09a:	47b8      	blx	r7
 800e09c:	3001      	adds	r0, #1
 800e09e:	f43f ae70 	beq.w	800dd82 <_printf_float+0xb6>
 800e0a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0ae:	f7f2 fd33 	bl	8000b18 <__aeabi_dcmpeq>
 800e0b2:	b9c0      	cbnz	r0, 800e0e6 <_printf_float+0x41a>
 800e0b4:	4653      	mov	r3, sl
 800e0b6:	f108 0201 	add.w	r2, r8, #1
 800e0ba:	4631      	mov	r1, r6
 800e0bc:	4628      	mov	r0, r5
 800e0be:	47b8      	blx	r7
 800e0c0:	3001      	adds	r0, #1
 800e0c2:	d10c      	bne.n	800e0de <_printf_float+0x412>
 800e0c4:	e65d      	b.n	800dd82 <_printf_float+0xb6>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	465a      	mov	r2, fp
 800e0ca:	4631      	mov	r1, r6
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	47b8      	blx	r7
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	f43f ae56 	beq.w	800dd82 <_printf_float+0xb6>
 800e0d6:	f108 0801 	add.w	r8, r8, #1
 800e0da:	45d0      	cmp	r8, sl
 800e0dc:	dbf3      	blt.n	800e0c6 <_printf_float+0x3fa>
 800e0de:	464b      	mov	r3, r9
 800e0e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e0e4:	e6df      	b.n	800dea6 <_printf_float+0x1da>
 800e0e6:	f04f 0800 	mov.w	r8, #0
 800e0ea:	f104 0b1a 	add.w	fp, r4, #26
 800e0ee:	e7f4      	b.n	800e0da <_printf_float+0x40e>
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	4642      	mov	r2, r8
 800e0f4:	e7e1      	b.n	800e0ba <_printf_float+0x3ee>
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	464a      	mov	r2, r9
 800e0fa:	4631      	mov	r1, r6
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	47b8      	blx	r7
 800e100:	3001      	adds	r0, #1
 800e102:	f43f ae3e 	beq.w	800dd82 <_printf_float+0xb6>
 800e106:	f108 0801 	add.w	r8, r8, #1
 800e10a:	68e3      	ldr	r3, [r4, #12]
 800e10c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e10e:	1a5b      	subs	r3, r3, r1
 800e110:	4543      	cmp	r3, r8
 800e112:	dcf0      	bgt.n	800e0f6 <_printf_float+0x42a>
 800e114:	e6fc      	b.n	800df10 <_printf_float+0x244>
 800e116:	f04f 0800 	mov.w	r8, #0
 800e11a:	f104 0919 	add.w	r9, r4, #25
 800e11e:	e7f4      	b.n	800e10a <_printf_float+0x43e>

0800e120 <_printf_common>:
 800e120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e124:	4616      	mov	r6, r2
 800e126:	4698      	mov	r8, r3
 800e128:	688a      	ldr	r2, [r1, #8]
 800e12a:	690b      	ldr	r3, [r1, #16]
 800e12c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e130:	4293      	cmp	r3, r2
 800e132:	bfb8      	it	lt
 800e134:	4613      	movlt	r3, r2
 800e136:	6033      	str	r3, [r6, #0]
 800e138:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e13c:	4607      	mov	r7, r0
 800e13e:	460c      	mov	r4, r1
 800e140:	b10a      	cbz	r2, 800e146 <_printf_common+0x26>
 800e142:	3301      	adds	r3, #1
 800e144:	6033      	str	r3, [r6, #0]
 800e146:	6823      	ldr	r3, [r4, #0]
 800e148:	0699      	lsls	r1, r3, #26
 800e14a:	bf42      	ittt	mi
 800e14c:	6833      	ldrmi	r3, [r6, #0]
 800e14e:	3302      	addmi	r3, #2
 800e150:	6033      	strmi	r3, [r6, #0]
 800e152:	6825      	ldr	r5, [r4, #0]
 800e154:	f015 0506 	ands.w	r5, r5, #6
 800e158:	d106      	bne.n	800e168 <_printf_common+0x48>
 800e15a:	f104 0a19 	add.w	sl, r4, #25
 800e15e:	68e3      	ldr	r3, [r4, #12]
 800e160:	6832      	ldr	r2, [r6, #0]
 800e162:	1a9b      	subs	r3, r3, r2
 800e164:	42ab      	cmp	r3, r5
 800e166:	dc26      	bgt.n	800e1b6 <_printf_common+0x96>
 800e168:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e16c:	6822      	ldr	r2, [r4, #0]
 800e16e:	3b00      	subs	r3, #0
 800e170:	bf18      	it	ne
 800e172:	2301      	movne	r3, #1
 800e174:	0692      	lsls	r2, r2, #26
 800e176:	d42b      	bmi.n	800e1d0 <_printf_common+0xb0>
 800e178:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e17c:	4641      	mov	r1, r8
 800e17e:	4638      	mov	r0, r7
 800e180:	47c8      	blx	r9
 800e182:	3001      	adds	r0, #1
 800e184:	d01e      	beq.n	800e1c4 <_printf_common+0xa4>
 800e186:	6823      	ldr	r3, [r4, #0]
 800e188:	6922      	ldr	r2, [r4, #16]
 800e18a:	f003 0306 	and.w	r3, r3, #6
 800e18e:	2b04      	cmp	r3, #4
 800e190:	bf02      	ittt	eq
 800e192:	68e5      	ldreq	r5, [r4, #12]
 800e194:	6833      	ldreq	r3, [r6, #0]
 800e196:	1aed      	subeq	r5, r5, r3
 800e198:	68a3      	ldr	r3, [r4, #8]
 800e19a:	bf0c      	ite	eq
 800e19c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1a0:	2500      	movne	r5, #0
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	bfc4      	itt	gt
 800e1a6:	1a9b      	subgt	r3, r3, r2
 800e1a8:	18ed      	addgt	r5, r5, r3
 800e1aa:	2600      	movs	r6, #0
 800e1ac:	341a      	adds	r4, #26
 800e1ae:	42b5      	cmp	r5, r6
 800e1b0:	d11a      	bne.n	800e1e8 <_printf_common+0xc8>
 800e1b2:	2000      	movs	r0, #0
 800e1b4:	e008      	b.n	800e1c8 <_printf_common+0xa8>
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	4652      	mov	r2, sl
 800e1ba:	4641      	mov	r1, r8
 800e1bc:	4638      	mov	r0, r7
 800e1be:	47c8      	blx	r9
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	d103      	bne.n	800e1cc <_printf_common+0xac>
 800e1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1cc:	3501      	adds	r5, #1
 800e1ce:	e7c6      	b.n	800e15e <_printf_common+0x3e>
 800e1d0:	18e1      	adds	r1, r4, r3
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	2030      	movs	r0, #48	@ 0x30
 800e1d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e1da:	4422      	add	r2, r4
 800e1dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e1e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e1e4:	3302      	adds	r3, #2
 800e1e6:	e7c7      	b.n	800e178 <_printf_common+0x58>
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	4622      	mov	r2, r4
 800e1ec:	4641      	mov	r1, r8
 800e1ee:	4638      	mov	r0, r7
 800e1f0:	47c8      	blx	r9
 800e1f2:	3001      	adds	r0, #1
 800e1f4:	d0e6      	beq.n	800e1c4 <_printf_common+0xa4>
 800e1f6:	3601      	adds	r6, #1
 800e1f8:	e7d9      	b.n	800e1ae <_printf_common+0x8e>
	...

0800e1fc <_printf_i>:
 800e1fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e200:	7e0f      	ldrb	r7, [r1, #24]
 800e202:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e204:	2f78      	cmp	r7, #120	@ 0x78
 800e206:	4691      	mov	r9, r2
 800e208:	4680      	mov	r8, r0
 800e20a:	460c      	mov	r4, r1
 800e20c:	469a      	mov	sl, r3
 800e20e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e212:	d807      	bhi.n	800e224 <_printf_i+0x28>
 800e214:	2f62      	cmp	r7, #98	@ 0x62
 800e216:	d80a      	bhi.n	800e22e <_printf_i+0x32>
 800e218:	2f00      	cmp	r7, #0
 800e21a:	f000 80d2 	beq.w	800e3c2 <_printf_i+0x1c6>
 800e21e:	2f58      	cmp	r7, #88	@ 0x58
 800e220:	f000 80b9 	beq.w	800e396 <_printf_i+0x19a>
 800e224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e228:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e22c:	e03a      	b.n	800e2a4 <_printf_i+0xa8>
 800e22e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e232:	2b15      	cmp	r3, #21
 800e234:	d8f6      	bhi.n	800e224 <_printf_i+0x28>
 800e236:	a101      	add	r1, pc, #4	@ (adr r1, 800e23c <_printf_i+0x40>)
 800e238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e23c:	0800e295 	.word	0x0800e295
 800e240:	0800e2a9 	.word	0x0800e2a9
 800e244:	0800e225 	.word	0x0800e225
 800e248:	0800e225 	.word	0x0800e225
 800e24c:	0800e225 	.word	0x0800e225
 800e250:	0800e225 	.word	0x0800e225
 800e254:	0800e2a9 	.word	0x0800e2a9
 800e258:	0800e225 	.word	0x0800e225
 800e25c:	0800e225 	.word	0x0800e225
 800e260:	0800e225 	.word	0x0800e225
 800e264:	0800e225 	.word	0x0800e225
 800e268:	0800e3a9 	.word	0x0800e3a9
 800e26c:	0800e2d3 	.word	0x0800e2d3
 800e270:	0800e363 	.word	0x0800e363
 800e274:	0800e225 	.word	0x0800e225
 800e278:	0800e225 	.word	0x0800e225
 800e27c:	0800e3cb 	.word	0x0800e3cb
 800e280:	0800e225 	.word	0x0800e225
 800e284:	0800e2d3 	.word	0x0800e2d3
 800e288:	0800e225 	.word	0x0800e225
 800e28c:	0800e225 	.word	0x0800e225
 800e290:	0800e36b 	.word	0x0800e36b
 800e294:	6833      	ldr	r3, [r6, #0]
 800e296:	1d1a      	adds	r2, r3, #4
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	6032      	str	r2, [r6, #0]
 800e29c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	e09d      	b.n	800e3e4 <_printf_i+0x1e8>
 800e2a8:	6833      	ldr	r3, [r6, #0]
 800e2aa:	6820      	ldr	r0, [r4, #0]
 800e2ac:	1d19      	adds	r1, r3, #4
 800e2ae:	6031      	str	r1, [r6, #0]
 800e2b0:	0606      	lsls	r6, r0, #24
 800e2b2:	d501      	bpl.n	800e2b8 <_printf_i+0xbc>
 800e2b4:	681d      	ldr	r5, [r3, #0]
 800e2b6:	e003      	b.n	800e2c0 <_printf_i+0xc4>
 800e2b8:	0645      	lsls	r5, r0, #25
 800e2ba:	d5fb      	bpl.n	800e2b4 <_printf_i+0xb8>
 800e2bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e2c0:	2d00      	cmp	r5, #0
 800e2c2:	da03      	bge.n	800e2cc <_printf_i+0xd0>
 800e2c4:	232d      	movs	r3, #45	@ 0x2d
 800e2c6:	426d      	negs	r5, r5
 800e2c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2cc:	4859      	ldr	r0, [pc, #356]	@ (800e434 <_printf_i+0x238>)
 800e2ce:	230a      	movs	r3, #10
 800e2d0:	e011      	b.n	800e2f6 <_printf_i+0xfa>
 800e2d2:	6821      	ldr	r1, [r4, #0]
 800e2d4:	6833      	ldr	r3, [r6, #0]
 800e2d6:	0608      	lsls	r0, r1, #24
 800e2d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e2dc:	d402      	bmi.n	800e2e4 <_printf_i+0xe8>
 800e2de:	0649      	lsls	r1, r1, #25
 800e2e0:	bf48      	it	mi
 800e2e2:	b2ad      	uxthmi	r5, r5
 800e2e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800e2e6:	4853      	ldr	r0, [pc, #332]	@ (800e434 <_printf_i+0x238>)
 800e2e8:	6033      	str	r3, [r6, #0]
 800e2ea:	bf14      	ite	ne
 800e2ec:	230a      	movne	r3, #10
 800e2ee:	2308      	moveq	r3, #8
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e2f6:	6866      	ldr	r6, [r4, #4]
 800e2f8:	60a6      	str	r6, [r4, #8]
 800e2fa:	2e00      	cmp	r6, #0
 800e2fc:	bfa2      	ittt	ge
 800e2fe:	6821      	ldrge	r1, [r4, #0]
 800e300:	f021 0104 	bicge.w	r1, r1, #4
 800e304:	6021      	strge	r1, [r4, #0]
 800e306:	b90d      	cbnz	r5, 800e30c <_printf_i+0x110>
 800e308:	2e00      	cmp	r6, #0
 800e30a:	d04b      	beq.n	800e3a4 <_printf_i+0x1a8>
 800e30c:	4616      	mov	r6, r2
 800e30e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e312:	fb03 5711 	mls	r7, r3, r1, r5
 800e316:	5dc7      	ldrb	r7, [r0, r7]
 800e318:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e31c:	462f      	mov	r7, r5
 800e31e:	42bb      	cmp	r3, r7
 800e320:	460d      	mov	r5, r1
 800e322:	d9f4      	bls.n	800e30e <_printf_i+0x112>
 800e324:	2b08      	cmp	r3, #8
 800e326:	d10b      	bne.n	800e340 <_printf_i+0x144>
 800e328:	6823      	ldr	r3, [r4, #0]
 800e32a:	07df      	lsls	r7, r3, #31
 800e32c:	d508      	bpl.n	800e340 <_printf_i+0x144>
 800e32e:	6923      	ldr	r3, [r4, #16]
 800e330:	6861      	ldr	r1, [r4, #4]
 800e332:	4299      	cmp	r1, r3
 800e334:	bfde      	ittt	le
 800e336:	2330      	movle	r3, #48	@ 0x30
 800e338:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e33c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e340:	1b92      	subs	r2, r2, r6
 800e342:	6122      	str	r2, [r4, #16]
 800e344:	f8cd a000 	str.w	sl, [sp]
 800e348:	464b      	mov	r3, r9
 800e34a:	aa03      	add	r2, sp, #12
 800e34c:	4621      	mov	r1, r4
 800e34e:	4640      	mov	r0, r8
 800e350:	f7ff fee6 	bl	800e120 <_printf_common>
 800e354:	3001      	adds	r0, #1
 800e356:	d14a      	bne.n	800e3ee <_printf_i+0x1f2>
 800e358:	f04f 30ff 	mov.w	r0, #4294967295
 800e35c:	b004      	add	sp, #16
 800e35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e362:	6823      	ldr	r3, [r4, #0]
 800e364:	f043 0320 	orr.w	r3, r3, #32
 800e368:	6023      	str	r3, [r4, #0]
 800e36a:	4833      	ldr	r0, [pc, #204]	@ (800e438 <_printf_i+0x23c>)
 800e36c:	2778      	movs	r7, #120	@ 0x78
 800e36e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e372:	6823      	ldr	r3, [r4, #0]
 800e374:	6831      	ldr	r1, [r6, #0]
 800e376:	061f      	lsls	r7, r3, #24
 800e378:	f851 5b04 	ldr.w	r5, [r1], #4
 800e37c:	d402      	bmi.n	800e384 <_printf_i+0x188>
 800e37e:	065f      	lsls	r7, r3, #25
 800e380:	bf48      	it	mi
 800e382:	b2ad      	uxthmi	r5, r5
 800e384:	6031      	str	r1, [r6, #0]
 800e386:	07d9      	lsls	r1, r3, #31
 800e388:	bf44      	itt	mi
 800e38a:	f043 0320 	orrmi.w	r3, r3, #32
 800e38e:	6023      	strmi	r3, [r4, #0]
 800e390:	b11d      	cbz	r5, 800e39a <_printf_i+0x19e>
 800e392:	2310      	movs	r3, #16
 800e394:	e7ac      	b.n	800e2f0 <_printf_i+0xf4>
 800e396:	4827      	ldr	r0, [pc, #156]	@ (800e434 <_printf_i+0x238>)
 800e398:	e7e9      	b.n	800e36e <_printf_i+0x172>
 800e39a:	6823      	ldr	r3, [r4, #0]
 800e39c:	f023 0320 	bic.w	r3, r3, #32
 800e3a0:	6023      	str	r3, [r4, #0]
 800e3a2:	e7f6      	b.n	800e392 <_printf_i+0x196>
 800e3a4:	4616      	mov	r6, r2
 800e3a6:	e7bd      	b.n	800e324 <_printf_i+0x128>
 800e3a8:	6833      	ldr	r3, [r6, #0]
 800e3aa:	6825      	ldr	r5, [r4, #0]
 800e3ac:	6961      	ldr	r1, [r4, #20]
 800e3ae:	1d18      	adds	r0, r3, #4
 800e3b0:	6030      	str	r0, [r6, #0]
 800e3b2:	062e      	lsls	r6, r5, #24
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	d501      	bpl.n	800e3bc <_printf_i+0x1c0>
 800e3b8:	6019      	str	r1, [r3, #0]
 800e3ba:	e002      	b.n	800e3c2 <_printf_i+0x1c6>
 800e3bc:	0668      	lsls	r0, r5, #25
 800e3be:	d5fb      	bpl.n	800e3b8 <_printf_i+0x1bc>
 800e3c0:	8019      	strh	r1, [r3, #0]
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	6123      	str	r3, [r4, #16]
 800e3c6:	4616      	mov	r6, r2
 800e3c8:	e7bc      	b.n	800e344 <_printf_i+0x148>
 800e3ca:	6833      	ldr	r3, [r6, #0]
 800e3cc:	1d1a      	adds	r2, r3, #4
 800e3ce:	6032      	str	r2, [r6, #0]
 800e3d0:	681e      	ldr	r6, [r3, #0]
 800e3d2:	6862      	ldr	r2, [r4, #4]
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	4630      	mov	r0, r6
 800e3d8:	f7f1 ff22 	bl	8000220 <memchr>
 800e3dc:	b108      	cbz	r0, 800e3e2 <_printf_i+0x1e6>
 800e3de:	1b80      	subs	r0, r0, r6
 800e3e0:	6060      	str	r0, [r4, #4]
 800e3e2:	6863      	ldr	r3, [r4, #4]
 800e3e4:	6123      	str	r3, [r4, #16]
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3ec:	e7aa      	b.n	800e344 <_printf_i+0x148>
 800e3ee:	6923      	ldr	r3, [r4, #16]
 800e3f0:	4632      	mov	r2, r6
 800e3f2:	4649      	mov	r1, r9
 800e3f4:	4640      	mov	r0, r8
 800e3f6:	47d0      	blx	sl
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	d0ad      	beq.n	800e358 <_printf_i+0x15c>
 800e3fc:	6823      	ldr	r3, [r4, #0]
 800e3fe:	079b      	lsls	r3, r3, #30
 800e400:	d413      	bmi.n	800e42a <_printf_i+0x22e>
 800e402:	68e0      	ldr	r0, [r4, #12]
 800e404:	9b03      	ldr	r3, [sp, #12]
 800e406:	4298      	cmp	r0, r3
 800e408:	bfb8      	it	lt
 800e40a:	4618      	movlt	r0, r3
 800e40c:	e7a6      	b.n	800e35c <_printf_i+0x160>
 800e40e:	2301      	movs	r3, #1
 800e410:	4632      	mov	r2, r6
 800e412:	4649      	mov	r1, r9
 800e414:	4640      	mov	r0, r8
 800e416:	47d0      	blx	sl
 800e418:	3001      	adds	r0, #1
 800e41a:	d09d      	beq.n	800e358 <_printf_i+0x15c>
 800e41c:	3501      	adds	r5, #1
 800e41e:	68e3      	ldr	r3, [r4, #12]
 800e420:	9903      	ldr	r1, [sp, #12]
 800e422:	1a5b      	subs	r3, r3, r1
 800e424:	42ab      	cmp	r3, r5
 800e426:	dcf2      	bgt.n	800e40e <_printf_i+0x212>
 800e428:	e7eb      	b.n	800e402 <_printf_i+0x206>
 800e42a:	2500      	movs	r5, #0
 800e42c:	f104 0619 	add.w	r6, r4, #25
 800e430:	e7f5      	b.n	800e41e <_printf_i+0x222>
 800e432:	bf00      	nop
 800e434:	0801325e 	.word	0x0801325e
 800e438:	0801326f 	.word	0x0801326f

0800e43c <_scanf_float>:
 800e43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e440:	b087      	sub	sp, #28
 800e442:	4617      	mov	r7, r2
 800e444:	9303      	str	r3, [sp, #12]
 800e446:	688b      	ldr	r3, [r1, #8]
 800e448:	1e5a      	subs	r2, r3, #1
 800e44a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e44e:	bf81      	itttt	hi
 800e450:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e454:	eb03 0b05 	addhi.w	fp, r3, r5
 800e458:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e45c:	608b      	strhi	r3, [r1, #8]
 800e45e:	680b      	ldr	r3, [r1, #0]
 800e460:	460a      	mov	r2, r1
 800e462:	f04f 0500 	mov.w	r5, #0
 800e466:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e46a:	f842 3b1c 	str.w	r3, [r2], #28
 800e46e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e472:	4680      	mov	r8, r0
 800e474:	460c      	mov	r4, r1
 800e476:	bf98      	it	ls
 800e478:	f04f 0b00 	movls.w	fp, #0
 800e47c:	9201      	str	r2, [sp, #4]
 800e47e:	4616      	mov	r6, r2
 800e480:	46aa      	mov	sl, r5
 800e482:	46a9      	mov	r9, r5
 800e484:	9502      	str	r5, [sp, #8]
 800e486:	68a2      	ldr	r2, [r4, #8]
 800e488:	b152      	cbz	r2, 800e4a0 <_scanf_float+0x64>
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	2b4e      	cmp	r3, #78	@ 0x4e
 800e490:	d864      	bhi.n	800e55c <_scanf_float+0x120>
 800e492:	2b40      	cmp	r3, #64	@ 0x40
 800e494:	d83c      	bhi.n	800e510 <_scanf_float+0xd4>
 800e496:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e49a:	b2c8      	uxtb	r0, r1
 800e49c:	280e      	cmp	r0, #14
 800e49e:	d93a      	bls.n	800e516 <_scanf_float+0xda>
 800e4a0:	f1b9 0f00 	cmp.w	r9, #0
 800e4a4:	d003      	beq.n	800e4ae <_scanf_float+0x72>
 800e4a6:	6823      	ldr	r3, [r4, #0]
 800e4a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4ac:	6023      	str	r3, [r4, #0]
 800e4ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e4b2:	f1ba 0f01 	cmp.w	sl, #1
 800e4b6:	f200 8117 	bhi.w	800e6e8 <_scanf_float+0x2ac>
 800e4ba:	9b01      	ldr	r3, [sp, #4]
 800e4bc:	429e      	cmp	r6, r3
 800e4be:	f200 8108 	bhi.w	800e6d2 <_scanf_float+0x296>
 800e4c2:	2001      	movs	r0, #1
 800e4c4:	b007      	add	sp, #28
 800e4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e4ce:	2a0d      	cmp	r2, #13
 800e4d0:	d8e6      	bhi.n	800e4a0 <_scanf_float+0x64>
 800e4d2:	a101      	add	r1, pc, #4	@ (adr r1, 800e4d8 <_scanf_float+0x9c>)
 800e4d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e4d8:	0800e61f 	.word	0x0800e61f
 800e4dc:	0800e4a1 	.word	0x0800e4a1
 800e4e0:	0800e4a1 	.word	0x0800e4a1
 800e4e4:	0800e4a1 	.word	0x0800e4a1
 800e4e8:	0800e67f 	.word	0x0800e67f
 800e4ec:	0800e657 	.word	0x0800e657
 800e4f0:	0800e4a1 	.word	0x0800e4a1
 800e4f4:	0800e4a1 	.word	0x0800e4a1
 800e4f8:	0800e62d 	.word	0x0800e62d
 800e4fc:	0800e4a1 	.word	0x0800e4a1
 800e500:	0800e4a1 	.word	0x0800e4a1
 800e504:	0800e4a1 	.word	0x0800e4a1
 800e508:	0800e4a1 	.word	0x0800e4a1
 800e50c:	0800e5e5 	.word	0x0800e5e5
 800e510:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e514:	e7db      	b.n	800e4ce <_scanf_float+0x92>
 800e516:	290e      	cmp	r1, #14
 800e518:	d8c2      	bhi.n	800e4a0 <_scanf_float+0x64>
 800e51a:	a001      	add	r0, pc, #4	@ (adr r0, 800e520 <_scanf_float+0xe4>)
 800e51c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e520:	0800e5d5 	.word	0x0800e5d5
 800e524:	0800e4a1 	.word	0x0800e4a1
 800e528:	0800e5d5 	.word	0x0800e5d5
 800e52c:	0800e66b 	.word	0x0800e66b
 800e530:	0800e4a1 	.word	0x0800e4a1
 800e534:	0800e57d 	.word	0x0800e57d
 800e538:	0800e5bb 	.word	0x0800e5bb
 800e53c:	0800e5bb 	.word	0x0800e5bb
 800e540:	0800e5bb 	.word	0x0800e5bb
 800e544:	0800e5bb 	.word	0x0800e5bb
 800e548:	0800e5bb 	.word	0x0800e5bb
 800e54c:	0800e5bb 	.word	0x0800e5bb
 800e550:	0800e5bb 	.word	0x0800e5bb
 800e554:	0800e5bb 	.word	0x0800e5bb
 800e558:	0800e5bb 	.word	0x0800e5bb
 800e55c:	2b6e      	cmp	r3, #110	@ 0x6e
 800e55e:	d809      	bhi.n	800e574 <_scanf_float+0x138>
 800e560:	2b60      	cmp	r3, #96	@ 0x60
 800e562:	d8b2      	bhi.n	800e4ca <_scanf_float+0x8e>
 800e564:	2b54      	cmp	r3, #84	@ 0x54
 800e566:	d07b      	beq.n	800e660 <_scanf_float+0x224>
 800e568:	2b59      	cmp	r3, #89	@ 0x59
 800e56a:	d199      	bne.n	800e4a0 <_scanf_float+0x64>
 800e56c:	2d07      	cmp	r5, #7
 800e56e:	d197      	bne.n	800e4a0 <_scanf_float+0x64>
 800e570:	2508      	movs	r5, #8
 800e572:	e02c      	b.n	800e5ce <_scanf_float+0x192>
 800e574:	2b74      	cmp	r3, #116	@ 0x74
 800e576:	d073      	beq.n	800e660 <_scanf_float+0x224>
 800e578:	2b79      	cmp	r3, #121	@ 0x79
 800e57a:	e7f6      	b.n	800e56a <_scanf_float+0x12e>
 800e57c:	6821      	ldr	r1, [r4, #0]
 800e57e:	05c8      	lsls	r0, r1, #23
 800e580:	d51b      	bpl.n	800e5ba <_scanf_float+0x17e>
 800e582:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e586:	6021      	str	r1, [r4, #0]
 800e588:	f109 0901 	add.w	r9, r9, #1
 800e58c:	f1bb 0f00 	cmp.w	fp, #0
 800e590:	d003      	beq.n	800e59a <_scanf_float+0x15e>
 800e592:	3201      	adds	r2, #1
 800e594:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e598:	60a2      	str	r2, [r4, #8]
 800e59a:	68a3      	ldr	r3, [r4, #8]
 800e59c:	3b01      	subs	r3, #1
 800e59e:	60a3      	str	r3, [r4, #8]
 800e5a0:	6923      	ldr	r3, [r4, #16]
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	6123      	str	r3, [r4, #16]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	3b01      	subs	r3, #1
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	607b      	str	r3, [r7, #4]
 800e5ae:	f340 8087 	ble.w	800e6c0 <_scanf_float+0x284>
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	603b      	str	r3, [r7, #0]
 800e5b8:	e765      	b.n	800e486 <_scanf_float+0x4a>
 800e5ba:	eb1a 0105 	adds.w	r1, sl, r5
 800e5be:	f47f af6f 	bne.w	800e4a0 <_scanf_float+0x64>
 800e5c2:	6822      	ldr	r2, [r4, #0]
 800e5c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e5c8:	6022      	str	r2, [r4, #0]
 800e5ca:	460d      	mov	r5, r1
 800e5cc:	468a      	mov	sl, r1
 800e5ce:	f806 3b01 	strb.w	r3, [r6], #1
 800e5d2:	e7e2      	b.n	800e59a <_scanf_float+0x15e>
 800e5d4:	6822      	ldr	r2, [r4, #0]
 800e5d6:	0610      	lsls	r0, r2, #24
 800e5d8:	f57f af62 	bpl.w	800e4a0 <_scanf_float+0x64>
 800e5dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e5e0:	6022      	str	r2, [r4, #0]
 800e5e2:	e7f4      	b.n	800e5ce <_scanf_float+0x192>
 800e5e4:	f1ba 0f00 	cmp.w	sl, #0
 800e5e8:	d10e      	bne.n	800e608 <_scanf_float+0x1cc>
 800e5ea:	f1b9 0f00 	cmp.w	r9, #0
 800e5ee:	d10e      	bne.n	800e60e <_scanf_float+0x1d2>
 800e5f0:	6822      	ldr	r2, [r4, #0]
 800e5f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e5f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e5fa:	d108      	bne.n	800e60e <_scanf_float+0x1d2>
 800e5fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e600:	6022      	str	r2, [r4, #0]
 800e602:	f04f 0a01 	mov.w	sl, #1
 800e606:	e7e2      	b.n	800e5ce <_scanf_float+0x192>
 800e608:	f1ba 0f02 	cmp.w	sl, #2
 800e60c:	d055      	beq.n	800e6ba <_scanf_float+0x27e>
 800e60e:	2d01      	cmp	r5, #1
 800e610:	d002      	beq.n	800e618 <_scanf_float+0x1dc>
 800e612:	2d04      	cmp	r5, #4
 800e614:	f47f af44 	bne.w	800e4a0 <_scanf_float+0x64>
 800e618:	3501      	adds	r5, #1
 800e61a:	b2ed      	uxtb	r5, r5
 800e61c:	e7d7      	b.n	800e5ce <_scanf_float+0x192>
 800e61e:	f1ba 0f01 	cmp.w	sl, #1
 800e622:	f47f af3d 	bne.w	800e4a0 <_scanf_float+0x64>
 800e626:	f04f 0a02 	mov.w	sl, #2
 800e62a:	e7d0      	b.n	800e5ce <_scanf_float+0x192>
 800e62c:	b97d      	cbnz	r5, 800e64e <_scanf_float+0x212>
 800e62e:	f1b9 0f00 	cmp.w	r9, #0
 800e632:	f47f af38 	bne.w	800e4a6 <_scanf_float+0x6a>
 800e636:	6822      	ldr	r2, [r4, #0]
 800e638:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e63c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e640:	f040 8108 	bne.w	800e854 <_scanf_float+0x418>
 800e644:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e648:	6022      	str	r2, [r4, #0]
 800e64a:	2501      	movs	r5, #1
 800e64c:	e7bf      	b.n	800e5ce <_scanf_float+0x192>
 800e64e:	2d03      	cmp	r5, #3
 800e650:	d0e2      	beq.n	800e618 <_scanf_float+0x1dc>
 800e652:	2d05      	cmp	r5, #5
 800e654:	e7de      	b.n	800e614 <_scanf_float+0x1d8>
 800e656:	2d02      	cmp	r5, #2
 800e658:	f47f af22 	bne.w	800e4a0 <_scanf_float+0x64>
 800e65c:	2503      	movs	r5, #3
 800e65e:	e7b6      	b.n	800e5ce <_scanf_float+0x192>
 800e660:	2d06      	cmp	r5, #6
 800e662:	f47f af1d 	bne.w	800e4a0 <_scanf_float+0x64>
 800e666:	2507      	movs	r5, #7
 800e668:	e7b1      	b.n	800e5ce <_scanf_float+0x192>
 800e66a:	6822      	ldr	r2, [r4, #0]
 800e66c:	0591      	lsls	r1, r2, #22
 800e66e:	f57f af17 	bpl.w	800e4a0 <_scanf_float+0x64>
 800e672:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e676:	6022      	str	r2, [r4, #0]
 800e678:	f8cd 9008 	str.w	r9, [sp, #8]
 800e67c:	e7a7      	b.n	800e5ce <_scanf_float+0x192>
 800e67e:	6822      	ldr	r2, [r4, #0]
 800e680:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e684:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e688:	d006      	beq.n	800e698 <_scanf_float+0x25c>
 800e68a:	0550      	lsls	r0, r2, #21
 800e68c:	f57f af08 	bpl.w	800e4a0 <_scanf_float+0x64>
 800e690:	f1b9 0f00 	cmp.w	r9, #0
 800e694:	f000 80de 	beq.w	800e854 <_scanf_float+0x418>
 800e698:	0591      	lsls	r1, r2, #22
 800e69a:	bf58      	it	pl
 800e69c:	9902      	ldrpl	r1, [sp, #8]
 800e69e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e6a2:	bf58      	it	pl
 800e6a4:	eba9 0101 	subpl.w	r1, r9, r1
 800e6a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e6ac:	bf58      	it	pl
 800e6ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e6b2:	6022      	str	r2, [r4, #0]
 800e6b4:	f04f 0900 	mov.w	r9, #0
 800e6b8:	e789      	b.n	800e5ce <_scanf_float+0x192>
 800e6ba:	f04f 0a03 	mov.w	sl, #3
 800e6be:	e786      	b.n	800e5ce <_scanf_float+0x192>
 800e6c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e6c4:	4639      	mov	r1, r7
 800e6c6:	4640      	mov	r0, r8
 800e6c8:	4798      	blx	r3
 800e6ca:	2800      	cmp	r0, #0
 800e6cc:	f43f aedb 	beq.w	800e486 <_scanf_float+0x4a>
 800e6d0:	e6e6      	b.n	800e4a0 <_scanf_float+0x64>
 800e6d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e6d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e6da:	463a      	mov	r2, r7
 800e6dc:	4640      	mov	r0, r8
 800e6de:	4798      	blx	r3
 800e6e0:	6923      	ldr	r3, [r4, #16]
 800e6e2:	3b01      	subs	r3, #1
 800e6e4:	6123      	str	r3, [r4, #16]
 800e6e6:	e6e8      	b.n	800e4ba <_scanf_float+0x7e>
 800e6e8:	1e6b      	subs	r3, r5, #1
 800e6ea:	2b06      	cmp	r3, #6
 800e6ec:	d824      	bhi.n	800e738 <_scanf_float+0x2fc>
 800e6ee:	2d02      	cmp	r5, #2
 800e6f0:	d836      	bhi.n	800e760 <_scanf_float+0x324>
 800e6f2:	9b01      	ldr	r3, [sp, #4]
 800e6f4:	429e      	cmp	r6, r3
 800e6f6:	f67f aee4 	bls.w	800e4c2 <_scanf_float+0x86>
 800e6fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e6fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e702:	463a      	mov	r2, r7
 800e704:	4640      	mov	r0, r8
 800e706:	4798      	blx	r3
 800e708:	6923      	ldr	r3, [r4, #16]
 800e70a:	3b01      	subs	r3, #1
 800e70c:	6123      	str	r3, [r4, #16]
 800e70e:	e7f0      	b.n	800e6f2 <_scanf_float+0x2b6>
 800e710:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e714:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e718:	463a      	mov	r2, r7
 800e71a:	4640      	mov	r0, r8
 800e71c:	4798      	blx	r3
 800e71e:	6923      	ldr	r3, [r4, #16]
 800e720:	3b01      	subs	r3, #1
 800e722:	6123      	str	r3, [r4, #16]
 800e724:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e728:	fa5f fa8a 	uxtb.w	sl, sl
 800e72c:	f1ba 0f02 	cmp.w	sl, #2
 800e730:	d1ee      	bne.n	800e710 <_scanf_float+0x2d4>
 800e732:	3d03      	subs	r5, #3
 800e734:	b2ed      	uxtb	r5, r5
 800e736:	1b76      	subs	r6, r6, r5
 800e738:	6823      	ldr	r3, [r4, #0]
 800e73a:	05da      	lsls	r2, r3, #23
 800e73c:	d530      	bpl.n	800e7a0 <_scanf_float+0x364>
 800e73e:	055b      	lsls	r3, r3, #21
 800e740:	d511      	bpl.n	800e766 <_scanf_float+0x32a>
 800e742:	9b01      	ldr	r3, [sp, #4]
 800e744:	429e      	cmp	r6, r3
 800e746:	f67f aebc 	bls.w	800e4c2 <_scanf_float+0x86>
 800e74a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e74e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e752:	463a      	mov	r2, r7
 800e754:	4640      	mov	r0, r8
 800e756:	4798      	blx	r3
 800e758:	6923      	ldr	r3, [r4, #16]
 800e75a:	3b01      	subs	r3, #1
 800e75c:	6123      	str	r3, [r4, #16]
 800e75e:	e7f0      	b.n	800e742 <_scanf_float+0x306>
 800e760:	46aa      	mov	sl, r5
 800e762:	46b3      	mov	fp, r6
 800e764:	e7de      	b.n	800e724 <_scanf_float+0x2e8>
 800e766:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e76a:	6923      	ldr	r3, [r4, #16]
 800e76c:	2965      	cmp	r1, #101	@ 0x65
 800e76e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e772:	f106 35ff 	add.w	r5, r6, #4294967295
 800e776:	6123      	str	r3, [r4, #16]
 800e778:	d00c      	beq.n	800e794 <_scanf_float+0x358>
 800e77a:	2945      	cmp	r1, #69	@ 0x45
 800e77c:	d00a      	beq.n	800e794 <_scanf_float+0x358>
 800e77e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e782:	463a      	mov	r2, r7
 800e784:	4640      	mov	r0, r8
 800e786:	4798      	blx	r3
 800e788:	6923      	ldr	r3, [r4, #16]
 800e78a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e78e:	3b01      	subs	r3, #1
 800e790:	1eb5      	subs	r5, r6, #2
 800e792:	6123      	str	r3, [r4, #16]
 800e794:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e798:	463a      	mov	r2, r7
 800e79a:	4640      	mov	r0, r8
 800e79c:	4798      	blx	r3
 800e79e:	462e      	mov	r6, r5
 800e7a0:	6822      	ldr	r2, [r4, #0]
 800e7a2:	f012 0210 	ands.w	r2, r2, #16
 800e7a6:	d001      	beq.n	800e7ac <_scanf_float+0x370>
 800e7a8:	2000      	movs	r0, #0
 800e7aa:	e68b      	b.n	800e4c4 <_scanf_float+0x88>
 800e7ac:	7032      	strb	r2, [r6, #0]
 800e7ae:	6823      	ldr	r3, [r4, #0]
 800e7b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e7b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e7b8:	d11c      	bne.n	800e7f4 <_scanf_float+0x3b8>
 800e7ba:	9b02      	ldr	r3, [sp, #8]
 800e7bc:	454b      	cmp	r3, r9
 800e7be:	eba3 0209 	sub.w	r2, r3, r9
 800e7c2:	d123      	bne.n	800e80c <_scanf_float+0x3d0>
 800e7c4:	9901      	ldr	r1, [sp, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	f002 fbe5 	bl	8010f98 <_strtod_r>
 800e7ce:	9b03      	ldr	r3, [sp, #12]
 800e7d0:	6821      	ldr	r1, [r4, #0]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f011 0f02 	tst.w	r1, #2
 800e7d8:	ec57 6b10 	vmov	r6, r7, d0
 800e7dc:	f103 0204 	add.w	r2, r3, #4
 800e7e0:	d01f      	beq.n	800e822 <_scanf_float+0x3e6>
 800e7e2:	9903      	ldr	r1, [sp, #12]
 800e7e4:	600a      	str	r2, [r1, #0]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	e9c3 6700 	strd	r6, r7, [r3]
 800e7ec:	68e3      	ldr	r3, [r4, #12]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	60e3      	str	r3, [r4, #12]
 800e7f2:	e7d9      	b.n	800e7a8 <_scanf_float+0x36c>
 800e7f4:	9b04      	ldr	r3, [sp, #16]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d0e4      	beq.n	800e7c4 <_scanf_float+0x388>
 800e7fa:	9905      	ldr	r1, [sp, #20]
 800e7fc:	230a      	movs	r3, #10
 800e7fe:	3101      	adds	r1, #1
 800e800:	4640      	mov	r0, r8
 800e802:	f002 fc49 	bl	8011098 <_strtol_r>
 800e806:	9b04      	ldr	r3, [sp, #16]
 800e808:	9e05      	ldr	r6, [sp, #20]
 800e80a:	1ac2      	subs	r2, r0, r3
 800e80c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e810:	429e      	cmp	r6, r3
 800e812:	bf28      	it	cs
 800e814:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e818:	4910      	ldr	r1, [pc, #64]	@ (800e85c <_scanf_float+0x420>)
 800e81a:	4630      	mov	r0, r6
 800e81c:	f000 f8f6 	bl	800ea0c <siprintf>
 800e820:	e7d0      	b.n	800e7c4 <_scanf_float+0x388>
 800e822:	f011 0f04 	tst.w	r1, #4
 800e826:	9903      	ldr	r1, [sp, #12]
 800e828:	600a      	str	r2, [r1, #0]
 800e82a:	d1dc      	bne.n	800e7e6 <_scanf_float+0x3aa>
 800e82c:	681d      	ldr	r5, [r3, #0]
 800e82e:	4632      	mov	r2, r6
 800e830:	463b      	mov	r3, r7
 800e832:	4630      	mov	r0, r6
 800e834:	4639      	mov	r1, r7
 800e836:	f7f2 f9a1 	bl	8000b7c <__aeabi_dcmpun>
 800e83a:	b128      	cbz	r0, 800e848 <_scanf_float+0x40c>
 800e83c:	4808      	ldr	r0, [pc, #32]	@ (800e860 <_scanf_float+0x424>)
 800e83e:	f000 fa57 	bl	800ecf0 <nanf>
 800e842:	ed85 0a00 	vstr	s0, [r5]
 800e846:	e7d1      	b.n	800e7ec <_scanf_float+0x3b0>
 800e848:	4630      	mov	r0, r6
 800e84a:	4639      	mov	r1, r7
 800e84c:	f7f2 f9f4 	bl	8000c38 <__aeabi_d2f>
 800e850:	6028      	str	r0, [r5, #0]
 800e852:	e7cb      	b.n	800e7ec <_scanf_float+0x3b0>
 800e854:	f04f 0900 	mov.w	r9, #0
 800e858:	e629      	b.n	800e4ae <_scanf_float+0x72>
 800e85a:	bf00      	nop
 800e85c:	08013280 	.word	0x08013280
 800e860:	0801324b 	.word	0x0801324b

0800e864 <std>:
 800e864:	2300      	movs	r3, #0
 800e866:	b510      	push	{r4, lr}
 800e868:	4604      	mov	r4, r0
 800e86a:	e9c0 3300 	strd	r3, r3, [r0]
 800e86e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e872:	6083      	str	r3, [r0, #8]
 800e874:	8181      	strh	r1, [r0, #12]
 800e876:	6643      	str	r3, [r0, #100]	@ 0x64
 800e878:	81c2      	strh	r2, [r0, #14]
 800e87a:	6183      	str	r3, [r0, #24]
 800e87c:	4619      	mov	r1, r3
 800e87e:	2208      	movs	r2, #8
 800e880:	305c      	adds	r0, #92	@ 0x5c
 800e882:	f000 f940 	bl	800eb06 <memset>
 800e886:	4b0d      	ldr	r3, [pc, #52]	@ (800e8bc <std+0x58>)
 800e888:	6263      	str	r3, [r4, #36]	@ 0x24
 800e88a:	4b0d      	ldr	r3, [pc, #52]	@ (800e8c0 <std+0x5c>)
 800e88c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e88e:	4b0d      	ldr	r3, [pc, #52]	@ (800e8c4 <std+0x60>)
 800e890:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e892:	4b0d      	ldr	r3, [pc, #52]	@ (800e8c8 <std+0x64>)
 800e894:	6323      	str	r3, [r4, #48]	@ 0x30
 800e896:	4b0d      	ldr	r3, [pc, #52]	@ (800e8cc <std+0x68>)
 800e898:	6224      	str	r4, [r4, #32]
 800e89a:	429c      	cmp	r4, r3
 800e89c:	d006      	beq.n	800e8ac <std+0x48>
 800e89e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e8a2:	4294      	cmp	r4, r2
 800e8a4:	d002      	beq.n	800e8ac <std+0x48>
 800e8a6:	33d0      	adds	r3, #208	@ 0xd0
 800e8a8:	429c      	cmp	r4, r3
 800e8aa:	d105      	bne.n	800e8b8 <std+0x54>
 800e8ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8b4:	f000 ba0a 	b.w	800eccc <__retarget_lock_init_recursive>
 800e8b8:	bd10      	pop	{r4, pc}
 800e8ba:	bf00      	nop
 800e8bc:	0800ea4d 	.word	0x0800ea4d
 800e8c0:	0800ea6f 	.word	0x0800ea6f
 800e8c4:	0800eaa7 	.word	0x0800eaa7
 800e8c8:	0800eacb 	.word	0x0800eacb
 800e8cc:	200005d0 	.word	0x200005d0

0800e8d0 <stdio_exit_handler>:
 800e8d0:	4a02      	ldr	r2, [pc, #8]	@ (800e8dc <stdio_exit_handler+0xc>)
 800e8d2:	4903      	ldr	r1, [pc, #12]	@ (800e8e0 <stdio_exit_handler+0x10>)
 800e8d4:	4803      	ldr	r0, [pc, #12]	@ (800e8e4 <stdio_exit_handler+0x14>)
 800e8d6:	f000 b87b 	b.w	800e9d0 <_fwalk_sglue>
 800e8da:	bf00      	nop
 800e8dc:	2000000c 	.word	0x2000000c
 800e8e0:	080116d9 	.word	0x080116d9
 800e8e4:	2000001c 	.word	0x2000001c

0800e8e8 <cleanup_stdio>:
 800e8e8:	6841      	ldr	r1, [r0, #4]
 800e8ea:	4b0c      	ldr	r3, [pc, #48]	@ (800e91c <cleanup_stdio+0x34>)
 800e8ec:	4299      	cmp	r1, r3
 800e8ee:	b510      	push	{r4, lr}
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	d001      	beq.n	800e8f8 <cleanup_stdio+0x10>
 800e8f4:	f002 fef0 	bl	80116d8 <_fflush_r>
 800e8f8:	68a1      	ldr	r1, [r4, #8]
 800e8fa:	4b09      	ldr	r3, [pc, #36]	@ (800e920 <cleanup_stdio+0x38>)
 800e8fc:	4299      	cmp	r1, r3
 800e8fe:	d002      	beq.n	800e906 <cleanup_stdio+0x1e>
 800e900:	4620      	mov	r0, r4
 800e902:	f002 fee9 	bl	80116d8 <_fflush_r>
 800e906:	68e1      	ldr	r1, [r4, #12]
 800e908:	4b06      	ldr	r3, [pc, #24]	@ (800e924 <cleanup_stdio+0x3c>)
 800e90a:	4299      	cmp	r1, r3
 800e90c:	d004      	beq.n	800e918 <cleanup_stdio+0x30>
 800e90e:	4620      	mov	r0, r4
 800e910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e914:	f002 bee0 	b.w	80116d8 <_fflush_r>
 800e918:	bd10      	pop	{r4, pc}
 800e91a:	bf00      	nop
 800e91c:	200005d0 	.word	0x200005d0
 800e920:	20000638 	.word	0x20000638
 800e924:	200006a0 	.word	0x200006a0

0800e928 <global_stdio_init.part.0>:
 800e928:	b510      	push	{r4, lr}
 800e92a:	4b0b      	ldr	r3, [pc, #44]	@ (800e958 <global_stdio_init.part.0+0x30>)
 800e92c:	4c0b      	ldr	r4, [pc, #44]	@ (800e95c <global_stdio_init.part.0+0x34>)
 800e92e:	4a0c      	ldr	r2, [pc, #48]	@ (800e960 <global_stdio_init.part.0+0x38>)
 800e930:	601a      	str	r2, [r3, #0]
 800e932:	4620      	mov	r0, r4
 800e934:	2200      	movs	r2, #0
 800e936:	2104      	movs	r1, #4
 800e938:	f7ff ff94 	bl	800e864 <std>
 800e93c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e940:	2201      	movs	r2, #1
 800e942:	2109      	movs	r1, #9
 800e944:	f7ff ff8e 	bl	800e864 <std>
 800e948:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e94c:	2202      	movs	r2, #2
 800e94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e952:	2112      	movs	r1, #18
 800e954:	f7ff bf86 	b.w	800e864 <std>
 800e958:	20000708 	.word	0x20000708
 800e95c:	200005d0 	.word	0x200005d0
 800e960:	0800e8d1 	.word	0x0800e8d1

0800e964 <__sfp_lock_acquire>:
 800e964:	4801      	ldr	r0, [pc, #4]	@ (800e96c <__sfp_lock_acquire+0x8>)
 800e966:	f000 b9b2 	b.w	800ecce <__retarget_lock_acquire_recursive>
 800e96a:	bf00      	nop
 800e96c:	20000711 	.word	0x20000711

0800e970 <__sfp_lock_release>:
 800e970:	4801      	ldr	r0, [pc, #4]	@ (800e978 <__sfp_lock_release+0x8>)
 800e972:	f000 b9ad 	b.w	800ecd0 <__retarget_lock_release_recursive>
 800e976:	bf00      	nop
 800e978:	20000711 	.word	0x20000711

0800e97c <__sinit>:
 800e97c:	b510      	push	{r4, lr}
 800e97e:	4604      	mov	r4, r0
 800e980:	f7ff fff0 	bl	800e964 <__sfp_lock_acquire>
 800e984:	6a23      	ldr	r3, [r4, #32]
 800e986:	b11b      	cbz	r3, 800e990 <__sinit+0x14>
 800e988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e98c:	f7ff bff0 	b.w	800e970 <__sfp_lock_release>
 800e990:	4b04      	ldr	r3, [pc, #16]	@ (800e9a4 <__sinit+0x28>)
 800e992:	6223      	str	r3, [r4, #32]
 800e994:	4b04      	ldr	r3, [pc, #16]	@ (800e9a8 <__sinit+0x2c>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d1f5      	bne.n	800e988 <__sinit+0xc>
 800e99c:	f7ff ffc4 	bl	800e928 <global_stdio_init.part.0>
 800e9a0:	e7f2      	b.n	800e988 <__sinit+0xc>
 800e9a2:	bf00      	nop
 800e9a4:	0800e8e9 	.word	0x0800e8e9
 800e9a8:	20000708 	.word	0x20000708

0800e9ac <fiprintf>:
 800e9ac:	b40e      	push	{r1, r2, r3}
 800e9ae:	b503      	push	{r0, r1, lr}
 800e9b0:	4601      	mov	r1, r0
 800e9b2:	ab03      	add	r3, sp, #12
 800e9b4:	4805      	ldr	r0, [pc, #20]	@ (800e9cc <fiprintf+0x20>)
 800e9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ba:	6800      	ldr	r0, [r0, #0]
 800e9bc:	9301      	str	r3, [sp, #4]
 800e9be:	f002 fcef 	bl	80113a0 <_vfiprintf_r>
 800e9c2:	b002      	add	sp, #8
 800e9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9c8:	b003      	add	sp, #12
 800e9ca:	4770      	bx	lr
 800e9cc:	20000018 	.word	0x20000018

0800e9d0 <_fwalk_sglue>:
 800e9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9d4:	4607      	mov	r7, r0
 800e9d6:	4688      	mov	r8, r1
 800e9d8:	4614      	mov	r4, r2
 800e9da:	2600      	movs	r6, #0
 800e9dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e9e0:	f1b9 0901 	subs.w	r9, r9, #1
 800e9e4:	d505      	bpl.n	800e9f2 <_fwalk_sglue+0x22>
 800e9e6:	6824      	ldr	r4, [r4, #0]
 800e9e8:	2c00      	cmp	r4, #0
 800e9ea:	d1f7      	bne.n	800e9dc <_fwalk_sglue+0xc>
 800e9ec:	4630      	mov	r0, r6
 800e9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9f2:	89ab      	ldrh	r3, [r5, #12]
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d907      	bls.n	800ea08 <_fwalk_sglue+0x38>
 800e9f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	d003      	beq.n	800ea08 <_fwalk_sglue+0x38>
 800ea00:	4629      	mov	r1, r5
 800ea02:	4638      	mov	r0, r7
 800ea04:	47c0      	blx	r8
 800ea06:	4306      	orrs	r6, r0
 800ea08:	3568      	adds	r5, #104	@ 0x68
 800ea0a:	e7e9      	b.n	800e9e0 <_fwalk_sglue+0x10>

0800ea0c <siprintf>:
 800ea0c:	b40e      	push	{r1, r2, r3}
 800ea0e:	b500      	push	{lr}
 800ea10:	b09c      	sub	sp, #112	@ 0x70
 800ea12:	ab1d      	add	r3, sp, #116	@ 0x74
 800ea14:	9002      	str	r0, [sp, #8]
 800ea16:	9006      	str	r0, [sp, #24]
 800ea18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ea1c:	4809      	ldr	r0, [pc, #36]	@ (800ea44 <siprintf+0x38>)
 800ea1e:	9107      	str	r1, [sp, #28]
 800ea20:	9104      	str	r1, [sp, #16]
 800ea22:	4909      	ldr	r1, [pc, #36]	@ (800ea48 <siprintf+0x3c>)
 800ea24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea28:	9105      	str	r1, [sp, #20]
 800ea2a:	6800      	ldr	r0, [r0, #0]
 800ea2c:	9301      	str	r3, [sp, #4]
 800ea2e:	a902      	add	r1, sp, #8
 800ea30:	f002 fb90 	bl	8011154 <_svfiprintf_r>
 800ea34:	9b02      	ldr	r3, [sp, #8]
 800ea36:	2200      	movs	r2, #0
 800ea38:	701a      	strb	r2, [r3, #0]
 800ea3a:	b01c      	add	sp, #112	@ 0x70
 800ea3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea40:	b003      	add	sp, #12
 800ea42:	4770      	bx	lr
 800ea44:	20000018 	.word	0x20000018
 800ea48:	ffff0208 	.word	0xffff0208

0800ea4c <__sread>:
 800ea4c:	b510      	push	{r4, lr}
 800ea4e:	460c      	mov	r4, r1
 800ea50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea54:	f000 f8c8 	bl	800ebe8 <_read_r>
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	bfab      	itete	ge
 800ea5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ea5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ea60:	181b      	addge	r3, r3, r0
 800ea62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ea66:	bfac      	ite	ge
 800ea68:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ea6a:	81a3      	strhlt	r3, [r4, #12]
 800ea6c:	bd10      	pop	{r4, pc}

0800ea6e <__swrite>:
 800ea6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea72:	461f      	mov	r7, r3
 800ea74:	898b      	ldrh	r3, [r1, #12]
 800ea76:	05db      	lsls	r3, r3, #23
 800ea78:	4605      	mov	r5, r0
 800ea7a:	460c      	mov	r4, r1
 800ea7c:	4616      	mov	r6, r2
 800ea7e:	d505      	bpl.n	800ea8c <__swrite+0x1e>
 800ea80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea84:	2302      	movs	r3, #2
 800ea86:	2200      	movs	r2, #0
 800ea88:	f000 f89c 	bl	800ebc4 <_lseek_r>
 800ea8c:	89a3      	ldrh	r3, [r4, #12]
 800ea8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ea96:	81a3      	strh	r3, [r4, #12]
 800ea98:	4632      	mov	r2, r6
 800ea9a:	463b      	mov	r3, r7
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa2:	f000 b8d7 	b.w	800ec54 <_write_r>

0800eaa6 <__sseek>:
 800eaa6:	b510      	push	{r4, lr}
 800eaa8:	460c      	mov	r4, r1
 800eaaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaae:	f000 f889 	bl	800ebc4 <_lseek_r>
 800eab2:	1c43      	adds	r3, r0, #1
 800eab4:	89a3      	ldrh	r3, [r4, #12]
 800eab6:	bf15      	itete	ne
 800eab8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eaba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eabe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eac2:	81a3      	strheq	r3, [r4, #12]
 800eac4:	bf18      	it	ne
 800eac6:	81a3      	strhne	r3, [r4, #12]
 800eac8:	bd10      	pop	{r4, pc}

0800eaca <__sclose>:
 800eaca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eace:	f000 b869 	b.w	800eba4 <_close_r>

0800ead2 <memmove>:
 800ead2:	4288      	cmp	r0, r1
 800ead4:	b510      	push	{r4, lr}
 800ead6:	eb01 0402 	add.w	r4, r1, r2
 800eada:	d902      	bls.n	800eae2 <memmove+0x10>
 800eadc:	4284      	cmp	r4, r0
 800eade:	4623      	mov	r3, r4
 800eae0:	d807      	bhi.n	800eaf2 <memmove+0x20>
 800eae2:	1e43      	subs	r3, r0, #1
 800eae4:	42a1      	cmp	r1, r4
 800eae6:	d008      	beq.n	800eafa <memmove+0x28>
 800eae8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eaec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eaf0:	e7f8      	b.n	800eae4 <memmove+0x12>
 800eaf2:	4402      	add	r2, r0
 800eaf4:	4601      	mov	r1, r0
 800eaf6:	428a      	cmp	r2, r1
 800eaf8:	d100      	bne.n	800eafc <memmove+0x2a>
 800eafa:	bd10      	pop	{r4, pc}
 800eafc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb00:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb04:	e7f7      	b.n	800eaf6 <memmove+0x24>

0800eb06 <memset>:
 800eb06:	4402      	add	r2, r0
 800eb08:	4603      	mov	r3, r0
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d100      	bne.n	800eb10 <memset+0xa>
 800eb0e:	4770      	bx	lr
 800eb10:	f803 1b01 	strb.w	r1, [r3], #1
 800eb14:	e7f9      	b.n	800eb0a <memset+0x4>

0800eb16 <strncpy>:
 800eb16:	b510      	push	{r4, lr}
 800eb18:	3901      	subs	r1, #1
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	b132      	cbz	r2, 800eb2c <strncpy+0x16>
 800eb1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eb22:	f803 4b01 	strb.w	r4, [r3], #1
 800eb26:	3a01      	subs	r2, #1
 800eb28:	2c00      	cmp	r4, #0
 800eb2a:	d1f7      	bne.n	800eb1c <strncpy+0x6>
 800eb2c:	441a      	add	r2, r3
 800eb2e:	2100      	movs	r1, #0
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d100      	bne.n	800eb36 <strncpy+0x20>
 800eb34:	bd10      	pop	{r4, pc}
 800eb36:	f803 1b01 	strb.w	r1, [r3], #1
 800eb3a:	e7f9      	b.n	800eb30 <strncpy+0x1a>

0800eb3c <_raise_r>:
 800eb3c:	291f      	cmp	r1, #31
 800eb3e:	b538      	push	{r3, r4, r5, lr}
 800eb40:	4605      	mov	r5, r0
 800eb42:	460c      	mov	r4, r1
 800eb44:	d904      	bls.n	800eb50 <_raise_r+0x14>
 800eb46:	2316      	movs	r3, #22
 800eb48:	6003      	str	r3, [r0, #0]
 800eb4a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb4e:	bd38      	pop	{r3, r4, r5, pc}
 800eb50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eb52:	b112      	cbz	r2, 800eb5a <_raise_r+0x1e>
 800eb54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb58:	b94b      	cbnz	r3, 800eb6e <_raise_r+0x32>
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	f000 f868 	bl	800ec30 <_getpid_r>
 800eb60:	4622      	mov	r2, r4
 800eb62:	4601      	mov	r1, r0
 800eb64:	4628      	mov	r0, r5
 800eb66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb6a:	f000 b84f 	b.w	800ec0c <_kill_r>
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d00a      	beq.n	800eb88 <_raise_r+0x4c>
 800eb72:	1c59      	adds	r1, r3, #1
 800eb74:	d103      	bne.n	800eb7e <_raise_r+0x42>
 800eb76:	2316      	movs	r3, #22
 800eb78:	6003      	str	r3, [r0, #0]
 800eb7a:	2001      	movs	r0, #1
 800eb7c:	e7e7      	b.n	800eb4e <_raise_r+0x12>
 800eb7e:	2100      	movs	r1, #0
 800eb80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eb84:	4620      	mov	r0, r4
 800eb86:	4798      	blx	r3
 800eb88:	2000      	movs	r0, #0
 800eb8a:	e7e0      	b.n	800eb4e <_raise_r+0x12>

0800eb8c <raise>:
 800eb8c:	4b02      	ldr	r3, [pc, #8]	@ (800eb98 <raise+0xc>)
 800eb8e:	4601      	mov	r1, r0
 800eb90:	6818      	ldr	r0, [r3, #0]
 800eb92:	f7ff bfd3 	b.w	800eb3c <_raise_r>
 800eb96:	bf00      	nop
 800eb98:	20000018 	.word	0x20000018

0800eb9c <_localeconv_r>:
 800eb9c:	4800      	ldr	r0, [pc, #0]	@ (800eba0 <_localeconv_r+0x4>)
 800eb9e:	4770      	bx	lr
 800eba0:	20000158 	.word	0x20000158

0800eba4 <_close_r>:
 800eba4:	b538      	push	{r3, r4, r5, lr}
 800eba6:	4d06      	ldr	r5, [pc, #24]	@ (800ebc0 <_close_r+0x1c>)
 800eba8:	2300      	movs	r3, #0
 800ebaa:	4604      	mov	r4, r0
 800ebac:	4608      	mov	r0, r1
 800ebae:	602b      	str	r3, [r5, #0]
 800ebb0:	f7f6 fde0 	bl	8005774 <_close>
 800ebb4:	1c43      	adds	r3, r0, #1
 800ebb6:	d102      	bne.n	800ebbe <_close_r+0x1a>
 800ebb8:	682b      	ldr	r3, [r5, #0]
 800ebba:	b103      	cbz	r3, 800ebbe <_close_r+0x1a>
 800ebbc:	6023      	str	r3, [r4, #0]
 800ebbe:	bd38      	pop	{r3, r4, r5, pc}
 800ebc0:	2000070c 	.word	0x2000070c

0800ebc4 <_lseek_r>:
 800ebc4:	b538      	push	{r3, r4, r5, lr}
 800ebc6:	4d07      	ldr	r5, [pc, #28]	@ (800ebe4 <_lseek_r+0x20>)
 800ebc8:	4604      	mov	r4, r0
 800ebca:	4608      	mov	r0, r1
 800ebcc:	4611      	mov	r1, r2
 800ebce:	2200      	movs	r2, #0
 800ebd0:	602a      	str	r2, [r5, #0]
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	f7f6 fdf5 	bl	80057c2 <_lseek>
 800ebd8:	1c43      	adds	r3, r0, #1
 800ebda:	d102      	bne.n	800ebe2 <_lseek_r+0x1e>
 800ebdc:	682b      	ldr	r3, [r5, #0]
 800ebde:	b103      	cbz	r3, 800ebe2 <_lseek_r+0x1e>
 800ebe0:	6023      	str	r3, [r4, #0]
 800ebe2:	bd38      	pop	{r3, r4, r5, pc}
 800ebe4:	2000070c 	.word	0x2000070c

0800ebe8 <_read_r>:
 800ebe8:	b538      	push	{r3, r4, r5, lr}
 800ebea:	4d07      	ldr	r5, [pc, #28]	@ (800ec08 <_read_r+0x20>)
 800ebec:	4604      	mov	r4, r0
 800ebee:	4608      	mov	r0, r1
 800ebf0:	4611      	mov	r1, r2
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	602a      	str	r2, [r5, #0]
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	f7f6 fd83 	bl	8005702 <_read>
 800ebfc:	1c43      	adds	r3, r0, #1
 800ebfe:	d102      	bne.n	800ec06 <_read_r+0x1e>
 800ec00:	682b      	ldr	r3, [r5, #0]
 800ec02:	b103      	cbz	r3, 800ec06 <_read_r+0x1e>
 800ec04:	6023      	str	r3, [r4, #0]
 800ec06:	bd38      	pop	{r3, r4, r5, pc}
 800ec08:	2000070c 	.word	0x2000070c

0800ec0c <_kill_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	4d07      	ldr	r5, [pc, #28]	@ (800ec2c <_kill_r+0x20>)
 800ec10:	2300      	movs	r3, #0
 800ec12:	4604      	mov	r4, r0
 800ec14:	4608      	mov	r0, r1
 800ec16:	4611      	mov	r1, r2
 800ec18:	602b      	str	r3, [r5, #0]
 800ec1a:	f7f6 fd57 	bl	80056cc <_kill>
 800ec1e:	1c43      	adds	r3, r0, #1
 800ec20:	d102      	bne.n	800ec28 <_kill_r+0x1c>
 800ec22:	682b      	ldr	r3, [r5, #0]
 800ec24:	b103      	cbz	r3, 800ec28 <_kill_r+0x1c>
 800ec26:	6023      	str	r3, [r4, #0]
 800ec28:	bd38      	pop	{r3, r4, r5, pc}
 800ec2a:	bf00      	nop
 800ec2c:	2000070c 	.word	0x2000070c

0800ec30 <_getpid_r>:
 800ec30:	f7f6 bd44 	b.w	80056bc <_getpid>

0800ec34 <_sbrk_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	4d06      	ldr	r5, [pc, #24]	@ (800ec50 <_sbrk_r+0x1c>)
 800ec38:	2300      	movs	r3, #0
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	4608      	mov	r0, r1
 800ec3e:	602b      	str	r3, [r5, #0]
 800ec40:	f7f6 fdcc 	bl	80057dc <_sbrk>
 800ec44:	1c43      	adds	r3, r0, #1
 800ec46:	d102      	bne.n	800ec4e <_sbrk_r+0x1a>
 800ec48:	682b      	ldr	r3, [r5, #0]
 800ec4a:	b103      	cbz	r3, 800ec4e <_sbrk_r+0x1a>
 800ec4c:	6023      	str	r3, [r4, #0]
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}
 800ec50:	2000070c 	.word	0x2000070c

0800ec54 <_write_r>:
 800ec54:	b538      	push	{r3, r4, r5, lr}
 800ec56:	4d07      	ldr	r5, [pc, #28]	@ (800ec74 <_write_r+0x20>)
 800ec58:	4604      	mov	r4, r0
 800ec5a:	4608      	mov	r0, r1
 800ec5c:	4611      	mov	r1, r2
 800ec5e:	2200      	movs	r2, #0
 800ec60:	602a      	str	r2, [r5, #0]
 800ec62:	461a      	mov	r2, r3
 800ec64:	f7f6 fd6a 	bl	800573c <_write>
 800ec68:	1c43      	adds	r3, r0, #1
 800ec6a:	d102      	bne.n	800ec72 <_write_r+0x1e>
 800ec6c:	682b      	ldr	r3, [r5, #0]
 800ec6e:	b103      	cbz	r3, 800ec72 <_write_r+0x1e>
 800ec70:	6023      	str	r3, [r4, #0]
 800ec72:	bd38      	pop	{r3, r4, r5, pc}
 800ec74:	2000070c 	.word	0x2000070c

0800ec78 <__errno>:
 800ec78:	4b01      	ldr	r3, [pc, #4]	@ (800ec80 <__errno+0x8>)
 800ec7a:	6818      	ldr	r0, [r3, #0]
 800ec7c:	4770      	bx	lr
 800ec7e:	bf00      	nop
 800ec80:	20000018 	.word	0x20000018

0800ec84 <__libc_init_array>:
 800ec84:	b570      	push	{r4, r5, r6, lr}
 800ec86:	4d0d      	ldr	r5, [pc, #52]	@ (800ecbc <__libc_init_array+0x38>)
 800ec88:	4c0d      	ldr	r4, [pc, #52]	@ (800ecc0 <__libc_init_array+0x3c>)
 800ec8a:	1b64      	subs	r4, r4, r5
 800ec8c:	10a4      	asrs	r4, r4, #2
 800ec8e:	2600      	movs	r6, #0
 800ec90:	42a6      	cmp	r6, r4
 800ec92:	d109      	bne.n	800eca8 <__libc_init_array+0x24>
 800ec94:	4d0b      	ldr	r5, [pc, #44]	@ (800ecc4 <__libc_init_array+0x40>)
 800ec96:	4c0c      	ldr	r4, [pc, #48]	@ (800ecc8 <__libc_init_array+0x44>)
 800ec98:	f003 fa1c 	bl	80120d4 <_init>
 800ec9c:	1b64      	subs	r4, r4, r5
 800ec9e:	10a4      	asrs	r4, r4, #2
 800eca0:	2600      	movs	r6, #0
 800eca2:	42a6      	cmp	r6, r4
 800eca4:	d105      	bne.n	800ecb2 <__libc_init_array+0x2e>
 800eca6:	bd70      	pop	{r4, r5, r6, pc}
 800eca8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecac:	4798      	blx	r3
 800ecae:	3601      	adds	r6, #1
 800ecb0:	e7ee      	b.n	800ec90 <__libc_init_array+0xc>
 800ecb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecb6:	4798      	blx	r3
 800ecb8:	3601      	adds	r6, #1
 800ecba:	e7f2      	b.n	800eca2 <__libc_init_array+0x1e>
 800ecbc:	08013644 	.word	0x08013644
 800ecc0:	08013644 	.word	0x08013644
 800ecc4:	08013644 	.word	0x08013644
 800ecc8:	08013654 	.word	0x08013654

0800eccc <__retarget_lock_init_recursive>:
 800eccc:	4770      	bx	lr

0800ecce <__retarget_lock_acquire_recursive>:
 800ecce:	4770      	bx	lr

0800ecd0 <__retarget_lock_release_recursive>:
 800ecd0:	4770      	bx	lr

0800ecd2 <memcpy>:
 800ecd2:	440a      	add	r2, r1
 800ecd4:	4291      	cmp	r1, r2
 800ecd6:	f100 33ff 	add.w	r3, r0, #4294967295
 800ecda:	d100      	bne.n	800ecde <memcpy+0xc>
 800ecdc:	4770      	bx	lr
 800ecde:	b510      	push	{r4, lr}
 800ece0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ece4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ece8:	4291      	cmp	r1, r2
 800ecea:	d1f9      	bne.n	800ece0 <memcpy+0xe>
 800ecec:	bd10      	pop	{r4, pc}
	...

0800ecf0 <nanf>:
 800ecf0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ecf8 <nanf+0x8>
 800ecf4:	4770      	bx	lr
 800ecf6:	bf00      	nop
 800ecf8:	7fc00000 	.word	0x7fc00000

0800ecfc <quorem>:
 800ecfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed00:	6903      	ldr	r3, [r0, #16]
 800ed02:	690c      	ldr	r4, [r1, #16]
 800ed04:	42a3      	cmp	r3, r4
 800ed06:	4607      	mov	r7, r0
 800ed08:	db7e      	blt.n	800ee08 <quorem+0x10c>
 800ed0a:	3c01      	subs	r4, #1
 800ed0c:	f101 0814 	add.w	r8, r1, #20
 800ed10:	00a3      	lsls	r3, r4, #2
 800ed12:	f100 0514 	add.w	r5, r0, #20
 800ed16:	9300      	str	r3, [sp, #0]
 800ed18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed1c:	9301      	str	r3, [sp, #4]
 800ed1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed26:	3301      	adds	r3, #1
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed2e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed32:	d32e      	bcc.n	800ed92 <quorem+0x96>
 800ed34:	f04f 0a00 	mov.w	sl, #0
 800ed38:	46c4      	mov	ip, r8
 800ed3a:	46ae      	mov	lr, r5
 800ed3c:	46d3      	mov	fp, sl
 800ed3e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed42:	b298      	uxth	r0, r3
 800ed44:	fb06 a000 	mla	r0, r6, r0, sl
 800ed48:	0c02      	lsrs	r2, r0, #16
 800ed4a:	0c1b      	lsrs	r3, r3, #16
 800ed4c:	fb06 2303 	mla	r3, r6, r3, r2
 800ed50:	f8de 2000 	ldr.w	r2, [lr]
 800ed54:	b280      	uxth	r0, r0
 800ed56:	b292      	uxth	r2, r2
 800ed58:	1a12      	subs	r2, r2, r0
 800ed5a:	445a      	add	r2, fp
 800ed5c:	f8de 0000 	ldr.w	r0, [lr]
 800ed60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ed6a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ed6e:	b292      	uxth	r2, r2
 800ed70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ed74:	45e1      	cmp	r9, ip
 800ed76:	f84e 2b04 	str.w	r2, [lr], #4
 800ed7a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ed7e:	d2de      	bcs.n	800ed3e <quorem+0x42>
 800ed80:	9b00      	ldr	r3, [sp, #0]
 800ed82:	58eb      	ldr	r3, [r5, r3]
 800ed84:	b92b      	cbnz	r3, 800ed92 <quorem+0x96>
 800ed86:	9b01      	ldr	r3, [sp, #4]
 800ed88:	3b04      	subs	r3, #4
 800ed8a:	429d      	cmp	r5, r3
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	d32f      	bcc.n	800edf0 <quorem+0xf4>
 800ed90:	613c      	str	r4, [r7, #16]
 800ed92:	4638      	mov	r0, r7
 800ed94:	f001 f90e 	bl	800ffb4 <__mcmp>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	db25      	blt.n	800ede8 <quorem+0xec>
 800ed9c:	4629      	mov	r1, r5
 800ed9e:	2000      	movs	r0, #0
 800eda0:	f858 2b04 	ldr.w	r2, [r8], #4
 800eda4:	f8d1 c000 	ldr.w	ip, [r1]
 800eda8:	fa1f fe82 	uxth.w	lr, r2
 800edac:	fa1f f38c 	uxth.w	r3, ip
 800edb0:	eba3 030e 	sub.w	r3, r3, lr
 800edb4:	4403      	add	r3, r0
 800edb6:	0c12      	lsrs	r2, r2, #16
 800edb8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800edbc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edc6:	45c1      	cmp	r9, r8
 800edc8:	f841 3b04 	str.w	r3, [r1], #4
 800edcc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800edd0:	d2e6      	bcs.n	800eda0 <quorem+0xa4>
 800edd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800edd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800edda:	b922      	cbnz	r2, 800ede6 <quorem+0xea>
 800eddc:	3b04      	subs	r3, #4
 800edde:	429d      	cmp	r5, r3
 800ede0:	461a      	mov	r2, r3
 800ede2:	d30b      	bcc.n	800edfc <quorem+0x100>
 800ede4:	613c      	str	r4, [r7, #16]
 800ede6:	3601      	adds	r6, #1
 800ede8:	4630      	mov	r0, r6
 800edea:	b003      	add	sp, #12
 800edec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf0:	6812      	ldr	r2, [r2, #0]
 800edf2:	3b04      	subs	r3, #4
 800edf4:	2a00      	cmp	r2, #0
 800edf6:	d1cb      	bne.n	800ed90 <quorem+0x94>
 800edf8:	3c01      	subs	r4, #1
 800edfa:	e7c6      	b.n	800ed8a <quorem+0x8e>
 800edfc:	6812      	ldr	r2, [r2, #0]
 800edfe:	3b04      	subs	r3, #4
 800ee00:	2a00      	cmp	r2, #0
 800ee02:	d1ef      	bne.n	800ede4 <quorem+0xe8>
 800ee04:	3c01      	subs	r4, #1
 800ee06:	e7ea      	b.n	800edde <quorem+0xe2>
 800ee08:	2000      	movs	r0, #0
 800ee0a:	e7ee      	b.n	800edea <quorem+0xee>
 800ee0c:	0000      	movs	r0, r0
	...

0800ee10 <_dtoa_r>:
 800ee10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee14:	69c7      	ldr	r7, [r0, #28]
 800ee16:	b099      	sub	sp, #100	@ 0x64
 800ee18:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ee1c:	ec55 4b10 	vmov	r4, r5, d0
 800ee20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ee22:	9109      	str	r1, [sp, #36]	@ 0x24
 800ee24:	4683      	mov	fp, r0
 800ee26:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee28:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee2a:	b97f      	cbnz	r7, 800ee4c <_dtoa_r+0x3c>
 800ee2c:	2010      	movs	r0, #16
 800ee2e:	f7fe fdef 	bl	800da10 <malloc>
 800ee32:	4602      	mov	r2, r0
 800ee34:	f8cb 001c 	str.w	r0, [fp, #28]
 800ee38:	b920      	cbnz	r0, 800ee44 <_dtoa_r+0x34>
 800ee3a:	4ba7      	ldr	r3, [pc, #668]	@ (800f0d8 <_dtoa_r+0x2c8>)
 800ee3c:	21ef      	movs	r1, #239	@ 0xef
 800ee3e:	48a7      	ldr	r0, [pc, #668]	@ (800f0dc <_dtoa_r+0x2cc>)
 800ee40:	f7fe fdb6 	bl	800d9b0 <__assert_func>
 800ee44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ee48:	6007      	str	r7, [r0, #0]
 800ee4a:	60c7      	str	r7, [r0, #12]
 800ee4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ee50:	6819      	ldr	r1, [r3, #0]
 800ee52:	b159      	cbz	r1, 800ee6c <_dtoa_r+0x5c>
 800ee54:	685a      	ldr	r2, [r3, #4]
 800ee56:	604a      	str	r2, [r1, #4]
 800ee58:	2301      	movs	r3, #1
 800ee5a:	4093      	lsls	r3, r2
 800ee5c:	608b      	str	r3, [r1, #8]
 800ee5e:	4658      	mov	r0, fp
 800ee60:	f000 fe24 	bl	800faac <_Bfree>
 800ee64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	601a      	str	r2, [r3, #0]
 800ee6c:	1e2b      	subs	r3, r5, #0
 800ee6e:	bfb9      	ittee	lt
 800ee70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ee74:	9303      	strlt	r3, [sp, #12]
 800ee76:	2300      	movge	r3, #0
 800ee78:	6033      	strge	r3, [r6, #0]
 800ee7a:	9f03      	ldr	r7, [sp, #12]
 800ee7c:	4b98      	ldr	r3, [pc, #608]	@ (800f0e0 <_dtoa_r+0x2d0>)
 800ee7e:	bfbc      	itt	lt
 800ee80:	2201      	movlt	r2, #1
 800ee82:	6032      	strlt	r2, [r6, #0]
 800ee84:	43bb      	bics	r3, r7
 800ee86:	d112      	bne.n	800eeae <_dtoa_r+0x9e>
 800ee88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ee8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ee8e:	6013      	str	r3, [r2, #0]
 800ee90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ee94:	4323      	orrs	r3, r4
 800ee96:	f000 854d 	beq.w	800f934 <_dtoa_r+0xb24>
 800ee9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ee9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f0f4 <_dtoa_r+0x2e4>
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	f000 854f 	beq.w	800f944 <_dtoa_r+0xb34>
 800eea6:	f10a 0303 	add.w	r3, sl, #3
 800eeaa:	f000 bd49 	b.w	800f940 <_dtoa_r+0xb30>
 800eeae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	ec51 0b17 	vmov	r0, r1, d7
 800eeb8:	2300      	movs	r3, #0
 800eeba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800eebe:	f7f1 fe2b 	bl	8000b18 <__aeabi_dcmpeq>
 800eec2:	4680      	mov	r8, r0
 800eec4:	b158      	cbz	r0, 800eede <_dtoa_r+0xce>
 800eec6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eec8:	2301      	movs	r3, #1
 800eeca:	6013      	str	r3, [r2, #0]
 800eecc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eece:	b113      	cbz	r3, 800eed6 <_dtoa_r+0xc6>
 800eed0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800eed2:	4b84      	ldr	r3, [pc, #528]	@ (800f0e4 <_dtoa_r+0x2d4>)
 800eed4:	6013      	str	r3, [r2, #0]
 800eed6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f0f8 <_dtoa_r+0x2e8>
 800eeda:	f000 bd33 	b.w	800f944 <_dtoa_r+0xb34>
 800eede:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800eee2:	aa16      	add	r2, sp, #88	@ 0x58
 800eee4:	a917      	add	r1, sp, #92	@ 0x5c
 800eee6:	4658      	mov	r0, fp
 800eee8:	f001 f984 	bl	80101f4 <__d2b>
 800eeec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800eef0:	4681      	mov	r9, r0
 800eef2:	2e00      	cmp	r6, #0
 800eef4:	d077      	beq.n	800efe6 <_dtoa_r+0x1d6>
 800eef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eef8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800eefc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ef08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ef0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ef10:	4619      	mov	r1, r3
 800ef12:	2200      	movs	r2, #0
 800ef14:	4b74      	ldr	r3, [pc, #464]	@ (800f0e8 <_dtoa_r+0x2d8>)
 800ef16:	f7f1 f9df 	bl	80002d8 <__aeabi_dsub>
 800ef1a:	a369      	add	r3, pc, #420	@ (adr r3, 800f0c0 <_dtoa_r+0x2b0>)
 800ef1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef20:	f7f1 fb92 	bl	8000648 <__aeabi_dmul>
 800ef24:	a368      	add	r3, pc, #416	@ (adr r3, 800f0c8 <_dtoa_r+0x2b8>)
 800ef26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2a:	f7f1 f9d7 	bl	80002dc <__adddf3>
 800ef2e:	4604      	mov	r4, r0
 800ef30:	4630      	mov	r0, r6
 800ef32:	460d      	mov	r5, r1
 800ef34:	f7f1 fb1e 	bl	8000574 <__aeabi_i2d>
 800ef38:	a365      	add	r3, pc, #404	@ (adr r3, 800f0d0 <_dtoa_r+0x2c0>)
 800ef3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3e:	f7f1 fb83 	bl	8000648 <__aeabi_dmul>
 800ef42:	4602      	mov	r2, r0
 800ef44:	460b      	mov	r3, r1
 800ef46:	4620      	mov	r0, r4
 800ef48:	4629      	mov	r1, r5
 800ef4a:	f7f1 f9c7 	bl	80002dc <__adddf3>
 800ef4e:	4604      	mov	r4, r0
 800ef50:	460d      	mov	r5, r1
 800ef52:	f7f1 fe29 	bl	8000ba8 <__aeabi_d2iz>
 800ef56:	2200      	movs	r2, #0
 800ef58:	4607      	mov	r7, r0
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	4629      	mov	r1, r5
 800ef60:	f7f1 fde4 	bl	8000b2c <__aeabi_dcmplt>
 800ef64:	b140      	cbz	r0, 800ef78 <_dtoa_r+0x168>
 800ef66:	4638      	mov	r0, r7
 800ef68:	f7f1 fb04 	bl	8000574 <__aeabi_i2d>
 800ef6c:	4622      	mov	r2, r4
 800ef6e:	462b      	mov	r3, r5
 800ef70:	f7f1 fdd2 	bl	8000b18 <__aeabi_dcmpeq>
 800ef74:	b900      	cbnz	r0, 800ef78 <_dtoa_r+0x168>
 800ef76:	3f01      	subs	r7, #1
 800ef78:	2f16      	cmp	r7, #22
 800ef7a:	d851      	bhi.n	800f020 <_dtoa_r+0x210>
 800ef7c:	4b5b      	ldr	r3, [pc, #364]	@ (800f0ec <_dtoa_r+0x2dc>)
 800ef7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ef82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef8a:	f7f1 fdcf 	bl	8000b2c <__aeabi_dcmplt>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	d048      	beq.n	800f024 <_dtoa_r+0x214>
 800ef92:	3f01      	subs	r7, #1
 800ef94:	2300      	movs	r3, #0
 800ef96:	9312      	str	r3, [sp, #72]	@ 0x48
 800ef98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ef9a:	1b9b      	subs	r3, r3, r6
 800ef9c:	1e5a      	subs	r2, r3, #1
 800ef9e:	bf44      	itt	mi
 800efa0:	f1c3 0801 	rsbmi	r8, r3, #1
 800efa4:	2300      	movmi	r3, #0
 800efa6:	9208      	str	r2, [sp, #32]
 800efa8:	bf54      	ite	pl
 800efaa:	f04f 0800 	movpl.w	r8, #0
 800efae:	9308      	strmi	r3, [sp, #32]
 800efb0:	2f00      	cmp	r7, #0
 800efb2:	db39      	blt.n	800f028 <_dtoa_r+0x218>
 800efb4:	9b08      	ldr	r3, [sp, #32]
 800efb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800efb8:	443b      	add	r3, r7
 800efba:	9308      	str	r3, [sp, #32]
 800efbc:	2300      	movs	r3, #0
 800efbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800efc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efc2:	2b09      	cmp	r3, #9
 800efc4:	d864      	bhi.n	800f090 <_dtoa_r+0x280>
 800efc6:	2b05      	cmp	r3, #5
 800efc8:	bfc4      	itt	gt
 800efca:	3b04      	subgt	r3, #4
 800efcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800efce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efd0:	f1a3 0302 	sub.w	r3, r3, #2
 800efd4:	bfcc      	ite	gt
 800efd6:	2400      	movgt	r4, #0
 800efd8:	2401      	movle	r4, #1
 800efda:	2b03      	cmp	r3, #3
 800efdc:	d863      	bhi.n	800f0a6 <_dtoa_r+0x296>
 800efde:	e8df f003 	tbb	[pc, r3]
 800efe2:	372a      	.short	0x372a
 800efe4:	5535      	.short	0x5535
 800efe6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800efea:	441e      	add	r6, r3
 800efec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800eff0:	2b20      	cmp	r3, #32
 800eff2:	bfc1      	itttt	gt
 800eff4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800eff8:	409f      	lslgt	r7, r3
 800effa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800effe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f002:	bfd6      	itet	le
 800f004:	f1c3 0320 	rsble	r3, r3, #32
 800f008:	ea47 0003 	orrgt.w	r0, r7, r3
 800f00c:	fa04 f003 	lslle.w	r0, r4, r3
 800f010:	f7f1 faa0 	bl	8000554 <__aeabi_ui2d>
 800f014:	2201      	movs	r2, #1
 800f016:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f01a:	3e01      	subs	r6, #1
 800f01c:	9214      	str	r2, [sp, #80]	@ 0x50
 800f01e:	e777      	b.n	800ef10 <_dtoa_r+0x100>
 800f020:	2301      	movs	r3, #1
 800f022:	e7b8      	b.n	800ef96 <_dtoa_r+0x186>
 800f024:	9012      	str	r0, [sp, #72]	@ 0x48
 800f026:	e7b7      	b.n	800ef98 <_dtoa_r+0x188>
 800f028:	427b      	negs	r3, r7
 800f02a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f02c:	2300      	movs	r3, #0
 800f02e:	eba8 0807 	sub.w	r8, r8, r7
 800f032:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f034:	e7c4      	b.n	800efc0 <_dtoa_r+0x1b0>
 800f036:	2300      	movs	r3, #0
 800f038:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f03a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	dc35      	bgt.n	800f0ac <_dtoa_r+0x29c>
 800f040:	2301      	movs	r3, #1
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	9307      	str	r3, [sp, #28]
 800f046:	461a      	mov	r2, r3
 800f048:	920e      	str	r2, [sp, #56]	@ 0x38
 800f04a:	e00b      	b.n	800f064 <_dtoa_r+0x254>
 800f04c:	2301      	movs	r3, #1
 800f04e:	e7f3      	b.n	800f038 <_dtoa_r+0x228>
 800f050:	2300      	movs	r3, #0
 800f052:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f056:	18fb      	adds	r3, r7, r3
 800f058:	9300      	str	r3, [sp, #0]
 800f05a:	3301      	adds	r3, #1
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	9307      	str	r3, [sp, #28]
 800f060:	bfb8      	it	lt
 800f062:	2301      	movlt	r3, #1
 800f064:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f068:	2100      	movs	r1, #0
 800f06a:	2204      	movs	r2, #4
 800f06c:	f102 0514 	add.w	r5, r2, #20
 800f070:	429d      	cmp	r5, r3
 800f072:	d91f      	bls.n	800f0b4 <_dtoa_r+0x2a4>
 800f074:	6041      	str	r1, [r0, #4]
 800f076:	4658      	mov	r0, fp
 800f078:	f000 fcd8 	bl	800fa2c <_Balloc>
 800f07c:	4682      	mov	sl, r0
 800f07e:	2800      	cmp	r0, #0
 800f080:	d13c      	bne.n	800f0fc <_dtoa_r+0x2ec>
 800f082:	4b1b      	ldr	r3, [pc, #108]	@ (800f0f0 <_dtoa_r+0x2e0>)
 800f084:	4602      	mov	r2, r0
 800f086:	f240 11af 	movw	r1, #431	@ 0x1af
 800f08a:	e6d8      	b.n	800ee3e <_dtoa_r+0x2e>
 800f08c:	2301      	movs	r3, #1
 800f08e:	e7e0      	b.n	800f052 <_dtoa_r+0x242>
 800f090:	2401      	movs	r4, #1
 800f092:	2300      	movs	r3, #0
 800f094:	9309      	str	r3, [sp, #36]	@ 0x24
 800f096:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f098:	f04f 33ff 	mov.w	r3, #4294967295
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	9307      	str	r3, [sp, #28]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	2312      	movs	r3, #18
 800f0a4:	e7d0      	b.n	800f048 <_dtoa_r+0x238>
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0aa:	e7f5      	b.n	800f098 <_dtoa_r+0x288>
 800f0ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	9307      	str	r3, [sp, #28]
 800f0b2:	e7d7      	b.n	800f064 <_dtoa_r+0x254>
 800f0b4:	3101      	adds	r1, #1
 800f0b6:	0052      	lsls	r2, r2, #1
 800f0b8:	e7d8      	b.n	800f06c <_dtoa_r+0x25c>
 800f0ba:	bf00      	nop
 800f0bc:	f3af 8000 	nop.w
 800f0c0:	636f4361 	.word	0x636f4361
 800f0c4:	3fd287a7 	.word	0x3fd287a7
 800f0c8:	8b60c8b3 	.word	0x8b60c8b3
 800f0cc:	3fc68a28 	.word	0x3fc68a28
 800f0d0:	509f79fb 	.word	0x509f79fb
 800f0d4:	3fd34413 	.word	0x3fd34413
 800f0d8:	08013292 	.word	0x08013292
 800f0dc:	080132a9 	.word	0x080132a9
 800f0e0:	7ff00000 	.word	0x7ff00000
 800f0e4:	0801325d 	.word	0x0801325d
 800f0e8:	3ff80000 	.word	0x3ff80000
 800f0ec:	080133a0 	.word	0x080133a0
 800f0f0:	08013301 	.word	0x08013301
 800f0f4:	0801328e 	.word	0x0801328e
 800f0f8:	0801325c 	.word	0x0801325c
 800f0fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f100:	6018      	str	r0, [r3, #0]
 800f102:	9b07      	ldr	r3, [sp, #28]
 800f104:	2b0e      	cmp	r3, #14
 800f106:	f200 80a4 	bhi.w	800f252 <_dtoa_r+0x442>
 800f10a:	2c00      	cmp	r4, #0
 800f10c:	f000 80a1 	beq.w	800f252 <_dtoa_r+0x442>
 800f110:	2f00      	cmp	r7, #0
 800f112:	dd33      	ble.n	800f17c <_dtoa_r+0x36c>
 800f114:	4bad      	ldr	r3, [pc, #692]	@ (800f3cc <_dtoa_r+0x5bc>)
 800f116:	f007 020f 	and.w	r2, r7, #15
 800f11a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f11e:	ed93 7b00 	vldr	d7, [r3]
 800f122:	05f8      	lsls	r0, r7, #23
 800f124:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f128:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f12c:	d516      	bpl.n	800f15c <_dtoa_r+0x34c>
 800f12e:	4ba8      	ldr	r3, [pc, #672]	@ (800f3d0 <_dtoa_r+0x5c0>)
 800f130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f134:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f138:	f7f1 fbb0 	bl	800089c <__aeabi_ddiv>
 800f13c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f140:	f004 040f 	and.w	r4, r4, #15
 800f144:	2603      	movs	r6, #3
 800f146:	4da2      	ldr	r5, [pc, #648]	@ (800f3d0 <_dtoa_r+0x5c0>)
 800f148:	b954      	cbnz	r4, 800f160 <_dtoa_r+0x350>
 800f14a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f152:	f7f1 fba3 	bl	800089c <__aeabi_ddiv>
 800f156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f15a:	e028      	b.n	800f1ae <_dtoa_r+0x39e>
 800f15c:	2602      	movs	r6, #2
 800f15e:	e7f2      	b.n	800f146 <_dtoa_r+0x336>
 800f160:	07e1      	lsls	r1, r4, #31
 800f162:	d508      	bpl.n	800f176 <_dtoa_r+0x366>
 800f164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f168:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f16c:	f7f1 fa6c 	bl	8000648 <__aeabi_dmul>
 800f170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f174:	3601      	adds	r6, #1
 800f176:	1064      	asrs	r4, r4, #1
 800f178:	3508      	adds	r5, #8
 800f17a:	e7e5      	b.n	800f148 <_dtoa_r+0x338>
 800f17c:	f000 80d2 	beq.w	800f324 <_dtoa_r+0x514>
 800f180:	427c      	negs	r4, r7
 800f182:	4b92      	ldr	r3, [pc, #584]	@ (800f3cc <_dtoa_r+0x5bc>)
 800f184:	4d92      	ldr	r5, [pc, #584]	@ (800f3d0 <_dtoa_r+0x5c0>)
 800f186:	f004 020f 	and.w	r2, r4, #15
 800f18a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f192:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f196:	f7f1 fa57 	bl	8000648 <__aeabi_dmul>
 800f19a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f19e:	1124      	asrs	r4, r4, #4
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	2602      	movs	r6, #2
 800f1a4:	2c00      	cmp	r4, #0
 800f1a6:	f040 80b2 	bne.w	800f30e <_dtoa_r+0x4fe>
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d1d3      	bne.n	800f156 <_dtoa_r+0x346>
 800f1ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f1b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f000 80b7 	beq.w	800f328 <_dtoa_r+0x518>
 800f1ba:	4b86      	ldr	r3, [pc, #536]	@ (800f3d4 <_dtoa_r+0x5c4>)
 800f1bc:	2200      	movs	r2, #0
 800f1be:	4620      	mov	r0, r4
 800f1c0:	4629      	mov	r1, r5
 800f1c2:	f7f1 fcb3 	bl	8000b2c <__aeabi_dcmplt>
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	f000 80ae 	beq.w	800f328 <_dtoa_r+0x518>
 800f1cc:	9b07      	ldr	r3, [sp, #28]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	f000 80aa 	beq.w	800f328 <_dtoa_r+0x518>
 800f1d4:	9b00      	ldr	r3, [sp, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	dd37      	ble.n	800f24a <_dtoa_r+0x43a>
 800f1da:	1e7b      	subs	r3, r7, #1
 800f1dc:	9304      	str	r3, [sp, #16]
 800f1de:	4620      	mov	r0, r4
 800f1e0:	4b7d      	ldr	r3, [pc, #500]	@ (800f3d8 <_dtoa_r+0x5c8>)
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	4629      	mov	r1, r5
 800f1e6:	f7f1 fa2f 	bl	8000648 <__aeabi_dmul>
 800f1ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1ee:	9c00      	ldr	r4, [sp, #0]
 800f1f0:	3601      	adds	r6, #1
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f7f1 f9be 	bl	8000574 <__aeabi_i2d>
 800f1f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1fc:	f7f1 fa24 	bl	8000648 <__aeabi_dmul>
 800f200:	4b76      	ldr	r3, [pc, #472]	@ (800f3dc <_dtoa_r+0x5cc>)
 800f202:	2200      	movs	r2, #0
 800f204:	f7f1 f86a 	bl	80002dc <__adddf3>
 800f208:	4605      	mov	r5, r0
 800f20a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f20e:	2c00      	cmp	r4, #0
 800f210:	f040 808d 	bne.w	800f32e <_dtoa_r+0x51e>
 800f214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f218:	4b71      	ldr	r3, [pc, #452]	@ (800f3e0 <_dtoa_r+0x5d0>)
 800f21a:	2200      	movs	r2, #0
 800f21c:	f7f1 f85c 	bl	80002d8 <__aeabi_dsub>
 800f220:	4602      	mov	r2, r0
 800f222:	460b      	mov	r3, r1
 800f224:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f228:	462a      	mov	r2, r5
 800f22a:	4633      	mov	r3, r6
 800f22c:	f7f1 fc9c 	bl	8000b68 <__aeabi_dcmpgt>
 800f230:	2800      	cmp	r0, #0
 800f232:	f040 828b 	bne.w	800f74c <_dtoa_r+0x93c>
 800f236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f23a:	462a      	mov	r2, r5
 800f23c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f240:	f7f1 fc74 	bl	8000b2c <__aeabi_dcmplt>
 800f244:	2800      	cmp	r0, #0
 800f246:	f040 8128 	bne.w	800f49a <_dtoa_r+0x68a>
 800f24a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f24e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f252:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f254:	2b00      	cmp	r3, #0
 800f256:	f2c0 815a 	blt.w	800f50e <_dtoa_r+0x6fe>
 800f25a:	2f0e      	cmp	r7, #14
 800f25c:	f300 8157 	bgt.w	800f50e <_dtoa_r+0x6fe>
 800f260:	4b5a      	ldr	r3, [pc, #360]	@ (800f3cc <_dtoa_r+0x5bc>)
 800f262:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f266:	ed93 7b00 	vldr	d7, [r3]
 800f26a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	ed8d 7b00 	vstr	d7, [sp]
 800f272:	da03      	bge.n	800f27c <_dtoa_r+0x46c>
 800f274:	9b07      	ldr	r3, [sp, #28]
 800f276:	2b00      	cmp	r3, #0
 800f278:	f340 8101 	ble.w	800f47e <_dtoa_r+0x66e>
 800f27c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f280:	4656      	mov	r6, sl
 800f282:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f286:	4620      	mov	r0, r4
 800f288:	4629      	mov	r1, r5
 800f28a:	f7f1 fb07 	bl	800089c <__aeabi_ddiv>
 800f28e:	f7f1 fc8b 	bl	8000ba8 <__aeabi_d2iz>
 800f292:	4680      	mov	r8, r0
 800f294:	f7f1 f96e 	bl	8000574 <__aeabi_i2d>
 800f298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f29c:	f7f1 f9d4 	bl	8000648 <__aeabi_dmul>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	460b      	mov	r3, r1
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	4629      	mov	r1, r5
 800f2a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f2ac:	f7f1 f814 	bl	80002d8 <__aeabi_dsub>
 800f2b0:	f806 4b01 	strb.w	r4, [r6], #1
 800f2b4:	9d07      	ldr	r5, [sp, #28]
 800f2b6:	eba6 040a 	sub.w	r4, r6, sl
 800f2ba:	42a5      	cmp	r5, r4
 800f2bc:	4602      	mov	r2, r0
 800f2be:	460b      	mov	r3, r1
 800f2c0:	f040 8117 	bne.w	800f4f2 <_dtoa_r+0x6e2>
 800f2c4:	f7f1 f80a 	bl	80002dc <__adddf3>
 800f2c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	460d      	mov	r5, r1
 800f2d0:	f7f1 fc4a 	bl	8000b68 <__aeabi_dcmpgt>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	f040 80f9 	bne.w	800f4cc <_dtoa_r+0x6bc>
 800f2da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2de:	4620      	mov	r0, r4
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	f7f1 fc19 	bl	8000b18 <__aeabi_dcmpeq>
 800f2e6:	b118      	cbz	r0, 800f2f0 <_dtoa_r+0x4e0>
 800f2e8:	f018 0f01 	tst.w	r8, #1
 800f2ec:	f040 80ee 	bne.w	800f4cc <_dtoa_r+0x6bc>
 800f2f0:	4649      	mov	r1, r9
 800f2f2:	4658      	mov	r0, fp
 800f2f4:	f000 fbda 	bl	800faac <_Bfree>
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	7033      	strb	r3, [r6, #0]
 800f2fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f2fe:	3701      	adds	r7, #1
 800f300:	601f      	str	r7, [r3, #0]
 800f302:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f304:	2b00      	cmp	r3, #0
 800f306:	f000 831d 	beq.w	800f944 <_dtoa_r+0xb34>
 800f30a:	601e      	str	r6, [r3, #0]
 800f30c:	e31a      	b.n	800f944 <_dtoa_r+0xb34>
 800f30e:	07e2      	lsls	r2, r4, #31
 800f310:	d505      	bpl.n	800f31e <_dtoa_r+0x50e>
 800f312:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f316:	f7f1 f997 	bl	8000648 <__aeabi_dmul>
 800f31a:	3601      	adds	r6, #1
 800f31c:	2301      	movs	r3, #1
 800f31e:	1064      	asrs	r4, r4, #1
 800f320:	3508      	adds	r5, #8
 800f322:	e73f      	b.n	800f1a4 <_dtoa_r+0x394>
 800f324:	2602      	movs	r6, #2
 800f326:	e742      	b.n	800f1ae <_dtoa_r+0x39e>
 800f328:	9c07      	ldr	r4, [sp, #28]
 800f32a:	9704      	str	r7, [sp, #16]
 800f32c:	e761      	b.n	800f1f2 <_dtoa_r+0x3e2>
 800f32e:	4b27      	ldr	r3, [pc, #156]	@ (800f3cc <_dtoa_r+0x5bc>)
 800f330:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f332:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f336:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f33a:	4454      	add	r4, sl
 800f33c:	2900      	cmp	r1, #0
 800f33e:	d053      	beq.n	800f3e8 <_dtoa_r+0x5d8>
 800f340:	4928      	ldr	r1, [pc, #160]	@ (800f3e4 <_dtoa_r+0x5d4>)
 800f342:	2000      	movs	r0, #0
 800f344:	f7f1 faaa 	bl	800089c <__aeabi_ddiv>
 800f348:	4633      	mov	r3, r6
 800f34a:	462a      	mov	r2, r5
 800f34c:	f7f0 ffc4 	bl	80002d8 <__aeabi_dsub>
 800f350:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f354:	4656      	mov	r6, sl
 800f356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f35a:	f7f1 fc25 	bl	8000ba8 <__aeabi_d2iz>
 800f35e:	4605      	mov	r5, r0
 800f360:	f7f1 f908 	bl	8000574 <__aeabi_i2d>
 800f364:	4602      	mov	r2, r0
 800f366:	460b      	mov	r3, r1
 800f368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f36c:	f7f0 ffb4 	bl	80002d8 <__aeabi_dsub>
 800f370:	3530      	adds	r5, #48	@ 0x30
 800f372:	4602      	mov	r2, r0
 800f374:	460b      	mov	r3, r1
 800f376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f37a:	f806 5b01 	strb.w	r5, [r6], #1
 800f37e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f382:	f7f1 fbd3 	bl	8000b2c <__aeabi_dcmplt>
 800f386:	2800      	cmp	r0, #0
 800f388:	d171      	bne.n	800f46e <_dtoa_r+0x65e>
 800f38a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f38e:	4911      	ldr	r1, [pc, #68]	@ (800f3d4 <_dtoa_r+0x5c4>)
 800f390:	2000      	movs	r0, #0
 800f392:	f7f0 ffa1 	bl	80002d8 <__aeabi_dsub>
 800f396:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f39a:	f7f1 fbc7 	bl	8000b2c <__aeabi_dcmplt>
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	f040 8095 	bne.w	800f4ce <_dtoa_r+0x6be>
 800f3a4:	42a6      	cmp	r6, r4
 800f3a6:	f43f af50 	beq.w	800f24a <_dtoa_r+0x43a>
 800f3aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f3ae:	4b0a      	ldr	r3, [pc, #40]	@ (800f3d8 <_dtoa_r+0x5c8>)
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	f7f1 f949 	bl	8000648 <__aeabi_dmul>
 800f3b6:	4b08      	ldr	r3, [pc, #32]	@ (800f3d8 <_dtoa_r+0x5c8>)
 800f3b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f3bc:	2200      	movs	r2, #0
 800f3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3c2:	f7f1 f941 	bl	8000648 <__aeabi_dmul>
 800f3c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3ca:	e7c4      	b.n	800f356 <_dtoa_r+0x546>
 800f3cc:	080133a0 	.word	0x080133a0
 800f3d0:	08013378 	.word	0x08013378
 800f3d4:	3ff00000 	.word	0x3ff00000
 800f3d8:	40240000 	.word	0x40240000
 800f3dc:	401c0000 	.word	0x401c0000
 800f3e0:	40140000 	.word	0x40140000
 800f3e4:	3fe00000 	.word	0x3fe00000
 800f3e8:	4631      	mov	r1, r6
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	f7f1 f92c 	bl	8000648 <__aeabi_dmul>
 800f3f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f3f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800f3f6:	4656      	mov	r6, sl
 800f3f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3fc:	f7f1 fbd4 	bl	8000ba8 <__aeabi_d2iz>
 800f400:	4605      	mov	r5, r0
 800f402:	f7f1 f8b7 	bl	8000574 <__aeabi_i2d>
 800f406:	4602      	mov	r2, r0
 800f408:	460b      	mov	r3, r1
 800f40a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f40e:	f7f0 ff63 	bl	80002d8 <__aeabi_dsub>
 800f412:	3530      	adds	r5, #48	@ 0x30
 800f414:	f806 5b01 	strb.w	r5, [r6], #1
 800f418:	4602      	mov	r2, r0
 800f41a:	460b      	mov	r3, r1
 800f41c:	42a6      	cmp	r6, r4
 800f41e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f422:	f04f 0200 	mov.w	r2, #0
 800f426:	d124      	bne.n	800f472 <_dtoa_r+0x662>
 800f428:	4bac      	ldr	r3, [pc, #688]	@ (800f6dc <_dtoa_r+0x8cc>)
 800f42a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f42e:	f7f0 ff55 	bl	80002dc <__adddf3>
 800f432:	4602      	mov	r2, r0
 800f434:	460b      	mov	r3, r1
 800f436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f43a:	f7f1 fb95 	bl	8000b68 <__aeabi_dcmpgt>
 800f43e:	2800      	cmp	r0, #0
 800f440:	d145      	bne.n	800f4ce <_dtoa_r+0x6be>
 800f442:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f446:	49a5      	ldr	r1, [pc, #660]	@ (800f6dc <_dtoa_r+0x8cc>)
 800f448:	2000      	movs	r0, #0
 800f44a:	f7f0 ff45 	bl	80002d8 <__aeabi_dsub>
 800f44e:	4602      	mov	r2, r0
 800f450:	460b      	mov	r3, r1
 800f452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f456:	f7f1 fb69 	bl	8000b2c <__aeabi_dcmplt>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	f43f aef5 	beq.w	800f24a <_dtoa_r+0x43a>
 800f460:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f462:	1e73      	subs	r3, r6, #1
 800f464:	9315      	str	r3, [sp, #84]	@ 0x54
 800f466:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f46a:	2b30      	cmp	r3, #48	@ 0x30
 800f46c:	d0f8      	beq.n	800f460 <_dtoa_r+0x650>
 800f46e:	9f04      	ldr	r7, [sp, #16]
 800f470:	e73e      	b.n	800f2f0 <_dtoa_r+0x4e0>
 800f472:	4b9b      	ldr	r3, [pc, #620]	@ (800f6e0 <_dtoa_r+0x8d0>)
 800f474:	f7f1 f8e8 	bl	8000648 <__aeabi_dmul>
 800f478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f47c:	e7bc      	b.n	800f3f8 <_dtoa_r+0x5e8>
 800f47e:	d10c      	bne.n	800f49a <_dtoa_r+0x68a>
 800f480:	4b98      	ldr	r3, [pc, #608]	@ (800f6e4 <_dtoa_r+0x8d4>)
 800f482:	2200      	movs	r2, #0
 800f484:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f488:	f7f1 f8de 	bl	8000648 <__aeabi_dmul>
 800f48c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f490:	f7f1 fb60 	bl	8000b54 <__aeabi_dcmpge>
 800f494:	2800      	cmp	r0, #0
 800f496:	f000 8157 	beq.w	800f748 <_dtoa_r+0x938>
 800f49a:	2400      	movs	r4, #0
 800f49c:	4625      	mov	r5, r4
 800f49e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4a0:	43db      	mvns	r3, r3
 800f4a2:	9304      	str	r3, [sp, #16]
 800f4a4:	4656      	mov	r6, sl
 800f4a6:	2700      	movs	r7, #0
 800f4a8:	4621      	mov	r1, r4
 800f4aa:	4658      	mov	r0, fp
 800f4ac:	f000 fafe 	bl	800faac <_Bfree>
 800f4b0:	2d00      	cmp	r5, #0
 800f4b2:	d0dc      	beq.n	800f46e <_dtoa_r+0x65e>
 800f4b4:	b12f      	cbz	r7, 800f4c2 <_dtoa_r+0x6b2>
 800f4b6:	42af      	cmp	r7, r5
 800f4b8:	d003      	beq.n	800f4c2 <_dtoa_r+0x6b2>
 800f4ba:	4639      	mov	r1, r7
 800f4bc:	4658      	mov	r0, fp
 800f4be:	f000 faf5 	bl	800faac <_Bfree>
 800f4c2:	4629      	mov	r1, r5
 800f4c4:	4658      	mov	r0, fp
 800f4c6:	f000 faf1 	bl	800faac <_Bfree>
 800f4ca:	e7d0      	b.n	800f46e <_dtoa_r+0x65e>
 800f4cc:	9704      	str	r7, [sp, #16]
 800f4ce:	4633      	mov	r3, r6
 800f4d0:	461e      	mov	r6, r3
 800f4d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4d6:	2a39      	cmp	r2, #57	@ 0x39
 800f4d8:	d107      	bne.n	800f4ea <_dtoa_r+0x6da>
 800f4da:	459a      	cmp	sl, r3
 800f4dc:	d1f8      	bne.n	800f4d0 <_dtoa_r+0x6c0>
 800f4de:	9a04      	ldr	r2, [sp, #16]
 800f4e0:	3201      	adds	r2, #1
 800f4e2:	9204      	str	r2, [sp, #16]
 800f4e4:	2230      	movs	r2, #48	@ 0x30
 800f4e6:	f88a 2000 	strb.w	r2, [sl]
 800f4ea:	781a      	ldrb	r2, [r3, #0]
 800f4ec:	3201      	adds	r2, #1
 800f4ee:	701a      	strb	r2, [r3, #0]
 800f4f0:	e7bd      	b.n	800f46e <_dtoa_r+0x65e>
 800f4f2:	4b7b      	ldr	r3, [pc, #492]	@ (800f6e0 <_dtoa_r+0x8d0>)
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	f7f1 f8a7 	bl	8000648 <__aeabi_dmul>
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	4604      	mov	r4, r0
 800f500:	460d      	mov	r5, r1
 800f502:	f7f1 fb09 	bl	8000b18 <__aeabi_dcmpeq>
 800f506:	2800      	cmp	r0, #0
 800f508:	f43f aebb 	beq.w	800f282 <_dtoa_r+0x472>
 800f50c:	e6f0      	b.n	800f2f0 <_dtoa_r+0x4e0>
 800f50e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f510:	2a00      	cmp	r2, #0
 800f512:	f000 80db 	beq.w	800f6cc <_dtoa_r+0x8bc>
 800f516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f518:	2a01      	cmp	r2, #1
 800f51a:	f300 80bf 	bgt.w	800f69c <_dtoa_r+0x88c>
 800f51e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f520:	2a00      	cmp	r2, #0
 800f522:	f000 80b7 	beq.w	800f694 <_dtoa_r+0x884>
 800f526:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f52a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f52c:	4646      	mov	r6, r8
 800f52e:	9a08      	ldr	r2, [sp, #32]
 800f530:	2101      	movs	r1, #1
 800f532:	441a      	add	r2, r3
 800f534:	4658      	mov	r0, fp
 800f536:	4498      	add	r8, r3
 800f538:	9208      	str	r2, [sp, #32]
 800f53a:	f000 fbb5 	bl	800fca8 <__i2b>
 800f53e:	4605      	mov	r5, r0
 800f540:	b15e      	cbz	r6, 800f55a <_dtoa_r+0x74a>
 800f542:	9b08      	ldr	r3, [sp, #32]
 800f544:	2b00      	cmp	r3, #0
 800f546:	dd08      	ble.n	800f55a <_dtoa_r+0x74a>
 800f548:	42b3      	cmp	r3, r6
 800f54a:	9a08      	ldr	r2, [sp, #32]
 800f54c:	bfa8      	it	ge
 800f54e:	4633      	movge	r3, r6
 800f550:	eba8 0803 	sub.w	r8, r8, r3
 800f554:	1af6      	subs	r6, r6, r3
 800f556:	1ad3      	subs	r3, r2, r3
 800f558:	9308      	str	r3, [sp, #32]
 800f55a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f55c:	b1f3      	cbz	r3, 800f59c <_dtoa_r+0x78c>
 800f55e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f560:	2b00      	cmp	r3, #0
 800f562:	f000 80b7 	beq.w	800f6d4 <_dtoa_r+0x8c4>
 800f566:	b18c      	cbz	r4, 800f58c <_dtoa_r+0x77c>
 800f568:	4629      	mov	r1, r5
 800f56a:	4622      	mov	r2, r4
 800f56c:	4658      	mov	r0, fp
 800f56e:	f000 fc5b 	bl	800fe28 <__pow5mult>
 800f572:	464a      	mov	r2, r9
 800f574:	4601      	mov	r1, r0
 800f576:	4605      	mov	r5, r0
 800f578:	4658      	mov	r0, fp
 800f57a:	f000 fbab 	bl	800fcd4 <__multiply>
 800f57e:	4649      	mov	r1, r9
 800f580:	9004      	str	r0, [sp, #16]
 800f582:	4658      	mov	r0, fp
 800f584:	f000 fa92 	bl	800faac <_Bfree>
 800f588:	9b04      	ldr	r3, [sp, #16]
 800f58a:	4699      	mov	r9, r3
 800f58c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f58e:	1b1a      	subs	r2, r3, r4
 800f590:	d004      	beq.n	800f59c <_dtoa_r+0x78c>
 800f592:	4649      	mov	r1, r9
 800f594:	4658      	mov	r0, fp
 800f596:	f000 fc47 	bl	800fe28 <__pow5mult>
 800f59a:	4681      	mov	r9, r0
 800f59c:	2101      	movs	r1, #1
 800f59e:	4658      	mov	r0, fp
 800f5a0:	f000 fb82 	bl	800fca8 <__i2b>
 800f5a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f000 81cf 	beq.w	800f94c <_dtoa_r+0xb3c>
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	4601      	mov	r1, r0
 800f5b2:	4658      	mov	r0, fp
 800f5b4:	f000 fc38 	bl	800fe28 <__pow5mult>
 800f5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	4604      	mov	r4, r0
 800f5be:	f300 8095 	bgt.w	800f6ec <_dtoa_r+0x8dc>
 800f5c2:	9b02      	ldr	r3, [sp, #8]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f040 8087 	bne.w	800f6d8 <_dtoa_r+0x8c8>
 800f5ca:	9b03      	ldr	r3, [sp, #12]
 800f5cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	f040 8089 	bne.w	800f6e8 <_dtoa_r+0x8d8>
 800f5d6:	9b03      	ldr	r3, [sp, #12]
 800f5d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f5dc:	0d1b      	lsrs	r3, r3, #20
 800f5de:	051b      	lsls	r3, r3, #20
 800f5e0:	b12b      	cbz	r3, 800f5ee <_dtoa_r+0x7de>
 800f5e2:	9b08      	ldr	r3, [sp, #32]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	9308      	str	r3, [sp, #32]
 800f5e8:	f108 0801 	add.w	r8, r8, #1
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	f000 81b0 	beq.w	800f958 <_dtoa_r+0xb48>
 800f5f8:	6923      	ldr	r3, [r4, #16]
 800f5fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f5fe:	6918      	ldr	r0, [r3, #16]
 800f600:	f000 fb06 	bl	800fc10 <__hi0bits>
 800f604:	f1c0 0020 	rsb	r0, r0, #32
 800f608:	9b08      	ldr	r3, [sp, #32]
 800f60a:	4418      	add	r0, r3
 800f60c:	f010 001f 	ands.w	r0, r0, #31
 800f610:	d077      	beq.n	800f702 <_dtoa_r+0x8f2>
 800f612:	f1c0 0320 	rsb	r3, r0, #32
 800f616:	2b04      	cmp	r3, #4
 800f618:	dd6b      	ble.n	800f6f2 <_dtoa_r+0x8e2>
 800f61a:	9b08      	ldr	r3, [sp, #32]
 800f61c:	f1c0 001c 	rsb	r0, r0, #28
 800f620:	4403      	add	r3, r0
 800f622:	4480      	add	r8, r0
 800f624:	4406      	add	r6, r0
 800f626:	9308      	str	r3, [sp, #32]
 800f628:	f1b8 0f00 	cmp.w	r8, #0
 800f62c:	dd05      	ble.n	800f63a <_dtoa_r+0x82a>
 800f62e:	4649      	mov	r1, r9
 800f630:	4642      	mov	r2, r8
 800f632:	4658      	mov	r0, fp
 800f634:	f000 fc52 	bl	800fedc <__lshift>
 800f638:	4681      	mov	r9, r0
 800f63a:	9b08      	ldr	r3, [sp, #32]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	dd05      	ble.n	800f64c <_dtoa_r+0x83c>
 800f640:	4621      	mov	r1, r4
 800f642:	461a      	mov	r2, r3
 800f644:	4658      	mov	r0, fp
 800f646:	f000 fc49 	bl	800fedc <__lshift>
 800f64a:	4604      	mov	r4, r0
 800f64c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d059      	beq.n	800f706 <_dtoa_r+0x8f6>
 800f652:	4621      	mov	r1, r4
 800f654:	4648      	mov	r0, r9
 800f656:	f000 fcad 	bl	800ffb4 <__mcmp>
 800f65a:	2800      	cmp	r0, #0
 800f65c:	da53      	bge.n	800f706 <_dtoa_r+0x8f6>
 800f65e:	1e7b      	subs	r3, r7, #1
 800f660:	9304      	str	r3, [sp, #16]
 800f662:	4649      	mov	r1, r9
 800f664:	2300      	movs	r3, #0
 800f666:	220a      	movs	r2, #10
 800f668:	4658      	mov	r0, fp
 800f66a:	f000 fa41 	bl	800faf0 <__multadd>
 800f66e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f670:	4681      	mov	r9, r0
 800f672:	2b00      	cmp	r3, #0
 800f674:	f000 8172 	beq.w	800f95c <_dtoa_r+0xb4c>
 800f678:	2300      	movs	r3, #0
 800f67a:	4629      	mov	r1, r5
 800f67c:	220a      	movs	r2, #10
 800f67e:	4658      	mov	r0, fp
 800f680:	f000 fa36 	bl	800faf0 <__multadd>
 800f684:	9b00      	ldr	r3, [sp, #0]
 800f686:	2b00      	cmp	r3, #0
 800f688:	4605      	mov	r5, r0
 800f68a:	dc67      	bgt.n	800f75c <_dtoa_r+0x94c>
 800f68c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f68e:	2b02      	cmp	r3, #2
 800f690:	dc41      	bgt.n	800f716 <_dtoa_r+0x906>
 800f692:	e063      	b.n	800f75c <_dtoa_r+0x94c>
 800f694:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f696:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f69a:	e746      	b.n	800f52a <_dtoa_r+0x71a>
 800f69c:	9b07      	ldr	r3, [sp, #28]
 800f69e:	1e5c      	subs	r4, r3, #1
 800f6a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6a2:	42a3      	cmp	r3, r4
 800f6a4:	bfbf      	itttt	lt
 800f6a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f6a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f6aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f6ac:	1ae3      	sublt	r3, r4, r3
 800f6ae:	bfb4      	ite	lt
 800f6b0:	18d2      	addlt	r2, r2, r3
 800f6b2:	1b1c      	subge	r4, r3, r4
 800f6b4:	9b07      	ldr	r3, [sp, #28]
 800f6b6:	bfbc      	itt	lt
 800f6b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f6ba:	2400      	movlt	r4, #0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	bfb5      	itete	lt
 800f6c0:	eba8 0603 	sublt.w	r6, r8, r3
 800f6c4:	9b07      	ldrge	r3, [sp, #28]
 800f6c6:	2300      	movlt	r3, #0
 800f6c8:	4646      	movge	r6, r8
 800f6ca:	e730      	b.n	800f52e <_dtoa_r+0x71e>
 800f6cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f6ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f6d0:	4646      	mov	r6, r8
 800f6d2:	e735      	b.n	800f540 <_dtoa_r+0x730>
 800f6d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6d6:	e75c      	b.n	800f592 <_dtoa_r+0x782>
 800f6d8:	2300      	movs	r3, #0
 800f6da:	e788      	b.n	800f5ee <_dtoa_r+0x7de>
 800f6dc:	3fe00000 	.word	0x3fe00000
 800f6e0:	40240000 	.word	0x40240000
 800f6e4:	40140000 	.word	0x40140000
 800f6e8:	9b02      	ldr	r3, [sp, #8]
 800f6ea:	e780      	b.n	800f5ee <_dtoa_r+0x7de>
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6f0:	e782      	b.n	800f5f8 <_dtoa_r+0x7e8>
 800f6f2:	d099      	beq.n	800f628 <_dtoa_r+0x818>
 800f6f4:	9a08      	ldr	r2, [sp, #32]
 800f6f6:	331c      	adds	r3, #28
 800f6f8:	441a      	add	r2, r3
 800f6fa:	4498      	add	r8, r3
 800f6fc:	441e      	add	r6, r3
 800f6fe:	9208      	str	r2, [sp, #32]
 800f700:	e792      	b.n	800f628 <_dtoa_r+0x818>
 800f702:	4603      	mov	r3, r0
 800f704:	e7f6      	b.n	800f6f4 <_dtoa_r+0x8e4>
 800f706:	9b07      	ldr	r3, [sp, #28]
 800f708:	9704      	str	r7, [sp, #16]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	dc20      	bgt.n	800f750 <_dtoa_r+0x940>
 800f70e:	9300      	str	r3, [sp, #0]
 800f710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f712:	2b02      	cmp	r3, #2
 800f714:	dd1e      	ble.n	800f754 <_dtoa_r+0x944>
 800f716:	9b00      	ldr	r3, [sp, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	f47f aec0 	bne.w	800f49e <_dtoa_r+0x68e>
 800f71e:	4621      	mov	r1, r4
 800f720:	2205      	movs	r2, #5
 800f722:	4658      	mov	r0, fp
 800f724:	f000 f9e4 	bl	800faf0 <__multadd>
 800f728:	4601      	mov	r1, r0
 800f72a:	4604      	mov	r4, r0
 800f72c:	4648      	mov	r0, r9
 800f72e:	f000 fc41 	bl	800ffb4 <__mcmp>
 800f732:	2800      	cmp	r0, #0
 800f734:	f77f aeb3 	ble.w	800f49e <_dtoa_r+0x68e>
 800f738:	4656      	mov	r6, sl
 800f73a:	2331      	movs	r3, #49	@ 0x31
 800f73c:	f806 3b01 	strb.w	r3, [r6], #1
 800f740:	9b04      	ldr	r3, [sp, #16]
 800f742:	3301      	adds	r3, #1
 800f744:	9304      	str	r3, [sp, #16]
 800f746:	e6ae      	b.n	800f4a6 <_dtoa_r+0x696>
 800f748:	9c07      	ldr	r4, [sp, #28]
 800f74a:	9704      	str	r7, [sp, #16]
 800f74c:	4625      	mov	r5, r4
 800f74e:	e7f3      	b.n	800f738 <_dtoa_r+0x928>
 800f750:	9b07      	ldr	r3, [sp, #28]
 800f752:	9300      	str	r3, [sp, #0]
 800f754:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f756:	2b00      	cmp	r3, #0
 800f758:	f000 8104 	beq.w	800f964 <_dtoa_r+0xb54>
 800f75c:	2e00      	cmp	r6, #0
 800f75e:	dd05      	ble.n	800f76c <_dtoa_r+0x95c>
 800f760:	4629      	mov	r1, r5
 800f762:	4632      	mov	r2, r6
 800f764:	4658      	mov	r0, fp
 800f766:	f000 fbb9 	bl	800fedc <__lshift>
 800f76a:	4605      	mov	r5, r0
 800f76c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d05a      	beq.n	800f828 <_dtoa_r+0xa18>
 800f772:	6869      	ldr	r1, [r5, #4]
 800f774:	4658      	mov	r0, fp
 800f776:	f000 f959 	bl	800fa2c <_Balloc>
 800f77a:	4606      	mov	r6, r0
 800f77c:	b928      	cbnz	r0, 800f78a <_dtoa_r+0x97a>
 800f77e:	4b84      	ldr	r3, [pc, #528]	@ (800f990 <_dtoa_r+0xb80>)
 800f780:	4602      	mov	r2, r0
 800f782:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f786:	f7ff bb5a 	b.w	800ee3e <_dtoa_r+0x2e>
 800f78a:	692a      	ldr	r2, [r5, #16]
 800f78c:	3202      	adds	r2, #2
 800f78e:	0092      	lsls	r2, r2, #2
 800f790:	f105 010c 	add.w	r1, r5, #12
 800f794:	300c      	adds	r0, #12
 800f796:	f7ff fa9c 	bl	800ecd2 <memcpy>
 800f79a:	2201      	movs	r2, #1
 800f79c:	4631      	mov	r1, r6
 800f79e:	4658      	mov	r0, fp
 800f7a0:	f000 fb9c 	bl	800fedc <__lshift>
 800f7a4:	f10a 0301 	add.w	r3, sl, #1
 800f7a8:	9307      	str	r3, [sp, #28]
 800f7aa:	9b00      	ldr	r3, [sp, #0]
 800f7ac:	4453      	add	r3, sl
 800f7ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7b0:	9b02      	ldr	r3, [sp, #8]
 800f7b2:	f003 0301 	and.w	r3, r3, #1
 800f7b6:	462f      	mov	r7, r5
 800f7b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	9b07      	ldr	r3, [sp, #28]
 800f7be:	4621      	mov	r1, r4
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	4648      	mov	r0, r9
 800f7c4:	9300      	str	r3, [sp, #0]
 800f7c6:	f7ff fa99 	bl	800ecfc <quorem>
 800f7ca:	4639      	mov	r1, r7
 800f7cc:	9002      	str	r0, [sp, #8]
 800f7ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f7d2:	4648      	mov	r0, r9
 800f7d4:	f000 fbee 	bl	800ffb4 <__mcmp>
 800f7d8:	462a      	mov	r2, r5
 800f7da:	9008      	str	r0, [sp, #32]
 800f7dc:	4621      	mov	r1, r4
 800f7de:	4658      	mov	r0, fp
 800f7e0:	f000 fc04 	bl	800ffec <__mdiff>
 800f7e4:	68c2      	ldr	r2, [r0, #12]
 800f7e6:	4606      	mov	r6, r0
 800f7e8:	bb02      	cbnz	r2, 800f82c <_dtoa_r+0xa1c>
 800f7ea:	4601      	mov	r1, r0
 800f7ec:	4648      	mov	r0, r9
 800f7ee:	f000 fbe1 	bl	800ffb4 <__mcmp>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	4631      	mov	r1, r6
 800f7f6:	4658      	mov	r0, fp
 800f7f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f7fa:	f000 f957 	bl	800faac <_Bfree>
 800f7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f800:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f802:	9e07      	ldr	r6, [sp, #28]
 800f804:	ea43 0102 	orr.w	r1, r3, r2
 800f808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f80a:	4319      	orrs	r1, r3
 800f80c:	d110      	bne.n	800f830 <_dtoa_r+0xa20>
 800f80e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f812:	d029      	beq.n	800f868 <_dtoa_r+0xa58>
 800f814:	9b08      	ldr	r3, [sp, #32]
 800f816:	2b00      	cmp	r3, #0
 800f818:	dd02      	ble.n	800f820 <_dtoa_r+0xa10>
 800f81a:	9b02      	ldr	r3, [sp, #8]
 800f81c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f820:	9b00      	ldr	r3, [sp, #0]
 800f822:	f883 8000 	strb.w	r8, [r3]
 800f826:	e63f      	b.n	800f4a8 <_dtoa_r+0x698>
 800f828:	4628      	mov	r0, r5
 800f82a:	e7bb      	b.n	800f7a4 <_dtoa_r+0x994>
 800f82c:	2201      	movs	r2, #1
 800f82e:	e7e1      	b.n	800f7f4 <_dtoa_r+0x9e4>
 800f830:	9b08      	ldr	r3, [sp, #32]
 800f832:	2b00      	cmp	r3, #0
 800f834:	db04      	blt.n	800f840 <_dtoa_r+0xa30>
 800f836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f838:	430b      	orrs	r3, r1
 800f83a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f83c:	430b      	orrs	r3, r1
 800f83e:	d120      	bne.n	800f882 <_dtoa_r+0xa72>
 800f840:	2a00      	cmp	r2, #0
 800f842:	dded      	ble.n	800f820 <_dtoa_r+0xa10>
 800f844:	4649      	mov	r1, r9
 800f846:	2201      	movs	r2, #1
 800f848:	4658      	mov	r0, fp
 800f84a:	f000 fb47 	bl	800fedc <__lshift>
 800f84e:	4621      	mov	r1, r4
 800f850:	4681      	mov	r9, r0
 800f852:	f000 fbaf 	bl	800ffb4 <__mcmp>
 800f856:	2800      	cmp	r0, #0
 800f858:	dc03      	bgt.n	800f862 <_dtoa_r+0xa52>
 800f85a:	d1e1      	bne.n	800f820 <_dtoa_r+0xa10>
 800f85c:	f018 0f01 	tst.w	r8, #1
 800f860:	d0de      	beq.n	800f820 <_dtoa_r+0xa10>
 800f862:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f866:	d1d8      	bne.n	800f81a <_dtoa_r+0xa0a>
 800f868:	9a00      	ldr	r2, [sp, #0]
 800f86a:	2339      	movs	r3, #57	@ 0x39
 800f86c:	7013      	strb	r3, [r2, #0]
 800f86e:	4633      	mov	r3, r6
 800f870:	461e      	mov	r6, r3
 800f872:	3b01      	subs	r3, #1
 800f874:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f878:	2a39      	cmp	r2, #57	@ 0x39
 800f87a:	d052      	beq.n	800f922 <_dtoa_r+0xb12>
 800f87c:	3201      	adds	r2, #1
 800f87e:	701a      	strb	r2, [r3, #0]
 800f880:	e612      	b.n	800f4a8 <_dtoa_r+0x698>
 800f882:	2a00      	cmp	r2, #0
 800f884:	dd07      	ble.n	800f896 <_dtoa_r+0xa86>
 800f886:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f88a:	d0ed      	beq.n	800f868 <_dtoa_r+0xa58>
 800f88c:	9a00      	ldr	r2, [sp, #0]
 800f88e:	f108 0301 	add.w	r3, r8, #1
 800f892:	7013      	strb	r3, [r2, #0]
 800f894:	e608      	b.n	800f4a8 <_dtoa_r+0x698>
 800f896:	9b07      	ldr	r3, [sp, #28]
 800f898:	9a07      	ldr	r2, [sp, #28]
 800f89a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d028      	beq.n	800f8f6 <_dtoa_r+0xae6>
 800f8a4:	4649      	mov	r1, r9
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	220a      	movs	r2, #10
 800f8aa:	4658      	mov	r0, fp
 800f8ac:	f000 f920 	bl	800faf0 <__multadd>
 800f8b0:	42af      	cmp	r7, r5
 800f8b2:	4681      	mov	r9, r0
 800f8b4:	f04f 0300 	mov.w	r3, #0
 800f8b8:	f04f 020a 	mov.w	r2, #10
 800f8bc:	4639      	mov	r1, r7
 800f8be:	4658      	mov	r0, fp
 800f8c0:	d107      	bne.n	800f8d2 <_dtoa_r+0xac2>
 800f8c2:	f000 f915 	bl	800faf0 <__multadd>
 800f8c6:	4607      	mov	r7, r0
 800f8c8:	4605      	mov	r5, r0
 800f8ca:	9b07      	ldr	r3, [sp, #28]
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	9307      	str	r3, [sp, #28]
 800f8d0:	e774      	b.n	800f7bc <_dtoa_r+0x9ac>
 800f8d2:	f000 f90d 	bl	800faf0 <__multadd>
 800f8d6:	4629      	mov	r1, r5
 800f8d8:	4607      	mov	r7, r0
 800f8da:	2300      	movs	r3, #0
 800f8dc:	220a      	movs	r2, #10
 800f8de:	4658      	mov	r0, fp
 800f8e0:	f000 f906 	bl	800faf0 <__multadd>
 800f8e4:	4605      	mov	r5, r0
 800f8e6:	e7f0      	b.n	800f8ca <_dtoa_r+0xaba>
 800f8e8:	9b00      	ldr	r3, [sp, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	bfcc      	ite	gt
 800f8ee:	461e      	movgt	r6, r3
 800f8f0:	2601      	movle	r6, #1
 800f8f2:	4456      	add	r6, sl
 800f8f4:	2700      	movs	r7, #0
 800f8f6:	4649      	mov	r1, r9
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	4658      	mov	r0, fp
 800f8fc:	f000 faee 	bl	800fedc <__lshift>
 800f900:	4621      	mov	r1, r4
 800f902:	4681      	mov	r9, r0
 800f904:	f000 fb56 	bl	800ffb4 <__mcmp>
 800f908:	2800      	cmp	r0, #0
 800f90a:	dcb0      	bgt.n	800f86e <_dtoa_r+0xa5e>
 800f90c:	d102      	bne.n	800f914 <_dtoa_r+0xb04>
 800f90e:	f018 0f01 	tst.w	r8, #1
 800f912:	d1ac      	bne.n	800f86e <_dtoa_r+0xa5e>
 800f914:	4633      	mov	r3, r6
 800f916:	461e      	mov	r6, r3
 800f918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f91c:	2a30      	cmp	r2, #48	@ 0x30
 800f91e:	d0fa      	beq.n	800f916 <_dtoa_r+0xb06>
 800f920:	e5c2      	b.n	800f4a8 <_dtoa_r+0x698>
 800f922:	459a      	cmp	sl, r3
 800f924:	d1a4      	bne.n	800f870 <_dtoa_r+0xa60>
 800f926:	9b04      	ldr	r3, [sp, #16]
 800f928:	3301      	adds	r3, #1
 800f92a:	9304      	str	r3, [sp, #16]
 800f92c:	2331      	movs	r3, #49	@ 0x31
 800f92e:	f88a 3000 	strb.w	r3, [sl]
 800f932:	e5b9      	b.n	800f4a8 <_dtoa_r+0x698>
 800f934:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f936:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f994 <_dtoa_r+0xb84>
 800f93a:	b11b      	cbz	r3, 800f944 <_dtoa_r+0xb34>
 800f93c:	f10a 0308 	add.w	r3, sl, #8
 800f940:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f942:	6013      	str	r3, [r2, #0]
 800f944:	4650      	mov	r0, sl
 800f946:	b019      	add	sp, #100	@ 0x64
 800f948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f94e:	2b01      	cmp	r3, #1
 800f950:	f77f ae37 	ble.w	800f5c2 <_dtoa_r+0x7b2>
 800f954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f956:	930a      	str	r3, [sp, #40]	@ 0x28
 800f958:	2001      	movs	r0, #1
 800f95a:	e655      	b.n	800f608 <_dtoa_r+0x7f8>
 800f95c:	9b00      	ldr	r3, [sp, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	f77f aed6 	ble.w	800f710 <_dtoa_r+0x900>
 800f964:	4656      	mov	r6, sl
 800f966:	4621      	mov	r1, r4
 800f968:	4648      	mov	r0, r9
 800f96a:	f7ff f9c7 	bl	800ecfc <quorem>
 800f96e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f972:	f806 8b01 	strb.w	r8, [r6], #1
 800f976:	9b00      	ldr	r3, [sp, #0]
 800f978:	eba6 020a 	sub.w	r2, r6, sl
 800f97c:	4293      	cmp	r3, r2
 800f97e:	ddb3      	ble.n	800f8e8 <_dtoa_r+0xad8>
 800f980:	4649      	mov	r1, r9
 800f982:	2300      	movs	r3, #0
 800f984:	220a      	movs	r2, #10
 800f986:	4658      	mov	r0, fp
 800f988:	f000 f8b2 	bl	800faf0 <__multadd>
 800f98c:	4681      	mov	r9, r0
 800f98e:	e7ea      	b.n	800f966 <_dtoa_r+0xb56>
 800f990:	08013301 	.word	0x08013301
 800f994:	08013285 	.word	0x08013285

0800f998 <_free_r>:
 800f998:	b538      	push	{r3, r4, r5, lr}
 800f99a:	4605      	mov	r5, r0
 800f99c:	2900      	cmp	r1, #0
 800f99e:	d041      	beq.n	800fa24 <_free_r+0x8c>
 800f9a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9a4:	1f0c      	subs	r4, r1, #4
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	bfb8      	it	lt
 800f9aa:	18e4      	addlt	r4, r4, r3
 800f9ac:	f7fe f8e2 	bl	800db74 <__malloc_lock>
 800f9b0:	4a1d      	ldr	r2, [pc, #116]	@ (800fa28 <_free_r+0x90>)
 800f9b2:	6813      	ldr	r3, [r2, #0]
 800f9b4:	b933      	cbnz	r3, 800f9c4 <_free_r+0x2c>
 800f9b6:	6063      	str	r3, [r4, #4]
 800f9b8:	6014      	str	r4, [r2, #0]
 800f9ba:	4628      	mov	r0, r5
 800f9bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9c0:	f7fe b8de 	b.w	800db80 <__malloc_unlock>
 800f9c4:	42a3      	cmp	r3, r4
 800f9c6:	d908      	bls.n	800f9da <_free_r+0x42>
 800f9c8:	6820      	ldr	r0, [r4, #0]
 800f9ca:	1821      	adds	r1, r4, r0
 800f9cc:	428b      	cmp	r3, r1
 800f9ce:	bf01      	itttt	eq
 800f9d0:	6819      	ldreq	r1, [r3, #0]
 800f9d2:	685b      	ldreq	r3, [r3, #4]
 800f9d4:	1809      	addeq	r1, r1, r0
 800f9d6:	6021      	streq	r1, [r4, #0]
 800f9d8:	e7ed      	b.n	800f9b6 <_free_r+0x1e>
 800f9da:	461a      	mov	r2, r3
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	b10b      	cbz	r3, 800f9e4 <_free_r+0x4c>
 800f9e0:	42a3      	cmp	r3, r4
 800f9e2:	d9fa      	bls.n	800f9da <_free_r+0x42>
 800f9e4:	6811      	ldr	r1, [r2, #0]
 800f9e6:	1850      	adds	r0, r2, r1
 800f9e8:	42a0      	cmp	r0, r4
 800f9ea:	d10b      	bne.n	800fa04 <_free_r+0x6c>
 800f9ec:	6820      	ldr	r0, [r4, #0]
 800f9ee:	4401      	add	r1, r0
 800f9f0:	1850      	adds	r0, r2, r1
 800f9f2:	4283      	cmp	r3, r0
 800f9f4:	6011      	str	r1, [r2, #0]
 800f9f6:	d1e0      	bne.n	800f9ba <_free_r+0x22>
 800f9f8:	6818      	ldr	r0, [r3, #0]
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	6053      	str	r3, [r2, #4]
 800f9fe:	4408      	add	r0, r1
 800fa00:	6010      	str	r0, [r2, #0]
 800fa02:	e7da      	b.n	800f9ba <_free_r+0x22>
 800fa04:	d902      	bls.n	800fa0c <_free_r+0x74>
 800fa06:	230c      	movs	r3, #12
 800fa08:	602b      	str	r3, [r5, #0]
 800fa0a:	e7d6      	b.n	800f9ba <_free_r+0x22>
 800fa0c:	6820      	ldr	r0, [r4, #0]
 800fa0e:	1821      	adds	r1, r4, r0
 800fa10:	428b      	cmp	r3, r1
 800fa12:	bf04      	itt	eq
 800fa14:	6819      	ldreq	r1, [r3, #0]
 800fa16:	685b      	ldreq	r3, [r3, #4]
 800fa18:	6063      	str	r3, [r4, #4]
 800fa1a:	bf04      	itt	eq
 800fa1c:	1809      	addeq	r1, r1, r0
 800fa1e:	6021      	streq	r1, [r4, #0]
 800fa20:	6054      	str	r4, [r2, #4]
 800fa22:	e7ca      	b.n	800f9ba <_free_r+0x22>
 800fa24:	bd38      	pop	{r3, r4, r5, pc}
 800fa26:	bf00      	nop
 800fa28:	200005cc 	.word	0x200005cc

0800fa2c <_Balloc>:
 800fa2c:	b570      	push	{r4, r5, r6, lr}
 800fa2e:	69c6      	ldr	r6, [r0, #28]
 800fa30:	4604      	mov	r4, r0
 800fa32:	460d      	mov	r5, r1
 800fa34:	b976      	cbnz	r6, 800fa54 <_Balloc+0x28>
 800fa36:	2010      	movs	r0, #16
 800fa38:	f7fd ffea 	bl	800da10 <malloc>
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	61e0      	str	r0, [r4, #28]
 800fa40:	b920      	cbnz	r0, 800fa4c <_Balloc+0x20>
 800fa42:	4b18      	ldr	r3, [pc, #96]	@ (800faa4 <_Balloc+0x78>)
 800fa44:	4818      	ldr	r0, [pc, #96]	@ (800faa8 <_Balloc+0x7c>)
 800fa46:	216b      	movs	r1, #107	@ 0x6b
 800fa48:	f7fd ffb2 	bl	800d9b0 <__assert_func>
 800fa4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa50:	6006      	str	r6, [r0, #0]
 800fa52:	60c6      	str	r6, [r0, #12]
 800fa54:	69e6      	ldr	r6, [r4, #28]
 800fa56:	68f3      	ldr	r3, [r6, #12]
 800fa58:	b183      	cbz	r3, 800fa7c <_Balloc+0x50>
 800fa5a:	69e3      	ldr	r3, [r4, #28]
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fa62:	b9b8      	cbnz	r0, 800fa94 <_Balloc+0x68>
 800fa64:	2101      	movs	r1, #1
 800fa66:	fa01 f605 	lsl.w	r6, r1, r5
 800fa6a:	1d72      	adds	r2, r6, #5
 800fa6c:	0092      	lsls	r2, r2, #2
 800fa6e:	4620      	mov	r0, r4
 800fa70:	f001 ff0a 	bl	8011888 <_calloc_r>
 800fa74:	b160      	cbz	r0, 800fa90 <_Balloc+0x64>
 800fa76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fa7a:	e00e      	b.n	800fa9a <_Balloc+0x6e>
 800fa7c:	2221      	movs	r2, #33	@ 0x21
 800fa7e:	2104      	movs	r1, #4
 800fa80:	4620      	mov	r0, r4
 800fa82:	f001 ff01 	bl	8011888 <_calloc_r>
 800fa86:	69e3      	ldr	r3, [r4, #28]
 800fa88:	60f0      	str	r0, [r6, #12]
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d1e4      	bne.n	800fa5a <_Balloc+0x2e>
 800fa90:	2000      	movs	r0, #0
 800fa92:	bd70      	pop	{r4, r5, r6, pc}
 800fa94:	6802      	ldr	r2, [r0, #0]
 800fa96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800faa0:	e7f7      	b.n	800fa92 <_Balloc+0x66>
 800faa2:	bf00      	nop
 800faa4:	08013292 	.word	0x08013292
 800faa8:	08013312 	.word	0x08013312

0800faac <_Bfree>:
 800faac:	b570      	push	{r4, r5, r6, lr}
 800faae:	69c6      	ldr	r6, [r0, #28]
 800fab0:	4605      	mov	r5, r0
 800fab2:	460c      	mov	r4, r1
 800fab4:	b976      	cbnz	r6, 800fad4 <_Bfree+0x28>
 800fab6:	2010      	movs	r0, #16
 800fab8:	f7fd ffaa 	bl	800da10 <malloc>
 800fabc:	4602      	mov	r2, r0
 800fabe:	61e8      	str	r0, [r5, #28]
 800fac0:	b920      	cbnz	r0, 800facc <_Bfree+0x20>
 800fac2:	4b09      	ldr	r3, [pc, #36]	@ (800fae8 <_Bfree+0x3c>)
 800fac4:	4809      	ldr	r0, [pc, #36]	@ (800faec <_Bfree+0x40>)
 800fac6:	218f      	movs	r1, #143	@ 0x8f
 800fac8:	f7fd ff72 	bl	800d9b0 <__assert_func>
 800facc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fad0:	6006      	str	r6, [r0, #0]
 800fad2:	60c6      	str	r6, [r0, #12]
 800fad4:	b13c      	cbz	r4, 800fae6 <_Bfree+0x3a>
 800fad6:	69eb      	ldr	r3, [r5, #28]
 800fad8:	6862      	ldr	r2, [r4, #4]
 800fada:	68db      	ldr	r3, [r3, #12]
 800fadc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fae0:	6021      	str	r1, [r4, #0]
 800fae2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fae6:	bd70      	pop	{r4, r5, r6, pc}
 800fae8:	08013292 	.word	0x08013292
 800faec:	08013312 	.word	0x08013312

0800faf0 <__multadd>:
 800faf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faf4:	690d      	ldr	r5, [r1, #16]
 800faf6:	4607      	mov	r7, r0
 800faf8:	460c      	mov	r4, r1
 800fafa:	461e      	mov	r6, r3
 800fafc:	f101 0c14 	add.w	ip, r1, #20
 800fb00:	2000      	movs	r0, #0
 800fb02:	f8dc 3000 	ldr.w	r3, [ip]
 800fb06:	b299      	uxth	r1, r3
 800fb08:	fb02 6101 	mla	r1, r2, r1, r6
 800fb0c:	0c1e      	lsrs	r6, r3, #16
 800fb0e:	0c0b      	lsrs	r3, r1, #16
 800fb10:	fb02 3306 	mla	r3, r2, r6, r3
 800fb14:	b289      	uxth	r1, r1
 800fb16:	3001      	adds	r0, #1
 800fb18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fb1c:	4285      	cmp	r5, r0
 800fb1e:	f84c 1b04 	str.w	r1, [ip], #4
 800fb22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fb26:	dcec      	bgt.n	800fb02 <__multadd+0x12>
 800fb28:	b30e      	cbz	r6, 800fb6e <__multadd+0x7e>
 800fb2a:	68a3      	ldr	r3, [r4, #8]
 800fb2c:	42ab      	cmp	r3, r5
 800fb2e:	dc19      	bgt.n	800fb64 <__multadd+0x74>
 800fb30:	6861      	ldr	r1, [r4, #4]
 800fb32:	4638      	mov	r0, r7
 800fb34:	3101      	adds	r1, #1
 800fb36:	f7ff ff79 	bl	800fa2c <_Balloc>
 800fb3a:	4680      	mov	r8, r0
 800fb3c:	b928      	cbnz	r0, 800fb4a <__multadd+0x5a>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	4b0c      	ldr	r3, [pc, #48]	@ (800fb74 <__multadd+0x84>)
 800fb42:	480d      	ldr	r0, [pc, #52]	@ (800fb78 <__multadd+0x88>)
 800fb44:	21ba      	movs	r1, #186	@ 0xba
 800fb46:	f7fd ff33 	bl	800d9b0 <__assert_func>
 800fb4a:	6922      	ldr	r2, [r4, #16]
 800fb4c:	3202      	adds	r2, #2
 800fb4e:	f104 010c 	add.w	r1, r4, #12
 800fb52:	0092      	lsls	r2, r2, #2
 800fb54:	300c      	adds	r0, #12
 800fb56:	f7ff f8bc 	bl	800ecd2 <memcpy>
 800fb5a:	4621      	mov	r1, r4
 800fb5c:	4638      	mov	r0, r7
 800fb5e:	f7ff ffa5 	bl	800faac <_Bfree>
 800fb62:	4644      	mov	r4, r8
 800fb64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fb68:	3501      	adds	r5, #1
 800fb6a:	615e      	str	r6, [r3, #20]
 800fb6c:	6125      	str	r5, [r4, #16]
 800fb6e:	4620      	mov	r0, r4
 800fb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb74:	08013301 	.word	0x08013301
 800fb78:	08013312 	.word	0x08013312

0800fb7c <__s2b>:
 800fb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb80:	460c      	mov	r4, r1
 800fb82:	4615      	mov	r5, r2
 800fb84:	461f      	mov	r7, r3
 800fb86:	2209      	movs	r2, #9
 800fb88:	3308      	adds	r3, #8
 800fb8a:	4606      	mov	r6, r0
 800fb8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb90:	2100      	movs	r1, #0
 800fb92:	2201      	movs	r2, #1
 800fb94:	429a      	cmp	r2, r3
 800fb96:	db09      	blt.n	800fbac <__s2b+0x30>
 800fb98:	4630      	mov	r0, r6
 800fb9a:	f7ff ff47 	bl	800fa2c <_Balloc>
 800fb9e:	b940      	cbnz	r0, 800fbb2 <__s2b+0x36>
 800fba0:	4602      	mov	r2, r0
 800fba2:	4b19      	ldr	r3, [pc, #100]	@ (800fc08 <__s2b+0x8c>)
 800fba4:	4819      	ldr	r0, [pc, #100]	@ (800fc0c <__s2b+0x90>)
 800fba6:	21d3      	movs	r1, #211	@ 0xd3
 800fba8:	f7fd ff02 	bl	800d9b0 <__assert_func>
 800fbac:	0052      	lsls	r2, r2, #1
 800fbae:	3101      	adds	r1, #1
 800fbb0:	e7f0      	b.n	800fb94 <__s2b+0x18>
 800fbb2:	9b08      	ldr	r3, [sp, #32]
 800fbb4:	6143      	str	r3, [r0, #20]
 800fbb6:	2d09      	cmp	r5, #9
 800fbb8:	f04f 0301 	mov.w	r3, #1
 800fbbc:	6103      	str	r3, [r0, #16]
 800fbbe:	dd16      	ble.n	800fbee <__s2b+0x72>
 800fbc0:	f104 0909 	add.w	r9, r4, #9
 800fbc4:	46c8      	mov	r8, r9
 800fbc6:	442c      	add	r4, r5
 800fbc8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fbcc:	4601      	mov	r1, r0
 800fbce:	3b30      	subs	r3, #48	@ 0x30
 800fbd0:	220a      	movs	r2, #10
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	f7ff ff8c 	bl	800faf0 <__multadd>
 800fbd8:	45a0      	cmp	r8, r4
 800fbda:	d1f5      	bne.n	800fbc8 <__s2b+0x4c>
 800fbdc:	f1a5 0408 	sub.w	r4, r5, #8
 800fbe0:	444c      	add	r4, r9
 800fbe2:	1b2d      	subs	r5, r5, r4
 800fbe4:	1963      	adds	r3, r4, r5
 800fbe6:	42bb      	cmp	r3, r7
 800fbe8:	db04      	blt.n	800fbf4 <__s2b+0x78>
 800fbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbee:	340a      	adds	r4, #10
 800fbf0:	2509      	movs	r5, #9
 800fbf2:	e7f6      	b.n	800fbe2 <__s2b+0x66>
 800fbf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fbf8:	4601      	mov	r1, r0
 800fbfa:	3b30      	subs	r3, #48	@ 0x30
 800fbfc:	220a      	movs	r2, #10
 800fbfe:	4630      	mov	r0, r6
 800fc00:	f7ff ff76 	bl	800faf0 <__multadd>
 800fc04:	e7ee      	b.n	800fbe4 <__s2b+0x68>
 800fc06:	bf00      	nop
 800fc08:	08013301 	.word	0x08013301
 800fc0c:	08013312 	.word	0x08013312

0800fc10 <__hi0bits>:
 800fc10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fc14:	4603      	mov	r3, r0
 800fc16:	bf36      	itet	cc
 800fc18:	0403      	lslcc	r3, r0, #16
 800fc1a:	2000      	movcs	r0, #0
 800fc1c:	2010      	movcc	r0, #16
 800fc1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc22:	bf3c      	itt	cc
 800fc24:	021b      	lslcc	r3, r3, #8
 800fc26:	3008      	addcc	r0, #8
 800fc28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc2c:	bf3c      	itt	cc
 800fc2e:	011b      	lslcc	r3, r3, #4
 800fc30:	3004      	addcc	r0, #4
 800fc32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc36:	bf3c      	itt	cc
 800fc38:	009b      	lslcc	r3, r3, #2
 800fc3a:	3002      	addcc	r0, #2
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	db05      	blt.n	800fc4c <__hi0bits+0x3c>
 800fc40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fc44:	f100 0001 	add.w	r0, r0, #1
 800fc48:	bf08      	it	eq
 800fc4a:	2020      	moveq	r0, #32
 800fc4c:	4770      	bx	lr

0800fc4e <__lo0bits>:
 800fc4e:	6803      	ldr	r3, [r0, #0]
 800fc50:	4602      	mov	r2, r0
 800fc52:	f013 0007 	ands.w	r0, r3, #7
 800fc56:	d00b      	beq.n	800fc70 <__lo0bits+0x22>
 800fc58:	07d9      	lsls	r1, r3, #31
 800fc5a:	d421      	bmi.n	800fca0 <__lo0bits+0x52>
 800fc5c:	0798      	lsls	r0, r3, #30
 800fc5e:	bf49      	itett	mi
 800fc60:	085b      	lsrmi	r3, r3, #1
 800fc62:	089b      	lsrpl	r3, r3, #2
 800fc64:	2001      	movmi	r0, #1
 800fc66:	6013      	strmi	r3, [r2, #0]
 800fc68:	bf5c      	itt	pl
 800fc6a:	6013      	strpl	r3, [r2, #0]
 800fc6c:	2002      	movpl	r0, #2
 800fc6e:	4770      	bx	lr
 800fc70:	b299      	uxth	r1, r3
 800fc72:	b909      	cbnz	r1, 800fc78 <__lo0bits+0x2a>
 800fc74:	0c1b      	lsrs	r3, r3, #16
 800fc76:	2010      	movs	r0, #16
 800fc78:	b2d9      	uxtb	r1, r3
 800fc7a:	b909      	cbnz	r1, 800fc80 <__lo0bits+0x32>
 800fc7c:	3008      	adds	r0, #8
 800fc7e:	0a1b      	lsrs	r3, r3, #8
 800fc80:	0719      	lsls	r1, r3, #28
 800fc82:	bf04      	itt	eq
 800fc84:	091b      	lsreq	r3, r3, #4
 800fc86:	3004      	addeq	r0, #4
 800fc88:	0799      	lsls	r1, r3, #30
 800fc8a:	bf04      	itt	eq
 800fc8c:	089b      	lsreq	r3, r3, #2
 800fc8e:	3002      	addeq	r0, #2
 800fc90:	07d9      	lsls	r1, r3, #31
 800fc92:	d403      	bmi.n	800fc9c <__lo0bits+0x4e>
 800fc94:	085b      	lsrs	r3, r3, #1
 800fc96:	f100 0001 	add.w	r0, r0, #1
 800fc9a:	d003      	beq.n	800fca4 <__lo0bits+0x56>
 800fc9c:	6013      	str	r3, [r2, #0]
 800fc9e:	4770      	bx	lr
 800fca0:	2000      	movs	r0, #0
 800fca2:	4770      	bx	lr
 800fca4:	2020      	movs	r0, #32
 800fca6:	4770      	bx	lr

0800fca8 <__i2b>:
 800fca8:	b510      	push	{r4, lr}
 800fcaa:	460c      	mov	r4, r1
 800fcac:	2101      	movs	r1, #1
 800fcae:	f7ff febd 	bl	800fa2c <_Balloc>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	b928      	cbnz	r0, 800fcc2 <__i2b+0x1a>
 800fcb6:	4b05      	ldr	r3, [pc, #20]	@ (800fccc <__i2b+0x24>)
 800fcb8:	4805      	ldr	r0, [pc, #20]	@ (800fcd0 <__i2b+0x28>)
 800fcba:	f240 1145 	movw	r1, #325	@ 0x145
 800fcbe:	f7fd fe77 	bl	800d9b0 <__assert_func>
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	6144      	str	r4, [r0, #20]
 800fcc6:	6103      	str	r3, [r0, #16]
 800fcc8:	bd10      	pop	{r4, pc}
 800fcca:	bf00      	nop
 800fccc:	08013301 	.word	0x08013301
 800fcd0:	08013312 	.word	0x08013312

0800fcd4 <__multiply>:
 800fcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd8:	4614      	mov	r4, r2
 800fcda:	690a      	ldr	r2, [r1, #16]
 800fcdc:	6923      	ldr	r3, [r4, #16]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	bfa8      	it	ge
 800fce2:	4623      	movge	r3, r4
 800fce4:	460f      	mov	r7, r1
 800fce6:	bfa4      	itt	ge
 800fce8:	460c      	movge	r4, r1
 800fcea:	461f      	movge	r7, r3
 800fcec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fcf0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fcf4:	68a3      	ldr	r3, [r4, #8]
 800fcf6:	6861      	ldr	r1, [r4, #4]
 800fcf8:	eb0a 0609 	add.w	r6, sl, r9
 800fcfc:	42b3      	cmp	r3, r6
 800fcfe:	b085      	sub	sp, #20
 800fd00:	bfb8      	it	lt
 800fd02:	3101      	addlt	r1, #1
 800fd04:	f7ff fe92 	bl	800fa2c <_Balloc>
 800fd08:	b930      	cbnz	r0, 800fd18 <__multiply+0x44>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	4b44      	ldr	r3, [pc, #272]	@ (800fe20 <__multiply+0x14c>)
 800fd0e:	4845      	ldr	r0, [pc, #276]	@ (800fe24 <__multiply+0x150>)
 800fd10:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fd14:	f7fd fe4c 	bl	800d9b0 <__assert_func>
 800fd18:	f100 0514 	add.w	r5, r0, #20
 800fd1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fd20:	462b      	mov	r3, r5
 800fd22:	2200      	movs	r2, #0
 800fd24:	4543      	cmp	r3, r8
 800fd26:	d321      	bcc.n	800fd6c <__multiply+0x98>
 800fd28:	f107 0114 	add.w	r1, r7, #20
 800fd2c:	f104 0214 	add.w	r2, r4, #20
 800fd30:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fd34:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fd38:	9302      	str	r3, [sp, #8]
 800fd3a:	1b13      	subs	r3, r2, r4
 800fd3c:	3b15      	subs	r3, #21
 800fd3e:	f023 0303 	bic.w	r3, r3, #3
 800fd42:	3304      	adds	r3, #4
 800fd44:	f104 0715 	add.w	r7, r4, #21
 800fd48:	42ba      	cmp	r2, r7
 800fd4a:	bf38      	it	cc
 800fd4c:	2304      	movcc	r3, #4
 800fd4e:	9301      	str	r3, [sp, #4]
 800fd50:	9b02      	ldr	r3, [sp, #8]
 800fd52:	9103      	str	r1, [sp, #12]
 800fd54:	428b      	cmp	r3, r1
 800fd56:	d80c      	bhi.n	800fd72 <__multiply+0x9e>
 800fd58:	2e00      	cmp	r6, #0
 800fd5a:	dd03      	ble.n	800fd64 <__multiply+0x90>
 800fd5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d05b      	beq.n	800fe1c <__multiply+0x148>
 800fd64:	6106      	str	r6, [r0, #16]
 800fd66:	b005      	add	sp, #20
 800fd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd6c:	f843 2b04 	str.w	r2, [r3], #4
 800fd70:	e7d8      	b.n	800fd24 <__multiply+0x50>
 800fd72:	f8b1 a000 	ldrh.w	sl, [r1]
 800fd76:	f1ba 0f00 	cmp.w	sl, #0
 800fd7a:	d024      	beq.n	800fdc6 <__multiply+0xf2>
 800fd7c:	f104 0e14 	add.w	lr, r4, #20
 800fd80:	46a9      	mov	r9, r5
 800fd82:	f04f 0c00 	mov.w	ip, #0
 800fd86:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fd8a:	f8d9 3000 	ldr.w	r3, [r9]
 800fd8e:	fa1f fb87 	uxth.w	fp, r7
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	fb0a 330b 	mla	r3, sl, fp, r3
 800fd98:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fd9c:	f8d9 7000 	ldr.w	r7, [r9]
 800fda0:	4463      	add	r3, ip
 800fda2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fda6:	fb0a c70b 	mla	r7, sl, fp, ip
 800fdaa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fdb4:	4572      	cmp	r2, lr
 800fdb6:	f849 3b04 	str.w	r3, [r9], #4
 800fdba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fdbe:	d8e2      	bhi.n	800fd86 <__multiply+0xb2>
 800fdc0:	9b01      	ldr	r3, [sp, #4]
 800fdc2:	f845 c003 	str.w	ip, [r5, r3]
 800fdc6:	9b03      	ldr	r3, [sp, #12]
 800fdc8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fdcc:	3104      	adds	r1, #4
 800fdce:	f1b9 0f00 	cmp.w	r9, #0
 800fdd2:	d021      	beq.n	800fe18 <__multiply+0x144>
 800fdd4:	682b      	ldr	r3, [r5, #0]
 800fdd6:	f104 0c14 	add.w	ip, r4, #20
 800fdda:	46ae      	mov	lr, r5
 800fddc:	f04f 0a00 	mov.w	sl, #0
 800fde0:	f8bc b000 	ldrh.w	fp, [ip]
 800fde4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fde8:	fb09 770b 	mla	r7, r9, fp, r7
 800fdec:	4457      	add	r7, sl
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fdf4:	f84e 3b04 	str.w	r3, [lr], #4
 800fdf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fdfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe00:	f8be 3000 	ldrh.w	r3, [lr]
 800fe04:	fb09 330a 	mla	r3, r9, sl, r3
 800fe08:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fe0c:	4562      	cmp	r2, ip
 800fe0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe12:	d8e5      	bhi.n	800fde0 <__multiply+0x10c>
 800fe14:	9f01      	ldr	r7, [sp, #4]
 800fe16:	51eb      	str	r3, [r5, r7]
 800fe18:	3504      	adds	r5, #4
 800fe1a:	e799      	b.n	800fd50 <__multiply+0x7c>
 800fe1c:	3e01      	subs	r6, #1
 800fe1e:	e79b      	b.n	800fd58 <__multiply+0x84>
 800fe20:	08013301 	.word	0x08013301
 800fe24:	08013312 	.word	0x08013312

0800fe28 <__pow5mult>:
 800fe28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe2c:	4615      	mov	r5, r2
 800fe2e:	f012 0203 	ands.w	r2, r2, #3
 800fe32:	4607      	mov	r7, r0
 800fe34:	460e      	mov	r6, r1
 800fe36:	d007      	beq.n	800fe48 <__pow5mult+0x20>
 800fe38:	4c25      	ldr	r4, [pc, #148]	@ (800fed0 <__pow5mult+0xa8>)
 800fe3a:	3a01      	subs	r2, #1
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fe42:	f7ff fe55 	bl	800faf0 <__multadd>
 800fe46:	4606      	mov	r6, r0
 800fe48:	10ad      	asrs	r5, r5, #2
 800fe4a:	d03d      	beq.n	800fec8 <__pow5mult+0xa0>
 800fe4c:	69fc      	ldr	r4, [r7, #28]
 800fe4e:	b97c      	cbnz	r4, 800fe70 <__pow5mult+0x48>
 800fe50:	2010      	movs	r0, #16
 800fe52:	f7fd fddd 	bl	800da10 <malloc>
 800fe56:	4602      	mov	r2, r0
 800fe58:	61f8      	str	r0, [r7, #28]
 800fe5a:	b928      	cbnz	r0, 800fe68 <__pow5mult+0x40>
 800fe5c:	4b1d      	ldr	r3, [pc, #116]	@ (800fed4 <__pow5mult+0xac>)
 800fe5e:	481e      	ldr	r0, [pc, #120]	@ (800fed8 <__pow5mult+0xb0>)
 800fe60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fe64:	f7fd fda4 	bl	800d9b0 <__assert_func>
 800fe68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fe6c:	6004      	str	r4, [r0, #0]
 800fe6e:	60c4      	str	r4, [r0, #12]
 800fe70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fe74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fe78:	b94c      	cbnz	r4, 800fe8e <__pow5mult+0x66>
 800fe7a:	f240 2171 	movw	r1, #625	@ 0x271
 800fe7e:	4638      	mov	r0, r7
 800fe80:	f7ff ff12 	bl	800fca8 <__i2b>
 800fe84:	2300      	movs	r3, #0
 800fe86:	f8c8 0008 	str.w	r0, [r8, #8]
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	6003      	str	r3, [r0, #0]
 800fe8e:	f04f 0900 	mov.w	r9, #0
 800fe92:	07eb      	lsls	r3, r5, #31
 800fe94:	d50a      	bpl.n	800feac <__pow5mult+0x84>
 800fe96:	4631      	mov	r1, r6
 800fe98:	4622      	mov	r2, r4
 800fe9a:	4638      	mov	r0, r7
 800fe9c:	f7ff ff1a 	bl	800fcd4 <__multiply>
 800fea0:	4631      	mov	r1, r6
 800fea2:	4680      	mov	r8, r0
 800fea4:	4638      	mov	r0, r7
 800fea6:	f7ff fe01 	bl	800faac <_Bfree>
 800feaa:	4646      	mov	r6, r8
 800feac:	106d      	asrs	r5, r5, #1
 800feae:	d00b      	beq.n	800fec8 <__pow5mult+0xa0>
 800feb0:	6820      	ldr	r0, [r4, #0]
 800feb2:	b938      	cbnz	r0, 800fec4 <__pow5mult+0x9c>
 800feb4:	4622      	mov	r2, r4
 800feb6:	4621      	mov	r1, r4
 800feb8:	4638      	mov	r0, r7
 800feba:	f7ff ff0b 	bl	800fcd4 <__multiply>
 800febe:	6020      	str	r0, [r4, #0]
 800fec0:	f8c0 9000 	str.w	r9, [r0]
 800fec4:	4604      	mov	r4, r0
 800fec6:	e7e4      	b.n	800fe92 <__pow5mult+0x6a>
 800fec8:	4630      	mov	r0, r6
 800feca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fece:	bf00      	nop
 800fed0:	0801336c 	.word	0x0801336c
 800fed4:	08013292 	.word	0x08013292
 800fed8:	08013312 	.word	0x08013312

0800fedc <__lshift>:
 800fedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fee0:	460c      	mov	r4, r1
 800fee2:	6849      	ldr	r1, [r1, #4]
 800fee4:	6923      	ldr	r3, [r4, #16]
 800fee6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800feea:	68a3      	ldr	r3, [r4, #8]
 800feec:	4607      	mov	r7, r0
 800feee:	4691      	mov	r9, r2
 800fef0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fef4:	f108 0601 	add.w	r6, r8, #1
 800fef8:	42b3      	cmp	r3, r6
 800fefa:	db0b      	blt.n	800ff14 <__lshift+0x38>
 800fefc:	4638      	mov	r0, r7
 800fefe:	f7ff fd95 	bl	800fa2c <_Balloc>
 800ff02:	4605      	mov	r5, r0
 800ff04:	b948      	cbnz	r0, 800ff1a <__lshift+0x3e>
 800ff06:	4602      	mov	r2, r0
 800ff08:	4b28      	ldr	r3, [pc, #160]	@ (800ffac <__lshift+0xd0>)
 800ff0a:	4829      	ldr	r0, [pc, #164]	@ (800ffb0 <__lshift+0xd4>)
 800ff0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ff10:	f7fd fd4e 	bl	800d9b0 <__assert_func>
 800ff14:	3101      	adds	r1, #1
 800ff16:	005b      	lsls	r3, r3, #1
 800ff18:	e7ee      	b.n	800fef8 <__lshift+0x1c>
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	f100 0114 	add.w	r1, r0, #20
 800ff20:	f100 0210 	add.w	r2, r0, #16
 800ff24:	4618      	mov	r0, r3
 800ff26:	4553      	cmp	r3, sl
 800ff28:	db33      	blt.n	800ff92 <__lshift+0xb6>
 800ff2a:	6920      	ldr	r0, [r4, #16]
 800ff2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff30:	f104 0314 	add.w	r3, r4, #20
 800ff34:	f019 091f 	ands.w	r9, r9, #31
 800ff38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ff40:	d02b      	beq.n	800ff9a <__lshift+0xbe>
 800ff42:	f1c9 0e20 	rsb	lr, r9, #32
 800ff46:	468a      	mov	sl, r1
 800ff48:	2200      	movs	r2, #0
 800ff4a:	6818      	ldr	r0, [r3, #0]
 800ff4c:	fa00 f009 	lsl.w	r0, r0, r9
 800ff50:	4310      	orrs	r0, r2
 800ff52:	f84a 0b04 	str.w	r0, [sl], #4
 800ff56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff5a:	459c      	cmp	ip, r3
 800ff5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ff60:	d8f3      	bhi.n	800ff4a <__lshift+0x6e>
 800ff62:	ebac 0304 	sub.w	r3, ip, r4
 800ff66:	3b15      	subs	r3, #21
 800ff68:	f023 0303 	bic.w	r3, r3, #3
 800ff6c:	3304      	adds	r3, #4
 800ff6e:	f104 0015 	add.w	r0, r4, #21
 800ff72:	4584      	cmp	ip, r0
 800ff74:	bf38      	it	cc
 800ff76:	2304      	movcc	r3, #4
 800ff78:	50ca      	str	r2, [r1, r3]
 800ff7a:	b10a      	cbz	r2, 800ff80 <__lshift+0xa4>
 800ff7c:	f108 0602 	add.w	r6, r8, #2
 800ff80:	3e01      	subs	r6, #1
 800ff82:	4638      	mov	r0, r7
 800ff84:	612e      	str	r6, [r5, #16]
 800ff86:	4621      	mov	r1, r4
 800ff88:	f7ff fd90 	bl	800faac <_Bfree>
 800ff8c:	4628      	mov	r0, r5
 800ff8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff92:	f842 0f04 	str.w	r0, [r2, #4]!
 800ff96:	3301      	adds	r3, #1
 800ff98:	e7c5      	b.n	800ff26 <__lshift+0x4a>
 800ff9a:	3904      	subs	r1, #4
 800ff9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffa0:	f841 2f04 	str.w	r2, [r1, #4]!
 800ffa4:	459c      	cmp	ip, r3
 800ffa6:	d8f9      	bhi.n	800ff9c <__lshift+0xc0>
 800ffa8:	e7ea      	b.n	800ff80 <__lshift+0xa4>
 800ffaa:	bf00      	nop
 800ffac:	08013301 	.word	0x08013301
 800ffb0:	08013312 	.word	0x08013312

0800ffb4 <__mcmp>:
 800ffb4:	690a      	ldr	r2, [r1, #16]
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	6900      	ldr	r0, [r0, #16]
 800ffba:	1a80      	subs	r0, r0, r2
 800ffbc:	b530      	push	{r4, r5, lr}
 800ffbe:	d10e      	bne.n	800ffde <__mcmp+0x2a>
 800ffc0:	3314      	adds	r3, #20
 800ffc2:	3114      	adds	r1, #20
 800ffc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ffc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ffcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ffd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ffd4:	4295      	cmp	r5, r2
 800ffd6:	d003      	beq.n	800ffe0 <__mcmp+0x2c>
 800ffd8:	d205      	bcs.n	800ffe6 <__mcmp+0x32>
 800ffda:	f04f 30ff 	mov.w	r0, #4294967295
 800ffde:	bd30      	pop	{r4, r5, pc}
 800ffe0:	42a3      	cmp	r3, r4
 800ffe2:	d3f3      	bcc.n	800ffcc <__mcmp+0x18>
 800ffe4:	e7fb      	b.n	800ffde <__mcmp+0x2a>
 800ffe6:	2001      	movs	r0, #1
 800ffe8:	e7f9      	b.n	800ffde <__mcmp+0x2a>
	...

0800ffec <__mdiff>:
 800ffec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fff0:	4689      	mov	r9, r1
 800fff2:	4606      	mov	r6, r0
 800fff4:	4611      	mov	r1, r2
 800fff6:	4648      	mov	r0, r9
 800fff8:	4614      	mov	r4, r2
 800fffa:	f7ff ffdb 	bl	800ffb4 <__mcmp>
 800fffe:	1e05      	subs	r5, r0, #0
 8010000:	d112      	bne.n	8010028 <__mdiff+0x3c>
 8010002:	4629      	mov	r1, r5
 8010004:	4630      	mov	r0, r6
 8010006:	f7ff fd11 	bl	800fa2c <_Balloc>
 801000a:	4602      	mov	r2, r0
 801000c:	b928      	cbnz	r0, 801001a <__mdiff+0x2e>
 801000e:	4b3f      	ldr	r3, [pc, #252]	@ (801010c <__mdiff+0x120>)
 8010010:	f240 2137 	movw	r1, #567	@ 0x237
 8010014:	483e      	ldr	r0, [pc, #248]	@ (8010110 <__mdiff+0x124>)
 8010016:	f7fd fccb 	bl	800d9b0 <__assert_func>
 801001a:	2301      	movs	r3, #1
 801001c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010020:	4610      	mov	r0, r2
 8010022:	b003      	add	sp, #12
 8010024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010028:	bfbc      	itt	lt
 801002a:	464b      	movlt	r3, r9
 801002c:	46a1      	movlt	r9, r4
 801002e:	4630      	mov	r0, r6
 8010030:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010034:	bfba      	itte	lt
 8010036:	461c      	movlt	r4, r3
 8010038:	2501      	movlt	r5, #1
 801003a:	2500      	movge	r5, #0
 801003c:	f7ff fcf6 	bl	800fa2c <_Balloc>
 8010040:	4602      	mov	r2, r0
 8010042:	b918      	cbnz	r0, 801004c <__mdiff+0x60>
 8010044:	4b31      	ldr	r3, [pc, #196]	@ (801010c <__mdiff+0x120>)
 8010046:	f240 2145 	movw	r1, #581	@ 0x245
 801004a:	e7e3      	b.n	8010014 <__mdiff+0x28>
 801004c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010050:	6926      	ldr	r6, [r4, #16]
 8010052:	60c5      	str	r5, [r0, #12]
 8010054:	f109 0310 	add.w	r3, r9, #16
 8010058:	f109 0514 	add.w	r5, r9, #20
 801005c:	f104 0e14 	add.w	lr, r4, #20
 8010060:	f100 0b14 	add.w	fp, r0, #20
 8010064:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010068:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801006c:	9301      	str	r3, [sp, #4]
 801006e:	46d9      	mov	r9, fp
 8010070:	f04f 0c00 	mov.w	ip, #0
 8010074:	9b01      	ldr	r3, [sp, #4]
 8010076:	f85e 0b04 	ldr.w	r0, [lr], #4
 801007a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801007e:	9301      	str	r3, [sp, #4]
 8010080:	fa1f f38a 	uxth.w	r3, sl
 8010084:	4619      	mov	r1, r3
 8010086:	b283      	uxth	r3, r0
 8010088:	1acb      	subs	r3, r1, r3
 801008a:	0c00      	lsrs	r0, r0, #16
 801008c:	4463      	add	r3, ip
 801008e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010092:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010096:	b29b      	uxth	r3, r3
 8010098:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801009c:	4576      	cmp	r6, lr
 801009e:	f849 3b04 	str.w	r3, [r9], #4
 80100a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80100a6:	d8e5      	bhi.n	8010074 <__mdiff+0x88>
 80100a8:	1b33      	subs	r3, r6, r4
 80100aa:	3b15      	subs	r3, #21
 80100ac:	f023 0303 	bic.w	r3, r3, #3
 80100b0:	3415      	adds	r4, #21
 80100b2:	3304      	adds	r3, #4
 80100b4:	42a6      	cmp	r6, r4
 80100b6:	bf38      	it	cc
 80100b8:	2304      	movcc	r3, #4
 80100ba:	441d      	add	r5, r3
 80100bc:	445b      	add	r3, fp
 80100be:	461e      	mov	r6, r3
 80100c0:	462c      	mov	r4, r5
 80100c2:	4544      	cmp	r4, r8
 80100c4:	d30e      	bcc.n	80100e4 <__mdiff+0xf8>
 80100c6:	f108 0103 	add.w	r1, r8, #3
 80100ca:	1b49      	subs	r1, r1, r5
 80100cc:	f021 0103 	bic.w	r1, r1, #3
 80100d0:	3d03      	subs	r5, #3
 80100d2:	45a8      	cmp	r8, r5
 80100d4:	bf38      	it	cc
 80100d6:	2100      	movcc	r1, #0
 80100d8:	440b      	add	r3, r1
 80100da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80100de:	b191      	cbz	r1, 8010106 <__mdiff+0x11a>
 80100e0:	6117      	str	r7, [r2, #16]
 80100e2:	e79d      	b.n	8010020 <__mdiff+0x34>
 80100e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80100e8:	46e6      	mov	lr, ip
 80100ea:	0c08      	lsrs	r0, r1, #16
 80100ec:	fa1c fc81 	uxtah	ip, ip, r1
 80100f0:	4471      	add	r1, lr
 80100f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80100f6:	b289      	uxth	r1, r1
 80100f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80100fc:	f846 1b04 	str.w	r1, [r6], #4
 8010100:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010104:	e7dd      	b.n	80100c2 <__mdiff+0xd6>
 8010106:	3f01      	subs	r7, #1
 8010108:	e7e7      	b.n	80100da <__mdiff+0xee>
 801010a:	bf00      	nop
 801010c:	08013301 	.word	0x08013301
 8010110:	08013312 	.word	0x08013312

08010114 <__ulp>:
 8010114:	b082      	sub	sp, #8
 8010116:	ed8d 0b00 	vstr	d0, [sp]
 801011a:	9a01      	ldr	r2, [sp, #4]
 801011c:	4b0f      	ldr	r3, [pc, #60]	@ (801015c <__ulp+0x48>)
 801011e:	4013      	ands	r3, r2
 8010120:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010124:	2b00      	cmp	r3, #0
 8010126:	dc08      	bgt.n	801013a <__ulp+0x26>
 8010128:	425b      	negs	r3, r3
 801012a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801012e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010132:	da04      	bge.n	801013e <__ulp+0x2a>
 8010134:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010138:	4113      	asrs	r3, r2
 801013a:	2200      	movs	r2, #0
 801013c:	e008      	b.n	8010150 <__ulp+0x3c>
 801013e:	f1a2 0314 	sub.w	r3, r2, #20
 8010142:	2b1e      	cmp	r3, #30
 8010144:	bfda      	itte	le
 8010146:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801014a:	40da      	lsrle	r2, r3
 801014c:	2201      	movgt	r2, #1
 801014e:	2300      	movs	r3, #0
 8010150:	4619      	mov	r1, r3
 8010152:	4610      	mov	r0, r2
 8010154:	ec41 0b10 	vmov	d0, r0, r1
 8010158:	b002      	add	sp, #8
 801015a:	4770      	bx	lr
 801015c:	7ff00000 	.word	0x7ff00000

08010160 <__b2d>:
 8010160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010164:	6906      	ldr	r6, [r0, #16]
 8010166:	f100 0814 	add.w	r8, r0, #20
 801016a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801016e:	1f37      	subs	r7, r6, #4
 8010170:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010174:	4610      	mov	r0, r2
 8010176:	f7ff fd4b 	bl	800fc10 <__hi0bits>
 801017a:	f1c0 0320 	rsb	r3, r0, #32
 801017e:	280a      	cmp	r0, #10
 8010180:	600b      	str	r3, [r1, #0]
 8010182:	491b      	ldr	r1, [pc, #108]	@ (80101f0 <__b2d+0x90>)
 8010184:	dc15      	bgt.n	80101b2 <__b2d+0x52>
 8010186:	f1c0 0c0b 	rsb	ip, r0, #11
 801018a:	fa22 f30c 	lsr.w	r3, r2, ip
 801018e:	45b8      	cmp	r8, r7
 8010190:	ea43 0501 	orr.w	r5, r3, r1
 8010194:	bf34      	ite	cc
 8010196:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801019a:	2300      	movcs	r3, #0
 801019c:	3015      	adds	r0, #21
 801019e:	fa02 f000 	lsl.w	r0, r2, r0
 80101a2:	fa23 f30c 	lsr.w	r3, r3, ip
 80101a6:	4303      	orrs	r3, r0
 80101a8:	461c      	mov	r4, r3
 80101aa:	ec45 4b10 	vmov	d0, r4, r5
 80101ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101b2:	45b8      	cmp	r8, r7
 80101b4:	bf3a      	itte	cc
 80101b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80101ba:	f1a6 0708 	subcc.w	r7, r6, #8
 80101be:	2300      	movcs	r3, #0
 80101c0:	380b      	subs	r0, #11
 80101c2:	d012      	beq.n	80101ea <__b2d+0x8a>
 80101c4:	f1c0 0120 	rsb	r1, r0, #32
 80101c8:	fa23 f401 	lsr.w	r4, r3, r1
 80101cc:	4082      	lsls	r2, r0
 80101ce:	4322      	orrs	r2, r4
 80101d0:	4547      	cmp	r7, r8
 80101d2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80101d6:	bf8c      	ite	hi
 80101d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80101dc:	2200      	movls	r2, #0
 80101de:	4083      	lsls	r3, r0
 80101e0:	40ca      	lsrs	r2, r1
 80101e2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80101e6:	4313      	orrs	r3, r2
 80101e8:	e7de      	b.n	80101a8 <__b2d+0x48>
 80101ea:	ea42 0501 	orr.w	r5, r2, r1
 80101ee:	e7db      	b.n	80101a8 <__b2d+0x48>
 80101f0:	3ff00000 	.word	0x3ff00000

080101f4 <__d2b>:
 80101f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80101f8:	460f      	mov	r7, r1
 80101fa:	2101      	movs	r1, #1
 80101fc:	ec59 8b10 	vmov	r8, r9, d0
 8010200:	4616      	mov	r6, r2
 8010202:	f7ff fc13 	bl	800fa2c <_Balloc>
 8010206:	4604      	mov	r4, r0
 8010208:	b930      	cbnz	r0, 8010218 <__d2b+0x24>
 801020a:	4602      	mov	r2, r0
 801020c:	4b23      	ldr	r3, [pc, #140]	@ (801029c <__d2b+0xa8>)
 801020e:	4824      	ldr	r0, [pc, #144]	@ (80102a0 <__d2b+0xac>)
 8010210:	f240 310f 	movw	r1, #783	@ 0x30f
 8010214:	f7fd fbcc 	bl	800d9b0 <__assert_func>
 8010218:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801021c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010220:	b10d      	cbz	r5, 8010226 <__d2b+0x32>
 8010222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010226:	9301      	str	r3, [sp, #4]
 8010228:	f1b8 0300 	subs.w	r3, r8, #0
 801022c:	d023      	beq.n	8010276 <__d2b+0x82>
 801022e:	4668      	mov	r0, sp
 8010230:	9300      	str	r3, [sp, #0]
 8010232:	f7ff fd0c 	bl	800fc4e <__lo0bits>
 8010236:	e9dd 1200 	ldrd	r1, r2, [sp]
 801023a:	b1d0      	cbz	r0, 8010272 <__d2b+0x7e>
 801023c:	f1c0 0320 	rsb	r3, r0, #32
 8010240:	fa02 f303 	lsl.w	r3, r2, r3
 8010244:	430b      	orrs	r3, r1
 8010246:	40c2      	lsrs	r2, r0
 8010248:	6163      	str	r3, [r4, #20]
 801024a:	9201      	str	r2, [sp, #4]
 801024c:	9b01      	ldr	r3, [sp, #4]
 801024e:	61a3      	str	r3, [r4, #24]
 8010250:	2b00      	cmp	r3, #0
 8010252:	bf0c      	ite	eq
 8010254:	2201      	moveq	r2, #1
 8010256:	2202      	movne	r2, #2
 8010258:	6122      	str	r2, [r4, #16]
 801025a:	b1a5      	cbz	r5, 8010286 <__d2b+0x92>
 801025c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010260:	4405      	add	r5, r0
 8010262:	603d      	str	r5, [r7, #0]
 8010264:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010268:	6030      	str	r0, [r6, #0]
 801026a:	4620      	mov	r0, r4
 801026c:	b003      	add	sp, #12
 801026e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010272:	6161      	str	r1, [r4, #20]
 8010274:	e7ea      	b.n	801024c <__d2b+0x58>
 8010276:	a801      	add	r0, sp, #4
 8010278:	f7ff fce9 	bl	800fc4e <__lo0bits>
 801027c:	9b01      	ldr	r3, [sp, #4]
 801027e:	6163      	str	r3, [r4, #20]
 8010280:	3020      	adds	r0, #32
 8010282:	2201      	movs	r2, #1
 8010284:	e7e8      	b.n	8010258 <__d2b+0x64>
 8010286:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801028a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801028e:	6038      	str	r0, [r7, #0]
 8010290:	6918      	ldr	r0, [r3, #16]
 8010292:	f7ff fcbd 	bl	800fc10 <__hi0bits>
 8010296:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801029a:	e7e5      	b.n	8010268 <__d2b+0x74>
 801029c:	08013301 	.word	0x08013301
 80102a0:	08013312 	.word	0x08013312

080102a4 <__ratio>:
 80102a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a8:	b085      	sub	sp, #20
 80102aa:	e9cd 1000 	strd	r1, r0, [sp]
 80102ae:	a902      	add	r1, sp, #8
 80102b0:	f7ff ff56 	bl	8010160 <__b2d>
 80102b4:	9800      	ldr	r0, [sp, #0]
 80102b6:	a903      	add	r1, sp, #12
 80102b8:	ec55 4b10 	vmov	r4, r5, d0
 80102bc:	f7ff ff50 	bl	8010160 <__b2d>
 80102c0:	9b01      	ldr	r3, [sp, #4]
 80102c2:	6919      	ldr	r1, [r3, #16]
 80102c4:	9b00      	ldr	r3, [sp, #0]
 80102c6:	691b      	ldr	r3, [r3, #16]
 80102c8:	1ac9      	subs	r1, r1, r3
 80102ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80102ce:	1a9b      	subs	r3, r3, r2
 80102d0:	ec5b ab10 	vmov	sl, fp, d0
 80102d4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80102d8:	2b00      	cmp	r3, #0
 80102da:	bfce      	itee	gt
 80102dc:	462a      	movgt	r2, r5
 80102de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80102e2:	465a      	movle	r2, fp
 80102e4:	462f      	mov	r7, r5
 80102e6:	46d9      	mov	r9, fp
 80102e8:	bfcc      	ite	gt
 80102ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80102ee:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80102f2:	464b      	mov	r3, r9
 80102f4:	4652      	mov	r2, sl
 80102f6:	4620      	mov	r0, r4
 80102f8:	4639      	mov	r1, r7
 80102fa:	f7f0 facf 	bl	800089c <__aeabi_ddiv>
 80102fe:	ec41 0b10 	vmov	d0, r0, r1
 8010302:	b005      	add	sp, #20
 8010304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010308 <__copybits>:
 8010308:	3901      	subs	r1, #1
 801030a:	b570      	push	{r4, r5, r6, lr}
 801030c:	1149      	asrs	r1, r1, #5
 801030e:	6914      	ldr	r4, [r2, #16]
 8010310:	3101      	adds	r1, #1
 8010312:	f102 0314 	add.w	r3, r2, #20
 8010316:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801031a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801031e:	1f05      	subs	r5, r0, #4
 8010320:	42a3      	cmp	r3, r4
 8010322:	d30c      	bcc.n	801033e <__copybits+0x36>
 8010324:	1aa3      	subs	r3, r4, r2
 8010326:	3b11      	subs	r3, #17
 8010328:	f023 0303 	bic.w	r3, r3, #3
 801032c:	3211      	adds	r2, #17
 801032e:	42a2      	cmp	r2, r4
 8010330:	bf88      	it	hi
 8010332:	2300      	movhi	r3, #0
 8010334:	4418      	add	r0, r3
 8010336:	2300      	movs	r3, #0
 8010338:	4288      	cmp	r0, r1
 801033a:	d305      	bcc.n	8010348 <__copybits+0x40>
 801033c:	bd70      	pop	{r4, r5, r6, pc}
 801033e:	f853 6b04 	ldr.w	r6, [r3], #4
 8010342:	f845 6f04 	str.w	r6, [r5, #4]!
 8010346:	e7eb      	b.n	8010320 <__copybits+0x18>
 8010348:	f840 3b04 	str.w	r3, [r0], #4
 801034c:	e7f4      	b.n	8010338 <__copybits+0x30>

0801034e <__any_on>:
 801034e:	f100 0214 	add.w	r2, r0, #20
 8010352:	6900      	ldr	r0, [r0, #16]
 8010354:	114b      	asrs	r3, r1, #5
 8010356:	4298      	cmp	r0, r3
 8010358:	b510      	push	{r4, lr}
 801035a:	db11      	blt.n	8010380 <__any_on+0x32>
 801035c:	dd0a      	ble.n	8010374 <__any_on+0x26>
 801035e:	f011 011f 	ands.w	r1, r1, #31
 8010362:	d007      	beq.n	8010374 <__any_on+0x26>
 8010364:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010368:	fa24 f001 	lsr.w	r0, r4, r1
 801036c:	fa00 f101 	lsl.w	r1, r0, r1
 8010370:	428c      	cmp	r4, r1
 8010372:	d10b      	bne.n	801038c <__any_on+0x3e>
 8010374:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010378:	4293      	cmp	r3, r2
 801037a:	d803      	bhi.n	8010384 <__any_on+0x36>
 801037c:	2000      	movs	r0, #0
 801037e:	bd10      	pop	{r4, pc}
 8010380:	4603      	mov	r3, r0
 8010382:	e7f7      	b.n	8010374 <__any_on+0x26>
 8010384:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010388:	2900      	cmp	r1, #0
 801038a:	d0f5      	beq.n	8010378 <__any_on+0x2a>
 801038c:	2001      	movs	r0, #1
 801038e:	e7f6      	b.n	801037e <__any_on+0x30>

08010390 <sulp>:
 8010390:	b570      	push	{r4, r5, r6, lr}
 8010392:	4604      	mov	r4, r0
 8010394:	460d      	mov	r5, r1
 8010396:	ec45 4b10 	vmov	d0, r4, r5
 801039a:	4616      	mov	r6, r2
 801039c:	f7ff feba 	bl	8010114 <__ulp>
 80103a0:	ec51 0b10 	vmov	r0, r1, d0
 80103a4:	b17e      	cbz	r6, 80103c6 <sulp+0x36>
 80103a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80103aa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	dd09      	ble.n	80103c6 <sulp+0x36>
 80103b2:	051b      	lsls	r3, r3, #20
 80103b4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80103b8:	2400      	movs	r4, #0
 80103ba:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80103be:	4622      	mov	r2, r4
 80103c0:	462b      	mov	r3, r5
 80103c2:	f7f0 f941 	bl	8000648 <__aeabi_dmul>
 80103c6:	ec41 0b10 	vmov	d0, r0, r1
 80103ca:	bd70      	pop	{r4, r5, r6, pc}
 80103cc:	0000      	movs	r0, r0
	...

080103d0 <_strtod_l>:
 80103d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d4:	b09f      	sub	sp, #124	@ 0x7c
 80103d6:	460c      	mov	r4, r1
 80103d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80103da:	2200      	movs	r2, #0
 80103dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80103de:	9005      	str	r0, [sp, #20]
 80103e0:	f04f 0a00 	mov.w	sl, #0
 80103e4:	f04f 0b00 	mov.w	fp, #0
 80103e8:	460a      	mov	r2, r1
 80103ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80103ec:	7811      	ldrb	r1, [r2, #0]
 80103ee:	292b      	cmp	r1, #43	@ 0x2b
 80103f0:	d04a      	beq.n	8010488 <_strtod_l+0xb8>
 80103f2:	d838      	bhi.n	8010466 <_strtod_l+0x96>
 80103f4:	290d      	cmp	r1, #13
 80103f6:	d832      	bhi.n	801045e <_strtod_l+0x8e>
 80103f8:	2908      	cmp	r1, #8
 80103fa:	d832      	bhi.n	8010462 <_strtod_l+0x92>
 80103fc:	2900      	cmp	r1, #0
 80103fe:	d03b      	beq.n	8010478 <_strtod_l+0xa8>
 8010400:	2200      	movs	r2, #0
 8010402:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010404:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010406:	782a      	ldrb	r2, [r5, #0]
 8010408:	2a30      	cmp	r2, #48	@ 0x30
 801040a:	f040 80b3 	bne.w	8010574 <_strtod_l+0x1a4>
 801040e:	786a      	ldrb	r2, [r5, #1]
 8010410:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010414:	2a58      	cmp	r2, #88	@ 0x58
 8010416:	d16e      	bne.n	80104f6 <_strtod_l+0x126>
 8010418:	9302      	str	r3, [sp, #8]
 801041a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801041c:	9301      	str	r3, [sp, #4]
 801041e:	ab1a      	add	r3, sp, #104	@ 0x68
 8010420:	9300      	str	r3, [sp, #0]
 8010422:	4a8e      	ldr	r2, [pc, #568]	@ (801065c <_strtod_l+0x28c>)
 8010424:	9805      	ldr	r0, [sp, #20]
 8010426:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010428:	a919      	add	r1, sp, #100	@ 0x64
 801042a:	f001 faa9 	bl	8011980 <__gethex>
 801042e:	f010 060f 	ands.w	r6, r0, #15
 8010432:	4604      	mov	r4, r0
 8010434:	d005      	beq.n	8010442 <_strtod_l+0x72>
 8010436:	2e06      	cmp	r6, #6
 8010438:	d128      	bne.n	801048c <_strtod_l+0xbc>
 801043a:	3501      	adds	r5, #1
 801043c:	2300      	movs	r3, #0
 801043e:	9519      	str	r5, [sp, #100]	@ 0x64
 8010440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010442:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010444:	2b00      	cmp	r3, #0
 8010446:	f040 858e 	bne.w	8010f66 <_strtod_l+0xb96>
 801044a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801044c:	b1cb      	cbz	r3, 8010482 <_strtod_l+0xb2>
 801044e:	4652      	mov	r2, sl
 8010450:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010454:	ec43 2b10 	vmov	d0, r2, r3
 8010458:	b01f      	add	sp, #124	@ 0x7c
 801045a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801045e:	2920      	cmp	r1, #32
 8010460:	d1ce      	bne.n	8010400 <_strtod_l+0x30>
 8010462:	3201      	adds	r2, #1
 8010464:	e7c1      	b.n	80103ea <_strtod_l+0x1a>
 8010466:	292d      	cmp	r1, #45	@ 0x2d
 8010468:	d1ca      	bne.n	8010400 <_strtod_l+0x30>
 801046a:	2101      	movs	r1, #1
 801046c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801046e:	1c51      	adds	r1, r2, #1
 8010470:	9119      	str	r1, [sp, #100]	@ 0x64
 8010472:	7852      	ldrb	r2, [r2, #1]
 8010474:	2a00      	cmp	r2, #0
 8010476:	d1c5      	bne.n	8010404 <_strtod_l+0x34>
 8010478:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801047a:	9419      	str	r4, [sp, #100]	@ 0x64
 801047c:	2b00      	cmp	r3, #0
 801047e:	f040 8570 	bne.w	8010f62 <_strtod_l+0xb92>
 8010482:	4652      	mov	r2, sl
 8010484:	465b      	mov	r3, fp
 8010486:	e7e5      	b.n	8010454 <_strtod_l+0x84>
 8010488:	2100      	movs	r1, #0
 801048a:	e7ef      	b.n	801046c <_strtod_l+0x9c>
 801048c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801048e:	b13a      	cbz	r2, 80104a0 <_strtod_l+0xd0>
 8010490:	2135      	movs	r1, #53	@ 0x35
 8010492:	a81c      	add	r0, sp, #112	@ 0x70
 8010494:	f7ff ff38 	bl	8010308 <__copybits>
 8010498:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801049a:	9805      	ldr	r0, [sp, #20]
 801049c:	f7ff fb06 	bl	800faac <_Bfree>
 80104a0:	3e01      	subs	r6, #1
 80104a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80104a4:	2e04      	cmp	r6, #4
 80104a6:	d806      	bhi.n	80104b6 <_strtod_l+0xe6>
 80104a8:	e8df f006 	tbb	[pc, r6]
 80104ac:	201d0314 	.word	0x201d0314
 80104b0:	14          	.byte	0x14
 80104b1:	00          	.byte	0x00
 80104b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80104b6:	05e1      	lsls	r1, r4, #23
 80104b8:	bf48      	it	mi
 80104ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80104be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80104c2:	0d1b      	lsrs	r3, r3, #20
 80104c4:	051b      	lsls	r3, r3, #20
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1bb      	bne.n	8010442 <_strtod_l+0x72>
 80104ca:	f7fe fbd5 	bl	800ec78 <__errno>
 80104ce:	2322      	movs	r3, #34	@ 0x22
 80104d0:	6003      	str	r3, [r0, #0]
 80104d2:	e7b6      	b.n	8010442 <_strtod_l+0x72>
 80104d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80104d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80104dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80104e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80104e4:	e7e7      	b.n	80104b6 <_strtod_l+0xe6>
 80104e6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010664 <_strtod_l+0x294>
 80104ea:	e7e4      	b.n	80104b6 <_strtod_l+0xe6>
 80104ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80104f0:	f04f 3aff 	mov.w	sl, #4294967295
 80104f4:	e7df      	b.n	80104b6 <_strtod_l+0xe6>
 80104f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80104f8:	1c5a      	adds	r2, r3, #1
 80104fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80104fc:	785b      	ldrb	r3, [r3, #1]
 80104fe:	2b30      	cmp	r3, #48	@ 0x30
 8010500:	d0f9      	beq.n	80104f6 <_strtod_l+0x126>
 8010502:	2b00      	cmp	r3, #0
 8010504:	d09d      	beq.n	8010442 <_strtod_l+0x72>
 8010506:	2301      	movs	r3, #1
 8010508:	9309      	str	r3, [sp, #36]	@ 0x24
 801050a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801050c:	930c      	str	r3, [sp, #48]	@ 0x30
 801050e:	2300      	movs	r3, #0
 8010510:	9308      	str	r3, [sp, #32]
 8010512:	930a      	str	r3, [sp, #40]	@ 0x28
 8010514:	461f      	mov	r7, r3
 8010516:	220a      	movs	r2, #10
 8010518:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801051a:	7805      	ldrb	r5, [r0, #0]
 801051c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010520:	b2d9      	uxtb	r1, r3
 8010522:	2909      	cmp	r1, #9
 8010524:	d928      	bls.n	8010578 <_strtod_l+0x1a8>
 8010526:	494e      	ldr	r1, [pc, #312]	@ (8010660 <_strtod_l+0x290>)
 8010528:	2201      	movs	r2, #1
 801052a:	f001 f991 	bl	8011850 <strncmp>
 801052e:	2800      	cmp	r0, #0
 8010530:	d032      	beq.n	8010598 <_strtod_l+0x1c8>
 8010532:	2000      	movs	r0, #0
 8010534:	462a      	mov	r2, r5
 8010536:	4681      	mov	r9, r0
 8010538:	463d      	mov	r5, r7
 801053a:	4603      	mov	r3, r0
 801053c:	2a65      	cmp	r2, #101	@ 0x65
 801053e:	d001      	beq.n	8010544 <_strtod_l+0x174>
 8010540:	2a45      	cmp	r2, #69	@ 0x45
 8010542:	d114      	bne.n	801056e <_strtod_l+0x19e>
 8010544:	b91d      	cbnz	r5, 801054e <_strtod_l+0x17e>
 8010546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010548:	4302      	orrs	r2, r0
 801054a:	d095      	beq.n	8010478 <_strtod_l+0xa8>
 801054c:	2500      	movs	r5, #0
 801054e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010550:	1c62      	adds	r2, r4, #1
 8010552:	9219      	str	r2, [sp, #100]	@ 0x64
 8010554:	7862      	ldrb	r2, [r4, #1]
 8010556:	2a2b      	cmp	r2, #43	@ 0x2b
 8010558:	d077      	beq.n	801064a <_strtod_l+0x27a>
 801055a:	2a2d      	cmp	r2, #45	@ 0x2d
 801055c:	d07b      	beq.n	8010656 <_strtod_l+0x286>
 801055e:	f04f 0c00 	mov.w	ip, #0
 8010562:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010566:	2909      	cmp	r1, #9
 8010568:	f240 8082 	bls.w	8010670 <_strtod_l+0x2a0>
 801056c:	9419      	str	r4, [sp, #100]	@ 0x64
 801056e:	f04f 0800 	mov.w	r8, #0
 8010572:	e0a2      	b.n	80106ba <_strtod_l+0x2ea>
 8010574:	2300      	movs	r3, #0
 8010576:	e7c7      	b.n	8010508 <_strtod_l+0x138>
 8010578:	2f08      	cmp	r7, #8
 801057a:	bfd5      	itete	le
 801057c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801057e:	9908      	ldrgt	r1, [sp, #32]
 8010580:	fb02 3301 	mlale	r3, r2, r1, r3
 8010584:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010588:	f100 0001 	add.w	r0, r0, #1
 801058c:	bfd4      	ite	le
 801058e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010590:	9308      	strgt	r3, [sp, #32]
 8010592:	3701      	adds	r7, #1
 8010594:	9019      	str	r0, [sp, #100]	@ 0x64
 8010596:	e7bf      	b.n	8010518 <_strtod_l+0x148>
 8010598:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801059a:	1c5a      	adds	r2, r3, #1
 801059c:	9219      	str	r2, [sp, #100]	@ 0x64
 801059e:	785a      	ldrb	r2, [r3, #1]
 80105a0:	b37f      	cbz	r7, 8010602 <_strtod_l+0x232>
 80105a2:	4681      	mov	r9, r0
 80105a4:	463d      	mov	r5, r7
 80105a6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80105aa:	2b09      	cmp	r3, #9
 80105ac:	d912      	bls.n	80105d4 <_strtod_l+0x204>
 80105ae:	2301      	movs	r3, #1
 80105b0:	e7c4      	b.n	801053c <_strtod_l+0x16c>
 80105b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80105b4:	1c5a      	adds	r2, r3, #1
 80105b6:	9219      	str	r2, [sp, #100]	@ 0x64
 80105b8:	785a      	ldrb	r2, [r3, #1]
 80105ba:	3001      	adds	r0, #1
 80105bc:	2a30      	cmp	r2, #48	@ 0x30
 80105be:	d0f8      	beq.n	80105b2 <_strtod_l+0x1e2>
 80105c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80105c4:	2b08      	cmp	r3, #8
 80105c6:	f200 84d3 	bhi.w	8010f70 <_strtod_l+0xba0>
 80105ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80105cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80105ce:	4681      	mov	r9, r0
 80105d0:	2000      	movs	r0, #0
 80105d2:	4605      	mov	r5, r0
 80105d4:	3a30      	subs	r2, #48	@ 0x30
 80105d6:	f100 0301 	add.w	r3, r0, #1
 80105da:	d02a      	beq.n	8010632 <_strtod_l+0x262>
 80105dc:	4499      	add	r9, r3
 80105de:	eb00 0c05 	add.w	ip, r0, r5
 80105e2:	462b      	mov	r3, r5
 80105e4:	210a      	movs	r1, #10
 80105e6:	4563      	cmp	r3, ip
 80105e8:	d10d      	bne.n	8010606 <_strtod_l+0x236>
 80105ea:	1c69      	adds	r1, r5, #1
 80105ec:	4401      	add	r1, r0
 80105ee:	4428      	add	r0, r5
 80105f0:	2808      	cmp	r0, #8
 80105f2:	dc16      	bgt.n	8010622 <_strtod_l+0x252>
 80105f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80105f6:	230a      	movs	r3, #10
 80105f8:	fb03 2300 	mla	r3, r3, r0, r2
 80105fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80105fe:	2300      	movs	r3, #0
 8010600:	e018      	b.n	8010634 <_strtod_l+0x264>
 8010602:	4638      	mov	r0, r7
 8010604:	e7da      	b.n	80105bc <_strtod_l+0x1ec>
 8010606:	2b08      	cmp	r3, #8
 8010608:	f103 0301 	add.w	r3, r3, #1
 801060c:	dc03      	bgt.n	8010616 <_strtod_l+0x246>
 801060e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010610:	434e      	muls	r6, r1
 8010612:	960a      	str	r6, [sp, #40]	@ 0x28
 8010614:	e7e7      	b.n	80105e6 <_strtod_l+0x216>
 8010616:	2b10      	cmp	r3, #16
 8010618:	bfde      	ittt	le
 801061a:	9e08      	ldrle	r6, [sp, #32]
 801061c:	434e      	mulle	r6, r1
 801061e:	9608      	strle	r6, [sp, #32]
 8010620:	e7e1      	b.n	80105e6 <_strtod_l+0x216>
 8010622:	280f      	cmp	r0, #15
 8010624:	dceb      	bgt.n	80105fe <_strtod_l+0x22e>
 8010626:	9808      	ldr	r0, [sp, #32]
 8010628:	230a      	movs	r3, #10
 801062a:	fb03 2300 	mla	r3, r3, r0, r2
 801062e:	9308      	str	r3, [sp, #32]
 8010630:	e7e5      	b.n	80105fe <_strtod_l+0x22e>
 8010632:	4629      	mov	r1, r5
 8010634:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010636:	1c50      	adds	r0, r2, #1
 8010638:	9019      	str	r0, [sp, #100]	@ 0x64
 801063a:	7852      	ldrb	r2, [r2, #1]
 801063c:	4618      	mov	r0, r3
 801063e:	460d      	mov	r5, r1
 8010640:	e7b1      	b.n	80105a6 <_strtod_l+0x1d6>
 8010642:	f04f 0900 	mov.w	r9, #0
 8010646:	2301      	movs	r3, #1
 8010648:	e77d      	b.n	8010546 <_strtod_l+0x176>
 801064a:	f04f 0c00 	mov.w	ip, #0
 801064e:	1ca2      	adds	r2, r4, #2
 8010650:	9219      	str	r2, [sp, #100]	@ 0x64
 8010652:	78a2      	ldrb	r2, [r4, #2]
 8010654:	e785      	b.n	8010562 <_strtod_l+0x192>
 8010656:	f04f 0c01 	mov.w	ip, #1
 801065a:	e7f8      	b.n	801064e <_strtod_l+0x27e>
 801065c:	08013480 	.word	0x08013480
 8010660:	08013468 	.word	0x08013468
 8010664:	7ff00000 	.word	0x7ff00000
 8010668:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801066a:	1c51      	adds	r1, r2, #1
 801066c:	9119      	str	r1, [sp, #100]	@ 0x64
 801066e:	7852      	ldrb	r2, [r2, #1]
 8010670:	2a30      	cmp	r2, #48	@ 0x30
 8010672:	d0f9      	beq.n	8010668 <_strtod_l+0x298>
 8010674:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010678:	2908      	cmp	r1, #8
 801067a:	f63f af78 	bhi.w	801056e <_strtod_l+0x19e>
 801067e:	3a30      	subs	r2, #48	@ 0x30
 8010680:	920e      	str	r2, [sp, #56]	@ 0x38
 8010682:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010684:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010686:	f04f 080a 	mov.w	r8, #10
 801068a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801068c:	1c56      	adds	r6, r2, #1
 801068e:	9619      	str	r6, [sp, #100]	@ 0x64
 8010690:	7852      	ldrb	r2, [r2, #1]
 8010692:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010696:	f1be 0f09 	cmp.w	lr, #9
 801069a:	d939      	bls.n	8010710 <_strtod_l+0x340>
 801069c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801069e:	1a76      	subs	r6, r6, r1
 80106a0:	2e08      	cmp	r6, #8
 80106a2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80106a6:	dc03      	bgt.n	80106b0 <_strtod_l+0x2e0>
 80106a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80106aa:	4588      	cmp	r8, r1
 80106ac:	bfa8      	it	ge
 80106ae:	4688      	movge	r8, r1
 80106b0:	f1bc 0f00 	cmp.w	ip, #0
 80106b4:	d001      	beq.n	80106ba <_strtod_l+0x2ea>
 80106b6:	f1c8 0800 	rsb	r8, r8, #0
 80106ba:	2d00      	cmp	r5, #0
 80106bc:	d14e      	bne.n	801075c <_strtod_l+0x38c>
 80106be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80106c0:	4308      	orrs	r0, r1
 80106c2:	f47f aebe 	bne.w	8010442 <_strtod_l+0x72>
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	f47f aed6 	bne.w	8010478 <_strtod_l+0xa8>
 80106cc:	2a69      	cmp	r2, #105	@ 0x69
 80106ce:	d028      	beq.n	8010722 <_strtod_l+0x352>
 80106d0:	dc25      	bgt.n	801071e <_strtod_l+0x34e>
 80106d2:	2a49      	cmp	r2, #73	@ 0x49
 80106d4:	d025      	beq.n	8010722 <_strtod_l+0x352>
 80106d6:	2a4e      	cmp	r2, #78	@ 0x4e
 80106d8:	f47f aece 	bne.w	8010478 <_strtod_l+0xa8>
 80106dc:	499b      	ldr	r1, [pc, #620]	@ (801094c <_strtod_l+0x57c>)
 80106de:	a819      	add	r0, sp, #100	@ 0x64
 80106e0:	f001 fb70 	bl	8011dc4 <__match>
 80106e4:	2800      	cmp	r0, #0
 80106e6:	f43f aec7 	beq.w	8010478 <_strtod_l+0xa8>
 80106ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	2b28      	cmp	r3, #40	@ 0x28
 80106f0:	d12e      	bne.n	8010750 <_strtod_l+0x380>
 80106f2:	4997      	ldr	r1, [pc, #604]	@ (8010950 <_strtod_l+0x580>)
 80106f4:	aa1c      	add	r2, sp, #112	@ 0x70
 80106f6:	a819      	add	r0, sp, #100	@ 0x64
 80106f8:	f001 fb78 	bl	8011dec <__hexnan>
 80106fc:	2805      	cmp	r0, #5
 80106fe:	d127      	bne.n	8010750 <_strtod_l+0x380>
 8010700:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010702:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010706:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801070a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801070e:	e698      	b.n	8010442 <_strtod_l+0x72>
 8010710:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010712:	fb08 2101 	mla	r1, r8, r1, r2
 8010716:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801071a:	920e      	str	r2, [sp, #56]	@ 0x38
 801071c:	e7b5      	b.n	801068a <_strtod_l+0x2ba>
 801071e:	2a6e      	cmp	r2, #110	@ 0x6e
 8010720:	e7da      	b.n	80106d8 <_strtod_l+0x308>
 8010722:	498c      	ldr	r1, [pc, #560]	@ (8010954 <_strtod_l+0x584>)
 8010724:	a819      	add	r0, sp, #100	@ 0x64
 8010726:	f001 fb4d 	bl	8011dc4 <__match>
 801072a:	2800      	cmp	r0, #0
 801072c:	f43f aea4 	beq.w	8010478 <_strtod_l+0xa8>
 8010730:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010732:	4989      	ldr	r1, [pc, #548]	@ (8010958 <_strtod_l+0x588>)
 8010734:	3b01      	subs	r3, #1
 8010736:	a819      	add	r0, sp, #100	@ 0x64
 8010738:	9319      	str	r3, [sp, #100]	@ 0x64
 801073a:	f001 fb43 	bl	8011dc4 <__match>
 801073e:	b910      	cbnz	r0, 8010746 <_strtod_l+0x376>
 8010740:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010742:	3301      	adds	r3, #1
 8010744:	9319      	str	r3, [sp, #100]	@ 0x64
 8010746:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010968 <_strtod_l+0x598>
 801074a:	f04f 0a00 	mov.w	sl, #0
 801074e:	e678      	b.n	8010442 <_strtod_l+0x72>
 8010750:	4882      	ldr	r0, [pc, #520]	@ (801095c <_strtod_l+0x58c>)
 8010752:	f001 f891 	bl	8011878 <nan>
 8010756:	ec5b ab10 	vmov	sl, fp, d0
 801075a:	e672      	b.n	8010442 <_strtod_l+0x72>
 801075c:	eba8 0309 	sub.w	r3, r8, r9
 8010760:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010762:	9309      	str	r3, [sp, #36]	@ 0x24
 8010764:	2f00      	cmp	r7, #0
 8010766:	bf08      	it	eq
 8010768:	462f      	moveq	r7, r5
 801076a:	2d10      	cmp	r5, #16
 801076c:	462c      	mov	r4, r5
 801076e:	bfa8      	it	ge
 8010770:	2410      	movge	r4, #16
 8010772:	f7ef feef 	bl	8000554 <__aeabi_ui2d>
 8010776:	2d09      	cmp	r5, #9
 8010778:	4682      	mov	sl, r0
 801077a:	468b      	mov	fp, r1
 801077c:	dc13      	bgt.n	80107a6 <_strtod_l+0x3d6>
 801077e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010780:	2b00      	cmp	r3, #0
 8010782:	f43f ae5e 	beq.w	8010442 <_strtod_l+0x72>
 8010786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010788:	dd78      	ble.n	801087c <_strtod_l+0x4ac>
 801078a:	2b16      	cmp	r3, #22
 801078c:	dc5f      	bgt.n	801084e <_strtod_l+0x47e>
 801078e:	4974      	ldr	r1, [pc, #464]	@ (8010960 <_strtod_l+0x590>)
 8010790:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010798:	4652      	mov	r2, sl
 801079a:	465b      	mov	r3, fp
 801079c:	f7ef ff54 	bl	8000648 <__aeabi_dmul>
 80107a0:	4682      	mov	sl, r0
 80107a2:	468b      	mov	fp, r1
 80107a4:	e64d      	b.n	8010442 <_strtod_l+0x72>
 80107a6:	4b6e      	ldr	r3, [pc, #440]	@ (8010960 <_strtod_l+0x590>)
 80107a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80107ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80107b0:	f7ef ff4a 	bl	8000648 <__aeabi_dmul>
 80107b4:	4682      	mov	sl, r0
 80107b6:	9808      	ldr	r0, [sp, #32]
 80107b8:	468b      	mov	fp, r1
 80107ba:	f7ef fecb 	bl	8000554 <__aeabi_ui2d>
 80107be:	4602      	mov	r2, r0
 80107c0:	460b      	mov	r3, r1
 80107c2:	4650      	mov	r0, sl
 80107c4:	4659      	mov	r1, fp
 80107c6:	f7ef fd89 	bl	80002dc <__adddf3>
 80107ca:	2d0f      	cmp	r5, #15
 80107cc:	4682      	mov	sl, r0
 80107ce:	468b      	mov	fp, r1
 80107d0:	ddd5      	ble.n	801077e <_strtod_l+0x3ae>
 80107d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107d4:	1b2c      	subs	r4, r5, r4
 80107d6:	441c      	add	r4, r3
 80107d8:	2c00      	cmp	r4, #0
 80107da:	f340 8096 	ble.w	801090a <_strtod_l+0x53a>
 80107de:	f014 030f 	ands.w	r3, r4, #15
 80107e2:	d00a      	beq.n	80107fa <_strtod_l+0x42a>
 80107e4:	495e      	ldr	r1, [pc, #376]	@ (8010960 <_strtod_l+0x590>)
 80107e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80107ea:	4652      	mov	r2, sl
 80107ec:	465b      	mov	r3, fp
 80107ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107f2:	f7ef ff29 	bl	8000648 <__aeabi_dmul>
 80107f6:	4682      	mov	sl, r0
 80107f8:	468b      	mov	fp, r1
 80107fa:	f034 040f 	bics.w	r4, r4, #15
 80107fe:	d073      	beq.n	80108e8 <_strtod_l+0x518>
 8010800:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010804:	dd48      	ble.n	8010898 <_strtod_l+0x4c8>
 8010806:	2400      	movs	r4, #0
 8010808:	46a0      	mov	r8, r4
 801080a:	940a      	str	r4, [sp, #40]	@ 0x28
 801080c:	46a1      	mov	r9, r4
 801080e:	9a05      	ldr	r2, [sp, #20]
 8010810:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010968 <_strtod_l+0x598>
 8010814:	2322      	movs	r3, #34	@ 0x22
 8010816:	6013      	str	r3, [r2, #0]
 8010818:	f04f 0a00 	mov.w	sl, #0
 801081c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801081e:	2b00      	cmp	r3, #0
 8010820:	f43f ae0f 	beq.w	8010442 <_strtod_l+0x72>
 8010824:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010826:	9805      	ldr	r0, [sp, #20]
 8010828:	f7ff f940 	bl	800faac <_Bfree>
 801082c:	9805      	ldr	r0, [sp, #20]
 801082e:	4649      	mov	r1, r9
 8010830:	f7ff f93c 	bl	800faac <_Bfree>
 8010834:	9805      	ldr	r0, [sp, #20]
 8010836:	4641      	mov	r1, r8
 8010838:	f7ff f938 	bl	800faac <_Bfree>
 801083c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801083e:	9805      	ldr	r0, [sp, #20]
 8010840:	f7ff f934 	bl	800faac <_Bfree>
 8010844:	9805      	ldr	r0, [sp, #20]
 8010846:	4621      	mov	r1, r4
 8010848:	f7ff f930 	bl	800faac <_Bfree>
 801084c:	e5f9      	b.n	8010442 <_strtod_l+0x72>
 801084e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010850:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010854:	4293      	cmp	r3, r2
 8010856:	dbbc      	blt.n	80107d2 <_strtod_l+0x402>
 8010858:	4c41      	ldr	r4, [pc, #260]	@ (8010960 <_strtod_l+0x590>)
 801085a:	f1c5 050f 	rsb	r5, r5, #15
 801085e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010862:	4652      	mov	r2, sl
 8010864:	465b      	mov	r3, fp
 8010866:	e9d1 0100 	ldrd	r0, r1, [r1]
 801086a:	f7ef feed 	bl	8000648 <__aeabi_dmul>
 801086e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010870:	1b5d      	subs	r5, r3, r5
 8010872:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010876:	e9d4 2300 	ldrd	r2, r3, [r4]
 801087a:	e78f      	b.n	801079c <_strtod_l+0x3cc>
 801087c:	3316      	adds	r3, #22
 801087e:	dba8      	blt.n	80107d2 <_strtod_l+0x402>
 8010880:	4b37      	ldr	r3, [pc, #220]	@ (8010960 <_strtod_l+0x590>)
 8010882:	eba9 0808 	sub.w	r8, r9, r8
 8010886:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801088a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801088e:	4650      	mov	r0, sl
 8010890:	4659      	mov	r1, fp
 8010892:	f7f0 f803 	bl	800089c <__aeabi_ddiv>
 8010896:	e783      	b.n	80107a0 <_strtod_l+0x3d0>
 8010898:	4b32      	ldr	r3, [pc, #200]	@ (8010964 <_strtod_l+0x594>)
 801089a:	9308      	str	r3, [sp, #32]
 801089c:	2300      	movs	r3, #0
 801089e:	1124      	asrs	r4, r4, #4
 80108a0:	4650      	mov	r0, sl
 80108a2:	4659      	mov	r1, fp
 80108a4:	461e      	mov	r6, r3
 80108a6:	2c01      	cmp	r4, #1
 80108a8:	dc21      	bgt.n	80108ee <_strtod_l+0x51e>
 80108aa:	b10b      	cbz	r3, 80108b0 <_strtod_l+0x4e0>
 80108ac:	4682      	mov	sl, r0
 80108ae:	468b      	mov	fp, r1
 80108b0:	492c      	ldr	r1, [pc, #176]	@ (8010964 <_strtod_l+0x594>)
 80108b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80108b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80108ba:	4652      	mov	r2, sl
 80108bc:	465b      	mov	r3, fp
 80108be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108c2:	f7ef fec1 	bl	8000648 <__aeabi_dmul>
 80108c6:	4b28      	ldr	r3, [pc, #160]	@ (8010968 <_strtod_l+0x598>)
 80108c8:	460a      	mov	r2, r1
 80108ca:	400b      	ands	r3, r1
 80108cc:	4927      	ldr	r1, [pc, #156]	@ (801096c <_strtod_l+0x59c>)
 80108ce:	428b      	cmp	r3, r1
 80108d0:	4682      	mov	sl, r0
 80108d2:	d898      	bhi.n	8010806 <_strtod_l+0x436>
 80108d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80108d8:	428b      	cmp	r3, r1
 80108da:	bf86      	itte	hi
 80108dc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010970 <_strtod_l+0x5a0>
 80108e0:	f04f 3aff 	movhi.w	sl, #4294967295
 80108e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80108e8:	2300      	movs	r3, #0
 80108ea:	9308      	str	r3, [sp, #32]
 80108ec:	e07a      	b.n	80109e4 <_strtod_l+0x614>
 80108ee:	07e2      	lsls	r2, r4, #31
 80108f0:	d505      	bpl.n	80108fe <_strtod_l+0x52e>
 80108f2:	9b08      	ldr	r3, [sp, #32]
 80108f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f8:	f7ef fea6 	bl	8000648 <__aeabi_dmul>
 80108fc:	2301      	movs	r3, #1
 80108fe:	9a08      	ldr	r2, [sp, #32]
 8010900:	3208      	adds	r2, #8
 8010902:	3601      	adds	r6, #1
 8010904:	1064      	asrs	r4, r4, #1
 8010906:	9208      	str	r2, [sp, #32]
 8010908:	e7cd      	b.n	80108a6 <_strtod_l+0x4d6>
 801090a:	d0ed      	beq.n	80108e8 <_strtod_l+0x518>
 801090c:	4264      	negs	r4, r4
 801090e:	f014 020f 	ands.w	r2, r4, #15
 8010912:	d00a      	beq.n	801092a <_strtod_l+0x55a>
 8010914:	4b12      	ldr	r3, [pc, #72]	@ (8010960 <_strtod_l+0x590>)
 8010916:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801091a:	4650      	mov	r0, sl
 801091c:	4659      	mov	r1, fp
 801091e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010922:	f7ef ffbb 	bl	800089c <__aeabi_ddiv>
 8010926:	4682      	mov	sl, r0
 8010928:	468b      	mov	fp, r1
 801092a:	1124      	asrs	r4, r4, #4
 801092c:	d0dc      	beq.n	80108e8 <_strtod_l+0x518>
 801092e:	2c1f      	cmp	r4, #31
 8010930:	dd20      	ble.n	8010974 <_strtod_l+0x5a4>
 8010932:	2400      	movs	r4, #0
 8010934:	46a0      	mov	r8, r4
 8010936:	940a      	str	r4, [sp, #40]	@ 0x28
 8010938:	46a1      	mov	r9, r4
 801093a:	9a05      	ldr	r2, [sp, #20]
 801093c:	2322      	movs	r3, #34	@ 0x22
 801093e:	f04f 0a00 	mov.w	sl, #0
 8010942:	f04f 0b00 	mov.w	fp, #0
 8010946:	6013      	str	r3, [r2, #0]
 8010948:	e768      	b.n	801081c <_strtod_l+0x44c>
 801094a:	bf00      	nop
 801094c:	08013259 	.word	0x08013259
 8010950:	0801346c 	.word	0x0801346c
 8010954:	08013251 	.word	0x08013251
 8010958:	08013288 	.word	0x08013288
 801095c:	0801324b 	.word	0x0801324b
 8010960:	080133a0 	.word	0x080133a0
 8010964:	08013378 	.word	0x08013378
 8010968:	7ff00000 	.word	0x7ff00000
 801096c:	7ca00000 	.word	0x7ca00000
 8010970:	7fefffff 	.word	0x7fefffff
 8010974:	f014 0310 	ands.w	r3, r4, #16
 8010978:	bf18      	it	ne
 801097a:	236a      	movne	r3, #106	@ 0x6a
 801097c:	4ea9      	ldr	r6, [pc, #676]	@ (8010c24 <_strtod_l+0x854>)
 801097e:	9308      	str	r3, [sp, #32]
 8010980:	4650      	mov	r0, sl
 8010982:	4659      	mov	r1, fp
 8010984:	2300      	movs	r3, #0
 8010986:	07e2      	lsls	r2, r4, #31
 8010988:	d504      	bpl.n	8010994 <_strtod_l+0x5c4>
 801098a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801098e:	f7ef fe5b 	bl	8000648 <__aeabi_dmul>
 8010992:	2301      	movs	r3, #1
 8010994:	1064      	asrs	r4, r4, #1
 8010996:	f106 0608 	add.w	r6, r6, #8
 801099a:	d1f4      	bne.n	8010986 <_strtod_l+0x5b6>
 801099c:	b10b      	cbz	r3, 80109a2 <_strtod_l+0x5d2>
 801099e:	4682      	mov	sl, r0
 80109a0:	468b      	mov	fp, r1
 80109a2:	9b08      	ldr	r3, [sp, #32]
 80109a4:	b1b3      	cbz	r3, 80109d4 <_strtod_l+0x604>
 80109a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80109aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	4659      	mov	r1, fp
 80109b2:	dd0f      	ble.n	80109d4 <_strtod_l+0x604>
 80109b4:	2b1f      	cmp	r3, #31
 80109b6:	dd55      	ble.n	8010a64 <_strtod_l+0x694>
 80109b8:	2b34      	cmp	r3, #52	@ 0x34
 80109ba:	bfde      	ittt	le
 80109bc:	f04f 33ff 	movle.w	r3, #4294967295
 80109c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80109c4:	4093      	lslle	r3, r2
 80109c6:	f04f 0a00 	mov.w	sl, #0
 80109ca:	bfcc      	ite	gt
 80109cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80109d0:	ea03 0b01 	andle.w	fp, r3, r1
 80109d4:	2200      	movs	r2, #0
 80109d6:	2300      	movs	r3, #0
 80109d8:	4650      	mov	r0, sl
 80109da:	4659      	mov	r1, fp
 80109dc:	f7f0 f89c 	bl	8000b18 <__aeabi_dcmpeq>
 80109e0:	2800      	cmp	r0, #0
 80109e2:	d1a6      	bne.n	8010932 <_strtod_l+0x562>
 80109e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109e6:	9300      	str	r3, [sp, #0]
 80109e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80109ea:	9805      	ldr	r0, [sp, #20]
 80109ec:	462b      	mov	r3, r5
 80109ee:	463a      	mov	r2, r7
 80109f0:	f7ff f8c4 	bl	800fb7c <__s2b>
 80109f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80109f6:	2800      	cmp	r0, #0
 80109f8:	f43f af05 	beq.w	8010806 <_strtod_l+0x436>
 80109fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109fe:	2a00      	cmp	r2, #0
 8010a00:	eba9 0308 	sub.w	r3, r9, r8
 8010a04:	bfa8      	it	ge
 8010a06:	2300      	movge	r3, #0
 8010a08:	9312      	str	r3, [sp, #72]	@ 0x48
 8010a0a:	2400      	movs	r4, #0
 8010a0c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010a10:	9316      	str	r3, [sp, #88]	@ 0x58
 8010a12:	46a0      	mov	r8, r4
 8010a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a16:	9805      	ldr	r0, [sp, #20]
 8010a18:	6859      	ldr	r1, [r3, #4]
 8010a1a:	f7ff f807 	bl	800fa2c <_Balloc>
 8010a1e:	4681      	mov	r9, r0
 8010a20:	2800      	cmp	r0, #0
 8010a22:	f43f aef4 	beq.w	801080e <_strtod_l+0x43e>
 8010a26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a28:	691a      	ldr	r2, [r3, #16]
 8010a2a:	3202      	adds	r2, #2
 8010a2c:	f103 010c 	add.w	r1, r3, #12
 8010a30:	0092      	lsls	r2, r2, #2
 8010a32:	300c      	adds	r0, #12
 8010a34:	f7fe f94d 	bl	800ecd2 <memcpy>
 8010a38:	ec4b ab10 	vmov	d0, sl, fp
 8010a3c:	9805      	ldr	r0, [sp, #20]
 8010a3e:	aa1c      	add	r2, sp, #112	@ 0x70
 8010a40:	a91b      	add	r1, sp, #108	@ 0x6c
 8010a42:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010a46:	f7ff fbd5 	bl	80101f4 <__d2b>
 8010a4a:	901a      	str	r0, [sp, #104]	@ 0x68
 8010a4c:	2800      	cmp	r0, #0
 8010a4e:	f43f aede 	beq.w	801080e <_strtod_l+0x43e>
 8010a52:	9805      	ldr	r0, [sp, #20]
 8010a54:	2101      	movs	r1, #1
 8010a56:	f7ff f927 	bl	800fca8 <__i2b>
 8010a5a:	4680      	mov	r8, r0
 8010a5c:	b948      	cbnz	r0, 8010a72 <_strtod_l+0x6a2>
 8010a5e:	f04f 0800 	mov.w	r8, #0
 8010a62:	e6d4      	b.n	801080e <_strtod_l+0x43e>
 8010a64:	f04f 32ff 	mov.w	r2, #4294967295
 8010a68:	fa02 f303 	lsl.w	r3, r2, r3
 8010a6c:	ea03 0a0a 	and.w	sl, r3, sl
 8010a70:	e7b0      	b.n	80109d4 <_strtod_l+0x604>
 8010a72:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010a74:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010a76:	2d00      	cmp	r5, #0
 8010a78:	bfab      	itete	ge
 8010a7a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010a7c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010a7e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010a80:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010a82:	bfac      	ite	ge
 8010a84:	18ef      	addge	r7, r5, r3
 8010a86:	1b5e      	sublt	r6, r3, r5
 8010a88:	9b08      	ldr	r3, [sp, #32]
 8010a8a:	1aed      	subs	r5, r5, r3
 8010a8c:	4415      	add	r5, r2
 8010a8e:	4b66      	ldr	r3, [pc, #408]	@ (8010c28 <_strtod_l+0x858>)
 8010a90:	3d01      	subs	r5, #1
 8010a92:	429d      	cmp	r5, r3
 8010a94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010a98:	da50      	bge.n	8010b3c <_strtod_l+0x76c>
 8010a9a:	1b5b      	subs	r3, r3, r5
 8010a9c:	2b1f      	cmp	r3, #31
 8010a9e:	eba2 0203 	sub.w	r2, r2, r3
 8010aa2:	f04f 0101 	mov.w	r1, #1
 8010aa6:	dc3d      	bgt.n	8010b24 <_strtod_l+0x754>
 8010aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8010aac:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010aae:	2300      	movs	r3, #0
 8010ab0:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ab2:	18bd      	adds	r5, r7, r2
 8010ab4:	9b08      	ldr	r3, [sp, #32]
 8010ab6:	42af      	cmp	r7, r5
 8010ab8:	4416      	add	r6, r2
 8010aba:	441e      	add	r6, r3
 8010abc:	463b      	mov	r3, r7
 8010abe:	bfa8      	it	ge
 8010ac0:	462b      	movge	r3, r5
 8010ac2:	42b3      	cmp	r3, r6
 8010ac4:	bfa8      	it	ge
 8010ac6:	4633      	movge	r3, r6
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	bfc2      	ittt	gt
 8010acc:	1aed      	subgt	r5, r5, r3
 8010ace:	1af6      	subgt	r6, r6, r3
 8010ad0:	1aff      	subgt	r7, r7, r3
 8010ad2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	dd16      	ble.n	8010b06 <_strtod_l+0x736>
 8010ad8:	4641      	mov	r1, r8
 8010ada:	9805      	ldr	r0, [sp, #20]
 8010adc:	461a      	mov	r2, r3
 8010ade:	f7ff f9a3 	bl	800fe28 <__pow5mult>
 8010ae2:	4680      	mov	r8, r0
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	d0ba      	beq.n	8010a5e <_strtod_l+0x68e>
 8010ae8:	4601      	mov	r1, r0
 8010aea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010aec:	9805      	ldr	r0, [sp, #20]
 8010aee:	f7ff f8f1 	bl	800fcd4 <__multiply>
 8010af2:	900e      	str	r0, [sp, #56]	@ 0x38
 8010af4:	2800      	cmp	r0, #0
 8010af6:	f43f ae8a 	beq.w	801080e <_strtod_l+0x43e>
 8010afa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010afc:	9805      	ldr	r0, [sp, #20]
 8010afe:	f7fe ffd5 	bl	800faac <_Bfree>
 8010b02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b04:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b06:	2d00      	cmp	r5, #0
 8010b08:	dc1d      	bgt.n	8010b46 <_strtod_l+0x776>
 8010b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	dd23      	ble.n	8010b58 <_strtod_l+0x788>
 8010b10:	4649      	mov	r1, r9
 8010b12:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010b14:	9805      	ldr	r0, [sp, #20]
 8010b16:	f7ff f987 	bl	800fe28 <__pow5mult>
 8010b1a:	4681      	mov	r9, r0
 8010b1c:	b9e0      	cbnz	r0, 8010b58 <_strtod_l+0x788>
 8010b1e:	f04f 0900 	mov.w	r9, #0
 8010b22:	e674      	b.n	801080e <_strtod_l+0x43e>
 8010b24:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010b28:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010b2c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010b30:	35e2      	adds	r5, #226	@ 0xe2
 8010b32:	fa01 f305 	lsl.w	r3, r1, r5
 8010b36:	9310      	str	r3, [sp, #64]	@ 0x40
 8010b38:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010b3a:	e7ba      	b.n	8010ab2 <_strtod_l+0x6e2>
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010b40:	2301      	movs	r3, #1
 8010b42:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010b44:	e7b5      	b.n	8010ab2 <_strtod_l+0x6e2>
 8010b46:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010b48:	9805      	ldr	r0, [sp, #20]
 8010b4a:	462a      	mov	r2, r5
 8010b4c:	f7ff f9c6 	bl	800fedc <__lshift>
 8010b50:	901a      	str	r0, [sp, #104]	@ 0x68
 8010b52:	2800      	cmp	r0, #0
 8010b54:	d1d9      	bne.n	8010b0a <_strtod_l+0x73a>
 8010b56:	e65a      	b.n	801080e <_strtod_l+0x43e>
 8010b58:	2e00      	cmp	r6, #0
 8010b5a:	dd07      	ble.n	8010b6c <_strtod_l+0x79c>
 8010b5c:	4649      	mov	r1, r9
 8010b5e:	9805      	ldr	r0, [sp, #20]
 8010b60:	4632      	mov	r2, r6
 8010b62:	f7ff f9bb 	bl	800fedc <__lshift>
 8010b66:	4681      	mov	r9, r0
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d0d8      	beq.n	8010b1e <_strtod_l+0x74e>
 8010b6c:	2f00      	cmp	r7, #0
 8010b6e:	dd08      	ble.n	8010b82 <_strtod_l+0x7b2>
 8010b70:	4641      	mov	r1, r8
 8010b72:	9805      	ldr	r0, [sp, #20]
 8010b74:	463a      	mov	r2, r7
 8010b76:	f7ff f9b1 	bl	800fedc <__lshift>
 8010b7a:	4680      	mov	r8, r0
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	f43f ae46 	beq.w	801080e <_strtod_l+0x43e>
 8010b82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010b84:	9805      	ldr	r0, [sp, #20]
 8010b86:	464a      	mov	r2, r9
 8010b88:	f7ff fa30 	bl	800ffec <__mdiff>
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	f43f ae3d 	beq.w	801080e <_strtod_l+0x43e>
 8010b94:	68c3      	ldr	r3, [r0, #12]
 8010b96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b98:	2300      	movs	r3, #0
 8010b9a:	60c3      	str	r3, [r0, #12]
 8010b9c:	4641      	mov	r1, r8
 8010b9e:	f7ff fa09 	bl	800ffb4 <__mcmp>
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	da46      	bge.n	8010c34 <_strtod_l+0x864>
 8010ba6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ba8:	ea53 030a 	orrs.w	r3, r3, sl
 8010bac:	d16c      	bne.n	8010c88 <_strtod_l+0x8b8>
 8010bae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d168      	bne.n	8010c88 <_strtod_l+0x8b8>
 8010bb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010bba:	0d1b      	lsrs	r3, r3, #20
 8010bbc:	051b      	lsls	r3, r3, #20
 8010bbe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010bc2:	d961      	bls.n	8010c88 <_strtod_l+0x8b8>
 8010bc4:	6963      	ldr	r3, [r4, #20]
 8010bc6:	b913      	cbnz	r3, 8010bce <_strtod_l+0x7fe>
 8010bc8:	6923      	ldr	r3, [r4, #16]
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	dd5c      	ble.n	8010c88 <_strtod_l+0x8b8>
 8010bce:	4621      	mov	r1, r4
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	9805      	ldr	r0, [sp, #20]
 8010bd4:	f7ff f982 	bl	800fedc <__lshift>
 8010bd8:	4641      	mov	r1, r8
 8010bda:	4604      	mov	r4, r0
 8010bdc:	f7ff f9ea 	bl	800ffb4 <__mcmp>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	dd51      	ble.n	8010c88 <_strtod_l+0x8b8>
 8010be4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010be8:	9a08      	ldr	r2, [sp, #32]
 8010bea:	0d1b      	lsrs	r3, r3, #20
 8010bec:	051b      	lsls	r3, r3, #20
 8010bee:	2a00      	cmp	r2, #0
 8010bf0:	d06b      	beq.n	8010cca <_strtod_l+0x8fa>
 8010bf2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010bf6:	d868      	bhi.n	8010cca <_strtod_l+0x8fa>
 8010bf8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010bfc:	f67f ae9d 	bls.w	801093a <_strtod_l+0x56a>
 8010c00:	4b0a      	ldr	r3, [pc, #40]	@ (8010c2c <_strtod_l+0x85c>)
 8010c02:	4650      	mov	r0, sl
 8010c04:	4659      	mov	r1, fp
 8010c06:	2200      	movs	r2, #0
 8010c08:	f7ef fd1e 	bl	8000648 <__aeabi_dmul>
 8010c0c:	4b08      	ldr	r3, [pc, #32]	@ (8010c30 <_strtod_l+0x860>)
 8010c0e:	400b      	ands	r3, r1
 8010c10:	4682      	mov	sl, r0
 8010c12:	468b      	mov	fp, r1
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	f47f ae05 	bne.w	8010824 <_strtod_l+0x454>
 8010c1a:	9a05      	ldr	r2, [sp, #20]
 8010c1c:	2322      	movs	r3, #34	@ 0x22
 8010c1e:	6013      	str	r3, [r2, #0]
 8010c20:	e600      	b.n	8010824 <_strtod_l+0x454>
 8010c22:	bf00      	nop
 8010c24:	08013498 	.word	0x08013498
 8010c28:	fffffc02 	.word	0xfffffc02
 8010c2c:	39500000 	.word	0x39500000
 8010c30:	7ff00000 	.word	0x7ff00000
 8010c34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010c38:	d165      	bne.n	8010d06 <_strtod_l+0x936>
 8010c3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010c3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c40:	b35a      	cbz	r2, 8010c9a <_strtod_l+0x8ca>
 8010c42:	4a9f      	ldr	r2, [pc, #636]	@ (8010ec0 <_strtod_l+0xaf0>)
 8010c44:	4293      	cmp	r3, r2
 8010c46:	d12b      	bne.n	8010ca0 <_strtod_l+0x8d0>
 8010c48:	9b08      	ldr	r3, [sp, #32]
 8010c4a:	4651      	mov	r1, sl
 8010c4c:	b303      	cbz	r3, 8010c90 <_strtod_l+0x8c0>
 8010c4e:	4b9d      	ldr	r3, [pc, #628]	@ (8010ec4 <_strtod_l+0xaf4>)
 8010c50:	465a      	mov	r2, fp
 8010c52:	4013      	ands	r3, r2
 8010c54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010c58:	f04f 32ff 	mov.w	r2, #4294967295
 8010c5c:	d81b      	bhi.n	8010c96 <_strtod_l+0x8c6>
 8010c5e:	0d1b      	lsrs	r3, r3, #20
 8010c60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010c64:	fa02 f303 	lsl.w	r3, r2, r3
 8010c68:	4299      	cmp	r1, r3
 8010c6a:	d119      	bne.n	8010ca0 <_strtod_l+0x8d0>
 8010c6c:	4b96      	ldr	r3, [pc, #600]	@ (8010ec8 <_strtod_l+0xaf8>)
 8010c6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d102      	bne.n	8010c7a <_strtod_l+0x8aa>
 8010c74:	3101      	adds	r1, #1
 8010c76:	f43f adca 	beq.w	801080e <_strtod_l+0x43e>
 8010c7a:	4b92      	ldr	r3, [pc, #584]	@ (8010ec4 <_strtod_l+0xaf4>)
 8010c7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c7e:	401a      	ands	r2, r3
 8010c80:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010c84:	f04f 0a00 	mov.w	sl, #0
 8010c88:	9b08      	ldr	r3, [sp, #32]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d1b8      	bne.n	8010c00 <_strtod_l+0x830>
 8010c8e:	e5c9      	b.n	8010824 <_strtod_l+0x454>
 8010c90:	f04f 33ff 	mov.w	r3, #4294967295
 8010c94:	e7e8      	b.n	8010c68 <_strtod_l+0x898>
 8010c96:	4613      	mov	r3, r2
 8010c98:	e7e6      	b.n	8010c68 <_strtod_l+0x898>
 8010c9a:	ea53 030a 	orrs.w	r3, r3, sl
 8010c9e:	d0a1      	beq.n	8010be4 <_strtod_l+0x814>
 8010ca0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010ca2:	b1db      	cbz	r3, 8010cdc <_strtod_l+0x90c>
 8010ca4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ca6:	4213      	tst	r3, r2
 8010ca8:	d0ee      	beq.n	8010c88 <_strtod_l+0x8b8>
 8010caa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cac:	9a08      	ldr	r2, [sp, #32]
 8010cae:	4650      	mov	r0, sl
 8010cb0:	4659      	mov	r1, fp
 8010cb2:	b1bb      	cbz	r3, 8010ce4 <_strtod_l+0x914>
 8010cb4:	f7ff fb6c 	bl	8010390 <sulp>
 8010cb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010cbc:	ec53 2b10 	vmov	r2, r3, d0
 8010cc0:	f7ef fb0c 	bl	80002dc <__adddf3>
 8010cc4:	4682      	mov	sl, r0
 8010cc6:	468b      	mov	fp, r1
 8010cc8:	e7de      	b.n	8010c88 <_strtod_l+0x8b8>
 8010cca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010cce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010cd2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010cd6:	f04f 3aff 	mov.w	sl, #4294967295
 8010cda:	e7d5      	b.n	8010c88 <_strtod_l+0x8b8>
 8010cdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010cde:	ea13 0f0a 	tst.w	r3, sl
 8010ce2:	e7e1      	b.n	8010ca8 <_strtod_l+0x8d8>
 8010ce4:	f7ff fb54 	bl	8010390 <sulp>
 8010ce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010cec:	ec53 2b10 	vmov	r2, r3, d0
 8010cf0:	f7ef faf2 	bl	80002d8 <__aeabi_dsub>
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	4682      	mov	sl, r0
 8010cfa:	468b      	mov	fp, r1
 8010cfc:	f7ef ff0c 	bl	8000b18 <__aeabi_dcmpeq>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	d0c1      	beq.n	8010c88 <_strtod_l+0x8b8>
 8010d04:	e619      	b.n	801093a <_strtod_l+0x56a>
 8010d06:	4641      	mov	r1, r8
 8010d08:	4620      	mov	r0, r4
 8010d0a:	f7ff facb 	bl	80102a4 <__ratio>
 8010d0e:	ec57 6b10 	vmov	r6, r7, d0
 8010d12:	2200      	movs	r2, #0
 8010d14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010d18:	4630      	mov	r0, r6
 8010d1a:	4639      	mov	r1, r7
 8010d1c:	f7ef ff10 	bl	8000b40 <__aeabi_dcmple>
 8010d20:	2800      	cmp	r0, #0
 8010d22:	d06f      	beq.n	8010e04 <_strtod_l+0xa34>
 8010d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d17a      	bne.n	8010e20 <_strtod_l+0xa50>
 8010d2a:	f1ba 0f00 	cmp.w	sl, #0
 8010d2e:	d158      	bne.n	8010de2 <_strtod_l+0xa12>
 8010d30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d15a      	bne.n	8010df0 <_strtod_l+0xa20>
 8010d3a:	4b64      	ldr	r3, [pc, #400]	@ (8010ecc <_strtod_l+0xafc>)
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	4630      	mov	r0, r6
 8010d40:	4639      	mov	r1, r7
 8010d42:	f7ef fef3 	bl	8000b2c <__aeabi_dcmplt>
 8010d46:	2800      	cmp	r0, #0
 8010d48:	d159      	bne.n	8010dfe <_strtod_l+0xa2e>
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	4639      	mov	r1, r7
 8010d4e:	4b60      	ldr	r3, [pc, #384]	@ (8010ed0 <_strtod_l+0xb00>)
 8010d50:	2200      	movs	r2, #0
 8010d52:	f7ef fc79 	bl	8000648 <__aeabi_dmul>
 8010d56:	4606      	mov	r6, r0
 8010d58:	460f      	mov	r7, r1
 8010d5a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010d5e:	9606      	str	r6, [sp, #24]
 8010d60:	9307      	str	r3, [sp, #28]
 8010d62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d66:	4d57      	ldr	r5, [pc, #348]	@ (8010ec4 <_strtod_l+0xaf4>)
 8010d68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010d6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d6e:	401d      	ands	r5, r3
 8010d70:	4b58      	ldr	r3, [pc, #352]	@ (8010ed4 <_strtod_l+0xb04>)
 8010d72:	429d      	cmp	r5, r3
 8010d74:	f040 80b2 	bne.w	8010edc <_strtod_l+0xb0c>
 8010d78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010d7e:	ec4b ab10 	vmov	d0, sl, fp
 8010d82:	f7ff f9c7 	bl	8010114 <__ulp>
 8010d86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d8a:	ec51 0b10 	vmov	r0, r1, d0
 8010d8e:	f7ef fc5b 	bl	8000648 <__aeabi_dmul>
 8010d92:	4652      	mov	r2, sl
 8010d94:	465b      	mov	r3, fp
 8010d96:	f7ef faa1 	bl	80002dc <__adddf3>
 8010d9a:	460b      	mov	r3, r1
 8010d9c:	4949      	ldr	r1, [pc, #292]	@ (8010ec4 <_strtod_l+0xaf4>)
 8010d9e:	4a4e      	ldr	r2, [pc, #312]	@ (8010ed8 <_strtod_l+0xb08>)
 8010da0:	4019      	ands	r1, r3
 8010da2:	4291      	cmp	r1, r2
 8010da4:	4682      	mov	sl, r0
 8010da6:	d942      	bls.n	8010e2e <_strtod_l+0xa5e>
 8010da8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010daa:	4b47      	ldr	r3, [pc, #284]	@ (8010ec8 <_strtod_l+0xaf8>)
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d103      	bne.n	8010db8 <_strtod_l+0x9e8>
 8010db0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010db2:	3301      	adds	r3, #1
 8010db4:	f43f ad2b 	beq.w	801080e <_strtod_l+0x43e>
 8010db8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010ec8 <_strtod_l+0xaf8>
 8010dbc:	f04f 3aff 	mov.w	sl, #4294967295
 8010dc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010dc2:	9805      	ldr	r0, [sp, #20]
 8010dc4:	f7fe fe72 	bl	800faac <_Bfree>
 8010dc8:	9805      	ldr	r0, [sp, #20]
 8010dca:	4649      	mov	r1, r9
 8010dcc:	f7fe fe6e 	bl	800faac <_Bfree>
 8010dd0:	9805      	ldr	r0, [sp, #20]
 8010dd2:	4641      	mov	r1, r8
 8010dd4:	f7fe fe6a 	bl	800faac <_Bfree>
 8010dd8:	9805      	ldr	r0, [sp, #20]
 8010dda:	4621      	mov	r1, r4
 8010ddc:	f7fe fe66 	bl	800faac <_Bfree>
 8010de0:	e618      	b.n	8010a14 <_strtod_l+0x644>
 8010de2:	f1ba 0f01 	cmp.w	sl, #1
 8010de6:	d103      	bne.n	8010df0 <_strtod_l+0xa20>
 8010de8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	f43f ada5 	beq.w	801093a <_strtod_l+0x56a>
 8010df0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010ea0 <_strtod_l+0xad0>
 8010df4:	4f35      	ldr	r7, [pc, #212]	@ (8010ecc <_strtod_l+0xafc>)
 8010df6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010dfa:	2600      	movs	r6, #0
 8010dfc:	e7b1      	b.n	8010d62 <_strtod_l+0x992>
 8010dfe:	4f34      	ldr	r7, [pc, #208]	@ (8010ed0 <_strtod_l+0xb00>)
 8010e00:	2600      	movs	r6, #0
 8010e02:	e7aa      	b.n	8010d5a <_strtod_l+0x98a>
 8010e04:	4b32      	ldr	r3, [pc, #200]	@ (8010ed0 <_strtod_l+0xb00>)
 8010e06:	4630      	mov	r0, r6
 8010e08:	4639      	mov	r1, r7
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f7ef fc1c 	bl	8000648 <__aeabi_dmul>
 8010e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e12:	4606      	mov	r6, r0
 8010e14:	460f      	mov	r7, r1
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d09f      	beq.n	8010d5a <_strtod_l+0x98a>
 8010e1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010e1e:	e7a0      	b.n	8010d62 <_strtod_l+0x992>
 8010e20:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010ea8 <_strtod_l+0xad8>
 8010e24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010e28:	ec57 6b17 	vmov	r6, r7, d7
 8010e2c:	e799      	b.n	8010d62 <_strtod_l+0x992>
 8010e2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010e32:	9b08      	ldr	r3, [sp, #32]
 8010e34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1c1      	bne.n	8010dc0 <_strtod_l+0x9f0>
 8010e3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010e40:	0d1b      	lsrs	r3, r3, #20
 8010e42:	051b      	lsls	r3, r3, #20
 8010e44:	429d      	cmp	r5, r3
 8010e46:	d1bb      	bne.n	8010dc0 <_strtod_l+0x9f0>
 8010e48:	4630      	mov	r0, r6
 8010e4a:	4639      	mov	r1, r7
 8010e4c:	f7ef ff5c 	bl	8000d08 <__aeabi_d2lz>
 8010e50:	f7ef fbcc 	bl	80005ec <__aeabi_l2d>
 8010e54:	4602      	mov	r2, r0
 8010e56:	460b      	mov	r3, r1
 8010e58:	4630      	mov	r0, r6
 8010e5a:	4639      	mov	r1, r7
 8010e5c:	f7ef fa3c 	bl	80002d8 <__aeabi_dsub>
 8010e60:	460b      	mov	r3, r1
 8010e62:	4602      	mov	r2, r0
 8010e64:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010e68:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e6e:	ea46 060a 	orr.w	r6, r6, sl
 8010e72:	431e      	orrs	r6, r3
 8010e74:	d06f      	beq.n	8010f56 <_strtod_l+0xb86>
 8010e76:	a30e      	add	r3, pc, #56	@ (adr r3, 8010eb0 <_strtod_l+0xae0>)
 8010e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7c:	f7ef fe56 	bl	8000b2c <__aeabi_dcmplt>
 8010e80:	2800      	cmp	r0, #0
 8010e82:	f47f accf 	bne.w	8010824 <_strtod_l+0x454>
 8010e86:	a30c      	add	r3, pc, #48	@ (adr r3, 8010eb8 <_strtod_l+0xae8>)
 8010e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e90:	f7ef fe6a 	bl	8000b68 <__aeabi_dcmpgt>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	d093      	beq.n	8010dc0 <_strtod_l+0x9f0>
 8010e98:	e4c4      	b.n	8010824 <_strtod_l+0x454>
 8010e9a:	bf00      	nop
 8010e9c:	f3af 8000 	nop.w
 8010ea0:	00000000 	.word	0x00000000
 8010ea4:	bff00000 	.word	0xbff00000
 8010ea8:	00000000 	.word	0x00000000
 8010eac:	3ff00000 	.word	0x3ff00000
 8010eb0:	94a03595 	.word	0x94a03595
 8010eb4:	3fdfffff 	.word	0x3fdfffff
 8010eb8:	35afe535 	.word	0x35afe535
 8010ebc:	3fe00000 	.word	0x3fe00000
 8010ec0:	000fffff 	.word	0x000fffff
 8010ec4:	7ff00000 	.word	0x7ff00000
 8010ec8:	7fefffff 	.word	0x7fefffff
 8010ecc:	3ff00000 	.word	0x3ff00000
 8010ed0:	3fe00000 	.word	0x3fe00000
 8010ed4:	7fe00000 	.word	0x7fe00000
 8010ed8:	7c9fffff 	.word	0x7c9fffff
 8010edc:	9b08      	ldr	r3, [sp, #32]
 8010ede:	b323      	cbz	r3, 8010f2a <_strtod_l+0xb5a>
 8010ee0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010ee4:	d821      	bhi.n	8010f2a <_strtod_l+0xb5a>
 8010ee6:	a328      	add	r3, pc, #160	@ (adr r3, 8010f88 <_strtod_l+0xbb8>)
 8010ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eec:	4630      	mov	r0, r6
 8010eee:	4639      	mov	r1, r7
 8010ef0:	f7ef fe26 	bl	8000b40 <__aeabi_dcmple>
 8010ef4:	b1a0      	cbz	r0, 8010f20 <_strtod_l+0xb50>
 8010ef6:	4639      	mov	r1, r7
 8010ef8:	4630      	mov	r0, r6
 8010efa:	f7ef fe7d 	bl	8000bf8 <__aeabi_d2uiz>
 8010efe:	2801      	cmp	r0, #1
 8010f00:	bf38      	it	cc
 8010f02:	2001      	movcc	r0, #1
 8010f04:	f7ef fb26 	bl	8000554 <__aeabi_ui2d>
 8010f08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f0a:	4606      	mov	r6, r0
 8010f0c:	460f      	mov	r7, r1
 8010f0e:	b9fb      	cbnz	r3, 8010f50 <_strtod_l+0xb80>
 8010f10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010f14:	9014      	str	r0, [sp, #80]	@ 0x50
 8010f16:	9315      	str	r3, [sp, #84]	@ 0x54
 8010f18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010f1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010f20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010f22:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010f26:	1b5b      	subs	r3, r3, r5
 8010f28:	9311      	str	r3, [sp, #68]	@ 0x44
 8010f2a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010f2e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010f32:	f7ff f8ef 	bl	8010114 <__ulp>
 8010f36:	4650      	mov	r0, sl
 8010f38:	ec53 2b10 	vmov	r2, r3, d0
 8010f3c:	4659      	mov	r1, fp
 8010f3e:	f7ef fb83 	bl	8000648 <__aeabi_dmul>
 8010f42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010f46:	f7ef f9c9 	bl	80002dc <__adddf3>
 8010f4a:	4682      	mov	sl, r0
 8010f4c:	468b      	mov	fp, r1
 8010f4e:	e770      	b.n	8010e32 <_strtod_l+0xa62>
 8010f50:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010f54:	e7e0      	b.n	8010f18 <_strtod_l+0xb48>
 8010f56:	a30e      	add	r3, pc, #56	@ (adr r3, 8010f90 <_strtod_l+0xbc0>)
 8010f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5c:	f7ef fde6 	bl	8000b2c <__aeabi_dcmplt>
 8010f60:	e798      	b.n	8010e94 <_strtod_l+0xac4>
 8010f62:	2300      	movs	r3, #0
 8010f64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010f68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f6a:	6013      	str	r3, [r2, #0]
 8010f6c:	f7ff ba6d 	b.w	801044a <_strtod_l+0x7a>
 8010f70:	2a65      	cmp	r2, #101	@ 0x65
 8010f72:	f43f ab66 	beq.w	8010642 <_strtod_l+0x272>
 8010f76:	2a45      	cmp	r2, #69	@ 0x45
 8010f78:	f43f ab63 	beq.w	8010642 <_strtod_l+0x272>
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	f7ff bb9e 	b.w	80106be <_strtod_l+0x2ee>
 8010f82:	bf00      	nop
 8010f84:	f3af 8000 	nop.w
 8010f88:	ffc00000 	.word	0xffc00000
 8010f8c:	41dfffff 	.word	0x41dfffff
 8010f90:	94a03595 	.word	0x94a03595
 8010f94:	3fcfffff 	.word	0x3fcfffff

08010f98 <_strtod_r>:
 8010f98:	4b01      	ldr	r3, [pc, #4]	@ (8010fa0 <_strtod_r+0x8>)
 8010f9a:	f7ff ba19 	b.w	80103d0 <_strtod_l>
 8010f9e:	bf00      	nop
 8010fa0:	20000068 	.word	0x20000068

08010fa4 <_strtol_l.constprop.0>:
 8010fa4:	2b24      	cmp	r3, #36	@ 0x24
 8010fa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010faa:	4686      	mov	lr, r0
 8010fac:	4690      	mov	r8, r2
 8010fae:	d801      	bhi.n	8010fb4 <_strtol_l.constprop.0+0x10>
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d106      	bne.n	8010fc2 <_strtol_l.constprop.0+0x1e>
 8010fb4:	f7fd fe60 	bl	800ec78 <__errno>
 8010fb8:	2316      	movs	r3, #22
 8010fba:	6003      	str	r3, [r0, #0]
 8010fbc:	2000      	movs	r0, #0
 8010fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fc2:	4834      	ldr	r0, [pc, #208]	@ (8011094 <_strtol_l.constprop.0+0xf0>)
 8010fc4:	460d      	mov	r5, r1
 8010fc6:	462a      	mov	r2, r5
 8010fc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010fcc:	5d06      	ldrb	r6, [r0, r4]
 8010fce:	f016 0608 	ands.w	r6, r6, #8
 8010fd2:	d1f8      	bne.n	8010fc6 <_strtol_l.constprop.0+0x22>
 8010fd4:	2c2d      	cmp	r4, #45	@ 0x2d
 8010fd6:	d12d      	bne.n	8011034 <_strtol_l.constprop.0+0x90>
 8010fd8:	782c      	ldrb	r4, [r5, #0]
 8010fda:	2601      	movs	r6, #1
 8010fdc:	1c95      	adds	r5, r2, #2
 8010fde:	f033 0210 	bics.w	r2, r3, #16
 8010fe2:	d109      	bne.n	8010ff8 <_strtol_l.constprop.0+0x54>
 8010fe4:	2c30      	cmp	r4, #48	@ 0x30
 8010fe6:	d12a      	bne.n	801103e <_strtol_l.constprop.0+0x9a>
 8010fe8:	782a      	ldrb	r2, [r5, #0]
 8010fea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010fee:	2a58      	cmp	r2, #88	@ 0x58
 8010ff0:	d125      	bne.n	801103e <_strtol_l.constprop.0+0x9a>
 8010ff2:	786c      	ldrb	r4, [r5, #1]
 8010ff4:	2310      	movs	r3, #16
 8010ff6:	3502      	adds	r5, #2
 8010ff8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010ffc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011000:	2200      	movs	r2, #0
 8011002:	fbbc f9f3 	udiv	r9, ip, r3
 8011006:	4610      	mov	r0, r2
 8011008:	fb03 ca19 	mls	sl, r3, r9, ip
 801100c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011010:	2f09      	cmp	r7, #9
 8011012:	d81b      	bhi.n	801104c <_strtol_l.constprop.0+0xa8>
 8011014:	463c      	mov	r4, r7
 8011016:	42a3      	cmp	r3, r4
 8011018:	dd27      	ble.n	801106a <_strtol_l.constprop.0+0xc6>
 801101a:	1c57      	adds	r7, r2, #1
 801101c:	d007      	beq.n	801102e <_strtol_l.constprop.0+0x8a>
 801101e:	4581      	cmp	r9, r0
 8011020:	d320      	bcc.n	8011064 <_strtol_l.constprop.0+0xc0>
 8011022:	d101      	bne.n	8011028 <_strtol_l.constprop.0+0x84>
 8011024:	45a2      	cmp	sl, r4
 8011026:	db1d      	blt.n	8011064 <_strtol_l.constprop.0+0xc0>
 8011028:	fb00 4003 	mla	r0, r0, r3, r4
 801102c:	2201      	movs	r2, #1
 801102e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011032:	e7eb      	b.n	801100c <_strtol_l.constprop.0+0x68>
 8011034:	2c2b      	cmp	r4, #43	@ 0x2b
 8011036:	bf04      	itt	eq
 8011038:	782c      	ldrbeq	r4, [r5, #0]
 801103a:	1c95      	addeq	r5, r2, #2
 801103c:	e7cf      	b.n	8010fde <_strtol_l.constprop.0+0x3a>
 801103e:	2b00      	cmp	r3, #0
 8011040:	d1da      	bne.n	8010ff8 <_strtol_l.constprop.0+0x54>
 8011042:	2c30      	cmp	r4, #48	@ 0x30
 8011044:	bf0c      	ite	eq
 8011046:	2308      	moveq	r3, #8
 8011048:	230a      	movne	r3, #10
 801104a:	e7d5      	b.n	8010ff8 <_strtol_l.constprop.0+0x54>
 801104c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011050:	2f19      	cmp	r7, #25
 8011052:	d801      	bhi.n	8011058 <_strtol_l.constprop.0+0xb4>
 8011054:	3c37      	subs	r4, #55	@ 0x37
 8011056:	e7de      	b.n	8011016 <_strtol_l.constprop.0+0x72>
 8011058:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801105c:	2f19      	cmp	r7, #25
 801105e:	d804      	bhi.n	801106a <_strtol_l.constprop.0+0xc6>
 8011060:	3c57      	subs	r4, #87	@ 0x57
 8011062:	e7d8      	b.n	8011016 <_strtol_l.constprop.0+0x72>
 8011064:	f04f 32ff 	mov.w	r2, #4294967295
 8011068:	e7e1      	b.n	801102e <_strtol_l.constprop.0+0x8a>
 801106a:	1c53      	adds	r3, r2, #1
 801106c:	d108      	bne.n	8011080 <_strtol_l.constprop.0+0xdc>
 801106e:	2322      	movs	r3, #34	@ 0x22
 8011070:	f8ce 3000 	str.w	r3, [lr]
 8011074:	4660      	mov	r0, ip
 8011076:	f1b8 0f00 	cmp.w	r8, #0
 801107a:	d0a0      	beq.n	8010fbe <_strtol_l.constprop.0+0x1a>
 801107c:	1e69      	subs	r1, r5, #1
 801107e:	e006      	b.n	801108e <_strtol_l.constprop.0+0xea>
 8011080:	b106      	cbz	r6, 8011084 <_strtol_l.constprop.0+0xe0>
 8011082:	4240      	negs	r0, r0
 8011084:	f1b8 0f00 	cmp.w	r8, #0
 8011088:	d099      	beq.n	8010fbe <_strtol_l.constprop.0+0x1a>
 801108a:	2a00      	cmp	r2, #0
 801108c:	d1f6      	bne.n	801107c <_strtol_l.constprop.0+0xd8>
 801108e:	f8c8 1000 	str.w	r1, [r8]
 8011092:	e794      	b.n	8010fbe <_strtol_l.constprop.0+0x1a>
 8011094:	080134c1 	.word	0x080134c1

08011098 <_strtol_r>:
 8011098:	f7ff bf84 	b.w	8010fa4 <_strtol_l.constprop.0>

0801109c <__ssputs_r>:
 801109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110a0:	688e      	ldr	r6, [r1, #8]
 80110a2:	461f      	mov	r7, r3
 80110a4:	42be      	cmp	r6, r7
 80110a6:	680b      	ldr	r3, [r1, #0]
 80110a8:	4682      	mov	sl, r0
 80110aa:	460c      	mov	r4, r1
 80110ac:	4690      	mov	r8, r2
 80110ae:	d82d      	bhi.n	801110c <__ssputs_r+0x70>
 80110b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80110b8:	d026      	beq.n	8011108 <__ssputs_r+0x6c>
 80110ba:	6965      	ldr	r5, [r4, #20]
 80110bc:	6909      	ldr	r1, [r1, #16]
 80110be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80110c2:	eba3 0901 	sub.w	r9, r3, r1
 80110c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80110ca:	1c7b      	adds	r3, r7, #1
 80110cc:	444b      	add	r3, r9
 80110ce:	106d      	asrs	r5, r5, #1
 80110d0:	429d      	cmp	r5, r3
 80110d2:	bf38      	it	cc
 80110d4:	461d      	movcc	r5, r3
 80110d6:	0553      	lsls	r3, r2, #21
 80110d8:	d527      	bpl.n	801112a <__ssputs_r+0x8e>
 80110da:	4629      	mov	r1, r5
 80110dc:	f7fc fcca 	bl	800da74 <_malloc_r>
 80110e0:	4606      	mov	r6, r0
 80110e2:	b360      	cbz	r0, 801113e <__ssputs_r+0xa2>
 80110e4:	6921      	ldr	r1, [r4, #16]
 80110e6:	464a      	mov	r2, r9
 80110e8:	f7fd fdf3 	bl	800ecd2 <memcpy>
 80110ec:	89a3      	ldrh	r3, [r4, #12]
 80110ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80110f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110f6:	81a3      	strh	r3, [r4, #12]
 80110f8:	6126      	str	r6, [r4, #16]
 80110fa:	6165      	str	r5, [r4, #20]
 80110fc:	444e      	add	r6, r9
 80110fe:	eba5 0509 	sub.w	r5, r5, r9
 8011102:	6026      	str	r6, [r4, #0]
 8011104:	60a5      	str	r5, [r4, #8]
 8011106:	463e      	mov	r6, r7
 8011108:	42be      	cmp	r6, r7
 801110a:	d900      	bls.n	801110e <__ssputs_r+0x72>
 801110c:	463e      	mov	r6, r7
 801110e:	6820      	ldr	r0, [r4, #0]
 8011110:	4632      	mov	r2, r6
 8011112:	4641      	mov	r1, r8
 8011114:	f7fd fcdd 	bl	800ead2 <memmove>
 8011118:	68a3      	ldr	r3, [r4, #8]
 801111a:	1b9b      	subs	r3, r3, r6
 801111c:	60a3      	str	r3, [r4, #8]
 801111e:	6823      	ldr	r3, [r4, #0]
 8011120:	4433      	add	r3, r6
 8011122:	6023      	str	r3, [r4, #0]
 8011124:	2000      	movs	r0, #0
 8011126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801112a:	462a      	mov	r2, r5
 801112c:	f000 ff0b 	bl	8011f46 <_realloc_r>
 8011130:	4606      	mov	r6, r0
 8011132:	2800      	cmp	r0, #0
 8011134:	d1e0      	bne.n	80110f8 <__ssputs_r+0x5c>
 8011136:	6921      	ldr	r1, [r4, #16]
 8011138:	4650      	mov	r0, sl
 801113a:	f7fe fc2d 	bl	800f998 <_free_r>
 801113e:	230c      	movs	r3, #12
 8011140:	f8ca 3000 	str.w	r3, [sl]
 8011144:	89a3      	ldrh	r3, [r4, #12]
 8011146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801114a:	81a3      	strh	r3, [r4, #12]
 801114c:	f04f 30ff 	mov.w	r0, #4294967295
 8011150:	e7e9      	b.n	8011126 <__ssputs_r+0x8a>
	...

08011154 <_svfiprintf_r>:
 8011154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011158:	4698      	mov	r8, r3
 801115a:	898b      	ldrh	r3, [r1, #12]
 801115c:	061b      	lsls	r3, r3, #24
 801115e:	b09d      	sub	sp, #116	@ 0x74
 8011160:	4607      	mov	r7, r0
 8011162:	460d      	mov	r5, r1
 8011164:	4614      	mov	r4, r2
 8011166:	d510      	bpl.n	801118a <_svfiprintf_r+0x36>
 8011168:	690b      	ldr	r3, [r1, #16]
 801116a:	b973      	cbnz	r3, 801118a <_svfiprintf_r+0x36>
 801116c:	2140      	movs	r1, #64	@ 0x40
 801116e:	f7fc fc81 	bl	800da74 <_malloc_r>
 8011172:	6028      	str	r0, [r5, #0]
 8011174:	6128      	str	r0, [r5, #16]
 8011176:	b930      	cbnz	r0, 8011186 <_svfiprintf_r+0x32>
 8011178:	230c      	movs	r3, #12
 801117a:	603b      	str	r3, [r7, #0]
 801117c:	f04f 30ff 	mov.w	r0, #4294967295
 8011180:	b01d      	add	sp, #116	@ 0x74
 8011182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011186:	2340      	movs	r3, #64	@ 0x40
 8011188:	616b      	str	r3, [r5, #20]
 801118a:	2300      	movs	r3, #0
 801118c:	9309      	str	r3, [sp, #36]	@ 0x24
 801118e:	2320      	movs	r3, #32
 8011190:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011194:	f8cd 800c 	str.w	r8, [sp, #12]
 8011198:	2330      	movs	r3, #48	@ 0x30
 801119a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011338 <_svfiprintf_r+0x1e4>
 801119e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80111a2:	f04f 0901 	mov.w	r9, #1
 80111a6:	4623      	mov	r3, r4
 80111a8:	469a      	mov	sl, r3
 80111aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111ae:	b10a      	cbz	r2, 80111b4 <_svfiprintf_r+0x60>
 80111b0:	2a25      	cmp	r2, #37	@ 0x25
 80111b2:	d1f9      	bne.n	80111a8 <_svfiprintf_r+0x54>
 80111b4:	ebba 0b04 	subs.w	fp, sl, r4
 80111b8:	d00b      	beq.n	80111d2 <_svfiprintf_r+0x7e>
 80111ba:	465b      	mov	r3, fp
 80111bc:	4622      	mov	r2, r4
 80111be:	4629      	mov	r1, r5
 80111c0:	4638      	mov	r0, r7
 80111c2:	f7ff ff6b 	bl	801109c <__ssputs_r>
 80111c6:	3001      	adds	r0, #1
 80111c8:	f000 80a7 	beq.w	801131a <_svfiprintf_r+0x1c6>
 80111cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111ce:	445a      	add	r2, fp
 80111d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80111d2:	f89a 3000 	ldrb.w	r3, [sl]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	f000 809f 	beq.w	801131a <_svfiprintf_r+0x1c6>
 80111dc:	2300      	movs	r3, #0
 80111de:	f04f 32ff 	mov.w	r2, #4294967295
 80111e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111e6:	f10a 0a01 	add.w	sl, sl, #1
 80111ea:	9304      	str	r3, [sp, #16]
 80111ec:	9307      	str	r3, [sp, #28]
 80111ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80111f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80111f4:	4654      	mov	r4, sl
 80111f6:	2205      	movs	r2, #5
 80111f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111fc:	484e      	ldr	r0, [pc, #312]	@ (8011338 <_svfiprintf_r+0x1e4>)
 80111fe:	f7ef f80f 	bl	8000220 <memchr>
 8011202:	9a04      	ldr	r2, [sp, #16]
 8011204:	b9d8      	cbnz	r0, 801123e <_svfiprintf_r+0xea>
 8011206:	06d0      	lsls	r0, r2, #27
 8011208:	bf44      	itt	mi
 801120a:	2320      	movmi	r3, #32
 801120c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011210:	0711      	lsls	r1, r2, #28
 8011212:	bf44      	itt	mi
 8011214:	232b      	movmi	r3, #43	@ 0x2b
 8011216:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801121a:	f89a 3000 	ldrb.w	r3, [sl]
 801121e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011220:	d015      	beq.n	801124e <_svfiprintf_r+0xfa>
 8011222:	9a07      	ldr	r2, [sp, #28]
 8011224:	4654      	mov	r4, sl
 8011226:	2000      	movs	r0, #0
 8011228:	f04f 0c0a 	mov.w	ip, #10
 801122c:	4621      	mov	r1, r4
 801122e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011232:	3b30      	subs	r3, #48	@ 0x30
 8011234:	2b09      	cmp	r3, #9
 8011236:	d94b      	bls.n	80112d0 <_svfiprintf_r+0x17c>
 8011238:	b1b0      	cbz	r0, 8011268 <_svfiprintf_r+0x114>
 801123a:	9207      	str	r2, [sp, #28]
 801123c:	e014      	b.n	8011268 <_svfiprintf_r+0x114>
 801123e:	eba0 0308 	sub.w	r3, r0, r8
 8011242:	fa09 f303 	lsl.w	r3, r9, r3
 8011246:	4313      	orrs	r3, r2
 8011248:	9304      	str	r3, [sp, #16]
 801124a:	46a2      	mov	sl, r4
 801124c:	e7d2      	b.n	80111f4 <_svfiprintf_r+0xa0>
 801124e:	9b03      	ldr	r3, [sp, #12]
 8011250:	1d19      	adds	r1, r3, #4
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	9103      	str	r1, [sp, #12]
 8011256:	2b00      	cmp	r3, #0
 8011258:	bfbb      	ittet	lt
 801125a:	425b      	neglt	r3, r3
 801125c:	f042 0202 	orrlt.w	r2, r2, #2
 8011260:	9307      	strge	r3, [sp, #28]
 8011262:	9307      	strlt	r3, [sp, #28]
 8011264:	bfb8      	it	lt
 8011266:	9204      	strlt	r2, [sp, #16]
 8011268:	7823      	ldrb	r3, [r4, #0]
 801126a:	2b2e      	cmp	r3, #46	@ 0x2e
 801126c:	d10a      	bne.n	8011284 <_svfiprintf_r+0x130>
 801126e:	7863      	ldrb	r3, [r4, #1]
 8011270:	2b2a      	cmp	r3, #42	@ 0x2a
 8011272:	d132      	bne.n	80112da <_svfiprintf_r+0x186>
 8011274:	9b03      	ldr	r3, [sp, #12]
 8011276:	1d1a      	adds	r2, r3, #4
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	9203      	str	r2, [sp, #12]
 801127c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011280:	3402      	adds	r4, #2
 8011282:	9305      	str	r3, [sp, #20]
 8011284:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011348 <_svfiprintf_r+0x1f4>
 8011288:	7821      	ldrb	r1, [r4, #0]
 801128a:	2203      	movs	r2, #3
 801128c:	4650      	mov	r0, sl
 801128e:	f7ee ffc7 	bl	8000220 <memchr>
 8011292:	b138      	cbz	r0, 80112a4 <_svfiprintf_r+0x150>
 8011294:	9b04      	ldr	r3, [sp, #16]
 8011296:	eba0 000a 	sub.w	r0, r0, sl
 801129a:	2240      	movs	r2, #64	@ 0x40
 801129c:	4082      	lsls	r2, r0
 801129e:	4313      	orrs	r3, r2
 80112a0:	3401      	adds	r4, #1
 80112a2:	9304      	str	r3, [sp, #16]
 80112a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112a8:	4824      	ldr	r0, [pc, #144]	@ (801133c <_svfiprintf_r+0x1e8>)
 80112aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80112ae:	2206      	movs	r2, #6
 80112b0:	f7ee ffb6 	bl	8000220 <memchr>
 80112b4:	2800      	cmp	r0, #0
 80112b6:	d036      	beq.n	8011326 <_svfiprintf_r+0x1d2>
 80112b8:	4b21      	ldr	r3, [pc, #132]	@ (8011340 <_svfiprintf_r+0x1ec>)
 80112ba:	bb1b      	cbnz	r3, 8011304 <_svfiprintf_r+0x1b0>
 80112bc:	9b03      	ldr	r3, [sp, #12]
 80112be:	3307      	adds	r3, #7
 80112c0:	f023 0307 	bic.w	r3, r3, #7
 80112c4:	3308      	adds	r3, #8
 80112c6:	9303      	str	r3, [sp, #12]
 80112c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112ca:	4433      	add	r3, r6
 80112cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80112ce:	e76a      	b.n	80111a6 <_svfiprintf_r+0x52>
 80112d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80112d4:	460c      	mov	r4, r1
 80112d6:	2001      	movs	r0, #1
 80112d8:	e7a8      	b.n	801122c <_svfiprintf_r+0xd8>
 80112da:	2300      	movs	r3, #0
 80112dc:	3401      	adds	r4, #1
 80112de:	9305      	str	r3, [sp, #20]
 80112e0:	4619      	mov	r1, r3
 80112e2:	f04f 0c0a 	mov.w	ip, #10
 80112e6:	4620      	mov	r0, r4
 80112e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112ec:	3a30      	subs	r2, #48	@ 0x30
 80112ee:	2a09      	cmp	r2, #9
 80112f0:	d903      	bls.n	80112fa <_svfiprintf_r+0x1a6>
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d0c6      	beq.n	8011284 <_svfiprintf_r+0x130>
 80112f6:	9105      	str	r1, [sp, #20]
 80112f8:	e7c4      	b.n	8011284 <_svfiprintf_r+0x130>
 80112fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80112fe:	4604      	mov	r4, r0
 8011300:	2301      	movs	r3, #1
 8011302:	e7f0      	b.n	80112e6 <_svfiprintf_r+0x192>
 8011304:	ab03      	add	r3, sp, #12
 8011306:	9300      	str	r3, [sp, #0]
 8011308:	462a      	mov	r2, r5
 801130a:	4b0e      	ldr	r3, [pc, #56]	@ (8011344 <_svfiprintf_r+0x1f0>)
 801130c:	a904      	add	r1, sp, #16
 801130e:	4638      	mov	r0, r7
 8011310:	f7fc fcdc 	bl	800dccc <_printf_float>
 8011314:	1c42      	adds	r2, r0, #1
 8011316:	4606      	mov	r6, r0
 8011318:	d1d6      	bne.n	80112c8 <_svfiprintf_r+0x174>
 801131a:	89ab      	ldrh	r3, [r5, #12]
 801131c:	065b      	lsls	r3, r3, #25
 801131e:	f53f af2d 	bmi.w	801117c <_svfiprintf_r+0x28>
 8011322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011324:	e72c      	b.n	8011180 <_svfiprintf_r+0x2c>
 8011326:	ab03      	add	r3, sp, #12
 8011328:	9300      	str	r3, [sp, #0]
 801132a:	462a      	mov	r2, r5
 801132c:	4b05      	ldr	r3, [pc, #20]	@ (8011344 <_svfiprintf_r+0x1f0>)
 801132e:	a904      	add	r1, sp, #16
 8011330:	4638      	mov	r0, r7
 8011332:	f7fc ff63 	bl	800e1fc <_printf_i>
 8011336:	e7ed      	b.n	8011314 <_svfiprintf_r+0x1c0>
 8011338:	080135c1 	.word	0x080135c1
 801133c:	080135cb 	.word	0x080135cb
 8011340:	0800dccd 	.word	0x0800dccd
 8011344:	0801109d 	.word	0x0801109d
 8011348:	080135c7 	.word	0x080135c7

0801134c <__sfputc_r>:
 801134c:	6893      	ldr	r3, [r2, #8]
 801134e:	3b01      	subs	r3, #1
 8011350:	2b00      	cmp	r3, #0
 8011352:	b410      	push	{r4}
 8011354:	6093      	str	r3, [r2, #8]
 8011356:	da08      	bge.n	801136a <__sfputc_r+0x1e>
 8011358:	6994      	ldr	r4, [r2, #24]
 801135a:	42a3      	cmp	r3, r4
 801135c:	db01      	blt.n	8011362 <__sfputc_r+0x16>
 801135e:	290a      	cmp	r1, #10
 8011360:	d103      	bne.n	801136a <__sfputc_r+0x1e>
 8011362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011366:	f000 b9df 	b.w	8011728 <__swbuf_r>
 801136a:	6813      	ldr	r3, [r2, #0]
 801136c:	1c58      	adds	r0, r3, #1
 801136e:	6010      	str	r0, [r2, #0]
 8011370:	7019      	strb	r1, [r3, #0]
 8011372:	4608      	mov	r0, r1
 8011374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011378:	4770      	bx	lr

0801137a <__sfputs_r>:
 801137a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801137c:	4606      	mov	r6, r0
 801137e:	460f      	mov	r7, r1
 8011380:	4614      	mov	r4, r2
 8011382:	18d5      	adds	r5, r2, r3
 8011384:	42ac      	cmp	r4, r5
 8011386:	d101      	bne.n	801138c <__sfputs_r+0x12>
 8011388:	2000      	movs	r0, #0
 801138a:	e007      	b.n	801139c <__sfputs_r+0x22>
 801138c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011390:	463a      	mov	r2, r7
 8011392:	4630      	mov	r0, r6
 8011394:	f7ff ffda 	bl	801134c <__sfputc_r>
 8011398:	1c43      	adds	r3, r0, #1
 801139a:	d1f3      	bne.n	8011384 <__sfputs_r+0xa>
 801139c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080113a0 <_vfiprintf_r>:
 80113a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a4:	460d      	mov	r5, r1
 80113a6:	b09d      	sub	sp, #116	@ 0x74
 80113a8:	4614      	mov	r4, r2
 80113aa:	4698      	mov	r8, r3
 80113ac:	4606      	mov	r6, r0
 80113ae:	b118      	cbz	r0, 80113b8 <_vfiprintf_r+0x18>
 80113b0:	6a03      	ldr	r3, [r0, #32]
 80113b2:	b90b      	cbnz	r3, 80113b8 <_vfiprintf_r+0x18>
 80113b4:	f7fd fae2 	bl	800e97c <__sinit>
 80113b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113ba:	07d9      	lsls	r1, r3, #31
 80113bc:	d405      	bmi.n	80113ca <_vfiprintf_r+0x2a>
 80113be:	89ab      	ldrh	r3, [r5, #12]
 80113c0:	059a      	lsls	r2, r3, #22
 80113c2:	d402      	bmi.n	80113ca <_vfiprintf_r+0x2a>
 80113c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113c6:	f7fd fc82 	bl	800ecce <__retarget_lock_acquire_recursive>
 80113ca:	89ab      	ldrh	r3, [r5, #12]
 80113cc:	071b      	lsls	r3, r3, #28
 80113ce:	d501      	bpl.n	80113d4 <_vfiprintf_r+0x34>
 80113d0:	692b      	ldr	r3, [r5, #16]
 80113d2:	b99b      	cbnz	r3, 80113fc <_vfiprintf_r+0x5c>
 80113d4:	4629      	mov	r1, r5
 80113d6:	4630      	mov	r0, r6
 80113d8:	f000 f9e4 	bl	80117a4 <__swsetup_r>
 80113dc:	b170      	cbz	r0, 80113fc <_vfiprintf_r+0x5c>
 80113de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113e0:	07dc      	lsls	r4, r3, #31
 80113e2:	d504      	bpl.n	80113ee <_vfiprintf_r+0x4e>
 80113e4:	f04f 30ff 	mov.w	r0, #4294967295
 80113e8:	b01d      	add	sp, #116	@ 0x74
 80113ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ee:	89ab      	ldrh	r3, [r5, #12]
 80113f0:	0598      	lsls	r0, r3, #22
 80113f2:	d4f7      	bmi.n	80113e4 <_vfiprintf_r+0x44>
 80113f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113f6:	f7fd fc6b 	bl	800ecd0 <__retarget_lock_release_recursive>
 80113fa:	e7f3      	b.n	80113e4 <_vfiprintf_r+0x44>
 80113fc:	2300      	movs	r3, #0
 80113fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011400:	2320      	movs	r3, #32
 8011402:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011406:	f8cd 800c 	str.w	r8, [sp, #12]
 801140a:	2330      	movs	r3, #48	@ 0x30
 801140c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80115bc <_vfiprintf_r+0x21c>
 8011410:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011414:	f04f 0901 	mov.w	r9, #1
 8011418:	4623      	mov	r3, r4
 801141a:	469a      	mov	sl, r3
 801141c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011420:	b10a      	cbz	r2, 8011426 <_vfiprintf_r+0x86>
 8011422:	2a25      	cmp	r2, #37	@ 0x25
 8011424:	d1f9      	bne.n	801141a <_vfiprintf_r+0x7a>
 8011426:	ebba 0b04 	subs.w	fp, sl, r4
 801142a:	d00b      	beq.n	8011444 <_vfiprintf_r+0xa4>
 801142c:	465b      	mov	r3, fp
 801142e:	4622      	mov	r2, r4
 8011430:	4629      	mov	r1, r5
 8011432:	4630      	mov	r0, r6
 8011434:	f7ff ffa1 	bl	801137a <__sfputs_r>
 8011438:	3001      	adds	r0, #1
 801143a:	f000 80a7 	beq.w	801158c <_vfiprintf_r+0x1ec>
 801143e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011440:	445a      	add	r2, fp
 8011442:	9209      	str	r2, [sp, #36]	@ 0x24
 8011444:	f89a 3000 	ldrb.w	r3, [sl]
 8011448:	2b00      	cmp	r3, #0
 801144a:	f000 809f 	beq.w	801158c <_vfiprintf_r+0x1ec>
 801144e:	2300      	movs	r3, #0
 8011450:	f04f 32ff 	mov.w	r2, #4294967295
 8011454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011458:	f10a 0a01 	add.w	sl, sl, #1
 801145c:	9304      	str	r3, [sp, #16]
 801145e:	9307      	str	r3, [sp, #28]
 8011460:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011464:	931a      	str	r3, [sp, #104]	@ 0x68
 8011466:	4654      	mov	r4, sl
 8011468:	2205      	movs	r2, #5
 801146a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801146e:	4853      	ldr	r0, [pc, #332]	@ (80115bc <_vfiprintf_r+0x21c>)
 8011470:	f7ee fed6 	bl	8000220 <memchr>
 8011474:	9a04      	ldr	r2, [sp, #16]
 8011476:	b9d8      	cbnz	r0, 80114b0 <_vfiprintf_r+0x110>
 8011478:	06d1      	lsls	r1, r2, #27
 801147a:	bf44      	itt	mi
 801147c:	2320      	movmi	r3, #32
 801147e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011482:	0713      	lsls	r3, r2, #28
 8011484:	bf44      	itt	mi
 8011486:	232b      	movmi	r3, #43	@ 0x2b
 8011488:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801148c:	f89a 3000 	ldrb.w	r3, [sl]
 8011490:	2b2a      	cmp	r3, #42	@ 0x2a
 8011492:	d015      	beq.n	80114c0 <_vfiprintf_r+0x120>
 8011494:	9a07      	ldr	r2, [sp, #28]
 8011496:	4654      	mov	r4, sl
 8011498:	2000      	movs	r0, #0
 801149a:	f04f 0c0a 	mov.w	ip, #10
 801149e:	4621      	mov	r1, r4
 80114a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114a4:	3b30      	subs	r3, #48	@ 0x30
 80114a6:	2b09      	cmp	r3, #9
 80114a8:	d94b      	bls.n	8011542 <_vfiprintf_r+0x1a2>
 80114aa:	b1b0      	cbz	r0, 80114da <_vfiprintf_r+0x13a>
 80114ac:	9207      	str	r2, [sp, #28]
 80114ae:	e014      	b.n	80114da <_vfiprintf_r+0x13a>
 80114b0:	eba0 0308 	sub.w	r3, r0, r8
 80114b4:	fa09 f303 	lsl.w	r3, r9, r3
 80114b8:	4313      	orrs	r3, r2
 80114ba:	9304      	str	r3, [sp, #16]
 80114bc:	46a2      	mov	sl, r4
 80114be:	e7d2      	b.n	8011466 <_vfiprintf_r+0xc6>
 80114c0:	9b03      	ldr	r3, [sp, #12]
 80114c2:	1d19      	adds	r1, r3, #4
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	9103      	str	r1, [sp, #12]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	bfbb      	ittet	lt
 80114cc:	425b      	neglt	r3, r3
 80114ce:	f042 0202 	orrlt.w	r2, r2, #2
 80114d2:	9307      	strge	r3, [sp, #28]
 80114d4:	9307      	strlt	r3, [sp, #28]
 80114d6:	bfb8      	it	lt
 80114d8:	9204      	strlt	r2, [sp, #16]
 80114da:	7823      	ldrb	r3, [r4, #0]
 80114dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80114de:	d10a      	bne.n	80114f6 <_vfiprintf_r+0x156>
 80114e0:	7863      	ldrb	r3, [r4, #1]
 80114e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80114e4:	d132      	bne.n	801154c <_vfiprintf_r+0x1ac>
 80114e6:	9b03      	ldr	r3, [sp, #12]
 80114e8:	1d1a      	adds	r2, r3, #4
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	9203      	str	r2, [sp, #12]
 80114ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80114f2:	3402      	adds	r4, #2
 80114f4:	9305      	str	r3, [sp, #20]
 80114f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80115cc <_vfiprintf_r+0x22c>
 80114fa:	7821      	ldrb	r1, [r4, #0]
 80114fc:	2203      	movs	r2, #3
 80114fe:	4650      	mov	r0, sl
 8011500:	f7ee fe8e 	bl	8000220 <memchr>
 8011504:	b138      	cbz	r0, 8011516 <_vfiprintf_r+0x176>
 8011506:	9b04      	ldr	r3, [sp, #16]
 8011508:	eba0 000a 	sub.w	r0, r0, sl
 801150c:	2240      	movs	r2, #64	@ 0x40
 801150e:	4082      	lsls	r2, r0
 8011510:	4313      	orrs	r3, r2
 8011512:	3401      	adds	r4, #1
 8011514:	9304      	str	r3, [sp, #16]
 8011516:	f814 1b01 	ldrb.w	r1, [r4], #1
 801151a:	4829      	ldr	r0, [pc, #164]	@ (80115c0 <_vfiprintf_r+0x220>)
 801151c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011520:	2206      	movs	r2, #6
 8011522:	f7ee fe7d 	bl	8000220 <memchr>
 8011526:	2800      	cmp	r0, #0
 8011528:	d03f      	beq.n	80115aa <_vfiprintf_r+0x20a>
 801152a:	4b26      	ldr	r3, [pc, #152]	@ (80115c4 <_vfiprintf_r+0x224>)
 801152c:	bb1b      	cbnz	r3, 8011576 <_vfiprintf_r+0x1d6>
 801152e:	9b03      	ldr	r3, [sp, #12]
 8011530:	3307      	adds	r3, #7
 8011532:	f023 0307 	bic.w	r3, r3, #7
 8011536:	3308      	adds	r3, #8
 8011538:	9303      	str	r3, [sp, #12]
 801153a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801153c:	443b      	add	r3, r7
 801153e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011540:	e76a      	b.n	8011418 <_vfiprintf_r+0x78>
 8011542:	fb0c 3202 	mla	r2, ip, r2, r3
 8011546:	460c      	mov	r4, r1
 8011548:	2001      	movs	r0, #1
 801154a:	e7a8      	b.n	801149e <_vfiprintf_r+0xfe>
 801154c:	2300      	movs	r3, #0
 801154e:	3401      	adds	r4, #1
 8011550:	9305      	str	r3, [sp, #20]
 8011552:	4619      	mov	r1, r3
 8011554:	f04f 0c0a 	mov.w	ip, #10
 8011558:	4620      	mov	r0, r4
 801155a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801155e:	3a30      	subs	r2, #48	@ 0x30
 8011560:	2a09      	cmp	r2, #9
 8011562:	d903      	bls.n	801156c <_vfiprintf_r+0x1cc>
 8011564:	2b00      	cmp	r3, #0
 8011566:	d0c6      	beq.n	80114f6 <_vfiprintf_r+0x156>
 8011568:	9105      	str	r1, [sp, #20]
 801156a:	e7c4      	b.n	80114f6 <_vfiprintf_r+0x156>
 801156c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011570:	4604      	mov	r4, r0
 8011572:	2301      	movs	r3, #1
 8011574:	e7f0      	b.n	8011558 <_vfiprintf_r+0x1b8>
 8011576:	ab03      	add	r3, sp, #12
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	462a      	mov	r2, r5
 801157c:	4b12      	ldr	r3, [pc, #72]	@ (80115c8 <_vfiprintf_r+0x228>)
 801157e:	a904      	add	r1, sp, #16
 8011580:	4630      	mov	r0, r6
 8011582:	f7fc fba3 	bl	800dccc <_printf_float>
 8011586:	4607      	mov	r7, r0
 8011588:	1c78      	adds	r0, r7, #1
 801158a:	d1d6      	bne.n	801153a <_vfiprintf_r+0x19a>
 801158c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801158e:	07d9      	lsls	r1, r3, #31
 8011590:	d405      	bmi.n	801159e <_vfiprintf_r+0x1fe>
 8011592:	89ab      	ldrh	r3, [r5, #12]
 8011594:	059a      	lsls	r2, r3, #22
 8011596:	d402      	bmi.n	801159e <_vfiprintf_r+0x1fe>
 8011598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801159a:	f7fd fb99 	bl	800ecd0 <__retarget_lock_release_recursive>
 801159e:	89ab      	ldrh	r3, [r5, #12]
 80115a0:	065b      	lsls	r3, r3, #25
 80115a2:	f53f af1f 	bmi.w	80113e4 <_vfiprintf_r+0x44>
 80115a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80115a8:	e71e      	b.n	80113e8 <_vfiprintf_r+0x48>
 80115aa:	ab03      	add	r3, sp, #12
 80115ac:	9300      	str	r3, [sp, #0]
 80115ae:	462a      	mov	r2, r5
 80115b0:	4b05      	ldr	r3, [pc, #20]	@ (80115c8 <_vfiprintf_r+0x228>)
 80115b2:	a904      	add	r1, sp, #16
 80115b4:	4630      	mov	r0, r6
 80115b6:	f7fc fe21 	bl	800e1fc <_printf_i>
 80115ba:	e7e4      	b.n	8011586 <_vfiprintf_r+0x1e6>
 80115bc:	080135c1 	.word	0x080135c1
 80115c0:	080135cb 	.word	0x080135cb
 80115c4:	0800dccd 	.word	0x0800dccd
 80115c8:	0801137b 	.word	0x0801137b
 80115cc:	080135c7 	.word	0x080135c7

080115d0 <__sflush_r>:
 80115d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80115d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115d8:	0716      	lsls	r6, r2, #28
 80115da:	4605      	mov	r5, r0
 80115dc:	460c      	mov	r4, r1
 80115de:	d454      	bmi.n	801168a <__sflush_r+0xba>
 80115e0:	684b      	ldr	r3, [r1, #4]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	dc02      	bgt.n	80115ec <__sflush_r+0x1c>
 80115e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	dd48      	ble.n	801167e <__sflush_r+0xae>
 80115ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80115ee:	2e00      	cmp	r6, #0
 80115f0:	d045      	beq.n	801167e <__sflush_r+0xae>
 80115f2:	2300      	movs	r3, #0
 80115f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80115f8:	682f      	ldr	r7, [r5, #0]
 80115fa:	6a21      	ldr	r1, [r4, #32]
 80115fc:	602b      	str	r3, [r5, #0]
 80115fe:	d030      	beq.n	8011662 <__sflush_r+0x92>
 8011600:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011602:	89a3      	ldrh	r3, [r4, #12]
 8011604:	0759      	lsls	r1, r3, #29
 8011606:	d505      	bpl.n	8011614 <__sflush_r+0x44>
 8011608:	6863      	ldr	r3, [r4, #4]
 801160a:	1ad2      	subs	r2, r2, r3
 801160c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801160e:	b10b      	cbz	r3, 8011614 <__sflush_r+0x44>
 8011610:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011612:	1ad2      	subs	r2, r2, r3
 8011614:	2300      	movs	r3, #0
 8011616:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011618:	6a21      	ldr	r1, [r4, #32]
 801161a:	4628      	mov	r0, r5
 801161c:	47b0      	blx	r6
 801161e:	1c43      	adds	r3, r0, #1
 8011620:	89a3      	ldrh	r3, [r4, #12]
 8011622:	d106      	bne.n	8011632 <__sflush_r+0x62>
 8011624:	6829      	ldr	r1, [r5, #0]
 8011626:	291d      	cmp	r1, #29
 8011628:	d82b      	bhi.n	8011682 <__sflush_r+0xb2>
 801162a:	4a2a      	ldr	r2, [pc, #168]	@ (80116d4 <__sflush_r+0x104>)
 801162c:	410a      	asrs	r2, r1
 801162e:	07d6      	lsls	r6, r2, #31
 8011630:	d427      	bmi.n	8011682 <__sflush_r+0xb2>
 8011632:	2200      	movs	r2, #0
 8011634:	6062      	str	r2, [r4, #4]
 8011636:	04d9      	lsls	r1, r3, #19
 8011638:	6922      	ldr	r2, [r4, #16]
 801163a:	6022      	str	r2, [r4, #0]
 801163c:	d504      	bpl.n	8011648 <__sflush_r+0x78>
 801163e:	1c42      	adds	r2, r0, #1
 8011640:	d101      	bne.n	8011646 <__sflush_r+0x76>
 8011642:	682b      	ldr	r3, [r5, #0]
 8011644:	b903      	cbnz	r3, 8011648 <__sflush_r+0x78>
 8011646:	6560      	str	r0, [r4, #84]	@ 0x54
 8011648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801164a:	602f      	str	r7, [r5, #0]
 801164c:	b1b9      	cbz	r1, 801167e <__sflush_r+0xae>
 801164e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011652:	4299      	cmp	r1, r3
 8011654:	d002      	beq.n	801165c <__sflush_r+0x8c>
 8011656:	4628      	mov	r0, r5
 8011658:	f7fe f99e 	bl	800f998 <_free_r>
 801165c:	2300      	movs	r3, #0
 801165e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011660:	e00d      	b.n	801167e <__sflush_r+0xae>
 8011662:	2301      	movs	r3, #1
 8011664:	4628      	mov	r0, r5
 8011666:	47b0      	blx	r6
 8011668:	4602      	mov	r2, r0
 801166a:	1c50      	adds	r0, r2, #1
 801166c:	d1c9      	bne.n	8011602 <__sflush_r+0x32>
 801166e:	682b      	ldr	r3, [r5, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d0c6      	beq.n	8011602 <__sflush_r+0x32>
 8011674:	2b1d      	cmp	r3, #29
 8011676:	d001      	beq.n	801167c <__sflush_r+0xac>
 8011678:	2b16      	cmp	r3, #22
 801167a:	d11e      	bne.n	80116ba <__sflush_r+0xea>
 801167c:	602f      	str	r7, [r5, #0]
 801167e:	2000      	movs	r0, #0
 8011680:	e022      	b.n	80116c8 <__sflush_r+0xf8>
 8011682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011686:	b21b      	sxth	r3, r3
 8011688:	e01b      	b.n	80116c2 <__sflush_r+0xf2>
 801168a:	690f      	ldr	r7, [r1, #16]
 801168c:	2f00      	cmp	r7, #0
 801168e:	d0f6      	beq.n	801167e <__sflush_r+0xae>
 8011690:	0793      	lsls	r3, r2, #30
 8011692:	680e      	ldr	r6, [r1, #0]
 8011694:	bf08      	it	eq
 8011696:	694b      	ldreq	r3, [r1, #20]
 8011698:	600f      	str	r7, [r1, #0]
 801169a:	bf18      	it	ne
 801169c:	2300      	movne	r3, #0
 801169e:	eba6 0807 	sub.w	r8, r6, r7
 80116a2:	608b      	str	r3, [r1, #8]
 80116a4:	f1b8 0f00 	cmp.w	r8, #0
 80116a8:	dde9      	ble.n	801167e <__sflush_r+0xae>
 80116aa:	6a21      	ldr	r1, [r4, #32]
 80116ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80116ae:	4643      	mov	r3, r8
 80116b0:	463a      	mov	r2, r7
 80116b2:	4628      	mov	r0, r5
 80116b4:	47b0      	blx	r6
 80116b6:	2800      	cmp	r0, #0
 80116b8:	dc08      	bgt.n	80116cc <__sflush_r+0xfc>
 80116ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116c2:	81a3      	strh	r3, [r4, #12]
 80116c4:	f04f 30ff 	mov.w	r0, #4294967295
 80116c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116cc:	4407      	add	r7, r0
 80116ce:	eba8 0800 	sub.w	r8, r8, r0
 80116d2:	e7e7      	b.n	80116a4 <__sflush_r+0xd4>
 80116d4:	dfbffffe 	.word	0xdfbffffe

080116d8 <_fflush_r>:
 80116d8:	b538      	push	{r3, r4, r5, lr}
 80116da:	690b      	ldr	r3, [r1, #16]
 80116dc:	4605      	mov	r5, r0
 80116de:	460c      	mov	r4, r1
 80116e0:	b913      	cbnz	r3, 80116e8 <_fflush_r+0x10>
 80116e2:	2500      	movs	r5, #0
 80116e4:	4628      	mov	r0, r5
 80116e6:	bd38      	pop	{r3, r4, r5, pc}
 80116e8:	b118      	cbz	r0, 80116f2 <_fflush_r+0x1a>
 80116ea:	6a03      	ldr	r3, [r0, #32]
 80116ec:	b90b      	cbnz	r3, 80116f2 <_fflush_r+0x1a>
 80116ee:	f7fd f945 	bl	800e97c <__sinit>
 80116f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d0f3      	beq.n	80116e2 <_fflush_r+0xa>
 80116fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80116fc:	07d0      	lsls	r0, r2, #31
 80116fe:	d404      	bmi.n	801170a <_fflush_r+0x32>
 8011700:	0599      	lsls	r1, r3, #22
 8011702:	d402      	bmi.n	801170a <_fflush_r+0x32>
 8011704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011706:	f7fd fae2 	bl	800ecce <__retarget_lock_acquire_recursive>
 801170a:	4628      	mov	r0, r5
 801170c:	4621      	mov	r1, r4
 801170e:	f7ff ff5f 	bl	80115d0 <__sflush_r>
 8011712:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011714:	07da      	lsls	r2, r3, #31
 8011716:	4605      	mov	r5, r0
 8011718:	d4e4      	bmi.n	80116e4 <_fflush_r+0xc>
 801171a:	89a3      	ldrh	r3, [r4, #12]
 801171c:	059b      	lsls	r3, r3, #22
 801171e:	d4e1      	bmi.n	80116e4 <_fflush_r+0xc>
 8011720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011722:	f7fd fad5 	bl	800ecd0 <__retarget_lock_release_recursive>
 8011726:	e7dd      	b.n	80116e4 <_fflush_r+0xc>

08011728 <__swbuf_r>:
 8011728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801172a:	460e      	mov	r6, r1
 801172c:	4614      	mov	r4, r2
 801172e:	4605      	mov	r5, r0
 8011730:	b118      	cbz	r0, 801173a <__swbuf_r+0x12>
 8011732:	6a03      	ldr	r3, [r0, #32]
 8011734:	b90b      	cbnz	r3, 801173a <__swbuf_r+0x12>
 8011736:	f7fd f921 	bl	800e97c <__sinit>
 801173a:	69a3      	ldr	r3, [r4, #24]
 801173c:	60a3      	str	r3, [r4, #8]
 801173e:	89a3      	ldrh	r3, [r4, #12]
 8011740:	071a      	lsls	r2, r3, #28
 8011742:	d501      	bpl.n	8011748 <__swbuf_r+0x20>
 8011744:	6923      	ldr	r3, [r4, #16]
 8011746:	b943      	cbnz	r3, 801175a <__swbuf_r+0x32>
 8011748:	4621      	mov	r1, r4
 801174a:	4628      	mov	r0, r5
 801174c:	f000 f82a 	bl	80117a4 <__swsetup_r>
 8011750:	b118      	cbz	r0, 801175a <__swbuf_r+0x32>
 8011752:	f04f 37ff 	mov.w	r7, #4294967295
 8011756:	4638      	mov	r0, r7
 8011758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801175a:	6823      	ldr	r3, [r4, #0]
 801175c:	6922      	ldr	r2, [r4, #16]
 801175e:	1a98      	subs	r0, r3, r2
 8011760:	6963      	ldr	r3, [r4, #20]
 8011762:	b2f6      	uxtb	r6, r6
 8011764:	4283      	cmp	r3, r0
 8011766:	4637      	mov	r7, r6
 8011768:	dc05      	bgt.n	8011776 <__swbuf_r+0x4e>
 801176a:	4621      	mov	r1, r4
 801176c:	4628      	mov	r0, r5
 801176e:	f7ff ffb3 	bl	80116d8 <_fflush_r>
 8011772:	2800      	cmp	r0, #0
 8011774:	d1ed      	bne.n	8011752 <__swbuf_r+0x2a>
 8011776:	68a3      	ldr	r3, [r4, #8]
 8011778:	3b01      	subs	r3, #1
 801177a:	60a3      	str	r3, [r4, #8]
 801177c:	6823      	ldr	r3, [r4, #0]
 801177e:	1c5a      	adds	r2, r3, #1
 8011780:	6022      	str	r2, [r4, #0]
 8011782:	701e      	strb	r6, [r3, #0]
 8011784:	6962      	ldr	r2, [r4, #20]
 8011786:	1c43      	adds	r3, r0, #1
 8011788:	429a      	cmp	r2, r3
 801178a:	d004      	beq.n	8011796 <__swbuf_r+0x6e>
 801178c:	89a3      	ldrh	r3, [r4, #12]
 801178e:	07db      	lsls	r3, r3, #31
 8011790:	d5e1      	bpl.n	8011756 <__swbuf_r+0x2e>
 8011792:	2e0a      	cmp	r6, #10
 8011794:	d1df      	bne.n	8011756 <__swbuf_r+0x2e>
 8011796:	4621      	mov	r1, r4
 8011798:	4628      	mov	r0, r5
 801179a:	f7ff ff9d 	bl	80116d8 <_fflush_r>
 801179e:	2800      	cmp	r0, #0
 80117a0:	d0d9      	beq.n	8011756 <__swbuf_r+0x2e>
 80117a2:	e7d6      	b.n	8011752 <__swbuf_r+0x2a>

080117a4 <__swsetup_r>:
 80117a4:	b538      	push	{r3, r4, r5, lr}
 80117a6:	4b29      	ldr	r3, [pc, #164]	@ (801184c <__swsetup_r+0xa8>)
 80117a8:	4605      	mov	r5, r0
 80117aa:	6818      	ldr	r0, [r3, #0]
 80117ac:	460c      	mov	r4, r1
 80117ae:	b118      	cbz	r0, 80117b8 <__swsetup_r+0x14>
 80117b0:	6a03      	ldr	r3, [r0, #32]
 80117b2:	b90b      	cbnz	r3, 80117b8 <__swsetup_r+0x14>
 80117b4:	f7fd f8e2 	bl	800e97c <__sinit>
 80117b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117bc:	0719      	lsls	r1, r3, #28
 80117be:	d422      	bmi.n	8011806 <__swsetup_r+0x62>
 80117c0:	06da      	lsls	r2, r3, #27
 80117c2:	d407      	bmi.n	80117d4 <__swsetup_r+0x30>
 80117c4:	2209      	movs	r2, #9
 80117c6:	602a      	str	r2, [r5, #0]
 80117c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117cc:	81a3      	strh	r3, [r4, #12]
 80117ce:	f04f 30ff 	mov.w	r0, #4294967295
 80117d2:	e033      	b.n	801183c <__swsetup_r+0x98>
 80117d4:	0758      	lsls	r0, r3, #29
 80117d6:	d512      	bpl.n	80117fe <__swsetup_r+0x5a>
 80117d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117da:	b141      	cbz	r1, 80117ee <__swsetup_r+0x4a>
 80117dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80117e0:	4299      	cmp	r1, r3
 80117e2:	d002      	beq.n	80117ea <__swsetup_r+0x46>
 80117e4:	4628      	mov	r0, r5
 80117e6:	f7fe f8d7 	bl	800f998 <_free_r>
 80117ea:	2300      	movs	r3, #0
 80117ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80117ee:	89a3      	ldrh	r3, [r4, #12]
 80117f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80117f4:	81a3      	strh	r3, [r4, #12]
 80117f6:	2300      	movs	r3, #0
 80117f8:	6063      	str	r3, [r4, #4]
 80117fa:	6923      	ldr	r3, [r4, #16]
 80117fc:	6023      	str	r3, [r4, #0]
 80117fe:	89a3      	ldrh	r3, [r4, #12]
 8011800:	f043 0308 	orr.w	r3, r3, #8
 8011804:	81a3      	strh	r3, [r4, #12]
 8011806:	6923      	ldr	r3, [r4, #16]
 8011808:	b94b      	cbnz	r3, 801181e <__swsetup_r+0x7a>
 801180a:	89a3      	ldrh	r3, [r4, #12]
 801180c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011814:	d003      	beq.n	801181e <__swsetup_r+0x7a>
 8011816:	4621      	mov	r1, r4
 8011818:	4628      	mov	r0, r5
 801181a:	f000 fbf5 	bl	8012008 <__smakebuf_r>
 801181e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011822:	f013 0201 	ands.w	r2, r3, #1
 8011826:	d00a      	beq.n	801183e <__swsetup_r+0x9a>
 8011828:	2200      	movs	r2, #0
 801182a:	60a2      	str	r2, [r4, #8]
 801182c:	6962      	ldr	r2, [r4, #20]
 801182e:	4252      	negs	r2, r2
 8011830:	61a2      	str	r2, [r4, #24]
 8011832:	6922      	ldr	r2, [r4, #16]
 8011834:	b942      	cbnz	r2, 8011848 <__swsetup_r+0xa4>
 8011836:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801183a:	d1c5      	bne.n	80117c8 <__swsetup_r+0x24>
 801183c:	bd38      	pop	{r3, r4, r5, pc}
 801183e:	0799      	lsls	r1, r3, #30
 8011840:	bf58      	it	pl
 8011842:	6962      	ldrpl	r2, [r4, #20]
 8011844:	60a2      	str	r2, [r4, #8]
 8011846:	e7f4      	b.n	8011832 <__swsetup_r+0x8e>
 8011848:	2000      	movs	r0, #0
 801184a:	e7f7      	b.n	801183c <__swsetup_r+0x98>
 801184c:	20000018 	.word	0x20000018

08011850 <strncmp>:
 8011850:	b510      	push	{r4, lr}
 8011852:	b16a      	cbz	r2, 8011870 <strncmp+0x20>
 8011854:	3901      	subs	r1, #1
 8011856:	1884      	adds	r4, r0, r2
 8011858:	f810 2b01 	ldrb.w	r2, [r0], #1
 801185c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011860:	429a      	cmp	r2, r3
 8011862:	d103      	bne.n	801186c <strncmp+0x1c>
 8011864:	42a0      	cmp	r0, r4
 8011866:	d001      	beq.n	801186c <strncmp+0x1c>
 8011868:	2a00      	cmp	r2, #0
 801186a:	d1f5      	bne.n	8011858 <strncmp+0x8>
 801186c:	1ad0      	subs	r0, r2, r3
 801186e:	bd10      	pop	{r4, pc}
 8011870:	4610      	mov	r0, r2
 8011872:	e7fc      	b.n	801186e <strncmp+0x1e>
 8011874:	0000      	movs	r0, r0
	...

08011878 <nan>:
 8011878:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011880 <nan+0x8>
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	00000000 	.word	0x00000000
 8011884:	7ff80000 	.word	0x7ff80000

08011888 <_calloc_r>:
 8011888:	b570      	push	{r4, r5, r6, lr}
 801188a:	fba1 5402 	umull	r5, r4, r1, r2
 801188e:	b93c      	cbnz	r4, 80118a0 <_calloc_r+0x18>
 8011890:	4629      	mov	r1, r5
 8011892:	f7fc f8ef 	bl	800da74 <_malloc_r>
 8011896:	4606      	mov	r6, r0
 8011898:	b928      	cbnz	r0, 80118a6 <_calloc_r+0x1e>
 801189a:	2600      	movs	r6, #0
 801189c:	4630      	mov	r0, r6
 801189e:	bd70      	pop	{r4, r5, r6, pc}
 80118a0:	220c      	movs	r2, #12
 80118a2:	6002      	str	r2, [r0, #0]
 80118a4:	e7f9      	b.n	801189a <_calloc_r+0x12>
 80118a6:	462a      	mov	r2, r5
 80118a8:	4621      	mov	r1, r4
 80118aa:	f7fd f92c 	bl	800eb06 <memset>
 80118ae:	e7f5      	b.n	801189c <_calloc_r+0x14>

080118b0 <rshift>:
 80118b0:	6903      	ldr	r3, [r0, #16]
 80118b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80118b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 80118be:	f100 0414 	add.w	r4, r0, #20
 80118c2:	dd45      	ble.n	8011950 <rshift+0xa0>
 80118c4:	f011 011f 	ands.w	r1, r1, #31
 80118c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80118cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80118d0:	d10c      	bne.n	80118ec <rshift+0x3c>
 80118d2:	f100 0710 	add.w	r7, r0, #16
 80118d6:	4629      	mov	r1, r5
 80118d8:	42b1      	cmp	r1, r6
 80118da:	d334      	bcc.n	8011946 <rshift+0x96>
 80118dc:	1a9b      	subs	r3, r3, r2
 80118de:	009b      	lsls	r3, r3, #2
 80118e0:	1eea      	subs	r2, r5, #3
 80118e2:	4296      	cmp	r6, r2
 80118e4:	bf38      	it	cc
 80118e6:	2300      	movcc	r3, #0
 80118e8:	4423      	add	r3, r4
 80118ea:	e015      	b.n	8011918 <rshift+0x68>
 80118ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80118f0:	f1c1 0820 	rsb	r8, r1, #32
 80118f4:	40cf      	lsrs	r7, r1
 80118f6:	f105 0e04 	add.w	lr, r5, #4
 80118fa:	46a1      	mov	r9, r4
 80118fc:	4576      	cmp	r6, lr
 80118fe:	46f4      	mov	ip, lr
 8011900:	d815      	bhi.n	801192e <rshift+0x7e>
 8011902:	1a9a      	subs	r2, r3, r2
 8011904:	0092      	lsls	r2, r2, #2
 8011906:	3a04      	subs	r2, #4
 8011908:	3501      	adds	r5, #1
 801190a:	42ae      	cmp	r6, r5
 801190c:	bf38      	it	cc
 801190e:	2200      	movcc	r2, #0
 8011910:	18a3      	adds	r3, r4, r2
 8011912:	50a7      	str	r7, [r4, r2]
 8011914:	b107      	cbz	r7, 8011918 <rshift+0x68>
 8011916:	3304      	adds	r3, #4
 8011918:	1b1a      	subs	r2, r3, r4
 801191a:	42a3      	cmp	r3, r4
 801191c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011920:	bf08      	it	eq
 8011922:	2300      	moveq	r3, #0
 8011924:	6102      	str	r2, [r0, #16]
 8011926:	bf08      	it	eq
 8011928:	6143      	streq	r3, [r0, #20]
 801192a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801192e:	f8dc c000 	ldr.w	ip, [ip]
 8011932:	fa0c fc08 	lsl.w	ip, ip, r8
 8011936:	ea4c 0707 	orr.w	r7, ip, r7
 801193a:	f849 7b04 	str.w	r7, [r9], #4
 801193e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011942:	40cf      	lsrs	r7, r1
 8011944:	e7da      	b.n	80118fc <rshift+0x4c>
 8011946:	f851 cb04 	ldr.w	ip, [r1], #4
 801194a:	f847 cf04 	str.w	ip, [r7, #4]!
 801194e:	e7c3      	b.n	80118d8 <rshift+0x28>
 8011950:	4623      	mov	r3, r4
 8011952:	e7e1      	b.n	8011918 <rshift+0x68>

08011954 <__hexdig_fun>:
 8011954:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011958:	2b09      	cmp	r3, #9
 801195a:	d802      	bhi.n	8011962 <__hexdig_fun+0xe>
 801195c:	3820      	subs	r0, #32
 801195e:	b2c0      	uxtb	r0, r0
 8011960:	4770      	bx	lr
 8011962:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011966:	2b05      	cmp	r3, #5
 8011968:	d801      	bhi.n	801196e <__hexdig_fun+0x1a>
 801196a:	3847      	subs	r0, #71	@ 0x47
 801196c:	e7f7      	b.n	801195e <__hexdig_fun+0xa>
 801196e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011972:	2b05      	cmp	r3, #5
 8011974:	d801      	bhi.n	801197a <__hexdig_fun+0x26>
 8011976:	3827      	subs	r0, #39	@ 0x27
 8011978:	e7f1      	b.n	801195e <__hexdig_fun+0xa>
 801197a:	2000      	movs	r0, #0
 801197c:	4770      	bx	lr
	...

08011980 <__gethex>:
 8011980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011984:	b085      	sub	sp, #20
 8011986:	468a      	mov	sl, r1
 8011988:	9302      	str	r3, [sp, #8]
 801198a:	680b      	ldr	r3, [r1, #0]
 801198c:	9001      	str	r0, [sp, #4]
 801198e:	4690      	mov	r8, r2
 8011990:	1c9c      	adds	r4, r3, #2
 8011992:	46a1      	mov	r9, r4
 8011994:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011998:	2830      	cmp	r0, #48	@ 0x30
 801199a:	d0fa      	beq.n	8011992 <__gethex+0x12>
 801199c:	eba9 0303 	sub.w	r3, r9, r3
 80119a0:	f1a3 0b02 	sub.w	fp, r3, #2
 80119a4:	f7ff ffd6 	bl	8011954 <__hexdig_fun>
 80119a8:	4605      	mov	r5, r0
 80119aa:	2800      	cmp	r0, #0
 80119ac:	d168      	bne.n	8011a80 <__gethex+0x100>
 80119ae:	49a0      	ldr	r1, [pc, #640]	@ (8011c30 <__gethex+0x2b0>)
 80119b0:	2201      	movs	r2, #1
 80119b2:	4648      	mov	r0, r9
 80119b4:	f7ff ff4c 	bl	8011850 <strncmp>
 80119b8:	4607      	mov	r7, r0
 80119ba:	2800      	cmp	r0, #0
 80119bc:	d167      	bne.n	8011a8e <__gethex+0x10e>
 80119be:	f899 0001 	ldrb.w	r0, [r9, #1]
 80119c2:	4626      	mov	r6, r4
 80119c4:	f7ff ffc6 	bl	8011954 <__hexdig_fun>
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d062      	beq.n	8011a92 <__gethex+0x112>
 80119cc:	4623      	mov	r3, r4
 80119ce:	7818      	ldrb	r0, [r3, #0]
 80119d0:	2830      	cmp	r0, #48	@ 0x30
 80119d2:	4699      	mov	r9, r3
 80119d4:	f103 0301 	add.w	r3, r3, #1
 80119d8:	d0f9      	beq.n	80119ce <__gethex+0x4e>
 80119da:	f7ff ffbb 	bl	8011954 <__hexdig_fun>
 80119de:	fab0 f580 	clz	r5, r0
 80119e2:	096d      	lsrs	r5, r5, #5
 80119e4:	f04f 0b01 	mov.w	fp, #1
 80119e8:	464a      	mov	r2, r9
 80119ea:	4616      	mov	r6, r2
 80119ec:	3201      	adds	r2, #1
 80119ee:	7830      	ldrb	r0, [r6, #0]
 80119f0:	f7ff ffb0 	bl	8011954 <__hexdig_fun>
 80119f4:	2800      	cmp	r0, #0
 80119f6:	d1f8      	bne.n	80119ea <__gethex+0x6a>
 80119f8:	498d      	ldr	r1, [pc, #564]	@ (8011c30 <__gethex+0x2b0>)
 80119fa:	2201      	movs	r2, #1
 80119fc:	4630      	mov	r0, r6
 80119fe:	f7ff ff27 	bl	8011850 <strncmp>
 8011a02:	2800      	cmp	r0, #0
 8011a04:	d13f      	bne.n	8011a86 <__gethex+0x106>
 8011a06:	b944      	cbnz	r4, 8011a1a <__gethex+0x9a>
 8011a08:	1c74      	adds	r4, r6, #1
 8011a0a:	4622      	mov	r2, r4
 8011a0c:	4616      	mov	r6, r2
 8011a0e:	3201      	adds	r2, #1
 8011a10:	7830      	ldrb	r0, [r6, #0]
 8011a12:	f7ff ff9f 	bl	8011954 <__hexdig_fun>
 8011a16:	2800      	cmp	r0, #0
 8011a18:	d1f8      	bne.n	8011a0c <__gethex+0x8c>
 8011a1a:	1ba4      	subs	r4, r4, r6
 8011a1c:	00a7      	lsls	r7, r4, #2
 8011a1e:	7833      	ldrb	r3, [r6, #0]
 8011a20:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011a24:	2b50      	cmp	r3, #80	@ 0x50
 8011a26:	d13e      	bne.n	8011aa6 <__gethex+0x126>
 8011a28:	7873      	ldrb	r3, [r6, #1]
 8011a2a:	2b2b      	cmp	r3, #43	@ 0x2b
 8011a2c:	d033      	beq.n	8011a96 <__gethex+0x116>
 8011a2e:	2b2d      	cmp	r3, #45	@ 0x2d
 8011a30:	d034      	beq.n	8011a9c <__gethex+0x11c>
 8011a32:	1c71      	adds	r1, r6, #1
 8011a34:	2400      	movs	r4, #0
 8011a36:	7808      	ldrb	r0, [r1, #0]
 8011a38:	f7ff ff8c 	bl	8011954 <__hexdig_fun>
 8011a3c:	1e43      	subs	r3, r0, #1
 8011a3e:	b2db      	uxtb	r3, r3
 8011a40:	2b18      	cmp	r3, #24
 8011a42:	d830      	bhi.n	8011aa6 <__gethex+0x126>
 8011a44:	f1a0 0210 	sub.w	r2, r0, #16
 8011a48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011a4c:	f7ff ff82 	bl	8011954 <__hexdig_fun>
 8011a50:	f100 3cff 	add.w	ip, r0, #4294967295
 8011a54:	fa5f fc8c 	uxtb.w	ip, ip
 8011a58:	f1bc 0f18 	cmp.w	ip, #24
 8011a5c:	f04f 030a 	mov.w	r3, #10
 8011a60:	d91e      	bls.n	8011aa0 <__gethex+0x120>
 8011a62:	b104      	cbz	r4, 8011a66 <__gethex+0xe6>
 8011a64:	4252      	negs	r2, r2
 8011a66:	4417      	add	r7, r2
 8011a68:	f8ca 1000 	str.w	r1, [sl]
 8011a6c:	b1ed      	cbz	r5, 8011aaa <__gethex+0x12a>
 8011a6e:	f1bb 0f00 	cmp.w	fp, #0
 8011a72:	bf0c      	ite	eq
 8011a74:	2506      	moveq	r5, #6
 8011a76:	2500      	movne	r5, #0
 8011a78:	4628      	mov	r0, r5
 8011a7a:	b005      	add	sp, #20
 8011a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a80:	2500      	movs	r5, #0
 8011a82:	462c      	mov	r4, r5
 8011a84:	e7b0      	b.n	80119e8 <__gethex+0x68>
 8011a86:	2c00      	cmp	r4, #0
 8011a88:	d1c7      	bne.n	8011a1a <__gethex+0x9a>
 8011a8a:	4627      	mov	r7, r4
 8011a8c:	e7c7      	b.n	8011a1e <__gethex+0x9e>
 8011a8e:	464e      	mov	r6, r9
 8011a90:	462f      	mov	r7, r5
 8011a92:	2501      	movs	r5, #1
 8011a94:	e7c3      	b.n	8011a1e <__gethex+0x9e>
 8011a96:	2400      	movs	r4, #0
 8011a98:	1cb1      	adds	r1, r6, #2
 8011a9a:	e7cc      	b.n	8011a36 <__gethex+0xb6>
 8011a9c:	2401      	movs	r4, #1
 8011a9e:	e7fb      	b.n	8011a98 <__gethex+0x118>
 8011aa0:	fb03 0002 	mla	r0, r3, r2, r0
 8011aa4:	e7ce      	b.n	8011a44 <__gethex+0xc4>
 8011aa6:	4631      	mov	r1, r6
 8011aa8:	e7de      	b.n	8011a68 <__gethex+0xe8>
 8011aaa:	eba6 0309 	sub.w	r3, r6, r9
 8011aae:	3b01      	subs	r3, #1
 8011ab0:	4629      	mov	r1, r5
 8011ab2:	2b07      	cmp	r3, #7
 8011ab4:	dc0a      	bgt.n	8011acc <__gethex+0x14c>
 8011ab6:	9801      	ldr	r0, [sp, #4]
 8011ab8:	f7fd ffb8 	bl	800fa2c <_Balloc>
 8011abc:	4604      	mov	r4, r0
 8011abe:	b940      	cbnz	r0, 8011ad2 <__gethex+0x152>
 8011ac0:	4b5c      	ldr	r3, [pc, #368]	@ (8011c34 <__gethex+0x2b4>)
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	21e4      	movs	r1, #228	@ 0xe4
 8011ac6:	485c      	ldr	r0, [pc, #368]	@ (8011c38 <__gethex+0x2b8>)
 8011ac8:	f7fb ff72 	bl	800d9b0 <__assert_func>
 8011acc:	3101      	adds	r1, #1
 8011ace:	105b      	asrs	r3, r3, #1
 8011ad0:	e7ef      	b.n	8011ab2 <__gethex+0x132>
 8011ad2:	f100 0a14 	add.w	sl, r0, #20
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	4655      	mov	r5, sl
 8011ada:	469b      	mov	fp, r3
 8011adc:	45b1      	cmp	r9, r6
 8011ade:	d337      	bcc.n	8011b50 <__gethex+0x1d0>
 8011ae0:	f845 bb04 	str.w	fp, [r5], #4
 8011ae4:	eba5 050a 	sub.w	r5, r5, sl
 8011ae8:	10ad      	asrs	r5, r5, #2
 8011aea:	6125      	str	r5, [r4, #16]
 8011aec:	4658      	mov	r0, fp
 8011aee:	f7fe f88f 	bl	800fc10 <__hi0bits>
 8011af2:	016d      	lsls	r5, r5, #5
 8011af4:	f8d8 6000 	ldr.w	r6, [r8]
 8011af8:	1a2d      	subs	r5, r5, r0
 8011afa:	42b5      	cmp	r5, r6
 8011afc:	dd54      	ble.n	8011ba8 <__gethex+0x228>
 8011afe:	1bad      	subs	r5, r5, r6
 8011b00:	4629      	mov	r1, r5
 8011b02:	4620      	mov	r0, r4
 8011b04:	f7fe fc23 	bl	801034e <__any_on>
 8011b08:	4681      	mov	r9, r0
 8011b0a:	b178      	cbz	r0, 8011b2c <__gethex+0x1ac>
 8011b0c:	1e6b      	subs	r3, r5, #1
 8011b0e:	1159      	asrs	r1, r3, #5
 8011b10:	f003 021f 	and.w	r2, r3, #31
 8011b14:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011b18:	f04f 0901 	mov.w	r9, #1
 8011b1c:	fa09 f202 	lsl.w	r2, r9, r2
 8011b20:	420a      	tst	r2, r1
 8011b22:	d003      	beq.n	8011b2c <__gethex+0x1ac>
 8011b24:	454b      	cmp	r3, r9
 8011b26:	dc36      	bgt.n	8011b96 <__gethex+0x216>
 8011b28:	f04f 0902 	mov.w	r9, #2
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f7ff febe 	bl	80118b0 <rshift>
 8011b34:	442f      	add	r7, r5
 8011b36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b3a:	42bb      	cmp	r3, r7
 8011b3c:	da42      	bge.n	8011bc4 <__gethex+0x244>
 8011b3e:	9801      	ldr	r0, [sp, #4]
 8011b40:	4621      	mov	r1, r4
 8011b42:	f7fd ffb3 	bl	800faac <_Bfree>
 8011b46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b48:	2300      	movs	r3, #0
 8011b4a:	6013      	str	r3, [r2, #0]
 8011b4c:	25a3      	movs	r5, #163	@ 0xa3
 8011b4e:	e793      	b.n	8011a78 <__gethex+0xf8>
 8011b50:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011b54:	2a2e      	cmp	r2, #46	@ 0x2e
 8011b56:	d012      	beq.n	8011b7e <__gethex+0x1fe>
 8011b58:	2b20      	cmp	r3, #32
 8011b5a:	d104      	bne.n	8011b66 <__gethex+0x1e6>
 8011b5c:	f845 bb04 	str.w	fp, [r5], #4
 8011b60:	f04f 0b00 	mov.w	fp, #0
 8011b64:	465b      	mov	r3, fp
 8011b66:	7830      	ldrb	r0, [r6, #0]
 8011b68:	9303      	str	r3, [sp, #12]
 8011b6a:	f7ff fef3 	bl	8011954 <__hexdig_fun>
 8011b6e:	9b03      	ldr	r3, [sp, #12]
 8011b70:	f000 000f 	and.w	r0, r0, #15
 8011b74:	4098      	lsls	r0, r3
 8011b76:	ea4b 0b00 	orr.w	fp, fp, r0
 8011b7a:	3304      	adds	r3, #4
 8011b7c:	e7ae      	b.n	8011adc <__gethex+0x15c>
 8011b7e:	45b1      	cmp	r9, r6
 8011b80:	d8ea      	bhi.n	8011b58 <__gethex+0x1d8>
 8011b82:	492b      	ldr	r1, [pc, #172]	@ (8011c30 <__gethex+0x2b0>)
 8011b84:	9303      	str	r3, [sp, #12]
 8011b86:	2201      	movs	r2, #1
 8011b88:	4630      	mov	r0, r6
 8011b8a:	f7ff fe61 	bl	8011850 <strncmp>
 8011b8e:	9b03      	ldr	r3, [sp, #12]
 8011b90:	2800      	cmp	r0, #0
 8011b92:	d1e1      	bne.n	8011b58 <__gethex+0x1d8>
 8011b94:	e7a2      	b.n	8011adc <__gethex+0x15c>
 8011b96:	1ea9      	subs	r1, r5, #2
 8011b98:	4620      	mov	r0, r4
 8011b9a:	f7fe fbd8 	bl	801034e <__any_on>
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	d0c2      	beq.n	8011b28 <__gethex+0x1a8>
 8011ba2:	f04f 0903 	mov.w	r9, #3
 8011ba6:	e7c1      	b.n	8011b2c <__gethex+0x1ac>
 8011ba8:	da09      	bge.n	8011bbe <__gethex+0x23e>
 8011baa:	1b75      	subs	r5, r6, r5
 8011bac:	4621      	mov	r1, r4
 8011bae:	9801      	ldr	r0, [sp, #4]
 8011bb0:	462a      	mov	r2, r5
 8011bb2:	f7fe f993 	bl	800fedc <__lshift>
 8011bb6:	1b7f      	subs	r7, r7, r5
 8011bb8:	4604      	mov	r4, r0
 8011bba:	f100 0a14 	add.w	sl, r0, #20
 8011bbe:	f04f 0900 	mov.w	r9, #0
 8011bc2:	e7b8      	b.n	8011b36 <__gethex+0x1b6>
 8011bc4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011bc8:	42bd      	cmp	r5, r7
 8011bca:	dd6f      	ble.n	8011cac <__gethex+0x32c>
 8011bcc:	1bed      	subs	r5, r5, r7
 8011bce:	42ae      	cmp	r6, r5
 8011bd0:	dc34      	bgt.n	8011c3c <__gethex+0x2bc>
 8011bd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011bd6:	2b02      	cmp	r3, #2
 8011bd8:	d022      	beq.n	8011c20 <__gethex+0x2a0>
 8011bda:	2b03      	cmp	r3, #3
 8011bdc:	d024      	beq.n	8011c28 <__gethex+0x2a8>
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	d115      	bne.n	8011c0e <__gethex+0x28e>
 8011be2:	42ae      	cmp	r6, r5
 8011be4:	d113      	bne.n	8011c0e <__gethex+0x28e>
 8011be6:	2e01      	cmp	r6, #1
 8011be8:	d10b      	bne.n	8011c02 <__gethex+0x282>
 8011bea:	9a02      	ldr	r2, [sp, #8]
 8011bec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011bf0:	6013      	str	r3, [r2, #0]
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	6123      	str	r3, [r4, #16]
 8011bf6:	f8ca 3000 	str.w	r3, [sl]
 8011bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bfc:	2562      	movs	r5, #98	@ 0x62
 8011bfe:	601c      	str	r4, [r3, #0]
 8011c00:	e73a      	b.n	8011a78 <__gethex+0xf8>
 8011c02:	1e71      	subs	r1, r6, #1
 8011c04:	4620      	mov	r0, r4
 8011c06:	f7fe fba2 	bl	801034e <__any_on>
 8011c0a:	2800      	cmp	r0, #0
 8011c0c:	d1ed      	bne.n	8011bea <__gethex+0x26a>
 8011c0e:	9801      	ldr	r0, [sp, #4]
 8011c10:	4621      	mov	r1, r4
 8011c12:	f7fd ff4b 	bl	800faac <_Bfree>
 8011c16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c18:	2300      	movs	r3, #0
 8011c1a:	6013      	str	r3, [r2, #0]
 8011c1c:	2550      	movs	r5, #80	@ 0x50
 8011c1e:	e72b      	b.n	8011a78 <__gethex+0xf8>
 8011c20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d1f3      	bne.n	8011c0e <__gethex+0x28e>
 8011c26:	e7e0      	b.n	8011bea <__gethex+0x26a>
 8011c28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d1dd      	bne.n	8011bea <__gethex+0x26a>
 8011c2e:	e7ee      	b.n	8011c0e <__gethex+0x28e>
 8011c30:	08013468 	.word	0x08013468
 8011c34:	08013301 	.word	0x08013301
 8011c38:	080135da 	.word	0x080135da
 8011c3c:	1e6f      	subs	r7, r5, #1
 8011c3e:	f1b9 0f00 	cmp.w	r9, #0
 8011c42:	d130      	bne.n	8011ca6 <__gethex+0x326>
 8011c44:	b127      	cbz	r7, 8011c50 <__gethex+0x2d0>
 8011c46:	4639      	mov	r1, r7
 8011c48:	4620      	mov	r0, r4
 8011c4a:	f7fe fb80 	bl	801034e <__any_on>
 8011c4e:	4681      	mov	r9, r0
 8011c50:	117a      	asrs	r2, r7, #5
 8011c52:	2301      	movs	r3, #1
 8011c54:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011c58:	f007 071f 	and.w	r7, r7, #31
 8011c5c:	40bb      	lsls	r3, r7
 8011c5e:	4213      	tst	r3, r2
 8011c60:	4629      	mov	r1, r5
 8011c62:	4620      	mov	r0, r4
 8011c64:	bf18      	it	ne
 8011c66:	f049 0902 	orrne.w	r9, r9, #2
 8011c6a:	f7ff fe21 	bl	80118b0 <rshift>
 8011c6e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011c72:	1b76      	subs	r6, r6, r5
 8011c74:	2502      	movs	r5, #2
 8011c76:	f1b9 0f00 	cmp.w	r9, #0
 8011c7a:	d047      	beq.n	8011d0c <__gethex+0x38c>
 8011c7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011c80:	2b02      	cmp	r3, #2
 8011c82:	d015      	beq.n	8011cb0 <__gethex+0x330>
 8011c84:	2b03      	cmp	r3, #3
 8011c86:	d017      	beq.n	8011cb8 <__gethex+0x338>
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	d109      	bne.n	8011ca0 <__gethex+0x320>
 8011c8c:	f019 0f02 	tst.w	r9, #2
 8011c90:	d006      	beq.n	8011ca0 <__gethex+0x320>
 8011c92:	f8da 3000 	ldr.w	r3, [sl]
 8011c96:	ea49 0903 	orr.w	r9, r9, r3
 8011c9a:	f019 0f01 	tst.w	r9, #1
 8011c9e:	d10e      	bne.n	8011cbe <__gethex+0x33e>
 8011ca0:	f045 0510 	orr.w	r5, r5, #16
 8011ca4:	e032      	b.n	8011d0c <__gethex+0x38c>
 8011ca6:	f04f 0901 	mov.w	r9, #1
 8011caa:	e7d1      	b.n	8011c50 <__gethex+0x2d0>
 8011cac:	2501      	movs	r5, #1
 8011cae:	e7e2      	b.n	8011c76 <__gethex+0x2f6>
 8011cb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cb2:	f1c3 0301 	rsb	r3, r3, #1
 8011cb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d0f0      	beq.n	8011ca0 <__gethex+0x320>
 8011cbe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011cc2:	f104 0314 	add.w	r3, r4, #20
 8011cc6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011cca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011cce:	f04f 0c00 	mov.w	ip, #0
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cd8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011cdc:	d01b      	beq.n	8011d16 <__gethex+0x396>
 8011cde:	3201      	adds	r2, #1
 8011ce0:	6002      	str	r2, [r0, #0]
 8011ce2:	2d02      	cmp	r5, #2
 8011ce4:	f104 0314 	add.w	r3, r4, #20
 8011ce8:	d13c      	bne.n	8011d64 <__gethex+0x3e4>
 8011cea:	f8d8 2000 	ldr.w	r2, [r8]
 8011cee:	3a01      	subs	r2, #1
 8011cf0:	42b2      	cmp	r2, r6
 8011cf2:	d109      	bne.n	8011d08 <__gethex+0x388>
 8011cf4:	1171      	asrs	r1, r6, #5
 8011cf6:	2201      	movs	r2, #1
 8011cf8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011cfc:	f006 061f 	and.w	r6, r6, #31
 8011d00:	fa02 f606 	lsl.w	r6, r2, r6
 8011d04:	421e      	tst	r6, r3
 8011d06:	d13a      	bne.n	8011d7e <__gethex+0x3fe>
 8011d08:	f045 0520 	orr.w	r5, r5, #32
 8011d0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d0e:	601c      	str	r4, [r3, #0]
 8011d10:	9b02      	ldr	r3, [sp, #8]
 8011d12:	601f      	str	r7, [r3, #0]
 8011d14:	e6b0      	b.n	8011a78 <__gethex+0xf8>
 8011d16:	4299      	cmp	r1, r3
 8011d18:	f843 cc04 	str.w	ip, [r3, #-4]
 8011d1c:	d8d9      	bhi.n	8011cd2 <__gethex+0x352>
 8011d1e:	68a3      	ldr	r3, [r4, #8]
 8011d20:	459b      	cmp	fp, r3
 8011d22:	db17      	blt.n	8011d54 <__gethex+0x3d4>
 8011d24:	6861      	ldr	r1, [r4, #4]
 8011d26:	9801      	ldr	r0, [sp, #4]
 8011d28:	3101      	adds	r1, #1
 8011d2a:	f7fd fe7f 	bl	800fa2c <_Balloc>
 8011d2e:	4681      	mov	r9, r0
 8011d30:	b918      	cbnz	r0, 8011d3a <__gethex+0x3ba>
 8011d32:	4b1a      	ldr	r3, [pc, #104]	@ (8011d9c <__gethex+0x41c>)
 8011d34:	4602      	mov	r2, r0
 8011d36:	2184      	movs	r1, #132	@ 0x84
 8011d38:	e6c5      	b.n	8011ac6 <__gethex+0x146>
 8011d3a:	6922      	ldr	r2, [r4, #16]
 8011d3c:	3202      	adds	r2, #2
 8011d3e:	f104 010c 	add.w	r1, r4, #12
 8011d42:	0092      	lsls	r2, r2, #2
 8011d44:	300c      	adds	r0, #12
 8011d46:	f7fc ffc4 	bl	800ecd2 <memcpy>
 8011d4a:	4621      	mov	r1, r4
 8011d4c:	9801      	ldr	r0, [sp, #4]
 8011d4e:	f7fd fead 	bl	800faac <_Bfree>
 8011d52:	464c      	mov	r4, r9
 8011d54:	6923      	ldr	r3, [r4, #16]
 8011d56:	1c5a      	adds	r2, r3, #1
 8011d58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011d5c:	6122      	str	r2, [r4, #16]
 8011d5e:	2201      	movs	r2, #1
 8011d60:	615a      	str	r2, [r3, #20]
 8011d62:	e7be      	b.n	8011ce2 <__gethex+0x362>
 8011d64:	6922      	ldr	r2, [r4, #16]
 8011d66:	455a      	cmp	r2, fp
 8011d68:	dd0b      	ble.n	8011d82 <__gethex+0x402>
 8011d6a:	2101      	movs	r1, #1
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	f7ff fd9f 	bl	80118b0 <rshift>
 8011d72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011d76:	3701      	adds	r7, #1
 8011d78:	42bb      	cmp	r3, r7
 8011d7a:	f6ff aee0 	blt.w	8011b3e <__gethex+0x1be>
 8011d7e:	2501      	movs	r5, #1
 8011d80:	e7c2      	b.n	8011d08 <__gethex+0x388>
 8011d82:	f016 061f 	ands.w	r6, r6, #31
 8011d86:	d0fa      	beq.n	8011d7e <__gethex+0x3fe>
 8011d88:	4453      	add	r3, sl
 8011d8a:	f1c6 0620 	rsb	r6, r6, #32
 8011d8e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011d92:	f7fd ff3d 	bl	800fc10 <__hi0bits>
 8011d96:	42b0      	cmp	r0, r6
 8011d98:	dbe7      	blt.n	8011d6a <__gethex+0x3ea>
 8011d9a:	e7f0      	b.n	8011d7e <__gethex+0x3fe>
 8011d9c:	08013301 	.word	0x08013301

08011da0 <L_shift>:
 8011da0:	f1c2 0208 	rsb	r2, r2, #8
 8011da4:	0092      	lsls	r2, r2, #2
 8011da6:	b570      	push	{r4, r5, r6, lr}
 8011da8:	f1c2 0620 	rsb	r6, r2, #32
 8011dac:	6843      	ldr	r3, [r0, #4]
 8011dae:	6804      	ldr	r4, [r0, #0]
 8011db0:	fa03 f506 	lsl.w	r5, r3, r6
 8011db4:	432c      	orrs	r4, r5
 8011db6:	40d3      	lsrs	r3, r2
 8011db8:	6004      	str	r4, [r0, #0]
 8011dba:	f840 3f04 	str.w	r3, [r0, #4]!
 8011dbe:	4288      	cmp	r0, r1
 8011dc0:	d3f4      	bcc.n	8011dac <L_shift+0xc>
 8011dc2:	bd70      	pop	{r4, r5, r6, pc}

08011dc4 <__match>:
 8011dc4:	b530      	push	{r4, r5, lr}
 8011dc6:	6803      	ldr	r3, [r0, #0]
 8011dc8:	3301      	adds	r3, #1
 8011dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dce:	b914      	cbnz	r4, 8011dd6 <__match+0x12>
 8011dd0:	6003      	str	r3, [r0, #0]
 8011dd2:	2001      	movs	r0, #1
 8011dd4:	bd30      	pop	{r4, r5, pc}
 8011dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dda:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011dde:	2d19      	cmp	r5, #25
 8011de0:	bf98      	it	ls
 8011de2:	3220      	addls	r2, #32
 8011de4:	42a2      	cmp	r2, r4
 8011de6:	d0f0      	beq.n	8011dca <__match+0x6>
 8011de8:	2000      	movs	r0, #0
 8011dea:	e7f3      	b.n	8011dd4 <__match+0x10>

08011dec <__hexnan>:
 8011dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df0:	680b      	ldr	r3, [r1, #0]
 8011df2:	6801      	ldr	r1, [r0, #0]
 8011df4:	115e      	asrs	r6, r3, #5
 8011df6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011dfa:	f013 031f 	ands.w	r3, r3, #31
 8011dfe:	b087      	sub	sp, #28
 8011e00:	bf18      	it	ne
 8011e02:	3604      	addne	r6, #4
 8011e04:	2500      	movs	r5, #0
 8011e06:	1f37      	subs	r7, r6, #4
 8011e08:	4682      	mov	sl, r0
 8011e0a:	4690      	mov	r8, r2
 8011e0c:	9301      	str	r3, [sp, #4]
 8011e0e:	f846 5c04 	str.w	r5, [r6, #-4]
 8011e12:	46b9      	mov	r9, r7
 8011e14:	463c      	mov	r4, r7
 8011e16:	9502      	str	r5, [sp, #8]
 8011e18:	46ab      	mov	fp, r5
 8011e1a:	784a      	ldrb	r2, [r1, #1]
 8011e1c:	1c4b      	adds	r3, r1, #1
 8011e1e:	9303      	str	r3, [sp, #12]
 8011e20:	b342      	cbz	r2, 8011e74 <__hexnan+0x88>
 8011e22:	4610      	mov	r0, r2
 8011e24:	9105      	str	r1, [sp, #20]
 8011e26:	9204      	str	r2, [sp, #16]
 8011e28:	f7ff fd94 	bl	8011954 <__hexdig_fun>
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	d151      	bne.n	8011ed4 <__hexnan+0xe8>
 8011e30:	9a04      	ldr	r2, [sp, #16]
 8011e32:	9905      	ldr	r1, [sp, #20]
 8011e34:	2a20      	cmp	r2, #32
 8011e36:	d818      	bhi.n	8011e6a <__hexnan+0x7e>
 8011e38:	9b02      	ldr	r3, [sp, #8]
 8011e3a:	459b      	cmp	fp, r3
 8011e3c:	dd13      	ble.n	8011e66 <__hexnan+0x7a>
 8011e3e:	454c      	cmp	r4, r9
 8011e40:	d206      	bcs.n	8011e50 <__hexnan+0x64>
 8011e42:	2d07      	cmp	r5, #7
 8011e44:	dc04      	bgt.n	8011e50 <__hexnan+0x64>
 8011e46:	462a      	mov	r2, r5
 8011e48:	4649      	mov	r1, r9
 8011e4a:	4620      	mov	r0, r4
 8011e4c:	f7ff ffa8 	bl	8011da0 <L_shift>
 8011e50:	4544      	cmp	r4, r8
 8011e52:	d952      	bls.n	8011efa <__hexnan+0x10e>
 8011e54:	2300      	movs	r3, #0
 8011e56:	f1a4 0904 	sub.w	r9, r4, #4
 8011e5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e5e:	f8cd b008 	str.w	fp, [sp, #8]
 8011e62:	464c      	mov	r4, r9
 8011e64:	461d      	mov	r5, r3
 8011e66:	9903      	ldr	r1, [sp, #12]
 8011e68:	e7d7      	b.n	8011e1a <__hexnan+0x2e>
 8011e6a:	2a29      	cmp	r2, #41	@ 0x29
 8011e6c:	d157      	bne.n	8011f1e <__hexnan+0x132>
 8011e6e:	3102      	adds	r1, #2
 8011e70:	f8ca 1000 	str.w	r1, [sl]
 8011e74:	f1bb 0f00 	cmp.w	fp, #0
 8011e78:	d051      	beq.n	8011f1e <__hexnan+0x132>
 8011e7a:	454c      	cmp	r4, r9
 8011e7c:	d206      	bcs.n	8011e8c <__hexnan+0xa0>
 8011e7e:	2d07      	cmp	r5, #7
 8011e80:	dc04      	bgt.n	8011e8c <__hexnan+0xa0>
 8011e82:	462a      	mov	r2, r5
 8011e84:	4649      	mov	r1, r9
 8011e86:	4620      	mov	r0, r4
 8011e88:	f7ff ff8a 	bl	8011da0 <L_shift>
 8011e8c:	4544      	cmp	r4, r8
 8011e8e:	d936      	bls.n	8011efe <__hexnan+0x112>
 8011e90:	f1a8 0204 	sub.w	r2, r8, #4
 8011e94:	4623      	mov	r3, r4
 8011e96:	f853 1b04 	ldr.w	r1, [r3], #4
 8011e9a:	f842 1f04 	str.w	r1, [r2, #4]!
 8011e9e:	429f      	cmp	r7, r3
 8011ea0:	d2f9      	bcs.n	8011e96 <__hexnan+0xaa>
 8011ea2:	1b3b      	subs	r3, r7, r4
 8011ea4:	f023 0303 	bic.w	r3, r3, #3
 8011ea8:	3304      	adds	r3, #4
 8011eaa:	3401      	adds	r4, #1
 8011eac:	3e03      	subs	r6, #3
 8011eae:	42b4      	cmp	r4, r6
 8011eb0:	bf88      	it	hi
 8011eb2:	2304      	movhi	r3, #4
 8011eb4:	4443      	add	r3, r8
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f843 2b04 	str.w	r2, [r3], #4
 8011ebc:	429f      	cmp	r7, r3
 8011ebe:	d2fb      	bcs.n	8011eb8 <__hexnan+0xcc>
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	b91b      	cbnz	r3, 8011ecc <__hexnan+0xe0>
 8011ec4:	4547      	cmp	r7, r8
 8011ec6:	d128      	bne.n	8011f1a <__hexnan+0x12e>
 8011ec8:	2301      	movs	r3, #1
 8011eca:	603b      	str	r3, [r7, #0]
 8011ecc:	2005      	movs	r0, #5
 8011ece:	b007      	add	sp, #28
 8011ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed4:	3501      	adds	r5, #1
 8011ed6:	2d08      	cmp	r5, #8
 8011ed8:	f10b 0b01 	add.w	fp, fp, #1
 8011edc:	dd06      	ble.n	8011eec <__hexnan+0x100>
 8011ede:	4544      	cmp	r4, r8
 8011ee0:	d9c1      	bls.n	8011e66 <__hexnan+0x7a>
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ee8:	2501      	movs	r5, #1
 8011eea:	3c04      	subs	r4, #4
 8011eec:	6822      	ldr	r2, [r4, #0]
 8011eee:	f000 000f 	and.w	r0, r0, #15
 8011ef2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011ef6:	6020      	str	r0, [r4, #0]
 8011ef8:	e7b5      	b.n	8011e66 <__hexnan+0x7a>
 8011efa:	2508      	movs	r5, #8
 8011efc:	e7b3      	b.n	8011e66 <__hexnan+0x7a>
 8011efe:	9b01      	ldr	r3, [sp, #4]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d0dd      	beq.n	8011ec0 <__hexnan+0xd4>
 8011f04:	f1c3 0320 	rsb	r3, r3, #32
 8011f08:	f04f 32ff 	mov.w	r2, #4294967295
 8011f0c:	40da      	lsrs	r2, r3
 8011f0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011f12:	4013      	ands	r3, r2
 8011f14:	f846 3c04 	str.w	r3, [r6, #-4]
 8011f18:	e7d2      	b.n	8011ec0 <__hexnan+0xd4>
 8011f1a:	3f04      	subs	r7, #4
 8011f1c:	e7d0      	b.n	8011ec0 <__hexnan+0xd4>
 8011f1e:	2004      	movs	r0, #4
 8011f20:	e7d5      	b.n	8011ece <__hexnan+0xe2>

08011f22 <__ascii_mbtowc>:
 8011f22:	b082      	sub	sp, #8
 8011f24:	b901      	cbnz	r1, 8011f28 <__ascii_mbtowc+0x6>
 8011f26:	a901      	add	r1, sp, #4
 8011f28:	b142      	cbz	r2, 8011f3c <__ascii_mbtowc+0x1a>
 8011f2a:	b14b      	cbz	r3, 8011f40 <__ascii_mbtowc+0x1e>
 8011f2c:	7813      	ldrb	r3, [r2, #0]
 8011f2e:	600b      	str	r3, [r1, #0]
 8011f30:	7812      	ldrb	r2, [r2, #0]
 8011f32:	1e10      	subs	r0, r2, #0
 8011f34:	bf18      	it	ne
 8011f36:	2001      	movne	r0, #1
 8011f38:	b002      	add	sp, #8
 8011f3a:	4770      	bx	lr
 8011f3c:	4610      	mov	r0, r2
 8011f3e:	e7fb      	b.n	8011f38 <__ascii_mbtowc+0x16>
 8011f40:	f06f 0001 	mvn.w	r0, #1
 8011f44:	e7f8      	b.n	8011f38 <__ascii_mbtowc+0x16>

08011f46 <_realloc_r>:
 8011f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f4a:	4680      	mov	r8, r0
 8011f4c:	4615      	mov	r5, r2
 8011f4e:	460c      	mov	r4, r1
 8011f50:	b921      	cbnz	r1, 8011f5c <_realloc_r+0x16>
 8011f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f56:	4611      	mov	r1, r2
 8011f58:	f7fb bd8c 	b.w	800da74 <_malloc_r>
 8011f5c:	b92a      	cbnz	r2, 8011f6a <_realloc_r+0x24>
 8011f5e:	f7fd fd1b 	bl	800f998 <_free_r>
 8011f62:	2400      	movs	r4, #0
 8011f64:	4620      	mov	r0, r4
 8011f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f6a:	f000 f8ab 	bl	80120c4 <_malloc_usable_size_r>
 8011f6e:	4285      	cmp	r5, r0
 8011f70:	4606      	mov	r6, r0
 8011f72:	d802      	bhi.n	8011f7a <_realloc_r+0x34>
 8011f74:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011f78:	d8f4      	bhi.n	8011f64 <_realloc_r+0x1e>
 8011f7a:	4629      	mov	r1, r5
 8011f7c:	4640      	mov	r0, r8
 8011f7e:	f7fb fd79 	bl	800da74 <_malloc_r>
 8011f82:	4607      	mov	r7, r0
 8011f84:	2800      	cmp	r0, #0
 8011f86:	d0ec      	beq.n	8011f62 <_realloc_r+0x1c>
 8011f88:	42b5      	cmp	r5, r6
 8011f8a:	462a      	mov	r2, r5
 8011f8c:	4621      	mov	r1, r4
 8011f8e:	bf28      	it	cs
 8011f90:	4632      	movcs	r2, r6
 8011f92:	f7fc fe9e 	bl	800ecd2 <memcpy>
 8011f96:	4621      	mov	r1, r4
 8011f98:	4640      	mov	r0, r8
 8011f9a:	f7fd fcfd 	bl	800f998 <_free_r>
 8011f9e:	463c      	mov	r4, r7
 8011fa0:	e7e0      	b.n	8011f64 <_realloc_r+0x1e>

08011fa2 <__ascii_wctomb>:
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	4608      	mov	r0, r1
 8011fa6:	b141      	cbz	r1, 8011fba <__ascii_wctomb+0x18>
 8011fa8:	2aff      	cmp	r2, #255	@ 0xff
 8011faa:	d904      	bls.n	8011fb6 <__ascii_wctomb+0x14>
 8011fac:	228a      	movs	r2, #138	@ 0x8a
 8011fae:	601a      	str	r2, [r3, #0]
 8011fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8011fb4:	4770      	bx	lr
 8011fb6:	700a      	strb	r2, [r1, #0]
 8011fb8:	2001      	movs	r0, #1
 8011fba:	4770      	bx	lr

08011fbc <__swhatbuf_r>:
 8011fbc:	b570      	push	{r4, r5, r6, lr}
 8011fbe:	460c      	mov	r4, r1
 8011fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fc4:	2900      	cmp	r1, #0
 8011fc6:	b096      	sub	sp, #88	@ 0x58
 8011fc8:	4615      	mov	r5, r2
 8011fca:	461e      	mov	r6, r3
 8011fcc:	da0d      	bge.n	8011fea <__swhatbuf_r+0x2e>
 8011fce:	89a3      	ldrh	r3, [r4, #12]
 8011fd0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011fd4:	f04f 0100 	mov.w	r1, #0
 8011fd8:	bf14      	ite	ne
 8011fda:	2340      	movne	r3, #64	@ 0x40
 8011fdc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	6031      	str	r1, [r6, #0]
 8011fe4:	602b      	str	r3, [r5, #0]
 8011fe6:	b016      	add	sp, #88	@ 0x58
 8011fe8:	bd70      	pop	{r4, r5, r6, pc}
 8011fea:	466a      	mov	r2, sp
 8011fec:	f000 f848 	bl	8012080 <_fstat_r>
 8011ff0:	2800      	cmp	r0, #0
 8011ff2:	dbec      	blt.n	8011fce <__swhatbuf_r+0x12>
 8011ff4:	9901      	ldr	r1, [sp, #4]
 8011ff6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011ffa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011ffe:	4259      	negs	r1, r3
 8012000:	4159      	adcs	r1, r3
 8012002:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012006:	e7eb      	b.n	8011fe0 <__swhatbuf_r+0x24>

08012008 <__smakebuf_r>:
 8012008:	898b      	ldrh	r3, [r1, #12]
 801200a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801200c:	079d      	lsls	r5, r3, #30
 801200e:	4606      	mov	r6, r0
 8012010:	460c      	mov	r4, r1
 8012012:	d507      	bpl.n	8012024 <__smakebuf_r+0x1c>
 8012014:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012018:	6023      	str	r3, [r4, #0]
 801201a:	6123      	str	r3, [r4, #16]
 801201c:	2301      	movs	r3, #1
 801201e:	6163      	str	r3, [r4, #20]
 8012020:	b003      	add	sp, #12
 8012022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012024:	ab01      	add	r3, sp, #4
 8012026:	466a      	mov	r2, sp
 8012028:	f7ff ffc8 	bl	8011fbc <__swhatbuf_r>
 801202c:	9f00      	ldr	r7, [sp, #0]
 801202e:	4605      	mov	r5, r0
 8012030:	4639      	mov	r1, r7
 8012032:	4630      	mov	r0, r6
 8012034:	f7fb fd1e 	bl	800da74 <_malloc_r>
 8012038:	b948      	cbnz	r0, 801204e <__smakebuf_r+0x46>
 801203a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801203e:	059a      	lsls	r2, r3, #22
 8012040:	d4ee      	bmi.n	8012020 <__smakebuf_r+0x18>
 8012042:	f023 0303 	bic.w	r3, r3, #3
 8012046:	f043 0302 	orr.w	r3, r3, #2
 801204a:	81a3      	strh	r3, [r4, #12]
 801204c:	e7e2      	b.n	8012014 <__smakebuf_r+0xc>
 801204e:	89a3      	ldrh	r3, [r4, #12]
 8012050:	6020      	str	r0, [r4, #0]
 8012052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012056:	81a3      	strh	r3, [r4, #12]
 8012058:	9b01      	ldr	r3, [sp, #4]
 801205a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801205e:	b15b      	cbz	r3, 8012078 <__smakebuf_r+0x70>
 8012060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012064:	4630      	mov	r0, r6
 8012066:	f000 f81d 	bl	80120a4 <_isatty_r>
 801206a:	b128      	cbz	r0, 8012078 <__smakebuf_r+0x70>
 801206c:	89a3      	ldrh	r3, [r4, #12]
 801206e:	f023 0303 	bic.w	r3, r3, #3
 8012072:	f043 0301 	orr.w	r3, r3, #1
 8012076:	81a3      	strh	r3, [r4, #12]
 8012078:	89a3      	ldrh	r3, [r4, #12]
 801207a:	431d      	orrs	r5, r3
 801207c:	81a5      	strh	r5, [r4, #12]
 801207e:	e7cf      	b.n	8012020 <__smakebuf_r+0x18>

08012080 <_fstat_r>:
 8012080:	b538      	push	{r3, r4, r5, lr}
 8012082:	4d07      	ldr	r5, [pc, #28]	@ (80120a0 <_fstat_r+0x20>)
 8012084:	2300      	movs	r3, #0
 8012086:	4604      	mov	r4, r0
 8012088:	4608      	mov	r0, r1
 801208a:	4611      	mov	r1, r2
 801208c:	602b      	str	r3, [r5, #0]
 801208e:	f7f3 fb7d 	bl	800578c <_fstat>
 8012092:	1c43      	adds	r3, r0, #1
 8012094:	d102      	bne.n	801209c <_fstat_r+0x1c>
 8012096:	682b      	ldr	r3, [r5, #0]
 8012098:	b103      	cbz	r3, 801209c <_fstat_r+0x1c>
 801209a:	6023      	str	r3, [r4, #0]
 801209c:	bd38      	pop	{r3, r4, r5, pc}
 801209e:	bf00      	nop
 80120a0:	2000070c 	.word	0x2000070c

080120a4 <_isatty_r>:
 80120a4:	b538      	push	{r3, r4, r5, lr}
 80120a6:	4d06      	ldr	r5, [pc, #24]	@ (80120c0 <_isatty_r+0x1c>)
 80120a8:	2300      	movs	r3, #0
 80120aa:	4604      	mov	r4, r0
 80120ac:	4608      	mov	r0, r1
 80120ae:	602b      	str	r3, [r5, #0]
 80120b0:	f7f3 fb7c 	bl	80057ac <_isatty>
 80120b4:	1c43      	adds	r3, r0, #1
 80120b6:	d102      	bne.n	80120be <_isatty_r+0x1a>
 80120b8:	682b      	ldr	r3, [r5, #0]
 80120ba:	b103      	cbz	r3, 80120be <_isatty_r+0x1a>
 80120bc:	6023      	str	r3, [r4, #0]
 80120be:	bd38      	pop	{r3, r4, r5, pc}
 80120c0:	2000070c 	.word	0x2000070c

080120c4 <_malloc_usable_size_r>:
 80120c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120c8:	1f18      	subs	r0, r3, #4
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	bfbc      	itt	lt
 80120ce:	580b      	ldrlt	r3, [r1, r0]
 80120d0:	18c0      	addlt	r0, r0, r3
 80120d2:	4770      	bx	lr

080120d4 <_init>:
 80120d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120d6:	bf00      	nop
 80120d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120da:	bc08      	pop	{r3}
 80120dc:	469e      	mov	lr, r3
 80120de:	4770      	bx	lr

080120e0 <_fini>:
 80120e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120e2:	bf00      	nop
 80120e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120e6:	bc08      	pop	{r3}
 80120e8:	469e      	mov	lr, r3
 80120ea:	4770      	bx	lr
