
STM32G4_GY91_Cyphal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012114  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000153c  080122f8  080122f8  000132f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013834  08013834  000151d4  2**0
                  CONTENTS
  4 .ARM          00000008  08013834  08013834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801383c  0801383c  000151d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801383c  0801383c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0801384c  0801384c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0801385c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  200001d8  08013a30  000151d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  08013a30  00015704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000151d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c3ac  00000000  00000000  00015204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007643  00000000  00000000  000515b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f20  00000000  00000000  00058bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000182b  00000000  00000000  0005ab18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f06f  00000000  00000000  0005c343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a1fb  00000000  00000000  0008b3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011452b  00000000  00000000  000b55ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001c9ad8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ad4  00000000  00000000  001c9b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001d3634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000037  00000000  00000000  001d369f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080122dc 	.word	0x080122dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	080122dc 	.word	0x080122dc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	08012d24 	.word	0x08012d24

08001054 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	08012d24 	.word	0x08012d24

08001074 <_ZN15Adafruit_SensorD0Ev>:
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe9 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001082:	2108      	movs	r1, #8
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f00c fd6e 	bl	800db66 <_ZdlPvj>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_ZN3imu10QuaternionC1Edddd>:
class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}

    Quaternion(double w, double x, double y, double z):
 80010ac:	b480      	push	{r7}
 80010ae:	b08b      	sub	sp, #44	@ 0x2c
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6278      	str	r0, [r7, #36]	@ 0x24
 80010b4:	ed87 0b06 	vstr	d0, [r7, #24]
 80010b8:	ed87 1b04 	vstr	d1, [r7, #16]
 80010bc:	ed87 2b02 	vstr	d2, [r7, #8]
 80010c0:	ed87 3b00 	vstr	d3, [r7]
        _w(w), _x(x), _y(y), _z(z) {}
 80010c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010ca:	e9c1 2300 	strd	r2, r3, [r1]
 80010ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80010d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010de:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80010e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	4618      	mov	r0, r3
 80010f0:	372c      	adds	r7, #44	@ 0x2c
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	4613      	mov	r3, r2
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff91 	bl	8001034 <_ZN15Adafruit_SensorC1Ev>
 8001112:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <_ZN15Adafruit_BNO055C1Elh+0x34>)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	609a      	str	r2, [r3, #8]
  _address = address;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	715a      	strb	r2, [r3, #5]
}
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	08012d08 	.word	0x08012d08

08001134 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
/*!
    @brief  Sets up the HW
*/
/**************************************************************************/
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
#ifdef ESP8266
  Wire.setClockStretchLimit(1000); // Allow for 1000us of clock stretching
#endif

  /* Make sure we have the right device */
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
 8001140:	2100      	movs	r1, #0
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fb82 	bl	800184c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 8001148:	4603      	mov	r3, r0
 800114a:	73fb      	strb	r3, [r7, #15]
  if(id != BNO055_ID)
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001150:	d00e      	beq.n	8001170 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3c>
  {
    delay(1000); // hold on for boot
 8001152:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001156:	f001 f990 	bl	800247a <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
 800115a:	2100      	movs	r1, #0
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 fb75 	bl	800184c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]
    if(id != BNO055_ID) {
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	2ba0      	cmp	r3, #160	@ 0xa0
 800116a:	d001      	beq.n	8001170 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3c>
      return false;  // still not? ok bail
 800116c:	2300      	movs	r3, #0
 800116e:	e04b      	b.n	8001208 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd4>
    }
  }

  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f84c 	bl	8001210 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
 8001178:	2220      	movs	r2, #32
 800117a:	213f      	movs	r1, #63	@ 0x3f
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 fb52 	bl	8001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(1000);
 8001182:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001186:	f001 f978 	bl	800247a <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
 800118a:	e002      	b.n	8001192 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5e>
  {
    delay(10);
 800118c:	200a      	movs	r0, #10
 800118e:	f001 f974 	bl	800247a <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
 8001192:	2100      	movs	r1, #0
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 fb59 	bl	800184c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 800119a:	4603      	mov	r3, r0
 800119c:	2ba0      	cmp	r3, #160	@ 0xa0
 800119e:	bf14      	ite	ne
 80011a0:	2301      	movne	r3, #1
 80011a2:	2300      	moveq	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
  }
  delay(50);
 80011aa:	2032      	movs	r0, #50	@ 0x32
 80011ac:	f001 f965 	bl	800247a <delay>

  /* Set to normal power mode */
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
 80011b0:	2200      	movs	r2, #0
 80011b2:	213e      	movs	r1, #62	@ 0x3e
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 fb36 	bl	8001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(50);
 80011ba:	2032      	movs	r0, #50	@ 0x32
 80011bc:	f001 f95d 	bl	800247a <delay>

  write8(BNO055_PAGE_ID_ADDR, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2107      	movs	r1, #7
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 fb2e 	bl	8001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(50);
 80011ca:	2032      	movs	r0, #50	@ 0x32
 80011cc:	f001 f955 	bl	800247a <delay>

  /* Set the output units */
  
  uint8_t unitsel = (0 << 7) | // Orientation
 80011d0:	2306      	movs	r3, #6
 80011d2:	73bb      	strb	r3, [r7, #14]
                    (0 << 4) | // Temperature = Celsius
                    (1 << 2) | // Euler 
                    (1 << 1) | // Gyro = Rads
                    (0 << 0);  // Accelerometer = m/s^2
  write8(BNO055_UNIT_SEL_ADDR, unitsel);
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	461a      	mov	r2, r3
 80011d8:	213b      	movs	r1, #59	@ 0x3b
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fb23 	bl	8001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(50);
 80011e0:	2032      	movs	r0, #50	@ 0x32
 80011e2:	f001 f94a 	bl	800247a <delay>
  delay(10);
  write8(BNO055_AXIS_MAP_SIGN_ADDR, REMAP_SIGN_P2); // P0-P7, Default is P1
  delay(10);
  */

  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	213f      	movs	r1, #63	@ 0x3f
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fb1b 	bl	8001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(50);
 80011f0:	2032      	movs	r0, #50	@ 0x32
 80011f2:	f001 f942 	bl	800247a <delay>
  /* Set the requested operating mode (see section 3.3) */
  setMode(mode);
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f808 	bl	8001210 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(50);
 8001200:	2032      	movs	r0, #50	@ 0x32
 8001202:	f001 f93a 	bl	800247a <delay>

  return true;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
/*!
    @brief  Puts the chip in the specified operating mode
*/
/**************************************************************************/
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
  _mode = mode;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	78fa      	ldrb	r2, [r7, #3]
 8001220:	731a      	strb	r2, [r3, #12]
  write8(BNO055_OPR_MODE_ADDR, _mode);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7b1b      	ldrb	r3, [r3, #12]
 8001226:	461a      	mov	r2, r3
 8001228:	213d      	movs	r1, #61	@ 0x3d
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fafb 	bl	8001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
 8001230:	201e      	movs	r0, #30
 8001232:	f001 f922 	bl	800247a <delay>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	4613      	mov	r3, r2
 800124c:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 fb52 	bl	80018f8 <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2206      	movs	r2, #6
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f00d fd56 	bl	800ed0e <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	83fb      	strh	r3, [r7, #30]
 8001266:	8bfb      	ldrh	r3, [r7, #30]
 8001268:	83bb      	strh	r3, [r7, #28]
 800126a:	8bbb      	ldrh	r3, [r7, #28]
 800126c:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 800126e:	f107 0214 	add.w	r2, r7, #20
 8001272:	79f9      	ldrb	r1, [r7, #7]
 8001274:	2306      	movs	r3, #6
 8001276:	68b8      	ldr	r0, [r7, #8]
 8001278:	f000 fafb 	bl	8001872 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 800127c:	7d3b      	ldrb	r3, [r7, #20]
 800127e:	b21a      	sxth	r2, r3
 8001280:	7d7b      	ldrb	r3, [r7, #21]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800128a:	7dbb      	ldrb	r3, [r7, #22]
 800128c:	b21a      	sxth	r2, r3
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b21b      	sxth	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 8001298:	7e3b      	ldrb	r3, [r7, #24]
 800129a:	b21a      	sxth	r2, r3
 800129c:	7e7b      	ldrb	r3, [r7, #25]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	3b08      	subs	r3, #8
 80012aa:	2b26      	cmp	r3, #38	@ 0x26
 80012ac:	f200 8152 	bhi.w	8001554 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 80012b0:	a201      	add	r2, pc, #4	@ (adr r2, 80012b8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 80012b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b6:	bf00      	nop
 80012b8:	080014d5 	.word	0x080014d5
 80012bc:	08001555 	.word	0x08001555
 80012c0:	08001555 	.word	0x08001555
 80012c4:	08001555 	.word	0x08001555
 80012c8:	08001555 	.word	0x08001555
 80012cc:	08001555 	.word	0x08001555
 80012d0:	08001355 	.word	0x08001355
 80012d4:	08001555 	.word	0x08001555
 80012d8:	08001555 	.word	0x08001555
 80012dc:	08001555 	.word	0x08001555
 80012e0:	08001555 	.word	0x08001555
 80012e4:	08001555 	.word	0x08001555
 80012e8:	080013d5 	.word	0x080013d5
 80012ec:	08001555 	.word	0x08001555
 80012f0:	08001555 	.word	0x08001555
 80012f4:	08001555 	.word	0x08001555
 80012f8:	08001555 	.word	0x08001555
 80012fc:	08001555 	.word	0x08001555
 8001300:	08001455 	.word	0x08001455
 8001304:	08001555 	.word	0x08001555
 8001308:	08001555 	.word	0x08001555
 800130c:	08001555 	.word	0x08001555
 8001310:	08001555 	.word	0x08001555
 8001314:	08001555 	.word	0x08001555
 8001318:	08001555 	.word	0x08001555
 800131c:	08001555 	.word	0x08001555
 8001320:	08001555 	.word	0x08001555
 8001324:	08001555 	.word	0x08001555
 8001328:	08001555 	.word	0x08001555
 800132c:	08001555 	.word	0x08001555
 8001330:	08001555 	.word	0x08001555
 8001334:	08001555 	.word	0x08001555
 8001338:	080014d5 	.word	0x080014d5
 800133c:	08001555 	.word	0x08001555
 8001340:	08001555 	.word	0x08001555
 8001344:	08001555 	.word	0x08001555
 8001348:	08001555 	.word	0x08001555
 800134c:	08001555 	.word	0x08001555
 8001350:	080014d5 	.word	0x080014d5
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 8001354:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f90b 	bl	8000574 <__aeabi_i2d>
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b7f      	ldr	r3, [pc, #508]	@ (8001560 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001364:	f7ff fa9a 	bl	800089c <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4614      	mov	r4, r2
 800136e:	461d      	mov	r5, r3
 8001370:	2100      	movs	r1, #0
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f000 facf 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 8001378:	4603      	mov	r3, r0
 800137a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 800137e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8f6 	bl	8000574 <__aeabi_i2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b74      	ldr	r3, [pc, #464]	@ (8001560 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800138e:	f7ff fa85 	bl	800089c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4614      	mov	r4, r2
 8001398:	461d      	mov	r5, r3
 800139a:	2101      	movs	r1, #1
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f000 faba 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 80013a2:	4603      	mov	r3, r0
 80013a4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 80013a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8e1 	bl	8000574 <__aeabi_i2d>
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001560 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 80013b8:	f7ff fa70 	bl	800089c <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4614      	mov	r4, r2
 80013c2:	461d      	mov	r5, r3
 80013c4:	2102      	movs	r1, #2
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 faa5 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 80013cc:	4603      	mov	r3, r0
 80013ce:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80013d2:	e0bf      	b.n	8001554 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 80013d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8cb 	bl	8000574 <__aeabi_i2d>
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b60      	ldr	r3, [pc, #384]	@ (8001564 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80013e4:	f7ff fa5a 	bl	800089c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4614      	mov	r4, r2
 80013ee:	461d      	mov	r5, r3
 80013f0:	2100      	movs	r1, #0
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f000 fa8f 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 80013f8:	4603      	mov	r3, r0
 80013fa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80013fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f8b6 	bl	8000574 <__aeabi_i2d>
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b55      	ldr	r3, [pc, #340]	@ (8001564 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800140e:	f7ff fa45 	bl	800089c <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	461d      	mov	r5, r3
 800141a:	2101      	movs	r1, #1
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 fa7a 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 8001422:	4603      	mov	r3, r0
 8001424:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 8001428:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f8a1 	bl	8000574 <__aeabi_i2d>
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b4b      	ldr	r3, [pc, #300]	@ (8001564 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001438:	f7ff fa30 	bl	800089c <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4614      	mov	r4, r2
 8001442:	461d      	mov	r5, r3
 8001444:	2102      	movs	r1, #2
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fa65 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 800144c:	4603      	mov	r3, r0
 800144e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001452:	e07f      	b.n	8001554 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001454:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f88b 	bl	8000574 <__aeabi_i2d>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	4b40      	ldr	r3, [pc, #256]	@ (8001564 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001464:	f7ff fa1a 	bl	800089c <__aeabi_ddiv>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4614      	mov	r4, r2
 800146e:	461d      	mov	r5, r3
 8001470:	2100      	movs	r1, #0
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 fa4f 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 8001478:	4603      	mov	r3, r0
 800147a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 800147e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f876 	bl	8000574 <__aeabi_i2d>
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	4b35      	ldr	r3, [pc, #212]	@ (8001564 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800148e:	f7ff fa05 	bl	800089c <__aeabi_ddiv>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4614      	mov	r4, r2
 8001498:	461d      	mov	r5, r3
 800149a:	2101      	movs	r1, #1
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f000 fa3a 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 80014a2:	4603      	mov	r3, r0
 80014a4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80014a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f861 	bl	8000574 <__aeabi_i2d>
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001564 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80014b8:	f7ff f9f0 	bl	800089c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4614      	mov	r4, r2
 80014c2:	461d      	mov	r5, r3
 80014c4:	2102      	movs	r1, #2
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 fa25 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 80014cc:	4603      	mov	r3, r0
 80014ce:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80014d2:	e03f      	b.n	8001554 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 80014d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f84b 	bl	8000574 <__aeabi_i2d>
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80014e4:	f7ff f9da 	bl	800089c <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4614      	mov	r4, r2
 80014ee:	461d      	mov	r5, r3
 80014f0:	2100      	movs	r1, #0
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 fa0f 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 80014f8:	4603      	mov	r3, r0
 80014fa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80014fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f836 	bl	8000574 <__aeabi_i2d>
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 800150e:	f7ff f9c5 	bl	800089c <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4614      	mov	r4, r2
 8001518:	461d      	mov	r5, r3
 800151a:	2101      	movs	r1, #1
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 f9fa 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 8001522:	4603      	mov	r3, r0
 8001524:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 8001528:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f821 	bl	8000574 <__aeabi_i2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001538:	f7ff f9b0 	bl	800089c <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4614      	mov	r4, r2
 8001542:	461d      	mov	r5, r3
 8001544:	2102      	movs	r1, #2
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f9e5 	bl	8001916 <_ZN3imu6VectorILh3EEixEi>
 800154c:	4603      	mov	r3, r0
 800154e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001552:	bf00      	nop
  }

  return xyz;
 8001554:	bf00      	nop
}
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	bf00      	nop
 8001560:	40300000 	.word	0x40300000
 8001564:	408c2000 	.word	0x408c2000
 8001568:	40590000 	.word	0x40590000

0800156c <_ZN15Adafruit_BNO0557getQuatEv>:
/*!
    @brief  Gets a quaternion reading from the specified source
*/
/**************************************************************************/
imu::Quaternion Adafruit_BNO055::getQuat(void)
{
 800156c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001570:	ed2d 8b06 	vpush	{d8-d10}
 8001574:	b0a0      	sub	sp, #128	@ 0x80
 8001576:	af00      	add	r7, sp, #0
 8001578:	6278      	str	r0, [r7, #36]	@ 0x24
  uint8_t buffer[8];
  memset (buffer, 0, 8);
 800157a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800157e:	2208      	movs	r2, #8
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f00d fbc3 	bl	800ed0e <memset>

  int16_t x, y, z, w;
  x = y = z = w = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 800158e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001592:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 8001596:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800159a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 800159e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80015a2:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

  /* Read quat data (8 bytes) */
  readLen(BNO055_QUATERNION_DATA_W_LSB_ADDR, buffer, 8);
 80015a6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80015aa:	2308      	movs	r3, #8
 80015ac:	2120      	movs	r1, #32
 80015ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015b0:	f000 f95f 	bl	8001872 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  w = (((uint16_t)buffer[1]) << 8) | ((uint16_t)buffer[0]);
 80015b4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
  x = (((uint16_t)buffer[3]) << 8) | ((uint16_t)buffer[2]);
 80015c8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
 80015dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
 80015f0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

  /* Assign to Quaternion */
  /* See http://ae-bst.resource.bosch.com/media/products/dokumente/bno055/BST_BNO055_DS000_12~1.pdf
     3.6.5.5 Orientation (Quaternion)  */
  const double scale = (1.0 / (1<<14));
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	4b3f      	ldr	r3, [pc, #252]	@ (8001708 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 800160a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
 800160e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ffae 	bl	8000574 <__aeabi_i2d>
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4b3a      	ldr	r3, [pc, #232]	@ (8001708 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 800161e:	f7ff f813 	bl	8000648 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	ec43 2b18 	vmov	d8, r2, r3
 800162a:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ffa0 	bl	8000574 <__aeabi_i2d>
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	4b33      	ldr	r3, [pc, #204]	@ (8001708 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 800163a:	f7ff f805 	bl	8000648 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	ec43 2b19 	vmov	d9, r2, r3
 8001646:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff92 	bl	8000574 <__aeabi_i2d>
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b2c      	ldr	r3, [pc, #176]	@ (8001708 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 8001656:	f7fe fff7 	bl	8000648 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	ec43 2b1a 	vmov	d10, r2, r3
 8001662:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff84 	bl	8000574 <__aeabi_i2d>
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b25      	ldr	r3, [pc, #148]	@ (8001708 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 8001672:	f7fe ffe9 	bl	8000648 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	ec43 2b17 	vmov	d7, r2, r3
 800167e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001682:	eeb0 3a47 	vmov.f32	s6, s14
 8001686:	eef0 3a67 	vmov.f32	s7, s15
 800168a:	eeb0 2a4a 	vmov.f32	s4, s20
 800168e:	eef0 2a6a 	vmov.f32	s5, s21
 8001692:	eeb0 1a49 	vmov.f32	s2, s18
 8001696:	eef0 1a69 	vmov.f32	s3, s19
 800169a:	eeb0 0a48 	vmov.f32	s0, s16
 800169e:	eef0 0a68 	vmov.f32	s1, s17
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd02 	bl	80010ac <_ZN3imu10QuaternionC1Edddd>
  return quat;
 80016a8:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80016ac:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 80016b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016bc:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80016c0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80016c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80016c8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80016cc:	ec49 8b14 	vmov	d4, r8, r9
 80016d0:	ec45 4b15 	vmov	d5, r4, r5
 80016d4:	ec41 0b16 	vmov	d6, r0, r1
 80016d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80016dc:	eeb0 0a44 	vmov.f32	s0, s8
 80016e0:	eef0 0a64 	vmov.f32	s1, s9
 80016e4:	eeb0 1a45 	vmov.f32	s2, s10
 80016e8:	eef0 1a65 	vmov.f32	s3, s11
 80016ec:	eeb0 2a46 	vmov.f32	s4, s12
 80016f0:	eef0 2a66 	vmov.f32	s5, s13
 80016f4:	eeb0 3a47 	vmov.f32	s6, s14
 80016f8:	eef0 3a67 	vmov.f32	s7, s15
 80016fc:	3780      	adds	r7, #128	@ 0x80
 80016fe:	46bd      	mov	sp, r7
 8001700:	ecbd 8b06 	vpop	{d8-d10}
 8001704:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001708:	3f100000 	.word	0x3f100000

0800170c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8001716:	2228      	movs	r2, #40	@ 0x28
 8001718:	2100      	movs	r1, #0
 800171a:	6838      	ldr	r0, [r7, #0]
 800171c:	f00d faf7 	bl	800ed0e <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	220b      	movs	r2, #11
 8001724:	4911      	ldr	r1, [pc, #68]	@ (800176c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 8001726:	4618      	mov	r0, r3
 8001728:	f00d faf9 	bl	800ed1e <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2201      	movs	r2, #1
 8001736:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2203      	movs	r2, #3
 8001744:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2200      	movs	r2, #0
 800174a:	625a      	str	r2, [r3, #36]	@ 0x24
  sensor->max_value   = 0.0F;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001760:	621a      	str	r2, [r3, #32]
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	080122f8 	.word	0x080122f8
 8001770:	3c23d70a 	.word	0x3c23d70a

08001774 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 800177e:	2224      	movs	r2, #36	@ 0x24
 8001780:	2100      	movs	r1, #0
 8001782:	6838      	ldr	r0, [r7, #0]
 8001784:	f00d fac3 	bl	800ed0e <memset>

  event->version   = sizeof(sensors_event_t);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2224      	movs	r2, #36	@ 0x24
 800178c:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2203      	movs	r2, #3
 800179a:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 800179c:	f004 fb28 	bl	8005df0 <HAL_GetTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	221a      	movs	r2, #26
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fd45 	bl	8001240 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f879 	bl	80018b2 <_ZN3imu6VectorILh3EE1xEv>
 80017c0:	4603      	mov	r3, r0
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff fa35 	bl	8000c38 <__aeabi_d2f>
 80017ce:	4602      	mov	r2, r0
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 f875 	bl	80018c8 <_ZN3imu6VectorILh3EE1yEv>
 80017de:	4603      	mov	r3, r0
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff fa26 	bl	8000c38 <__aeabi_d2f>
 80017ec:	4602      	mov	r2, r0
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f872 	bl	80018e0 <_ZN3imu6VectorILh3EE1zEv>
 80017fc:	4603      	mov	r3, r0
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff fa17 	bl	8000c38 <__aeabi_d2f>
 800180a:	4602      	mov	r2, r0
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	61da      	str	r2, [r3, #28]

  return true;
 8001810:	2401      	movs	r4, #1
}
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f840 	bl	800189c <_ZN3imu6VectorILh3EED1Ev>
  return true;
 800181c:	4623      	mov	r3, r4
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	@ 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}

08001826 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
/*!
    @brief  Writes an 8 bit value over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	70fb      	strb	r3, [r7, #3]
 8001832:	4613      	mov	r3, r2
 8001834:	70bb      	strb	r3, [r7, #2]
  I2C_byte_transmit(reg, value);
 8001836:	78ba      	ldrb	r2, [r7, #2]
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fa31 	bl	8001ca4 <I2C_byte_transmit>
  /* ToDo: Check for error! */
  return true;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg )
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	70fb      	strb	r3, [r7, #3]
  byte value = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]
  
  value = I2C_byte_receive((uint8_t)reg);
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f9f6 	bl	8001c50 <I2C_byte_receive>
 8001864:	4603      	mov	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]

  return value;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	461a      	mov	r2, r3
 800187e:	460b      	mov	r3, r1
 8001880:	72fb      	strb	r3, [r7, #11]
 8001882:	4613      	mov	r3, r2
 8001884:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 8001886:	7aba      	ldrb	r2, [r7, #10]
 8001888:	7afb      	ldrb	r3, [r7, #11]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fa2b 	bl	8001ce8 <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
    {
    }
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3308      	adds	r3, #8
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3310      	adds	r3, #16
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2218      	movs	r2, #24
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f00d fa01 	bl	800ed0e <memset>
    }
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4413      	add	r3, r2
    }
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <_ZN15Adafruit_BNO055D1Ev+0x20>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fb85 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	08012d08 	.word	0x08012d08

08001958 <_ZN15Adafruit_BNO055D0Ev>:
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ffe7 	bl	8001934 <_ZN15Adafruit_BNO055D1Ev>
 8001966:	2110      	movs	r1, #16
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f00c f8fc 	bl	800db66 <_ZdlPvj>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_ZN3imu10QuaternionC1Ev>:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <_ZN3imu10QuaternionC1Ev+0x4c>)
 8001988:	e9c1 2300 	strd	r2, r3, [r1]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	3ff00000 	.word	0x3ff00000

080019c8 <_ZN3imu10Quaternion1wEv>:

    Quaternion(double w, Vector<3> vec):
        _w(w), _x(vec.x()), _y(vec.y()), _z(vec.z()) {}

    double& w()
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    {
        return _w;
 80019d0:	687b      	ldr	r3, [r7, #4]
    }
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_ZN3imu10Quaternion1xEv>:
    double& x()
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
    {
        return _x;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3308      	adds	r3, #8
    }
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_ZN3imu10Quaternion1yEv>:
    double& y()
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
    {
        return _y;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3310      	adds	r3, #16
    }
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_ZN3imu10Quaternion1zEv>:
    double& z()
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
    {
        return _z;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3318      	adds	r3, #24
    }
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <imu_get_quat>:

imu::Quaternion quat;
imu::Vector<3> vec;

void imu_get_quat(vec_4ax *vector)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if( BNO_conf == 1)
 8001a30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <imu_get_quat+0xbc>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d150      	bne.n	8001ada <imu_get_quat+0xb2>
  {
    quat = bno.getQuat();
 8001a38:	482b      	ldr	r0, [pc, #172]	@ (8001ae8 <imu_get_quat+0xc0>)
 8001a3a:	f7ff fd97 	bl	800156c <_ZN15Adafruit_BNO0557getQuatEv>
 8001a3e:	eeb0 4a40 	vmov.f32	s8, s0
 8001a42:	eef0 4a60 	vmov.f32	s9, s1
 8001a46:	eeb0 5a41 	vmov.f32	s10, s2
 8001a4a:	eef0 5a61 	vmov.f32	s11, s3
 8001a4e:	eeb0 6a42 	vmov.f32	s12, s4
 8001a52:	eef0 6a62 	vmov.f32	s13, s5
 8001a56:	eeb0 7a43 	vmov.f32	s14, s6
 8001a5a:	eef0 7a63 	vmov.f32	s15, s7
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <imu_get_quat+0xc4>)
 8001a60:	ed83 4b00 	vstr	d4, [r3]
 8001a64:	ed83 5b02 	vstr	d5, [r3, #8]
 8001a68:	ed83 6b04 	vstr	d6, [r3, #16]
 8001a6c:	ed83 7b06 	vstr	d7, [r3, #24]
    vector->x = quat.x();
 8001a70:	481e      	ldr	r0, [pc, #120]	@ (8001aec <imu_get_quat+0xc4>)
 8001a72:	f7ff ffb4 	bl	80019de <_ZN3imu10Quaternion1xEv>
 8001a76:	4603      	mov	r3, r0
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f8da 	bl	8000c38 <__aeabi_d2f>
 8001a84:	4602      	mov	r2, r0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	601a      	str	r2, [r3, #0]
    vector->y = quat.y();
 8001a8a:	4818      	ldr	r0, [pc, #96]	@ (8001aec <imu_get_quat+0xc4>)
 8001a8c:	f7ff ffb3 	bl	80019f6 <_ZN3imu10Quaternion1yEv>
 8001a90:	4603      	mov	r3, r0
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7ff f8cd 	bl	8000c38 <__aeabi_d2f>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	605a      	str	r2, [r3, #4]
    vector->z = quat.z();
 8001aa4:	4811      	ldr	r0, [pc, #68]	@ (8001aec <imu_get_quat+0xc4>)
 8001aa6:	f7ff ffb2 	bl	8001a0e <_ZN3imu10Quaternion1zEv>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff f8c0 	bl	8000c38 <__aeabi_d2f>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	609a      	str	r2, [r3, #8]
    vector->w = quat.w();
 8001abe:	480b      	ldr	r0, [pc, #44]	@ (8001aec <imu_get_quat+0xc4>)
 8001ac0:	f7ff ff82 	bl	80019c8 <_ZN3imu10Quaternion1wEv>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff f8b3 	bl	8000c38 <__aeabi_d2f>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	60da      	str	r2, [r3, #12]
  }
  return ;
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
}
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000204 	.word	0x20000204
 8001ae8:	200001f4 	.word	0x200001f4
 8001aec:	20000208 	.word	0x20000208

08001af0 <imu_get_linear>:

void imu_get_linear(vec_4ax *vector)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if( BNO_conf == 1)
 8001af8:	4b20      	ldr	r3, [pc, #128]	@ (8001b7c <imu_get_linear+0x8c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d139      	bne.n	8001b74 <imu_get_linear+0x84>
  {
    vec = bno.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	2228      	movs	r2, #40	@ 0x28
 8001b06:	491e      	ldr	r1, [pc, #120]	@ (8001b80 <imu_get_linear+0x90>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fb99 	bl	8001240 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	4619      	mov	r1, r3
 8001b14:	481b      	ldr	r0, [pc, #108]	@ (8001b84 <imu_get_linear+0x94>)
 8001b16:	f000 f913 	bl	8001d40 <_ZN3imu6VectorILh3EEaSERKS1_>
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff febc 	bl	800189c <_ZN3imu6VectorILh3EED1Ev>
    vector->x = vec.x();
 8001b24:	4817      	ldr	r0, [pc, #92]	@ (8001b84 <imu_get_linear+0x94>)
 8001b26:	f7ff fec4 	bl	80018b2 <_ZN3imu6VectorILh3EE1xEv>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7ff f880 	bl	8000c38 <__aeabi_d2f>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	601a      	str	r2, [r3, #0]
    vector->y = vec.y();
 8001b3e:	4811      	ldr	r0, [pc, #68]	@ (8001b84 <imu_get_linear+0x94>)
 8001b40:	f7ff fec2 	bl	80018c8 <_ZN3imu6VectorILh3EE1yEv>
 8001b44:	4603      	mov	r3, r0
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f7ff f873 	bl	8000c38 <__aeabi_d2f>
 8001b52:	4602      	mov	r2, r0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	605a      	str	r2, [r3, #4]
    vector->z = vec.z();
 8001b58:	480a      	ldr	r0, [pc, #40]	@ (8001b84 <imu_get_linear+0x94>)
 8001b5a:	f7ff fec1 	bl	80018e0 <_ZN3imu6VectorILh3EE1zEv>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7ff f866 	bl	8000c38 <__aeabi_d2f>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	609a      	str	r2, [r3, #8]
  }
  return ;
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
}
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000204 	.word	0x20000204
 8001b80:	200001f4 	.word	0x200001f4
 8001b84:	20000228 	.word	0x20000228

08001b88 <imu_get_gyro>:

void imu_get_gyro(vec_4ax *vector)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if( BNO_conf == 1)
 8001b90:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <imu_get_gyro+0x8c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d139      	bne.n	8001c0c <imu_get_gyro+0x84>
  {
    vec = bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
 8001b98:	f107 0308 	add.w	r3, r7, #8
 8001b9c:	2214      	movs	r2, #20
 8001b9e:	491e      	ldr	r1, [pc, #120]	@ (8001c18 <imu_get_gyro+0x90>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fb4d 	bl	8001240 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	4619      	mov	r1, r3
 8001bac:	481b      	ldr	r0, [pc, #108]	@ (8001c1c <imu_get_gyro+0x94>)
 8001bae:	f000 f8c7 	bl	8001d40 <_ZN3imu6VectorILh3EEaSERKS1_>
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fe70 	bl	800189c <_ZN3imu6VectorILh3EED1Ev>
    vector->x = vec.x();
 8001bbc:	4817      	ldr	r0, [pc, #92]	@ (8001c1c <imu_get_gyro+0x94>)
 8001bbe:	f7ff fe78 	bl	80018b2 <_ZN3imu6VectorILh3EE1xEv>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7ff f834 	bl	8000c38 <__aeabi_d2f>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
    vector->y = vec.y();
 8001bd6:	4811      	ldr	r0, [pc, #68]	@ (8001c1c <imu_get_gyro+0x94>)
 8001bd8:	f7ff fe76 	bl	80018c8 <_ZN3imu6VectorILh3EE1yEv>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7ff f827 	bl	8000c38 <__aeabi_d2f>
 8001bea:	4602      	mov	r2, r0
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	605a      	str	r2, [r3, #4]
    vector->z = vec.z();
 8001bf0:	480a      	ldr	r0, [pc, #40]	@ (8001c1c <imu_get_gyro+0x94>)
 8001bf2:	f7ff fe75 	bl	80018e0 <_ZN3imu6VectorILh3EE1zEv>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f7ff f81a 	bl	8000c38 <__aeabi_d2f>
 8001c04:	4602      	mov	r2, r0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	609a      	str	r2, [r3, #8]
  }
  return ;
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
}
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000204 	.word	0x20000204
 8001c18:	200001f4 	.word	0x200001f4
 8001c1c:	20000228 	.word	0x20000228

08001c20 <IMU_setup>:
  }
  return ;
}

void IMU_setup(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
//  HAL_Delay(5);
//  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_SET);
//  HAL_Delay(50);

  BNO_conf = 0;
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <IMU_setup+0x28>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
  if(bno.begin())
 8001c2a:	210c      	movs	r1, #12
 8001c2c:	4807      	ldr	r0, [pc, #28]	@ (8001c4c <IMU_setup+0x2c>)
 8001c2e:	f7ff fa81 	bl	8001134 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <IMU_setup+0x20>
  {
    BNO_conf = 1;
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <IMU_setup+0x28>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    IMU_setup();
  }
  return ;
 8001c3e:	e002      	b.n	8001c46 <IMU_setup+0x26>
    IMU_setup();
 8001c40:	f7ff ffee 	bl	8001c20 <IMU_setup>
  return ;
 8001c44:	bf00      	nop
}
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000204 	.word	0x20000204
 8001c4c:	200001f4 	.word	0x200001f4

08001c50 <I2C_byte_receive>:
}

extern I2C_HandleTypeDef hi2c4;

uint8_t I2C_byte_receive(uint8_t address)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  uint8_t value = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73bb      	strb	r3, [r7, #14]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, &value, 1, 100);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	2364      	movs	r3, #100	@ 0x64
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	2301      	movs	r3, #1
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	f107 030e 	add.w	r3, r7, #14
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2301      	movs	r3, #1
 8001c72:	2152      	movs	r1, #82	@ 0x52
 8001c74:	480a      	ldr	r0, [pc, #40]	@ (8001ca0 <I2C_byte_receive+0x50>)
 8001c76:	f005 fc6b 	bl	8007550 <HAL_I2C_Mem_Read>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 8001c7e:	bf00      	nop
 8001c80:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <I2C_byte_receive+0x50>)
 8001c82:	f005 fe34 	bl	80078ee <HAL_I2C_GetState>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f4      	bne.n	8001c80 <I2C_byte_receive+0x30>

  return value;
 8001c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200002a4 	.word	0x200002a4

08001ca4 <I2C_byte_transmit>:

uint8_t I2C_byte_transmit(uint8_t address, uint8_t byte)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af04      	add	r7, sp, #16
 8001caa:	4603      	mov	r3, r0
 8001cac:	460a      	mov	r2, r1
 8001cae:	71fb      	strb	r3, [r7, #7]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, BNO055<<1, address, 1, &byte, 1, 100);
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	2364      	movs	r3, #100	@ 0x64
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	1dbb      	adds	r3, r7, #6
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	2152      	movs	r1, #82	@ 0x52
 8001cc8:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <I2C_byte_transmit+0x40>)
 8001cca:	f005 fb2d 	bl	8007328 <HAL_I2C_Mem_Write>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(1);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f004 f898 	bl	8005e08 <HAL_Delay>

  return 0;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200002a4 	.word	0x200002a4

08001ce8 <I2C_n_byte_receive>:

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af04      	add	r7, sp, #16
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	79bb      	ldrb	r3, [r7, #6]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2164      	movs	r1, #100	@ 0x64
 8001d02:	9102      	str	r1, [sp, #8]
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	2152      	movs	r1, #82	@ 0x52
 8001d0e:	480b      	ldr	r0, [pc, #44]	@ (8001d3c <I2C_n_byte_receive+0x54>)
 8001d10:	f005 fc1e 	bl	8007550 <HAL_I2C_Mem_Read>
 8001d14:	4603      	mov	r3, r0
 8001d16:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 8001d18:	bf00      	nop
 8001d1a:	4808      	ldr	r0, [pc, #32]	@ (8001d3c <I2C_n_byte_receive+0x54>)
 8001d1c:	f005 fde7 	bl	80078ee <HAL_I2C_GetState>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	bf14      	ite	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	2300      	moveq	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f4      	bne.n	8001d1a <I2C_n_byte_receive+0x32>

  return 0;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200002a4 	.word	0x200002a4

08001d40 <_ZN3imu6VectorILh3EEaSERKS1_>:
    Vector& operator=(const Vector& v)
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
        for (int x = 0; x < N; x++ )
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	e00e      	b.n	8001d6e <_ZN3imu6VectorILh3EEaSERKS1_+0x2e>
            p_vec[x] = v.p_vec[x];
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	68f9      	ldr	r1, [r7, #12]
 8001d60:	00c9      	lsls	r1, r1, #3
 8001d62:	4401      	add	r1, r0
 8001d64:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < N; x++ )
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	dded      	ble.n	8001d50 <_ZN3imu6VectorILh3EEaSERKS1_+0x10>
        return *this;
 8001d74:	687b      	ldr	r3, [r7, #4]
    }
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d10f      	bne.n	8001db4 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10a      	bne.n	8001db4 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 8001d9e:	2229      	movs	r2, #41	@ 0x29
 8001da0:	2137      	movs	r1, #55	@ 0x37
 8001da2:	480d      	ldr	r0, [pc, #52]	@ (8001dd8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001da4:	f7ff f9aa 	bl	80010fc <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 8001da8:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001daa:	f7ff fde5 	bl	8001978 <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 8001dae:	480c      	ldr	r0, [pc, #48]	@ (8001de0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001db0:	f7ff fda2 	bl	80018f8 <_ZN3imu6VectorILh3EEC1Ev>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10a      	bne.n	8001dd0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d105      	bne.n	8001dd0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001dc4:	4806      	ldr	r0, [pc, #24]	@ (8001de0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001dc6:	f7ff fd69 	bl	800189c <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 8001dca:	4803      	ldr	r0, [pc, #12]	@ (8001dd8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001dcc:	f7ff fdb2 	bl	8001934 <_ZN15Adafruit_BNO055D1Ev>
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200001f4 	.word	0x200001f4
 8001ddc:	20000208 	.word	0x20000208
 8001de0:	20000228 	.word	0x20000228

08001de4 <_GLOBAL__sub_I_bno>:
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001dec:	2001      	movs	r0, #1
 8001dee:	f7ff ffc9 	bl	8001d84 <_Z41__static_initialization_and_destruction_0ii>
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_GLOBAL__sub_D_bno>:
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7ff ffc1 	bl	8001d84 <_Z41__static_initialization_and_destruction_0ii>
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e0a:	4b16      	ldr	r3, [pc, #88]	@ (8001e64 <MX_DMA_Init+0x60>)
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e0e:	4a15      	ldr	r2, [pc, #84]	@ (8001e64 <MX_DMA_Init+0x60>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e16:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <MX_DMA_Init+0x60>)
 8001e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e22:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <MX_DMA_Init+0x60>)
 8001e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e26:	4a0f      	ldr	r2, [pc, #60]	@ (8001e64 <MX_DMA_Init+0x60>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <MX_DMA_Init+0x60>)
 8001e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	200b      	movs	r0, #11
 8001e40:	f004 f8df 	bl	8006002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e44:	200b      	movs	r0, #11
 8001e46:	f004 f8f6 	bl	8006036 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	200c      	movs	r0, #12
 8001e50:	f004 f8d7 	bl	8006002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e54:	200c      	movs	r0, #12
 8001e56:	f004 f8ee 	bl	8006036 <HAL_NVIC_EnableIRQ>

}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000

08001e68 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001e6c:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e6e:	4a21      	ldr	r2, [pc, #132]	@ (8001ef4 <MX_FDCAN1_Init+0x8c>)
 8001e70:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001e72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e7a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001e7e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8001e8c:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001e92:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001e98:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001ea6:	221d      	movs	r2, #29
 8001ea8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001eac:	220a      	movs	r2, #10
 8001eae:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8001ece:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	@ (8001ef0 <MX_FDCAN1_Init+0x88>)
 8001edc:	f004 fb4e 	bl	800657c <HAL_FDCAN_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001ee6:	f000 fad3 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000240 	.word	0x20000240
 8001ef4:	40006400 	.word	0x40006400

08001ef8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b09e      	sub	sp, #120	@ 0x78
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	2254      	movs	r2, #84	@ 0x54
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f00c fef8 	bl	800ed0e <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a20      	ldr	r2, [pc, #128]	@ (8001fa4 <HAL_FDCAN_MspInit+0xac>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d138      	bne.n	8001f9a <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f32:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f007 fb45 	bl	80095c8 <HAL_RCCEx_PeriphCLKConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001f44:	f000 faa4 	bl	8002490 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f48:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <HAL_FDCAN_MspInit+0xb0>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4c:	4a16      	ldr	r2, [pc, #88]	@ (8001fa8 <HAL_FDCAN_MspInit+0xb0>)
 8001f4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f52:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f54:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <HAL_FDCAN_MspInit+0xb0>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f60:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <HAL_FDCAN_MspInit+0xb0>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f64:	4a10      	ldr	r2, [pc, #64]	@ (8001fa8 <HAL_FDCAN_MspInit+0xb0>)
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_FDCAN_MspInit+0xb0>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f7c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f8a:	2309      	movs	r3, #9
 8001f8c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	@ (8001fac <HAL_FDCAN_MspInit+0xb4>)
 8001f96:	f004 ff77 	bl	8006e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3778      	adds	r7, #120	@ 0x78
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40006400 	.word	0x40006400
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	48000400 	.word	0x48000400

08001fb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	@ 0x28
 8001fb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
 8001fc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc6:	4b34      	ldr	r3, [pc, #208]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	4a33      	ldr	r2, [pc, #204]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001fcc:	f043 0320 	orr.w	r3, r3, #32
 8001fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd2:	4b31      	ldr	r3, [pc, #196]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b2e      	ldr	r3, [pc, #184]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fea:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	4b28      	ldr	r3, [pc, #160]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	4a27      	ldr	r2, [pc, #156]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002002:	4b25      	ldr	r3, [pc, #148]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800200e:	4b22      	ldr	r3, [pc, #136]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	4a21      	ldr	r2, [pc, #132]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800201a:	4b1f      	ldr	r3, [pc, #124]	@ (8002098 <MX_GPIO_Init+0xe8>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b1c      	ldr	r3, [pc, #112]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <MX_GPIO_Init+0xe8>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <MX_GPIO_Init+0xe8>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	2120      	movs	r1, #32
 8002042:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002046:	f005 f8a1 	bl	800718c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	2104      	movs	r1, #4
 800204e:	4813      	ldr	r0, [pc, #76]	@ (800209c <MX_GPIO_Init+0xec>)
 8002050:	f005 f89c 	bl	800718c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8002054:	2320      	movs	r3, #32
 8002056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002058:	2301      	movs	r3, #1
 800205a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800206e:	f004 ff0b 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002072:	2304      	movs	r3, #4
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002076:	2301      	movs	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	4804      	ldr	r0, [pc, #16]	@ (800209c <MX_GPIO_Init+0xec>)
 800208a:	f004 fefd 	bl	8006e88 <HAL_GPIO_Init>

}
 800208e:	bf00      	nop
 8002090:	3728      	adds	r7, #40	@ 0x28
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	48000c00 	.word	0x48000c00

080020a0 <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <MX_I2C4_Init+0x78>)
 80020a8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <MX_I2C4_Init+0x7c>)
 80020ae:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80020b0:	4b18      	ldr	r3, [pc, #96]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b6:	4b17      	ldr	r3, [pc, #92]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020bc:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80020c2:	4b14      	ldr	r3, [pc, #80]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020c8:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ce:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80020da:	480e      	ldr	r0, [pc, #56]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020dc:	f005 f888 	bl	80071f0 <HAL_I2C_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80020e6:	f000 f9d3 	bl	8002490 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020ea:	2100      	movs	r1, #0
 80020ec:	4809      	ldr	r0, [pc, #36]	@ (8002114 <MX_I2C4_Init+0x74>)
 80020ee:	f006 fbf1 	bl	80088d4 <HAL_I2CEx_ConfigAnalogFilter>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80020f8:	f000 f9ca 	bl	8002490 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80020fc:	2100      	movs	r1, #0
 80020fe:	4805      	ldr	r0, [pc, #20]	@ (8002114 <MX_I2C4_Init+0x74>)
 8002100:	f006 fc33 	bl	800896a <HAL_I2CEx_ConfigDigitalFilter>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800210a:	f000 f9c1 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200002a4 	.word	0x200002a4
 8002118:	40008400 	.word	0x40008400
 800211c:	00702991 	.word	0x00702991

08002120 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b0a0      	sub	sp, #128	@ 0x80
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002138:	f107 0318 	add.w	r3, r7, #24
 800213c:	2254      	movs	r2, #84	@ 0x54
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f00c fde4 	bl	800ed0e <memset>
  if(i2cHandle->Instance==I2C4)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a5e      	ldr	r2, [pc, #376]	@ (80022c4 <HAL_I2C_MspInit+0x1a4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	f040 80b5 	bne.w	80022bc <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002152:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002156:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002158:	2300      	movs	r3, #0
 800215a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800215c:	f107 0318 	add.w	r3, r7, #24
 8002160:	4618      	mov	r0, r3
 8002162:	f007 fa31 	bl	80095c8 <HAL_RCCEx_PeriphCLKConfig>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800216c:	f000 f990 	bl	8002490 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002170:	4b55      	ldr	r3, [pc, #340]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 8002172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002174:	4a54      	ldr	r2, [pc, #336]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217c:	4b52      	ldr	r3, [pc, #328]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 800217e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002188:	4b4f      	ldr	r3, [pc, #316]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 800218a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218c:	4a4e      	ldr	r2, [pc, #312]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002194:	4b4c      	ldr	r3, [pc, #304]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021a0:	2340      	movs	r3, #64	@ 0x40
 80021a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a4:	2312      	movs	r3, #18
 80021a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 80021b0:	2308      	movs	r3, #8
 80021b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021b8:	4619      	mov	r1, r3
 80021ba:	4844      	ldr	r0, [pc, #272]	@ (80022cc <HAL_I2C_MspInit+0x1ac>)
 80021bc:	f004 fe64 	bl	8006e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021c0:	2380      	movs	r3, #128	@ 0x80
 80021c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c4:	2312      	movs	r3, #18
 80021c6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80021d0:	2303      	movs	r3, #3
 80021d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021d8:	4619      	mov	r1, r3
 80021da:	483d      	ldr	r0, [pc, #244]	@ (80022d0 <HAL_I2C_MspInit+0x1b0>)
 80021dc:	f004 fe54 	bl	8006e88 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80021e0:	4b39      	ldr	r3, [pc, #228]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 80021e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e4:	4a38      	ldr	r2, [pc, #224]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 80021e6:	f043 0302 	orr.w	r3, r3, #2
 80021ea:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80021ec:	4b36      	ldr	r3, [pc, #216]	@ (80022c8 <HAL_I2C_MspInit+0x1a8>)
 80021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 80021f8:	4b36      	ldr	r3, [pc, #216]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 80021fa:	4a37      	ldr	r2, [pc, #220]	@ (80022d8 <HAL_I2C_MspInit+0x1b8>)
 80021fc:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 80021fe:	4b35      	ldr	r3, [pc, #212]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002200:	2216      	movs	r2, #22
 8002202:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002204:	4b33      	ldr	r3, [pc, #204]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800220a:	4b32      	ldr	r3, [pc, #200]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 800220c:	2200      	movs	r2, #0
 800220e:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002210:	4b30      	ldr	r3, [pc, #192]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002212:	2280      	movs	r2, #128	@ 0x80
 8002214:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002216:	4b2f      	ldr	r3, [pc, #188]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002218:	2200      	movs	r2, #0
 800221a:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800221c:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8002222:	4b2c      	ldr	r3, [pc, #176]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002224:	2200      	movs	r2, #0
 8002226:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002228:	4b2a      	ldr	r3, [pc, #168]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 800222a:	2200      	movs	r2, #0
 800222c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 800222e:	4829      	ldr	r0, [pc, #164]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002230:	f003 ff1c 	bl	800606c <HAL_DMA_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 800223a:	f000 f929 	bl	8002490 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a24      	ldr	r2, [pc, #144]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002242:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002244:	4a23      	ldr	r2, [pc, #140]	@ (80022d4 <HAL_I2C_MspInit+0x1b4>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 800224a:	4b24      	ldr	r3, [pc, #144]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 800224c:	4a24      	ldr	r2, [pc, #144]	@ (80022e0 <HAL_I2C_MspInit+0x1c0>)
 800224e:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8002250:	4b22      	ldr	r3, [pc, #136]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002252:	2217      	movs	r2, #23
 8002254:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002256:	4b21      	ldr	r3, [pc, #132]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002258:	2210      	movs	r2, #16
 800225a:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800225c:	4b1f      	ldr	r3, [pc, #124]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002262:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002264:	2280      	movs	r2, #128	@ 0x80
 8002266:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002268:	4b1c      	ldr	r3, [pc, #112]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 800226a:	2200      	movs	r2, #0
 800226c:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800226e:	4b1b      	ldr	r3, [pc, #108]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8002274:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800227a:	4b18      	ldr	r3, [pc, #96]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8002280:	4816      	ldr	r0, [pc, #88]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002282:	f003 fef3 	bl	800606c <HAL_DMA_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 800228c:	f000 f900 	bl	8002490 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a12      	ldr	r2, [pc, #72]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002294:	639a      	str	r2, [r3, #56]	@ 0x38
 8002296:	4a11      	ldr	r2, [pc, #68]	@ (80022dc <HAL_I2C_MspInit+0x1bc>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	2052      	movs	r0, #82	@ 0x52
 80022a2:	f003 feae 	bl	8006002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80022a6:	2052      	movs	r0, #82	@ 0x52
 80022a8:	f003 fec5 	bl	8006036 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	2053      	movs	r0, #83	@ 0x53
 80022b2:	f003 fea6 	bl	8006002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80022b6:	2053      	movs	r0, #83	@ 0x53
 80022b8:	f003 febd 	bl	8006036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80022bc:	bf00      	nop
 80022be:	3780      	adds	r7, #128	@ 0x80
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40008400 	.word	0x40008400
 80022c8:	40021000 	.word	0x40021000
 80022cc:	48000800 	.word	0x48000800
 80022d0:	48000400 	.word	0x48000400
 80022d4:	200002f8 	.word	0x200002f8
 80022d8:	40020008 	.word	0x40020008
 80022dc:	20000358 	.word	0x20000358
 80022e0:	4002001c 	.word	0x4002001c

080022e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b099      	sub	sp, #100	@ 0x64
 80022e8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022ea:	f003 fd1c 	bl	8005d26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ee:	f000 f879 	bl	80023e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022f2:	f7ff fe5d 	bl	8001fb0 <MX_GPIO_Init>
  MX_DMA_Init();
 80022f6:	f7ff fd85 	bl	8001e04 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80022fa:	f7ff fdb5 	bl	8001e68 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 80022fe:	f7ff fecf 	bl	80020a0 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8002302:	f003 fc3b 	bl	8005b7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  cyphal_can_starter(&hfdcan1);
 8002306:	4835      	ldr	r0, [pc, #212]	@ (80023dc <main+0xf8>)
 8002308:	f001 fb9c 	bl	8003a44 <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 800230c:	4833      	ldr	r0, [pc, #204]	@ (80023dc <main+0xf8>)
 800230e:	f001 fb47 	bl	80039a0 <setup_cyphal>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t msg[10];
  int i = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	643b      	str	r3, [r7, #64]	@ 0x40
  //uint16_t addr9250=0xD0; //0x68<<1

  HAL_StatusTypeDef rv;


  uint32_t last_hbeat = HAL_GetTick();
 8002316:	f003 fd6b 	bl	8005df0 <HAL_GetTick>
 800231a:	6478      	str	r0, [r7, #68]	@ 0x44

  vec_4ax linear = {0};
 800231c:	f107 0320 	add.w	r3, r7, #32
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
  vec_4ax quat = {0};
 800232a:	f107 0310 	add.w	r3, r7, #16
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
  vec_4ax gyro = {0};
 8002338:	463b      	mov	r3, r7
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]

  //rv = HAL_I2C_IsDeviceReady(&hi2c4, 0x29, 1, 10);
  //rv = MPU6050_isReady(&hi2c4);
  IMU_setup();
 8002344:	f7ff fc6c 	bl	8001c20 <IMU_setup>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8002348:	2201      	movs	r2, #1
 800234a:	2104      	movs	r1, #4
 800234c:	4824      	ldr	r0, [pc, #144]	@ (80023e0 <main+0xfc>)
 800234e:	f004 ff1d 	bl	800718c <HAL_GPIO_WritePin>

  while (1)
  {

      uint32_t now = HAL_GetTick();
 8002352:	f003 fd4d 	bl	8005df0 <HAL_GetTick>
 8002356:	63f8      	str	r0, [r7, #60]	@ 0x3c
      if ( (now - last_hbeat) >= 50) {
 8002358:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800235a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b31      	cmp	r3, #49	@ 0x31
 8002360:	d938      	bls.n	80023d4 <main+0xf0>
      	  imu_get_quat(&quat);
 8002362:	f107 0310 	add.w	r3, r7, #16
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fb5e 	bl	8001a28 <imu_get_quat>
      	  imu_get_linear(&linear);
 800236c:	f107 0320 	add.w	r3, r7, #32
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fbbd 	bl	8001af0 <imu_get_linear>
      	  imu_get_gyro(&gyro);
 8002376:	463b      	mov	r3, r7
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fc05 	bl	8001b88 <imu_get_gyro>
          last_hbeat = now;
 800237e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002380:	647b      	str	r3, [r7, #68]	@ 0x44
          heartbeat();
 8002382:	f001 fae7 	bl	8003954 <heartbeat>
          //sprintf(msg,"%d\n\0", q[1]);
          //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
          send_IMU(&quat.w, &quat.x, &quat.y, &quat.z, &linear.x, &linear.y, &linear.z, &gyro.x, &gyro.y, &gyro.z);
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	f103 0408 	add.w	r4, r3, #8
 800238e:	f107 0310 	add.w	r3, r7, #16
 8002392:	1d1a      	adds	r2, r3, #4
 8002394:	f107 0110 	add.w	r1, r7, #16
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	f103 000c 	add.w	r0, r3, #12
 80023a0:	463b      	mov	r3, r7
 80023a2:	3308      	adds	r3, #8
 80023a4:	9305      	str	r3, [sp, #20]
 80023a6:	463b      	mov	r3, r7
 80023a8:	3304      	adds	r3, #4
 80023aa:	9304      	str	r3, [sp, #16]
 80023ac:	463b      	mov	r3, r7
 80023ae:	9303      	str	r3, [sp, #12]
 80023b0:	f107 0320 	add.w	r3, r7, #32
 80023b4:	3308      	adds	r3, #8
 80023b6:	9302      	str	r3, [sp, #8]
 80023b8:	f107 0320 	add.w	r3, r7, #32
 80023bc:	3304      	adds	r3, #4
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	f107 0320 	add.w	r3, r7, #32
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	4623      	mov	r3, r4
 80023c8:	f001 fa68 	bl	800389c <send_IMU>
          HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80023cc:	2104      	movs	r1, #4
 80023ce:	4804      	ldr	r0, [pc, #16]	@ (80023e0 <main+0xfc>)
 80023d0:	f004 fef4 	bl	80071bc <HAL_GPIO_TogglePin>
      }
      cyphal_loop();
 80023d4:	f001 fb28 	bl	8003a28 <cyphal_loop>
  {
 80023d8:	e7bb      	b.n	8002352 <main+0x6e>
 80023da:	bf00      	nop
 80023dc:	20000240 	.word	0x20000240
 80023e0:	48000c00 	.word	0x48000c00

080023e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b094      	sub	sp, #80	@ 0x50
 80023e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ea:	f107 0318 	add.w	r3, r7, #24
 80023ee:	2238      	movs	r2, #56	@ 0x38
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f00c fc8b 	bl	800ed0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002406:	2000      	movs	r0, #0
 8002408:	f006 fafc 	bl	8008a04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800240c:	2301      	movs	r3, #1
 800240e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002410:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002414:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002416:	2302      	movs	r3, #2
 8002418:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800241a:	2303      	movs	r3, #3
 800241c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800241e:	2301      	movs	r3, #1
 8002420:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002422:	2328      	movs	r3, #40	@ 0x28
 8002424:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002426:	2302      	movs	r3, #2
 8002428:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800242a:	2302      	movs	r3, #2
 800242c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800242e:	2302      	movs	r3, #2
 8002430:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002432:	f107 0318 	add.w	r3, r7, #24
 8002436:	4618      	mov	r0, r3
 8002438:	f006 fb98 	bl	8008b6c <HAL_RCC_OscConfig>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002442:	f000 f825 	bl	8002490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002446:	230f      	movs	r3, #15
 8002448:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800244a:	2303      	movs	r3, #3
 800244c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002458:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800245c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	2104      	movs	r1, #4
 8002462:	4618      	mov	r0, r3
 8002464:	f006 fe94 	bl	8009190 <HAL_RCC_ClockConfig>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800246e:	f000 f80f 	bl	8002490 <Error_Handler>
  }
}
 8002472:	bf00      	nop
 8002474:	3750      	adds	r7, #80	@ 0x50
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <delay>:

/* USER CODE BEGIN 4 */
void delay(uint32_t delay)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f003 fcc0 	bl	8005e08 <HAL_Delay>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002494:	b672      	cpsid	i
}
 8002496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <Error_Handler+0x8>

0800249c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	1e5a      	subs	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d019      	beq.n	800252a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3308      	adds	r3, #8
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	1e5a      	subs	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	330c      	adds	r3, #12
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
        }
    }
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	2203      	movs	r2, #3
 8002578:	4798      	blx	r3
    }
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ffd4 	bl	800255e <_ZNSt14_Function_baseD1Ev>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_ZNSt8functionIFvvEED1Ev>:
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ffc7 	bl	800255e <_ZNSt14_Function_baseD1Ev>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f001 fb00 	bl	8003bf0 <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3310      	adds	r3, #16
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f001 fb25 	bl	8003c46 <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	4a06      	ldr	r2, [pc, #24]	@ (8002630 <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	08012da8 	.word	0x08012da8

08002634 <_Z7alloc_fP14CanardInstancej>:
#include "cyphal/definitions.h"
#include "libcanard/canard.h"

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 800263e:	480d      	ldr	r0, [pc, #52]	@ (8002674 <_Z7alloc_fP14CanardInstancej+0x40>)
 8002640:	f001 fb2c 	bl	8003c9c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8002644:	4603      	mov	r3, r0
 8002646:	f083 0301 	eor.w	r3, r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8002650:	2001      	movs	r0, #1
 8002652:	f00b facf 	bl	800dbf4 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 8002656:	4807      	ldr	r0, [pc, #28]	@ (8002674 <_Z7alloc_fP14CanardInstancej+0x40>)
 8002658:	f001 fb31 	bl	8003cbe <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 800265c:	4603      	mov	r3, r0
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	6814      	ldr	r4, [r2, #0]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4618      	mov	r0, r3
 8002668:	47a0      	blx	r4
 800266a:	4603      	mov	r3, r0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bd90      	pop	{r4, r7, pc}
 8002674:	200005b0 	.word	0x200005b0

08002678 <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8002682:	480d      	ldr	r0, [pc, #52]	@ (80026b8 <_Z6free_fP14CanardInstancePv+0x40>)
 8002684:	f001 fb0a 	bl	8003c9c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8002688:	4603      	mov	r3, r0
 800268a:	f083 0301 	eor.w	r3, r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8002694:	2001      	movs	r0, #1
 8002696:	f00b faad 	bl	800dbf4 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 800269a:	4807      	ldr	r0, [pc, #28]	@ (80026b8 <_Z6free_fP14CanardInstancePv+0x40>)
 800269c:	f001 fb0f 	bl	8003cbe <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 80026a0:	4603      	mov	r3, r0
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	3204      	adds	r2, #4
 80026a6:	6814      	ldr	r4, [r2, #0]
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4618      	mov	r0, r3
 80026ae:	47a0      	blx	r4
 80026b0:	bf00      	nop
}
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd90      	pop	{r4, r7, pc}
 80026b8:	200005b0 	.word	0x200005b0

080026bc <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;

    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
        WIRE_MTU(wire_mtu),
        CANARD_MTU(canard_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 80026ca:	4a0c      	ldr	r2, [pc, #48]	@ (80026fc <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	330c      	adds	r3, #12
 80026e4:	6839      	ldr	r1, [r7, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f00a ff78 	bl	800d5dc <canardTxInit>
        utilities(utilities)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    {};
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	08012d8c 	.word	0x08012d8c

08002700 <_ZN15CyphalInterfaceC1EhR13UtilityConfig>:

class CyphalInterface {
private:
    const CanardNodeID node_id;
    std::unique_ptr<AbstractCANProvider> provider;
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config) : node_id(node_id), utilities(config) {};
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	460b      	mov	r3, r1
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	72fb      	strb	r3, [r7, #11]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	7afa      	ldrb	r2, [r7, #11]
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3304      	adds	r3, #4
 8002718:	4618      	mov	r0, r3
 800271a:	f001 faf6 	bl	8003d0a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEv>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2248      	movs	r2, #72	@ 0x48
 8002748:	2140      	movs	r1, #64	@ 0x40
 800274a:	f7ff ffb7 	bl	80026bc <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 800274e:	4a05      	ldr	r2, [pc, #20]	@ (8002764 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	641a      	str	r2, [r3, #64]	@ 0x40
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	08012f48 	.word	0x08012f48

08002768 <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include "../allocator.h"

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff44 	bl	8002608 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 8002780:	4a03      	ldr	r2, [pc, #12]	@ (8002790 <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	08012e2c 	.word	0x08012e2c

08002794 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d201      	bcs.n	80027aa <nunavutChooseMin+0x16>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	e000      	b.n	80027ac <nunavutChooseMin+0x18>
 80027aa:	683b      	ldr	r3, [r7, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	6978      	ldr	r0, [r7, #20]
 80027ce:	f7ff ffe1 	bl	8002794 <nunavutChooseMin>
 80027d2:	4602      	mov	r2, r0
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 80027da:	6939      	ldr	r1, [r7, #16]
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ffd9 	bl	8002794 <nunavutChooseMin>
 80027e2:	4603      	mov	r3, r0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b092      	sub	sp, #72	@ 0x48
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 80027fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	2b00      	cmp	r3, #0
 8002802:	d145      	bne.n	8002890 <nunavutCopyBits+0xa4>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	2b00      	cmp	r3, #0
 800280c:	d140      	bne.n	8002890 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	08db      	lsrs	r3, r3, #3
 8002812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8002814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002816:	08db      	lsrs	r3, r3, #3
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	4413      	add	r3, r2
 800281c:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	08db      	lsrs	r3, r3, #3
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4413      	add	r3, r2
 8002826:	637b      	str	r3, [r7, #52]	@ 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8002828:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800282a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800282c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800282e:	f00c fa54 	bl	800ecda <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 800283e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 808a 	beq.w	800295c <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8002848:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800284a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800284c:	4413      	add	r3, r2
 800284e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8002850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002854:	4413      	add	r3, r2
 8002856:	62bb      	str	r3, [r7, #40]	@ 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8002858:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800285c:	2201      	movs	r2, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 800286a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002872:	43db      	mvns	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	4013      	ands	r3, r2
 8002878:	b2da      	uxtb	r2, r3
 800287a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800287c:	7819      	ldrb	r1, [r3, #0]
 800287e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002882:	400b      	ands	r3, r1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4313      	orrs	r3, r2
 8002888:	b2da      	uxtb	r2, r3
 800288a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288c:	701a      	strb	r2, [r3, #0]
        }
    }
 800288e:	e065      	b.n	800295c <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8002898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800289a:	647b      	str	r3, [r7, #68]	@ 0x44
        size_t       dst_off  = dst_offset_bits;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	643b      	str	r3, [r7, #64]	@ 0x40
        const size_t last_bit = src_off + length_bits;
 80028a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 80028a8:	e053      	b.n	8002952 <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 80028aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 80028b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 80028be:	7dfa      	ldrb	r2, [r7, #23]
 80028c0:	7dbb      	ldrb	r3, [r7, #22]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d901      	bls.n	80028ca <nunavutCopyBits+0xde>
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
 80028c8:	e000      	b.n	80028cc <nunavutCopyBits+0xe0>
 80028ca:	7dbb      	ldrb	r3, [r7, #22]
 80028cc:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 80028ce:	7d7b      	ldrb	r3, [r7, #21]
 80028d0:	f1c3 0008 	rsb	r0, r3, #8
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	4619      	mov	r1, r3
 80028dc:	f7ff ff5a 	bl	8002794 <nunavutChooseMin>
 80028e0:	4603      	mov	r3, r0
 80028e2:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 80028e4:	7d3b      	ldrb	r3, [r7, #20]
 80028e6:	2201      	movs	r2, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	1e5a      	subs	r2, r3, #1
 80028ee:	7dbb      	ldrb	r3, [r7, #22]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 80028f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028f8:	08db      	lsrs	r3, r3, #3
 80028fa:	6a3a      	ldr	r2, [r7, #32]
 80028fc:	4413      	add	r3, r2
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	7dfb      	ldrb	r3, [r7, #23]
 8002904:	fa42 f303 	asr.w	r3, r2, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	7dbb      	ldrb	r3, [r7, #22]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8002914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002916:	08db      	lsrs	r3, r3, #3
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	4413      	add	r3, r2
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	43db      	mvns	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	4013      	ands	r3, r2
 8002926:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8002928:	7cba      	ldrb	r2, [r7, #18]
 800292a:	7cfb      	ldrb	r3, [r7, #19]
 800292c:	4013      	ands	r3, r2
 800292e:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8002930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002932:	08db      	lsrs	r3, r3, #3
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	4413      	add	r3, r2
 8002938:	7c79      	ldrb	r1, [r7, #17]
 800293a:	7c3a      	ldrb	r2, [r7, #16]
 800293c:	430a      	orrs	r2, r1
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]
            src_off += size;
 8002942:	7d3b      	ldrb	r3, [r7, #20]
 8002944:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002946:	4413      	add	r3, r2
 8002948:	647b      	str	r3, [r7, #68]	@ 0x44
            dst_off += size;
 800294a:	7d3b      	ldrb	r3, [r7, #20]
 800294c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800294e:	4413      	add	r3, r2
 8002950:	643b      	str	r3, [r7, #64]	@ 0x40
        while (last_bit > src_off)
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002956:	429a      	cmp	r2, r3
 8002958:	d8a7      	bhi.n	80028aa <nunavutCopyBits+0xbe>
        }

    }
}
 800295a:	e000      	b.n	800295e <nunavutCopyBits+0x172>
    }
 800295c:	bf00      	nop
}
 800295e:	bf00      	nop
 8002960:	3748      	adds	r7, #72	@ 0x48
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b088      	sub	sp, #32
 800296a:	af02      	add	r7, sp, #8
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	00da      	lsls	r2, r3, #3
 8002976:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	440b      	add	r3, r1
 800297e:	429a      	cmp	r2, r3
 8002980:	d202      	bcs.n	8002988 <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002982:	f06f 0302 	mvn.w	r3, #2
 8002986:	e010      	b.n	80029aa <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8002988:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800298c:	2140      	movs	r1, #64	@ 0x40
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ff00 	bl	8002794 <nunavutChooseMin>
 8002994:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 8002996:	2300      	movs	r3, #0
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	f107 0320 	add.w	r3, r7, #32
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f7ff ff22 	bl	80027ec <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b088      	sub	sp, #32
 80029b6:	af02      	add	r7, sp, #8
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	2120      	movs	r1, #32
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fee5 	bl	8002794 <nunavutChooseMin>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	68b8      	ldr	r0, [r7, #8]
 80029d2:	f7ff fef1 	bl	80027b8 <nunavutSaturateBufferFragmentBitLength>
 80029d6:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 80029dc:	f107 0010 	add.w	r0, r7, #16
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	2100      	movs	r1, #0
 80029ea:	f7ff feff 	bl	80027ec <nunavutCopyBits>
    return val;
 80029ee:	693b      	ldr	r3, [r7, #16]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08c      	sub	sp, #48	@ 0x30
 80029fc:	af04      	add	r7, sp, #16
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <uavcan_node_Health_1_0_serialize_+0x1e>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <uavcan_node_Health_1_0_serialize_+0x1e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002a16:	f06f 0301 	mvn.w	r3, #1
 8002a1a:	e048      	b.n	8002aae <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	2b07      	cmp	r3, #7
 8002a28:	d802      	bhi.n	8002a30 <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002a2a:	f06f 0302 	mvn.w	r3, #2
 8002a2e:	e03e      	b.n	8002aae <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8002a3a:	7efb      	ldrb	r3, [r7, #27]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d901      	bls.n	8002a44 <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 8002a40:	2303      	movs	r3, #3
 8002a42:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	08db      	lsrs	r3, r3, #3
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	7efa      	ldrb	r2, [r7, #27]
 8002a4e:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	3302      	adds	r3, #2
 8002a54:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d021      	beq.n	8002aa4 <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f1c3 0308 	rsb	r3, r3, #8
 8002a6e:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	9302      	str	r3, [sp, #8]
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	e9cd 2300 	strd	r2, r3, [sp]
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	6979      	ldr	r1, [r7, #20]
 8002a84:	68b8      	ldr	r0, [r7, #8]
 8002a86:	f7ff ff6e 	bl	8002966 <nunavutSetUxx>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002a8e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	da02      	bge.n	8002a9c <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002a96:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002a9a:	e008      	b.n	8002aae <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	08da      	lsrs	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <uavcan_node_Health_1_0_deserialize_+0x26>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d006      	beq.n	8002ade <uavcan_node_Health_1_0_deserialize_+0x26>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <uavcan_node_Health_1_0_deserialize_+0x2c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ade:	f06f 0301 	mvn.w	r3, #1
 8002ae2:	e030      	b.n	8002b46 <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002aea:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <uavcan_node_Health_1_0_deserialize_+0x98>)
 8002aec:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	3302      	adds	r3, #2
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d30a      	bcc.n	8002b1e <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	08db      	lsrs	r3, r3, #3
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	4413      	add	r3, r2
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e002      	b.n	8002b24 <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3302      	adds	r3, #2
 8002b28:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3307      	adds	r3, #7
 8002b2e:	f023 0307 	bic.w	r3, r3, #7
 8002b32:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002b34:	69b9      	ldr	r1, [r7, #24]
 8002b36:	6978      	ldr	r0, [r7, #20]
 8002b38:	f7ff fe2c 	bl	8002794 <nunavutChooseMin>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	08da      	lsrs	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	08012d38 	.word	0x08012d38

08002b54 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	@ 0x30
 8002b58:	af04      	add	r7, sp, #16
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d102      	bne.n	8002b78 <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002b72:	f06f 0301 	mvn.w	r3, #1
 8002b76:	e048      	b.n	8002c0a <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	2b07      	cmp	r3, #7
 8002b84:	d802      	bhi.n	8002b8c <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002b86:	f06f 0302 	mvn.w	r3, #2
 8002b8a:	e03e      	b.n	8002c0a <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8002b96:	7efb      	ldrb	r3, [r7, #27]
 8002b98:	2b07      	cmp	r3, #7
 8002b9a:	d901      	bls.n	8002ba0 <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 8002b9c:	2307      	movs	r3, #7
 8002b9e:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	08db      	lsrs	r3, r3, #3
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	7efa      	ldrb	r2, [r7, #27]
 8002baa:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	3303      	adds	r3, #3
 8002bb0:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d021      	beq.n	8002c00 <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f1c3 0308 	rsb	r3, r3, #8
 8002bca:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	9302      	str	r3, [sp, #8]
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9cd 2300 	strd	r2, r3, [sp]
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	6979      	ldr	r1, [r7, #20]
 8002be0:	68b8      	ldr	r0, [r7, #8]
 8002be2:	f7ff fec0 	bl	8002966 <nunavutSetUxx>
 8002be6:	4603      	mov	r3, r0
 8002be8:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002bea:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	da02      	bge.n	8002bf8 <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002bf2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002bf6:	e008      	b.n	8002c0a <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	08da      	lsrs	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d006      	beq.n	8002c3a <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <uavcan_node_Mode_1_0_deserialize_+0x2c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002c3a:	f06f 0301 	mvn.w	r3, #1
 8002c3e:	e030      	b.n	8002ca2 <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002c46:	4b19      	ldr	r3, [pc, #100]	@ (8002cac <uavcan_node_Mode_1_0_deserialize_+0x98>)
 8002c48:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3303      	adds	r3, #3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d30a      	bcc.n	8002c7a <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	08db      	lsrs	r3, r3, #3
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	e002      	b.n	8002c80 <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3303      	adds	r3, #3
 8002c84:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	3307      	adds	r3, #7
 8002c8a:	f023 0307 	bic.w	r3, r3, #7
 8002c8e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002c90:	69b9      	ldr	r1, [r7, #24]
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f7ff fd7e 	bl	8002794 <nunavutChooseMin>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	08da      	lsrs	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3720      	adds	r7, #32
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	08012d38 	.word	0x08012d38

08002cb0 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08e      	sub	sp, #56	@ 0x38
 8002cb4:	af04      	add	r7, sp, #16
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002cce:	f06f 0301 	mvn.w	r3, #1
 8002cd2:	e0cf      	b.n	8002e74 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	2b37      	cmp	r3, #55	@ 0x37
 8002ce0:	d802      	bhi.n	8002ce8 <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002ce2:	f06f 0302 	mvn.w	r3, #2
 8002ce6:	e0c5      	b.n	8002e74 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	08db      	lsrs	r3, r3, #3
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	3320      	adds	r3, #32
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d021      	beq.n	8002d4e <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f1c3 0308 	rsb	r3, r3, #8
 8002d18:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002d1a:	7ffb      	ldrb	r3, [r7, #31]
 8002d1c:	9302      	str	r3, [sp, #8]
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	e9cd 2300 	strd	r2, r3, [sp]
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2c:	6a39      	ldr	r1, [r7, #32]
 8002d2e:	68b8      	ldr	r0, [r7, #8]
 8002d30:	f7ff fe19 	bl	8002966 <nunavutSetUxx>
 8002d34:	4603      	mov	r3, r0
 8002d36:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 8002d38:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	da02      	bge.n	8002d46 <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 8002d40:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002d44:	e096      	b.n	8002e74 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 8002d46:	7ffb      	ldrb	r3, [r7, #31]
 8002d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d4a:	4413      	add	r3, r2
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8002d4e:	2301      	movs	r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f107 0214 	add.w	r2, r7, #20
 8002d62:	4619      	mov	r1, r3
 8002d64:	f7ff fe48 	bl	80029f8 <uavcan_node_Health_1_0_serialize_>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8002d6c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	da02      	bge.n	8002d7a <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 8002d74:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d78:	e07c      	b.n	8002e74 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d80:	4413      	add	r3, r2
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d021      	beq.n	8002dd2 <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f1c3 0308 	rsb	r3, r3, #8
 8002d9c:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002d9e:	7f3b      	ldrb	r3, [r7, #28]
 8002da0:	9302      	str	r3, [sp, #8]
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9cd 2300 	strd	r2, r3, [sp]
 8002dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db0:	6a39      	ldr	r1, [r7, #32]
 8002db2:	68b8      	ldr	r0, [r7, #8]
 8002db4:	f7ff fdd7 	bl	8002966 <nunavutSetUxx>
 8002db8:	4603      	mov	r3, r0
 8002dba:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 8002dbc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	da02      	bge.n	8002dca <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 8002dc4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002dc8:	e054      	b.n	8002e74 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 8002dca:	7f3b      	ldrb	r3, [r7, #28]
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dce:	4413      	add	r3, r2
 8002dd0:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	4413      	add	r3, r2
 8002de2:	f107 0210 	add.w	r2, r7, #16
 8002de6:	4619      	mov	r1, r3
 8002de8:	f7ff feb4 	bl	8002b54 <uavcan_node_Mode_1_0_serialize_>
 8002dec:	4603      	mov	r3, r0
 8002dee:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8002df0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	da02      	bge.n	8002dfe <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 8002df8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002dfc:	e03a      	b.n	8002e74 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e04:	4413      	add	r3, r2
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	08db      	lsrs	r3, r3, #3
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	4413      	add	r3, r2
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	7992      	ldrb	r2, [r2, #6]
 8002e14:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	3308      	adds	r3, #8
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d021      	beq.n	8002e6a <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	f1c3 0308 	rsb	r3, r3, #8
 8002e34:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8002e36:	7e7b      	ldrb	r3, [r7, #25]
 8002e38:	9302      	str	r3, [sp, #8]
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	e9cd 2300 	strd	r2, r3, [sp]
 8002e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e48:	6a39      	ldr	r1, [r7, #32]
 8002e4a:	68b8      	ldr	r0, [r7, #8]
 8002e4c:	f7ff fd8b 	bl	8002966 <nunavutSetUxx>
 8002e50:	4603      	mov	r3, r0
 8002e52:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 8002e54:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	da02      	bge.n	8002e62 <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 8002e5c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002e60:	e008      	b.n	8002e74 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 8002e62:	7e7b      	ldrb	r3, [r7, #25]
 8002e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e66:	4413      	add	r3, r2
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	08da      	lsrs	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3728      	adds	r7, #40	@ 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	@ 0x28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ea2:	f06f 0301 	mvn.w	r3, #1
 8002ea6:	e089      	b.n	8002fbc <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002eae:	4b45      	ldr	r3, [pc, #276]	@ (8002fc4 <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 8002eb0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ec8:	68b8      	ldr	r0, [r7, #8]
 8002eca:	f7ff fd72 	bl	80029b2 <nunavutGetU32>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	3320      	adds	r3, #32
 8002ed8:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3307      	adds	r3, #7
 8002ede:	f023 0307 	bic.w	r3, r3, #7
 8002ee2:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	08db      	lsrs	r3, r3, #3
 8002ee8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fc52 	bl	8002794 <nunavutChooseMin>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	4413      	add	r3, r2
 8002f04:	f107 0214 	add.w	r2, r7, #20
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f7ff fdd5 	bl	8002ab8 <uavcan_node_Health_1_0_deserialize_>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 8002f12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da02      	bge.n	8002f20 <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 8002f1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002f1e:	e04d      	b.n	8002fbc <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	4413      	add	r3, r2
 8002f28:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3307      	adds	r3, #7
 8002f2e:	f023 0307 	bic.w	r3, r3, #7
 8002f32:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	08db      	lsrs	r3, r3, #3
 8002f38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fc2a 	bl	8002794 <nunavutChooseMin>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	4413      	add	r3, r2
 8002f54:	f107 0210 	add.w	r2, r7, #16
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f7ff fe5b 	bl	8002c14 <uavcan_node_Mode_1_0_deserialize_>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 8002f62:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	da02      	bge.n	8002f70 <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8002f6a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002f6e:	e025      	b.n	8002fbc <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	4413      	add	r3, r2
 8002f78:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3308      	adds	r3, #8
 8002f7e:	6a3a      	ldr	r2, [r7, #32]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d307      	bcc.n	8002f94 <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	08db      	lsrs	r3, r3, #3
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	781a      	ldrb	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	719a      	strb	r2, [r3, #6]
 8002f92:	e002      	b.n	8002f9a <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	3307      	adds	r3, #7
 8002fa4:	f023 0307 	bic.w	r3, r3, #7
 8002fa8:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002faa:	6a39      	ldr	r1, [r7, #32]
 8002fac:	69f8      	ldr	r0, [r7, #28]
 8002fae:	f7ff fbf1 	bl	8002794 <nunavutChooseMin>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	08da      	lsrs	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3728      	adds	r7, #40	@ 0x28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	08012d38 	.word	0x08012d38

08002fc8 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_(
    const uavcan_si_unit_angular_velocity_Vector3_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08c      	sub	sp, #48	@ 0x30
 8002fcc:	af04      	add	r7, sp, #16
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x1e>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x1e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002fe6:	f06f 0301 	mvn.w	r3, #1
 8002fea:	e042      	b.n	8003072 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 96UL)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	2b5f      	cmp	r3, #95	@ 0x5f
 8002ff8:	d802      	bhi.n	8003000 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002ffa:	f06f 0302 	mvn.w	r3, #2
 8002ffe:	e038      	b.n	8003072 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 3UL * 32UL, &obj->radian_per_second[0], 0U);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	9200      	str	r2, [sp, #0]
 800300a:	2260      	movs	r2, #96	@ 0x60
 800300c:	69f9      	ldr	r1, [r7, #28]
 800300e:	68b8      	ldr	r0, [r7, #8]
 8003010:	f7ff fbec 	bl	80027ec <nunavutCopyBits>
        offset_bits += 3UL * 32UL;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	3360      	adds	r3, #96	@ 0x60
 8003018:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	2b00      	cmp	r3, #0
 8003022:	d021      	beq.n	8003068 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f1c3 0308 	rsb	r3, r3, #8
 8003032:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003034:	7dfb      	ldrb	r3, [r7, #23]
 8003036:	9302      	str	r3, [sp, #8]
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9cd 2300 	strd	r2, r3, [sp]
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	69b9      	ldr	r1, [r7, #24]
 8003048:	68b8      	ldr	r0, [r7, #8]
 800304a:	f7ff fc8c 	bl	8002966 <nunavutSetUxx>
 800304e:	4603      	mov	r3, r0
 8003050:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003052:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003056:	2b00      	cmp	r3, #0
 8003058:	da02      	bge.n	8003060 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x98>
        {
            return _err0_;
 800305a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800305e:	e008      	b.n	8003072 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	4413      	add	r3, r2
 8003066:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	08da      	lsrs	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <uavcan_si_unit_velocity_Vector3_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_velocity_Vector3_1_0_serialize_(
    const uavcan_si_unit_velocity_Vector3_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b08c      	sub	sp, #48	@ 0x30
 800307e:	af04      	add	r7, sp, #16
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x1e>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x1e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d102      	bne.n	800309e <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003098:	f06f 0301 	mvn.w	r3, #1
 800309c:	e042      	b.n	8003124 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 96UL)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	2b5f      	cmp	r3, #95	@ 0x5f
 80030aa:	d802      	bhi.n	80030b2 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80030ac:	f06f 0302 	mvn.w	r3, #2
 80030b0:	e038      	b.n	8003124 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 3UL * 32UL, &obj->meter_per_second[0], 0U);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	9200      	str	r2, [sp, #0]
 80030bc:	2260      	movs	r2, #96	@ 0x60
 80030be:	69f9      	ldr	r1, [r7, #28]
 80030c0:	68b8      	ldr	r0, [r7, #8]
 80030c2:	f7ff fb93 	bl	80027ec <nunavutCopyBits>
        offset_bits += 3UL * 32UL;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3360      	adds	r3, #96	@ 0x60
 80030ca:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d021      	beq.n	800311a <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f1c3 0308 	rsb	r3, r3, #8
 80030e4:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	9302      	str	r3, [sp, #8]
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	e9cd 2300 	strd	r2, r3, [sp]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	69b9      	ldr	r1, [r7, #24]
 80030fa:	68b8      	ldr	r0, [r7, #8]
 80030fc:	f7ff fc33 	bl	8002966 <nunavutSetUxx>
 8003100:	4603      	mov	r3, r0
 8003102:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003104:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003108:	2b00      	cmp	r3, #0
 800310a:	da02      	bge.n	8003112 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x98>
        {
            return _err0_;
 800310c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003110:	e008      	b.n	8003124 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 8003112:	7dfb      	ldrb	r3, [r7, #23]
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	4413      	add	r3, r2
 8003118:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	08da      	lsrs	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3720      	adds	r7, #32
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_(
    const reg_udral_physics_kinematics_cartesian_Twist_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08e      	sub	sp, #56	@ 0x38
 8003130:	af04      	add	r7, sp, #16
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x1e>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x1e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800314a:	f06f 0301 	mvn.w	r3, #1
 800314e:	e094      	b.n	800327a <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 192UL)
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	2bbf      	cmp	r3, #191	@ 0xbf
 800315c:	d802      	bhi.n	8003164 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800315e:	f06f 0302 	mvn.w	r3, #2
 8003162:	e08a      	b.n	800327a <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.si.unit.velocity.Vector3.1.0 linear
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 12UL;  // Nested object (max) size, in bytes.
 8003168:	230c      	movs	r3, #12
 800316a:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_velocity_Vector3_1_0_serialize_(
 800316c:	68f8      	ldr	r0, [r7, #12]
            &obj->linear, &buffer[offset_bits / 8U], &_size_bytes0_);
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_velocity_Vector3_1_0_serialize_(
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	4413      	add	r3, r2
 8003176:	f107 0214 	add.w	r2, r7, #20
 800317a:	4619      	mov	r1, r3
 800317c:	f7ff ff7d 	bl	800307a <uavcan_si_unit_velocity_Vector3_1_0_serialize_>
 8003180:	4603      	mov	r3, r0
 8003182:	77fb      	strb	r3, [r7, #31]
        if (_err0_ < 0)
 8003184:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003188:	2b00      	cmp	r3, #0
 800318a:	da02      	bge.n	8003192 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x66>
        {
            return _err0_;
 800318c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003190:	e073      	b.n	800327a <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 96ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003198:	4413      	add	r3, r2
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d021      	beq.n	80031ea <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0xbe>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f1c3 0308 	rsb	r3, r3, #8
 80031b4:	77bb      	strb	r3, [r7, #30]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80031b6:	7fbb      	ldrb	r3, [r7, #30]
 80031b8:	9302      	str	r3, [sp, #8]
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	e9cd 2300 	strd	r2, r3, [sp]
 80031c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c8:	6a39      	ldr	r1, [r7, #32]
 80031ca:	68b8      	ldr	r0, [r7, #8]
 80031cc:	f7ff fbcb 	bl	8002966 <nunavutSetUxx>
 80031d0:	4603      	mov	r3, r0
 80031d2:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 80031d4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	da02      	bge.n	80031e2 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0xb6>
        {
            return _err1_;
 80031dc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80031e0:	e04b      	b.n	800327a <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        offset_bits += _pad0_;
 80031e2:	7fbb      	ldrb	r3, [r7, #30]
 80031e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e6:	4413      	add	r3, r2
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.si.unit.angular_velocity.Vector3.1.0 angular
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 12UL;  // Nested object (max) size, in bytes.
 80031ea:	230c      	movs	r3, #12
 80031ec:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_(
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f103 000c 	add.w	r0, r3, #12
            &obj->angular, &buffer[offset_bits / 8U], &_size_bytes1_);
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_(
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	4413      	add	r3, r2
 80031fc:	f107 0210 	add.w	r2, r7, #16
 8003200:	4619      	mov	r1, r3
 8003202:	f7ff fee1 	bl	8002fc8 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_>
 8003206:	4603      	mov	r3, r0
 8003208:	773b      	strb	r3, [r7, #28]
        if (_err2_ < 0)
 800320a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	da02      	bge.n	8003218 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0xec>
        {
            return _err2_;
 8003212:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003216:	e030      	b.n	800327a <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 96ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800321e:	4413      	add	r3, r2
 8003220:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	2b00      	cmp	r3, #0
 800322a:	d021      	beq.n	8003270 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x144>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f1c3 0308 	rsb	r3, r3, #8
 800323a:	76fb      	strb	r3, [r7, #27]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 800323c:	7efb      	ldrb	r3, [r7, #27]
 800323e:	9302      	str	r3, [sp, #8]
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9cd 2300 	strd	r2, r3, [sp]
 800324c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800324e:	6a39      	ldr	r1, [r7, #32]
 8003250:	68b8      	ldr	r0, [r7, #8]
 8003252:	f7ff fb88 	bl	8002966 <nunavutSetUxx>
 8003256:	4603      	mov	r3, r0
 8003258:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 800325a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800325e:	2b00      	cmp	r3, #0
 8003260:	da02      	bge.n	8003268 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x13c>
        {
            return _err3_;
 8003262:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003266:	e008      	b.n	800327a <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        offset_bits += _pad1_;
 8003268:	7efb      	ldrb	r3, [r7, #27]
 800326a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800326c:	4413      	add	r3, r2
 800326e:	627b      	str	r3, [r7, #36]	@ 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 192ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	08da      	lsrs	r2, r3, #3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3728      	adds	r7, #40	@ 0x28
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <uavcan_si_unit_length_WideVector3_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_length_WideVector3_1_0_serialize_(
    const uavcan_si_unit_length_WideVector3_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b08c      	sub	sp, #48	@ 0x30
 8003286:	af04      	add	r7, sp, #16
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x1e>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x1e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d102      	bne.n	80032a6 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80032a0:	f06f 0301 	mvn.w	r3, #1
 80032a4:	e042      	b.n	800332c <uavcan_si_unit_length_WideVector3_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 192UL)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	2bbf      	cmp	r3, #191	@ 0xbf
 80032b2:	d802      	bhi.n	80032ba <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80032b4:	f06f 0302 	mvn.w	r3, #2
 80032b8:	e038      	b.n	800332c <uavcan_si_unit_length_WideVector3_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT((offset_bits + 192ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 3UL * 64UL, &obj->meter[0], 0U);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	9200      	str	r2, [sp, #0]
 80032c4:	22c0      	movs	r2, #192	@ 0xc0
 80032c6:	69f9      	ldr	r1, [r7, #28]
 80032c8:	68b8      	ldr	r0, [r7, #8]
 80032ca:	f7ff fa8f 	bl	80027ec <nunavutCopyBits>
        offset_bits += 3UL * 64UL;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	33c0      	adds	r3, #192	@ 0xc0
 80032d2:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d021      	beq.n	8003322 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f1c3 0308 	rsb	r3, r3, #8
 80032ec:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
 80032f0:	9302      	str	r3, [sp, #8]
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	e9cd 2300 	strd	r2, r3, [sp]
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	69b9      	ldr	r1, [r7, #24]
 8003302:	68b8      	ldr	r0, [r7, #8]
 8003304:	f7ff fb2f 	bl	8002966 <nunavutSetUxx>
 8003308:	4603      	mov	r3, r0
 800330a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800330c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003310:	2b00      	cmp	r3, #0
 8003312:	da02      	bge.n	800331a <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x98>
        {
            return _err0_;
 8003314:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003318:	e008      	b.n	800332c <uavcan_si_unit_length_WideVector3_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 800331a:	7dfb      	ldrb	r3, [r7, #23]
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	4413      	add	r3, r2
 8003320:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 192ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	08da      	lsrs	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_(
    const reg_udral_physics_kinematics_cartesian_Point_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	@ 0x30
 8003338:	af04      	add	r7, sp, #16
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x1e>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x1e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003352:	f06f 0301 	mvn.w	r3, #1
 8003356:	e051      	b.n	80033fc <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xc8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 192UL)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	2bbf      	cmp	r3, #191	@ 0xbf
 8003364:	d802      	bhi.n	800336c <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003366:	f06f 0302 	mvn.w	r3, #2
 800336a:	e047      	b.n	80033fc <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xc8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]

    {   // uavcan.si.unit.length.WideVector3.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 192ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 24UL;  // Nested object (max) size, in bytes.
 8003370:	2318      	movs	r3, #24
 8003372:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_length_WideVector3_1_0_serialize_(
 8003374:	68f8      	ldr	r0, [r7, #12]
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes0_);
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_length_WideVector3_1_0_serialize_(
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	4413      	add	r3, r2
 800337e:	f107 0210 	add.w	r2, r7, #16
 8003382:	4619      	mov	r1, r3
 8003384:	f7ff ff7d 	bl	8003282 <uavcan_si_unit_length_WideVector3_1_0_serialize_>
 8003388:	4603      	mov	r3, r0
 800338a:	75fb      	strb	r3, [r7, #23]
        if (_err0_ < 0)
 800338c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003390:	2b00      	cmp	r3, #0
 8003392:	da02      	bge.n	800339a <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x66>
        {
            return _err0_;
 8003394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003398:	e030      	b.n	80033fc <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xc8>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 192ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d021      	beq.n	80033f2 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xbe>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f1c3 0308 	rsb	r3, r3, #8
 80033bc:	75bb      	strb	r3, [r7, #22]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80033be:	7dbb      	ldrb	r3, [r7, #22]
 80033c0:	9302      	str	r3, [sp, #8]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9cd 2300 	strd	r2, r3, [sp]
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	69b9      	ldr	r1, [r7, #24]
 80033d2:	68b8      	ldr	r0, [r7, #8]
 80033d4:	f7ff fac7 	bl	8002966 <nunavutSetUxx>
 80033d8:	4603      	mov	r3, r0
 80033da:	757b      	strb	r3, [r7, #21]
        if (_err1_ < 0)
 80033dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	da02      	bge.n	80033ea <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xb6>
        {
            return _err1_;
 80033e4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80033e8:	e008      	b.n	80033fc <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xc8>
        }
        offset_bits += _pad0_;
 80033ea:	7dbb      	ldrb	r3, [r7, #22]
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	4413      	add	r3, r2
 80033f0:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 192ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	08da      	lsrs	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3720      	adds	r7, #32
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <uavcan_si_unit_angle_Quaternion_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Quaternion_1_0_serialize_(
    const uavcan_si_unit_angle_Quaternion_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08c      	sub	sp, #48	@ 0x30
 8003408:	af04      	add	r7, sp, #16
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x1e>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x1e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d102      	bne.n	8003428 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003422:	f06f 0301 	mvn.w	r3, #1
 8003426:	e042      	b.n	80034ae <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 128UL)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	2b7f      	cmp	r3, #127	@ 0x7f
 8003434:	d802      	bhi.n	800343c <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003436:	f06f 0302 	mvn.w	r3, #2
 800343a:	e038      	b.n	80034ae <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 4UL * 32UL, &obj->wxyz[0], 0U);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	9200      	str	r2, [sp, #0]
 8003446:	2280      	movs	r2, #128	@ 0x80
 8003448:	69f9      	ldr	r1, [r7, #28]
 800344a:	68b8      	ldr	r0, [r7, #8]
 800344c:	f7ff f9ce 	bl	80027ec <nunavutCopyBits>
        offset_bits += 4UL * 32UL;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	3380      	adds	r3, #128	@ 0x80
 8003454:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	2b00      	cmp	r3, #0
 800345e:	d021      	beq.n	80034a4 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f1c3 0308 	rsb	r3, r3, #8
 800346e:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	9302      	str	r3, [sp, #8]
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	e9cd 2300 	strd	r2, r3, [sp]
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	69b9      	ldr	r1, [r7, #24]
 8003484:	68b8      	ldr	r0, [r7, #8]
 8003486:	f7ff fa6e 	bl	8002966 <nunavutSetUxx>
 800348a:	4603      	mov	r3, r0
 800348c:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800348e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003492:	2b00      	cmp	r3, #0
 8003494:	da02      	bge.n	800349c <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x98>
        {
            return _err0_;
 8003496:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800349a:	e008      	b.n	80034ae <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 800349c:	7dfb      	ldrb	r3, [r7, #23]
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 128ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	08da      	lsrs	r2, r3, #3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_(
    const reg_udral_physics_kinematics_cartesian_Pose_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b08e      	sub	sp, #56	@ 0x38
 80034ba:	af04      	add	r7, sp, #16
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x1e>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x1e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80034d4:	f06f 0301 	mvn.w	r3, #1
 80034d8:	e095      	b.n	8003606 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 320UL)
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034e8:	d202      	bcs.n	80034f0 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80034ea:	f06f 0302 	mvn.w	r3, #2
 80034ee:	e08a      	b.n	8003606 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // reg.udral.physics.kinematics.cartesian.Point.0.1 position
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 192ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 24UL;  // Nested object (max) size, in bytes.
 80034f4:	2318      	movs	r3, #24
 80034f6:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_(
 80034f8:	68f8      	ldr	r0, [r7, #12]
            &obj->position, &buffer[offset_bits / 8U], &_size_bytes0_);
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_(
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	4413      	add	r3, r2
 8003502:	f107 0214 	add.w	r2, r7, #20
 8003506:	4619      	mov	r1, r3
 8003508:	f7ff ff14 	bl	8003334 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_>
 800350c:	4603      	mov	r3, r0
 800350e:	77fb      	strb	r3, [r7, #31]
        if (_err0_ < 0)
 8003510:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003514:	2b00      	cmp	r3, #0
 8003516:	da02      	bge.n	800351e <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x68>
        {
            return _err0_;
 8003518:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800351c:	e073      	b.n	8003606 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 192ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003524:	4413      	add	r3, r2
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	2b00      	cmp	r3, #0
 8003530:	d021      	beq.n	8003576 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0xc0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f1c3 0308 	rsb	r3, r3, #8
 8003540:	77bb      	strb	r3, [r7, #30]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003542:	7fbb      	ldrb	r3, [r7, #30]
 8003544:	9302      	str	r3, [sp, #8]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9cd 2300 	strd	r2, r3, [sp]
 8003552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003554:	6a39      	ldr	r1, [r7, #32]
 8003556:	68b8      	ldr	r0, [r7, #8]
 8003558:	f7ff fa05 	bl	8002966 <nunavutSetUxx>
 800355c:	4603      	mov	r3, r0
 800355e:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8003560:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003564:	2b00      	cmp	r3, #0
 8003566:	da02      	bge.n	800356e <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0xb8>
        {
            return _err1_;
 8003568:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800356c:	e04b      	b.n	8003606 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
        }
        offset_bits += _pad0_;
 800356e:	7fbb      	ldrb	r3, [r7, #30]
 8003570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003572:	4413      	add	r3, r2
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.si.unit.angle.Quaternion.1.0 orientation
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 16UL;  // Nested object (max) size, in bytes.
 8003576:	2310      	movs	r3, #16
 8003578:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angle_Quaternion_1_0_serialize_(
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f103 0018 	add.w	r0, r3, #24
            &obj->orientation, &buffer[offset_bits / 8U], &_size_bytes1_);
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angle_Quaternion_1_0_serialize_(
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	4413      	add	r3, r2
 8003588:	f107 0210 	add.w	r2, r7, #16
 800358c:	4619      	mov	r1, r3
 800358e:	f7ff ff39 	bl	8003404 <uavcan_si_unit_angle_Quaternion_1_0_serialize_>
 8003592:	4603      	mov	r3, r0
 8003594:	773b      	strb	r3, [r7, #28]
        if (_err2_ < 0)
 8003596:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800359a:	2b00      	cmp	r3, #0
 800359c:	da02      	bge.n	80035a4 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0xee>
        {
            return _err2_;
 800359e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80035a2:	e030      	b.n	8003606 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 128ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035aa:	4413      	add	r3, r2
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d021      	beq.n	80035fc <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x146>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f1c3 0308 	rsb	r3, r3, #8
 80035c6:	76fb      	strb	r3, [r7, #27]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 80035c8:	7efb      	ldrb	r3, [r7, #27]
 80035ca:	9302      	str	r3, [sp, #8]
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	e9cd 2300 	strd	r2, r3, [sp]
 80035d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035da:	6a39      	ldr	r1, [r7, #32]
 80035dc:	68b8      	ldr	r0, [r7, #8]
 80035de:	f7ff f9c2 	bl	8002966 <nunavutSetUxx>
 80035e2:	4603      	mov	r3, r0
 80035e4:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 80035e6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	da02      	bge.n	80035f4 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x13e>
        {
            return _err3_;
 80035ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80035f2:	e008      	b.n	8003606 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
        }
        offset_bits += _pad1_;
 80035f4:	7efb      	ldrb	r3, [r7, #27]
 80035f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f8:	4413      	add	r3, r2
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 320ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80035fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fe:	08da      	lsrs	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3728      	adds	r7, #40	@ 0x28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_cartesian_State_0_1_serialize_(
    const reg_udral_physics_kinematics_cartesian_State_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b08e      	sub	sp, #56	@ 0x38
 8003612:	af04      	add	r7, sp, #16
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x1e>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x1e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d102      	bne.n	8003632 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800362c:	f06f 0301 	mvn.w	r3, #1
 8003630:	e095      	b.n	800375e <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 512UL)
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003640:	d202      	bcs.n	8003648 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003642:	f06f 0302 	mvn.w	r3, #2
 8003646:	e08a      	b.n	800375e <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // reg.udral.physics.kinematics.cartesian.Pose.0.1 pose
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 320ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 40UL;  // Nested object (max) size, in bytes.
 800364c:	2328      	movs	r3, #40	@ 0x28
 800364e:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_(
 8003650:	68f8      	ldr	r0, [r7, #12]
            &obj->pose, &buffer[offset_bits / 8U], &_size_bytes0_);
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_(
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	4413      	add	r3, r2
 800365a:	f107 0214 	add.w	r2, r7, #20
 800365e:	4619      	mov	r1, r3
 8003660:	f7ff ff29 	bl	80034b6 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_>
 8003664:	4603      	mov	r3, r0
 8003666:	77fb      	strb	r3, [r7, #31]
        if (_err0_ < 0)
 8003668:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800366c:	2b00      	cmp	r3, #0
 800366e:	da02      	bge.n	8003676 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x68>
        {
            return _err0_;
 8003670:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003674:	e073      	b.n	800375e <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 320ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367c:	4413      	add	r3, r2
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	2b00      	cmp	r3, #0
 8003688:	d021      	beq.n	80036ce <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0xc0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f1c3 0308 	rsb	r3, r3, #8
 8003698:	77bb      	strb	r3, [r7, #30]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800369a:	7fbb      	ldrb	r3, [r7, #30]
 800369c:	9302      	str	r3, [sp, #8]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9cd 2300 	strd	r2, r3, [sp]
 80036aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ac:	6a39      	ldr	r1, [r7, #32]
 80036ae:	68b8      	ldr	r0, [r7, #8]
 80036b0:	f7ff f959 	bl	8002966 <nunavutSetUxx>
 80036b4:	4603      	mov	r3, r0
 80036b6:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 80036b8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	da02      	bge.n	80036c6 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0xb8>
        {
            return _err1_;
 80036c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80036c4:	e04b      	b.n	800375e <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
        }
        offset_bits += _pad0_;
 80036c6:	7fbb      	ldrb	r3, [r7, #30]
 80036c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ca:	4413      	add	r3, r2
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // reg.udral.physics.kinematics.cartesian.Twist.0.1 twist
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 192ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 24UL;  // Nested object (max) size, in bytes.
 80036ce:	2318      	movs	r3, #24
 80036d0:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_(
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
            &obj->twist, &buffer[offset_bits / 8U], &_size_bytes1_);
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_(
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	4413      	add	r3, r2
 80036e0:	f107 0210 	add.w	r2, r7, #16
 80036e4:	4619      	mov	r1, r3
 80036e6:	f7ff fd21 	bl	800312c <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_>
 80036ea:	4603      	mov	r3, r0
 80036ec:	773b      	strb	r3, [r7, #28]
        if (_err2_ < 0)
 80036ee:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	da02      	bge.n	80036fc <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0xee>
        {
            return _err2_;
 80036f6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80036fa:	e030      	b.n	800375e <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 192ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003702:	4413      	add	r3, r2
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	2b00      	cmp	r3, #0
 800370e:	d021      	beq.n	8003754 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x146>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f1c3 0308 	rsb	r3, r3, #8
 800371e:	76fb      	strb	r3, [r7, #27]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8003720:	7efb      	ldrb	r3, [r7, #27]
 8003722:	9302      	str	r3, [sp, #8]
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9cd 2300 	strd	r2, r3, [sp]
 8003730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003732:	6a39      	ldr	r1, [r7, #32]
 8003734:	68b8      	ldr	r0, [r7, #8]
 8003736:	f7ff f916 	bl	8002966 <nunavutSetUxx>
 800373a:	4603      	mov	r3, r0
 800373c:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 800373e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003742:	2b00      	cmp	r3, #0
 8003744:	da02      	bge.n	800374c <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x13e>
        {
            return _err3_;
 8003746:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800374a:	e008      	b.n	800375e <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
        }
        offset_bits += _pad1_;
 800374c:	7efb      	ldrb	r3, [r7, #27]
 800374e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003750:	4413      	add	r3, r2
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 512ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	08da      	lsrs	r2, r3, #3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3728      	adds	r7, #40	@ 0x28
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fafb 	bl	8003d6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
      { }
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <error_handler>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 800379e:	b580      	push	{r7, lr}
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	f7fe fe75 	bl	8002490 <Error_Handler>
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}

080037aa <micros_64>:
// Тут не нужен точный таймер, поэтому так
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 80037aa:	b5b0      	push	{r4, r5, r7, lr}
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	f002 fb1f 	bl	8005df0 <HAL_GetTick>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	2200      	movs	r2, #0
 80037be:	461c      	mov	r4, r3
 80037c0:	4615      	mov	r5, r2
 80037c2:	4622      	mov	r2, r4
 80037c4:	462b      	mov	r3, r5
 80037c6:	4610      	mov	r0, r2
 80037c8:	4619      	mov	r1, r3
 80037ca:	bdb0      	pop	{r4, r5, r7, pc}

080037cc <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	1d1a      	adds	r2, r3, #4
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4610      	mov	r0, r2
 80037ea:	f000 fb33 	bl	8003e54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ffdf 	bl	80037cc <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff ff9f 	bl	8003766 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 800383e:	687c      	ldr	r4, [r7, #4]
 8003840:	f107 0308 	add.w	r3, r7, #8
 8003844:	6839      	ldr	r1, [r7, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff ffd6 	bl	80037f8 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 800384c:	f107 0308 	add.w	r3, r7, #8
 8003850:	f641 5255 	movw	r2, #7509	@ 0x1d55
 8003854:	4619      	mov	r1, r3
 8003856:	4620      	mov	r0, r4
 8003858:	f000 fb13 	bl	8003e82 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 800385c:	f107 0308 	add.w	r3, r7, #8
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ffd9 	bl	8003818 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8003866:	4a04      	ldr	r2, [pc, #16]	@ (8003878 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bd90      	pop	{r4, r7, pc}
 8003876:	bf00      	nop
 8003878:	08012d60 	.word	0x08012d60

0800387c <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003888:	2120      	movs	r1, #32
 800388a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800388e:	f003 fc95 	bl	80071bc <HAL_GPIO_TogglePin>
    }
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <send_IMU>:
};



void send_IMU(float* qw, float* qx, float* qy, float* qz, float* ax, float* ay, float* az, float* gx, float* gy, float* gz)
{
 800389c:	b5b0      	push	{r4, r5, r7, lr}
 800389e:	b0a6      	sub	sp, #152	@ 0x98
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]

	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);

	//uavcan_si_unit_angle_Quaternion_1_0 q_orient = {*av_1, *av_2, *av_3, *av_3};
	reg_udral_physics_kinematics_cartesian_Pose_0_1 imu_pose;
	imu_pose.orientation = {*qw, *qx, *qy, *qz};
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 80038be:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 80038c2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80038c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	//imu_pose.position =

	reg_udral_physics_kinematics_cartesian_Twist_0_1 imu_twist;
	imu_twist.angular = {*ax, *ay, *az};
 80038ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	65f9      	str	r1, [r7, #92]	@ 0x5c
 80038de:	663a      	str	r2, [r7, #96]	@ 0x60
 80038e0:	667b      	str	r3, [r7, #100]	@ 0x64
	imu_twist.linear = {*gx, *gy, *gz};
 80038e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6539      	str	r1, [r7, #80]	@ 0x50
 80038f6:	657a      	str	r2, [r7, #84]	@ 0x54
 80038f8:	65bb      	str	r3, [r7, #88]	@ 0x58

	reg_udral_physics_kinematics_cartesian_State_0_1 state_msg =
	{
			.pose = imu_pose,
			.twist = imu_twist
	};
 80038fa:	f107 0410 	add.w	r4, r7, #16
 80038fe:	f107 0568 	add.w	r5, r7, #104	@ 0x68
 8003902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800390a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800390e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003912:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8003916:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800391a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800391c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800391e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003922:	e884 0003 	stmia.w	r4, {r0, r1}
    interface->send_cyphal_default_msg<State>(
 8003926:	4808      	ldr	r0, [pc, #32]	@ (8003948 <send_IMU+0xac>)
 8003928:	f000 fada 	bl	8003ee0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800392c:	f107 0110 	add.w	r1, r7, #16
 8003930:	4b06      	ldr	r3, [pc, #24]	@ (800394c <send_IMU+0xb0>)
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	f240 5339 	movw	r3, #1337	@ 0x539
 8003938:	4a05      	ldr	r2, [pc, #20]	@ (8003950 <send_IMU+0xb4>)
 800393a:	f000 fadd 	bl	8003ef8 <_ZNK15CyphalInterface23send_cyphal_default_msgI5StateEEvPNT_4TypeEPhtS5_>
		&state_msg,
		state_buffer,
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}
 800393e:	bf00      	nop
 8003940:	3790      	adds	r7, #144	@ 0x90
 8003942:	46bd      	mov	sp, r7
 8003944:	bdb0      	pop	{r4, r5, r7, pc}
 8003946:	bf00      	nop
 8003948:	20000410 	.word	0x20000410
 800394c:	2000047c 	.word	0x2000047c
 8003950:	2000043c 	.word	0x2000043c

08003954 <heartbeat>:

void heartbeat() {
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af02      	add	r7, sp, #8
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 800395a:	463b      	mov	r3, r7
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 8003962:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <heartbeat+0x3c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	603b      	str	r3, [r7, #0]
    interface->send_cyphal_default_msg<HBeat>(
 8003968:	480a      	ldr	r0, [pc, #40]	@ (8003994 <heartbeat+0x40>)
 800396a:	f000 fab9 	bl	8003ee0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800396e:	4639      	mov	r1, r7
 8003970:	4b09      	ldr	r3, [pc, #36]	@ (8003998 <heartbeat+0x44>)
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	f641 5355 	movw	r3, #7509	@ 0x1d55
 8003978:	4a08      	ldr	r2, [pc, #32]	@ (800399c <heartbeat+0x48>)
 800397a:	f000 fad7 	bl	8003f2c <_ZNK15CyphalInterface23send_cyphal_default_msgI5HBeatEEvPNT_4TypeEPhtS5_>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 800397e:	4b04      	ldr	r3, [pc, #16]	@ (8003990 <heartbeat+0x3c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	4a02      	ldr	r2, [pc, #8]	@ (8003990 <heartbeat+0x3c>)
 8003986:	6013      	str	r3, [r2, #0]

}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000488 	.word	0x20000488
 8003994:	20000410 	.word	0x20000410
 8003998:	20000487 	.word	0x20000487
 800399c:	20000480 	.word	0x20000480

080039a0 <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b089      	sub	sp, #36	@ 0x24
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 80039a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <setup_cyphal+0x78>)
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	2106      	movs	r1, #6
 80039b4:	4819      	ldr	r0, [pc, #100]	@ (8003a1c <setup_cyphal+0x7c>)
 80039b6:	f000 fad3 	bl	8003f60 <_ZN15CyphalInterface6createI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 80039ba:	4602      	mov	r2, r0
 80039bc:	f107 0308 	add.w	r3, r7, #8
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fb0d 	bl	8003fe2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 80039c8:	f107 0308 	add.w	r3, r7, #8
 80039cc:	4619      	mov	r1, r3
 80039ce:	4814      	ldr	r0, [pc, #80]	@ (8003a20 <setup_cyphal+0x80>)
 80039d0:	f000 fb16 	bl	8004000 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 80039d4:	f107 0308 	add.w	r3, r7, #8
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff1d 	bl	8003818 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 80039de:	f44f 700e 	mov.w	r0, #568	@ 0x238
 80039e2:	f00a f8c2 	bl	800db6a <_Znwj>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461c      	mov	r4, r3
 80039ea:	f107 0310 	add.w	r3, r7, #16
 80039ee:	490c      	ldr	r1, [pc, #48]	@ (8003a20 <setup_cyphal+0x80>)
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff ff01 	bl	80037f8 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80039f6:	f107 0310 	add.w	r3, r7, #16
 80039fa:	4619      	mov	r1, r3
 80039fc:	4620      	mov	r0, r4
 80039fe:	f7ff ff19 	bl	8003834 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8003a02:	4b08      	ldr	r3, [pc, #32]	@ (8003a24 <setup_cyphal+0x84>)
 8003a04:	601c      	str	r4, [r3, #0]
 8003a06:	f107 0310 	add.w	r3, r7, #16
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ff04 	bl	8003818 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8003a10:	bf00      	nop
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd90      	pop	{r4, r7, pc}
 8003a18:	20000418 	.word	0x20000418
 8003a1c:	200003b8 	.word	0x200003b8
 8003a20:	20000410 	.word	0x20000410
 8003a24:	20000438 	.word	0x20000438

08003a28 <cyphal_loop>:

void cyphal_loop() {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
    interface->loop();
 8003a2c:	4804      	ldr	r0, [pc, #16]	@ (8003a40 <cyphal_loop+0x18>)
 8003a2e:	f000 fa57 	bl	8003ee0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003a32:	4603      	mov	r3, r0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f007 fafd 	bl	800b034 <_ZN15CyphalInterface4loopEv>
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000410 	.word	0x20000410

08003a44 <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08c      	sub	sp, #48	@ 0x30
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 8003a4c:	f107 0320 	add.w	r3, r7, #32
 8003a50:	2106      	movs	r1, #6
 8003a52:	4618      	mov	r0, r3
 8003a54:	f00a f83a 	bl	800dacc <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(1125);//JS_SUB_PORT_ID
 8003a58:	f107 0318 	add.w	r3, r7, #24
 8003a5c:	f240 4165 	movw	r1, #1125	@ 0x465
 8003a60:	4618      	mov	r0, r3
 8003a62:	f00a f813 	bl	800da8c <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 8003a66:	f107 0310 	add.w	r3, r7, #16
 8003a6a:	f641 5155 	movw	r1, #7509	@ 0x1d55
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f00a f80c 	bl	800da8c <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_consolidated = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 8003a74:	f107 0308 	add.w	r3, r7, #8
 8003a78:	f107 0218 	add.w	r2, r7, #24
 8003a7c:	f107 0120 	add.w	r1, r7, #32
 8003a80:	4618      	mov	r0, r3
 8003a82:	f00a f845 	bl	800db10 <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8003a86:	4b45      	ldr	r3, [pc, #276]	@ (8003b9c <cyphal_can_starter+0x158>)
 8003a88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a8c:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 8003a8e:	4b43      	ldr	r3, [pc, #268]	@ (8003b9c <cyphal_can_starter+0x158>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003a94:	4b41      	ldr	r3, [pc, #260]	@ (8003b9c <cyphal_can_starter+0x158>)
 8003a96:	2202      	movs	r2, #2
 8003a98:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003a9a:	4b40      	ldr	r3, [pc, #256]	@ (8003b9c <cyphal_can_starter+0x158>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	4a3e      	ldr	r2, [pc, #248]	@ (8003b9c <cyphal_can_starter+0x158>)
 8003aa4:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	4a3c      	ldr	r2, [pc, #240]	@ (8003b9c <cyphal_can_starter+0x158>)
 8003aaa:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8003aac:	4b3c      	ldr	r3, [pc, #240]	@ (8003ba0 <cyphal_can_starter+0x15c>)
 8003aae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ab2:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8003ab4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba0 <cyphal_can_starter+0x15c>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003aba:	4b39      	ldr	r3, [pc, #228]	@ (8003ba0 <cyphal_can_starter+0x15c>)
 8003abc:	2202      	movs	r2, #2
 8003abe:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003ac0:	4b37      	ldr	r3, [pc, #220]	@ (8003ba0 <cyphal_can_starter+0x15c>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	4a35      	ldr	r2, [pc, #212]	@ (8003ba0 <cyphal_can_starter+0x15c>)
 8003aca:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	4a34      	ldr	r2, [pc, #208]	@ (8003ba0 <cyphal_can_starter+0x15c>)
 8003ad0:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8003ad2:	4b34      	ldr	r3, [pc, #208]	@ (8003ba4 <cyphal_can_starter+0x160>)
 8003ad4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ad8:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 1;
 8003ada:	4b32      	ldr	r3, [pc, #200]	@ (8003ba4 <cyphal_can_starter+0x160>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003ae0:	4b30      	ldr	r3, [pc, #192]	@ (8003ba4 <cyphal_can_starter+0x160>)
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003ae6:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba4 <cyphal_can_starter+0x160>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba4 <cyphal_can_starter+0x160>)
 8003af0:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba4 <cyphal_can_starter+0x160>)
 8003af6:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8003af8:	2300      	movs	r3, #0
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	2300      	movs	r3, #0
 8003afe:	2202      	movs	r2, #2
 8003b00:	2102      	movs	r1, #2
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f002 feee 	bl	80068e4 <HAL_FDCAN_ConfigGlobalFilter>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	bf14      	ite	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	2300      	moveq	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 8003b18:	f7fe fcba 	bl	8002490 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 8003b1c:	491f      	ldr	r1, [pc, #124]	@ (8003b9c <cyphal_can_starter+0x158>)
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f002 fe86 	bl	8006830 <HAL_FDCAN_ConfigFilter>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bf14      	ite	ne
 8003b2a:	2301      	movne	r3, #1
 8003b2c:	2300      	moveq	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <cyphal_can_starter+0xf4>
	  Error_Handler();
 8003b34:	f7fe fcac 	bl	8002490 <Error_Handler>
	}
//	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
//	  Error_Handler();
//	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 8003b38:	491a      	ldr	r1, [pc, #104]	@ (8003ba4 <cyphal_can_starter+0x160>)
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f002 fe78 	bl	8006830 <HAL_FDCAN_ConfigFilter>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	bf14      	ite	ne
 8003b46:	2301      	movne	r3, #1
 8003b48:	2300      	moveq	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <cyphal_can_starter+0x110>
	  Error_Handler();
 8003b50:	f7fe fc9e 	bl	8002490 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 8003b54:	2200      	movs	r2, #0
 8003b56:	2105      	movs	r1, #5
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f002 fef4 	bl	8006946 <HAL_FDCAN_ConfigTxDelayCompensation>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf14      	ite	ne
 8003b64:	2301      	movne	r3, #1
 8003b66:	2300      	moveq	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <cyphal_can_starter+0x12e>
	  Error_Handler();
 8003b6e:	f7fe fc8f 	bl	8002490 <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f002 ff09 	bl	800698a <HAL_FDCAN_EnableTxDelayCompensation>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bf14      	ite	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	2300      	moveq	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <cyphal_can_starter+0x148>
	  Error_Handler();
 8003b88:	f7fe fc82 	bl	8002490 <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f002 ff1d 	bl	80069cc <HAL_FDCAN_Start>
}
 8003b92:	bf00      	nop
 8003b94:	3728      	adds	r7, #40	@ 0x28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200004bc 	.word	0x200004bc
 8003ba0:	2000048c 	.word	0x2000048c
 8003ba4:	200004a4 	.word	0x200004a4

08003ba8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
      { delete this; }
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	6053      	str	r3, [r2, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	2300      	movs	r3, #0
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	6053      	str	r3, [r2, #4]
 8003c04:	6093      	str	r3, [r2, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ffde 	bl	8003bca <_ZNSt14_Function_baseC1Ev>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 8003c14:	6838      	ldr	r0, [r7, #0]
 8003c16:	f000 fa27 	bl	8004068 <_ZNKSt8functionIFyvEEcvbEv>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00d      	beq.n	8003c3c <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	6839      	ldr	r1, [r7, #0]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	609a      	str	r2, [r3, #8]
	  }
      }
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	461a      	mov	r2, r3
 8003c54:	2300      	movs	r3, #0
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	6053      	str	r3, [r2, #4]
 8003c5a:	6093      	str	r3, [r2, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff ffb3 	bl	8003bca <_ZNSt14_Function_baseC1Ev>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8003c6a:	6838      	ldr	r0, [r7, #0]
 8003c6c:	f000 fa0c 	bl	8004088 <_ZNKSt8functionIFvvEEcvbEv>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00d      	beq.n	8003c92 <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	6839      	ldr	r1, [r7, #0]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	609a      	str	r2, [r3, #8]
      }
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      _GLIBCXX23_CONSTEXPR
      explicit operator bool() const noexcept
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f9ff 	bl	80040a8 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
	return get();
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f9ee 	bl	80040a8 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8003ccc:	4603      	mov	r3, r0
      }
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 f9ee 	bl	80040c2 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff ffeb 	bl	8003cd6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1Ev>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
	: _M_t()
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ffe8 	bl	8003cf0 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8003d2a:	b590      	push	{r4, r7, lr}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f9d1 	bl	80040dc <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8003d3a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00c      	beq.n	8003d5e <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f9d6 	bl	80040f6 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f9df 	bl	8004110 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8003d52:	4603      	mov	r3, r0
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4619      	mov	r1, r3
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f000 f9e4 	bl	8004126 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
      }
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd90      	pop	{r4, r7, pc}

08003d6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d004      	beq.n	8003d88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fba5 	bl	80024d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8003d94:	b590      	push	{r4, r7, lr}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	461a      	mov	r2, r3
 8003da2:	2300      	movs	r3, #0
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	6053      	str	r3, [r2, #4]
 8003da8:	6093      	str	r3, [r2, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff ff0c 	bl	8003bca <_ZNSt14_Function_baseC1Ev>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8003db8:	6838      	ldr	r0, [r7, #0]
 8003dba:	f000 f9c4 	bl	8004146 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8003dc4:	687c      	ldr	r4, [r7, #4]
 8003dc6:	6838      	ldr	r0, [r7, #0]
 8003dc8:	f000 f9cd 	bl	8004166 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f000 f9d3 	bl	800417c <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a04      	ldr	r2, [pc, #16]	@ (8003dec <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 8003dda:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a04      	ldr	r2, [pc, #16]	@ (8003df0 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 8003de0:	609a      	str	r2, [r3, #8]
	    }
	}
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd90      	pop	{r4, r7, pc}
 8003dec:	080041a1 	.word	0x080041a1
 8003df0:	080041c5 	.word	0x080041c5

08003df4 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	461a      	mov	r2, r3
 8003e02:	2300      	movs	r3, #0
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	6053      	str	r3, [r2, #4]
 8003e08:	6093      	str	r3, [r2, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fedc 	bl	8003bca <_ZNSt14_Function_baseC1Ev>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8003e18:	6838      	ldr	r0, [r7, #0]
 8003e1a:	f000 f9f2 	bl	8004202 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00e      	beq.n	8003e42 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8003e24:	687c      	ldr	r4, [r7, #4]
 8003e26:	6838      	ldr	r0, [r7, #0]
 8003e28:	f000 f9fb 	bl	8004222 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4620      	mov	r0, r4
 8003e32:	f000 fa01 	bl	8004238 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a04      	ldr	r2, [pc, #16]	@ (8003e4c <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 8003e3a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a04      	ldr	r2, [pc, #16]	@ (8003e50 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 8003e40:	609a      	str	r2, [r3, #8]
	}
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd90      	pop	{r4, r7, pc}
 8003e4c:	0800425d 	.word	0x0800425d
 8003e50:	0800427b 	.word	0x0800427b

08003e54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe fb1e 	bl	80024b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8003e90:	f107 0310 	add.w	r3, r7, #16
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fcae 	bl	80037f8 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8003e9c:	88fa      	ldrh	r2, [r7, #6]
 8003e9e:	f107 0110 	add.w	r1, r7, #16
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fa07 	bl	80042b8 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8003eaa:	f107 0310 	add.w	r3, r7, #16
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff fcb2 	bl	8003818 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	4a04      	ldr	r2, [pc, #16]	@ (8003edc <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	08012d80 	.word	0x08012d80

08003ee0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	return _M_get();
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fa13 	bl	8004314 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8003eee:	4603      	mov	r3, r0
      }
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <_ZNK15CyphalInterface23send_cyphal_default_msgI5StateEEvPNT_4TypeEPhtS5_>:
    );
    (*transfer_id)++;
}

template <typename TypeAlias>
inline void CyphalInterface::send_cyphal_default_msg(
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af04      	add	r7, sp, #16
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	807b      	strh	r3, [r7, #2]
    typename TypeAlias::Type *obj,
    uint8_t buffer[],
    CanardPortID port,
    CanardTransferID *transfer_id
) const {
    send_cyphal<TypeAlias>(
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	23ff      	movs	r3, #255	@ 0xff
 8003f0a:	9303      	str	r3, [sp, #12]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9302      	str	r3, [sp, #8]
 8003f10:	2304      	movs	r3, #4
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 fa04 	bl	800432c <_ZNK15CyphalInterface11send_cyphalI5StateEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>
        transfer_id,
        CanardPriorityNominal,
        CanardTransferKindMessage,
        CANARD_NODE_ID_UNSET
    );
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <_ZNK15CyphalInterface23send_cyphal_default_msgI5HBeatEEvPNT_4TypeEPhtS5_>:
inline void CyphalInterface::send_cyphal_default_msg(
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af04      	add	r7, sp, #16
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	807b      	strh	r3, [r7, #2]
    send_cyphal<TypeAlias>(
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	23ff      	movs	r3, #255	@ 0xff
 8003f3e:	9303      	str	r3, [sp, #12]
 8003f40:	2300      	movs	r3, #0
 8003f42:	9302      	str	r3, [sp, #8]
 8003f44:	2304      	movs	r3, #4
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fa38 	bl	80043c8 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <_ZN15CyphalInterface6createI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    UtilityConfig& utilities;
public:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create(
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b08b      	sub	sp, #44	@ 0x2c
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 8003f70:	f107 030c 	add.w	r3, r7, #12
 8003f74:	61fb      	str	r3, [r7, #28]
        auto provider  = std::unique_ptr<Provider>(Provider::template create<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config));
 8003f76:	7afa      	ldrb	r2, [r7, #11]
 8003f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	69f8      	ldr	r0, [r7, #28]
 8003f82:	f000 fa6f 	bl	8004464 <_ZN5G4CAN6createI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 8003f86:	4602      	mov	r2, r0
 8003f88:	f107 0310 	add.w	r3, r7, #16
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fab5 	bl	80044fe <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EEC1IS2_vEEPS0_>
    
        std::byte* interface_ptr = *inout_buffer;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	61bb      	str	r3, [r7, #24]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	200c      	movs	r0, #12
 8003fa0:	f7fe fa7c 	bl	800249c <_ZnwjPv>
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	7afb      	ldrb	r3, [r7, #11]
 8003fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003faa:	4619      	mov	r1, r3
 8003fac:	4620      	mov	r0, r4
 8003fae:	f7fe fba7 	bl	8002700 <_ZN15CyphalInterfaceC1EhR13UtilityConfig>
 8003fb2:	617c      	str	r4, [r7, #20]

        interface->provider = std::move(provider);
 8003fb4:	f107 0310 	add.w	r3, r7, #16
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fad1 	bl	8004560 <_ZSt4moveIRSt10unique_ptrI5G4CANSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fad5 	bl	8004576 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEaSI5G4CANS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
        return interface;
 8003fcc:	697c      	ldr	r4, [r7, #20]
    }
 8003fce:	f107 0310 	add.w	r3, r7, #16
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 faa2 	bl	800451c <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev>
        return interface;
 8003fd8:	4623      	mov	r3, r4
    }
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3724      	adds	r7, #36	@ 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd90      	pop	{r4, r7, pc}

08003fe2 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6839      	ldr	r1, [r7, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fae3 	bl	80045bc <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 800400a:	687c      	ldr	r4, [r7, #4]
 800400c:	6838      	ldr	r0, [r7, #0]
 800400e:	f000 faed 	bl	80045ec <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 8004012:	4603      	mov	r3, r0
 8004014:	4619      	mov	r1, r3
 8004016:	4620      	mov	r0, r4
 8004018:	f000 faf3 	bl	8004602 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 800401c:	687b      	ldr	r3, [r7, #4]
      }
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bd90      	pop	{r4, r7, pc}
	...

08004028 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
      { }
 8004030:	4a04      	ldr	r2, [pc, #16]	@ (8004044 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	08012dc0 	.word	0x08012dc0

08004048 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
      { }
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ffe9 	bl	8004028 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8004056:	210c      	movs	r1, #12
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f009 fd84 	bl	800db66 <_ZdlPvj>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return `true` when this function object contains a target,
       *  or `false` when it is empty.
       *
       *  This function will not throw exceptions.
       */
      explicit operator bool() const noexcept
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe fa86 	bl	8002584 <_ZNKSt14_Function_base8_M_emptyEv>
 8004078:	4603      	mov	r3, r0
 800407a:	f083 0301 	eor.w	r3, r3, #1
 800407e:	b2db      	uxtb	r3, r3
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fa76 	bl	8002584 <_ZNKSt14_Function_base8_M_emptyEv>
 8004098:	4603      	mov	r3, r0
 800409a:	f083 0301 	eor.w	r3, r3, #1
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fac4 	bl	8004640 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80040b8:	4603      	mov	r3, r0
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fac5 	bl	800465c <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fac8 	bl	800467c <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80040ec:	4603      	mov	r3, r0
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fac8 	bl	8004696 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8004106:	4603      	mov	r3, r0
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4618      	mov	r0, r3
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x18>
 8004136:	2140      	movs	r1, #64	@ 0x40
 8004138:	4618      	mov	r0, r3
 800413a:	f009 fd14 	bl	800db66 <_ZdlPvj>
      }
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf14      	ite	ne
 8004154:	2301      	movne	r3, #1
 8004156:	2300      	moveq	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800417c:	b590      	push	{r4, r7, lr}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004186:	6838      	ldr	r0, [r7, #0]
 8004188:	f7ff ffed 	bl	8004166 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 800418c:	4603      	mov	r3, r0
 800418e:	4622      	mov	r2, r4
 8004190:	4619      	mov	r1, r3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fa8c 	bl	80046b0 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bd90      	pop	{r4, r7, pc}

080041a0 <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fa99 	bl	80046e0 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80041ae:	4603      	mov	r3, r0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 faa5 	bl	8004700 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
      }
 80041ba:	4610      	mov	r0, r2
 80041bc:	4619      	mov	r1, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d109      	bne.n	80041ec <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80041d8:	68b8      	ldr	r0, [r7, #8]
 80041da:	f000 fa81 	bl	80046e0 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80041de:	4604      	mov	r4, r0
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 faa0 	bl	8004726 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 80041e6:	4603      	mov	r3, r0
 80041e8:	601c      	str	r4, [r3, #0]
	    break;
 80041ea:	e005      	b.n	80041f8 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 faa4 	bl	8004740 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 80041f8:	2300      	movs	r3, #0
      }
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd90      	pop	{r4, r7, pc}

08004202 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf14      	ite	ne
 8004210:	2301      	movne	r3, #1
 8004212:	2300      	moveq	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8004238:	b590      	push	{r4, r7, lr}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004242:	6838      	ldr	r0, [r7, #0]
 8004244:	f7ff ffed 	bl	8004222 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004248:	4603      	mov	r3, r0
 800424a:	4622      	mov	r2, r4
 800424c:	4619      	mov	r1, r3
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fab0 	bl	80047b4 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	bd90      	pop	{r4, r7, pc}

0800425c <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fabd 	bl	80047e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800426a:	4603      	mov	r3, r0
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fac9 	bl	8004804 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8004272:	bf00      	nop
      }
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800427a:	b590      	push	{r4, r7, lr}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	4613      	mov	r3, r2
 8004286:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d109      	bne.n	80042a2 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800428e:	68b8      	ldr	r0, [r7, #8]
 8004290:	f000 faa8 	bl	80047e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8004294:	4604      	mov	r4, r0
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fac4 	bl	8004824 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 800429c:	4603      	mov	r3, r0
 800429e:	601c      	str	r4, [r3, #0]
	    break;
 80042a0:	e005      	b.n	80042ae <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	461a      	mov	r2, r3
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fac7 	bl	800483c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 80042ae:	2300      	movs	r3, #0
      }
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd90      	pop	{r4, r7, pc}

080042b8 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	4611      	mov	r1, r2
 80042c4:	461a      	mov	r2, r3
 80042c6:	460b      	mov	r3, r1
 80042c8:	80fb      	strh	r3, [r7, #6]
 80042ca:	4613      	mov	r3, r2
 80042cc:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface) {
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff fdf5 	bl	8003ec0 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80042d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004310 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x58>)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3308      	adds	r3, #8
 80042e0:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f00a fd11 	bl	800ed0e <memset>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fa7f 	bl	80037f8 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80042fa:	797a      	ldrb	r2, [r7, #5]
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	4619      	mov	r1, r3
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fad5 	bl	80048b0 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	08012d70 	.word	0x08012d70

08004314 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fae5 	bl	80048ec <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8004322:	4603      	mov	r3, r0
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <_ZNK15CyphalInterface11send_cyphalI5StateEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>:
inline void CyphalInterface::send_cyphal(
 800432c:	b5b0      	push	{r4, r5, r7, lr}
 800432e:	b08c      	sub	sp, #48	@ 0x30
 8004330:	af04      	add	r7, sp, #16
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 800433a:	2340      	movs	r3, #64	@ 0x40
 800433c:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 800433e:	f107 031c 	add.w	r3, r7, #28
 8004342:	461a      	mov	r2, r3
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	68b8      	ldr	r0, [r7, #8]
 8004348:	f7ff f961 	bl	800360e <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_>
 800434c:	4603      	mov	r3, r0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	09db      	lsrs	r3, r3, #7
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <_ZNK15CyphalInterface11send_cyphalI5StateEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x38>
        utilities.error_handler();
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	3310      	adds	r3, #16
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fad0 	bl	8004904 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8004364:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004368:	753b      	strb	r3, [r7, #20]
 800436a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800436e:	757b      	strb	r3, [r7, #21]
 8004370:	887b      	ldrh	r3, [r7, #2]
 8004372:	82fb      	strh	r3, [r7, #22]
 8004374:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004378:	763b      	strb	r3, [r7, #24]
 800437a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + DEFAULT_TIMEOUT_MICROS,
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fad3 	bl	8004930 <_ZNKSt8functionIFyvEEclEv>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
    push(
 800438e:	490d      	ldr	r1, [pc, #52]	@ (80043c4 <_ZNK15CyphalInterface11send_cyphalI5StateEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x98>)
 8004390:	1854      	adds	r4, r2, r1
 8004392:	f143 0500 	adc.w	r5, r3, #0
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	9202      	str	r2, [sp, #8]
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	f107 0314 	add.w	r3, r7, #20
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	4622      	mov	r2, r4
 80043a6:	462b      	mov	r3, r5
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f006 fdd5 	bl	800af58 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	701a      	strb	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	3720      	adds	r7, #32
 80043be:	46bd      	mov	sp, r7
 80043c0:	bdb0      	pop	{r4, r5, r7, pc}
 80043c2:	bf00      	nop
 80043c4:	000f4240 	.word	0x000f4240

080043c8 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>:
inline void CyphalInterface::send_cyphal(
 80043c8:	b5b0      	push	{r4, r5, r7, lr}
 80043ca:	b08c      	sub	sp, #48	@ 0x30
 80043cc:	af04      	add	r7, sp, #16
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80043d6:	2307      	movs	r3, #7
 80043d8:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 80043da:	f107 031c 	add.w	r3, r7, #28
 80043de:	461a      	mov	r2, r3
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	68b8      	ldr	r0, [r7, #8]
 80043e4:	f7fe fc64 	bl	8002cb0 <uavcan_node_Heartbeat_1_0_serialize_>
 80043e8:	4603      	mov	r3, r0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	09db      	lsrs	r3, r3, #7
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x38>
        utilities.error_handler();
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	3310      	adds	r3, #16
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fa82 	bl	8004904 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8004400:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004404:	753b      	strb	r3, [r7, #20]
 8004406:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800440a:	757b      	strb	r3, [r7, #21]
 800440c:	887b      	ldrh	r3, [r7, #2]
 800440e:	82fb      	strh	r3, [r7, #22]
 8004410:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004414:	763b      	strb	r3, [r7, #24]
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + DEFAULT_TIMEOUT_MICROS,
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fa85 	bl	8004930 <_ZNKSt8functionIFyvEEclEv>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
    push(
 800442a:	490d      	ldr	r1, [pc, #52]	@ (8004460 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x98>)
 800442c:	1854      	adds	r4, r2, r1
 800442e:	f143 0500 	adc.w	r5, r3, #0
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	9202      	str	r2, [sp, #8]
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	f107 0314 	add.w	r3, r7, #20
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	4622      	mov	r2, r4
 8004442:	462b      	mov	r3, r5
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f006 fd87 	bl	800af58 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 800444a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	3301      	adds	r3, #1
 8004450:	b2da      	uxtb	r2, r3
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	701a      	strb	r2, [r3, #0]
}
 8004456:	bf00      	nop
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bdb0      	pop	{r4, r5, r7, pc}
 800445e:	bf00      	nop
 8004460:	000f4240 	.word	0x000f4240

08004464 <_ZN5G4CAN6createI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create(
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b089      	sub	sp, #36	@ 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem), args..., utilities);
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4619      	mov	r1, r3
 800447e:	2008      	movs	r0, #8
 8004480:	f7fe f80c 	bl	800249c <_ZnwjPv>
 8004484:	4604      	mov	r4, r0
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004492:	4619      	mov	r1, r3
 8004494:	4620      	mov	r0, r4
 8004496:	f7fe f967 	bl	8002768 <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 800449a:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	3308      	adds	r3, #8
 80044a0:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len / 2, utilities);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	4619      	mov	r1, r3
 80044a6:	2044      	movs	r0, #68	@ 0x44
 80044a8:	f7fd fff8 	bl	800249c <_ZnwjPv>
 80044ac:	4604      	mov	r4, r0
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	085a      	lsrs	r2, r3, #1
 80044b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7fe f93a 	bl	8002730 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 80044bc:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	79fa      	ldrb	r2, [r7, #7]
 80044c2:	69b9      	ldr	r1, [r7, #24]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fa4d 	bl	8004964 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	601a      	str	r2, [r3, #0]
        return ptr;
 80044d4:	693b      	ldr	r3, [r7, #16]
    }
 80044d6:	4618      	mov	r0, r3
 80044d8:	3724      	adds	r7, #36	@ 0x24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd90      	pop	{r4, r7, pc}

080044de <_ZNSt15__uniq_ptr_dataI5G4CANSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	4611      	mov	r1, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fa7c 	bl	80049ec <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EEC1EPS0_>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6839      	ldr	r1, [r7, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff ffe6 	bl	80044de <_ZNSt15__uniq_ptr_dataI5G4CANSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fa74 	bl	8004a14 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 800452c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00c      	beq.n	8004550 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa79 	bl	8004a2e <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>
 800453c:	4604      	mov	r4, r0
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fa82 	bl	8004a48 <_ZSt4moveIRP5G4CANEONSt16remove_referenceIT_E4typeEOS4_>
 8004544:	4603      	mov	r3, r0
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4619      	mov	r1, r3
 800454a:	4620      	mov	r0, r4
 800454c:	f000 fa87 	bl	8004a5e <_ZNKSt14default_deleteI5G4CANEclEPS0_>
	__ptr = pointer();
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
      }
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4618      	mov	r0, r3
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	bd90      	pop	{r4, r7, pc}

08004560 <_ZSt4moveIRSt10unique_ptrI5G4CANSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEaSI5G4CANS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 8004580:	6838      	ldr	r0, [r7, #0]
 8004582:	f000 fa90 	bl	8004aa6 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE7releaseEv>
 8004586:	4603      	mov	r3, r0
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fa77 	bl	8004a7e <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8004590:	6838      	ldr	r0, [r7, #0]
 8004592:	f000 fa4c 	bl	8004a2e <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>
 8004596:	4603      	mov	r3, r0
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fa91 	bl	8004ac0 <_ZSt7forwardISt14default_deleteI5G4CANEEOT_RNSt16remove_referenceIS3_E4typeE>
 800459e:	4602      	mov	r2, r0
 80045a0:	f107 030c 	add.w	r3, r7, #12
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fa95 	bl	8004ad6 <_ZNSt14default_deleteI19AbstractCANProviderEC1I5G4CANvEERKS_IT_E>
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fda2 	bl	80040f6 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 80045b2:	687b      	ldr	r3, [r7, #4]
	}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 80045bc:	b590      	push	{r4, r7, lr}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4622      	mov	r2, r4
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fa8a 	bl	8004aee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa95 	bl	8004b0c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd90      	pop	{r4, r7, pc}

080045ec <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 800460c:	6838      	ldr	r0, [r7, #0]
 800460e:	f000 fa88 	bl	8004b22 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8004612:	4602      	mov	r2, r0
 8004614:	f107 0308 	add.w	r3, r7, #8
 8004618:	4611      	mov	r1, r2
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fa8c 	bl	8004b38 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8004620:	f107 0308 	add.w	r3, r7, #8
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 faa4 	bl	8004b74 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 800462c:	f107 0308 	add.w	r3, r7, #8
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff f898 	bl	8003766 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8004636:	687b      	ldr	r3, [r7, #4]
      }
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 faa9 	bl	8004ba2 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8004650:	4603      	mov	r3, r0
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 faa9 	bl	8004bbc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fab1 	bl	8004bd4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fab2 	bl	8004bf0 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800468c:	4603      	mov	r3, r0
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fab1 	bl	8004c08 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80046a6:	4603      	mov	r3, r0
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7fd ff38 	bl	8002532 <_ZNSt9_Any_data9_M_accessEv>
 80046c2:	4603      	mov	r3, r0
 80046c4:	4619      	mov	r1, r3
 80046c6:	2004      	movs	r0, #4
 80046c8:	f7fd fee8 	bl	800249c <_ZnwjPv>
 80046cc:	4604      	mov	r4, r0
 80046ce:	68b8      	ldr	r0, [r7, #8]
 80046d0:	f7ff fd49 	bl	8004166 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80046d4:	4603      	mov	r3, r0
 80046d6:	6023      	str	r3, [r4, #0]
	  }
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd90      	pop	{r4, r7, pc}

080046e0 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fa99 	bl	8004c20 <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 80046ee:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 faa1 	bl	8004c38 <_ZSt11__addressofIKPFyvEEPT_RS3_>
 80046f6:	4603      	mov	r3, r0
	}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004700:	b590      	push	{r4, r7, lr}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 faa0 	bl	8004c4e <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800470e:	4603      	mov	r3, r0
 8004710:	4619      	mov	r1, r3
 8004712:	4620      	mov	r0, r4
 8004714:	f000 faa6 	bl	8004c64 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	bd90      	pop	{r4, r7, pc}

08004726 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access() noexcept
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fd feff 	bl	8002532 <_ZNSt9_Any_data9_M_accessEv>
 8004734:	4603      	mov	r3, r0
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	4613      	mov	r3, r2
 800474c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	2b03      	cmp	r3, #3
 8004752:	d82a      	bhi.n	80047aa <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8004754:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	0800476d 	.word	0x0800476d
 8004760:	0800477b 	.word	0x0800477b
 8004764:	0800478f 	.word	0x0800478f
 8004768:	080047a1 	.word	0x080047a1
	      __dest._M_access<const type_info*>() = nullptr;
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fa8b 	bl	8004c88 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8004772:	4603      	mov	r3, r0
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
	      break;
 8004778:	e017      	b.n	80047aa <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800477a:	68b8      	ldr	r0, [r7, #8]
 800477c:	f7ff ffb0 	bl	80046e0 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8004780:	4604      	mov	r4, r0
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff ffcf 	bl	8004726 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8004788:	4603      	mov	r3, r0
 800478a:	601c      	str	r4, [r3, #0]
	      break;
 800478c:	e00d      	b.n	80047aa <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800478e:	68b8      	ldr	r0, [r7, #8]
 8004790:	f7ff ffa6 	bl	80046e0 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8004794:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8004796:	4619      	mov	r1, r3
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fa81 	bl	8004ca0 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800479e:	e004      	b.n	80047aa <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80047a0:	4621      	mov	r1, r4
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fa8e 	bl	8004cc4 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80047a8:	bf00      	nop
	  return false;
 80047aa:	2300      	movs	r3, #0
	}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd90      	pop	{r4, r7, pc}

080047b4 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f7fd feb6 	bl	8002532 <_ZNSt9_Any_data9_M_accessEv>
 80047c6:	4603      	mov	r3, r0
 80047c8:	4619      	mov	r1, r3
 80047ca:	2004      	movs	r0, #4
 80047cc:	f7fd fe66 	bl	800249c <_ZnwjPv>
 80047d0:	4604      	mov	r4, r0
 80047d2:	68b8      	ldr	r0, [r7, #8]
 80047d4:	f7ff fd25 	bl	8004222 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80047d8:	4603      	mov	r3, r0
 80047da:	6023      	str	r3, [r4, #0]
	  }
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd90      	pop	{r4, r7, pc}

080047e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fa75 	bl	8004cdc <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 80047f2:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fa7d 	bl	8004cf4 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 80047fa:	4603      	mov	r3, r0
	}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fa7c 	bl	8004d0a <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004812:	4603      	mov	r3, r0
 8004814:	4619      	mov	r1, r3
 8004816:	4620      	mov	r0, r4
 8004818:	f000 fa82 	bl	8004d20 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bd90      	pop	{r4, r7, pc}

08004824 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access() noexcept
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fd fe80 	bl	8002532 <_ZNSt9_Any_data9_M_accessEv>
 8004832:	4603      	mov	r3, r0
 8004834:	4618      	mov	r0, r3
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	4613      	mov	r3, r2
 8004848:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d82a      	bhi.n	80048a6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8004850:	a201      	add	r2, pc, #4	@ (adr r2, 8004858 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8004852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004856:	bf00      	nop
 8004858:	08004869 	.word	0x08004869
 800485c:	08004877 	.word	0x08004877
 8004860:	0800488b 	.word	0x0800488b
 8004864:	0800489d 	.word	0x0800489d
	      __dest._M_access<const type_info*>() = nullptr;
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fa0d 	bl	8004c88 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800486e:	4603      	mov	r3, r0
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
	      break;
 8004874:	e017      	b.n	80048a6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004876:	68b8      	ldr	r0, [r7, #8]
 8004878:	f7ff ffb4 	bl	80047e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800487c:	4604      	mov	r4, r0
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff ffd0 	bl	8004824 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8004884:	4603      	mov	r3, r0
 8004886:	601c      	str	r4, [r3, #0]
	      break;
 8004888:	e00d      	b.n	80048a6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800488a:	68b8      	ldr	r0, [r7, #8]
 800488c:	f7ff ffaa 	bl	80047e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8004890:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8004892:	4619      	mov	r1, r3
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 fa52 	bl	8004d3e <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800489a:	e004      	b.n	80048a6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800489c:	4621      	mov	r1, r4
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fa5f 	bl	8004d62 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80048a4:	bf00      	nop
	  return false;
 80048a6:	2300      	movs	r3, #0
	}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd90      	pop	{r4, r7, pc}

080048b0 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
 80048bc:	4613      	mov	r3, r2
 80048be:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fb07 	bl	8003ee0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3308      	adds	r3, #8
 80048d6:	787a      	ldrb	r2, [r7, #1]
 80048d8:	8879      	ldrh	r1, [r7, #2]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	220c      	movs	r2, #12
 80048e0:	f006 fb74 	bl	800afcc <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4618      	mov	r0, r3
 8004910:	f7fd fe38 	bl	8002584 <_ZNKSt14_Function_base8_M_emptyEv>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 800491a:	f009 f937 	bl	800db8c <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4610      	mov	r0, r2
 8004926:	4798      	blx	r3
 8004928:	bf00      	nop
      }
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4618      	mov	r0, r3
 800493c:	f7fd fe22 	bl	8002584 <_ZNKSt14_Function_base8_M_emptyEv>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 8004946:	f009 f921 	bl	800db8c <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	4610      	mov	r0, r2
 8004952:	4798      	blx	r3
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
      }
 8004958:	4610      	mov	r0, r2
 800495a:	4619      	mov	r1, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8004964:	b5b0      	push	{r4, r5, r7, lr}
 8004966:	b08e      	sub	sp, #56	@ 0x38
 8004968:	af00      	add	r7, sp, #0
 800496a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800496c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800496e:	4613      	mov	r3, r2
 8004970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8004974:	481a      	ldr	r0, [pc, #104]	@ (80049e0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8004976:	f7ff f991 	bl	8003c9c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 8004980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004984:	3310      	adds	r3, #16
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff ffbc 	bl	8004904 <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 800498c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004990:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fa01 	bl	8004d9a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8004998:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800499c:	4619      	mov	r1, r3
 800499e:	4810      	ldr	r0, [pc, #64]	@ (80049e0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 80049a0:	f000 fa2c 	bl	8004dfc <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 80049a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fa05 	bl	8004db8 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 80049ae:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 80049b0:	463b      	mov	r3, r7
 80049b2:	4a0c      	ldr	r2, [pc, #48]	@ (80049e4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 80049b4:	490c      	ldr	r1, [pc, #48]	@ (80049e8 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 80049b6:	4618      	mov	r0, r3
 80049b8:	f008 fdd2 	bl	800d560 <canardInit>
 80049bc:	3420      	adds	r4, #32
 80049be:	463d      	mov	r5, r7
 80049c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 80049cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ce:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80049d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 80049d6:	bf00      	nop
 80049d8:	3738      	adds	r7, #56	@ 0x38
 80049da:	46bd      	mov	sp, r7
 80049dc:	bdb0      	pop	{r4, r5, r7, pc}
 80049de:	bf00      	nop
 80049e0:	200005b0 	.word	0x200005b0
 80049e4:	08002679 	.word	0x08002679
 80049e8:	08002635 	.word	0x08002635

080049ec <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fa22 	bl	8004e42 <_ZNSt5tupleIJP5G4CANSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80049fe:	683c      	ldr	r4, [r7, #0]
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f807 	bl	8004a14 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8004a06:	4603      	mov	r3, r0
 8004a08:	601c      	str	r4, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd90      	pop	{r4, r7, pc}

08004a14 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fa1c 	bl	8004e5c <_ZSt3getILj0EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004a24:	4603      	mov	r3, r0
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fa1c 	bl	8004e76 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE10_M_deleterEv>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <_ZSt4moveIRP5G4CANEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4618      	mov	r0, r3
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <_ZNKSt14default_deleteI5G4CANEclEPS0_>:
      operator()(_Tp* __ptr) const
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <_ZNKSt14default_deleteI5G4CANEclEPS0_+0x18>
 8004a6e:	2144      	movs	r1, #68	@ 0x44
 8004a70:	4618      	mov	r0, r3
 8004a72:	f009 f878 	bl	800db66 <_ZdlPvj>
      }
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>:
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      _GLIBCXX23_CONSTEXPR
      void
      reset(pointer __p = pointer()) noexcept
 8004a7e:	b590      	push	{r4, r7, lr}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8004a88:	687c      	ldr	r4, [r7, #4]
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fb3f 	bl	8004110 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8004a92:	4603      	mov	r3, r0
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4619      	mov	r1, r3
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f000 f9f9 	bl	8004e90 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>
      }
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd90      	pop	{r4, r7, pc}

08004aa6 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fa0d 	bl	8004ed0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE7releaseEv>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <_ZSt7forwardISt14default_deleteI5G4CANEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4618      	mov	r0, r3
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <_ZNSt14default_deleteI19AbstractCANProviderEC1I5G4CANvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fa0a 	bl	8004f16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
	{ }
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fe17 	bl	8003782 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	1d1a      	adds	r2, r3, #4
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f000 f9f1 	bl	8004f46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
      }
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 f9f3 	bl	8004f70 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	1d1a      	adds	r2, r3, #4
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	3304      	adds	r3, #4
 8004b92:	4619      	mov	r1, r3
 8004b94:	4610      	mov	r0, r2
 8004b96:	f000 f9d6 	bl	8004f46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f9fe 	bl	8004fae <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f9fe 	bl	8004fc6 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f9ef 	bl	8004fdc <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f9f0 	bl	8004ff6 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004c16:	4603      	mov	r3, r0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const noexcept
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fd fc8d 	bl	8002548 <_ZNKSt9_Any_data9_M_accessEv>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	7138      	strb	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004c6e:	6838      	ldr	r0, [r7, #0]
 8004c70:	f7ff ffed 	bl	8004c4e <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004c74:	4603      	mov	r3, r0
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4798      	blx	r3
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4610      	mov	r0, r2
 8004c80:	4619      	mov	r1, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fd fc4e 	bl	8002532 <_ZNSt9_Any_data9_M_accessEv>
 8004c96:	4603      	mov	r3, r0
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004caa:	6838      	ldr	r0, [r7, #0]
 8004cac:	f000 f9af 	bl	800500e <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f9b4 	bl	8005024 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd90      	pop	{r4, r7, pc}

08004cc4 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f9c1 	bl	8005056 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const noexcept
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7fd fc2f 	bl	8002548 <_ZNKSt9_Any_data9_M_accessEv>
 8004cea:	4603      	mov	r3, r0
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	7138      	strb	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004d2a:	6838      	ldr	r0, [r7, #0]
 8004d2c:	f7ff ffed 	bl	8004d0a <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004d30:	4603      	mov	r3, r0
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4798      	blx	r3
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8004d3e:	b590      	push	{r4, r7, lr}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004d48:	6838      	ldr	r0, [r7, #0]
 8004d4a:	f000 f990 	bl	800506e <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4622      	mov	r2, r4
 8004d52:	4619      	mov	r1, r3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f995 	bl	8005084 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd90      	pop	{r4, r7, pc}

08004d62 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f9a2 	bl	80050b6 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8004d72:	bf00      	nop
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f99f 	bl	80050ce <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6839      	ldr	r1, [r7, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff ffe6 	bl	8004d7a <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f997 	bl	80050f6 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8004dc8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00c      	beq.n	8004dec <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f99c 	bl	8005110 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8004dd8:	4604      	mov	r4, r0
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f9a5 	bl	800512a <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8004de0:	4603      	mov	r3, r0
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4619      	mov	r1, r3
 8004de6:	4620      	mov	r0, r4
 8004de8:	f000 f9aa 	bl	8005140 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
      }
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd90      	pop	{r4, r7, pc}

08004dfc <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 8004e06:	6838      	ldr	r0, [r7, #0]
 8004e08:	f000 f9bf 	bl	800518a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f9a6 	bl	8005162 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8004e16:	6838      	ldr	r0, [r7, #0]
 8004e18:	f000 f97a 	bl	8005110 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f9cd 	bl	80051be <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004e24:	4602      	mov	r2, r0
 8004e26:	f107 030c 	add.w	r3, r7, #12
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 f9d1 	bl	80051d4 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f9b6 	bl	80051a4 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8004e38:	687b      	ldr	r3, [r7, #4]
	}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <_ZNSt5tupleIJP5G4CANSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b082      	sub	sp, #8
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 f9cd 	bl	80051ec <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEEC1Ev>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <_ZSt3getILj0EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 f9d0 	bl	800520c <_ZSt12__get_helperILj0EP5G4CANJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b082      	sub	sp, #8
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 f9cf 	bl	8005224 <_ZSt3getILj1EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004e86:	4603      	mov	r3, r0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff f91e 	bl	80040dc <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8004ea6:	683c      	ldr	r4, [r7, #0]
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff f917 	bl	80040dc <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff fbec 	bl	8004696 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	68f9      	ldr	r1, [r7, #12]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff f92f 	bl	8004126 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
      }
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd90      	pop	{r4, r7, pc}

08004ed0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fd9b 	bl	8004a14 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff fd95 	bl	8004a14 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
	return __p;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
      }
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe ff0f 	bl	8003d2a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8004f16:	b590      	push	{r4, r7, lr}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	6039      	str	r1, [r7, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8004f26:	2010      	movs	r0, #16
 8004f28:	f008 fe1f 	bl	800db6a <_Znwj>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	461c      	mov	r4, r3
 8004f30:	6839      	ldr	r1, [r7, #0]
 8004f32:	4620      	mov	r0, r4
 8004f34:	f000 f982 	bl	800523c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	601c      	str	r4, [r3, #0]
	}
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}

08004f46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8004f46:	b480      	push	{r7}
 8004f48:	b085      	sub	sp, #20
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	601a      	str	r2, [r3, #0]
      }
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f974 	bl	8005268 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8004f80:	4603      	mov	r3, r0
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8004f86:	6838      	ldr	r0, [r7, #0]
 8004f88:	f000 f96e 	bl	8005268 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8004f94:	f107 030c 	add.w	r3, r7, #12
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 f965 	bl	8005268 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	601a      	str	r2, [r3, #0]
    }
 8004fa6:	bf00      	nop
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f961 	bl	800527e <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f956 	bl	8005298 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 8004fec:	4603      	mov	r3, r0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f955 	bl	80052ae <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 8005004:	4603      	mov	r3, r0
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8005024:	b590      	push	{r4, r7, lr}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7fd fa7e 	bl	8002532 <_ZNSt9_Any_data9_M_accessEv>
 8005036:	4603      	mov	r3, r0
 8005038:	4619      	mov	r1, r3
 800503a:	2004      	movs	r0, #4
 800503c:	f7fd fa2e 	bl	800249c <_ZnwjPv>
 8005040:	4604      	mov	r4, r0
 8005042:	68b8      	ldr	r0, [r7, #8]
 8005044:	f7ff ffe3 	bl	800500e <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005048:	4603      	mov	r3, r0
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6023      	str	r3, [r4, #0]
	  }
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	bd90      	pop	{r4, r7, pc}

08005056 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access() noexcept
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fd fa67 	bl	8002532 <_ZNSt9_Any_data9_M_accessEv>
 8005064:	4603      	mov	r3, r0
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7fd fa4e 	bl	8002532 <_ZNSt9_Any_data9_M_accessEv>
 8005096:	4603      	mov	r3, r0
 8005098:	4619      	mov	r1, r3
 800509a:	2004      	movs	r0, #4
 800509c:	f7fd f9fe 	bl	800249c <_ZnwjPv>
 80050a0:	4604      	mov	r4, r0
 80050a2:	68b8      	ldr	r0, [r7, #8]
 80050a4:	f7ff ffe3 	bl	800506e <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80050a8:	4603      	mov	r3, r0
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6023      	str	r3, [r4, #0]
	  }
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd90      	pop	{r4, r7, pc}

080050b6 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access() noexcept
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fd fa37 	bl	8002532 <_ZNSt9_Any_data9_M_accessEv>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80050ce:	b590      	push	{r4, r7, lr}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	6039      	str	r1, [r7, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f8f3 	bl	80052c6 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80050e0:	683c      	ldr	r4, [r7, #0]
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f807 	bl	80050f6 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80050e8:	4603      	mov	r3, r0
 80050ea:	601c      	str	r4, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd90      	pop	{r4, r7, pc}

080050f6 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4618      	mov	r0, r3
 8005102:	f000 f8ed 	bl	80052e0 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8005106:	4603      	mov	r3, r0
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 f8ed 	bl	80052fa <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8005120:	4603      	mov	r3, r0
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d004      	beq.n	800515a <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	320c      	adds	r2, #12
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	4790      	blx	r2
      }
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      reset(pointer __p = pointer()) noexcept
 8005162:	b590      	push	{r4, r7, lr}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
	_M_t.reset(std::move(__p));
 800516c:	687c      	ldr	r4, [r7, #4]
 800516e:	463b      	mov	r3, r7
 8005170:	4618      	mov	r0, r3
 8005172:	f000 f8cf 	bl	8005314 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8005176:	4603      	mov	r3, r0
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4619      	mov	r1, r3
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f8d4 	bl	800532a <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	bd90      	pop	{r4, r7, pc}

0800518a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 f8e8 	bl	800536a <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 800519a:	4603      	mov	r3, r0
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 f8f0 	bl	8005394 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f8da 	bl	80053ae <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEEC1Ev>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 f8e2 	bl	80053c6 <_ZNSt10_Head_baseILj0EP5G4CANLb0EEC1Ev>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <_ZSt12__get_helperILj0EP5G4CANJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f8e4 	bl	80053e2 <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEE7_M_headERS4_>
 800521a:	4603      	mov	r3, r0
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <_ZSt3getILj1EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f8e5 	bl	80053fc <_ZSt12__get_helperILj1ESt14default_deleteI5G4CANEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8005232:	4603      	mov	r3, r0
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4618      	mov	r0, r3
 800524a:	f000 f8e3 	bl	8005414 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800524e:	4a05      	ldr	r2, [pc, #20]	@ (8005264 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	60da      	str	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	08012d44 	.word	0x08012d44

08005268 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4618      	mov	r0, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 f8d9 	bl	8005440 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 800528e:	4603      	mov	r3, r0
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4618      	mov	r0, r3
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f8cd 	bl	8005456 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 80052bc:	4603      	mov	r3, r0
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 f8cb 	bl	800546c <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f8ce 	bl	800548c <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80052f0:	4603      	mov	r3, r0
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f8cd 	bl	80054a4 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800530a:	4603      	mov	r3, r0
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800532a:	b590      	push	{r4, r7, lr}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f8c1 	bl	80054bc <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800533a:	4603      	mov	r3, r0
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8005340:	683c      	ldr	r4, [r7, #0]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f8ba 	bl	80054bc <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8005348:	4603      	mov	r3, r0
 800534a:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f81e 	bl	8005394 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8005358:	4603      	mov	r3, r0
 800535a:	68f9      	ldr	r1, [r7, #12]
 800535c:	4618      	mov	r0, r3
 800535e:	f000 f8ba 	bl	80054d6 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	bd90      	pop	{r4, r7, pc}

0800536a <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800536a:	b580      	push	{r7, lr}
 800536c:	b084      	sub	sp, #16
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7ff febf 	bl	80050f6 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8005378:	4603      	mov	r3, r0
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff feb9 	bl	80050f6 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8005384:	4603      	mov	r3, r0
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
	return __p;
 800538a:	68fb      	ldr	r3, [r7, #12]
      }
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f8aa 	bl	80054f8 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80053a4:	4603      	mov	r3, r0
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEEC1Ev>:
      _Tuple_impl()
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f8aa 	bl	8005510 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EEC1Ev>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <_ZNSt10_Head_baseILj0EP5G4CANLb0EEC1Ev>:
      constexpr _Head_base()
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f89a 	bl	8005526 <_ZNSt10_Head_baseILj0EP5G4CANLb0EE7_M_headERS2_>
 80053f2:	4603      	mov	r3, r0
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <_ZSt12__get_helperILj1ESt14default_deleteI5G4CANEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f899 	bl	800553c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEE7_M_headERS3_>
 800540a:	4603      	mov	r3, r0
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800541c:	4a07      	ldr	r2, [pc, #28]	@ (800543c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	605a      	str	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	609a      	str	r2, [r3, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	08012dc0 	.word	0x08012dc0

08005440 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f86d 	bl	8005554 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4618      	mov	r0, r3
 800547e:	f000 f875 	bl	800556c <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f877 	bl	8005588 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 800549a:	4603      	mov	r3, r0
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f878 	bl	80055a2 <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f877 	bl	80055ba <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80054cc:	4603      	mov	r3, r0
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	320c      	adds	r2, #12
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	4790      	blx	r2
      }
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f867 	bl	80055d4 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8005506:	4603      	mov	r3, r0
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EEC1Ev>:
      constexpr _Head_base()
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <_ZNSt10_Head_baseILj0EP5G4CANLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4618      	mov	r0, r3
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f851 	bl	80055ec <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EE7_M_headERS3_>
 800554a:	4603      	mov	r3, r0
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f850 	bl	8005602 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4618      	mov	r0, r3
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f840 	bl	8005618 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 8005598:	4603      	mov	r3, r0
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f83f 	bl	800562e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 80055b0:	4603      	mov	r3, r0
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 f83e 	bl	8005646 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80055ca:	4603      	mov	r3, r0
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f83e 	bl	800565e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 80055e2:	4603      	mov	r3, r0
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4618      	mov	r0, r3
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4618      	mov	r0, r3
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800562e:	b580      	push	{r7, lr}
 8005630:	b082      	sub	sp, #8
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f81d 	bl	8005676 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 800563c:	4603      	mov	r3, r0
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f81c 	bl	800568c <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8005654:	4603      	mov	r3, r0
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f81d 	bl	80056a6 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 800566c:	4603      	mov	r3, r0
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f810 	bl	80056bc <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 800569c:	4603      	mov	r3, r0
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4618      	mov	r0, r3
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	4a05      	ldr	r2, [pc, #20]	@ (80056f4 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fe fc9f 	bl	8004028 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	08012d44 	.word	0x08012d44

080056f8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff ffe7 	bl	80056d4 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005706:	2110      	movs	r1, #16
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f008 fa2c 	bl	800db66 <_ZdlPvj>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3310      	adds	r3, #16
 8005724:	4618      	mov	r0, r3
 8005726:	f7fc ff4b 	bl	80025c0 <_ZNSt8functionIFvvEED1Ev>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4618      	mov	r0, r3
 800572e:	f7fc ff3a 	bl	80025a6 <_ZNSt8functionIFyvEED1Ev>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <_Z41__static_initialization_and_destruction_0ii>:

}
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	@ 0x28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d122      	bne.n	8005792 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005752:	4293      	cmp	r3, r2
 8005754:	d11d      	bne.n	8005792 <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 8005756:	f107 0308 	add.w	r3, r7, #8
 800575a:	4917      	ldr	r1, [pc, #92]	@ (80057b8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fb19 	bl	8003d94 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 8005762:	f107 0318 	add.w	r3, r7, #24
 8005766:	4915      	ldr	r1, [pc, #84]	@ (80057bc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005768:	4618      	mov	r0, r3
 800576a:	f7fe fb43 	bl	8003df4 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 800576e:	f107 0218 	add.w	r2, r7, #24
 8005772:	f107 0308 	add.w	r3, r7, #8
 8005776:	4619      	mov	r1, r3
 8005778:	4811      	ldr	r0, [pc, #68]	@ (80057c0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800577a:	f7fc ff2e 	bl	80025da <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 800577e:	f107 0318 	add.w	r3, r7, #24
 8005782:	4618      	mov	r0, r3
 8005784:	f7fc ff1c 	bl	80025c0 <_ZNSt8functionIFvvEED1Ev>
 8005788:	f107 0308 	add.w	r3, r7, #8
 800578c:	4618      	mov	r0, r3
 800578e:	f7fc ff0a 	bl	80025a6 <_ZNSt8functionIFyvEED1Ev>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <_Z41__static_initialization_and_destruction_0ii+0x72>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800579e:	4293      	cmp	r3, r2
 80057a0:	d105      	bne.n	80057ae <_Z41__static_initialization_and_destruction_0ii+0x72>
 80057a2:	4807      	ldr	r0, [pc, #28]	@ (80057c0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80057a4:	f7ff ffb8 	bl	8005718 <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 80057a8:	4806      	ldr	r0, [pc, #24]	@ (80057c4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80057aa:	f7fe f835 	bl	8003818 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 80057ae:	bf00      	nop
 80057b0:	3728      	adds	r7, #40	@ 0x28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	080037ab 	.word	0x080037ab
 80057bc:	0800379f 	.word	0x0800379f
 80057c0:	20000418 	.word	0x20000418
 80057c4:	20000410 	.word	0x20000410

080057c8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80057c8:	b590      	push	{r4, r7, lr}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68dc      	ldr	r4, [r3, #12]
 80057d4:	2c00      	cmp	r4, #0
 80057d6:	d006      	beq.n	80057e6 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 80057d8:	4620      	mov	r0, r4
 80057da:	f7ff fb8e 	bl	8004efa <_ZN15CyphalInterfaceD1Ev>
 80057de:	210c      	movs	r1, #12
 80057e0:	4620      	mov	r0, r4
 80057e2:	f008 f9c0 	bl	800db66 <_ZdlPvj>
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd90      	pop	{r4, r7, pc}

080057ee <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
      { delete this; }
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff ff7b 	bl	80056f8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8005814:	2300      	movs	r3, #0
 8005816:	4618      	mov	r0, r3
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:

    void accept(CanardRxTransfer* transfer) {
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
        Type object;
        interface->cyphal_deserialize_transfer<T>(&object, transfer);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe fb54 	bl	8003ee0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8005838:	f107 0308 	add.w	r3, r7, #8
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	4619      	mov	r1, r3
 8005840:	f000 f80d 	bl	800585e <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3304      	adds	r3, #4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f107 0108 	add.w	r1, r7, #8
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	4798      	blx	r3
    }
 8005856:	bf00      	nop
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
        buffer
    );
}

template <typename TypeAlias>
inline void CyphalInterface::cyphal_deserialize_transfer(
 800585e:	b580      	push	{r7, lr}
 8005860:	b086      	sub	sp, #24
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 800586a:	230c      	movs	r3, #12
 800586c:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj,(uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f107 0214 	add.w	r2, r7, #20
 8005876:	4619      	mov	r1, r3
 8005878:	68b8      	ldr	r0, [r7, #8]
 800587a:	f7fd faff 	bl	8002e7c <uavcan_node_Heartbeat_1_0_deserialize_>
 800587e:	4603      	mov	r3, r0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	09db      	lsrs	r3, r3, #7
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	3310      	adds	r3, #16
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff f837 	bl	8004904 <_ZNKSt8functionIFvvEEclEv>
    }
}
 8005896:	bf00      	nop
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <_GLOBAL__sub_I_buffer>:
 800589e:	b580      	push	{r7, lr}
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80058a6:	2001      	movs	r0, #1
 80058a8:	f7ff ff48 	bl	800573c <_Z41__static_initialization_and_destruction_0ii>
 80058ac:	bd80      	pop	{r7, pc}

080058ae <_GLOBAL__sub_D_buffer>:
 80058ae:	b580      	push	{r7, lr}
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80058b6:	2000      	movs	r0, #0
 80058b8:	f7ff ff40 	bl	800573c <_Z41__static_initialization_and_destruction_0ii>
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005904 <HAL_MspInit+0x44>)
 80058c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005904 <HAL_MspInit+0x44>)
 80058cc:	f043 0301 	orr.w	r3, r3, #1
 80058d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80058d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005904 <HAL_MspInit+0x44>)
 80058d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	607b      	str	r3, [r7, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058de:	4b09      	ldr	r3, [pc, #36]	@ (8005904 <HAL_MspInit+0x44>)
 80058e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e2:	4a08      	ldr	r2, [pc, #32]	@ (8005904 <HAL_MspInit+0x44>)
 80058e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80058ea:	4b06      	ldr	r3, [pc, #24]	@ (8005904 <HAL_MspInit+0x44>)
 80058ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80058f6:	f003 f929 	bl	8008b4c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40021000 	.word	0x40021000

08005908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800590c:	bf00      	nop
 800590e:	e7fd      	b.n	800590c <NMI_Handler+0x4>

08005910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005914:	bf00      	nop
 8005916:	e7fd      	b.n	8005914 <HardFault_Handler+0x4>

08005918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800591c:	bf00      	nop
 800591e:	e7fd      	b.n	800591c <MemManage_Handler+0x4>

08005920 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005924:	bf00      	nop
 8005926:	e7fd      	b.n	8005924 <BusFault_Handler+0x4>

08005928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800592c:	bf00      	nop
 800592e:	e7fd      	b.n	800592c <UsageFault_Handler+0x4>

08005930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800593e:	b480      	push	{r7}
 8005940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005942:	bf00      	nop
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005950:	bf00      	nop
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800595e:	f000 fa35 	bl	8005dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005962:	bf00      	nop
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 800596c:	4802      	ldr	r0, [pc, #8]	@ (8005978 <DMA1_Channel1_IRQHandler+0x10>)
 800596e:	f000 fce5 	bl	800633c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005972:	bf00      	nop
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	200002f8 	.word	0x200002f8

0800597c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8005980:	4802      	ldr	r0, [pc, #8]	@ (800598c <DMA1_Channel2_IRQHandler+0x10>)
 8005982:	f000 fcdb 	bl	800633c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005986:	bf00      	nop
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000358 	.word	0x20000358

08005990 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005994:	4802      	ldr	r0, [pc, #8]	@ (80059a0 <USART2_IRQHandler+0x10>)
 8005996:	f004 f8b5 	bl	8009b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800599a:	bf00      	nop
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	200004d8 	.word	0x200004d8

080059a4 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80059a8:	4802      	ldr	r0, [pc, #8]	@ (80059b4 <I2C4_EV_IRQHandler+0x10>)
 80059aa:	f001 feeb 	bl	8007784 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80059ae:	bf00      	nop
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	200002a4 	.word	0x200002a4

080059b8 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80059bc:	4802      	ldr	r0, [pc, #8]	@ (80059c8 <I2C4_ER_IRQHandler+0x10>)
 80059be:	f001 fefb 	bl	80077b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80059c2:	bf00      	nop
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	200002a4 	.word	0x200002a4

080059cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  return 1;
 80059d0:	2301      	movs	r3, #1
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <_kill>:

int _kill(int pid, int sig)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80059e6:	f009 fa4b 	bl	800ee80 <__errno>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2216      	movs	r2, #22
 80059ee:	601a      	str	r2, [r3, #0]
  return -1;
 80059f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <_exit>:

void _exit (int status)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005a04:	f04f 31ff 	mov.w	r1, #4294967295
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff ffe7 	bl	80059dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8005a0e:	bf00      	nop
 8005a10:	e7fd      	b.n	8005a0e <_exit+0x12>

08005a12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e00a      	b.n	8005a3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005a24:	f3af 8000 	nop.w
 8005a28:	4601      	mov	r1, r0
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	60ba      	str	r2, [r7, #8]
 8005a30:	b2ca      	uxtb	r2, r1
 8005a32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	3301      	adds	r3, #1
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	dbf0      	blt.n	8005a24 <_read+0x12>
  }

  return len;
 8005a42:	687b      	ldr	r3, [r7, #4]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e009      	b.n	8005a72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	60ba      	str	r2, [r7, #8]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	dbf1      	blt.n	8005a5e <_write+0x12>
  }
  return len;
 8005a7a:	687b      	ldr	r3, [r7, #4]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <_close>:

int _close(int file)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005aac:	605a      	str	r2, [r3, #4]
  return 0;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <_isatty>:

int _isatty(int file)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005ac4:	2301      	movs	r3, #1
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005af4:	4a14      	ldr	r2, [pc, #80]	@ (8005b48 <_sbrk+0x5c>)
 8005af6:	4b15      	ldr	r3, [pc, #84]	@ (8005b4c <_sbrk+0x60>)
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b00:	4b13      	ldr	r3, [pc, #76]	@ (8005b50 <_sbrk+0x64>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b08:	4b11      	ldr	r3, [pc, #68]	@ (8005b50 <_sbrk+0x64>)
 8005b0a:	4a12      	ldr	r2, [pc, #72]	@ (8005b54 <_sbrk+0x68>)
 8005b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b0e:	4b10      	ldr	r3, [pc, #64]	@ (8005b50 <_sbrk+0x64>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4413      	add	r3, r2
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d207      	bcs.n	8005b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b1c:	f009 f9b0 	bl	800ee80 <__errno>
 8005b20:	4603      	mov	r3, r0
 8005b22:	220c      	movs	r2, #12
 8005b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b26:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2a:	e009      	b.n	8005b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b2c:	4b08      	ldr	r3, [pc, #32]	@ (8005b50 <_sbrk+0x64>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b32:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <_sbrk+0x64>)
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	4a05      	ldr	r2, [pc, #20]	@ (8005b50 <_sbrk+0x64>)
 8005b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20020000 	.word	0x20020000
 8005b4c:	00000400 	.word	0x00000400
 8005b50:	200004d4 	.word	0x200004d4
 8005b54:	20000708 	.word	0x20000708

08005b58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005b5c:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <SystemInit+0x20>)
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b62:	4a05      	ldr	r2, [pc, #20]	@ (8005b78 <SystemInit+0x20>)
 8005b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b6c:	bf00      	nop
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	e000ed00 	.word	0xe000ed00

08005b7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b80:	4b22      	ldr	r3, [pc, #136]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005b82:	4a23      	ldr	r2, [pc, #140]	@ (8005c10 <MX_USART2_UART_Init+0x94>)
 8005b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005b86:	4b21      	ldr	r3, [pc, #132]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b94:	4b1d      	ldr	r3, [pc, #116]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005ba2:	220c      	movs	r2, #12
 8005ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ba6:	4b19      	ldr	r3, [pc, #100]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bac:	4b17      	ldr	r3, [pc, #92]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005bb2:	4b16      	ldr	r3, [pc, #88]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005bb8:	4b14      	ldr	r3, [pc, #80]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005bbe:	4b13      	ldr	r3, [pc, #76]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005bc4:	4811      	ldr	r0, [pc, #68]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005bc6:	f003 ff4d 	bl	8009a64 <HAL_UART_Init>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005bd0:	f7fc fc5e 	bl	8002490 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	480d      	ldr	r0, [pc, #52]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005bd8:	f005 f88b 	bl	800acf2 <HAL_UARTEx_SetTxFifoThreshold>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005be2:	f7fc fc55 	bl	8002490 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005be6:	2100      	movs	r1, #0
 8005be8:	4808      	ldr	r0, [pc, #32]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005bea:	f005 f8c0 	bl	800ad6e <HAL_UARTEx_SetRxFifoThreshold>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005bf4:	f7fc fc4c 	bl	8002490 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005bf8:	4804      	ldr	r0, [pc, #16]	@ (8005c0c <MX_USART2_UART_Init+0x90>)
 8005bfa:	f005 f841 	bl	800ac80 <HAL_UARTEx_DisableFifoMode>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005c04:	f7fc fc44 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005c08:	bf00      	nop
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	200004d8 	.word	0x200004d8
 8005c10:	40004400 	.word	0x40004400

08005c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b09e      	sub	sp, #120	@ 0x78
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c1c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	605a      	str	r2, [r3, #4]
 8005c26:	609a      	str	r2, [r3, #8]
 8005c28:	60da      	str	r2, [r3, #12]
 8005c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c2c:	f107 0310 	add.w	r3, r7, #16
 8005c30:	2254      	movs	r2, #84	@ 0x54
 8005c32:	2100      	movs	r1, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f009 f86a 	bl	800ed0e <memset>
  if(uartHandle->Instance==USART2)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a23      	ldr	r2, [pc, #140]	@ (8005ccc <HAL_UART_MspInit+0xb8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d13e      	bne.n	8005cc2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005c44:	2302      	movs	r3, #2
 8005c46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c4c:	f107 0310 	add.w	r3, r7, #16
 8005c50:	4618      	mov	r0, r3
 8005c52:	f003 fcb9 	bl	80095c8 <HAL_RCCEx_PeriphCLKConfig>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005c5c:	f7fc fc18 	bl	8002490 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c60:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd0 <HAL_UART_MspInit+0xbc>)
 8005c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c64:	4a1a      	ldr	r2, [pc, #104]	@ (8005cd0 <HAL_UART_MspInit+0xbc>)
 8005c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c6c:	4b18      	ldr	r3, [pc, #96]	@ (8005cd0 <HAL_UART_MspInit+0xbc>)
 8005c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c78:	4b15      	ldr	r3, [pc, #84]	@ (8005cd0 <HAL_UART_MspInit+0xbc>)
 8005c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c7c:	4a14      	ldr	r2, [pc, #80]	@ (8005cd0 <HAL_UART_MspInit+0xbc>)
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c84:	4b12      	ldr	r3, [pc, #72]	@ (8005cd0 <HAL_UART_MspInit+0xbc>)
 8005c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005c90:	230c      	movs	r3, #12
 8005c92:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c94:	2302      	movs	r3, #2
 8005c96:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ca0:	2307      	movs	r3, #7
 8005ca2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005ca8:	4619      	mov	r1, r3
 8005caa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005cae:	f001 f8eb 	bl	8006e88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	2026      	movs	r0, #38	@ 0x26
 8005cb8:	f000 f9a3 	bl	8006002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005cbc:	2026      	movs	r0, #38	@ 0x26
 8005cbe:	f000 f9ba 	bl	8006036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005cc2:	bf00      	nop
 8005cc4:	3778      	adds	r7, #120	@ 0x78
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	40004400 	.word	0x40004400
 8005cd0:	40021000 	.word	0x40021000

08005cd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005cd4:	480d      	ldr	r0, [pc, #52]	@ (8005d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005cd6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005cd8:	f7ff ff3e 	bl	8005b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005cdc:	480c      	ldr	r0, [pc, #48]	@ (8005d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8005cde:	490d      	ldr	r1, [pc, #52]	@ (8005d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8005d18 <LoopForever+0xe>)
  movs r3, #0
 8005ce2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005ce4:	e002      	b.n	8005cec <LoopCopyDataInit>

08005ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005cea:	3304      	adds	r3, #4

08005cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005cf0:	d3f9      	bcc.n	8005ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8005d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8005d20 <LoopForever+0x16>)
  movs r3, #0
 8005cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005cf8:	e001      	b.n	8005cfe <LoopFillZerobss>

08005cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005cfc:	3204      	adds	r2, #4

08005cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d00:	d3fb      	bcc.n	8005cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d02:	f009 f8c3 	bl	800ee8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005d06:	f7fc faed 	bl	80022e4 <main>

08005d0a <LoopForever>:

LoopForever:
    b LoopForever
 8005d0a:	e7fe      	b.n	8005d0a <LoopForever>
  ldr   r0, =_estack
 8005d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d14:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8005d18:	0801385c 	.word	0x0801385c
  ldr r2, =_sbss
 8005d1c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8005d20:	20000704 	.word	0x20000704

08005d24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005d24:	e7fe      	b.n	8005d24 <ADC1_2_IRQHandler>

08005d26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d30:	2003      	movs	r0, #3
 8005d32:	f000 f95b 	bl	8005fec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d36:	200f      	movs	r0, #15
 8005d38:	f000 f80e 	bl	8005d58 <HAL_InitTick>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	71fb      	strb	r3, [r7, #7]
 8005d46:	e001      	b.n	8005d4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d48:	f7ff fdba 	bl	80058c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d4c:	79fb      	ldrb	r3, [r7, #7]

}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005d64:	4b16      	ldr	r3, [pc, #88]	@ (8005dc0 <HAL_InitTick+0x68>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d022      	beq.n	8005db2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005d6c:	4b15      	ldr	r3, [pc, #84]	@ (8005dc4 <HAL_InitTick+0x6c>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b13      	ldr	r3, [pc, #76]	@ (8005dc0 <HAL_InitTick+0x68>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 f966 	bl	8006052 <HAL_SYSTICK_Config>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10f      	bne.n	8005dac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b0f      	cmp	r3, #15
 8005d90:	d809      	bhi.n	8005da6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d92:	2200      	movs	r2, #0
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9a:	f000 f932 	bl	8006002 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8005dc8 <HAL_InitTick+0x70>)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	e007      	b.n	8005db6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	73fb      	strb	r3, [r7, #15]
 8005daa:	e004      	b.n	8005db6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
 8005db0:	e001      	b.n	8005db6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	20000008 	.word	0x20000008
 8005dc4:	20000000 	.word	0x20000000
 8005dc8:	20000004 	.word	0x20000004

08005dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005dd0:	4b05      	ldr	r3, [pc, #20]	@ (8005de8 <HAL_IncTick+0x1c>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	4b05      	ldr	r3, [pc, #20]	@ (8005dec <HAL_IncTick+0x20>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4413      	add	r3, r2
 8005dda:	4a03      	ldr	r2, [pc, #12]	@ (8005de8 <HAL_IncTick+0x1c>)
 8005ddc:	6013      	str	r3, [r2, #0]
}
 8005dde:	bf00      	nop
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	2000056c 	.word	0x2000056c
 8005dec:	20000008 	.word	0x20000008

08005df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
  return uwTick;
 8005df4:	4b03      	ldr	r3, [pc, #12]	@ (8005e04 <HAL_GetTick+0x14>)
 8005df6:	681b      	ldr	r3, [r3, #0]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	2000056c 	.word	0x2000056c

08005e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e10:	f7ff ffee 	bl	8005df0 <HAL_GetTick>
 8005e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d004      	beq.n	8005e2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e22:	4b09      	ldr	r3, [pc, #36]	@ (8005e48 <HAL_Delay+0x40>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4413      	add	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e2c:	bf00      	nop
 8005e2e:	f7ff ffdf 	bl	8005df0 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d8f7      	bhi.n	8005e2e <HAL_Delay+0x26>
  {
  }
}
 8005e3e:	bf00      	nop
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20000008 	.word	0x20000008

08005e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e90 <__NVIC_SetPriorityGrouping+0x44>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e68:	4013      	ands	r3, r2
 8005e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e7e:	4a04      	ldr	r2, [pc, #16]	@ (8005e90 <__NVIC_SetPriorityGrouping+0x44>)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	60d3      	str	r3, [r2, #12]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	e000ed00 	.word	0xe000ed00

08005e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e98:	4b04      	ldr	r3, [pc, #16]	@ (8005eac <__NVIC_GetPriorityGrouping+0x18>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	0a1b      	lsrs	r3, r3, #8
 8005e9e:	f003 0307 	and.w	r3, r3, #7
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	e000ed00 	.word	0xe000ed00

08005eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	db0b      	blt.n	8005eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ec2:	79fb      	ldrb	r3, [r7, #7]
 8005ec4:	f003 021f 	and.w	r2, r3, #31
 8005ec8:	4907      	ldr	r1, [pc, #28]	@ (8005ee8 <__NVIC_EnableIRQ+0x38>)
 8005eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8005ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	e000e100 	.word	0xe000e100

08005eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	6039      	str	r1, [r7, #0]
 8005ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	db0a      	blt.n	8005f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	490c      	ldr	r1, [pc, #48]	@ (8005f38 <__NVIC_SetPriority+0x4c>)
 8005f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f0a:	0112      	lsls	r2, r2, #4
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	440b      	add	r3, r1
 8005f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f14:	e00a      	b.n	8005f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	4908      	ldr	r1, [pc, #32]	@ (8005f3c <__NVIC_SetPriority+0x50>)
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	3b04      	subs	r3, #4
 8005f24:	0112      	lsls	r2, r2, #4
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	440b      	add	r3, r1
 8005f2a:	761a      	strb	r2, [r3, #24]
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	e000e100 	.word	0xe000e100
 8005f3c:	e000ed00 	.word	0xe000ed00

08005f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b089      	sub	sp, #36	@ 0x24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f1c3 0307 	rsb	r3, r3, #7
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	bf28      	it	cs
 8005f5e:	2304      	movcs	r3, #4
 8005f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	3304      	adds	r3, #4
 8005f66:	2b06      	cmp	r3, #6
 8005f68:	d902      	bls.n	8005f70 <NVIC_EncodePriority+0x30>
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	3b03      	subs	r3, #3
 8005f6e:	e000      	b.n	8005f72 <NVIC_EncodePriority+0x32>
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f74:	f04f 32ff 	mov.w	r2, #4294967295
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7e:	43da      	mvns	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	401a      	ands	r2, r3
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f88:	f04f 31ff 	mov.w	r1, #4294967295
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f92:	43d9      	mvns	r1, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f98:	4313      	orrs	r3, r2
         );
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3724      	adds	r7, #36	@ 0x24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
	...

08005fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fb8:	d301      	bcc.n	8005fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e00f      	b.n	8005fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe8 <SysTick_Config+0x40>)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fc6:	210f      	movs	r1, #15
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fcc:	f7ff ff8e 	bl	8005eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fd0:	4b05      	ldr	r3, [pc, #20]	@ (8005fe8 <SysTick_Config+0x40>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fd6:	4b04      	ldr	r3, [pc, #16]	@ (8005fe8 <SysTick_Config+0x40>)
 8005fd8:	2207      	movs	r2, #7
 8005fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	e000e010 	.word	0xe000e010

08005fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff ff29 	bl	8005e4c <__NVIC_SetPriorityGrouping>
}
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b086      	sub	sp, #24
 8006006:	af00      	add	r7, sp, #0
 8006008:	4603      	mov	r3, r0
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006010:	f7ff ff40 	bl	8005e94 <__NVIC_GetPriorityGrouping>
 8006014:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	6978      	ldr	r0, [r7, #20]
 800601c:	f7ff ff90 	bl	8005f40 <NVIC_EncodePriority>
 8006020:	4602      	mov	r2, r0
 8006022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006026:	4611      	mov	r1, r2
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff ff5f 	bl	8005eec <__NVIC_SetPriority>
}
 800602e:	bf00      	nop
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	4603      	mov	r3, r0
 800603e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff ff33 	bl	8005eb0 <__NVIC_EnableIRQ>
}
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b082      	sub	sp, #8
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff ffa4 	bl	8005fa8 <SysTick_Config>
 8006060:	4603      	mov	r3, r0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e08d      	b.n	800619a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	4b47      	ldr	r3, [pc, #284]	@ (80061a4 <HAL_DMA_Init+0x138>)
 8006086:	429a      	cmp	r2, r3
 8006088:	d80f      	bhi.n	80060aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	4b45      	ldr	r3, [pc, #276]	@ (80061a8 <HAL_DMA_Init+0x13c>)
 8006092:	4413      	add	r3, r2
 8006094:	4a45      	ldr	r2, [pc, #276]	@ (80061ac <HAL_DMA_Init+0x140>)
 8006096:	fba2 2303 	umull	r2, r3, r2, r3
 800609a:	091b      	lsrs	r3, r3, #4
 800609c:	009a      	lsls	r2, r3, #2
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a42      	ldr	r2, [pc, #264]	@ (80061b0 <HAL_DMA_Init+0x144>)
 80060a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80060a8:	e00e      	b.n	80060c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	4b40      	ldr	r3, [pc, #256]	@ (80061b4 <HAL_DMA_Init+0x148>)
 80060b2:	4413      	add	r3, r2
 80060b4:	4a3d      	ldr	r2, [pc, #244]	@ (80061ac <HAL_DMA_Init+0x140>)
 80060b6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	009a      	lsls	r2, r3, #2
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a3c      	ldr	r2, [pc, #240]	@ (80061b8 <HAL_DMA_Init+0x14c>)
 80060c6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80060de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80060ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006104:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f9cc 	bl	80064b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006128:	d102      	bne.n	8006130 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006144:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d010      	beq.n	8006170 <HAL_DMA_Init+0x104>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b04      	cmp	r3, #4
 8006154:	d80c      	bhi.n	8006170 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f9ec 	bl	8006534 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	e008      	b.n	8006182 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40020407 	.word	0x40020407
 80061a8:	bffdfff8 	.word	0xbffdfff8
 80061ac:	cccccccd 	.word	0xcccccccd
 80061b0:	40020000 	.word	0x40020000
 80061b4:	bffdfbf8 	.word	0xbffdfbf8
 80061b8:	40020400 	.word	0x40020400

080061bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d005      	beq.n	80061e0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2204      	movs	r2, #4
 80061d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	73fb      	strb	r3, [r7, #15]
 80061de:	e037      	b.n	8006250 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 020e 	bic.w	r2, r2, #14
 80061ee:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061fe:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0201 	bic.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006214:	f003 021f 	and.w	r2, r3, #31
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621c:	2101      	movs	r1, #1
 800621e:	fa01 f202 	lsl.w	r2, r1, r2
 8006222:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800622c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00c      	beq.n	8006250 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006240:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006244:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800624e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d00d      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2204      	movs	r2, #4
 800628a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
 80062a0:	e047      	b.n	8006332 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 020e 	bic.w	r2, r2, #14
 80062b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0201 	bic.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d6:	f003 021f 	and.w	r2, r3, #31
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062de:	2101      	movs	r1, #1
 80062e0:	fa01 f202 	lsl.w	r2, r1, r2
 80062e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80062ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00c      	beq.n	8006312 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006302:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006306:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006310:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	4798      	blx	r3
    }
  }
  return status;
 8006332:	7bfb      	ldrb	r3, [r7, #15]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006358:	f003 031f 	and.w	r3, r3, #31
 800635c:	2204      	movs	r2, #4
 800635e:	409a      	lsls	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4013      	ands	r3, r2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d026      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x7a>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	d021      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b00      	cmp	r3, #0
 800637e:	d107      	bne.n	8006390 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0204 	bic.w	r2, r2, #4
 800638e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006394:	f003 021f 	and.w	r2, r3, #31
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639c:	2104      	movs	r1, #4
 800639e:	fa01 f202 	lsl.w	r2, r1, r2
 80063a2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d071      	beq.n	8006490 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80063b4:	e06c      	b.n	8006490 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	2202      	movs	r2, #2
 80063c0:	409a      	lsls	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4013      	ands	r3, r2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d02e      	beq.n	8006428 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d029      	beq.n	8006428 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10b      	bne.n	80063fa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 020a 	bic.w	r2, r2, #10
 80063f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fe:	f003 021f 	and.w	r2, r3, #31
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006406:	2102      	movs	r1, #2
 8006408:	fa01 f202 	lsl.w	r2, r1, r2
 800640c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d038      	beq.n	8006490 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006426:	e033      	b.n	8006490 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800642c:	f003 031f 	and.w	r3, r3, #31
 8006430:	2208      	movs	r2, #8
 8006432:	409a      	lsls	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4013      	ands	r3, r2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d02a      	beq.n	8006492 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d025      	beq.n	8006492 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 020e 	bic.w	r2, r2, #14
 8006454:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645a:	f003 021f 	and.w	r2, r3, #31
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006462:	2101      	movs	r1, #1
 8006464:	fa01 f202 	lsl.w	r2, r1, r2
 8006468:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006484:	2b00      	cmp	r3, #0
 8006486:	d004      	beq.n	8006492 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006490:	bf00      	nop
 8006492:	bf00      	nop
}
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80064a8:	b2db      	uxtb	r3, r3
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	4b16      	ldr	r3, [pc, #88]	@ (8006520 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d802      	bhi.n	80064d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80064cc:	4b15      	ldr	r3, [pc, #84]	@ (8006524 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	e001      	b.n	80064d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80064d2:	4b15      	ldr	r3, [pc, #84]	@ (8006528 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80064d4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	3b08      	subs	r3, #8
 80064e2:	4a12      	ldr	r2, [pc, #72]	@ (800652c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80064e4:	fba2 2303 	umull	r2, r3, r2, r3
 80064e8:	091b      	lsrs	r3, r3, #4
 80064ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f0:	089b      	lsrs	r3, r3, #2
 80064f2:	009a      	lsls	r2, r3, #2
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	4413      	add	r3, r2
 80064f8:	461a      	mov	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a0b      	ldr	r2, [pc, #44]	@ (8006530 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006502:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2201      	movs	r2, #1
 800650c:	409a      	lsls	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006512:	bf00      	nop
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	40020407 	.word	0x40020407
 8006524:	40020800 	.word	0x40020800
 8006528:	40020820 	.word	0x40020820
 800652c:	cccccccd 	.word	0xcccccccd
 8006530:	40020880 	.word	0x40020880

08006534 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4b0b      	ldr	r3, [pc, #44]	@ (8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	461a      	mov	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a08      	ldr	r2, [pc, #32]	@ (8006578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006556:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3b01      	subs	r3, #1
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2201      	movs	r2, #1
 8006562:	409a      	lsls	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	1000823f 	.word	0x1000823f
 8006578:	40020940 	.word	0x40020940

0800657c <HAL_FDCAN_Init>:
  * @{
  */

/**
  * @brief  Initializes the FDCAN peripheral according to the specified
  *         parameters in the FDCAN_InitTypeDef structure.
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_FDCAN_Init+0x12>
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800658a:	2301      	movs	r3, #1
 800658c:	e147      	b.n	800681e <HAL_FDCAN_Init+0x2a2>
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_FDCAN_Init+0x2c>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    hfdcan->Lock = HAL_UNLOCKED;

    /* Init the low level hardware: CLOCK, NVIC */
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fb fca8 	bl	8001ef8 <HAL_FDCAN_MspInit>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0210 	bic.w	r2, r2, #16
 80065b6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);

  /* Get tick */
 80065b8:	f7ff fc1a 	bl	8005df0 <HAL_GetTick>
 80065bc:	60f8      	str	r0, [r7, #12]
  tickstart = HAL_GetTick();

  /* Check Sleep mode acknowledge */
 80065be:	e012      	b.n	80065e6 <HAL_FDCAN_Init+0x6a>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
  {
 80065c0:	f7ff fc16 	bl	8005df0 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b0a      	cmp	r3, #10
 80065cc:	d90b      	bls.n	80065e6 <HAL_FDCAN_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
    {
      /* Update error code */
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d2:	f043 0201 	orr.w	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	661a      	str	r2, [r3, #96]	@ 0x60
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;

      /* Change FDCAN state */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2203      	movs	r2, #3
 80065de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;

 80065e2:	2301      	movs	r3, #1
 80065e4:	e11b      	b.n	800681e <HAL_FDCAN_Init+0x2a2>
  /* Check Sleep mode acknowledge */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d0e5      	beq.n	80065c0 <HAL_FDCAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	619a      	str	r2, [r3, #24]
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);

  /* Get tick */
 8006604:	f7ff fbf4 	bl	8005df0 <HAL_GetTick>
 8006608:	60f8      	str	r0, [r7, #12]
  tickstart = HAL_GetTick();

  /* Wait until the INIT bit into CCCR register is set */
 800660a:	e012      	b.n	8006632 <HAL_FDCAN_Init+0xb6>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
  {
    /* Check for the Timeout */
 800660c:	f7ff fbf0 	bl	8005df0 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b0a      	cmp	r3, #10
 8006618:	d90b      	bls.n	8006632 <HAL_FDCAN_Init+0xb6>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
    {
      /* Update error code */
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	661a      	str	r2, [r3, #96]	@ 0x60
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;

      /* Change FDCAN state */
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2203      	movs	r2, #3
 800662a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;

 800662e:	2301      	movs	r3, #1
 8006630:	e0f5      	b.n	800681e <HAL_FDCAN_Init+0x2a2>
  /* Wait until the INIT bit into CCCR register is set */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0e5      	beq.n	800660c <HAL_FDCAN_Init+0x90>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0202 	orr.w	r2, r2, #2
 800664e:	619a      	str	r2, [r3, #24]
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);

  /* Check FDCAN instance */
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a74      	ldr	r2, [pc, #464]	@ (8006828 <HAL_FDCAN_Init+0x2ac>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d103      	bne.n	8006662 <HAL_FDCAN_Init+0xe6>
  if (hfdcan->Instance == FDCAN1)
  {
    /* Configure Clock divider */
 800665a:	4a74      	ldr	r2, [pc, #464]	@ (800682c <HAL_FDCAN_Init+0x2b0>)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	6013      	str	r3, [r2, #0]
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	7c1b      	ldrb	r3, [r3, #16]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d108      	bne.n	800667c <HAL_FDCAN_Init+0x100>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
  {
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	699a      	ldr	r2, [r3, #24]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006678:	619a      	str	r2, [r3, #24]
 800667a:	e007      	b.n	800668c <HAL_FDCAN_Init+0x110>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
  }
  else
  {
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800668a:	619a      	str	r2, [r3, #24]
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
  }

  /* Set the transmit pause feature */
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	7c5b      	ldrb	r3, [r3, #17]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d108      	bne.n	80066a6 <HAL_FDCAN_Init+0x12a>
  if (hfdcan->Init.TransmitPause == ENABLE)
  {
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066a2:	619a      	str	r2, [r3, #24]
 80066a4:	e007      	b.n	80066b6 <HAL_FDCAN_Init+0x13a>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
  }
  else
  {
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	699a      	ldr	r2, [r3, #24]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066b4:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
  }

  /* Set the Protocol Exception Handling */
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	7c9b      	ldrb	r3, [r3, #18]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d108      	bne.n	80066d0 <HAL_FDCAN_Init+0x154>
  if (hfdcan->Init.ProtocolException == ENABLE)
  {
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066cc:	619a      	str	r2, [r3, #24]
 80066ce:	e007      	b.n	80066e0 <HAL_FDCAN_Init+0x164>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
  }
  else
  {
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80066de:	619a      	str	r2, [r3, #24]
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
  }

  /* Set FDCAN Frame Format */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	619a      	str	r2, [r3, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);

  /* Reset FDCAN Operation Mode */
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	699a      	ldr	r2, [r3, #24]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006704:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0210 	bic.w	r2, r2, #16
 8006714:	611a      	str	r2, [r3, #16]
               |        | Operation  | Monitoring | LoopBack | LoopBack
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d108      	bne.n	8006730 <HAL_FDCAN_Init+0x1b4>
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
  {
    /* Enable Restricted Operation mode */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	699a      	ldr	r2, [r3, #24]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 0204 	orr.w	r2, r2, #4
 800672c:	619a      	str	r2, [r3, #24]
 800672e:	e02c      	b.n	800678a <HAL_FDCAN_Init+0x20e>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d028      	beq.n	800678a <HAL_FDCAN_Init+0x20e>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
  {
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d01c      	beq.n	800677a <HAL_FDCAN_Init+0x1fe>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
    {
      /* Enable write access to TEST register */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800674e:	619a      	str	r2, [r3, #24]
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);

      /* Enable LoopBack mode */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0210 	orr.w	r2, r2, #16
 800675e:	611a      	str	r2, [r3, #16]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);

 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	2b03      	cmp	r3, #3
 8006766:	d110      	bne.n	800678a <HAL_FDCAN_Init+0x20e>
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
      {
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0220 	orr.w	r2, r2, #32
 8006776:	619a      	str	r2, [r3, #24]
 8006778:	e007      	b.n	800678a <HAL_FDCAN_Init+0x20e>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
      }
    }
    else
    {
      /* Enable bus monitoring mode */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699a      	ldr	r2, [r3, #24]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0220 	orr.w	r2, r2, #32
 8006788:	619a      	str	r2, [r3, #24]
  else
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	3b01      	subs	r3, #1
 8006790:	065a      	lsls	r2, r3, #25
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	3b01      	subs	r3, #1
 8006798:	021b      	lsls	r3, r3, #8
  /* Set the nominal bit timing register */
 800679a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	3b01      	subs	r3, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80067a2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	041a      	lsls	r2, r3, #16
  /* Set the nominal bit timing register */
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80067b2:	430a      	orrs	r2, r1
  /* Set the nominal bit timing register */
 80067b4:	61da      	str	r2, [r3, #28]
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));

  /* If FD operation with BRS is selected, set the data bit timing register */
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067be:	d115      	bne.n	80067ec <HAL_FDCAN_Init+0x270>
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
  {
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c4:	1e5a      	subs	r2, r3, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ca:	3b01      	subs	r3, #1
 80067cc:	021b      	lsls	r3, r3, #8
  {
 80067ce:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d4:	3b01      	subs	r3, #1
 80067d6:	011b      	lsls	r3, r3, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80067d8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e0:	3b01      	subs	r3, #1
 80067e2:	041a      	lsls	r2, r3, #16
  {
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80067e8:	430a      	orrs	r2, r1
  {
 80067ea:	60da      	str	r2, [r3, #12]
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);

  /* Calculate each RAM block address */
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa58 	bl	8006cb8 <FDCAN_CalcultateRamBlockAddresses>
  FDCAN_CalcultateRamBlockAddresses(hfdcan);

  /* Initialize the Latest Tx request buffer index */
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan->LatestTxFifoQRequest = 0U;

  /* Initialize the error code */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;

  /* Initialize the FDCAN state */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
 800681c:	2300      	movs	r3, #0
  return HAL_OK;
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40006400 	.word	0x40006400
 800682c:	40006500 	.word	0x40006500

08006830 <HAL_FDCAN_ConfigFilter>:
  *         the configuration information for the specified FDCAN.
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
{
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006840:	75fb      	strb	r3, [r7, #23]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;

 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d002      	beq.n	800684e <HAL_FDCAN_ConfigFilter+0x1e>
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	2b02      	cmp	r3, #2
 800684c:	d13d      	bne.n	80068ca <HAL_FDCAN_ConfigFilter+0x9a>
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d119      	bne.n	800688a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterIndex, (hfdcan->Init.StdFiltersNbr - 1U)));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	079a      	lsls	r2, r3, #30
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	06db      	lsls	r3, r3, #27
      /* Build filter element */
 8006862:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterConfig << 27U) |
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	041b      	lsls	r3, r3, #16
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800686a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
      /* Build filter element */
 8006870:	4313      	orrs	r3, r2
 8006872:	613b      	str	r3, [r7, #16]
                         sFilterConfig->FilterID2);

      /* Calculate filter address */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	60bb      	str	r3, [r7, #8]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));

      /* Write filter element to the message RAM */
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	e01d      	b.n	80068c6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterIndex, (hfdcan->Init.ExtFiltersNbr - 1U)));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	075a      	lsls	r2, r3, #29
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);

      /* Build second word of filter element */
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	079a      	lsls	r2, r3, #30
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);

      /* Calculate filter address */
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	4413      	add	r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));

      /* Write filter element to the message RAM */
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	601a      	str	r2, [r3, #0]
      *FilterAddress = FilterElementW1;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	3304      	adds	r3, #4
 80068be:	60bb      	str	r3, [r7, #8]
      FilterAddress++;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	601a      	str	r2, [r3, #0]
      *FilterAddress = FilterElementW2;
    }

    /* Return function status */
 80068c6:	2300      	movs	r3, #0
 80068c8:	e006      	b.n	80068d8 <HAL_FDCAN_ConfigFilter+0xa8>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ce:	f043 0202 	orr.w	r2, r3, #2
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	661a      	str	r2, [r3, #96]	@ 0x60
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;

 80068d6:	2301      	movs	r3, #1
    return HAL_ERROR;
  }
 80068d8:	4618      	mov	r0, r3
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_FDCAN_ConfigGlobalFilter>:
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d116      	bne.n	800692c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
  {
    /* Configure global filter */
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006906:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	011a      	lsls	r2, r3, #4
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	431a      	orrs	r2, r3
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	431a      	orrs	r2, r3
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	431a      	orrs	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
               ((NonMatchingStd << FDCAN_RXGFC_ANFS_Pos)  |
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
 8006928:	2300      	movs	r3, #0
 800692a:	e006      	b.n	800693a <HAL_FDCAN_ConfigGlobalFilter+0x56>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006930:	f043 0204 	orr.w	r2, r3, #4
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	661a      	str	r2, [r3, #96]	@ 0x60
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;

 8006938:	2301      	movs	r3, #1
    return HAL_ERROR;
  }
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <HAL_FDCAN_ConfigTxDelayCompensation>:
  * @param  TdcFilter Transmitter Delay Compensation Filter Window Length.
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
 8006946:	b480      	push	{r7}
 8006948:	b085      	sub	sp, #20
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	607a      	str	r2, [r7, #4]
{
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b01      	cmp	r3, #1
 800695c:	d108      	bne.n	8006970 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
  {
    /* Configure TDC offset and filter window */
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	0219      	lsls	r1, r3, #8
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	430a      	orrs	r2, r1
 800696a:	649a      	str	r2, [r3, #72]	@ 0x48
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));

    /* Return function status */
 800696c:	2300      	movs	r3, #0
 800696e:	e006      	b.n	800697e <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006974:	f043 0204 	orr.w	r2, r3, #4
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	661a      	str	r2, [r3, #96]	@ 0x60
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;

 800697c:	2301      	movs	r3, #1
    return HAL_ERROR;
  }
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <HAL_FDCAN_EnableTxDelayCompensation>:
  * @brief  Enable the transmitter delay compensation.
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
{
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b01      	cmp	r3, #1
 800699c:	d109      	bne.n	80069b2 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
  {
    /* Enable transmitter delay compensation */
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80069ac:	60da      	str	r2, [r3, #12]
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);

    /* Return function status */
 80069ae:	2300      	movs	r3, #0
 80069b0:	e006      	b.n	80069c0 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069b6:	f043 0204 	orr.w	r2, r3, #4
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	661a      	str	r2, [r3, #96]	@ 0x60
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;

 80069be:	2301      	movs	r3, #1
    return HAL_ERROR;
  }
 80069c0:	4618      	mov	r0, r3
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_FDCAN_Start>:
  * @brief  Start the FDCAN module.
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
{
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d110      	bne.n	8006a02 <HAL_FDCAN_Start+0x36>
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
  {
    /* Change FDCAN peripheral state */
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    hfdcan->State = HAL_FDCAN_STATE_BUSY;

    /* Request leave initialisation */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699a      	ldr	r2, [r3, #24]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0201 	bic.w	r2, r2, #1
 80069f6:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);

    /* Reset the FDCAN ErrorCode */
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	661a      	str	r2, [r3, #96]	@ 0x60
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;

    /* Return function status */
 80069fe:	2300      	movs	r3, #0
 8006a00:	e006      	b.n	8006a10 <HAL_FDCAN_Start+0x44>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a06:	f043 0204 	orr.w	r2, r3, #4
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	661a      	str	r2, [r3, #96]	@ 0x60
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;

 8006a0e:	2301      	movs	r3, #1
    return HAL_ERROR;
  }
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_ESI(pTxHeader->ErrorStateIndicator));
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d12c      	bne.n	8006a8e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
  {
    /* Check that the Tx FIFO/Queue is not full */
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
    {
      /* Update error code */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	661a      	str	r2, [r3, #96]	@ 0x60
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;

 8006a50:	2301      	movs	r3, #1
 8006a52:	e023      	b.n	8006a9c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
      return HAL_ERROR;
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006a5c:	0c1b      	lsrs	r3, r3, #16
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	617b      	str	r3, [r7, #20]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);

      /* Add the message to the Tx FIFO/Queue */
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	68b9      	ldr	r1, [r7, #8]
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 f990 	bl	8006d90 <FDCAN_CopyMessageToRAM>
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);

      /* Activate the corresponding transmission request */
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2101      	movs	r1, #1
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	fa01 f202 	lsl.w	r2, r1, r2
 8006a7c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
 8006a80:	2201      	movs	r2, #1
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	409a      	lsls	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	659a      	str	r2, [r3, #88]	@ 0x58
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
    }

    /* Return function status */
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e006      	b.n	8006a9c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a92:	f043 0208 	orr.w	r2, r3, #8
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	661a      	str	r2, [r3, #96]	@ 0x60
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;

 8006a9a:	2301      	movs	r3, #1
    return HAL_ERROR;
  }
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
 8006aa4:	b480      	push	{r7}
 8006aa6:	b08b      	sub	sp, #44	@ 0x2c
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
{
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006ab8:	76fb      	strb	r3, [r7, #27]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

 8006aba:	7efb      	ldrb	r3, [r7, #27]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	f040 80bc 	bne.w	8006c3a <HAL_FDCAN_GetRxMessage+0x196>
  if (state == HAL_FDCAN_STATE_BUSY)
  {
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2b40      	cmp	r3, #64	@ 0x40
 8006ac6:	d121      	bne.n	8006b0c <HAL_FDCAN_GetRxMessage+0x68>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d107      	bne.n	8006ae8 <HAL_FDCAN_GetRxMessage+0x44>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
      {
        /* Update error code */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006adc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	661a      	str	r2, [r3, #96]	@ 0x60
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;

 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0af      	b.n	8006c48 <HAL_FDCAN_GetRxMessage+0x1a4>
        return HAL_ERROR;
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af0:	0a1b      	lsrs	r3, r3, #8
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	61fb      	str	r3, [r7, #28]
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	4613      	mov	r3, r2
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	4413      	add	r3, r2
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	440b      	add	r3, r1
 8006b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b0a:	e020      	b.n	8006b4e <HAL_FDCAN_GetRxMessage+0xaa>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
          }
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b14:	f003 030f 	and.w	r3, r3, #15
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d107      	bne.n	8006b2c <HAL_FDCAN_GetRxMessage+0x88>
        }

        /* Calculate Rx FIFO 0 element index */
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	661a      	str	r2, [r3, #96]	@ 0x60
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);

 8006b28:	2301      	movs	r3, #1
 8006b2a:	e08d      	b.n	8006c48 <HAL_FDCAN_GetRxMessage+0x1a4>
        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b34:	0a1b      	lsrs	r3, r3, #8
 8006b36:	f003 0303 	and.w	r3, r3, #3
 8006b3a:	61fb      	str	r3, [r7, #28]
    {
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	4613      	mov	r3, r2
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	4413      	add	r3, r2
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	440b      	add	r3, r1
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	605a      	str	r2, [r3, #4]

        return HAL_ERROR;
      }
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d107      	bne.n	8006b72 <HAL_FDCAN_GetRxMessage+0xce>
      else
      {
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	0c9b      	lsrs	r3, r3, #18
 8006b68:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	e005      	b.n	8006b7e <HAL_FDCAN_GetRxMessage+0xda>
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	601a      	str	r2, [r3, #0]
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
          }
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	609a      	str	r2, [r3, #8]
        }

        /* Calculate Rx FIFO 1 element index */
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	611a      	str	r2, [r3, #16]
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	3304      	adds	r3, #4
 8006b9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

 8006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	61da      	str	r2, [r3, #28]
    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;

 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60da      	str	r2, [r3, #12]
    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
    {
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	615a      	str	r2, [r3, #20]
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
    }
    else /* Extended ID element */
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	619a      	str	r2, [r3, #24]
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
    }
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	0e1b      	lsrs	r3, r3, #24
 8006bd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	621a      	str	r2, [r3, #32]

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	0fda      	lsrs	r2, r3, #31
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	3304      	adds	r3, #4
 8006be6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bea:	617b      	str	r3, [r7, #20]

 8006bec:	2300      	movs	r3, #0
 8006bee:	623b      	str	r3, [r7, #32]
 8006bf0:	e00a      	b.n	8006c08 <HAL_FDCAN_GetRxMessage+0x164>
    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	441a      	add	r2, r3
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	440b      	add	r3, r1
 8006bfe:	7812      	ldrb	r2, [r2, #0]
 8006c00:	701a      	strb	r2, [r3, #0]

 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	3301      	adds	r3, #1
 8006c06:	623b      	str	r3, [r7, #32]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	0c1b      	lsrs	r3, r3, #16
 8006c0e:	4a11      	ldr	r2, [pc, #68]	@ (8006c54 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8006c10:	5cd3      	ldrb	r3, [r2, r3]
 8006c12:	461a      	mov	r2, r3
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d3eb      	bcc.n	8006bf2 <HAL_FDCAN_GetRxMessage+0x14e>

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b40      	cmp	r3, #64	@ 0x40
 8006c1e:	d105      	bne.n	8006c2c <HAL_FDCAN_GetRxMessage+0x188>

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	69fa      	ldr	r2, [r7, #28]
 8006c26:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8006c2a:	e004      	b.n	8006c36 <HAL_FDCAN_GetRxMessage+0x192>

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);

    /* Retrieve FilterIndex */
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006c36:	2300      	movs	r3, #0
 8006c38:	e006      	b.n	8006c48 <HAL_FDCAN_GetRxMessage+0x1a4>

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;

    /* Retrieve Rx payload */
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c3e:	f043 0208 	orr.w	r2, r3, #8
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	661a      	str	r2, [r3, #96]	@ 0x60
    pData = (uint8_t *)RxAddress;
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006c46:	2301      	movs	r3, #1
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006c48:	4618      	mov	r0, r3
 8006c4a:	372c      	adds	r7, #44	@ 0x2c
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	08012dec 	.word	0x08012dec

08006c58 <HAL_FDCAN_GetRxFifoFillLevel>:
  *         the configuration information for the specified FDCAN.
  * @param  TxBufferIndex Tx buffer index.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval Status
  *          - 0 : No pending transmission request on TxBufferIndex list.
  *          - 1 : Pending transmission request on TxBufferIndex.
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  */
uint32_t HAL_FDCAN_IsTxBufferMessagePending(const FDCAN_HandleTypeDef *hfdcan, uint32_t TxBufferIndex)
{
  /* Check function parameters */
  assert_param(IS_FDCAN_TX_LOCATION_LIST(TxBufferIndex));

 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b40      	cmp	r3, #64	@ 0x40
 8006c66:	d107      	bne.n	8006c78 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  /* Check pending transmission request on the selected buffer */
  if ((hfdcan->Instance->TXBRP & TxBufferIndex) == 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	e006      	b.n	8006c86 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  {
    return 0;
  }
  return 1;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c80:	f003 030f 	and.w	r3, r3, #15
 8006c84:	60fb      	str	r3, [r7, #12]
}

/**
  * @brief  Return Rx FIFO fill level.
 8006c86:	68fb      	ldr	r3, [r7, #12]
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_FDCAN_GetTxFifoFreeLevel>:
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
  uint32_t FillLevel;
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	60fb      	str	r3, [r7, #12]

  if (RxFifo == FDCAN_RX_FIFO0)
  {
 8006caa:	68fb      	ldr	r3, [r7, #12]
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <FDCAN_CalcultateRamBlockAddresses>:
  /* Return FDCAN state */
  return hfdcan->State;
}

/**
  * @brief  Return the FDCAN error code
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
 8006cc0:	4b30      	ldr	r3, [pc, #192]	@ (8006d84 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8006cc2:	60bb      	str	r3, [r7, #8]
  * @retval FDCAN Error Code
  */
uint32_t HAL_FDCAN_GetError(const FDCAN_HandleTypeDef *hfdcan)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a2f      	ldr	r2, [pc, #188]	@ (8006d88 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d103      	bne.n	8006cd6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
{
  /* Return FDCAN error code */
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006cd4:	60bb      	str	r3, [r7, #8]
  return hfdcan->ErrorCode;
}

/**
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a2c      	ldr	r2, [pc, #176]	@ (8006d8c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d103      	bne.n	8006ce8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  * @}
  */
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8006ce6:	60bb      	str	r3, [r7, #8]

/**
  * @}
  */

 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	641a      	str	r2, [r3, #64]	@ 0x40
/** @defgroup FDCAN_Private_Functions FDCAN Private Functions
  * @{
  */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cf6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cfe:	041a      	lsls	r2, r3, #16
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

/**
  * @brief  Calculate each RAM block start address and size
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	645a      	str	r2, [r3, #68]	@ 0x44
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d1c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d24:	061a      	lsls	r2, r3, #24
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	649a      	str	r2, [r3, #72]	@ 0x48
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	64da      	str	r2, [r3, #76]	@ 0x4c

  if (hfdcan->Instance == FDCAN2)
  {
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	651a      	str	r2, [r3, #80]	@ 0x50
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
  {
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	e005      	b.n	8006d6a <FDCAN_CalcultateRamBlockAddresses+0xb2>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]
  {
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3304      	adds	r3, #4
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d3f3      	bcc.n	8006d5e <FDCAN_CalcultateRamBlockAddresses+0xa6>
#endif /* FDCAN3 */

 8006d76:	bf00      	nop
 8006d78:	bf00      	nop
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	4000a400 	.word	0x4000a400
 8006d88:	40006800 	.word	0x40006800
 8006d8c:	40006c00 	.word	0x40006c00

08006d90 <FDCAN_CopyMessageToRAM>:
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));

  /* Rx FIFO 0 start address */
 8006d90:	b480      	push	{r7}
 8006d92:	b089      	sub	sp, #36	@ 0x24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10a      	bne.n	8006dbc <FDCAN_CopyMessageToRAM+0x2c>

  /* Tx FIFO/queue start address */
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	691a      	ldr	r2, [r3, #16]
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;

 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	689b      	ldr	r3, [r3, #8]
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006dae:	431a      	orrs	r2, r3
  /* Flush the allocated Message RAM area */
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	049b      	lsls	r3, r3, #18
  /* Tx FIFO/queue start address */
 8006db6:	4313      	orrs	r3, r2
 8006db8:	61fb      	str	r3, [r7, #28]
 8006dba:	e00a      	b.n	8006dd2 <FDCAN_CopyMessageToRAM+0x42>
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
  }
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	691a      	ldr	r2, [r3, #16]
}

 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	689b      	ldr	r3, [r3, #8]
}
 8006dc4:	431a      	orrs	r2, r3
/**
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	681b      	ldr	r3, [r3, #0]

 8006dca:	4313      	orrs	r3, r2
  }
 8006dcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dd0:	61fb      	str	r3, [r7, #28]
  * @brief  Copy Tx message to the message RAM.
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	061a      	lsls	r2, r3, #24
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	69db      	ldr	r3, [r3, #28]
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
 8006ddc:	431a      	orrs	r2, r3
  * @param  BufferIndex index of the buffer to be configured.
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	699b      	ldr	r3, [r3, #24]
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
 8006de2:	431a      	orrs	r2, r3
  * @retval none
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	695b      	ldr	r3, [r3, #20]
  * @param  BufferIndex index of the buffer to be configured.
 8006de8:	431a      	orrs	r2, r3
 */
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	68db      	ldr	r3, [r3, #12]
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	4413      	add	r3, r2
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	440b      	add	r3, r1
 8006e02:	61bb      	str	r3, [r7, #24]
  uint32_t TxElementW1;
  uint32_t TxElementW2;
  uint32_t *TxAddress;
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	601a      	str	r2, [r3, #0]
  uint32_t ByteCounter;
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	61bb      	str	r3, [r7, #24]

 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	601a      	str	r2, [r3, #0]
  /* Build first word of Tx header element */
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	61bb      	str	r3, [r7, #24]
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	e020      	b.n	8006e64 <FDCAN_CopyMessageToRAM+0xd4>
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	3303      	adds	r3, #3
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	4413      	add	r3, r2
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	061a      	lsls	r2, r3, #24
                   (pTxHeader->Identifier << 18U));
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	3302      	adds	r3, #2
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	440b      	add	r3, r1
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	041b      	lsls	r3, r3, #16
                   pTxHeader->TxFrameType |
 8006e3a:	431a      	orrs	r2, r3
  }
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	440b      	add	r3, r1
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	021b      	lsls	r3, r3, #8
                   (pTxHeader->Identifier << 18U));
 8006e48:	4313      	orrs	r3, r2
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	440a      	add	r2, r1
 8006e50:	7812      	ldrb	r2, [r2, #0]
  }
 8006e52:	431a      	orrs	r2, r3
                   pTxHeader->TxFrameType |
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	601a      	str	r2, [r3, #0]
  {
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	61bb      	str	r3, [r7, #24]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	3304      	adds	r3, #4
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	0c1b      	lsrs	r3, r3, #16
 8006e6a:	4a06      	ldr	r2, [pc, #24]	@ (8006e84 <FDCAN_CopyMessageToRAM+0xf4>)
 8006e6c:	5cd3      	ldrb	r3, [r2, r3]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d3d5      	bcc.n	8006e22 <FDCAN_CopyMessageToRAM+0x92>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_EXTENDED_ID |
 8006e76:	bf00      	nop
 8006e78:	bf00      	nop
 8006e7a:	3724      	adds	r7, #36	@ 0x24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	08012dec 	.word	0x08012dec

08006e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006e96:	e15a      	b.n	800714e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 814c 	beq.w	8007148 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d005      	beq.n	8006ec8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d130      	bne.n	8006f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	2203      	movs	r2, #3
 8006ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4013      	ands	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006efe:	2201      	movs	r2, #1
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	fa02 f303 	lsl.w	r3, r2, r3
 8006f06:	43db      	mvns	r3, r3
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	091b      	lsrs	r3, r3, #4
 8006f14:	f003 0201 	and.w	r2, r3, #1
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d017      	beq.n	8006f66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	2203      	movs	r2, #3
 8006f42:	fa02 f303 	lsl.w	r3, r2, r3
 8006f46:	43db      	mvns	r3, r3
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d123      	bne.n	8006fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	08da      	lsrs	r2, r3, #3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3208      	adds	r2, #8
 8006f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f003 0307 	and.w	r3, r3, #7
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	220f      	movs	r2, #15
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	43db      	mvns	r3, r3
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4013      	ands	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	691a      	ldr	r2, [r3, #16]
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	08da      	lsrs	r2, r3, #3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3208      	adds	r2, #8
 8006fb4:	6939      	ldr	r1, [r7, #16]
 8006fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	2203      	movs	r2, #3
 8006fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fca:	43db      	mvns	r3, r3
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f003 0203 	and.w	r2, r3, #3
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 80a6 	beq.w	8007148 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ffc:	4b5b      	ldr	r3, [pc, #364]	@ (800716c <HAL_GPIO_Init+0x2e4>)
 8006ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007000:	4a5a      	ldr	r2, [pc, #360]	@ (800716c <HAL_GPIO_Init+0x2e4>)
 8007002:	f043 0301 	orr.w	r3, r3, #1
 8007006:	6613      	str	r3, [r2, #96]	@ 0x60
 8007008:	4b58      	ldr	r3, [pc, #352]	@ (800716c <HAL_GPIO_Init+0x2e4>)
 800700a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007014:	4a56      	ldr	r2, [pc, #344]	@ (8007170 <HAL_GPIO_Init+0x2e8>)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	089b      	lsrs	r3, r3, #2
 800701a:	3302      	adds	r3, #2
 800701c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f003 0303 	and.w	r3, r3, #3
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	220f      	movs	r2, #15
 800702c:	fa02 f303 	lsl.w	r3, r2, r3
 8007030:	43db      	mvns	r3, r3
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4013      	ands	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800703e:	d01f      	beq.n	8007080 <HAL_GPIO_Init+0x1f8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a4c      	ldr	r2, [pc, #304]	@ (8007174 <HAL_GPIO_Init+0x2ec>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d019      	beq.n	800707c <HAL_GPIO_Init+0x1f4>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a4b      	ldr	r2, [pc, #300]	@ (8007178 <HAL_GPIO_Init+0x2f0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d013      	beq.n	8007078 <HAL_GPIO_Init+0x1f0>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a4a      	ldr	r2, [pc, #296]	@ (800717c <HAL_GPIO_Init+0x2f4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00d      	beq.n	8007074 <HAL_GPIO_Init+0x1ec>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a49      	ldr	r2, [pc, #292]	@ (8007180 <HAL_GPIO_Init+0x2f8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d007      	beq.n	8007070 <HAL_GPIO_Init+0x1e8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a48      	ldr	r2, [pc, #288]	@ (8007184 <HAL_GPIO_Init+0x2fc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d101      	bne.n	800706c <HAL_GPIO_Init+0x1e4>
 8007068:	2305      	movs	r3, #5
 800706a:	e00a      	b.n	8007082 <HAL_GPIO_Init+0x1fa>
 800706c:	2306      	movs	r3, #6
 800706e:	e008      	b.n	8007082 <HAL_GPIO_Init+0x1fa>
 8007070:	2304      	movs	r3, #4
 8007072:	e006      	b.n	8007082 <HAL_GPIO_Init+0x1fa>
 8007074:	2303      	movs	r3, #3
 8007076:	e004      	b.n	8007082 <HAL_GPIO_Init+0x1fa>
 8007078:	2302      	movs	r3, #2
 800707a:	e002      	b.n	8007082 <HAL_GPIO_Init+0x1fa>
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <HAL_GPIO_Init+0x1fa>
 8007080:	2300      	movs	r3, #0
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	f002 0203 	and.w	r2, r2, #3
 8007088:	0092      	lsls	r2, r2, #2
 800708a:	4093      	lsls	r3, r2
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007092:	4937      	ldr	r1, [pc, #220]	@ (8007170 <HAL_GPIO_Init+0x2e8>)
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	089b      	lsrs	r3, r3, #2
 8007098:	3302      	adds	r3, #2
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80070a0:	4b39      	ldr	r3, [pc, #228]	@ (8007188 <HAL_GPIO_Init+0x300>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	43db      	mvns	r3, r3
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4013      	ands	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80070c4:	4a30      	ldr	r2, [pc, #192]	@ (8007188 <HAL_GPIO_Init+0x300>)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80070ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007188 <HAL_GPIO_Init+0x300>)
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	43db      	mvns	r3, r3
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4013      	ands	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80070ee:	4a26      	ldr	r2, [pc, #152]	@ (8007188 <HAL_GPIO_Init+0x300>)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80070f4:	4b24      	ldr	r3, [pc, #144]	@ (8007188 <HAL_GPIO_Init+0x300>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	43db      	mvns	r3, r3
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4013      	ands	r3, r2
 8007102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007118:	4a1b      	ldr	r2, [pc, #108]	@ (8007188 <HAL_GPIO_Init+0x300>)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800711e:	4b1a      	ldr	r3, [pc, #104]	@ (8007188 <HAL_GPIO_Init+0x300>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	43db      	mvns	r3, r3
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4013      	ands	r3, r2
 800712c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007142:	4a11      	ldr	r2, [pc, #68]	@ (8007188 <HAL_GPIO_Init+0x300>)
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	3301      	adds	r3, #1
 800714c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	fa22 f303 	lsr.w	r3, r2, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	f47f ae9d 	bne.w	8006e98 <HAL_GPIO_Init+0x10>
  }
}
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	40021000 	.word	0x40021000
 8007170:	40010000 	.word	0x40010000
 8007174:	48000400 	.word	0x48000400
 8007178:	48000800 	.word	0x48000800
 800717c:	48000c00 	.word	0x48000c00
 8007180:	48001000 	.word	0x48001000
 8007184:	48001400 	.word	0x48001400
 8007188:	40010400 	.word	0x40010400

0800718c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	807b      	strh	r3, [r7, #2]
 8007198:	4613      	mov	r3, r2
 800719a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800719c:	787b      	ldrb	r3, [r7, #1]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80071a2:	887a      	ldrh	r2, [r7, #2]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80071a8:	e002      	b.n	80071b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80071aa:	887a      	ldrh	r2, [r7, #2]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80071ce:	887a      	ldrh	r2, [r7, #2]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4013      	ands	r3, r2
 80071d4:	041a      	lsls	r2, r3, #16
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	43d9      	mvns	r1, r3
 80071da:	887b      	ldrh	r3, [r7, #2]
 80071dc:	400b      	ands	r3, r1
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	619a      	str	r2, [r3, #24]
}
 80071e4:	bf00      	nop
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e08d      	b.n	800731e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d106      	bne.n	800721c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7fa ff82 	bl	8002120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2224      	movs	r2, #36	@ 0x24
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0201 	bic.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007240:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007250:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d107      	bne.n	800726a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007266:	609a      	str	r2, [r3, #8]
 8007268:	e006      	b.n	8007278 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007276:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d108      	bne.n	8007292 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800728e:	605a      	str	r2, [r3, #4]
 8007290:	e007      	b.n	80072a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	6812      	ldr	r2, [r2, #0]
 80072ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80072b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80072c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691a      	ldr	r2, [r3, #16]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	69d9      	ldr	r1, [r3, #28]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1a      	ldr	r2, [r3, #32]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b088      	sub	sp, #32
 800732c:	af02      	add	r7, sp, #8
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	4608      	mov	r0, r1
 8007332:	4611      	mov	r1, r2
 8007334:	461a      	mov	r2, r3
 8007336:	4603      	mov	r3, r0
 8007338:	817b      	strh	r3, [r7, #10]
 800733a:	460b      	mov	r3, r1
 800733c:	813b      	strh	r3, [r7, #8]
 800733e:	4613      	mov	r3, r2
 8007340:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b20      	cmp	r3, #32
 800734c:	f040 80f9 	bne.w	8007542 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <HAL_I2C_Mem_Write+0x34>
 8007356:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007358:	2b00      	cmp	r3, #0
 800735a:	d105      	bne.n	8007368 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007362:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e0ed      	b.n	8007544 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <HAL_I2C_Mem_Write+0x4e>
 8007372:	2302      	movs	r3, #2
 8007374:	e0e6      	b.n	8007544 <HAL_I2C_Mem_Write+0x21c>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800737e:	f7fe fd37 	bl	8005df0 <HAL_GetTick>
 8007382:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	2319      	movs	r3, #25
 800738a:	2201      	movs	r2, #1
 800738c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f001 f84c 	bl	800842e <I2C_WaitOnFlagUntilTimeout>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e0d1      	b.n	8007544 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2221      	movs	r2, #33	@ 0x21
 80073a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2240      	movs	r2, #64	@ 0x40
 80073ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a3a      	ldr	r2, [r7, #32]
 80073ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80073c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073c8:	88f8      	ldrh	r0, [r7, #6]
 80073ca:	893a      	ldrh	r2, [r7, #8]
 80073cc:	8979      	ldrh	r1, [r7, #10]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	9301      	str	r3, [sp, #4]
 80073d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	4603      	mov	r3, r0
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 fb8f 	bl	8007afc <I2C_RequestMemoryWrite>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e0a9      	b.n	8007544 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	2bff      	cmp	r3, #255	@ 0xff
 80073f8:	d90e      	bls.n	8007418 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	22ff      	movs	r2, #255	@ 0xff
 80073fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007404:	b2da      	uxtb	r2, r3
 8007406:	8979      	ldrh	r1, [r7, #10]
 8007408:	2300      	movs	r3, #0
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f001 f9cf 	bl	80087b4 <I2C_TransferConfig>
 8007416:	e00f      	b.n	8007438 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800741c:	b29a      	uxth	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007426:	b2da      	uxtb	r2, r3
 8007428:	8979      	ldrh	r1, [r7, #10]
 800742a:	2300      	movs	r3, #0
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f001 f9be 	bl	80087b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f001 f84f 	bl	80084e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e07b      	b.n	8007544 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007450:	781a      	ldrb	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007466:	b29b      	uxth	r3, r3
 8007468:	3b01      	subs	r3, #1
 800746a:	b29a      	uxth	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007474:	3b01      	subs	r3, #1
 8007476:	b29a      	uxth	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007480:	b29b      	uxth	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d034      	beq.n	80074f0 <HAL_I2C_Mem_Write+0x1c8>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800748a:	2b00      	cmp	r3, #0
 800748c:	d130      	bne.n	80074f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007494:	2200      	movs	r2, #0
 8007496:	2180      	movs	r1, #128	@ 0x80
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 ffc8 	bl	800842e <I2C_WaitOnFlagUntilTimeout>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e04d      	b.n	8007544 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2bff      	cmp	r3, #255	@ 0xff
 80074b0:	d90e      	bls.n	80074d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	22ff      	movs	r2, #255	@ 0xff
 80074b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	8979      	ldrh	r1, [r7, #10]
 80074c0:	2300      	movs	r3, #0
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f001 f973 	bl	80087b4 <I2C_TransferConfig>
 80074ce:	e00f      	b.n	80074f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	8979      	ldrh	r1, [r7, #10]
 80074e2:	2300      	movs	r3, #0
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f001 f962 	bl	80087b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d19e      	bne.n	8007438 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f001 f835 	bl	800856e <I2C_WaitOnSTOPFlagUntilTimeout>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e01a      	b.n	8007544 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2220      	movs	r2, #32
 8007514:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6859      	ldr	r1, [r3, #4]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	4b0a      	ldr	r3, [pc, #40]	@ (800754c <HAL_I2C_Mem_Write+0x224>)
 8007522:	400b      	ands	r3, r1
 8007524:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2220      	movs	r2, #32
 800752a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	e000      	b.n	8007544 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007542:	2302      	movs	r3, #2
  }
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	fe00e800 	.word	0xfe00e800

08007550 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af02      	add	r7, sp, #8
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	4608      	mov	r0, r1
 800755a:	4611      	mov	r1, r2
 800755c:	461a      	mov	r2, r3
 800755e:	4603      	mov	r3, r0
 8007560:	817b      	strh	r3, [r7, #10]
 8007562:	460b      	mov	r3, r1
 8007564:	813b      	strh	r3, [r7, #8]
 8007566:	4613      	mov	r3, r2
 8007568:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b20      	cmp	r3, #32
 8007574:	f040 80fd 	bne.w	8007772 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_I2C_Mem_Read+0x34>
 800757e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007580:	2b00      	cmp	r3, #0
 8007582:	d105      	bne.n	8007590 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800758a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e0f1      	b.n	8007774 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007596:	2b01      	cmp	r3, #1
 8007598:	d101      	bne.n	800759e <HAL_I2C_Mem_Read+0x4e>
 800759a:	2302      	movs	r3, #2
 800759c:	e0ea      	b.n	8007774 <HAL_I2C_Mem_Read+0x224>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075a6:	f7fe fc23 	bl	8005df0 <HAL_GetTick>
 80075aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	2319      	movs	r3, #25
 80075b2:	2201      	movs	r2, #1
 80075b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 ff38 	bl	800842e <I2C_WaitOnFlagUntilTimeout>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0d5      	b.n	8007774 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2222      	movs	r2, #34	@ 0x22
 80075cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2240      	movs	r2, #64	@ 0x40
 80075d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a3a      	ldr	r2, [r7, #32]
 80075e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80075e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075f0:	88f8      	ldrh	r0, [r7, #6]
 80075f2:	893a      	ldrh	r2, [r7, #8]
 80075f4:	8979      	ldrh	r1, [r7, #10]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	4603      	mov	r3, r0
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 facf 	bl	8007ba4 <I2C_RequestMemoryRead>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e0ad      	b.n	8007774 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800761c:	b29b      	uxth	r3, r3
 800761e:	2bff      	cmp	r3, #255	@ 0xff
 8007620:	d90e      	bls.n	8007640 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	22ff      	movs	r2, #255	@ 0xff
 8007626:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800762c:	b2da      	uxtb	r2, r3
 800762e:	8979      	ldrh	r1, [r7, #10]
 8007630:	4b52      	ldr	r3, [pc, #328]	@ (800777c <HAL_I2C_Mem_Read+0x22c>)
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f001 f8bb 	bl	80087b4 <I2C_TransferConfig>
 800763e:	e00f      	b.n	8007660 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800764e:	b2da      	uxtb	r2, r3
 8007650:	8979      	ldrh	r1, [r7, #10]
 8007652:	4b4a      	ldr	r3, [pc, #296]	@ (800777c <HAL_I2C_Mem_Read+0x22c>)
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f001 f8aa 	bl	80087b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007666:	2200      	movs	r2, #0
 8007668:	2104      	movs	r1, #4
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 fedf 	bl	800842e <I2C_WaitOnFlagUntilTimeout>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e07c      	b.n	8007774 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007684:	b2d2      	uxtb	r2, r2
 8007686:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007696:	3b01      	subs	r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d034      	beq.n	8007720 <HAL_I2C_Mem_Read+0x1d0>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d130      	bne.n	8007720 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c4:	2200      	movs	r2, #0
 80076c6:	2180      	movs	r1, #128	@ 0x80
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 feb0 	bl	800842e <I2C_WaitOnFlagUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e04d      	b.n	8007774 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2bff      	cmp	r3, #255	@ 0xff
 80076e0:	d90e      	bls.n	8007700 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	22ff      	movs	r2, #255	@ 0xff
 80076e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	8979      	ldrh	r1, [r7, #10]
 80076f0:	2300      	movs	r3, #0
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f001 f85b 	bl	80087b4 <I2C_TransferConfig>
 80076fe:	e00f      	b.n	8007720 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007704:	b29a      	uxth	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800770e:	b2da      	uxtb	r2, r3
 8007710:	8979      	ldrh	r1, [r7, #10]
 8007712:	2300      	movs	r3, #0
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f001 f84a 	bl	80087b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d19a      	bne.n	8007660 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 ff1d 	bl	800856e <I2C_WaitOnSTOPFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e01a      	b.n	8007774 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2220      	movs	r2, #32
 8007744:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6859      	ldr	r1, [r3, #4]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	4b0b      	ldr	r3, [pc, #44]	@ (8007780 <HAL_I2C_Mem_Read+0x230>)
 8007752:	400b      	ands	r3, r1
 8007754:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2220      	movs	r2, #32
 800775a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	e000      	b.n	8007774 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007772:	2302      	movs	r3, #2
  }
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	80002400 	.word	0x80002400
 8007780:	fe00e800 	.word	0xfe00e800

08007784 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	68f9      	ldr	r1, [r7, #12]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	4798      	blx	r3
  }
}
 80077b0:	bf00      	nop
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00f      	beq.n	80077fa <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077e8:	f043 0201 	orr.w	r2, r3, #1
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077f8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00f      	beq.n	8007824 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007812:	f043 0208 	orr.w	r2, r3, #8
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007822:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00f      	beq.n	800784e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00a      	beq.n	800784e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800783c:	f043 0202 	orr.w	r2, r3, #2
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800784c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007852:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f003 030b 	and.w	r3, r3, #11
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800785e:	68f9      	ldr	r1, [r7, #12]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fc8b 	bl	800817c <I2C_ITError>
  }
}
 8007866:	bf00      	nop
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800788a:	bf00      	nop
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	460b      	mov	r3, r1
 80078a0:	70fb      	strb	r3, [r7, #3]
 80078a2:	4613      	mov	r3, r2
 80078a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078fc:	b2db      	uxtb	r3, r3
}
 80078fe:	4618      	mov	r0, r3
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b086      	sub	sp, #24
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007926:	2b01      	cmp	r3, #1
 8007928:	d101      	bne.n	800792e <I2C_Slave_ISR_IT+0x24>
 800792a:	2302      	movs	r3, #2
 800792c:	e0e2      	b.n	8007af4 <I2C_Slave_ISR_IT+0x1ea>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f003 0320 	and.w	r3, r3, #32
 800793c:	2b00      	cmp	r3, #0
 800793e:	d009      	beq.n	8007954 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007946:	2b00      	cmp	r3, #0
 8007948:	d004      	beq.n	8007954 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800794a:	6939      	ldr	r1, [r7, #16]
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 fa5d 	bl	8007e0c <I2C_ITSlaveCplt>
 8007952:	e0ca      	b.n	8007aea <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f003 0310 	and.w	r3, r3, #16
 800795a:	2b00      	cmp	r3, #0
 800795c:	d04b      	beq.n	80079f6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007964:	2b00      	cmp	r3, #0
 8007966:	d046      	beq.n	80079f6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d128      	bne.n	80079c4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b28      	cmp	r3, #40	@ 0x28
 800797c:	d108      	bne.n	8007990 <I2C_Slave_ISR_IT+0x86>
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007984:	d104      	bne.n	8007990 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007986:	6939      	ldr	r1, [r7, #16]
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 fba3 	bl	80080d4 <I2C_ITListenCplt>
 800798e:	e031      	b.n	80079f4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b29      	cmp	r3, #41	@ 0x29
 800799a:	d10e      	bne.n	80079ba <I2C_Slave_ISR_IT+0xb0>
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80079a2:	d00a      	beq.n	80079ba <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2210      	movs	r2, #16
 80079aa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fcfc 	bl	80083aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 f9ce 	bl	8007d54 <I2C_ITSlaveSeqCplt>
 80079b8:	e01c      	b.n	80079f4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2210      	movs	r2, #16
 80079c0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80079c2:	e08f      	b.n	8007ae4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2210      	movs	r2, #16
 80079ca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079d0:	f043 0204 	orr.w	r2, r3, #4
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <I2C_Slave_ISR_IT+0xdc>
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079e4:	d17e      	bne.n	8007ae4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ea:	4619      	mov	r1, r3
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 fbc5 	bl	800817c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80079f2:	e077      	b.n	8007ae4 <I2C_Slave_ISR_IT+0x1da>
 80079f4:	e076      	b.n	8007ae4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d02f      	beq.n	8007a60 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d02a      	beq.n	8007a60 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d018      	beq.n	8007a46 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1e:	b2d2      	uxtb	r2, r2
 8007a20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a30:	3b01      	subs	r3, #1
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d14b      	bne.n	8007ae8 <I2C_Slave_ISR_IT+0x1de>
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007a56:	d047      	beq.n	8007ae8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f97b 	bl	8007d54 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007a5e:	e043      	b.n	8007ae8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f003 0308 	and.w	r3, r3, #8
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d009      	beq.n	8007a7e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d004      	beq.n	8007a7e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007a74:	6939      	ldr	r1, [r7, #16]
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 f8e8 	bl	8007c4c <I2C_ITAddrCplt>
 8007a7c:	e035      	b.n	8007aea <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f003 0302 	and.w	r3, r3, #2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d030      	beq.n	8007aea <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d02b      	beq.n	8007aea <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d018      	beq.n	8007ace <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa0:	781a      	ldrb	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007acc:	e00d      	b.n	8007aea <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ad4:	d002      	beq.n	8007adc <I2C_Slave_ISR_IT+0x1d2>
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d106      	bne.n	8007aea <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f939 	bl	8007d54 <I2C_ITSlaveSeqCplt>
 8007ae2:	e002      	b.n	8007aea <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007ae4:	bf00      	nop
 8007ae6:	e000      	b.n	8007aea <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007ae8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	4608      	mov	r0, r1
 8007b06:	4611      	mov	r1, r2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	817b      	strh	r3, [r7, #10]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	813b      	strh	r3, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007b16:	88fb      	ldrh	r3, [r7, #6]
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	8979      	ldrh	r1, [r7, #10]
 8007b1c:	4b20      	ldr	r3, [pc, #128]	@ (8007ba0 <I2C_RequestMemoryWrite+0xa4>)
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 fe45 	bl	80087b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	69b9      	ldr	r1, [r7, #24]
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 fcd6 	bl	80084e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e02c      	b.n	8007b98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b3e:	88fb      	ldrh	r3, [r7, #6]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d105      	bne.n	8007b50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b44:	893b      	ldrh	r3, [r7, #8]
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b4e:	e015      	b.n	8007b7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b50:	893b      	ldrh	r3, [r7, #8]
 8007b52:	0a1b      	lsrs	r3, r3, #8
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	69b9      	ldr	r1, [r7, #24]
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 fcbc 	bl	80084e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e012      	b.n	8007b98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b72:	893b      	ldrh	r3, [r7, #8]
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	2200      	movs	r2, #0
 8007b84:	2180      	movs	r1, #128	@ 0x80
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 fc51 	bl	800842e <I2C_WaitOnFlagUntilTimeout>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e000      	b.n	8007b98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	80002000 	.word	0x80002000

08007ba4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af02      	add	r7, sp, #8
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	4608      	mov	r0, r1
 8007bae:	4611      	mov	r1, r2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	817b      	strh	r3, [r7, #10]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	813b      	strh	r3, [r7, #8]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007bbe:	88fb      	ldrh	r3, [r7, #6]
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	8979      	ldrh	r1, [r7, #10]
 8007bc4:	4b20      	ldr	r3, [pc, #128]	@ (8007c48 <I2C_RequestMemoryRead+0xa4>)
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 fdf2 	bl	80087b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	69b9      	ldr	r1, [r7, #24]
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 fc83 	bl	80084e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e02c      	b.n	8007c3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007be4:	88fb      	ldrh	r3, [r7, #6]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d105      	bne.n	8007bf6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bea:	893b      	ldrh	r3, [r7, #8]
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8007bf4:	e015      	b.n	8007c22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007bf6:	893b      	ldrh	r3, [r7, #8]
 8007bf8:	0a1b      	lsrs	r3, r3, #8
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	69b9      	ldr	r1, [r7, #24]
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 fc69 	bl	80084e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e012      	b.n	8007c3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c18:	893b      	ldrh	r3, [r7, #8]
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2140      	movs	r1, #64	@ 0x40
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 fbfe 	bl	800842e <I2C_WaitOnFlagUntilTimeout>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e000      	b.n	8007c3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	80002000 	.word	0x80002000

08007c4c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007c62:	2b28      	cmp	r3, #40	@ 0x28
 8007c64:	d16a      	bne.n	8007d3c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	0c1b      	lsrs	r3, r3, #16
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	0c1b      	lsrs	r3, r3, #16
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007c84:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c92:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007ca0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d138      	bne.n	8007d1c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007caa:	897b      	ldrh	r3, [r7, #10]
 8007cac:	09db      	lsrs	r3, r3, #7
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	89bb      	ldrh	r3, [r7, #12]
 8007cb2:	4053      	eors	r3, r2
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	f003 0306 	and.w	r3, r3, #6
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d11c      	bne.n	8007cf8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007cbe:	897b      	ldrh	r3, [r7, #10]
 8007cc0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d13b      	bne.n	8007d4c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2208      	movs	r2, #8
 8007ce0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007cea:	89ba      	ldrh	r2, [r7, #12]
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff fdd0 	bl	8007896 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007cf6:	e029      	b.n	8007d4c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007cf8:	893b      	ldrh	r3, [r7, #8]
 8007cfa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007cfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fd89 	bl	8008818 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007d0e:	89ba      	ldrh	r2, [r7, #12]
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff fdbe 	bl	8007896 <HAL_I2C_AddrCallback>
}
 8007d1a:	e017      	b.n	8007d4c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007d1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fd79 	bl	8008818 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007d2e:	89ba      	ldrh	r2, [r7, #12]
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff fdae 	bl	8007896 <HAL_I2C_AddrCallback>
}
 8007d3a:	e007      	b.n	8007d4c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2208      	movs	r2, #8
 8007d42:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007d4c:	bf00      	nop
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d008      	beq.n	8007d88 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	e00c      	b.n	8007da2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d007      	beq.n	8007da2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007da0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b29      	cmp	r3, #41	@ 0x29
 8007dac:	d112      	bne.n	8007dd4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2228      	movs	r2, #40	@ 0x28
 8007db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2221      	movs	r2, #33	@ 0x21
 8007dba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fd2a 	bl	8008818 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff fd4e 	bl	800786e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007dd2:	e017      	b.n	8007e04 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dde:	d111      	bne.n	8007e04 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2228      	movs	r2, #40	@ 0x28
 8007de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2222      	movs	r2, #34	@ 0x22
 8007dec:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007dee:	2102      	movs	r1, #2
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fd11 	bl	8008818 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7ff fd3f 	bl	8007882 <HAL_I2C_SlaveRxCpltCallback>
}
 8007e04:	bf00      	nop
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e26:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e2e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2220      	movs	r2, #32
 8007e36:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007e38:	7afb      	ldrb	r3, [r7, #11]
 8007e3a:	2b21      	cmp	r3, #33	@ 0x21
 8007e3c:	d002      	beq.n	8007e44 <I2C_ITSlaveCplt+0x38>
 8007e3e:	7afb      	ldrb	r3, [r7, #11]
 8007e40:	2b29      	cmp	r3, #41	@ 0x29
 8007e42:	d108      	bne.n	8007e56 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007e44:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fce5 	bl	8008818 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2221      	movs	r2, #33	@ 0x21
 8007e52:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e54:	e019      	b.n	8007e8a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e56:	7afb      	ldrb	r3, [r7, #11]
 8007e58:	2b22      	cmp	r3, #34	@ 0x22
 8007e5a:	d002      	beq.n	8007e62 <I2C_ITSlaveCplt+0x56>
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
 8007e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e60:	d108      	bne.n	8007e74 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007e62:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fcd6 	bl	8008818 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2222      	movs	r2, #34	@ 0x22
 8007e70:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e72:	e00a      	b.n	8007e8a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007e74:	7afb      	ldrb	r3, [r7, #11]
 8007e76:	2b28      	cmp	r3, #40	@ 0x28
 8007e78:	d107      	bne.n	8007e8a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007e7a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fcca 	bl	8008818 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e98:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6859      	ldr	r1, [r3, #4]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4b89      	ldr	r3, [pc, #548]	@ (80080cc <I2C_ITSlaveCplt+0x2c0>)
 8007ea6:	400b      	ands	r3, r1
 8007ea8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa7d 	bl	80083aa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d013      	beq.n	8007ee2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ec8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d01f      	beq.n	8007f12 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ee0:	e017      	b.n	8007f12 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d012      	beq.n	8007f12 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007efa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d006      	beq.n	8007f12 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d020      	beq.n	8007f5e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f023 0304 	bic.w	r3, r3, #4
 8007f22:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00c      	beq.n	8007f5e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	3b01      	subs	r3, #1
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d005      	beq.n	8007f74 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f6c:	f043 0204 	orr.w	r2, r3, #4
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f003 0310 	and.w	r3, r3, #16
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d049      	beq.n	8008012 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d044      	beq.n	8008012 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d128      	bne.n	8007fe4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b28      	cmp	r3, #40	@ 0x28
 8007f9c:	d108      	bne.n	8007fb0 <I2C_ITSlaveCplt+0x1a4>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fa4:	d104      	bne.n	8007fb0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007fa6:	6979      	ldr	r1, [r7, #20]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f893 	bl	80080d4 <I2C_ITListenCplt>
 8007fae:	e030      	b.n	8008012 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b29      	cmp	r3, #41	@ 0x29
 8007fba:	d10e      	bne.n	8007fda <I2C_ITSlaveCplt+0x1ce>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007fc2:	d00a      	beq.n	8007fda <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2210      	movs	r2, #16
 8007fca:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f9ec 	bl	80083aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff febe 	bl	8007d54 <I2C_ITSlaveSeqCplt>
 8007fd8:	e01b      	b.n	8008012 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2210      	movs	r2, #16
 8007fe0:	61da      	str	r2, [r3, #28]
 8007fe2:	e016      	b.n	8008012 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2210      	movs	r2, #16
 8007fea:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ff0:	f043 0204 	orr.w	r2, r3, #4
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <I2C_ITSlaveCplt+0x1fa>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008004:	d105      	bne.n	8008012 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f8b5 	bl	800817c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008024:	2b00      	cmp	r3, #0
 8008026:	d010      	beq.n	800804a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f8a4 	bl	800817c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b28      	cmp	r3, #40	@ 0x28
 800803e:	d141      	bne.n	80080c4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008040:	6979      	ldr	r1, [r7, #20]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f846 	bl	80080d4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008048:	e03c      	b.n	80080c4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008052:	d014      	beq.n	800807e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff fe7d 	bl	8007d54 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a1c      	ldr	r2, [pc, #112]	@ (80080d0 <I2C_ITSlaveCplt+0x2c4>)
 800805e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff fc1b 	bl	80078b2 <HAL_I2C_ListenCpltCallback>
}
 800807c:	e022      	b.n	80080c4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b22      	cmp	r3, #34	@ 0x22
 8008088:	d10e      	bne.n	80080a8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2220      	movs	r2, #32
 800808e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff fbee 	bl	8007882 <HAL_I2C_SlaveRxCpltCallback>
}
 80080a6:	e00d      	b.n	80080c4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2220      	movs	r2, #32
 80080ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff fbd5 	bl	800786e <HAL_I2C_SlaveTxCpltCallback>
}
 80080c4:	bf00      	nop
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	fe00e800 	.word	0xfe00e800
 80080d0:	ffff0000 	.word	0xffff0000

080080d4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a25      	ldr	r2, [pc, #148]	@ (8008178 <I2C_ITListenCplt+0xa4>)
 80080e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b00      	cmp	r3, #0
 8008108:	d022      	beq.n	8008150 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008114:	b2d2      	uxtb	r2, r2
 8008116:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008126:	2b00      	cmp	r3, #0
 8008128:	d012      	beq.n	8008150 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800812e:	3b01      	subs	r3, #1
 8008130:	b29a      	uxth	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800813a:	b29b      	uxth	r3, r3
 800813c:	3b01      	subs	r3, #1
 800813e:	b29a      	uxth	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008148:	f043 0204 	orr.w	r2, r3, #4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008150:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fb5f 	bl	8008818 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2210      	movs	r2, #16
 8008160:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7ff fba1 	bl	80078b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	ffff0000 	.word	0xffff0000

0800817c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800818c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a6d      	ldr	r2, [pc, #436]	@ (8008350 <I2C_ITError+0x1d4>)
 800819a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	431a      	orrs	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	2b28      	cmp	r3, #40	@ 0x28
 80081b2:	d005      	beq.n	80081c0 <I2C_ITError+0x44>
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	2b29      	cmp	r3, #41	@ 0x29
 80081b8:	d002      	beq.n	80081c0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80081be:	d10b      	bne.n	80081d8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80081c0:	2103      	movs	r1, #3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fb28 	bl	8008818 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2228      	movs	r2, #40	@ 0x28
 80081cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a60      	ldr	r2, [pc, #384]	@ (8008354 <I2C_ITError+0x1d8>)
 80081d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80081d6:	e030      	b.n	800823a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80081d8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fb1b 	bl	8008818 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f8e1 	bl	80083aa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b60      	cmp	r3, #96	@ 0x60
 80081f2:	d01f      	beq.n	8008234 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	f003 0320 	and.w	r3, r3, #32
 8008206:	2b20      	cmp	r3, #32
 8008208:	d114      	bne.n	8008234 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	f003 0310 	and.w	r3, r3, #16
 8008214:	2b10      	cmp	r3, #16
 8008216:	d109      	bne.n	800822c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2210      	movs	r2, #16
 800821e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008224:	f043 0204 	orr.w	r2, r3, #4
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2220      	movs	r2, #32
 8008232:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008244:	2b00      	cmp	r3, #0
 8008246:	d039      	beq.n	80082bc <I2C_ITError+0x140>
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b11      	cmp	r3, #17
 800824c:	d002      	beq.n	8008254 <I2C_ITError+0xd8>
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	2b21      	cmp	r3, #33	@ 0x21
 8008252:	d133      	bne.n	80082bc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800825e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008262:	d107      	bne.n	8008274 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008272:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe f90e 	bl	800649a <HAL_DMA_GetState>
 800827e:	4603      	mov	r3, r0
 8008280:	2b01      	cmp	r3, #1
 8008282:	d017      	beq.n	80082b4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008288:	4a33      	ldr	r2, [pc, #204]	@ (8008358 <I2C_ITError+0x1dc>)
 800828a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008298:	4618      	mov	r0, r3
 800829a:	f7fd ffe8 	bl	800626e <HAL_DMA_Abort_IT>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d04d      	beq.n	8008340 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80082ae:	4610      	mov	r0, r2
 80082b0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80082b2:	e045      	b.n	8008340 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f851 	bl	800835c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80082ba:	e041      	b.n	8008340 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d039      	beq.n	8008338 <I2C_ITError+0x1bc>
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b12      	cmp	r3, #18
 80082c8:	d002      	beq.n	80082d0 <I2C_ITError+0x154>
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2b22      	cmp	r3, #34	@ 0x22
 80082ce:	d133      	bne.n	8008338 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082de:	d107      	bne.n	80082f0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fe f8d0 	bl	800649a <HAL_DMA_GetState>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d017      	beq.n	8008330 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008304:	4a14      	ldr	r2, [pc, #80]	@ (8008358 <I2C_ITError+0x1dc>)
 8008306:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008314:	4618      	mov	r0, r3
 8008316:	f7fd ffaa 	bl	800626e <HAL_DMA_Abort_IT>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d011      	beq.n	8008344 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800832a:	4610      	mov	r0, r2
 800832c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800832e:	e009      	b.n	8008344 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f813 	bl	800835c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008336:	e005      	b.n	8008344 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f80f 	bl	800835c <I2C_TreatErrorCallback>
  }
}
 800833e:	e002      	b.n	8008346 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008340:	bf00      	nop
 8008342:	e000      	b.n	8008346 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008344:	bf00      	nop
}
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	ffff0000 	.word	0xffff0000
 8008354:	0800790b 	.word	0x0800790b
 8008358:	080083f3 	.word	0x080083f3

0800835c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b60      	cmp	r3, #96	@ 0x60
 800836e:	d10e      	bne.n	800838e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2220      	movs	r2, #32
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff faa7 	bl	80078da <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800838c:	e009      	b.n	80083a2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff fa92 	bl	80078c6 <HAL_I2C_ErrorCallback>
}
 80083a2:	bf00      	nop
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d103      	bne.n	80083c8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2200      	movs	r2, #0
 80083c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d007      	beq.n	80083e6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	699a      	ldr	r2, [r3, #24]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f042 0201 	orr.w	r2, r2, #1
 80083e4:	619a      	str	r2, [r3, #24]
  }
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008404:	2b00      	cmp	r3, #0
 8008406:	d003      	beq.n	8008410 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840c:	2200      	movs	r2, #0
 800840e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008414:	2b00      	cmp	r3, #0
 8008416:	d003      	beq.n	8008420 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841c:	2200      	movs	r2, #0
 800841e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f7ff ff9b 	bl	800835c <I2C_TreatErrorCallback>
}
 8008426:	bf00      	nop
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	60f8      	str	r0, [r7, #12]
 8008436:	60b9      	str	r1, [r7, #8]
 8008438:	603b      	str	r3, [r7, #0]
 800843a:	4613      	mov	r3, r2
 800843c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800843e:	e03b      	b.n	80084b8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 f8d5 	bl	80085f4 <I2C_IsErrorOccurred>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e041      	b.n	80084d8 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845a:	d02d      	beq.n	80084b8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800845c:	f7fd fcc8 	bl	8005df0 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d302      	bcc.n	8008472 <I2C_WaitOnFlagUntilTimeout+0x44>
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d122      	bne.n	80084b8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	699a      	ldr	r2, [r3, #24]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	4013      	ands	r3, r2
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	429a      	cmp	r2, r3
 8008480:	bf0c      	ite	eq
 8008482:	2301      	moveq	r3, #1
 8008484:	2300      	movne	r3, #0
 8008486:	b2db      	uxtb	r3, r3
 8008488:	461a      	mov	r2, r3
 800848a:	79fb      	ldrb	r3, [r7, #7]
 800848c:	429a      	cmp	r2, r3
 800848e:	d113      	bne.n	80084b8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008494:	f043 0220 	orr.w	r2, r3, #32
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2220      	movs	r2, #32
 80084a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e00f      	b.n	80084d8 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699a      	ldr	r2, [r3, #24]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	4013      	ands	r3, r2
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	bf0c      	ite	eq
 80084c8:	2301      	moveq	r3, #1
 80084ca:	2300      	movne	r3, #0
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	461a      	mov	r2, r3
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d0b4      	beq.n	8008440 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80084ec:	e033      	b.n	8008556 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	68b9      	ldr	r1, [r7, #8]
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f000 f87e 	bl	80085f4 <I2C_IsErrorOccurred>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e031      	b.n	8008566 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008508:	d025      	beq.n	8008556 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800850a:	f7fd fc71 	bl	8005df0 <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	429a      	cmp	r2, r3
 8008518:	d302      	bcc.n	8008520 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d11a      	bne.n	8008556 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b02      	cmp	r3, #2
 800852c:	d013      	beq.n	8008556 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008532:	f043 0220 	orr.w	r2, r3, #32
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2220      	movs	r2, #32
 800853e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e007      	b.n	8008566 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	f003 0302 	and.w	r3, r3, #2
 8008560:	2b02      	cmp	r3, #2
 8008562:	d1c4      	bne.n	80084ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800857a:	e02f      	b.n	80085dc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	68b9      	ldr	r1, [r7, #8]
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 f837 	bl	80085f4 <I2C_IsErrorOccurred>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e02d      	b.n	80085ec <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008590:	f7fd fc2e 	bl	8005df0 <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	429a      	cmp	r2, r3
 800859e:	d302      	bcc.n	80085a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d11a      	bne.n	80085dc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	f003 0320 	and.w	r3, r3, #32
 80085b0:	2b20      	cmp	r3, #32
 80085b2:	d013      	beq.n	80085dc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b8:	f043 0220 	orr.w	r2, r3, #32
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2220      	movs	r2, #32
 80085c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e007      	b.n	80085ec <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	f003 0320 	and.w	r3, r3, #32
 80085e6:	2b20      	cmp	r3, #32
 80085e8:	d1c8      	bne.n	800857c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08a      	sub	sp, #40	@ 0x28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	2b00      	cmp	r3, #0
 800861e:	d068      	beq.n	80086f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2210      	movs	r2, #16
 8008626:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008628:	e049      	b.n	80086be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008630:	d045      	beq.n	80086be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008632:	f7fd fbdd 	bl	8005df0 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	429a      	cmp	r2, r3
 8008640:	d302      	bcc.n	8008648 <I2C_IsErrorOccurred+0x54>
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d13a      	bne.n	80086be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008652:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800865a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800866a:	d121      	bne.n	80086b0 <I2C_IsErrorOccurred+0xbc>
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008672:	d01d      	beq.n	80086b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008674:	7cfb      	ldrb	r3, [r7, #19]
 8008676:	2b20      	cmp	r3, #32
 8008678:	d01a      	beq.n	80086b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008688:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800868a:	f7fd fbb1 	bl	8005df0 <HAL_GetTick>
 800868e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008690:	e00e      	b.n	80086b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008692:	f7fd fbad 	bl	8005df0 <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	2b19      	cmp	r3, #25
 800869e:	d907      	bls.n	80086b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	f043 0320 	orr.w	r3, r3, #32
 80086a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80086ae:	e006      	b.n	80086be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b20      	cmp	r3, #32
 80086bc:	d1e9      	bne.n	8008692 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	f003 0320 	and.w	r3, r3, #32
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d003      	beq.n	80086d4 <I2C_IsErrorOccurred+0xe0>
 80086cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0aa      	beq.n	800862a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80086d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d103      	bne.n	80086e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2220      	movs	r2, #32
 80086e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	f043 0304 	orr.w	r3, r3, #4
 80086ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00b      	beq.n	800871c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	f043 0301 	orr.w	r3, r3, #1
 800870a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	f043 0308 	orr.w	r3, r3, #8
 800872c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008736:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00b      	beq.n	8008760 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	f043 0302 	orr.w	r3, r3, #2
 800874e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008758:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008764:	2b00      	cmp	r3, #0
 8008766:	d01c      	beq.n	80087a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f7ff fe1e 	bl	80083aa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6859      	ldr	r1, [r3, #4]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	4b0d      	ldr	r3, [pc, #52]	@ (80087b0 <I2C_IsErrorOccurred+0x1bc>)
 800877a:	400b      	ands	r3, r1
 800877c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	431a      	orrs	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2220      	movs	r2, #32
 800878e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80087a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3728      	adds	r7, #40	@ 0x28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	fe00e800 	.word	0xfe00e800

080087b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b087      	sub	sp, #28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	607b      	str	r3, [r7, #4]
 80087be:	460b      	mov	r3, r1
 80087c0:	817b      	strh	r3, [r7, #10]
 80087c2:	4613      	mov	r3, r2
 80087c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087c6:	897b      	ldrh	r3, [r7, #10]
 80087c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087cc:	7a7b      	ldrb	r3, [r7, #9]
 80087ce:	041b      	lsls	r3, r3, #16
 80087d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	4313      	orrs	r3, r2
 80087de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	0d5b      	lsrs	r3, r3, #21
 80087ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80087f2:	4b08      	ldr	r3, [pc, #32]	@ (8008814 <I2C_TransferConfig+0x60>)
 80087f4:	430b      	orrs	r3, r1
 80087f6:	43db      	mvns	r3, r3
 80087f8:	ea02 0103 	and.w	r1, r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	430a      	orrs	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008806:	bf00      	nop
 8008808:	371c      	adds	r7, #28
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	03ff63ff 	.word	0x03ff63ff

08008818 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008824:	2300      	movs	r3, #0
 8008826:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008828:	887b      	ldrh	r3, [r7, #2]
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00f      	beq.n	8008852 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008838:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008840:	b2db      	uxtb	r3, r3
 8008842:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008846:	2b28      	cmp	r3, #40	@ 0x28
 8008848:	d003      	beq.n	8008852 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008850:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008852:	887b      	ldrh	r3, [r7, #2]
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00f      	beq.n	800887c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008862:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800886a:	b2db      	uxtb	r3, r3
 800886c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008870:	2b28      	cmp	r3, #40	@ 0x28
 8008872:	d003      	beq.n	800887c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800887a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800887c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008880:	2b00      	cmp	r3, #0
 8008882:	da03      	bge.n	800888c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800888a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800888c:	887b      	ldrh	r3, [r7, #2]
 800888e:	2b10      	cmp	r3, #16
 8008890:	d103      	bne.n	800889a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008898:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800889a:	887b      	ldrh	r3, [r7, #2]
 800889c:	2b20      	cmp	r3, #32
 800889e:	d103      	bne.n	80088a8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f043 0320 	orr.w	r3, r3, #32
 80088a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80088a8:	887b      	ldrh	r3, [r7, #2]
 80088aa:	2b40      	cmp	r3, #64	@ 0x40
 80088ac:	d103      	bne.n	80088b6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6819      	ldr	r1, [r3, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	43da      	mvns	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	400a      	ands	r2, r1
 80088c6:	601a      	str	r2, [r3, #0]
}
 80088c8:	bf00      	nop
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b20      	cmp	r3, #32
 80088e8:	d138      	bne.n	800895c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e032      	b.n	800895e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2224      	movs	r2, #36	@ 0x24
 8008904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0201 	bic.w	r2, r2, #1
 8008916:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008926:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6819      	ldr	r1, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0201 	orr.w	r2, r2, #1
 8008946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2220      	movs	r2, #32
 800894c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	e000      	b.n	800895e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800895c:	2302      	movs	r3, #2
  }
}
 800895e:	4618      	mov	r0, r3
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800896a:	b480      	push	{r7}
 800896c:	b085      	sub	sp, #20
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b20      	cmp	r3, #32
 800897e:	d139      	bne.n	80089f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008986:	2b01      	cmp	r3, #1
 8008988:	d101      	bne.n	800898e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800898a:	2302      	movs	r3, #2
 800898c:	e033      	b.n	80089f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2224      	movs	r2, #36	@ 0x24
 800899a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0201 	bic.w	r2, r2, #1
 80089ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80089bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	021b      	lsls	r3, r3, #8
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f042 0201 	orr.w	r2, r2, #1
 80089de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2220      	movs	r2, #32
 80089e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	e000      	b.n	80089f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80089f4:	2302      	movs	r3, #2
  }
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
	...

08008a04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d141      	bne.n	8008a96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a12:	4b4b      	ldr	r3, [pc, #300]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a1e:	d131      	bne.n	8008a84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a20:	4b47      	ldr	r3, [pc, #284]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a26:	4a46      	ldr	r2, [pc, #280]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a30:	4b43      	ldr	r3, [pc, #268]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008a38:	4a41      	ldr	r2, [pc, #260]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a40:	4b40      	ldr	r3, [pc, #256]	@ (8008b44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2232      	movs	r2, #50	@ 0x32
 8008a46:	fb02 f303 	mul.w	r3, r2, r3
 8008a4a:	4a3f      	ldr	r2, [pc, #252]	@ (8008b48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a50:	0c9b      	lsrs	r3, r3, #18
 8008a52:	3301      	adds	r3, #1
 8008a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a56:	e002      	b.n	8008a5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a5e:	4b38      	ldr	r3, [pc, #224]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a6a:	d102      	bne.n	8008a72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1f2      	bne.n	8008a58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a72:	4b33      	ldr	r3, [pc, #204]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a7e:	d158      	bne.n	8008b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e057      	b.n	8008b34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a84:	4b2e      	ldr	r3, [pc, #184]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a8a:	4a2d      	ldr	r2, [pc, #180]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008a94:	e04d      	b.n	8008b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a9c:	d141      	bne.n	8008b22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a9e:	4b28      	ldr	r3, [pc, #160]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aaa:	d131      	bne.n	8008b10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008aac:	4b24      	ldr	r3, [pc, #144]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ab2:	4a23      	ldr	r2, [pc, #140]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ab8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008abc:	4b20      	ldr	r3, [pc, #128]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008ac4:	4a1e      	ldr	r2, [pc, #120]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ac6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008aca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008acc:	4b1d      	ldr	r3, [pc, #116]	@ (8008b44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2232      	movs	r2, #50	@ 0x32
 8008ad2:	fb02 f303 	mul.w	r3, r2, r3
 8008ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8008b48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8008adc:	0c9b      	lsrs	r3, r3, #18
 8008ade:	3301      	adds	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008ae2:	e002      	b.n	8008aea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008aea:	4b15      	ldr	r3, [pc, #84]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008af6:	d102      	bne.n	8008afe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1f2      	bne.n	8008ae4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008afe:	4b10      	ldr	r3, [pc, #64]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b0a:	d112      	bne.n	8008b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e011      	b.n	8008b34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b10:	4b0b      	ldr	r3, [pc, #44]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b16:	4a0a      	ldr	r2, [pc, #40]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008b20:	e007      	b.n	8008b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008b22:	4b07      	ldr	r3, [pc, #28]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008b2a:	4a05      	ldr	r2, [pc, #20]	@ (8008b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008b30:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	40007000 	.word	0x40007000
 8008b44:	20000000 	.word	0x20000000
 8008b48:	431bde83 	.word	0x431bde83

08008b4c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008b50:	4b05      	ldr	r3, [pc, #20]	@ (8008b68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	4a04      	ldr	r2, [pc, #16]	@ (8008b68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008b56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b5a:	6093      	str	r3, [r2, #8]
}
 8008b5c:	bf00      	nop
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	40007000 	.word	0x40007000

08008b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e2fe      	b.n	800917c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d075      	beq.n	8008c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b8a:	4b97      	ldr	r3, [pc, #604]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f003 030c 	and.w	r3, r3, #12
 8008b92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b94:	4b94      	ldr	r3, [pc, #592]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	f003 0303 	and.w	r3, r3, #3
 8008b9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	2b0c      	cmp	r3, #12
 8008ba2:	d102      	bne.n	8008baa <HAL_RCC_OscConfig+0x3e>
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d002      	beq.n	8008bb0 <HAL_RCC_OscConfig+0x44>
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	2b08      	cmp	r3, #8
 8008bae:	d10b      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bb0:	4b8d      	ldr	r3, [pc, #564]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d05b      	beq.n	8008c74 <HAL_RCC_OscConfig+0x108>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d157      	bne.n	8008c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e2d9      	b.n	800917c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bd0:	d106      	bne.n	8008be0 <HAL_RCC_OscConfig+0x74>
 8008bd2:	4b85      	ldr	r3, [pc, #532]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a84      	ldr	r2, [pc, #528]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	e01d      	b.n	8008c1c <HAL_RCC_OscConfig+0xb0>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008be8:	d10c      	bne.n	8008c04 <HAL_RCC_OscConfig+0x98>
 8008bea:	4b7f      	ldr	r3, [pc, #508]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a7e      	ldr	r2, [pc, #504]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008bf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a7b      	ldr	r2, [pc, #492]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	e00b      	b.n	8008c1c <HAL_RCC_OscConfig+0xb0>
 8008c04:	4b78      	ldr	r3, [pc, #480]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a77      	ldr	r2, [pc, #476]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	4b75      	ldr	r3, [pc, #468]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a74      	ldr	r2, [pc, #464]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008c16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d013      	beq.n	8008c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c24:	f7fd f8e4 	bl	8005df0 <HAL_GetTick>
 8008c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c2a:	e008      	b.n	8008c3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c2c:	f7fd f8e0 	bl	8005df0 <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b64      	cmp	r3, #100	@ 0x64
 8008c38:	d901      	bls.n	8008c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e29e      	b.n	800917c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0f0      	beq.n	8008c2c <HAL_RCC_OscConfig+0xc0>
 8008c4a:	e014      	b.n	8008c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c4c:	f7fd f8d0 	bl	8005df0 <HAL_GetTick>
 8008c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c52:	e008      	b.n	8008c66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c54:	f7fd f8cc 	bl	8005df0 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	2b64      	cmp	r3, #100	@ 0x64
 8008c60:	d901      	bls.n	8008c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e28a      	b.n	800917c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c66:	4b60      	ldr	r3, [pc, #384]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1f0      	bne.n	8008c54 <HAL_RCC_OscConfig+0xe8>
 8008c72:	e000      	b.n	8008c76 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d075      	beq.n	8008d6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c82:	4b59      	ldr	r3, [pc, #356]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f003 030c 	and.w	r3, r3, #12
 8008c8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c8c:	4b56      	ldr	r3, [pc, #344]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f003 0303 	and.w	r3, r3, #3
 8008c94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	2b0c      	cmp	r3, #12
 8008c9a:	d102      	bne.n	8008ca2 <HAL_RCC_OscConfig+0x136>
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d002      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x13c>
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	2b04      	cmp	r3, #4
 8008ca6:	d11f      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d005      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x154>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e25d      	b.n	800917c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cc0:	4b49      	ldr	r3, [pc, #292]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	061b      	lsls	r3, r3, #24
 8008cce:	4946      	ldr	r1, [pc, #280]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008cd4:	4b45      	ldr	r3, [pc, #276]	@ (8008dec <HAL_RCC_OscConfig+0x280>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fd f83d 	bl	8005d58 <HAL_InitTick>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d043      	beq.n	8008d6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e249      	b.n	800917c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d023      	beq.n	8008d38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a3c      	ldr	r2, [pc, #240]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cfc:	f7fd f878 	bl	8005df0 <HAL_GetTick>
 8008d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d02:	e008      	b.n	8008d16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d04:	f7fd f874 	bl	8005df0 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d901      	bls.n	8008d16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e232      	b.n	800917c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d16:	4b34      	ldr	r3, [pc, #208]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0f0      	beq.n	8008d04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d22:	4b31      	ldr	r3, [pc, #196]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	061b      	lsls	r3, r3, #24
 8008d30:	492d      	ldr	r1, [pc, #180]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	604b      	str	r3, [r1, #4]
 8008d36:	e01a      	b.n	8008d6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d38:	4b2b      	ldr	r3, [pc, #172]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008d3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d44:	f7fd f854 	bl	8005df0 <HAL_GetTick>
 8008d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d4a:	e008      	b.n	8008d5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d4c:	f7fd f850 	bl	8005df0 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e20e      	b.n	800917c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d5e:	4b22      	ldr	r3, [pc, #136]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1f0      	bne.n	8008d4c <HAL_RCC_OscConfig+0x1e0>
 8008d6a:	e000      	b.n	8008d6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0308 	and.w	r3, r3, #8
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d041      	beq.n	8008dfe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d01c      	beq.n	8008dbc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d82:	4b19      	ldr	r3, [pc, #100]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d88:	4a17      	ldr	r2, [pc, #92]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008d8a:	f043 0301 	orr.w	r3, r3, #1
 8008d8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d92:	f7fd f82d 	bl	8005df0 <HAL_GetTick>
 8008d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008d98:	e008      	b.n	8008dac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d9a:	f7fd f829 	bl	8005df0 <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d901      	bls.n	8008dac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e1e7      	b.n	800917c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008dac:	4b0e      	ldr	r3, [pc, #56]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d0ef      	beq.n	8008d9a <HAL_RCC_OscConfig+0x22e>
 8008dba:	e020      	b.n	8008dfe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dc2:	4a09      	ldr	r2, [pc, #36]	@ (8008de8 <HAL_RCC_OscConfig+0x27c>)
 8008dc4:	f023 0301 	bic.w	r3, r3, #1
 8008dc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dcc:	f7fd f810 	bl	8005df0 <HAL_GetTick>
 8008dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008dd2:	e00d      	b.n	8008df0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008dd4:	f7fd f80c 	bl	8005df0 <HAL_GetTick>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d906      	bls.n	8008df0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e1ca      	b.n	800917c <HAL_RCC_OscConfig+0x610>
 8008de6:	bf00      	nop
 8008de8:	40021000 	.word	0x40021000
 8008dec:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008df0:	4b8c      	ldr	r3, [pc, #560]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1ea      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0304 	and.w	r3, r3, #4
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 80a6 	beq.w	8008f58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008e10:	4b84      	ldr	r3, [pc, #528]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <HAL_RCC_OscConfig+0x2b4>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e000      	b.n	8008e22 <HAL_RCC_OscConfig+0x2b6>
 8008e20:	2300      	movs	r3, #0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00d      	beq.n	8008e42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e26:	4b7f      	ldr	r3, [pc, #508]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e2a:	4a7e      	ldr	r2, [pc, #504]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e32:	4b7c      	ldr	r3, [pc, #496]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e42:	4b79      	ldr	r3, [pc, #484]	@ (8009028 <HAL_RCC_OscConfig+0x4bc>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d118      	bne.n	8008e80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e4e:	4b76      	ldr	r3, [pc, #472]	@ (8009028 <HAL_RCC_OscConfig+0x4bc>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a75      	ldr	r2, [pc, #468]	@ (8009028 <HAL_RCC_OscConfig+0x4bc>)
 8008e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e5a:	f7fc ffc9 	bl	8005df0 <HAL_GetTick>
 8008e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e60:	e008      	b.n	8008e74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e62:	f7fc ffc5 	bl	8005df0 <HAL_GetTick>
 8008e66:	4602      	mov	r2, r0
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d901      	bls.n	8008e74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e183      	b.n	800917c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e74:	4b6c      	ldr	r3, [pc, #432]	@ (8009028 <HAL_RCC_OscConfig+0x4bc>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0f0      	beq.n	8008e62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d108      	bne.n	8008e9a <HAL_RCC_OscConfig+0x32e>
 8008e88:	4b66      	ldr	r3, [pc, #408]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e8e:	4a65      	ldr	r2, [pc, #404]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008e90:	f043 0301 	orr.w	r3, r3, #1
 8008e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008e98:	e024      	b.n	8008ee4 <HAL_RCC_OscConfig+0x378>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	2b05      	cmp	r3, #5
 8008ea0:	d110      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x358>
 8008ea2:	4b60      	ldr	r3, [pc, #384]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ea8:	4a5e      	ldr	r2, [pc, #376]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008eaa:	f043 0304 	orr.w	r3, r3, #4
 8008eae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eb8:	4a5a      	ldr	r2, [pc, #360]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008eba:	f043 0301 	orr.w	r3, r3, #1
 8008ebe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ec2:	e00f      	b.n	8008ee4 <HAL_RCC_OscConfig+0x378>
 8008ec4:	4b57      	ldr	r3, [pc, #348]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eca:	4a56      	ldr	r2, [pc, #344]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008ecc:	f023 0301 	bic.w	r3, r3, #1
 8008ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ed4:	4b53      	ldr	r3, [pc, #332]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eda:	4a52      	ldr	r2, [pc, #328]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008edc:	f023 0304 	bic.w	r3, r3, #4
 8008ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d016      	beq.n	8008f1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eec:	f7fc ff80 	bl	8005df0 <HAL_GetTick>
 8008ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ef2:	e00a      	b.n	8008f0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ef4:	f7fc ff7c 	bl	8005df0 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d901      	bls.n	8008f0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e138      	b.n	800917c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f0a:	4b46      	ldr	r3, [pc, #280]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f10:	f003 0302 	and.w	r3, r3, #2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d0ed      	beq.n	8008ef4 <HAL_RCC_OscConfig+0x388>
 8008f18:	e015      	b.n	8008f46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f1a:	f7fc ff69 	bl	8005df0 <HAL_GetTick>
 8008f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f20:	e00a      	b.n	8008f38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f22:	f7fc ff65 	bl	8005df0 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d901      	bls.n	8008f38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e121      	b.n	800917c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f38:	4b3a      	ldr	r3, [pc, #232]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1ed      	bne.n	8008f22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008f46:	7ffb      	ldrb	r3, [r7, #31]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d105      	bne.n	8008f58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f4c:	4b35      	ldr	r3, [pc, #212]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f50:	4a34      	ldr	r2, [pc, #208]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f56:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0320 	and.w	r3, r3, #32
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d03c      	beq.n	8008fde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d01c      	beq.n	8008fa6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008f6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f72:	4a2c      	ldr	r2, [pc, #176]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008f74:	f043 0301 	orr.w	r3, r3, #1
 8008f78:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f7c:	f7fc ff38 	bl	8005df0 <HAL_GetTick>
 8008f80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008f82:	e008      	b.n	8008f96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f84:	f7fc ff34 	bl	8005df0 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d901      	bls.n	8008f96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e0f2      	b.n	800917c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008f96:	4b23      	ldr	r3, [pc, #140]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d0ef      	beq.n	8008f84 <HAL_RCC_OscConfig+0x418>
 8008fa4:	e01b      	b.n	8008fde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fac:	4a1d      	ldr	r2, [pc, #116]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008fae:	f023 0301 	bic.w	r3, r3, #1
 8008fb2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fb6:	f7fc ff1b 	bl	8005df0 <HAL_GetTick>
 8008fba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008fbc:	e008      	b.n	8008fd0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fbe:	f7fc ff17 	bl	8005df0 <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d901      	bls.n	8008fd0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e0d5      	b.n	800917c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008fd0:	4b14      	ldr	r3, [pc, #80]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1ef      	bne.n	8008fbe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 80c9 	beq.w	800917a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f003 030c 	and.w	r3, r3, #12
 8008ff0:	2b0c      	cmp	r3, #12
 8008ff2:	f000 8083 	beq.w	80090fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	69db      	ldr	r3, [r3, #28]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d15e      	bne.n	80090bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ffe:	4b09      	ldr	r3, [pc, #36]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a08      	ldr	r2, [pc, #32]	@ (8009024 <HAL_RCC_OscConfig+0x4b8>)
 8009004:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800900a:	f7fc fef1 	bl	8005df0 <HAL_GetTick>
 800900e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009010:	e00c      	b.n	800902c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009012:	f7fc feed 	bl	8005df0 <HAL_GetTick>
 8009016:	4602      	mov	r2, r0
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	2b02      	cmp	r3, #2
 800901e:	d905      	bls.n	800902c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e0ab      	b.n	800917c <HAL_RCC_OscConfig+0x610>
 8009024:	40021000 	.word	0x40021000
 8009028:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800902c:	4b55      	ldr	r3, [pc, #340]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1ec      	bne.n	8009012 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009038:	4b52      	ldr	r3, [pc, #328]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 800903a:	68da      	ldr	r2, [r3, #12]
 800903c:	4b52      	ldr	r3, [pc, #328]	@ (8009188 <HAL_RCC_OscConfig+0x61c>)
 800903e:	4013      	ands	r3, r2
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	6a11      	ldr	r1, [r2, #32]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009048:	3a01      	subs	r2, #1
 800904a:	0112      	lsls	r2, r2, #4
 800904c:	4311      	orrs	r1, r2
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009052:	0212      	lsls	r2, r2, #8
 8009054:	4311      	orrs	r1, r2
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800905a:	0852      	lsrs	r2, r2, #1
 800905c:	3a01      	subs	r2, #1
 800905e:	0552      	lsls	r2, r2, #21
 8009060:	4311      	orrs	r1, r2
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009066:	0852      	lsrs	r2, r2, #1
 8009068:	3a01      	subs	r2, #1
 800906a:	0652      	lsls	r2, r2, #25
 800906c:	4311      	orrs	r1, r2
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009072:	06d2      	lsls	r2, r2, #27
 8009074:	430a      	orrs	r2, r1
 8009076:	4943      	ldr	r1, [pc, #268]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 8009078:	4313      	orrs	r3, r2
 800907a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800907c:	4b41      	ldr	r3, [pc, #260]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a40      	ldr	r2, [pc, #256]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 8009082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009086:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009088:	4b3e      	ldr	r3, [pc, #248]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	4a3d      	ldr	r2, [pc, #244]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 800908e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009092:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009094:	f7fc feac 	bl	8005df0 <HAL_GetTick>
 8009098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800909a:	e008      	b.n	80090ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800909c:	f7fc fea8 	bl	8005df0 <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d901      	bls.n	80090ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80090aa:	2303      	movs	r3, #3
 80090ac:	e066      	b.n	800917c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090ae:	4b35      	ldr	r3, [pc, #212]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0f0      	beq.n	800909c <HAL_RCC_OscConfig+0x530>
 80090ba:	e05e      	b.n	800917a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090bc:	4b31      	ldr	r3, [pc, #196]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a30      	ldr	r2, [pc, #192]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 80090c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090c8:	f7fc fe92 	bl	8005df0 <HAL_GetTick>
 80090cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090ce:	e008      	b.n	80090e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090d0:	f7fc fe8e 	bl	8005df0 <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d901      	bls.n	80090e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e04c      	b.n	800917c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090e2:	4b28      	ldr	r3, [pc, #160]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1f0      	bne.n	80090d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80090ee:	4b25      	ldr	r3, [pc, #148]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 80090f0:	68da      	ldr	r2, [r3, #12]
 80090f2:	4924      	ldr	r1, [pc, #144]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 80090f4:	4b25      	ldr	r3, [pc, #148]	@ (800918c <HAL_RCC_OscConfig+0x620>)
 80090f6:	4013      	ands	r3, r2
 80090f8:	60cb      	str	r3, [r1, #12]
 80090fa:	e03e      	b.n	800917a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d101      	bne.n	8009108 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e039      	b.n	800917c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009108:	4b1e      	ldr	r3, [pc, #120]	@ (8009184 <HAL_RCC_OscConfig+0x618>)
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f003 0203 	and.w	r2, r3, #3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a1b      	ldr	r3, [r3, #32]
 8009118:	429a      	cmp	r2, r3
 800911a:	d12c      	bne.n	8009176 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009126:	3b01      	subs	r3, #1
 8009128:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800912a:	429a      	cmp	r2, r3
 800912c:	d123      	bne.n	8009176 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009138:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800913a:	429a      	cmp	r2, r3
 800913c:	d11b      	bne.n	8009176 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009148:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800914a:	429a      	cmp	r2, r3
 800914c:	d113      	bne.n	8009176 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009158:	085b      	lsrs	r3, r3, #1
 800915a:	3b01      	subs	r3, #1
 800915c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800915e:	429a      	cmp	r2, r3
 8009160:	d109      	bne.n	8009176 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800916c:	085b      	lsrs	r3, r3, #1
 800916e:	3b01      	subs	r3, #1
 8009170:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009172:	429a      	cmp	r2, r3
 8009174:	d001      	beq.n	800917a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e000      	b.n	800917c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3720      	adds	r7, #32
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	40021000 	.word	0x40021000
 8009188:	019f800c 	.word	0x019f800c
 800918c:	feeefffc 	.word	0xfeeefffc

08009190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800919a:	2300      	movs	r3, #0
 800919c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e11e      	b.n	80093e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80091a8:	4b91      	ldr	r3, [pc, #580]	@ (80093f0 <HAL_RCC_ClockConfig+0x260>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 030f 	and.w	r3, r3, #15
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d910      	bls.n	80091d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091b6:	4b8e      	ldr	r3, [pc, #568]	@ (80093f0 <HAL_RCC_ClockConfig+0x260>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f023 020f 	bic.w	r2, r3, #15
 80091be:	498c      	ldr	r1, [pc, #560]	@ (80093f0 <HAL_RCC_ClockConfig+0x260>)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091c6:	4b8a      	ldr	r3, [pc, #552]	@ (80093f0 <HAL_RCC_ClockConfig+0x260>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 030f 	and.w	r3, r3, #15
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d001      	beq.n	80091d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e106      	b.n	80093e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d073      	beq.n	80092cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d129      	bne.n	8009240 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091ec:	4b81      	ldr	r3, [pc, #516]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d101      	bne.n	80091fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e0f4      	b.n	80093e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80091fc:	f000 f99e 	bl	800953c <RCC_GetSysClockFreqFromPLLSource>
 8009200:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	4a7c      	ldr	r2, [pc, #496]	@ (80093f8 <HAL_RCC_ClockConfig+0x268>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d93f      	bls.n	800928a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800920a:	4b7a      	ldr	r3, [pc, #488]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d009      	beq.n	800922a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800921e:	2b00      	cmp	r3, #0
 8009220:	d033      	beq.n	800928a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009226:	2b00      	cmp	r3, #0
 8009228:	d12f      	bne.n	800928a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800922a:	4b72      	ldr	r3, [pc, #456]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009232:	4a70      	ldr	r2, [pc, #448]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 8009234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009238:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800923a:	2380      	movs	r3, #128	@ 0x80
 800923c:	617b      	str	r3, [r7, #20]
 800923e:	e024      	b.n	800928a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	2b02      	cmp	r3, #2
 8009246:	d107      	bne.n	8009258 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009248:	4b6a      	ldr	r3, [pc, #424]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d109      	bne.n	8009268 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e0c6      	b.n	80093e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009258:	4b66      	ldr	r3, [pc, #408]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e0be      	b.n	80093e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009268:	f000 f8ce 	bl	8009408 <HAL_RCC_GetSysClockFreq>
 800926c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	4a61      	ldr	r2, [pc, #388]	@ (80093f8 <HAL_RCC_ClockConfig+0x268>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d909      	bls.n	800928a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009276:	4b5f      	ldr	r3, [pc, #380]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800927e:	4a5d      	ldr	r2, [pc, #372]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 8009280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009284:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009286:	2380      	movs	r3, #128	@ 0x80
 8009288:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800928a:	4b5a      	ldr	r3, [pc, #360]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f023 0203 	bic.w	r2, r3, #3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	4957      	ldr	r1, [pc, #348]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 8009298:	4313      	orrs	r3, r2
 800929a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800929c:	f7fc fda8 	bl	8005df0 <HAL_GetTick>
 80092a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092a2:	e00a      	b.n	80092ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092a4:	f7fc fda4 	bl	8005df0 <HAL_GetTick>
 80092a8:	4602      	mov	r2, r0
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d901      	bls.n	80092ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e095      	b.n	80093e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092ba:	4b4e      	ldr	r3, [pc, #312]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f003 020c 	and.w	r2, r3, #12
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d1eb      	bne.n	80092a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0302 	and.w	r3, r3, #2
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d023      	beq.n	8009320 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0304 	and.w	r3, r3, #4
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d005      	beq.n	80092f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80092e4:	4b43      	ldr	r3, [pc, #268]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	4a42      	ldr	r2, [pc, #264]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 80092ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80092ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0308 	and.w	r3, r3, #8
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d007      	beq.n	800930c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80092fc:	4b3d      	ldr	r3, [pc, #244]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009304:	4a3b      	ldr	r2, [pc, #236]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 8009306:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800930a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800930c:	4b39      	ldr	r3, [pc, #228]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	4936      	ldr	r1, [pc, #216]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 800931a:	4313      	orrs	r3, r2
 800931c:	608b      	str	r3, [r1, #8]
 800931e:	e008      	b.n	8009332 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	2b80      	cmp	r3, #128	@ 0x80
 8009324:	d105      	bne.n	8009332 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009326:	4b33      	ldr	r3, [pc, #204]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	4a32      	ldr	r2, [pc, #200]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 800932c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009330:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009332:	4b2f      	ldr	r3, [pc, #188]	@ (80093f0 <HAL_RCC_ClockConfig+0x260>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 030f 	and.w	r3, r3, #15
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	429a      	cmp	r2, r3
 800933e:	d21d      	bcs.n	800937c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009340:	4b2b      	ldr	r3, [pc, #172]	@ (80093f0 <HAL_RCC_ClockConfig+0x260>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f023 020f 	bic.w	r2, r3, #15
 8009348:	4929      	ldr	r1, [pc, #164]	@ (80093f0 <HAL_RCC_ClockConfig+0x260>)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	4313      	orrs	r3, r2
 800934e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009350:	f7fc fd4e 	bl	8005df0 <HAL_GetTick>
 8009354:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009356:	e00a      	b.n	800936e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009358:	f7fc fd4a 	bl	8005df0 <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009366:	4293      	cmp	r3, r2
 8009368:	d901      	bls.n	800936e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e03b      	b.n	80093e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800936e:	4b20      	ldr	r3, [pc, #128]	@ (80093f0 <HAL_RCC_ClockConfig+0x260>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 030f 	and.w	r3, r3, #15
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	429a      	cmp	r2, r3
 800937a:	d1ed      	bne.n	8009358 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 0304 	and.w	r3, r3, #4
 8009384:	2b00      	cmp	r3, #0
 8009386:	d008      	beq.n	800939a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009388:	4b1a      	ldr	r3, [pc, #104]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	4917      	ldr	r1, [pc, #92]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 8009396:	4313      	orrs	r3, r2
 8009398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f003 0308 	and.w	r3, r3, #8
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d009      	beq.n	80093ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80093a6:	4b13      	ldr	r3, [pc, #76]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	490f      	ldr	r1, [pc, #60]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80093ba:	f000 f825 	bl	8009408 <HAL_RCC_GetSysClockFreq>
 80093be:	4602      	mov	r2, r0
 80093c0:	4b0c      	ldr	r3, [pc, #48]	@ (80093f4 <HAL_RCC_ClockConfig+0x264>)
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	091b      	lsrs	r3, r3, #4
 80093c6:	f003 030f 	and.w	r3, r3, #15
 80093ca:	490c      	ldr	r1, [pc, #48]	@ (80093fc <HAL_RCC_ClockConfig+0x26c>)
 80093cc:	5ccb      	ldrb	r3, [r1, r3]
 80093ce:	f003 031f 	and.w	r3, r3, #31
 80093d2:	fa22 f303 	lsr.w	r3, r2, r3
 80093d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009400 <HAL_RCC_ClockConfig+0x270>)
 80093d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80093da:	4b0a      	ldr	r3, [pc, #40]	@ (8009404 <HAL_RCC_ClockConfig+0x274>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fc fcba 	bl	8005d58 <HAL_InitTick>
 80093e4:	4603      	mov	r3, r0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	40022000 	.word	0x40022000
 80093f4:	40021000 	.word	0x40021000
 80093f8:	04c4b400 	.word	0x04c4b400
 80093fc:	08012dd4 	.word	0x08012dd4
 8009400:	20000000 	.word	0x20000000
 8009404:	20000004 	.word	0x20000004

08009408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800940e:	4b2c      	ldr	r3, [pc, #176]	@ (80094c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	f003 030c 	and.w	r3, r3, #12
 8009416:	2b04      	cmp	r3, #4
 8009418:	d102      	bne.n	8009420 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800941a:	4b2a      	ldr	r3, [pc, #168]	@ (80094c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800941c:	613b      	str	r3, [r7, #16]
 800941e:	e047      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009420:	4b27      	ldr	r3, [pc, #156]	@ (80094c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 030c 	and.w	r3, r3, #12
 8009428:	2b08      	cmp	r3, #8
 800942a:	d102      	bne.n	8009432 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800942c:	4b26      	ldr	r3, [pc, #152]	@ (80094c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800942e:	613b      	str	r3, [r7, #16]
 8009430:	e03e      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009432:	4b23      	ldr	r3, [pc, #140]	@ (80094c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	f003 030c 	and.w	r3, r3, #12
 800943a:	2b0c      	cmp	r3, #12
 800943c:	d136      	bne.n	80094ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800943e:	4b20      	ldr	r3, [pc, #128]	@ (80094c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	f003 0303 	and.w	r3, r3, #3
 8009446:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009448:	4b1d      	ldr	r3, [pc, #116]	@ (80094c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	091b      	lsrs	r3, r3, #4
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	3301      	adds	r3, #1
 8009454:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2b03      	cmp	r3, #3
 800945a:	d10c      	bne.n	8009476 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800945c:	4a1a      	ldr	r2, [pc, #104]	@ (80094c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	fbb2 f3f3 	udiv	r3, r2, r3
 8009464:	4a16      	ldr	r2, [pc, #88]	@ (80094c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009466:	68d2      	ldr	r2, [r2, #12]
 8009468:	0a12      	lsrs	r2, r2, #8
 800946a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800946e:	fb02 f303 	mul.w	r3, r2, r3
 8009472:	617b      	str	r3, [r7, #20]
      break;
 8009474:	e00c      	b.n	8009490 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009476:	4a13      	ldr	r2, [pc, #76]	@ (80094c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	fbb2 f3f3 	udiv	r3, r2, r3
 800947e:	4a10      	ldr	r2, [pc, #64]	@ (80094c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009480:	68d2      	ldr	r2, [r2, #12]
 8009482:	0a12      	lsrs	r2, r2, #8
 8009484:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009488:	fb02 f303 	mul.w	r3, r2, r3
 800948c:	617b      	str	r3, [r7, #20]
      break;
 800948e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009490:	4b0b      	ldr	r3, [pc, #44]	@ (80094c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	0e5b      	lsrs	r3, r3, #25
 8009496:	f003 0303 	and.w	r3, r3, #3
 800949a:	3301      	adds	r3, #1
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a8:	613b      	str	r3, [r7, #16]
 80094aa:	e001      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80094b0:	693b      	ldr	r3, [r7, #16]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	371c      	adds	r7, #28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	40021000 	.word	0x40021000
 80094c4:	00f42400 	.word	0x00f42400
 80094c8:	007a1200 	.word	0x007a1200

080094cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094cc:	b480      	push	{r7}
 80094ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80094d0:	4b03      	ldr	r3, [pc, #12]	@ (80094e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80094d2:	681b      	ldr	r3, [r3, #0]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	20000000 	.word	0x20000000

080094e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80094e8:	f7ff fff0 	bl	80094cc <HAL_RCC_GetHCLKFreq>
 80094ec:	4602      	mov	r2, r0
 80094ee:	4b06      	ldr	r3, [pc, #24]	@ (8009508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	0a1b      	lsrs	r3, r3, #8
 80094f4:	f003 0307 	and.w	r3, r3, #7
 80094f8:	4904      	ldr	r1, [pc, #16]	@ (800950c <HAL_RCC_GetPCLK1Freq+0x28>)
 80094fa:	5ccb      	ldrb	r3, [r1, r3]
 80094fc:	f003 031f 	and.w	r3, r3, #31
 8009500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009504:	4618      	mov	r0, r3
 8009506:	bd80      	pop	{r7, pc}
 8009508:	40021000 	.word	0x40021000
 800950c:	08012de4 	.word	0x08012de4

08009510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009514:	f7ff ffda 	bl	80094cc <HAL_RCC_GetHCLKFreq>
 8009518:	4602      	mov	r2, r0
 800951a:	4b06      	ldr	r3, [pc, #24]	@ (8009534 <HAL_RCC_GetPCLK2Freq+0x24>)
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	0adb      	lsrs	r3, r3, #11
 8009520:	f003 0307 	and.w	r3, r3, #7
 8009524:	4904      	ldr	r1, [pc, #16]	@ (8009538 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009526:	5ccb      	ldrb	r3, [r1, r3]
 8009528:	f003 031f 	and.w	r3, r3, #31
 800952c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009530:	4618      	mov	r0, r3
 8009532:	bd80      	pop	{r7, pc}
 8009534:	40021000 	.word	0x40021000
 8009538:	08012de4 	.word	0x08012de4

0800953c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009542:	4b1e      	ldr	r3, [pc, #120]	@ (80095bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800954c:	4b1b      	ldr	r3, [pc, #108]	@ (80095bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	091b      	lsrs	r3, r3, #4
 8009552:	f003 030f 	and.w	r3, r3, #15
 8009556:	3301      	adds	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b03      	cmp	r3, #3
 800955e:	d10c      	bne.n	800957a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009560:	4a17      	ldr	r2, [pc, #92]	@ (80095c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	fbb2 f3f3 	udiv	r3, r2, r3
 8009568:	4a14      	ldr	r2, [pc, #80]	@ (80095bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800956a:	68d2      	ldr	r2, [r2, #12]
 800956c:	0a12      	lsrs	r2, r2, #8
 800956e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009572:	fb02 f303 	mul.w	r3, r2, r3
 8009576:	617b      	str	r3, [r7, #20]
    break;
 8009578:	e00c      	b.n	8009594 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800957a:	4a12      	ldr	r2, [pc, #72]	@ (80095c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009582:	4a0e      	ldr	r2, [pc, #56]	@ (80095bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009584:	68d2      	ldr	r2, [r2, #12]
 8009586:	0a12      	lsrs	r2, r2, #8
 8009588:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800958c:	fb02 f303 	mul.w	r3, r2, r3
 8009590:	617b      	str	r3, [r7, #20]
    break;
 8009592:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009594:	4b09      	ldr	r3, [pc, #36]	@ (80095bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	0e5b      	lsrs	r3, r3, #25
 800959a:	f003 0303 	and.w	r3, r3, #3
 800959e:	3301      	adds	r3, #1
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80095ae:	687b      	ldr	r3, [r7, #4]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	371c      	adds	r7, #28
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	40021000 	.word	0x40021000
 80095c0:	007a1200 	.word	0x007a1200
 80095c4:	00f42400 	.word	0x00f42400

080095c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80095d0:	2300      	movs	r3, #0
 80095d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80095d4:	2300      	movs	r3, #0
 80095d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 8098 	beq.w	8009716 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095e6:	2300      	movs	r3, #0
 80095e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095ea:	4b43      	ldr	r3, [pc, #268]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10d      	bne.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095f6:	4b40      	ldr	r3, [pc, #256]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095fa:	4a3f      	ldr	r2, [pc, #252]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009600:	6593      	str	r3, [r2, #88]	@ 0x58
 8009602:	4b3d      	ldr	r3, [pc, #244]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800960a:	60bb      	str	r3, [r7, #8]
 800960c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800960e:	2301      	movs	r3, #1
 8009610:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009612:	4b3a      	ldr	r3, [pc, #232]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a39      	ldr	r2, [pc, #228]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800961c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800961e:	f7fc fbe7 	bl	8005df0 <HAL_GetTick>
 8009622:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009624:	e009      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009626:	f7fc fbe3 	bl	8005df0 <HAL_GetTick>
 800962a:	4602      	mov	r2, r0
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	2b02      	cmp	r3, #2
 8009632:	d902      	bls.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	74fb      	strb	r3, [r7, #19]
        break;
 8009638:	e005      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800963a:	4b30      	ldr	r3, [pc, #192]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0ef      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009646:	7cfb      	ldrb	r3, [r7, #19]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d159      	bne.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800964c:	4b2a      	ldr	r3, [pc, #168]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800964e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009656:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d01e      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	429a      	cmp	r2, r3
 8009666:	d019      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009668:	4b23      	ldr	r3, [pc, #140]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800966a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800966e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009672:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009674:	4b20      	ldr	r3, [pc, #128]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800967a:	4a1f      	ldr	r2, [pc, #124]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800967c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009684:	4b1c      	ldr	r3, [pc, #112]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800968a:	4a1b      	ldr	r2, [pc, #108]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800968c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009694:	4a18      	ldr	r2, [pc, #96]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d016      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096a6:	f7fc fba3 	bl	8005df0 <HAL_GetTick>
 80096aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096ac:	e00b      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096ae:	f7fc fb9f 	bl	8005df0 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096bc:	4293      	cmp	r3, r2
 80096be:	d902      	bls.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80096c0:	2303      	movs	r3, #3
 80096c2:	74fb      	strb	r3, [r7, #19]
            break;
 80096c4:	e006      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096c6:	4b0c      	ldr	r3, [pc, #48]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096cc:	f003 0302 	and.w	r3, r3, #2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d0ec      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80096d4:	7cfb      	ldrb	r3, [r7, #19]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10b      	bne.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096da:	4b07      	ldr	r3, [pc, #28]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096e8:	4903      	ldr	r1, [pc, #12]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80096f0:	e008      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80096f2:	7cfb      	ldrb	r3, [r7, #19]
 80096f4:	74bb      	strb	r3, [r7, #18]
 80096f6:	e005      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80096f8:	40021000 	.word	0x40021000
 80096fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009700:	7cfb      	ldrb	r3, [r7, #19]
 8009702:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009704:	7c7b      	ldrb	r3, [r7, #17]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d105      	bne.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800970a:	4ba7      	ldr	r3, [pc, #668]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800970c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800970e:	4aa6      	ldr	r2, [pc, #664]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009714:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00a      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009722:	4ba1      	ldr	r3, [pc, #644]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009728:	f023 0203 	bic.w	r2, r3, #3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	499d      	ldr	r1, [pc, #628]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009732:	4313      	orrs	r3, r2
 8009734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0302 	and.w	r3, r3, #2
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00a      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009744:	4b98      	ldr	r3, [pc, #608]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800974a:	f023 020c 	bic.w	r2, r3, #12
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	4995      	ldr	r1, [pc, #596]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009754:	4313      	orrs	r3, r2
 8009756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0304 	and.w	r3, r3, #4
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00a      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009766:	4b90      	ldr	r3, [pc, #576]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800976c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	498c      	ldr	r1, [pc, #560]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009776:	4313      	orrs	r3, r2
 8009778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0308 	and.w	r3, r3, #8
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00a      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009788:	4b87      	ldr	r3, [pc, #540]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800978a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800978e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	4984      	ldr	r1, [pc, #528]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009798:	4313      	orrs	r3, r2
 800979a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0310 	and.w	r3, r3, #16
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80097aa:	4b7f      	ldr	r3, [pc, #508]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	497b      	ldr	r1, [pc, #492]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0320 	and.w	r3, r3, #32
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00a      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097cc:	4b76      	ldr	r3, [pc, #472]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	4973      	ldr	r1, [pc, #460]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097dc:	4313      	orrs	r3, r2
 80097de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80097ee:	4b6e      	ldr	r3, [pc, #440]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	69db      	ldr	r3, [r3, #28]
 80097fc:	496a      	ldr	r1, [pc, #424]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00a      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009810:	4b65      	ldr	r3, [pc, #404]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009816:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	4962      	ldr	r1, [pc, #392]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009820:	4313      	orrs	r3, r2
 8009822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00a      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009832:	4b5d      	ldr	r3, [pc, #372]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009838:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009840:	4959      	ldr	r1, [pc, #356]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009842:	4313      	orrs	r3, r2
 8009844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00a      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009854:	4b54      	ldr	r3, [pc, #336]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009856:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800985a:	f023 0203 	bic.w	r2, r3, #3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009862:	4951      	ldr	r1, [pc, #324]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009864:	4313      	orrs	r3, r2
 8009866:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009876:	4b4c      	ldr	r3, [pc, #304]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800987c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009884:	4948      	ldr	r1, [pc, #288]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009886:	4313      	orrs	r3, r2
 8009888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009894:	2b00      	cmp	r3, #0
 8009896:	d015      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009898:	4b43      	ldr	r3, [pc, #268]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800989a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800989e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098a6:	4940      	ldr	r1, [pc, #256]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098a8:	4313      	orrs	r3, r2
 80098aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098b6:	d105      	bne.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80098b8:	4b3b      	ldr	r3, [pc, #236]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	4a3a      	ldr	r2, [pc, #232]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d015      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80098d0:	4b35      	ldr	r3, [pc, #212]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098de:	4932      	ldr	r1, [pc, #200]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098e0:	4313      	orrs	r3, r2
 80098e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098ee:	d105      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80098f0:	4b2d      	ldr	r3, [pc, #180]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	4a2c      	ldr	r2, [pc, #176]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d015      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009908:	4b27      	ldr	r3, [pc, #156]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800990a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800990e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009916:	4924      	ldr	r1, [pc, #144]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009918:	4313      	orrs	r3, r2
 800991a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009922:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009926:	d105      	bne.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009928:	4b1f      	ldr	r3, [pc, #124]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	4a1e      	ldr	r2, [pc, #120]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800992e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009932:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d015      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009940:	4b19      	ldr	r3, [pc, #100]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009946:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800994e:	4916      	ldr	r1, [pc, #88]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009950:	4313      	orrs	r3, r2
 8009952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800995a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800995e:	d105      	bne.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009960:	4b11      	ldr	r3, [pc, #68]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	4a10      	ldr	r2, [pc, #64]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800996a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d019      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009978:	4b0b      	ldr	r3, [pc, #44]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800997a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800997e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009986:	4908      	ldr	r1, [pc, #32]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009988:	4313      	orrs	r3, r2
 800998a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009992:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009996:	d109      	bne.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009998:	4b03      	ldr	r3, [pc, #12]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	4a02      	ldr	r2, [pc, #8]	@ (80099a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800999e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099a2:	60d3      	str	r3, [r2, #12]
 80099a4:	e002      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80099a6:	bf00      	nop
 80099a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d015      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80099b8:	4b29      	ldr	r3, [pc, #164]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c6:	4926      	ldr	r1, [pc, #152]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099c8:	4313      	orrs	r3, r2
 80099ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099d6:	d105      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80099d8:	4b21      	ldr	r3, [pc, #132]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	4a20      	ldr	r2, [pc, #128]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d015      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80099f0:	4b1b      	ldr	r3, [pc, #108]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099f6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099fe:	4918      	ldr	r1, [pc, #96]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a0e:	d105      	bne.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009a10:	4b13      	ldr	r3, [pc, #76]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	4a12      	ldr	r2, [pc, #72]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a1a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d015      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a28:	4b0d      	ldr	r3, [pc, #52]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a36:	490a      	ldr	r1, [pc, #40]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a46:	d105      	bne.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a48:	4b05      	ldr	r3, [pc, #20]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	4a04      	ldr	r2, [pc, #16]	@ (8009a60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009a54:	7cbb      	ldrb	r3, [r7, #18]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	40021000 	.word	0x40021000

08009a64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e042      	b.n	8009afc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d106      	bne.n	8009a8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7fc f8c3 	bl	8005c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2224      	movs	r2, #36	@ 0x24
 8009a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 0201 	bic.w	r2, r2, #1
 8009aa4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d002      	beq.n	8009ab4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fe68 	bl	800a784 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fb69 	bl	800a18c <UART_SetConfig>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d101      	bne.n	8009ac4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e01b      	b.n	8009afc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685a      	ldr	r2, [r3, #4]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ad2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689a      	ldr	r2, [r3, #8]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ae2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f042 0201 	orr.w	r2, r2, #1
 8009af2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fee7 	bl	800a8c8 <UART_CheckIdleState>
 8009afa:	4603      	mov	r3, r0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b0ba      	sub	sp, #232	@ 0xe8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009b2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009b32:	4013      	ands	r3, r2
 8009b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009b38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d11b      	bne.n	8009b78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d015      	beq.n	8009b78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b50:	f003 0320 	and.w	r3, r3, #32
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d105      	bne.n	8009b64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d009      	beq.n	8009b78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 82e3 	beq.w	800a134 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	4798      	blx	r3
      }
      return;
 8009b76:	e2dd      	b.n	800a134 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009b78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 8123 	beq.w	8009dc8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b86:	4b8d      	ldr	r3, [pc, #564]	@ (8009dbc <HAL_UART_IRQHandler+0x2b8>)
 8009b88:	4013      	ands	r3, r2
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d106      	bne.n	8009b9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009b92:	4b8b      	ldr	r3, [pc, #556]	@ (8009dc0 <HAL_UART_IRQHandler+0x2bc>)
 8009b94:	4013      	ands	r3, r2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f000 8116 	beq.w	8009dc8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d011      	beq.n	8009bcc <HAL_UART_IRQHandler+0xc8>
 8009ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bc2:	f043 0201 	orr.w	r2, r3, #1
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bd0:	f003 0302 	and.w	r3, r3, #2
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d011      	beq.n	8009bfc <HAL_UART_IRQHandler+0xf8>
 8009bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00b      	beq.n	8009bfc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2202      	movs	r2, #2
 8009bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bf2:	f043 0204 	orr.w	r2, r3, #4
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d011      	beq.n	8009c2c <HAL_UART_IRQHandler+0x128>
 8009c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00b      	beq.n	8009c2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2204      	movs	r2, #4
 8009c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c22:	f043 0202 	orr.w	r2, r3, #2
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c30:	f003 0308 	and.w	r3, r3, #8
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d017      	beq.n	8009c68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c3c:	f003 0320 	and.w	r3, r3, #32
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009c48:	4b5c      	ldr	r3, [pc, #368]	@ (8009dbc <HAL_UART_IRQHandler+0x2b8>)
 8009c4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00b      	beq.n	8009c68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2208      	movs	r2, #8
 8009c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c5e:	f043 0208 	orr.w	r2, r3, #8
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d012      	beq.n	8009c9a <HAL_UART_IRQHandler+0x196>
 8009c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00c      	beq.n	8009c9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c90:	f043 0220 	orr.w	r2, r3, #32
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 8249 	beq.w	800a138 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009caa:	f003 0320 	and.w	r3, r3, #32
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d013      	beq.n	8009cda <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cb6:	f003 0320 	and.w	r3, r3, #32
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d105      	bne.n	8009cca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d007      	beq.n	8009cda <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d003      	beq.n	8009cda <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cee:	2b40      	cmp	r3, #64	@ 0x40
 8009cf0:	d005      	beq.n	8009cfe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009cf6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d054      	beq.n	8009da8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fef9 	bl	800aaf6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d0e:	2b40      	cmp	r3, #64	@ 0x40
 8009d10:	d146      	bne.n	8009da0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3308      	adds	r3, #8
 8009d18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d20:	e853 3f00 	ldrex	r3, [r3]
 8009d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3308      	adds	r3, #8
 8009d3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d4e:	e841 2300 	strex	r3, r2, [r1]
 8009d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1d9      	bne.n	8009d12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d017      	beq.n	8009d98 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d6e:	4a15      	ldr	r2, [pc, #84]	@ (8009dc4 <HAL_UART_IRQHandler+0x2c0>)
 8009d70:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fc fa78 	bl	800626e <HAL_DMA_Abort_IT>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d019      	beq.n	8009db8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009d92:	4610      	mov	r0, r2
 8009d94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d96:	e00f      	b.n	8009db8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f9e1 	bl	800a160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d9e:	e00b      	b.n	8009db8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f9dd 	bl	800a160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da6:	e007      	b.n	8009db8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f9d9 	bl	800a160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009db6:	e1bf      	b.n	800a138 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db8:	bf00      	nop
    return;
 8009dba:	e1bd      	b.n	800a138 <HAL_UART_IRQHandler+0x634>
 8009dbc:	10000001 	.word	0x10000001
 8009dc0:	04000120 	.word	0x04000120
 8009dc4:	0800abc3 	.word	0x0800abc3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	f040 8153 	bne.w	800a078 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dd6:	f003 0310 	and.w	r3, r3, #16
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 814c 	beq.w	800a078 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009de4:	f003 0310 	and.w	r3, r3, #16
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 8145 	beq.w	800a078 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2210      	movs	r2, #16
 8009df4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e00:	2b40      	cmp	r3, #64	@ 0x40
 8009e02:	f040 80bb 	bne.w	8009f7c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 818f 	beq.w	800a13c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	f080 8187 	bcs.w	800a13c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0320 	and.w	r3, r3, #32
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f040 8087 	bne.w	8009f5a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e58:	e853 3f00 	ldrex	r3, [r3]
 8009e5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	461a      	mov	r2, r3
 8009e72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e86:	e841 2300 	strex	r3, r2, [r1]
 8009e8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1da      	bne.n	8009e4c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3308      	adds	r3, #8
 8009e9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ea0:	e853 3f00 	ldrex	r3, [r3]
 8009ea4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ea8:	f023 0301 	bic.w	r3, r3, #1
 8009eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	3308      	adds	r3, #8
 8009eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009eba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009ebe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009ec6:	e841 2300 	strex	r3, r2, [r1]
 8009eca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e1      	bne.n	8009e96 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ef6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009efc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009efe:	e841 2300 	strex	r3, r2, [r1]
 8009f02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1e3      	bne.n	8009ed2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2220      	movs	r2, #32
 8009f0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f20:	e853 3f00 	ldrex	r3, [r3]
 8009f24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f28:	f023 0310 	bic.w	r3, r3, #16
 8009f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	461a      	mov	r2, r3
 8009f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1e4      	bne.n	8009f18 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fc f931 	bl	80061bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	4619      	mov	r1, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f8fd 	bl	800a174 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f7a:	e0df      	b.n	800a13c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 80d1 	beq.w	800a140 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009f9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 80cc 	beq.w	800a140 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb0:	e853 3f00 	ldrex	r3, [r3]
 8009fb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009fca:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fcc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fd2:	e841 2300 	strex	r3, r2, [r1]
 8009fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1e4      	bne.n	8009fa8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe8:	e853 3f00 	ldrex	r3, [r3]
 8009fec:	623b      	str	r3, [r7, #32]
   return(result);
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ff4:	f023 0301 	bic.w	r3, r3, #1
 8009ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3308      	adds	r3, #8
 800a002:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a006:	633a      	str	r2, [r7, #48]	@ 0x30
 800a008:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a00c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a00e:	e841 2300 	strex	r3, r2, [r1]
 800a012:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1e1      	bne.n	8009fde <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2220      	movs	r2, #32
 800a01e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	e853 3f00 	ldrex	r3, [r3]
 800a03a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f023 0310 	bic.w	r3, r3, #16
 800a042:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a050:	61fb      	str	r3, [r7, #28]
 800a052:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a054:	69b9      	ldr	r1, [r7, #24]
 800a056:	69fa      	ldr	r2, [r7, #28]
 800a058:	e841 2300 	strex	r3, r2, [r1]
 800a05c:	617b      	str	r3, [r7, #20]
   return(result);
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e4      	bne.n	800a02e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2202      	movs	r2, #2
 800a068:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a06a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f87f 	bl	800a174 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a076:	e063      	b.n	800a140 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a07c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00e      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x59e>
 800a084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a088:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d008      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a098:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fdd2 	bl	800ac44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0a0:	e051      	b.n	800a146 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a0a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d014      	beq.n	800a0d8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a0ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d105      	bne.n	800a0c6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a0ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d008      	beq.n	800a0d8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d03a      	beq.n	800a144 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	4798      	blx	r3
    }
    return;
 800a0d6:	e035      	b.n	800a144 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d009      	beq.n	800a0f8 <HAL_UART_IRQHandler+0x5f4>
 800a0e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fd7c 	bl	800abee <UART_EndTransmit_IT>
    return;
 800a0f6:	e026      	b.n	800a146 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d009      	beq.n	800a118 <HAL_UART_IRQHandler+0x614>
 800a104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a108:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d003      	beq.n	800a118 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fdab 	bl	800ac6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a116:	e016      	b.n	800a146 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a11c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d010      	beq.n	800a146 <HAL_UART_IRQHandler+0x642>
 800a124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	da0c      	bge.n	800a146 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fd93 	bl	800ac58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a132:	e008      	b.n	800a146 <HAL_UART_IRQHandler+0x642>
      return;
 800a134:	bf00      	nop
 800a136:	e006      	b.n	800a146 <HAL_UART_IRQHandler+0x642>
    return;
 800a138:	bf00      	nop
 800a13a:	e004      	b.n	800a146 <HAL_UART_IRQHandler+0x642>
      return;
 800a13c:	bf00      	nop
 800a13e:	e002      	b.n	800a146 <HAL_UART_IRQHandler+0x642>
      return;
 800a140:	bf00      	nop
 800a142:	e000      	b.n	800a146 <HAL_UART_IRQHandler+0x642>
    return;
 800a144:	bf00      	nop
  }
}
 800a146:	37e8      	adds	r7, #232	@ 0xe8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	460b      	mov	r3, r1
 800a17e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a18c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a190:	b08c      	sub	sp, #48	@ 0x30
 800a192:	af00      	add	r7, sp, #0
 800a194:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	689a      	ldr	r2, [r3, #8]
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	431a      	orrs	r2, r3
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	69db      	ldr	r3, [r3, #28]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	4baa      	ldr	r3, [pc, #680]	@ (800a464 <UART_SetConfig+0x2d8>)
 800a1bc:	4013      	ands	r3, r2
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	6812      	ldr	r2, [r2, #0]
 800a1c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1c4:	430b      	orrs	r3, r1
 800a1c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	68da      	ldr	r2, [r3, #12]
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a9f      	ldr	r2, [pc, #636]	@ (800a468 <UART_SetConfig+0x2dc>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d004      	beq.n	800a1f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a202:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	6812      	ldr	r2, [r2, #0]
 800a20a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a20c:	430b      	orrs	r3, r1
 800a20e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a216:	f023 010f 	bic.w	r1, r3, #15
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	430a      	orrs	r2, r1
 800a224:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a90      	ldr	r2, [pc, #576]	@ (800a46c <UART_SetConfig+0x2e0>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d125      	bne.n	800a27c <UART_SetConfig+0xf0>
 800a230:	4b8f      	ldr	r3, [pc, #572]	@ (800a470 <UART_SetConfig+0x2e4>)
 800a232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a236:	f003 0303 	and.w	r3, r3, #3
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d81a      	bhi.n	800a274 <UART_SetConfig+0xe8>
 800a23e:	a201      	add	r2, pc, #4	@ (adr r2, 800a244 <UART_SetConfig+0xb8>)
 800a240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a244:	0800a255 	.word	0x0800a255
 800a248:	0800a265 	.word	0x0800a265
 800a24c:	0800a25d 	.word	0x0800a25d
 800a250:	0800a26d 	.word	0x0800a26d
 800a254:	2301      	movs	r3, #1
 800a256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a25a:	e116      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a25c:	2302      	movs	r3, #2
 800a25e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a262:	e112      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a264:	2304      	movs	r3, #4
 800a266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a26a:	e10e      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a26c:	2308      	movs	r3, #8
 800a26e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a272:	e10a      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a274:	2310      	movs	r3, #16
 800a276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a27a:	e106      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a7c      	ldr	r2, [pc, #496]	@ (800a474 <UART_SetConfig+0x2e8>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d138      	bne.n	800a2f8 <UART_SetConfig+0x16c>
 800a286:	4b7a      	ldr	r3, [pc, #488]	@ (800a470 <UART_SetConfig+0x2e4>)
 800a288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a28c:	f003 030c 	and.w	r3, r3, #12
 800a290:	2b0c      	cmp	r3, #12
 800a292:	d82d      	bhi.n	800a2f0 <UART_SetConfig+0x164>
 800a294:	a201      	add	r2, pc, #4	@ (adr r2, 800a29c <UART_SetConfig+0x110>)
 800a296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29a:	bf00      	nop
 800a29c:	0800a2d1 	.word	0x0800a2d1
 800a2a0:	0800a2f1 	.word	0x0800a2f1
 800a2a4:	0800a2f1 	.word	0x0800a2f1
 800a2a8:	0800a2f1 	.word	0x0800a2f1
 800a2ac:	0800a2e1 	.word	0x0800a2e1
 800a2b0:	0800a2f1 	.word	0x0800a2f1
 800a2b4:	0800a2f1 	.word	0x0800a2f1
 800a2b8:	0800a2f1 	.word	0x0800a2f1
 800a2bc:	0800a2d9 	.word	0x0800a2d9
 800a2c0:	0800a2f1 	.word	0x0800a2f1
 800a2c4:	0800a2f1 	.word	0x0800a2f1
 800a2c8:	0800a2f1 	.word	0x0800a2f1
 800a2cc:	0800a2e9 	.word	0x0800a2e9
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2d6:	e0d8      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a2d8:	2302      	movs	r3, #2
 800a2da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2de:	e0d4      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a2e0:	2304      	movs	r3, #4
 800a2e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2e6:	e0d0      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a2e8:	2308      	movs	r3, #8
 800a2ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ee:	e0cc      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a2f0:	2310      	movs	r3, #16
 800a2f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2f6:	e0c8      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a5e      	ldr	r2, [pc, #376]	@ (800a478 <UART_SetConfig+0x2ec>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d125      	bne.n	800a34e <UART_SetConfig+0x1c2>
 800a302:	4b5b      	ldr	r3, [pc, #364]	@ (800a470 <UART_SetConfig+0x2e4>)
 800a304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a308:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a30c:	2b30      	cmp	r3, #48	@ 0x30
 800a30e:	d016      	beq.n	800a33e <UART_SetConfig+0x1b2>
 800a310:	2b30      	cmp	r3, #48	@ 0x30
 800a312:	d818      	bhi.n	800a346 <UART_SetConfig+0x1ba>
 800a314:	2b20      	cmp	r3, #32
 800a316:	d00a      	beq.n	800a32e <UART_SetConfig+0x1a2>
 800a318:	2b20      	cmp	r3, #32
 800a31a:	d814      	bhi.n	800a346 <UART_SetConfig+0x1ba>
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d002      	beq.n	800a326 <UART_SetConfig+0x19a>
 800a320:	2b10      	cmp	r3, #16
 800a322:	d008      	beq.n	800a336 <UART_SetConfig+0x1aa>
 800a324:	e00f      	b.n	800a346 <UART_SetConfig+0x1ba>
 800a326:	2300      	movs	r3, #0
 800a328:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a32c:	e0ad      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a32e:	2302      	movs	r3, #2
 800a330:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a334:	e0a9      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a336:	2304      	movs	r3, #4
 800a338:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a33c:	e0a5      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a33e:	2308      	movs	r3, #8
 800a340:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a344:	e0a1      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a346:	2310      	movs	r3, #16
 800a348:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a34c:	e09d      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a4a      	ldr	r2, [pc, #296]	@ (800a47c <UART_SetConfig+0x2f0>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d125      	bne.n	800a3a4 <UART_SetConfig+0x218>
 800a358:	4b45      	ldr	r3, [pc, #276]	@ (800a470 <UART_SetConfig+0x2e4>)
 800a35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a35e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a362:	2bc0      	cmp	r3, #192	@ 0xc0
 800a364:	d016      	beq.n	800a394 <UART_SetConfig+0x208>
 800a366:	2bc0      	cmp	r3, #192	@ 0xc0
 800a368:	d818      	bhi.n	800a39c <UART_SetConfig+0x210>
 800a36a:	2b80      	cmp	r3, #128	@ 0x80
 800a36c:	d00a      	beq.n	800a384 <UART_SetConfig+0x1f8>
 800a36e:	2b80      	cmp	r3, #128	@ 0x80
 800a370:	d814      	bhi.n	800a39c <UART_SetConfig+0x210>
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <UART_SetConfig+0x1f0>
 800a376:	2b40      	cmp	r3, #64	@ 0x40
 800a378:	d008      	beq.n	800a38c <UART_SetConfig+0x200>
 800a37a:	e00f      	b.n	800a39c <UART_SetConfig+0x210>
 800a37c:	2300      	movs	r3, #0
 800a37e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a382:	e082      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a384:	2302      	movs	r3, #2
 800a386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a38a:	e07e      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a38c:	2304      	movs	r3, #4
 800a38e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a392:	e07a      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a394:	2308      	movs	r3, #8
 800a396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a39a:	e076      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a39c:	2310      	movs	r3, #16
 800a39e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3a2:	e072      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a35      	ldr	r2, [pc, #212]	@ (800a480 <UART_SetConfig+0x2f4>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d12a      	bne.n	800a404 <UART_SetConfig+0x278>
 800a3ae:	4b30      	ldr	r3, [pc, #192]	@ (800a470 <UART_SetConfig+0x2e4>)
 800a3b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3bc:	d01a      	beq.n	800a3f4 <UART_SetConfig+0x268>
 800a3be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3c2:	d81b      	bhi.n	800a3fc <UART_SetConfig+0x270>
 800a3c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3c8:	d00c      	beq.n	800a3e4 <UART_SetConfig+0x258>
 800a3ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3ce:	d815      	bhi.n	800a3fc <UART_SetConfig+0x270>
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d003      	beq.n	800a3dc <UART_SetConfig+0x250>
 800a3d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3d8:	d008      	beq.n	800a3ec <UART_SetConfig+0x260>
 800a3da:	e00f      	b.n	800a3fc <UART_SetConfig+0x270>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3e2:	e052      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3ea:	e04e      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a3ec:	2304      	movs	r3, #4
 800a3ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3f2:	e04a      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a3f4:	2308      	movs	r3, #8
 800a3f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3fa:	e046      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a3fc:	2310      	movs	r3, #16
 800a3fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a402:	e042      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a17      	ldr	r2, [pc, #92]	@ (800a468 <UART_SetConfig+0x2dc>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d13a      	bne.n	800a484 <UART_SetConfig+0x2f8>
 800a40e:	4b18      	ldr	r3, [pc, #96]	@ (800a470 <UART_SetConfig+0x2e4>)
 800a410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a414:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a418:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a41c:	d01a      	beq.n	800a454 <UART_SetConfig+0x2c8>
 800a41e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a422:	d81b      	bhi.n	800a45c <UART_SetConfig+0x2d0>
 800a424:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a428:	d00c      	beq.n	800a444 <UART_SetConfig+0x2b8>
 800a42a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a42e:	d815      	bhi.n	800a45c <UART_SetConfig+0x2d0>
 800a430:	2b00      	cmp	r3, #0
 800a432:	d003      	beq.n	800a43c <UART_SetConfig+0x2b0>
 800a434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a438:	d008      	beq.n	800a44c <UART_SetConfig+0x2c0>
 800a43a:	e00f      	b.n	800a45c <UART_SetConfig+0x2d0>
 800a43c:	2300      	movs	r3, #0
 800a43e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a442:	e022      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a444:	2302      	movs	r3, #2
 800a446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a44a:	e01e      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a44c:	2304      	movs	r3, #4
 800a44e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a452:	e01a      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a454:	2308      	movs	r3, #8
 800a456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a45a:	e016      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a45c:	2310      	movs	r3, #16
 800a45e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a462:	e012      	b.n	800a48a <UART_SetConfig+0x2fe>
 800a464:	cfff69f3 	.word	0xcfff69f3
 800a468:	40008000 	.word	0x40008000
 800a46c:	40013800 	.word	0x40013800
 800a470:	40021000 	.word	0x40021000
 800a474:	40004400 	.word	0x40004400
 800a478:	40004800 	.word	0x40004800
 800a47c:	40004c00 	.word	0x40004c00
 800a480:	40005000 	.word	0x40005000
 800a484:	2310      	movs	r3, #16
 800a486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4aae      	ldr	r2, [pc, #696]	@ (800a748 <UART_SetConfig+0x5bc>)
 800a490:	4293      	cmp	r3, r2
 800a492:	f040 8097 	bne.w	800a5c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a496:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a49a:	2b08      	cmp	r3, #8
 800a49c:	d823      	bhi.n	800a4e6 <UART_SetConfig+0x35a>
 800a49e:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a4 <UART_SetConfig+0x318>)
 800a4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a4:	0800a4c9 	.word	0x0800a4c9
 800a4a8:	0800a4e7 	.word	0x0800a4e7
 800a4ac:	0800a4d1 	.word	0x0800a4d1
 800a4b0:	0800a4e7 	.word	0x0800a4e7
 800a4b4:	0800a4d7 	.word	0x0800a4d7
 800a4b8:	0800a4e7 	.word	0x0800a4e7
 800a4bc:	0800a4e7 	.word	0x0800a4e7
 800a4c0:	0800a4e7 	.word	0x0800a4e7
 800a4c4:	0800a4df 	.word	0x0800a4df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4c8:	f7ff f80c 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 800a4cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4ce:	e010      	b.n	800a4f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4d0:	4b9e      	ldr	r3, [pc, #632]	@ (800a74c <UART_SetConfig+0x5c0>)
 800a4d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4d4:	e00d      	b.n	800a4f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4d6:	f7fe ff97 	bl	8009408 <HAL_RCC_GetSysClockFreq>
 800a4da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4dc:	e009      	b.n	800a4f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4e4:	e005      	b.n	800a4f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a4f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 8130 	beq.w	800a75a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4fe:	4a94      	ldr	r2, [pc, #592]	@ (800a750 <UART_SetConfig+0x5c4>)
 800a500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a504:	461a      	mov	r2, r3
 800a506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a508:	fbb3 f3f2 	udiv	r3, r3, r2
 800a50c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	685a      	ldr	r2, [r3, #4]
 800a512:	4613      	mov	r3, r2
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	4413      	add	r3, r2
 800a518:	69ba      	ldr	r2, [r7, #24]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d305      	bcc.n	800a52a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a524:	69ba      	ldr	r2, [r7, #24]
 800a526:	429a      	cmp	r2, r3
 800a528:	d903      	bls.n	800a532 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a530:	e113      	b.n	800a75a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a534:	2200      	movs	r2, #0
 800a536:	60bb      	str	r3, [r7, #8]
 800a538:	60fa      	str	r2, [r7, #12]
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a53e:	4a84      	ldr	r2, [pc, #528]	@ (800a750 <UART_SetConfig+0x5c4>)
 800a540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a544:	b29b      	uxth	r3, r3
 800a546:	2200      	movs	r2, #0
 800a548:	603b      	str	r3, [r7, #0]
 800a54a:	607a      	str	r2, [r7, #4]
 800a54c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a550:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a554:	f7f6 fbc0 	bl	8000cd8 <__aeabi_uldivmod>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	4610      	mov	r0, r2
 800a55e:	4619      	mov	r1, r3
 800a560:	f04f 0200 	mov.w	r2, #0
 800a564:	f04f 0300 	mov.w	r3, #0
 800a568:	020b      	lsls	r3, r1, #8
 800a56a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a56e:	0202      	lsls	r2, r0, #8
 800a570:	6979      	ldr	r1, [r7, #20]
 800a572:	6849      	ldr	r1, [r1, #4]
 800a574:	0849      	lsrs	r1, r1, #1
 800a576:	2000      	movs	r0, #0
 800a578:	460c      	mov	r4, r1
 800a57a:	4605      	mov	r5, r0
 800a57c:	eb12 0804 	adds.w	r8, r2, r4
 800a580:	eb43 0905 	adc.w	r9, r3, r5
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	469a      	mov	sl, r3
 800a58c:	4693      	mov	fp, r2
 800a58e:	4652      	mov	r2, sl
 800a590:	465b      	mov	r3, fp
 800a592:	4640      	mov	r0, r8
 800a594:	4649      	mov	r1, r9
 800a596:	f7f6 fb9f 	bl	8000cd8 <__aeabi_uldivmod>
 800a59a:	4602      	mov	r2, r0
 800a59c:	460b      	mov	r3, r1
 800a59e:	4613      	mov	r3, r2
 800a5a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5a2:	6a3b      	ldr	r3, [r7, #32]
 800a5a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5a8:	d308      	bcc.n	800a5bc <UART_SetConfig+0x430>
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5b0:	d204      	bcs.n	800a5bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6a3a      	ldr	r2, [r7, #32]
 800a5b8:	60da      	str	r2, [r3, #12]
 800a5ba:	e0ce      	b.n	800a75a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a5c2:	e0ca      	b.n	800a75a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	69db      	ldr	r3, [r3, #28]
 800a5c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5cc:	d166      	bne.n	800a69c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a5ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a5d2:	2b08      	cmp	r3, #8
 800a5d4:	d827      	bhi.n	800a626 <UART_SetConfig+0x49a>
 800a5d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5dc <UART_SetConfig+0x450>)
 800a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5dc:	0800a601 	.word	0x0800a601
 800a5e0:	0800a609 	.word	0x0800a609
 800a5e4:	0800a611 	.word	0x0800a611
 800a5e8:	0800a627 	.word	0x0800a627
 800a5ec:	0800a617 	.word	0x0800a617
 800a5f0:	0800a627 	.word	0x0800a627
 800a5f4:	0800a627 	.word	0x0800a627
 800a5f8:	0800a627 	.word	0x0800a627
 800a5fc:	0800a61f 	.word	0x0800a61f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a600:	f7fe ff70 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 800a604:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a606:	e014      	b.n	800a632 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a608:	f7fe ff82 	bl	8009510 <HAL_RCC_GetPCLK2Freq>
 800a60c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a60e:	e010      	b.n	800a632 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a610:	4b4e      	ldr	r3, [pc, #312]	@ (800a74c <UART_SetConfig+0x5c0>)
 800a612:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a614:	e00d      	b.n	800a632 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a616:	f7fe fef7 	bl	8009408 <HAL_RCC_GetSysClockFreq>
 800a61a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a61c:	e009      	b.n	800a632 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a61e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a622:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a624:	e005      	b.n	800a632 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a626:	2300      	movs	r3, #0
 800a628:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 8090 	beq.w	800a75a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63e:	4a44      	ldr	r2, [pc, #272]	@ (800a750 <UART_SetConfig+0x5c4>)
 800a640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a644:	461a      	mov	r2, r3
 800a646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a648:	fbb3 f3f2 	udiv	r3, r3, r2
 800a64c:	005a      	lsls	r2, r3, #1
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	085b      	lsrs	r3, r3, #1
 800a654:	441a      	add	r2, r3
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a65e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	2b0f      	cmp	r3, #15
 800a664:	d916      	bls.n	800a694 <UART_SetConfig+0x508>
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a66c:	d212      	bcs.n	800a694 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a66e:	6a3b      	ldr	r3, [r7, #32]
 800a670:	b29b      	uxth	r3, r3
 800a672:	f023 030f 	bic.w	r3, r3, #15
 800a676:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a678:	6a3b      	ldr	r3, [r7, #32]
 800a67a:	085b      	lsrs	r3, r3, #1
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	f003 0307 	and.w	r3, r3, #7
 800a682:	b29a      	uxth	r2, r3
 800a684:	8bfb      	ldrh	r3, [r7, #30]
 800a686:	4313      	orrs	r3, r2
 800a688:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	8bfa      	ldrh	r2, [r7, #30]
 800a690:	60da      	str	r2, [r3, #12]
 800a692:	e062      	b.n	800a75a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a69a:	e05e      	b.n	800a75a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a69c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a6a0:	2b08      	cmp	r3, #8
 800a6a2:	d828      	bhi.n	800a6f6 <UART_SetConfig+0x56a>
 800a6a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6ac <UART_SetConfig+0x520>)
 800a6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6aa:	bf00      	nop
 800a6ac:	0800a6d1 	.word	0x0800a6d1
 800a6b0:	0800a6d9 	.word	0x0800a6d9
 800a6b4:	0800a6e1 	.word	0x0800a6e1
 800a6b8:	0800a6f7 	.word	0x0800a6f7
 800a6bc:	0800a6e7 	.word	0x0800a6e7
 800a6c0:	0800a6f7 	.word	0x0800a6f7
 800a6c4:	0800a6f7 	.word	0x0800a6f7
 800a6c8:	0800a6f7 	.word	0x0800a6f7
 800a6cc:	0800a6ef 	.word	0x0800a6ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6d0:	f7fe ff08 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 800a6d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6d6:	e014      	b.n	800a702 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6d8:	f7fe ff1a 	bl	8009510 <HAL_RCC_GetPCLK2Freq>
 800a6dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6de:	e010      	b.n	800a702 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a74c <UART_SetConfig+0x5c0>)
 800a6e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a6e4:	e00d      	b.n	800a702 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6e6:	f7fe fe8f 	bl	8009408 <HAL_RCC_GetSysClockFreq>
 800a6ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6ec:	e009      	b.n	800a702 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a6f4:	e005      	b.n	800a702 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a700:	bf00      	nop
    }

    if (pclk != 0U)
 800a702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a704:	2b00      	cmp	r3, #0
 800a706:	d028      	beq.n	800a75a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a70c:	4a10      	ldr	r2, [pc, #64]	@ (800a750 <UART_SetConfig+0x5c4>)
 800a70e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a712:	461a      	mov	r2, r3
 800a714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a716:	fbb3 f2f2 	udiv	r2, r3, r2
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	085b      	lsrs	r3, r3, #1
 800a720:	441a      	add	r2, r3
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	2b0f      	cmp	r3, #15
 800a730:	d910      	bls.n	800a754 <UART_SetConfig+0x5c8>
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a738:	d20c      	bcs.n	800a754 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a73a:	6a3b      	ldr	r3, [r7, #32]
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	60da      	str	r2, [r3, #12]
 800a744:	e009      	b.n	800a75a <UART_SetConfig+0x5ce>
 800a746:	bf00      	nop
 800a748:	40008000 	.word	0x40008000
 800a74c:	00f42400 	.word	0x00f42400
 800a750:	08012dfc 	.word	0x08012dfc
      }
      else
      {
        ret = HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	2201      	movs	r2, #1
 800a75e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2201      	movs	r2, #1
 800a766:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2200      	movs	r2, #0
 800a76e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2200      	movs	r2, #0
 800a774:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a776:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3730      	adds	r7, #48	@ 0x30
 800a77e:	46bd      	mov	sp, r7
 800a780:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a790:	f003 0308 	and.w	r3, r3, #8
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00a      	beq.n	800a7ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	430a      	orrs	r2, r1
 800a7ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00a      	beq.n	800a7d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	430a      	orrs	r2, r1
 800a7ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d4:	f003 0302 	and.w	r3, r3, #2
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00a      	beq.n	800a7f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f6:	f003 0304 	and.w	r3, r3, #4
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00a      	beq.n	800a814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	430a      	orrs	r2, r1
 800a812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a818:	f003 0310 	and.w	r3, r3, #16
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00a      	beq.n	800a836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a83a:	f003 0320 	and.w	r3, r3, #32
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00a      	beq.n	800a858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	430a      	orrs	r2, r1
 800a856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a85c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a860:	2b00      	cmp	r3, #0
 800a862:	d01a      	beq.n	800a89a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	430a      	orrs	r2, r1
 800a878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a87e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a882:	d10a      	bne.n	800a89a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a89e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00a      	beq.n	800a8bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	430a      	orrs	r2, r1
 800a8ba:	605a      	str	r2, [r3, #4]
  }
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b098      	sub	sp, #96	@ 0x60
 800a8cc:	af02      	add	r7, sp, #8
 800a8ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8d8:	f7fb fa8a 	bl	8005df0 <HAL_GetTick>
 800a8dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0308 	and.w	r3, r3, #8
 800a8e8:	2b08      	cmp	r3, #8
 800a8ea:	d12f      	bne.n	800a94c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f88e 	bl	800aa1c <UART_WaitOnFlagUntilTimeout>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d022      	beq.n	800a94c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90e:	e853 3f00 	ldrex	r3, [r3]
 800a912:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a916:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a91a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	461a      	mov	r2, r3
 800a922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a924:	647b      	str	r3, [r7, #68]	@ 0x44
 800a926:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a928:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a92a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a92c:	e841 2300 	strex	r3, r2, [r1]
 800a930:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1e6      	bne.n	800a906 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2220      	movs	r2, #32
 800a93c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a948:	2303      	movs	r3, #3
 800a94a:	e063      	b.n	800aa14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 0304 	and.w	r3, r3, #4
 800a956:	2b04      	cmp	r3, #4
 800a958:	d149      	bne.n	800a9ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a95a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a962:	2200      	movs	r2, #0
 800a964:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f857 	bl	800aa1c <UART_WaitOnFlagUntilTimeout>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d03c      	beq.n	800a9ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97c:	e853 3f00 	ldrex	r3, [r3]
 800a980:	623b      	str	r3, [r7, #32]
   return(result);
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a988:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a992:	633b      	str	r3, [r7, #48]	@ 0x30
 800a994:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a998:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a99a:	e841 2300 	strex	r3, r2, [r1]
 800a99e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1e6      	bne.n	800a974 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	3308      	adds	r3, #8
 800a9ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	e853 3f00 	ldrex	r3, [r3]
 800a9b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f023 0301 	bic.w	r3, r3, #1
 800a9bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3308      	adds	r3, #8
 800a9c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9c6:	61fa      	str	r2, [r7, #28]
 800a9c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ca:	69b9      	ldr	r1, [r7, #24]
 800a9cc:	69fa      	ldr	r2, [r7, #28]
 800a9ce:	e841 2300 	strex	r3, r2, [r1]
 800a9d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e5      	bne.n	800a9a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e012      	b.n	800aa14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2220      	movs	r2, #32
 800a9fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3758      	adds	r7, #88	@ 0x58
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	603b      	str	r3, [r7, #0]
 800aa28:	4613      	mov	r3, r2
 800aa2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa2c:	e04f      	b.n	800aace <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa34:	d04b      	beq.n	800aace <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa36:	f7fb f9db 	bl	8005df0 <HAL_GetTick>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	69ba      	ldr	r2, [r7, #24]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d302      	bcc.n	800aa4c <UART_WaitOnFlagUntilTimeout+0x30>
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d101      	bne.n	800aa50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	e04e      	b.n	800aaee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 0304 	and.w	r3, r3, #4
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d037      	beq.n	800aace <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2b80      	cmp	r3, #128	@ 0x80
 800aa62:	d034      	beq.n	800aace <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b40      	cmp	r3, #64	@ 0x40
 800aa68:	d031      	beq.n	800aace <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	69db      	ldr	r3, [r3, #28]
 800aa70:	f003 0308 	and.w	r3, r3, #8
 800aa74:	2b08      	cmp	r3, #8
 800aa76:	d110      	bne.n	800aa9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2208      	movs	r2, #8
 800aa7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f000 f838 	bl	800aaf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2208      	movs	r2, #8
 800aa8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e029      	b.n	800aaee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aaa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aaa8:	d111      	bne.n	800aace <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f000 f81e 	bl	800aaf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2220      	movs	r2, #32
 800aabe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aaca:	2303      	movs	r3, #3
 800aacc:	e00f      	b.n	800aaee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	69da      	ldr	r2, [r3, #28]
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	4013      	ands	r3, r2
 800aad8:	68ba      	ldr	r2, [r7, #8]
 800aada:	429a      	cmp	r2, r3
 800aadc:	bf0c      	ite	eq
 800aade:	2301      	moveq	r3, #1
 800aae0:	2300      	movne	r3, #0
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	461a      	mov	r2, r3
 800aae6:	79fb      	ldrb	r3, [r7, #7]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d0a0      	beq.n	800aa2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b095      	sub	sp, #84	@ 0x54
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab06:	e853 3f00 	ldrex	r3, [r3]
 800ab0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	461a      	mov	r2, r3
 800ab1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab1c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab24:	e841 2300 	strex	r3, r2, [r1]
 800ab28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d1e6      	bne.n	800aafe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	3308      	adds	r3, #8
 800ab36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	e853 3f00 	ldrex	r3, [r3]
 800ab3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab46:	f023 0301 	bic.w	r3, r3, #1
 800ab4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3308      	adds	r3, #8
 800ab52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab5c:	e841 2300 	strex	r3, r2, [r1]
 800ab60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e3      	bne.n	800ab30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d118      	bne.n	800aba2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	e853 3f00 	ldrex	r3, [r3]
 800ab7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	f023 0310 	bic.w	r3, r3, #16
 800ab84:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab8e:	61bb      	str	r3, [r7, #24]
 800ab90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab92:	6979      	ldr	r1, [r7, #20]
 800ab94:	69ba      	ldr	r2, [r7, #24]
 800ab96:	e841 2300 	strex	r3, r2, [r1]
 800ab9a:	613b      	str	r3, [r7, #16]
   return(result);
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1e6      	bne.n	800ab70 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2220      	movs	r2, #32
 800aba6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800abb6:	bf00      	nop
 800abb8:	3754      	adds	r7, #84	@ 0x54
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b084      	sub	sp, #16
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f7ff fabd 	bl	800a160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abe6:	bf00      	nop
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b088      	sub	sp, #32
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	e853 3f00 	ldrex	r3, [r3]
 800ac02:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac0a:	61fb      	str	r3, [r7, #28]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	461a      	mov	r2, r3
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	61bb      	str	r3, [r7, #24]
 800ac16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac18:	6979      	ldr	r1, [r7, #20]
 800ac1a:	69ba      	ldr	r2, [r7, #24]
 800ac1c:	e841 2300 	strex	r3, r2, [r1]
 800ac20:	613b      	str	r3, [r7, #16]
   return(result);
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1e6      	bne.n	800abf6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7ff fa88 	bl	800a14c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac3c:	bf00      	nop
 800ac3e:	3720      	adds	r7, #32
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d101      	bne.n	800ac96 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac92:	2302      	movs	r3, #2
 800ac94:	e027      	b.n	800ace6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2224      	movs	r2, #36	@ 0x24
 800aca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f022 0201 	bic.w	r2, r2, #1
 800acbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800acc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2220      	movs	r2, #32
 800acd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b084      	sub	sp, #16
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d101      	bne.n	800ad0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad06:	2302      	movs	r3, #2
 800ad08:	e02d      	b.n	800ad66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2224      	movs	r2, #36	@ 0x24
 800ad16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f022 0201 	bic.w	r2, r2, #1
 800ad30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	683a      	ldr	r2, [r7, #0]
 800ad42:	430a      	orrs	r2, r1
 800ad44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f850 	bl	800adec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2220      	movs	r2, #32
 800ad58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b084      	sub	sp, #16
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d101      	bne.n	800ad86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad82:	2302      	movs	r3, #2
 800ad84:	e02d      	b.n	800ade2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2224      	movs	r2, #36	@ 0x24
 800ad92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f022 0201 	bic.w	r2, r2, #1
 800adac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	430a      	orrs	r2, r1
 800adc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f812 	bl	800adec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2220      	movs	r2, #32
 800add4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800adec:	b480      	push	{r7}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d108      	bne.n	800ae0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae0c:	e031      	b.n	800ae72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae0e:	2308      	movs	r3, #8
 800ae10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae12:	2308      	movs	r3, #8
 800ae14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	0e5b      	lsrs	r3, r3, #25
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	f003 0307 	and.w	r3, r3, #7
 800ae24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	0f5b      	lsrs	r3, r3, #29
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	f003 0307 	and.w	r3, r3, #7
 800ae34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae36:	7bbb      	ldrb	r3, [r7, #14]
 800ae38:	7b3a      	ldrb	r2, [r7, #12]
 800ae3a:	4911      	ldr	r1, [pc, #68]	@ (800ae80 <UARTEx_SetNbDataToProcess+0x94>)
 800ae3c:	5c8a      	ldrb	r2, [r1, r2]
 800ae3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae42:	7b3a      	ldrb	r2, [r7, #12]
 800ae44:	490f      	ldr	r1, [pc, #60]	@ (800ae84 <UARTEx_SetNbDataToProcess+0x98>)
 800ae46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae48:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
 800ae56:	7b7a      	ldrb	r2, [r7, #13]
 800ae58:	4909      	ldr	r1, [pc, #36]	@ (800ae80 <UARTEx_SetNbDataToProcess+0x94>)
 800ae5a:	5c8a      	ldrb	r2, [r1, r2]
 800ae5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae60:	7b7a      	ldrb	r2, [r7, #13]
 800ae62:	4908      	ldr	r1, [pc, #32]	@ (800ae84 <UARTEx_SetNbDataToProcess+0x98>)
 800ae64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae66:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae72:	bf00      	nop
 800ae74:	3714      	adds	r7, #20
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	08012e14 	.word	0x08012e14
 800ae84:	08012e1c 	.word	0x08012e1c

0800ae88 <_ZN17AbstractAllocatorD1Ev>:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
    virtual void* allocate(CanardInstance* ins, size_t amount) = 0;
    virtual void free(CanardInstance* ins, void* pointer) = 0;
    virtual ~AbstractAllocator() {}
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	4a04      	ldr	r2, [pc, #16]	@ (800aea4 <_ZN17AbstractAllocatorD1Ev+0x1c>)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr
 800aea4:	08012da8 	.word	0x08012da8

0800aea8 <_ZN17AbstractAllocatorD0Ev>:
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7ff ffe9 	bl	800ae88 <_ZN17AbstractAllocatorD1Ev>
 800aeb6:	2108      	movs	r1, #8
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f002 fe54 	bl	800db66 <_ZdlPvj>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4618      	mov	r0, r3
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
#include "sys_allocator.h"
#include <cstdlib>

void* SystemAllocator::allocate(CanardInstance* const ins, const size_t amount) {
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
    (void)ins;
    void* mem;

    CRITICAL_SECTION({ mem = std::malloc(amount); })
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f002 fe9f 	bl	800dc18 <malloc>
 800aeda:	4603      	mov	r3, r0
 800aedc:	617b      	str	r3, [r7, #20]
    if (mem == nullptr) {
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d105      	bne.n	800aef0 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
        utilities.error_handler();
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	3310      	adds	r3, #16
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7f9 fd0a 	bl	8004904 <_ZNKSt8functionIFvvEEclEv>
    }
    return mem;
 800aef0:	697b      	ldr	r3, [r7, #20]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <_ZN15SystemAllocator4freeEP14CanardInstancePv>:

void SystemAllocator::free(CanardInstance* const ins, void* const pointer) {
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b084      	sub	sp, #16
 800aefe:	af00      	add	r7, sp, #0
 800af00:	60f8      	str	r0, [r7, #12]
 800af02:	60b9      	str	r1, [r7, #8]
 800af04:	607a      	str	r2, [r7, #4]
    (void)ins;
    CRITICAL_SECTION({ std::free(pointer); })
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f002 fe8e 	bl	800dc28 <free>
}
 800af0c:	bf00      	nop
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <_ZN15SystemAllocatorD1Ev>:
class SystemAllocator : public AbstractAllocator {
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	4a05      	ldr	r2, [pc, #20]	@ (800af34 <_ZN15SystemAllocatorD1Ev+0x20>)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	601a      	str	r2, [r3, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4618      	mov	r0, r3
 800af26:	f7ff ffaf 	bl	800ae88 <_ZN17AbstractAllocatorD1Ev>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4618      	mov	r0, r3
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	08012e2c 	.word	0x08012e2c

0800af38 <_ZN15SystemAllocatorD0Ev>:
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7ff ffe7 	bl	800af14 <_ZN15SystemAllocatorD1Ev>
 800af46:	2108      	movs	r1, #8
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f002 fe0c 	bl	800db66 <_ZdlPvj>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4618      	mov	r0, r3
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
void CyphalInterface::push(
    const CanardMicrosecond tx_deadline_usec,
    const CanardTransferMetadata* const metadata,
    const size_t payload_size,
    const void* const payload
) const {
 800af58:	b590      	push	{r4, r7, lr}
 800af5a:	b08b      	sub	sp, #44	@ 0x2c
 800af5c:	af04      	add	r7, sp, #16
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t push_state = canardTxPush(
        &provider->queue,
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	3304      	adds	r3, #4
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 f876 	bl	800b05a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800af6e:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800af70:	f103 040c 	add.w	r4, r3, #12
        &provider->canard,
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	3304      	adds	r3, #4
 800af78:	4618      	mov	r0, r3
 800af7a:	f000 f86e 	bl	800b05a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800af7e:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800af80:	f103 0120 	add.w	r1, r3, #32
 800af84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af86:	9302      	str	r3, [sp, #8]
 800af88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8a:	9301      	str	r3, [sp, #4]
 800af8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af94:	4620      	mov	r0, r4
 800af96:	f002 fb3f 	bl	800d618 <canardTxPush>
 800af9a:	6178      	str	r0, [r7, #20]
        tx_deadline_usec,
        metadata,
        payload_size,
        payload
    );
    if (push_state == -CANARD_ERROR_OUT_OF_MEMORY) {
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	f113 0f03 	cmn.w	r3, #3
 800afa2:	d106      	bne.n	800afb2 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
#ifdef __linux__
        std::cerr << "[Error: OOM] Tried to send to port: " << metadata->port_id << ", node: " << +metadata->remote_node_id << std::endl;
#else
        utilities.error_handler();
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	3310      	adds	r3, #16
 800afaa:	4618      	mov	r0, r3
 800afac:	f7f9 fcaa 	bl	8004904 <_ZNKSt8functionIFvvEEclEv>
#endif
        return;
 800afb0:	e008      	b.n	800afc4 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
    }
    if (push_state < 0) {
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	da05      	bge.n	800afc4 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
        utilities.error_handler();
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	3310      	adds	r3, #16
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7f9 fca0 	bl	8004904 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800afc4:	371c      	adds	r7, #28
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd90      	pop	{r4, r7, pc}
	...

0800afcc <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
void CyphalInterface::subscribe(
    CanardPortID port_id,
    size_t extent,
    CanardTransferKind kind,
    CanardRxSubscription* subscription
) const {
 800afcc:	b590      	push	{r4, r7, lr}
 800afce:	b089      	sub	sp, #36	@ 0x24
 800afd0:	af04      	add	r7, sp, #16
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	607a      	str	r2, [r7, #4]
 800afd6:	461a      	mov	r2, r3
 800afd8:	460b      	mov	r3, r1
 800afda:	817b      	strh	r3, [r7, #10]
 800afdc:	4613      	mov	r3, r2
 800afde:	727b      	strb	r3, [r7, #9]
    if (canardRxSubscribe(
            (CanardInstance* const)&provider->canard,
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3304      	adds	r3, #4
 800afe4:	4618      	mov	r0, r3
 800afe6:	f000 f838 	bl	800b05a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800afea:	4603      	mov	r3, r0
    if (canardRxSubscribe(
 800afec:	f103 0020 	add.w	r0, r3, #32
 800aff0:	897c      	ldrh	r4, [r7, #10]
 800aff2:	7a79      	ldrb	r1, [r7, #9]
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	9302      	str	r3, [sp, #8]
 800aff8:	4a0d      	ldr	r2, [pc, #52]	@ (800b030 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 800affa:	f04f 0300 	mov.w	r3, #0
 800affe:	e9cd 2300 	strd	r2, r3, [sp]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4622      	mov	r2, r4
 800b006:	f002 fc57 	bl	800d8b8 <canardRxSubscribe>
 800b00a:	4603      	mov	r3, r0
            kind,
            port_id,
            extent,
            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
            subscription
        ) != 1) {
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	bf14      	ite	ne
 800b010:	2301      	movne	r3, #1
 800b012:	2300      	moveq	r3, #0
 800b014:	b2db      	uxtb	r3, r3
    if (canardRxSubscribe(
 800b016:	2b00      	cmp	r3, #0
 800b018:	d005      	beq.n	800b026 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
        utilities.error_handler();
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	3310      	adds	r3, #16
 800b020:	4618      	mov	r0, r3
 800b022:	f7f9 fc6f 	bl	8004904 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800b026:	bf00      	nop
 800b028:	3714      	adds	r7, #20
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd90      	pop	{r4, r7, pc}
 800b02e:	bf00      	nop
 800b030:	001e8480 	.word	0x001e8480

0800b034 <_ZN15CyphalInterface4loopEv>:

void CyphalInterface::loop() {
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
    provider->can_loop();
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3304      	adds	r3, #4
 800b040:	4618      	mov	r0, r3
 800b042:	f000 f80a 	bl	800b05a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800b046:	4603      	mov	r3, r0
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	3208      	adds	r2, #8
 800b04c:	6812      	ldr	r2, [r2, #0]
 800b04e:	4618      	mov	r0, r3
 800b050:	4790      	blx	r2
}
 800b052:	bf00      	nop
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      operator->() const noexcept
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b082      	sub	sp, #8
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
      {
	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
	return get();
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f805 	bl	800b072 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 800b068:	4603      	mov	r3, r0
      }
 800b06a:	4618      	mov	r0, r3
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 800b072:	b580      	push	{r7, lr}
 800b074:	b082      	sub	sp, #8
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 f805 	bl	800b08c <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800b082:	4603      	mov	r3, r0
 800b084:	4618      	mov	r0, r3
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4618      	mov	r0, r3
 800b098:	f000 f806 	bl	800b0a8 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800b09c:	4603      	mov	r3, r0
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    { return std::__get_helper<__i>(__t); }

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f000 f805 	bl	800b0c2 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b082      	sub	sp, #8
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f805 	bl	800b0da <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b082      	sub	sp, #8
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f000 f805 	bl	800b0f4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4618      	mov	r0, r3
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <_Z16fdcan_dlc_to_lenm>:
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
};

size_t fdcan_dlc_to_len(uint32_t dlc) {
 800b10a:	b480      	push	{r7}
 800b10c:	b085      	sub	sp, #20
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
    auto dlc_index = (uint8_t)(dlc / 65536);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	0c1b      	lsrs	r3, r3, #16
 800b116:	73fb      	strb	r3, [r7, #15]
    if (dlc_index <= 8) {
 800b118:	7bfb      	ldrb	r3, [r7, #15]
 800b11a:	2b08      	cmp	r3, #8
 800b11c:	d801      	bhi.n	800b122 <_Z16fdcan_dlc_to_lenm+0x18>
        return dlc_index;
 800b11e:	7bfb      	ldrb	r3, [r7, #15]
 800b120:	e009      	b.n	800b136 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    if (dlc_index <= 12) {
 800b122:	7bfb      	ldrb	r3, [r7, #15]
 800b124:	2b0c      	cmp	r3, #12
 800b126:	d803      	bhi.n	800b130 <_Z16fdcan_dlc_to_lenm+0x26>
        return 8 + 4 * (dlc_index - 8);
 800b128:	7bfb      	ldrb	r3, [r7, #15]
 800b12a:	3b06      	subs	r3, #6
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	e002      	b.n	800b136 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    return 32 + 16 * (dlc_index - 13);
 800b130:	7bfb      	ldrb	r3, [r7, #15]
 800b132:	3b0b      	subs	r3, #11
 800b134:	011b      	lsls	r3, r3, #4
}
 800b136:	4618      	mov	r0, r3
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
	...

0800b144 <_ZL12delay_cyclest>:
       bne     .L3               // 1 + 1-3 такта, в среднем 2(3?)
     *
     * Всего 5 тактов на цикл + 8 в начале.
     */

    uint8_t real_cycles = (cycles - 8) / 5;
 800b144:	f1a0 0308 	sub.w	r3, r0, #8
 800b148:	4a07      	ldr	r2, [pc, #28]	@ (800b168 <_ZL12delay_cyclest+0x24>)
 800b14a:	fb82 1203 	smull	r1, r2, r2, r3
 800b14e:	17db      	asrs	r3, r3, #31
 800b150:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    while (real_cycles--) {
 800b154:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 800b158:	d004      	beq.n	800b164 <_ZL12delay_cyclest+0x20>
        __asm__("nop");
 800b15a:	bf00      	nop
    while (real_cycles--) {
 800b15c:	3b01      	subs	r3, #1
 800b15e:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 800b162:	d1fa      	bne.n	800b15a <_ZL12delay_cyclest+0x16>
    }
}
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	66666667 	.word	0x66666667

0800b16c <_ZN5G4CAN10len_to_dlcEj>:
#if (defined(STM32G474xx) || defined(STM32_G)) && defined(HAL_FDCAN_MODULE_ENABLED)
#include <cstring>

#include "FDCAN_generic.h"

uint32_t G4CAN::len_to_dlc(size_t len) {
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
    return CanardFDCANLengthToDLC[len];
 800b176:	4a05      	ldr	r2, [pc, #20]	@ (800b18c <_ZN5G4CAN10len_to_dlcEj+0x20>)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	08012e3c 	.word	0x08012e3c

0800b190 <_ZN5G4CAN10dlc_to_lenEm>:

size_t G4CAN::dlc_to_len(uint32_t dlc) {
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
    return fdcan_dlc_to_len(dlc);
 800b19a:	6838      	ldr	r0, [r7, #0]
 800b19c:	f7ff ffb5 	bl	800b10a <_Z16fdcan_dlc_to_lenm>
 800b1a0:	4603      	mov	r3, r0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <_ZN5G4CAN8can_loopEv>:

void G4CAN::can_loop() {
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b086      	sub	sp, #24
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800b1b2:	e017      	b.n	800b1e4 <_ZN5G4CAN8can_loopEv+0x3a>
        CanardFrame frame;
        bool has_read = read_frame(&frame);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	330c      	adds	r3, #12
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f107 0208 	add.w	r2, r7, #8
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	4798      	blx	r3
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	75fb      	strb	r3, [r7, #23]
        if (!has_read)
 800b1ca:	7dfb      	ldrb	r3, [r7, #23]
 800b1cc:	f083 0301 	eor.w	r3, r3, #1
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d115      	bne.n	800b202 <_ZN5G4CAN8can_loopEv+0x58>
            break;
        process_canard_rx(&frame);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f107 0208 	add.w	r2, r7, #8
 800b1dc:	4611      	mov	r1, r2
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 f8e2 	bl	800b3a8 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1e8:	2140      	movs	r1, #64	@ 0x40
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fb fd34 	bl	8006c58 <HAL_FDCAN_GetRxFifoFillLevel>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	bf14      	ite	ne
 800b1f6:	2301      	movne	r3, #1
 800b1f8:	2300      	moveq	r3, #0
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1d9      	bne.n	800b1b4 <_ZN5G4CAN8can_loopEv+0xa>
 800b200:	e000      	b.n	800b204 <_ZN5G4CAN8can_loopEv+0x5a>
            break;
 800b202:	bf00      	nop
    }

    process_canard_tx();
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4618      	mov	r0, r3
 800b208:	f000 f92e 	bl	800b468 <_ZN19AbstractCANProvider17process_canard_txEv>
}
 800b20c:	bf00      	nop
 800b20e:	3718      	adds	r7, #24
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <_ZN5G4CAN10read_frameEP11CanardFrame>:

static uint8_t RxData[64] = {};

bool G4CAN::read_frame(CanardFrame* rxf) {
 800b214:	b580      	push	{r7, lr}
 800b216:	b08e      	sub	sp, #56	@ 0x38
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
    // may want to check 2 FIFOs in the future
    uint32_t rx_fifo = -1;
 800b21e:	f04f 33ff 	mov.w	r3, #4294967295
 800b222:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0)) {
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b228:	2140      	movs	r1, #64	@ 0x40
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fb fd14 	bl	8006c58 <HAL_FDCAN_GetRxFifoFillLevel>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	bf14      	ite	ne
 800b236:	2301      	movne	r3, #1
 800b238:	2300      	moveq	r3, #0
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d002      	beq.n	800b246 <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
        rx_fifo = FDCAN_RX_FIFO0;
 800b240:	2340      	movs	r3, #64	@ 0x40
 800b242:	637b      	str	r3, [r7, #52]	@ 0x34
 800b244:	e00f      	b.n	800b266 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
    } else if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO1)) {
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b24a:	2141      	movs	r1, #65	@ 0x41
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fb fd03 	bl	8006c58 <HAL_FDCAN_GetRxFifoFillLevel>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	bf14      	ite	ne
 800b258:	2301      	movne	r3, #1
 800b25a:	2300      	moveq	r3, #0
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
        rx_fifo = FDCAN_RX_FIFO1;
 800b262:	2341      	movs	r3, #65	@ 0x41
 800b264:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if (rx_fifo == (uint32_t)-1) {
 800b266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26c:	d101      	bne.n	800b272 <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
        return false;
 800b26e:	2300      	movs	r3, #0
 800b270:	e02e      	b.n	800b2d0 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
    }

    FDCAN_RxHeaderTypeDef RxHeader = {};
 800b272:	f107 030c 	add.w	r3, r7, #12
 800b276:	2228      	movs	r2, #40	@ 0x28
 800b278:	2100      	movs	r1, #0
 800b27a:	4618      	mov	r0, r3
 800b27c:	f003 fd47 	bl	800ed0e <memset>
    if (HAL_FDCAN_GetRxMessage(handler, rx_fifo, &RxHeader, RxData) != HAL_OK) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800b284:	f107 020c 	add.w	r2, r7, #12
 800b288:	4b13      	ldr	r3, [pc, #76]	@ (800b2d8 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800b28a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b28c:	f7fb fc0a 	bl	8006aa4 <HAL_FDCAN_GetRxMessage>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	bf14      	ite	ne
 800b296:	2301      	movne	r3, #1
 800b298:	2300      	moveq	r3, #0
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d005      	beq.n	800b2ac <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
        utilities.error_handler();
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2a4:	3310      	adds	r3, #16
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7f9 fb2c 	bl	8004904 <_ZNKSt8functionIFvvEEclEv>
    }

    rxf->extended_can_id = RxHeader.Identifier;
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	601a      	str	r2, [r3, #0]
    rxf->payload_size = dlc_to_len(RxHeader.DataLength);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	69ba      	ldr	r2, [r7, #24]
 800b2bc:	4611      	mov	r1, r2
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	4798      	blx	r3
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	605a      	str	r2, [r3, #4]
    rxf->payload = (void*)RxData;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	4a03      	ldr	r2, [pc, #12]	@ (800b2d8 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800b2cc:	609a      	str	r2, [r3, #8]
    return true;
 800b2ce:	2301      	movs	r3, #1
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3738      	adds	r7, #56	@ 0x38
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20000570 	.word	0x20000570

0800b2dc <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:

int G4CAN::write_frame(const CanardTxQueueItem* ti) {
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b08c      	sub	sp, #48	@ 0x30
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = ti->frame.extended_can_id;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	6a1b      	ldr	r3, [r3, #32]
 800b2ea:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 800b2ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b2f0:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = CanardFDCANLengthToDLC[ti->frame.payload_size];
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2fa:	4a2a      	ldr	r2, [pc, #168]	@ (800b3a4 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 800b2fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b300:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800b302:	2300      	movs	r3, #0
 800b304:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800b306:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b30a:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 800b30c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b310:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 800b312:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b316:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.MessageMarker = 0x0;
 800b318:	2300      	movs	r3, #0
 800b31a:	62bb      	str	r3, [r7, #40]	@ 0x28

    // all mailboxes should be free -
    // https://forum.opencyphal.org/t/uavcan-v0-found-data-transfer-reversal/1476/6
    // "Reduce the number of enqueued frames to 1" - fix to inner priority inversion
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800b31c:	2300      	movs	r3, #0
 800b31e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b320:	e006      	b.n	800b330 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
        delay_cycles(ONE_FULL_FRAME_CYCLES);
 800b322:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 800b326:	f7ff ff0d 	bl	800b144 <_ZL12delay_cyclest>
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800b32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32c:	3301      	adds	r3, #1
 800b32e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b334:	4618      	mov	r0, r3
 800b336:	f7fb fcad 	bl	8006c94 <HAL_FDCAN_GetTxFifoFreeLevel>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	d004      	beq.n	800b34a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800b340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b342:	2b02      	cmp	r3, #2
 800b344:	dc01      	bgt.n	800b34a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800b346:	2301      	movs	r3, #1
 800b348:	e000      	b.n	800b34c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 800b34a:	2300      	movs	r3, #0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1e8      	bne.n	800b322 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
    } // wait for message to transmit
    if (HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3) {
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b354:	4618      	mov	r0, r3
 800b356:	f7fb fc9d 	bl	8006c94 <HAL_FDCAN_GetTxFifoFreeLevel>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b03      	cmp	r3, #3
 800b35e:	bf14      	ite	ne
 800b360:	2301      	movne	r3, #1
 800b362:	2300      	moveq	r3, #0
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b00      	cmp	r3, #0
 800b368:	d002      	beq.n	800b370 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
        return -1;
 800b36a:	f04f 33ff 	mov.w	r3, #4294967295
 800b36e:	e014      	b.n	800b39a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }

    if (HAL_FDCAN_AddMessageToTxFifoQ(handler, &TxHeader, (uint8_t *)ti->frame.payload) != HAL_OK) {
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b378:	f107 0308 	add.w	r3, r7, #8
 800b37c:	4619      	mov	r1, r3
 800b37e:	f7fb fb4d 	bl	8006a1c <HAL_FDCAN_AddMessageToTxFifoQ>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	bf14      	ite	ne
 800b388:	2301      	movne	r3, #1
 800b38a:	2300      	moveq	r3, #0
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d002      	beq.n	800b398 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
        return -1;
 800b392:	f04f 33ff 	mov.w	r3, #4294967295
 800b396:	e000      	b.n	800b39a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }
    return TxHeader.DataLength;
 800b398:	697b      	ldr	r3, [r7, #20]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3730      	adds	r7, #48	@ 0x30
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	08012e3c 	.word	0x08012e3c

0800b3a8 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
CanardInstance canard{};

std::unique_ptr<AbstractAllocator> _alloc_ptr;


void AbstractCANProvider::process_canard_rx(CanardFrame* frame) {
 800b3a8:	b590      	push	{r4, r7, lr}
 800b3aa:	b093      	sub	sp, #76	@ 0x4c
 800b3ac:	af04      	add	r7, sp, #16
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
    CanardRxTransfer transfer = {.payload = nullptr};
 800b3b2:	f107 0310 	add.w	r3, r7, #16
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	605a      	str	r2, [r3, #4]
 800b3bc:	609a      	str	r2, [r3, #8]
 800b3be:	60da      	str	r2, [r3, #12]
 800b3c0:	611a      	str	r2, [r3, #16]
 800b3c2:	615a      	str	r2, [r3, #20]
    CanardRxSubscription* subscription = nullptr;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	60fb      	str	r3, [r7, #12]
    void (*processor)(CanardRxTransfer*) = nullptr;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	637b      	str	r3, [r7, #52]	@ 0x34
    IListener<CanardRxTransfer*>* listener = nullptr;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	633b      	str	r3, [r7, #48]	@ 0x30

    const int8_t accept_result = canardRxAccept(
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f103 0420 	add.w	r4, r3, #32
        (CanardInstance* const)&canard,
        utilities.micros_64(),
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    const int8_t accept_result = canardRxAccept(
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7f9 faa8 	bl	8004930 <_ZNKSt8functionIFyvEEclEv>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	f107 010c 	add.w	r1, r7, #12
 800b3e8:	9103      	str	r1, [sp, #12]
 800b3ea:	f107 0110 	add.w	r1, r7, #16
 800b3ee:	9102      	str	r1, [sp, #8]
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	9101      	str	r1, [sp, #4]
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	9100      	str	r1, [sp, #0]
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f002 f9cd 	bl	800d798 <canardRxAccept>
 800b3fe:	4603      	mov	r3, r0
 800b400:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        frame,
        0,
        &transfer,
        &subscription
    );
    if (accept_result == 0 || accept_result > 1) {
 800b404:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d029      	beq.n	800b460 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xb8>
 800b40c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b410:	2b01      	cmp	r3, #1
 800b412:	dc25      	bgt.n	800b460 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xb8>
        // The received frame is either invalid or it's a non-last frame of a multi-frame transfer.
        return;
    }
    if (accept_result < 0) goto exit;
 800b414:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b418:	2b00      	cmp	r3, #0
 800b41a:	db11      	blt.n	800b440 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x98>
    if (subscription == nullptr) goto exit;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d010      	beq.n	800b444 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x9c>

    listener = reinterpret_cast<IListener<CanardRxTransfer*>*>(subscription->user_reference);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	633b      	str	r3, [r7, #48]	@ 0x30
    if (listener == nullptr) goto exit;
 800b428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00c      	beq.n	800b448 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
    listener->accept(&transfer);
 800b42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f107 0210 	add.w	r2, r7, #16
 800b438:	4611      	mov	r1, r2
 800b43a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b43c:	4798      	blx	r3
 800b43e:	e004      	b.n	800b44a <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (accept_result < 0) goto exit;
 800b440:	bf00      	nop
 800b442:	e002      	b.n	800b44a <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (subscription == nullptr) goto exit;
 800b444:	bf00      	nop
 800b446:	e000      	b.n	800b44a <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (listener == nullptr) goto exit;
 800b448:	bf00      	nop

exit:
    if (transfer.payload != nullptr) {
 800b44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d008      	beq.n	800b462 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xba>
        canard.memory_free(&canard, transfer.payload);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	3220      	adds	r2, #32
 800b458:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b45a:	4610      	mov	r0, r2
 800b45c:	4798      	blx	r3
 800b45e:	e000      	b.n	800b462 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xba>
        return;
 800b460:	bf00      	nop
    }
}
 800b462:	373c      	adds	r7, #60	@ 0x3c
 800b464:	46bd      	mov	sp, r7
 800b466:	bd90      	pop	{r4, r7, pc}

0800b468 <_ZN19AbstractCANProvider17process_canard_txEv>:

void AbstractCANProvider::process_canard_tx() {
 800b468:	b5b0      	push	{r4, r5, r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
    // Look at top of the TX queue of individual CAN frames
    while (queue.size != 0) {
 800b470:	e036      	b.n	800b4e0 <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
        const CanardTxQueueItem* ti = canardTxPeek(&queue);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	330c      	adds	r3, #12
 800b476:	4618      	mov	r0, r3
 800b478:	f002 f958 	bl	800d72c <canardTxPeek>
 800b47c:	60f8      	str	r0, [r7, #12]

        if (0U == ti->tx_deadline_usec || ti->tx_deadline_usec > utilities.micros_64()) {
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b484:	4313      	orrs	r3, r2
 800b486:	d00c      	beq.n	800b4a2 <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b492:	4618      	mov	r0, r3
 800b494:	f7f9 fa4c 	bl	8004930 <_ZNKSt8functionIFyvEEclEv>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	42a2      	cmp	r2, r4
 800b49e:	41ab      	sbcs	r3, r5
 800b4a0:	d201      	bcs.n	800b4a6 <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e000      	b.n	800b4a8 <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00a      	beq.n	800b4c2 <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
            int written = write_frame(ti);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	3310      	adds	r3, #16
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68f9      	ldr	r1, [r7, #12]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	4798      	blx	r3
 800b4ba:	60b8      	str	r0, [r7, #8]
            if (written < 0) {
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	db13      	blt.n	800b4ea <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
                break;
            }
        }
        // After the frame is transmitted or if it has timed out while waiting,
        // pop it from the queue and deallocate:
        canard.memory_free(&canard, canardTxPop(&queue, ti));
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f103 0520 	add.w	r5, r3, #32
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	330c      	adds	r3, #12
 800b4d0:	68f9      	ldr	r1, [r7, #12]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f002 f93f 	bl	800d756 <canardTxPop>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	4619      	mov	r1, r3
 800b4dc:	4628      	mov	r0, r5
 800b4de:	47a0      	blx	r4
    while (queue.size != 0) {
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	695b      	ldr	r3, [r3, #20]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1c4      	bne.n	800b472 <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
    }
}
 800b4e8:	e000      	b.n	800b4ec <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
                break;
 800b4ea:	bf00      	nop
}
 800b4ec:	bf00      	nop
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bdb0      	pop	{r4, r5, r7, pc}

0800b4f4 <_Z41__static_initialization_and_destruction_0ii>:
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d107      	bne.n	800b514 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d102      	bne.n	800b514 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b50e:	4803      	ldr	r0, [pc, #12]	@ (800b51c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800b510:	f000 f806 	bl	800b520 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 800b514:	bf00      	nop
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	200005b0 	.word	0x200005b0

0800b520 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800b520:	b590      	push	{r4, r7, lr}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7f9 ffc6 	bl	80054bc <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800b530:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00c      	beq.n	800b554 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7f9 fe32 	bl	80051a4 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 800b540:	4604      	mov	r4, r0
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f7f9 fee6 	bl	8005314 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 800b548:	4603      	mov	r3, r0
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4619      	mov	r1, r3
 800b54e:	4620      	mov	r0, r4
 800b550:	f7f9 ffc1 	bl	80054d6 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	601a      	str	r2, [r3, #0]
      }
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4618      	mov	r0, r3
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	bd90      	pop	{r4, r7, pc}

0800b564 <_GLOBAL__sub_I_queue>:
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0
 800b568:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b56c:	2001      	movs	r0, #1
 800b56e:	f7ff ffc1 	bl	800b4f4 <_Z41__static_initialization_and_destruction_0ii>
 800b572:	bd80      	pop	{r7, pc}

0800b574 <_GLOBAL__sub_D_queue>:
 800b574:	b580      	push	{r7, lr}
 800b576:	af00      	add	r7, sp, #0
 800b578:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b57c:	2000      	movs	r0, #0
 800b57e:	f7ff ffb9 	bl	800b4f4 <_Z41__static_initialization_and_destruction_0ii>
 800b582:	bd80      	pop	{r7, pc}

0800b584 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 800b590:	2300      	movs	r3, #0
 800b592:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800b598:	e007      	b.n	800b5aa <cavlFindExtremum+0x26>
    {
        result = c;
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 800b59e:	78fb      	ldrb	r3, [r7, #3]
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	4413      	add	r3, r2
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1f4      	bne.n	800b59a <cavlFindExtremum+0x16>
    }
    return result;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
	...

0800b5c0 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d014      	beq.n	800b5fc <cavlPrivateRotate+0x3c>
 800b5d2:	78fb      	ldrb	r3, [r7, #3]
 800b5d4:	f083 0301 	eor.w	r3, r3, #1
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4413      	add	r3, r2
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00a      	beq.n	800b5fc <cavlPrivateRotate+0x3c>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f0:	db04      	blt.n	800b5fc <cavlPrivateRotate+0x3c>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	dd05      	ble.n	800b608 <cavlPrivateRotate+0x48>
 800b5fc:	4b2a      	ldr	r3, [pc, #168]	@ (800b6a8 <cavlPrivateRotate+0xe8>)
 800b5fe:	4a2b      	ldr	r2, [pc, #172]	@ (800b6ac <cavlPrivateRotate+0xec>)
 800b600:	2162      	movs	r1, #98	@ 0x62
 800b602:	482b      	ldr	r0, [pc, #172]	@ (800b6b0 <cavlPrivateRotate+0xf0>)
 800b604:	f002 fad8 	bl	800dbb8 <__assert_func>
    Cavl* const z = x->lr[!r];
 800b608:	78fb      	ldrb	r3, [r7, #3]
 800b60a:	f083 0301 	eor.w	r3, r3, #1
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00e      	beq.n	800b640 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	6879      	ldr	r1, [r7, #4]
 800b62e:	4299      	cmp	r1, r3
 800b630:	bf0c      	ite	eq
 800b632:	2301      	moveq	r3, #1
 800b634:	2300      	movne	r3, #0
 800b636:	b2db      	uxtb	r3, r3
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	4413      	add	r3, r2
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	601a      	str	r2, [r3, #0]
    x->up     = z;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 800b64e:	78fb      	ldrb	r3, [r7, #3]
 800b650:	78fa      	ldrb	r2, [r7, #3]
 800b652:	f082 0201 	eor.w	r2, r2, #1
 800b656:	b2d2      	uxtb	r2, r2
 800b658:	4610      	mov	r0, r2
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	4413      	add	r3, r2
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	6879      	ldr	r1, [r7, #4]
 800b664:	0083      	lsls	r3, r0, #2
 800b666:	440b      	add	r3, r1
 800b668:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 800b66a:	78fb      	ldrb	r3, [r7, #3]
 800b66c:	f083 0301 	eor.w	r3, r3, #1
 800b670:	b2db      	uxtb	r3, r3
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4413      	add	r3, r2
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d009      	beq.n	800b692 <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 800b67e:	78fb      	ldrb	r3, [r7, #3]
 800b680:	f083 0301 	eor.w	r3, r3, #1
 800b684:	b2db      	uxtb	r3, r3
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4413      	add	r3, r2
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 800b692:	78fb      	ldrb	r3, [r7, #3]
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4413      	add	r3, r2
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	605a      	str	r2, [r3, #4]
}
 800b69e:	bf00      	nop
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	08012300 	.word	0x08012300
 800b6ac:	080132c8 	.word	0x080132c8
 800b6b0:	08012348 	.word	0x08012348

0800b6b4 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00a      	beq.n	800b6dc <cavlPrivateAdjustBalance+0x28>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d0:	db04      	blt.n	800b6dc <cavlPrivateAdjustBalance+0x28>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	dd05      	ble.n	800b6e8 <cavlPrivateAdjustBalance+0x34>
 800b6dc:	4b61      	ldr	r3, [pc, #388]	@ (800b864 <cavlPrivateAdjustBalance+0x1b0>)
 800b6de:	4a62      	ldr	r2, [pc, #392]	@ (800b868 <cavlPrivateAdjustBalance+0x1b4>)
 800b6e0:	2177      	movs	r1, #119	@ 0x77
 800b6e2:	4862      	ldr	r0, [pc, #392]	@ (800b86c <cavlPrivateAdjustBalance+0x1b8>)
 800b6e4:	f002 fa68 	bl	800dbb8 <__assert_func>
    Cavl*        out    = x;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	78fa      	ldrb	r2, [r7, #3]
 800b6f6:	2a00      	cmp	r2, #0
 800b6f8:	d001      	beq.n	800b6fe <cavlPrivateAdjustBalance+0x4a>
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	e000      	b.n	800b700 <cavlPrivateAdjustBalance+0x4c>
 800b6fe:	22ff      	movs	r2, #255	@ 0xff
 800b700:	4413      	add	r3, r2
 800b702:	b2db      	uxtb	r3, r3
 800b704:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 800b706:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70e:	db04      	blt.n	800b71a <cavlPrivateAdjustBalance+0x66>
 800b710:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b714:	2b01      	cmp	r3, #1
 800b716:	f340 809c 	ble.w	800b852 <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 800b71a:	7cfb      	ldrb	r3, [r7, #19]
 800b71c:	09db      	lsrs	r3, r3, #7
 800b71e:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 800b720:	7cbb      	ldrb	r3, [r7, #18]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d001      	beq.n	800b72a <cavlPrivateAdjustBalance+0x76>
 800b726:	2301      	movs	r3, #1
 800b728:	e001      	b.n	800b72e <cavlPrivateAdjustBalance+0x7a>
 800b72a:	f04f 33ff 	mov.w	r3, #4294967295
 800b72e:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 800b730:	7cbb      	ldrb	r3, [r7, #18]
 800b732:	f083 0301 	eor.w	r3, r3, #1
 800b736:	b2db      	uxtb	r3, r3
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	4413      	add	r3, r2
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d105      	bne.n	800b754 <cavlPrivateAdjustBalance+0xa0>
 800b748:	4b49      	ldr	r3, [pc, #292]	@ (800b870 <cavlPrivateAdjustBalance+0x1bc>)
 800b74a:	4a47      	ldr	r2, [pc, #284]	@ (800b868 <cavlPrivateAdjustBalance+0x1b4>)
 800b74c:	217f      	movs	r1, #127	@ 0x7f
 800b74e:	4847      	ldr	r0, [pc, #284]	@ (800b86c <cavlPrivateAdjustBalance+0x1b8>)
 800b750:	f002 fa32 	bl	800dbb8 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b75a:	461a      	mov	r2, r3
 800b75c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b760:	fb02 f303 	mul.w	r3, r2, r3
 800b764:	2b00      	cmp	r3, #0
 800b766:	dc1c      	bgt.n	800b7a2 <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 800b76c:	7cbb      	ldrb	r3, [r7, #18]
 800b76e:	4619      	mov	r1, r3
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f7ff ff25 	bl	800b5c0 <cavlPrivateRotate>
            if (0 == z->bf)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d109      	bne.n	800b794 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 800b780:	7c7b      	ldrb	r3, [r7, #17]
 800b782:	425b      	negs	r3, r3
 800b784:	b2db      	uxtb	r3, r3
 800b786:	b25a      	sxtb	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	7c7a      	ldrb	r2, [r7, #17]
 800b790:	731a      	strb	r2, [r3, #12]
    {
 800b792:	e061      	b.n	800b858 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2200      	movs	r2, #0
 800b79e:	731a      	strb	r2, [r3, #12]
    {
 800b7a0:	e05a      	b.n	800b858 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 800b7a2:	7cbb      	ldrb	r3, [r7, #18]
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4413      	add	r3, r2
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d105      	bne.n	800b7c0 <cavlPrivateAdjustBalance+0x10c>
 800b7b4:	4b2f      	ldr	r3, [pc, #188]	@ (800b874 <cavlPrivateAdjustBalance+0x1c0>)
 800b7b6:	4a2c      	ldr	r2, [pc, #176]	@ (800b868 <cavlPrivateAdjustBalance+0x1b4>)
 800b7b8:	2192      	movs	r1, #146	@ 0x92
 800b7ba:	482c      	ldr	r0, [pc, #176]	@ (800b86c <cavlPrivateAdjustBalance+0x1b8>)
 800b7bc:	f002 f9fc 	bl	800dbb8 <__assert_func>
            out = y;
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 800b7c4:	7cbb      	ldrb	r3, [r7, #18]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	bf14      	ite	ne
 800b7ca:	2301      	movne	r3, #1
 800b7cc:	2300      	moveq	r3, #0
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	f083 0301 	eor.w	r3, r3, #1
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	4619      	mov	r1, r3
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f7ff feee 	bl	800b5c0 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 800b7e4:	7cbb      	ldrb	r3, [r7, #18]
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7ff fee9 	bl	800b5c0 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b7fa:	fb02 f303 	mul.w	r3, r2, r3
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	da09      	bge.n	800b816 <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	7c7a      	ldrb	r2, [r7, #17]
 800b806:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2200      	movs	r2, #0
 800b80c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2200      	movs	r2, #0
 800b812:	731a      	strb	r2, [r3, #12]
    {
 800b814:	e020      	b.n	800b858 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b81c:	461a      	mov	r2, r3
 800b81e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b822:	fb02 f303 	mul.w	r3, r2, r3
 800b826:	2b00      	cmp	r3, #0
 800b828:	dd0c      	ble.n	800b844 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2200      	movs	r2, #0
 800b834:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 800b836:	7c7b      	ldrb	r3, [r7, #17]
 800b838:	425b      	negs	r3, r3
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	b25a      	sxtb	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	731a      	strb	r2, [r3, #12]
    {
 800b842:	e009      	b.n	800b858 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2200      	movs	r2, #0
 800b84e:	731a      	strb	r2, [r3, #12]
    {
 800b850:	e002      	b.n	800b858 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	7cfa      	ldrb	r2, [r7, #19]
 800b856:	731a      	strb	r2, [r3, #12]
    }
    return out;
 800b858:	697b      	ldr	r3, [r7, #20]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3718      	adds	r7, #24
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	08012374 	.word	0x08012374
 800b868:	080132ac 	.word	0x080132ac
 800b86c:	08012348 	.word	0x08012348
 800b870:	080123a4 	.word	0x080123a4
 800b874:	080123b0 	.word	0x080123b0

0800b878 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d004      	beq.n	800b890 <cavlPrivateRetraceOnGrowth+0x18>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d005      	beq.n	800b89c <cavlPrivateRetraceOnGrowth+0x24>
 800b890:	4b23      	ldr	r3, [pc, #140]	@ (800b920 <cavlPrivateRetraceOnGrowth+0xa8>)
 800b892:	4a24      	ldr	r2, [pc, #144]	@ (800b924 <cavlPrivateRetraceOnGrowth+0xac>)
 800b894:	21b5      	movs	r1, #181	@ 0xb5
 800b896:	4824      	ldr	r0, [pc, #144]	@ (800b928 <cavlPrivateRetraceOnGrowth+0xb0>)
 800b898:	f002 f98e 	bl	800dbb8 <__assert_func>
    Cavl* c = added;      // Child
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 800b8a6:	e023      	b.n	800b8f0 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	697a      	ldr	r2, [r7, #20]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	bf0c      	ite	eq
 800b8b2:	2301      	moveq	r3, #1
 800b8b4:	2300      	movne	r3, #0
 800b8b6:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	4413      	add	r3, r2
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d005      	beq.n	800b8d4 <cavlPrivateRetraceOnGrowth+0x5c>
 800b8c8:	4b18      	ldr	r3, [pc, #96]	@ (800b92c <cavlPrivateRetraceOnGrowth+0xb4>)
 800b8ca:	4a16      	ldr	r2, [pc, #88]	@ (800b924 <cavlPrivateRetraceOnGrowth+0xac>)
 800b8cc:	21bb      	movs	r1, #187	@ 0xbb
 800b8ce:	4816      	ldr	r0, [pc, #88]	@ (800b928 <cavlPrivateRetraceOnGrowth+0xb0>)
 800b8d0:	f002 f972 	bl	800dbb8 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6938      	ldr	r0, [r7, #16]
 800b8da:	f7ff feeb 	bl	800b6b4 <cavlPrivateAdjustBalance>
 800b8de:	6178      	str	r0, [r7, #20]
        p = c->up;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d003      	beq.n	800b8f8 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1d8      	bne.n	800b8a8 <cavlPrivateRetraceOnGrowth+0x30>
 800b8f6:	e000      	b.n	800b8fa <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 800b8f8:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d105      	bne.n	800b90c <cavlPrivateRetraceOnGrowth+0x94>
 800b900:	4b0b      	ldr	r3, [pc, #44]	@ (800b930 <cavlPrivateRetraceOnGrowth+0xb8>)
 800b902:	4a08      	ldr	r2, [pc, #32]	@ (800b924 <cavlPrivateRetraceOnGrowth+0xac>)
 800b904:	21c3      	movs	r1, #195	@ 0xc3
 800b906:	4808      	ldr	r0, [pc, #32]	@ (800b928 <cavlPrivateRetraceOnGrowth+0xb0>)
 800b908:	f002 f956 	bl	800dbb8 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <cavlPrivateRetraceOnGrowth+0x9e>
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	e000      	b.n	800b918 <cavlPrivateRetraceOnGrowth+0xa0>
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3718      	adds	r7, #24
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	080123bc 	.word	0x080123bc
 800b924:	08013290 	.word	0x08013290
 800b928:	08012348 	.word	0x08012348
 800b92c:	080123e0 	.word	0x080123e0
 800b930:	080123f0 	.word	0x080123f0

0800b934 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b08a      	sub	sp, #40	@ 0x28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
 800b940:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 800b942:	2300      	movs	r3, #0
 800b944:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d065      	beq.n	800ba18 <cavlSearch+0xe4>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d062      	beq.n	800ba18 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 800b95c:	e02f      	b.n	800b9be <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4611      	mov	r1, r2
 800b966:	68b8      	ldr	r0, [r7, #8]
 800b968:	4798      	blx	r3
 800b96a:	4603      	mov	r3, r0
 800b96c:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 800b96e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d103      	bne.n	800b97e <cavlSearch+0x4a>
            {
                out = *n;
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800b97c:	e023      	b.n	800b9c6 <cavlSearch+0x92>
            }
            up = *n;
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	bfcc      	ite	gt
 800b990:	2301      	movgt	r3, #1
 800b992:	2300      	movle	r3, #0
 800b994:	b2db      	uxtb	r3, r3
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	3304      	adds	r3, #4
 800b99c:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00b      	beq.n	800b9be <cavlSearch+0x8a>
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6a3a      	ldr	r2, [r7, #32]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d005      	beq.n	800b9be <cavlSearch+0x8a>
 800b9b2:	4b1c      	ldr	r3, [pc, #112]	@ (800ba24 <cavlSearch+0xf0>)
 800b9b4:	4a1c      	ldr	r2, [pc, #112]	@ (800ba28 <cavlSearch+0xf4>)
 800b9b6:	21db      	movs	r1, #219	@ 0xdb
 800b9b8:	481c      	ldr	r0, [pc, #112]	@ (800ba2c <cavlSearch+0xf8>)
 800b9ba:	f002 f8fd 	bl	800dbb8 <__assert_func>
        while (*n != NULL)
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1cb      	bne.n	800b95e <cavlSearch+0x2a>
        }
        if (NULL == out)
 800b9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d125      	bne.n	800ba18 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d004      	beq.n	800b9dc <cavlSearch+0xa8>
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	68b8      	ldr	r0, [r7, #8]
 800b9d6:	4798      	blx	r3
 800b9d8:	4603      	mov	r3, r0
 800b9da:	e000      	b.n	800b9de <cavlSearch+0xaa>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d018      	beq.n	800ba18 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9ea:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	609a      	str	r2, [r3, #8]
                out->up        = up;
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fa:	6a3a      	ldr	r2, [r7, #32]
 800b9fc:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba00:	2200      	movs	r2, #0
 800ba02:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 800ba04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba06:	f7ff ff37 	bl	800b878 <cavlPrivateRetraceOnGrowth>
 800ba0a:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d002      	beq.n	800ba18 <cavlSearch+0xe4>
                {
                    *root = rt;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	697a      	ldr	r2, [r7, #20]
 800ba16:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 800ba18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3728      	adds	r7, #40	@ 0x28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	080123fc 	.word	0x080123fc
 800ba28:	08013284 	.word	0x08013284
 800ba2c:	08012348 	.word	0x08012348

0800ba30 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b088      	sub	sp, #32
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f000 8116 	beq.w	800bc6e <cavlRemove+0x23e>
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	f000 8112 	beq.w	800bc6e <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d105      	bne.n	800ba5e <cavlRemove+0x2e>
 800ba52:	4b89      	ldr	r3, [pc, #548]	@ (800bc78 <cavlRemove+0x248>)
 800ba54:	4a89      	ldr	r2, [pc, #548]	@ (800bc7c <cavlRemove+0x24c>)
 800ba56:	21f6      	movs	r1, #246	@ 0xf6
 800ba58:	4889      	ldr	r0, [pc, #548]	@ (800bc80 <cavlRemove+0x250>)
 800ba5a:	f002 f8ad 	bl	800dbb8 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10a      	bne.n	800ba7c <cavlRemove+0x4c>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	683a      	ldr	r2, [r7, #0]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d005      	beq.n	800ba7c <cavlRemove+0x4c>
 800ba70:	4b84      	ldr	r3, [pc, #528]	@ (800bc84 <cavlRemove+0x254>)
 800ba72:	4a82      	ldr	r2, [pc, #520]	@ (800bc7c <cavlRemove+0x24c>)
 800ba74:	21f7      	movs	r1, #247	@ 0xf7
 800ba76:	4882      	ldr	r0, [pc, #520]	@ (800bc80 <cavlRemove+0x250>)
 800ba78:	f002 f89e 	bl	800dbb8 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 800ba80:	2300      	movs	r3, #0
 800ba82:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d073      	beq.n	800bb74 <cavlRemove+0x144>
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d06f      	beq.n	800bb74 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	2100      	movs	r1, #0
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7ff fd72 	bl	800b584 <cavlFindExtremum>
 800baa0:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d007      	beq.n	800bab8 <cavlRemove+0x88>
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d103      	bne.n	800bab8 <cavlRemove+0x88>
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d105      	bne.n	800bac4 <cavlRemove+0x94>
 800bab8:	4b73      	ldr	r3, [pc, #460]	@ (800bc88 <cavlRemove+0x258>)
 800baba:	4a70      	ldr	r2, [pc, #448]	@ (800bc7c <cavlRemove+0x24c>)
 800babc:	21ff      	movs	r1, #255	@ 0xff
 800babe:	4870      	ldr	r0, [pc, #448]	@ (800bc80 <cavlRemove+0x250>)
 800bac0:	f002 f87a 	bl	800dbb8 <__assert_func>
            re->bf        = node->bf;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	685a      	ldr	r2, [r3, #4]
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	683a      	ldr	r2, [r7, #0]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d025      	beq.n	800bb34 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d006      	beq.n	800bb06 <cavlRemove+0xd6>
 800baf8:	4b64      	ldr	r3, [pc, #400]	@ (800bc8c <cavlRemove+0x25c>)
 800bafa:	4a60      	ldr	r2, [pc, #384]	@ (800bc7c <cavlRemove+0x24c>)
 800bafc:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800bb00:	485f      	ldr	r0, [pc, #380]	@ (800bc80 <cavlRemove+0x250>)
 800bb02:	f002 f859 	bl	800dbb8 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	689a      	ldr	r2, [r3, #8]
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d003      	beq.n	800bb1e <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	69fa      	ldr	r2, [r7, #28]
 800bb1c:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	689a      	ldr	r2, [r3, #8]
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	697a      	ldr	r2, [r7, #20]
 800bb2c:	601a      	str	r2, [r3, #0]
                r             = false;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	76fb      	strb	r3, [r7, #27]
 800bb32:	e003      	b.n	800bb3c <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 800bb38:	2301      	movs	r3, #1
 800bb3a:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00f      	beq.n	800bb6c <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	6839      	ldr	r1, [r7, #0]
 800bb58:	4299      	cmp	r1, r3
 800bb5a:	bf0c      	ite	eq
 800bb5c:	2301      	moveq	r3, #1
 800bb5e:	2300      	movne	r3, #0
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4413      	add	r3, r2
 800bb66:	697a      	ldr	r2, [r7, #20]
 800bb68:	605a      	str	r2, [r3, #4]
        {
 800bb6a:	e046      	b.n	800bbfa <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	601a      	str	r2, [r3, #0]
        {
 800bb72:	e042      	b.n	800bbfa <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	bf14      	ite	ne
 800bb82:	2301      	movne	r3, #1
 800bb84:	2300      	moveq	r3, #0
 800bb86:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 800bb88:	7cfb      	ldrb	r3, [r7, #19]
 800bb8a:	683a      	ldr	r2, [r7, #0]
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4413      	add	r3, r2
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d006      	beq.n	800bba4 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 800bb96:	7cfb      	ldrb	r3, [r7, #19]
 800bb98:	683a      	ldr	r2, [r7, #0]
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	4413      	add	r3, r2
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	69fa      	ldr	r2, [r7, #28]
 800bba2:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d020      	beq.n	800bbec <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	683a      	ldr	r2, [r7, #0]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	bf0c      	ite	eq
 800bbb4:	2301      	moveq	r3, #1
 800bbb6:	2300      	movne	r3, #0
 800bbb8:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 800bbba:	7cfb      	ldrb	r3, [r7, #19]
 800bbbc:	7ef8      	ldrb	r0, [r7, #27]
 800bbbe:	683a      	ldr	r2, [r7, #0]
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4413      	add	r3, r2
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	69f9      	ldr	r1, [r7, #28]
 800bbc8:	0083      	lsls	r3, r0, #2
 800bbca:	440b      	add	r3, r1
 800bbcc:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 800bbce:	7efb      	ldrb	r3, [r7, #27]
 800bbd0:	69fa      	ldr	r2, [r7, #28]
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	4413      	add	r3, r2
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00e      	beq.n	800bbfa <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 800bbdc:	7efb      	ldrb	r3, [r7, #27]
 800bbde:	69fa      	ldr	r2, [r7, #28]
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	69fa      	ldr	r2, [r7, #28]
 800bbe8:	601a      	str	r2, [r3, #0]
 800bbea:	e006      	b.n	800bbfa <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 800bbec:	7cfb      	ldrb	r3, [r7, #19]
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	4413      	add	r3, r2
 800bbf4:	685a      	ldr	r2, [r3, #4]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d036      	beq.n	800bc6e <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 800bc00:	2300      	movs	r3, #0
 800bc02:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 800bc04:	7efb      	ldrb	r3, [r7, #27]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	bf14      	ite	ne
 800bc0a:	2301      	movne	r3, #1
 800bc0c:	2300      	moveq	r3, #0
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	f083 0301 	eor.w	r3, r3, #1
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	f003 0301 	and.w	r3, r3, #1
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	69f8      	ldr	r0, [r7, #28]
 800bc20:	f7ff fd48 	bl	800b6b4 <cavlPrivateAdjustBalance>
 800bc24:	60f8      	str	r0, [r7, #12]
                p = c->up;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d10b      	bne.n	800bc4e <cavlRemove+0x21e>
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d008      	beq.n	800bc4e <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	bf0c      	ite	eq
 800bc46:	2301      	moveq	r3, #1
 800bc48:	2300      	movne	r3, #0
 800bc4a:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 800bc4c:	e7da      	b.n	800bc04 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10c      	bne.n	800bc6e <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <cavlRemove+0x238>
 800bc5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc90 <cavlRemove+0x260>)
 800bc5c:	4a07      	ldr	r2, [pc, #28]	@ (800bc7c <cavlRemove+0x24c>)
 800bc5e:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800bc62:	4807      	ldr	r0, [pc, #28]	@ (800bc80 <cavlRemove+0x250>)
 800bc64:	f001 ffa8 	bl	800dbb8 <__assert_func>
                *root = c;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 800bc6e:	bf00      	nop
 800bc70:	3720      	adds	r7, #32
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	08012420 	.word	0x08012420
 800bc7c:	0801330c 	.word	0x0801330c
 800bc80:	08012348 	.word	0x08012348
 800bc84:	08012430 	.word	0x08012430
 800bc88:	08012458 	.word	0x08012458
 800bc8c:	08012490 	.word	0x08012490
 800bc90:	080123f0 	.word	0x080123f0

0800bc94 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 800bc9c:	687b      	ldr	r3, [r7, #4]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
	...

0800bcac <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	460a      	mov	r2, r1
 800bcb6:	80fb      	strh	r3, [r7, #6]
 800bcb8:	4613      	mov	r3, r2
 800bcba:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800bcbc:	88fb      	ldrh	r3, [r7, #6]
 800bcbe:	021b      	lsls	r3, r3, #8
 800bcc0:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 800bcc2:	88fb      	ldrh	r3, [r7, #6]
 800bcc4:	0a1b      	lsrs	r3, r3, #8
 800bcc6:	b299      	uxth	r1, r3
 800bcc8:	797b      	ldrb	r3, [r7, #5]
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	404b      	eors	r3, r1
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	4905      	ldr	r1, [pc, #20]	@ (800bce8 <crcAddByte+0x3c>)
 800bcd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800bcd8:	4053      	eors	r3, r2
 800bcda:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	08012f5c 	.word	0x08012f5c

0800bcec <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b088      	sub	sp, #32
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d108      	bne.n	800bd12 <crcAdd+0x26>
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d005      	beq.n	800bd12 <crcAdd+0x26>
 800bd06:	4b12      	ldr	r3, [pc, #72]	@ (800bd50 <crcAdd+0x64>)
 800bd08:	4a12      	ldr	r2, [pc, #72]	@ (800bd54 <crcAdd+0x68>)
 800bd0a:	2185      	movs	r1, #133	@ 0x85
 800bd0c:	4812      	ldr	r0, [pc, #72]	@ (800bd58 <crcAdd+0x6c>)
 800bd0e:	f001 ff53 	bl	800dbb8 <__assert_func>
    TransferCRC    out = crc;
 800bd12:	89fb      	ldrh	r3, [r7, #14]
 800bd14:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	617b      	str	r3, [r7, #20]
 800bd1e:	e00e      	b.n	800bd3e <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	781a      	ldrb	r2, [r3, #0]
 800bd24:	8bfb      	ldrh	r3, [r7, #30]
 800bd26:	4611      	mov	r1, r2
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7ff ffbf 	bl	800bcac <crcAddByte>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	83fb      	strh	r3, [r7, #30]
        ++p;
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	3301      	adds	r3, #1
 800bd36:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	617b      	str	r3, [r7, #20]
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d3ec      	bcc.n	800bd20 <crcAdd+0x34>
    }
    return out;
 800bd46:	8bfb      	ldrh	r3, [r7, #30]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3720      	adds	r7, #32
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	080124a0 	.word	0x080124a0
 800bd54:	080131d8 	.word	0x080131d8
 800bd58:	080124c8 	.word	0x080124c8

0800bd5c <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	4603      	mov	r3, r0
 800bd64:	460a      	mov	r2, r1
 800bd66:	80fb      	strh	r3, [r7, #6]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800bd6c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	da05      	bge.n	800bd80 <txMakeMessageSessionSpecifier+0x24>
 800bd74:	4b0e      	ldr	r3, [pc, #56]	@ (800bdb0 <txMakeMessageSessionSpecifier+0x54>)
 800bd76:	4a0f      	ldr	r2, [pc, #60]	@ (800bdb4 <txMakeMessageSessionSpecifier+0x58>)
 800bd78:	21ac      	movs	r1, #172	@ 0xac
 800bd7a:	480f      	ldr	r0, [pc, #60]	@ (800bdb8 <txMakeMessageSessionSpecifier+0x5c>)
 800bd7c:	f001 ff1c 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 800bd80:	88fb      	ldrh	r3, [r7, #6]
 800bd82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd86:	d305      	bcc.n	800bd94 <txMakeMessageSessionSpecifier+0x38>
 800bd88:	4b0c      	ldr	r3, [pc, #48]	@ (800bdbc <txMakeMessageSessionSpecifier+0x60>)
 800bd8a:	4a0a      	ldr	r2, [pc, #40]	@ (800bdb4 <txMakeMessageSessionSpecifier+0x58>)
 800bd8c:	21ad      	movs	r1, #173	@ 0xad
 800bd8e:	480a      	ldr	r0, [pc, #40]	@ (800bdb8 <txMakeMessageSessionSpecifier+0x5c>)
 800bd90:	f001 ff12 	bl	800dbb8 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 800bd94:	88fb      	ldrh	r3, [r7, #6]
 800bd96:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 800bd9e:	797a      	ldrb	r2, [r7, #5]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	021b      	lsls	r3, r3, #8
 800bda4:	4313      	orrs	r3, r2
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	080124f8 	.word	0x080124f8
 800bdb4:	080131e0 	.word	0x080131e0
 800bdb8:	080124c8 	.word	0x080124c8
 800bdbc:	0801250c 	.word	0x0801250c

0800bdc0 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 800bdc0:	b590      	push	{r4, r7, lr}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	4608      	mov	r0, r1
 800bdca:	4611      	mov	r1, r2
 800bdcc:	461a      	mov	r2, r3
 800bdce:	4623      	mov	r3, r4
 800bdd0:	80fb      	strh	r3, [r7, #6]
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	717b      	strb	r3, [r7, #5]
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	713b      	strb	r3, [r7, #4]
 800bdda:	4613      	mov	r3, r2
 800bddc:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800bdde:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	da05      	bge.n	800bdf2 <txMakeServiceSessionSpecifier+0x32>
 800bde6:	4b17      	ldr	r3, [pc, #92]	@ (800be44 <txMakeServiceSessionSpecifier+0x84>)
 800bde8:	4a17      	ldr	r2, [pc, #92]	@ (800be48 <txMakeServiceSessionSpecifier+0x88>)
 800bdea:	21b7      	movs	r1, #183	@ 0xb7
 800bdec:	4817      	ldr	r0, [pc, #92]	@ (800be4c <txMakeServiceSessionSpecifier+0x8c>)
 800bdee:	f001 fee3 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 800bdf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	da05      	bge.n	800be06 <txMakeServiceSessionSpecifier+0x46>
 800bdfa:	4b15      	ldr	r3, [pc, #84]	@ (800be50 <txMakeServiceSessionSpecifier+0x90>)
 800bdfc:	4a12      	ldr	r2, [pc, #72]	@ (800be48 <txMakeServiceSessionSpecifier+0x88>)
 800bdfe:	21b8      	movs	r1, #184	@ 0xb8
 800be00:	4812      	ldr	r0, [pc, #72]	@ (800be4c <txMakeServiceSessionSpecifier+0x8c>)
 800be02:	f001 fed9 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 800be06:	88fb      	ldrh	r3, [r7, #6]
 800be08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be0c:	d305      	bcc.n	800be1a <txMakeServiceSessionSpecifier+0x5a>
 800be0e:	4b11      	ldr	r3, [pc, #68]	@ (800be54 <txMakeServiceSessionSpecifier+0x94>)
 800be10:	4a0d      	ldr	r2, [pc, #52]	@ (800be48 <txMakeServiceSessionSpecifier+0x88>)
 800be12:	21b9      	movs	r1, #185	@ 0xb9
 800be14:	480d      	ldr	r0, [pc, #52]	@ (800be4c <txMakeServiceSessionSpecifier+0x8c>)
 800be16:	f001 fecf 	bl	800dbb8 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800be1a:	793a      	ldrb	r2, [r7, #4]
 800be1c:	78fb      	ldrb	r3, [r7, #3]
 800be1e:	01db      	lsls	r3, r3, #7
 800be20:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800be22:	88fb      	ldrh	r3, [r7, #6]
 800be24:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800be26:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800be28:	797a      	ldrb	r2, [r7, #5]
 800be2a:	2a00      	cmp	r2, #0
 800be2c:	d002      	beq.n	800be34 <txMakeServiceSessionSpecifier+0x74>
 800be2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800be32:	e000      	b.n	800be36 <txMakeServiceSessionSpecifier+0x76>
 800be34:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800be36:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800be38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	bd90      	pop	{r4, r7, pc}
 800be44:	080124f8 	.word	0x080124f8
 800be48:	08013200 	.word	0x08013200
 800be4c:	080124c8 	.word	0x080124c8
 800be50:	08012520 	.word	0x08012520
 800be54:	08012534 	.word	0x08012534

0800be58 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 800be60:	2340      	movs	r3, #64	@ 0x40
 800be62:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 800be64:	2300      	movs	r3, #0
 800be66:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b07      	cmp	r3, #7
 800be6c:	d802      	bhi.n	800be74 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 800be6e:	2308      	movs	r3, #8
 800be70:	60fb      	str	r3, [r7, #12]
 800be72:	e014      	b.n	800be9e <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d808      	bhi.n	800be8e <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 800be7c:	4a0c      	ldr	r2, [pc, #48]	@ (800beb0 <adjustPresentationLayerMTU+0x58>)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4413      	add	r3, r2
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	461a      	mov	r2, r3
 800be86:	4b0b      	ldr	r3, [pc, #44]	@ (800beb4 <adjustPresentationLayerMTU+0x5c>)
 800be88:	5c9b      	ldrb	r3, [r3, r2]
 800be8a:	60fb      	str	r3, [r7, #12]
 800be8c:	e007      	b.n	800be9e <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 800be8e:	4a08      	ldr	r2, [pc, #32]	@ (800beb0 <adjustPresentationLayerMTU+0x58>)
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	4413      	add	r3, r2
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	461a      	mov	r2, r3
 800be98:	4b06      	ldr	r3, [pc, #24]	@ (800beb4 <adjustPresentationLayerMTU+0x5c>)
 800be9a:	5c9b      	ldrb	r3, [r3, r2]
 800be9c:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3b01      	subs	r3, #1
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	0801316c 	.word	0x0801316c
 800beb4:	0801315c 	.word	0x0801315c

0800beb8 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b08a      	sub	sp, #40	@ 0x28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
 800bec4:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d105      	bne.n	800bed8 <txMakeCANID+0x20>
 800becc:	4b60      	ldr	r3, [pc, #384]	@ (800c050 <txMakeCANID+0x198>)
 800bece:	4a61      	ldr	r2, [pc, #388]	@ (800c054 <txMakeCANID+0x19c>)
 800bed0:	21d9      	movs	r1, #217	@ 0xd9
 800bed2:	4861      	ldr	r0, [pc, #388]	@ (800c058 <txMakeCANID+0x1a0>)
 800bed4:	f001 fe70 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 800bed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d105      	bne.n	800beea <txMakeCANID+0x32>
 800bede:	4b5f      	ldr	r3, [pc, #380]	@ (800c05c <txMakeCANID+0x1a4>)
 800bee0:	4a5c      	ldr	r2, [pc, #368]	@ (800c054 <txMakeCANID+0x19c>)
 800bee2:	21da      	movs	r1, #218	@ 0xda
 800bee4:	485c      	ldr	r0, [pc, #368]	@ (800c058 <txMakeCANID+0x1a0>)
 800bee6:	f001 fe67 	bl	800dbb8 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800beea:	f06f 0301 	mvn.w	r3, #1
 800beee:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	785b      	ldrb	r3, [r3, #1]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d157      	bne.n	800bfa8 <txMakeCANID+0xf0>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	791b      	ldrb	r3, [r3, #4]
 800befc:	2bff      	cmp	r3, #255	@ 0xff
 800befe:	d153      	bne.n	800bfa8 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800bf04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf08:	d24e      	bcs.n	800bfa8 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bf0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	db11      	blt.n	800bf36 <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	885b      	ldrh	r3, [r3, #2]
 800bf16:	78fa      	ldrb	r2, [r7, #3]
 800bf18:	4611      	mov	r1, r2
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7ff ff1e 	bl	800bd5c <txMakeMessageSessionSpecifier>
 800bf20:	4603      	mov	r3, r0
 800bf22:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 800bf24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	da75      	bge.n	800c016 <txMakeCANID+0x15e>
 800bf2a:	4b4d      	ldr	r3, [pc, #308]	@ (800c060 <txMakeCANID+0x1a8>)
 800bf2c:	4a49      	ldr	r2, [pc, #292]	@ (800c054 <txMakeCANID+0x19c>)
 800bf2e:	21e2      	movs	r1, #226	@ 0xe2
 800bf30:	4849      	ldr	r0, [pc, #292]	@ (800c058 <txMakeCANID+0x1a0>)
 800bf32:	f001 fe41 	bl	800dbb8 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d830      	bhi.n	800bfa0 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d108      	bne.n	800bf56 <txMakeCANID+0x9e>
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d005      	beq.n	800bf56 <txMakeCANID+0x9e>
 800bf4a:	4b46      	ldr	r3, [pc, #280]	@ (800c064 <txMakeCANID+0x1ac>)
 800bf4c:	4a41      	ldr	r2, [pc, #260]	@ (800c054 <txMakeCANID+0x19c>)
 800bf4e:	21e6      	movs	r1, #230	@ 0xe6
 800bf50:	4841      	ldr	r0, [pc, #260]	@ (800c058 <txMakeCANID+0x1a0>)
 800bf52:	f001 fe31 	bl	800dbb8 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	68b9      	ldr	r1, [r7, #8]
 800bf5a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800bf5e:	f7ff fec5 	bl	800bcec <crcAdd>
 800bf62:	4603      	mov	r3, r0
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	885b      	ldrh	r3, [r3, #2]
 800bf72:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800bf76:	4611      	mov	r1, r2
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7ff feef 	bl	800bd5c <txMakeMessageSessionSpecifier>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf84:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf8c:	d305      	bcc.n	800bf9a <txMakeCANID+0xe2>
 800bf8e:	4b36      	ldr	r3, [pc, #216]	@ (800c068 <txMakeCANID+0x1b0>)
 800bf90:	4a30      	ldr	r2, [pc, #192]	@ (800c054 <txMakeCANID+0x19c>)
 800bf92:	21e9      	movs	r1, #233	@ 0xe9
 800bf94:	4830      	ldr	r0, [pc, #192]	@ (800c058 <txMakeCANID+0x1a0>)
 800bf96:	f001 fe0f 	bl	800dbb8 <__assert_func>
            out = (int32_t) spec;
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bf9e:	e03a      	b.n	800c016 <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 800bfa0:	f06f 0301 	mvn.w	r3, #1
 800bfa4:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bfa6:	e036      	b.n	800c016 <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	785b      	ldrb	r3, [r3, #1]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d003      	beq.n	800bfb8 <txMakeCANID+0x100>
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	785b      	ldrb	r3, [r3, #1]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d12a      	bne.n	800c00e <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	791b      	ldrb	r3, [r3, #4]
 800bfbc:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	db25      	blt.n	800c00e <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	885b      	ldrh	r3, [r3, #2]
 800bfc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfca:	d220      	bcs.n	800c00e <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bfcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	db18      	blt.n	800c006 <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	bf0c      	ite	eq
 800bfe0:	2301      	moveq	r3, #1
 800bfe2:	2300      	movne	r3, #0
 800bfe4:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800bfea:	78fa      	ldrb	r2, [r7, #3]
 800bfec:	f7ff fee8 	bl	800bdc0 <txMakeServiceSessionSpecifier>
 800bff0:	4603      	mov	r3, r0
 800bff2:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 800bff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	da0f      	bge.n	800c01a <txMakeCANID+0x162>
 800bffa:	4b19      	ldr	r3, [pc, #100]	@ (800c060 <txMakeCANID+0x1a8>)
 800bffc:	4a15      	ldr	r2, [pc, #84]	@ (800c054 <txMakeCANID+0x19c>)
 800bffe:	21fa      	movs	r1, #250	@ 0xfa
 800c000:	4815      	ldr	r0, [pc, #84]	@ (800c058 <txMakeCANID+0x1a0>)
 800c002:	f001 fdd9 	bl	800dbb8 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 800c006:	f06f 0301 	mvn.w	r3, #1
 800c00a:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800c00c:	e005      	b.n	800c01a <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 800c00e:	f06f 0301 	mvn.w	r3, #1
 800c012:	627b      	str	r3, [r7, #36]	@ 0x24
 800c014:	e002      	b.n	800c01c <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800c016:	bf00      	nop
 800c018:	e000      	b.n	800c01c <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800c01a:	bf00      	nop
    }

    if (out >= 0)
 800c01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01e:	2b00      	cmp	r3, #0
 800c020:	db10      	blt.n	800c044 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	2b07      	cmp	r3, #7
 800c02c:	d807      	bhi.n	800c03e <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	069a      	lsls	r2, r3, #26
 800c032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c034:	4313      	orrs	r3, r2
 800c036:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c03c:	e002      	b.n	800c044 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 800c03e:	f06f 0301 	mvn.w	r3, #1
 800c042:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 800c044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c046:	4618      	mov	r0, r3
 800c048:	3728      	adds	r7, #40	@ 0x28
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	08012548 	.word	0x08012548
 800c054:	080131cc 	.word	0x080131cc
 800c058:	080124c8 	.word	0x080124c8
 800c05c:	0801255c 	.word	0x0801255c
 800c060:	08012578 	.word	0x08012578
 800c064:	08012584 	.word	0x08012584
 800c068:	080125b8 	.word	0x080125b8

0800c06c <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 800c06c:	b590      	push	{r4, r7, lr}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	4604      	mov	r4, r0
 800c074:	4608      	mov	r0, r1
 800c076:	4611      	mov	r1, r2
 800c078:	461a      	mov	r2, r3
 800c07a:	4623      	mov	r3, r4
 800c07c:	71fb      	strb	r3, [r7, #7]
 800c07e:	4603      	mov	r3, r0
 800c080:	71bb      	strb	r3, [r7, #6]
 800c082:	460b      	mov	r3, r1
 800c084:	717b      	strb	r3, [r7, #5]
 800c086:	4613      	mov	r3, r2
 800c088:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 800c08a:	79fb      	ldrb	r3, [r7, #7]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d009      	beq.n	800c0a4 <txMakeTailByte+0x38>
 800c090:	797b      	ldrb	r3, [r7, #5]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d006      	beq.n	800c0a4 <txMakeTailByte+0x38>
 800c096:	4b13      	ldr	r3, [pc, #76]	@ (800c0e4 <txMakeTailByte+0x78>)
 800c098:	4a13      	ldr	r2, [pc, #76]	@ (800c0e8 <txMakeTailByte+0x7c>)
 800c09a:	f240 111b 	movw	r1, #283	@ 0x11b
 800c09e:	4813      	ldr	r0, [pc, #76]	@ (800c0ec <txMakeTailByte+0x80>)
 800c0a0:	f001 fd8a 	bl	800dbb8 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800c0a4:	79fb      	ldrb	r3, [r7, #7]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d001      	beq.n	800c0ae <txMakeTailByte+0x42>
 800c0aa:	2280      	movs	r2, #128	@ 0x80
 800c0ac:	e000      	b.n	800c0b0 <txMakeTailByte+0x44>
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	79bb      	ldrb	r3, [r7, #6]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <txMakeTailByte+0x4e>
 800c0b6:	2340      	movs	r3, #64	@ 0x40
 800c0b8:	e000      	b.n	800c0bc <txMakeTailByte+0x50>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 800c0c0:	797a      	ldrb	r2, [r7, #5]
 800c0c2:	2a00      	cmp	r2, #0
 800c0c4:	d001      	beq.n	800c0ca <txMakeTailByte+0x5e>
 800c0c6:	2220      	movs	r2, #32
 800c0c8:	e000      	b.n	800c0cc <txMakeTailByte+0x60>
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 800c0d0:	793b      	ldrb	r3, [r7, #4]
 800c0d2:	f003 031f 	and.w	r3, r3, #31
 800c0d6:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	b2db      	uxtb	r3, r3
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd90      	pop	{r4, r7, pc}
 800c0e4:	080125d4 	.word	0x080125d4
 800c0e8:	08013274 	.word	0x08013274
 800c0ec:	080124c8 	.word	0x080124c8

0800c0f0 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b40      	cmp	r3, #64	@ 0x40
 800c0fc:	d906      	bls.n	800c10c <txRoundFramePayloadSizeUp+0x1c>
 800c0fe:	4b0f      	ldr	r3, [pc, #60]	@ (800c13c <txRoundFramePayloadSizeUp+0x4c>)
 800c100:	4a0f      	ldr	r2, [pc, #60]	@ (800c140 <txRoundFramePayloadSizeUp+0x50>)
 800c102:	f44f 7192 	mov.w	r1, #292	@ 0x124
 800c106:	480f      	ldr	r0, [pc, #60]	@ (800c144 <txRoundFramePayloadSizeUp+0x54>)
 800c108:	f001 fd56 	bl	800dbb8 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 800c10c:	4a0e      	ldr	r2, [pc, #56]	@ (800c148 <txRoundFramePayloadSizeUp+0x58>)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4413      	add	r3, r2
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2b0f      	cmp	r3, #15
 800c11a:	d906      	bls.n	800c12a <txRoundFramePayloadSizeUp+0x3a>
 800c11c:	4b0b      	ldr	r3, [pc, #44]	@ (800c14c <txRoundFramePayloadSizeUp+0x5c>)
 800c11e:	4a08      	ldr	r2, [pc, #32]	@ (800c140 <txRoundFramePayloadSizeUp+0x50>)
 800c120:	f240 1127 	movw	r1, #295	@ 0x127
 800c124:	4807      	ldr	r0, [pc, #28]	@ (800c144 <txRoundFramePayloadSizeUp+0x54>)
 800c126:	f001 fd47 	bl	800dbb8 <__assert_func>
    return CanardCANDLCToLength[y];
 800c12a:	4a09      	ldr	r2, [pc, #36]	@ (800c150 <txRoundFramePayloadSizeUp+0x60>)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	4413      	add	r3, r2
 800c130:	781b      	ldrb	r3, [r3, #0]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	080125fc 	.word	0x080125fc
 800c140:	08013244 	.word	0x08013244
 800c144:	080124c8 	.word	0x080124c8
 800c148:	0801316c 	.word	0x0801316c
 800c14c:	08012644 	.word	0x08012644
 800c150:	0801315c 	.word	0x0801315c

0800c154 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b086      	sub	sp, #24
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d106      	bne.n	800c176 <txAllocateQueueItem+0x22>
 800c168:	4b1f      	ldr	r3, [pc, #124]	@ (800c1e8 <txAllocateQueueItem+0x94>)
 800c16a:	4a20      	ldr	r2, [pc, #128]	@ (800c1ec <txAllocateQueueItem+0x98>)
 800c16c:	f240 1131 	movw	r1, #305	@ 0x131
 800c170:	481f      	ldr	r0, [pc, #124]	@ (800c1f0 <txAllocateQueueItem+0x9c>)
 800c172:	f001 fd21 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d106      	bne.n	800c18a <txAllocateQueueItem+0x36>
 800c17c:	4b1d      	ldr	r3, [pc, #116]	@ (800c1f4 <txAllocateQueueItem+0xa0>)
 800c17e:	4a1b      	ldr	r2, [pc, #108]	@ (800c1ec <txAllocateQueueItem+0x98>)
 800c180:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800c184:	481a      	ldr	r0, [pc, #104]	@ (800c1f0 <txAllocateQueueItem+0x9c>)
 800c186:	f001 fd17 	bl	800dbb8 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	6a3a      	ldr	r2, [r7, #32]
 800c190:	3230      	adds	r2, #48	@ 0x30
 800c192:	4611      	mov	r1, r2
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	4798      	blx	r3
 800c198:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d01e      	beq.n	800c1de <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 800c1be:	6979      	ldr	r1, [r7, #20]
 800c1c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1c4:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	6a3a      	ldr	r2, [r7, #32]
 800c1cc:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	621a      	str	r2, [r3, #32]
    }
    return out;
 800c1de:	697b      	ldr	r3, [r7, #20]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	0801268c 	.word	0x0801268c
 800c1ec:	08013260 	.word	0x08013260
 800c1f0:	080124c8 	.word	0x080124c8
 800c1f4:	080126a0 	.word	0x080126a0

0800c1f8 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d002      	beq.n	800c216 <txAVLPredicate+0x1e>
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d106      	bne.n	800c224 <txAVLPredicate+0x2c>
 800c216:	4b0a      	ldr	r3, [pc, #40]	@ (800c240 <txAVLPredicate+0x48>)
 800c218:	4a0a      	ldr	r2, [pc, #40]	@ (800c244 <txAVLPredicate+0x4c>)
 800c21a:	f240 114d 	movw	r1, #333	@ 0x14d
 800c21e:	480a      	ldr	r0, [pc, #40]	@ (800c248 <txAVLPredicate+0x50>)
 800c220:	f001 fcca 	bl	800dbb8 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6a1a      	ldr	r2, [r3, #32]
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	6a1b      	ldr	r3, [r3, #32]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d301      	bcc.n	800c234 <txAVLPredicate+0x3c>
 800c230:	2301      	movs	r3, #1
 800c232:	e001      	b.n	800c238 <txAVLPredicate+0x40>
 800c234:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	080126b4 	.word	0x080126b4
 800c244:	08013234 	.word	0x08013234
 800c248:	080124c8 	.word	0x080124c8

0800c24c <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 800c24c:	b590      	push	{r4, r7, lr}
 800c24e:	b08d      	sub	sp, #52	@ 0x34
 800c250:	af02      	add	r7, sp, #8
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d106      	bne.n	800c26e <txPushSingleFrame+0x22>
 800c260:	4b5c      	ldr	r3, [pc, #368]	@ (800c3d4 <txPushSingleFrame+0x188>)
 800c262:	4a5d      	ldr	r2, [pc, #372]	@ (800c3d8 <txPushSingleFrame+0x18c>)
 800c264:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 800c268:	485c      	ldr	r0, [pc, #368]	@ (800c3dc <txPushSingleFrame+0x190>)
 800c26a:	f001 fca5 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 800c26e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c270:	2b00      	cmp	r3, #0
 800c272:	d109      	bne.n	800c288 <txPushSingleFrame+0x3c>
 800c274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c276:	2b00      	cmp	r3, #0
 800c278:	d006      	beq.n	800c288 <txPushSingleFrame+0x3c>
 800c27a:	4b59      	ldr	r3, [pc, #356]	@ (800c3e0 <txPushSingleFrame+0x194>)
 800c27c:	4a56      	ldr	r2, [pc, #344]	@ (800c3d8 <txPushSingleFrame+0x18c>)
 800c27e:	f240 115b 	movw	r1, #347	@ 0x15b
 800c282:	4856      	ldr	r0, [pc, #344]	@ (800c3dc <txPushSingleFrame+0x190>)
 800c284:	f001 fc98 	bl	800dbb8 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 800c288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c28a:	3301      	adds	r3, #1
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff ff2f 	bl	800c0f0 <txRoundFramePayloadSizeUp>
 800c292:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 800c294:	6a3a      	ldr	r2, [r7, #32]
 800c296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c298:	429a      	cmp	r2, r3
 800c29a:	d806      	bhi.n	800c2aa <txPushSingleFrame+0x5e>
 800c29c:	4b51      	ldr	r3, [pc, #324]	@ (800c3e4 <txPushSingleFrame+0x198>)
 800c29e:	4a4e      	ldr	r2, [pc, #312]	@ (800c3d8 <txPushSingleFrame+0x18c>)
 800c2a0:	f240 115d 	movw	r1, #349	@ 0x15d
 800c2a4:	484d      	ldr	r0, [pc, #308]	@ (800c3dc <txPushSingleFrame+0x190>)
 800c2a6:	f001 fc87 	bl	800dbb8 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 800c2aa:	6a3a      	ldr	r2, [r7, #32]
 800c2ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 800c2b4:	69fa      	ldr	r2, [r7, #28]
 800c2b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2b8:	4413      	add	r3, r2
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	6a3a      	ldr	r2, [r7, #32]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d006      	beq.n	800c2d0 <txPushSingleFrame+0x84>
 800c2c2:	4b49      	ldr	r3, [pc, #292]	@ (800c3e8 <txPushSingleFrame+0x19c>)
 800c2c4:	4a44      	ldr	r2, [pc, #272]	@ (800c3d8 <txPushSingleFrame+0x18c>)
 800c2c6:	f240 115f 	movw	r1, #351	@ 0x15f
 800c2ca:	4844      	ldr	r0, [pc, #272]	@ (800c3dc <txPushSingleFrame+0x190>)
 800c2cc:	f001 fc74 	bl	800dbb8 <__assert_func>
    int32_t       out = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	689a      	ldr	r2, [r3, #8]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d209      	bcs.n	800c2f4 <txPushSingleFrame+0xa8>
 800c2e0:	6a3b      	ldr	r3, [r7, #32]
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c2ea:	68b8      	ldr	r0, [r7, #8]
 800c2ec:	f7ff ff32 	bl	800c154 <txAllocateQueueItem>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	e000      	b.n	800c2f6 <txPushSingleFrame+0xaa>
 800c2f4:	2300      	movs	r3, #0
    TxItem* const tqi =
 800c2f6:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d054      	beq.n	800c3a8 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 800c2fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c300:	2b00      	cmp	r3, #0
 800c302:	d010      	beq.n	800c326 <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 800c304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c306:	2b00      	cmp	r3, #0
 800c308:	d106      	bne.n	800c318 <txPushSingleFrame+0xcc>
 800c30a:	4b38      	ldr	r3, [pc, #224]	@ (800c3ec <txPushSingleFrame+0x1a0>)
 800c30c:	4a32      	ldr	r2, [pc, #200]	@ (800c3d8 <txPushSingleFrame+0x18c>)
 800c30e:	f240 1167 	movw	r1, #359	@ 0x167
 800c312:	4832      	ldr	r0, [pc, #200]	@ (800c3dc <txPushSingleFrame+0x190>)
 800c314:	f001 fc50 	bl	800dbb8 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	3330      	adds	r3, #48	@ 0x30
 800c31c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c31e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c320:	4618      	mov	r0, r3
 800c322:	f002 fdda 	bl	800eeda <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800c326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c328:	3330      	adds	r3, #48	@ 0x30
 800c32a:	69ba      	ldr	r2, [r7, #24]
 800c32c:	4413      	add	r3, r2
 800c32e:	69fa      	ldr	r2, [r7, #28]
 800c330:	2100      	movs	r1, #0
 800c332:	4618      	mov	r0, r3
 800c334:	f002 fceb 	bl	800ed0e <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800c338:	6a3b      	ldr	r3, [r7, #32]
 800c33a:	1e5c      	subs	r4, r3, #1
 800c33c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800c340:	2201      	movs	r2, #1
 800c342:	2101      	movs	r1, #1
 800c344:	2001      	movs	r0, #1
 800c346:	f7ff fe91 	bl	800c06c <txMakeTailByte>
 800c34a:	4603      	mov	r3, r0
 800c34c:	461a      	mov	r2, r3
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	4423      	add	r3, r4
 800c352:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f103 000c 	add.w	r0, r3, #12
 800c35c:	69b9      	ldr	r1, [r7, #24]
 800c35e:	4b24      	ldr	r3, [pc, #144]	@ (800c3f0 <txPushSingleFrame+0x1a4>)
 800c360:	4a24      	ldr	r2, [pc, #144]	@ (800c3f4 <txPushSingleFrame+0x1a8>)
 800c362:	f7ff fae7 	bl	800b934 <cavlSearch>
 800c366:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	697a      	ldr	r2, [r7, #20]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d006      	beq.n	800c37e <txPushSingleFrame+0x132>
 800c370:	4b21      	ldr	r3, [pc, #132]	@ (800c3f8 <txPushSingleFrame+0x1ac>)
 800c372:	4a19      	ldr	r2, [pc, #100]	@ (800c3d8 <txPushSingleFrame+0x18c>)
 800c374:	f240 1173 	movw	r1, #371	@ 0x173
 800c378:	4818      	ldr	r0, [pc, #96]	@ (800c3dc <txPushSingleFrame+0x190>)
 800c37a:	f001 fc1d 	bl	800dbb8 <__assert_func>
        que->size++;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	1c5a      	adds	r2, r3, #1
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	689a      	ldr	r2, [r3, #8]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	429a      	cmp	r2, r3
 800c392:	d906      	bls.n	800c3a2 <txPushSingleFrame+0x156>
 800c394:	4b19      	ldr	r3, [pc, #100]	@ (800c3fc <txPushSingleFrame+0x1b0>)
 800c396:	4a10      	ldr	r2, [pc, #64]	@ (800c3d8 <txPushSingleFrame+0x18c>)
 800c398:	f240 1175 	movw	r1, #373	@ 0x175
 800c39c:	480f      	ldr	r0, [pc, #60]	@ (800c3dc <txPushSingleFrame+0x190>)
 800c39e:	f001 fc0b 	bl	800dbb8 <__assert_func>
        out = 1;  // One frame enqueued.
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3a6:	e002      	b.n	800c3ae <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800c3a8:	f06f 0302 	mvn.w	r3, #2
 800c3ac:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	db09      	blt.n	800c3c8 <txPushSingleFrame+0x17c>
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d006      	beq.n	800c3c8 <txPushSingleFrame+0x17c>
 800c3ba:	4b11      	ldr	r3, [pc, #68]	@ (800c400 <txPushSingleFrame+0x1b4>)
 800c3bc:	4a06      	ldr	r2, [pc, #24]	@ (800c3d8 <txPushSingleFrame+0x18c>)
 800c3be:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800c3c2:	4806      	ldr	r0, [pc, #24]	@ (800c3dc <txPushSingleFrame+0x190>)
 800c3c4:	f001 fbf8 	bl	800dbb8 <__assert_func>
    return out;
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	372c      	adds	r7, #44	@ 0x2c
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd90      	pop	{r4, r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	0801268c 	.word	0x0801268c
 800c3d8:	08013220 	.word	0x08013220
 800c3dc:	080124c8 	.word	0x080124c8
 800c3e0:	080126e8 	.word	0x080126e8
 800c3e4:	08012718 	.word	0x08012718
 800c3e8:	0801273c 	.word	0x0801273c
 800c3ec:	08012778 	.word	0x08012778
 800c3f0:	0800bc95 	.word	0x0800bc95
 800c3f4:	0800c1f9 	.word	0x0800c1f9
 800c3f8:	08012790 	.word	0x08012790
 800c3fc:	080127a8 	.word	0x080127a8
 800c400:	080127c4 	.word	0x080127c4

0800c404 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 800c404:	b590      	push	{r4, r7, lr}
 800c406:	b093      	sub	sp, #76	@ 0x4c
 800c408:	af02      	add	r7, sp, #8
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d106      	bne.n	800c424 <txGenerateMultiFrameChain+0x20>
 800c416:	4b93      	ldr	r3, [pc, #588]	@ (800c664 <txGenerateMultiFrameChain+0x260>)
 800c418:	4a93      	ldr	r2, [pc, #588]	@ (800c668 <txGenerateMultiFrameChain+0x264>)
 800c41a:	f240 1189 	movw	r1, #393	@ 0x189
 800c41e:	4893      	ldr	r0, [pc, #588]	@ (800c66c <txGenerateMultiFrameChain+0x268>)
 800c420:	f001 fbca 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d106      	bne.n	800c438 <txGenerateMultiFrameChain+0x34>
 800c42a:	4b91      	ldr	r3, [pc, #580]	@ (800c670 <txGenerateMultiFrameChain+0x26c>)
 800c42c:	4a8e      	ldr	r2, [pc, #568]	@ (800c668 <txGenerateMultiFrameChain+0x264>)
 800c42e:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 800c432:	488e      	ldr	r0, [pc, #568]	@ (800c66c <txGenerateMultiFrameChain+0x268>)
 800c434:	f001 fbc0 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800c438:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d806      	bhi.n	800c44e <txGenerateMultiFrameChain+0x4a>
 800c440:	4b8c      	ldr	r3, [pc, #560]	@ (800c674 <txGenerateMultiFrameChain+0x270>)
 800c442:	4a89      	ldr	r2, [pc, #548]	@ (800c668 <txGenerateMultiFrameChain+0x264>)
 800c444:	f240 118b 	movw	r1, #395	@ 0x18b
 800c448:	4888      	ldr	r0, [pc, #544]	@ (800c66c <txGenerateMultiFrameChain+0x268>)
 800c44a:	f001 fbb5 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 800c44e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c450:	2b00      	cmp	r3, #0
 800c452:	d106      	bne.n	800c462 <txGenerateMultiFrameChain+0x5e>
 800c454:	4b88      	ldr	r3, [pc, #544]	@ (800c678 <txGenerateMultiFrameChain+0x274>)
 800c456:	4a84      	ldr	r2, [pc, #528]	@ (800c668 <txGenerateMultiFrameChain+0x264>)
 800c458:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800c45c:	4883      	ldr	r0, [pc, #524]	@ (800c66c <txGenerateMultiFrameChain+0x268>)
 800c45e:	f001 fbab 	bl	800dbb8 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 800c462:	2300      	movs	r3, #0
 800c464:	613b      	str	r3, [r7, #16]
 800c466:	2300      	movs	r3, #0
 800c468:	617b      	str	r3, [r7, #20]
 800c46a:	2300      	movs	r3, #0
 800c46c:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800c46e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c470:	3302      	adds	r3, #2
 800c472:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 800c474:	2300      	movs	r3, #0
 800c476:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 800c478:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c47a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c47c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800c480:	f7ff fc34 	bl	800bcec <crcAdd>
 800c484:	4603      	mov	r3, r0
 800c486:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 800c488:	2301      	movs	r3, #1
 800c48a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 800c48e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c490:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 800c492:	e0d4      	b.n	800c63e <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	3301      	adds	r3, #1
 800c498:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 800c49a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c49c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c49e:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d908      	bls.n	800c4b8 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 800c4a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7ff fe1e 	bl	800c0f0 <txRoundFramePayloadSizeUp>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	e001      	b.n	800c4bc <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 800c4bc:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 800c4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c4c6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c4c8:	68b8      	ldr	r0, [r7, #8]
 800c4ca:	f7ff fe43 	bl	800c154 <txAllocateQueueItem>
 800c4ce:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d102      	bne.n	800c4dc <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 800c4d6:	6a3b      	ldr	r3, [r7, #32]
 800c4d8:	613b      	str	r3, [r7, #16]
 800c4da:	e002      	b.n	800c4e2 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	6a3a      	ldr	r2, [r7, #32]
 800c4e0:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 800c4e2:	6a3b      	ldr	r3, [r7, #32]
 800c4e4:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 80ae 	beq.w	800c64a <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f0:	3b01      	subs	r3, #1
 800c4f2:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 800c4f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c4fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d21c      	bcs.n	800c53a <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 800c500:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 800c508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d901      	bls.n	800c514 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	3330      	adds	r3, #48	@ 0x30
 800c518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c51a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c51c:	4618      	mov	r0, r3
 800c51e:	f002 fcdc 	bl	800eeda <memcpy>
            frame_offset = frame_offset + move_size;
 800c522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c526:	4413      	add	r3, r2
 800c528:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 800c52a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c52e:	4413      	add	r3, r2
 800c530:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 800c532:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c536:	4413      	add	r3, r2
 800c538:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 800c53a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c53c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c53e:	429a      	cmp	r2, r3
 800c540:	d343      	bcc.n	800c5ca <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800c542:	e00f      	b.n	800c564 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 800c544:	697a      	ldr	r2, [r7, #20]
 800c546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c548:	4413      	add	r3, r2
 800c54a:	3330      	adds	r3, #48	@ 0x30
 800c54c:	2200      	movs	r2, #0
 800c54e:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800c550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c552:	3301      	adds	r3, #1
 800c554:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 800c556:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c558:	2100      	movs	r1, #0
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7ff fba6 	bl	800bcac <crcAddByte>
 800c560:	4603      	mov	r3, r0
 800c562:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800c564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c566:	3302      	adds	r3, #2
 800c568:	69fa      	ldr	r2, [r7, #28]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d8ea      	bhi.n	800c544 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 800c56e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	429a      	cmp	r2, r3
 800c574:	d213      	bcs.n	800c59e <txGenerateMultiFrameChain+0x19a>
 800c576:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c578:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d10f      	bne.n	800c59e <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 800c57e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c580:	0a1b      	lsrs	r3, r3, #8
 800c582:	b29b      	uxth	r3, r3
 800c584:	697a      	ldr	r2, [r7, #20]
 800c586:	b2d9      	uxtb	r1, r3
 800c588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c58a:	4413      	add	r3, r2
 800c58c:	3330      	adds	r3, #48	@ 0x30
 800c58e:	460a      	mov	r2, r1
 800c590:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800c592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c594:	3301      	adds	r3, #1
 800c596:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 800c598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c59a:	3301      	adds	r3, #1
 800c59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 800c59e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d211      	bcs.n	800c5ca <txGenerateMultiFrameChain+0x1c6>
 800c5a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c5a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d90d      	bls.n	800c5ca <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 800c5ae:	697a      	ldr	r2, [r7, #20]
 800c5b0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c5b2:	b2d9      	uxtb	r1, r3
 800c5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b6:	4413      	add	r3, r2
 800c5b8:	3330      	adds	r3, #48	@ 0x30
 800c5ba:	460a      	mov	r2, r1
 800c5bc:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800c5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 800c5c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5cc:	1c5a      	adds	r2, r3, #1
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d006      	beq.n	800c5e4 <txGenerateMultiFrameChain+0x1e0>
 800c5d6:	4b29      	ldr	r3, [pc, #164]	@ (800c67c <txGenerateMultiFrameChain+0x278>)
 800c5d8:	4a23      	ldr	r2, [pc, #140]	@ (800c668 <txGenerateMultiFrameChain+0x264>)
 800c5da:	f240 11d9 	movw	r1, #473	@ 0x1d9
 800c5de:	4823      	ldr	r0, [pc, #140]	@ (800c66c <txGenerateMultiFrameChain+0x268>)
 800c5e0:	f001 faea 	bl	800dbb8 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	bf0c      	ite	eq
 800c5ec:	2301      	moveq	r3, #1
 800c5ee:	2300      	movne	r3, #0
 800c5f0:	b2d8      	uxtb	r0, r3
 800c5f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	bf2c      	ite	cs
 800c5fa:	2301      	movcs	r3, #1
 800c5fc:	2300      	movcc	r3, #0
 800c5fe:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800c600:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800c602:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800c606:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800c60a:	f7ff fd2f 	bl	800c06c <txMakeTailByte>
 800c60e:	4603      	mov	r3, r0
 800c610:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800c612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c614:	4423      	add	r3, r4
 800c616:	3330      	adds	r3, #48	@ 0x30
 800c618:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 800c61a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800c61e:	2b00      	cmp	r3, #0
 800c620:	bf14      	ite	ne
 800c622:	2301      	movne	r3, #1
 800c624:	2300      	moveq	r3, #0
 800c626:	b2db      	uxtb	r3, r3
 800c628:	f083 0301 	eor.w	r3, r3, #1
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800c632:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 800c63e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c642:	429a      	cmp	r2, r3
 800c644:	f4ff af26 	bcc.w	800c494 <txGenerateMultiFrameChain+0x90>
 800c648:	e000      	b.n	800c64c <txGenerateMultiFrameChain+0x248>
            break;
 800c64a:	bf00      	nop
    }
    return out;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	461c      	mov	r4, r3
 800c650:	f107 0310 	add.w	r3, r7, #16
 800c654:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	3744      	adds	r7, #68	@ 0x44
 800c660:	46bd      	mov	sp, r7
 800c662:	bd90      	pop	{r4, r7, pc}
 800c664:	0801268c 	.word	0x0801268c
 800c668:	080132f0 	.word	0x080132f0
 800c66c:	080124c8 	.word	0x080124c8
 800c670:	080127dc 	.word	0x080127dc
 800c674:	080127f8 	.word	0x080127f8
 800c678:	08012778 	.word	0x08012778
 800c67c:	08012820 	.word	0x08012820

0800c680 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b094      	sub	sp, #80	@ 0x50
 800c684:	af06      	add	r7, sp, #24
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d002      	beq.n	800c698 <txPushMultiFrame+0x18>
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d106      	bne.n	800c6a6 <txPushMultiFrame+0x26>
 800c698:	4b65      	ldr	r3, [pc, #404]	@ (800c830 <txPushMultiFrame+0x1b0>)
 800c69a:	4a66      	ldr	r2, [pc, #408]	@ (800c834 <txPushMultiFrame+0x1b4>)
 800c69c:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 800c6a0:	4865      	ldr	r0, [pc, #404]	@ (800c838 <txPushMultiFrame+0x1b8>)
 800c6a2:	f001 fa89 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d106      	bne.n	800c6ba <txPushMultiFrame+0x3a>
 800c6ac:	4b63      	ldr	r3, [pc, #396]	@ (800c83c <txPushMultiFrame+0x1bc>)
 800c6ae:	4a61      	ldr	r2, [pc, #388]	@ (800c834 <txPushMultiFrame+0x1b4>)
 800c6b0:	f240 11ed 	movw	r1, #493	@ 0x1ed
 800c6b4:	4860      	ldr	r0, [pc, #384]	@ (800c838 <txPushMultiFrame+0x1b8>)
 800c6b6:	f001 fa7f 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800c6ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d806      	bhi.n	800c6d0 <txPushMultiFrame+0x50>
 800c6c2:	4b5f      	ldr	r3, [pc, #380]	@ (800c840 <txPushMultiFrame+0x1c0>)
 800c6c4:	4a5b      	ldr	r2, [pc, #364]	@ (800c834 <txPushMultiFrame+0x1b4>)
 800c6c6:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 800c6ca:	485b      	ldr	r0, [pc, #364]	@ (800c838 <txPushMultiFrame+0x1b8>)
 800c6cc:	f001 fa74 	bl	800dbb8 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800c6d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6d6:	3302      	adds	r3, #2
 800c6d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 800c6da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4413      	add	r3, r2
 800c6e0:	1e5a      	subs	r2, r3, #1
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6e8:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d806      	bhi.n	800c6fe <txPushMultiFrame+0x7e>
 800c6f0:	4b54      	ldr	r3, [pc, #336]	@ (800c844 <txPushMultiFrame+0x1c4>)
 800c6f2:	4a50      	ldr	r2, [pc, #320]	@ (800c834 <txPushMultiFrame+0x1b4>)
 800c6f4:	f240 11f3 	movw	r1, #499	@ 0x1f3
 800c6f8:	484f      	ldr	r0, [pc, #316]	@ (800c838 <txPushMultiFrame+0x1b8>)
 800c6fa:	f001 fa5d 	bl	800dbb8 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	689a      	ldr	r2, [r3, #8]
 800c702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c704:	441a      	add	r2, r3
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d87b      	bhi.n	800c806 <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 800c70e:	f107 0010 	add.w	r0, r7, #16
 800c712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c714:	9305      	str	r3, [sp, #20]
 800c716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c718:	9304      	str	r3, [sp, #16]
 800c71a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800c71e:	9303      	str	r3, [sp, #12]
 800c720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c722:	9302      	str	r3, [sp, #8]
 800c724:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c728:	e9cd 2300 	strd	r2, r3, [sp]
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	68b9      	ldr	r1, [r7, #8]
 800c730:	f7ff fe68 	bl	800c404 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d051      	beq.n	800c7de <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f103 000c 	add.w	r0, r3, #12
 800c744:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c746:	4b40      	ldr	r3, [pc, #256]	@ (800c848 <txPushMultiFrame+0x1c8>)
 800c748:	4a40      	ldr	r2, [pc, #256]	@ (800c84c <txPushMultiFrame+0x1cc>)
 800c74a:	f7ff f8f3 	bl	800b934 <cavlSearch>
 800c74e:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 800c750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c752:	69fa      	ldr	r2, [r7, #28]
 800c754:	429a      	cmp	r2, r3
 800c756:	d006      	beq.n	800c766 <txPushMultiFrame+0xe6>
 800c758:	4b3d      	ldr	r3, [pc, #244]	@ (800c850 <txPushMultiFrame+0x1d0>)
 800c75a:	4a36      	ldr	r2, [pc, #216]	@ (800c834 <txPushMultiFrame+0x1b4>)
 800c75c:	f240 2105 	movw	r1, #517	@ 0x205
 800c760:	4835      	ldr	r0, [pc, #212]	@ (800c838 <txPushMultiFrame+0x1b8>)
 800c762:	f001 fa29 	bl	800dbb8 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d106      	bne.n	800c77c <txPushMultiFrame+0xfc>
 800c76e:	4b39      	ldr	r3, [pc, #228]	@ (800c854 <txPushMultiFrame+0x1d4>)
 800c770:	4a30      	ldr	r2, [pc, #192]	@ (800c834 <txPushMultiFrame+0x1b4>)
 800c772:	f240 2106 	movw	r1, #518	@ 0x206
 800c776:	4830      	ldr	r0, [pc, #192]	@ (800c838 <txPushMultiFrame+0x1b8>)
 800c778:	f001 fa1e 	bl	800dbb8 <__assert_func>
                next = next->next_in_transfer;
 800c77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c77e:	691b      	ldr	r3, [r3, #16]
 800c780:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 800c782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1da      	bne.n	800c73e <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d006      	beq.n	800c79e <txPushMultiFrame+0x11e>
 800c790:	4b31      	ldr	r3, [pc, #196]	@ (800c858 <txPushMultiFrame+0x1d8>)
 800c792:	4a28      	ldr	r2, [pc, #160]	@ (800c834 <txPushMultiFrame+0x1b4>)
 800c794:	f240 2109 	movw	r1, #521	@ 0x209
 800c798:	4827      	ldr	r0, [pc, #156]	@ (800c838 <txPushMultiFrame+0x1b8>)
 800c79a:	f001 fa0d 	bl	800dbb8 <__assert_func>
            que->size += sq.size;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	689a      	ldr	r2, [r3, #8]
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	441a      	add	r2, r3
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	689a      	ldr	r2, [r3, #8]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d906      	bls.n	800c7c4 <txPushMultiFrame+0x144>
 800c7b6:	4b29      	ldr	r3, [pc, #164]	@ (800c85c <txPushMultiFrame+0x1dc>)
 800c7b8:	4a1e      	ldr	r2, [pc, #120]	@ (800c834 <txPushMultiFrame+0x1b4>)
 800c7ba:	f240 210b 	movw	r1, #523	@ 0x20b
 800c7be:	481e      	ldr	r0, [pc, #120]	@ (800c838 <txPushMultiFrame+0x1b8>)
 800c7c0:	f001 f9fa 	bl	800dbb8 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	da06      	bge.n	800c7d8 <txPushMultiFrame+0x158>
 800c7ca:	4b25      	ldr	r3, [pc, #148]	@ (800c860 <txPushMultiFrame+0x1e0>)
 800c7cc:	4a19      	ldr	r2, [pc, #100]	@ (800c834 <txPushMultiFrame+0x1b4>)
 800c7ce:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 800c7d2:	4819      	ldr	r0, [pc, #100]	@ (800c838 <txPushMultiFrame+0x1b8>)
 800c7d4:	f001 f9f0 	bl	800dbb8 <__assert_func>
            out = (int32_t) sq.size;
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7dc:	e016      	b.n	800c80c <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 800c7de:	f06f 0302 	mvn.w	r3, #2
 800c7e2:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 800c7e8:	e009      	b.n	800c7fe <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 800c7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7f6:	68b8      	ldr	r0, [r7, #8]
 800c7f8:	4798      	blx	r3
                head = next;
 800c7fa:	6a3b      	ldr	r3, [r7, #32]
 800c7fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 800c7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c800:	2b00      	cmp	r3, #0
 800c802:	d1f2      	bne.n	800c7ea <txPushMultiFrame+0x16a>
 800c804:	e002      	b.n	800c80c <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800c806:	f06f 0302 	mvn.w	r3, #2
 800c80a:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 800c80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c80e:	2b00      	cmp	r3, #0
 800c810:	db09      	blt.n	800c826 <txPushMultiFrame+0x1a6>
 800c812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c814:	2b01      	cmp	r3, #1
 800c816:	dc06      	bgt.n	800c826 <txPushMultiFrame+0x1a6>
 800c818:	4b12      	ldr	r3, [pc, #72]	@ (800c864 <txPushMultiFrame+0x1e4>)
 800c81a:	4a06      	ldr	r2, [pc, #24]	@ (800c834 <txPushMultiFrame+0x1b4>)
 800c81c:	f240 211f 	movw	r1, #543	@ 0x21f
 800c820:	4805      	ldr	r0, [pc, #20]	@ (800c838 <txPushMultiFrame+0x1b8>)
 800c822:	f001 f9c9 	bl	800dbb8 <__assert_func>
    return out;
 800c826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3738      	adds	r7, #56	@ 0x38
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	0801285c 	.word	0x0801285c
 800c834:	080132dc 	.word	0x080132dc
 800c838:	080124c8 	.word	0x080124c8
 800c83c:	080127dc 	.word	0x080127dc
 800c840:	080127f8 	.word	0x080127f8
 800c844:	0801288c 	.word	0x0801288c
 800c848:	0800bc95 	.word	0x0800bc95
 800c84c:	0800c1f9 	.word	0x0800c1f9
 800c850:	0801289c 	.word	0x0801289c
 800c854:	080128b0 	.word	0x080128b0
 800c858:	080128cc 	.word	0x080128cc
 800c85c:	080127a8 	.word	0x080127a8
 800c860:	080128e4 	.word	0x080128e4
 800c864:	08012908 	.word	0x08012908

0800c868 <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid UAVCAN/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b088      	sub	sp, #32
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
 800c874:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d106      	bne.n	800c88a <rxTryParseFrame+0x22>
 800c87c:	4b96      	ldr	r3, [pc, #600]	@ (800cad8 <rxTryParseFrame+0x270>)
 800c87e:	4a97      	ldr	r2, [pc, #604]	@ (800cadc <rxTryParseFrame+0x274>)
 800c880:	f240 214e 	movw	r1, #590	@ 0x24e
 800c884:	4896      	ldr	r0, [pc, #600]	@ (800cae0 <rxTryParseFrame+0x278>)
 800c886:	f001 f997 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c892:	d306      	bcc.n	800c8a2 <rxTryParseFrame+0x3a>
 800c894:	4b93      	ldr	r3, [pc, #588]	@ (800cae4 <rxTryParseFrame+0x27c>)
 800c896:	4a91      	ldr	r2, [pc, #580]	@ (800cadc <rxTryParseFrame+0x274>)
 800c898:	f240 214f 	movw	r1, #591	@ 0x24f
 800c89c:	4890      	ldr	r0, [pc, #576]	@ (800cae0 <rxTryParseFrame+0x278>)
 800c89e:	f001 f98b 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(out != NULL);
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d106      	bne.n	800c8b6 <rxTryParseFrame+0x4e>
 800c8a8:	4b8f      	ldr	r3, [pc, #572]	@ (800cae8 <rxTryParseFrame+0x280>)
 800c8aa:	4a8c      	ldr	r2, [pc, #560]	@ (800cadc <rxTryParseFrame+0x274>)
 800c8ac:	f44f 7114 	mov.w	r1, #592	@ 0x250
 800c8b0:	488b      	ldr	r0, [pc, #556]	@ (800cae0 <rxTryParseFrame+0x278>)
 800c8b2:	f001 f981 	bl	800dbb8 <__assert_func>
    bool valid = false;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f000 8105 	beq.w	800cace <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d106      	bne.n	800c8da <rxTryParseFrame+0x72>
 800c8cc:	4b87      	ldr	r3, [pc, #540]	@ (800caec <rxTryParseFrame+0x284>)
 800c8ce:	4a83      	ldr	r2, [pc, #524]	@ (800cadc <rxTryParseFrame+0x274>)
 800c8d0:	f44f 7115 	mov.w	r1, #596	@ 0x254
 800c8d4:	4882      	ldr	r0, [pc, #520]	@ (800cae0 <rxTryParseFrame+0x278>)
 800c8d6:	f001 f96f 	bl	800dbb8 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 800c8da:	6839      	ldr	r1, [r7, #0]
 800c8dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c8e0:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	0e9b      	lsrs	r3, r3, #26
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	f003 0307 	and.w	r3, r3, #7
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c902:	b2da      	uxtb	r2, r3
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d128      	bne.n	800c964 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	2200      	movs	r2, #0
 800c916:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	0a1b      	lsrs	r3, r3, #8
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c922:	b29a      	uxth	r2, r3
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d002      	beq.n	800c938 <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	22ff      	movs	r2, #255	@ 0xff
 800c936:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	22ff      	movs	r2, #255	@ 0xff
 800c93c:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c944:	2b00      	cmp	r3, #0
 800c946:	d106      	bne.n	800c956 <rxTryParseFrame+0xee>
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d101      	bne.n	800c956 <rxTryParseFrame+0xee>
 800c952:	2301      	movs	r3, #1
 800c954:	e000      	b.n	800c958 <rxTryParseFrame+0xf0>
 800c956:	2300      	movs	r3, #0
 800c958:	77fb      	strb	r3, [r7, #31]
 800c95a:	7ffb      	ldrb	r3, [r7, #31]
 800c95c:	f003 0301 	and.w	r3, r3, #1
 800c960:	77fb      	strb	r3, [r7, #31]
 800c962:	e02c      	b.n	800c9be <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d001      	beq.n	800c972 <rxTryParseFrame+0x10a>
 800c96e:	2202      	movs	r2, #2
 800c970:	e000      	b.n	800c974 <rxTryParseFrame+0x10c>
 800c972:	2201      	movs	r2, #1
            out->transfer_kind =
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	0b9b      	lsrs	r3, r3, #14
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c982:	b29a      	uxth	r2, r3
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	09db      	lsrs	r3, r3, #7
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c992:	b2da      	uxtb	r2, r3
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d107      	bne.n	800c9b2 <rxTryParseFrame+0x14a>
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	7b1a      	ldrb	r2, [r3, #12]
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	7b5b      	ldrb	r3, [r3, #13]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d001      	beq.n	800c9b2 <rxTryParseFrame+0x14a>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e000      	b.n	800c9b4 <rxTryParseFrame+0x14c>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	77fb      	strb	r3, [r7, #31]
 800c9b6:	7ffb      	ldrb	r3, [r7, #31]
 800c9b8:	f003 0301 	and.w	r3, r3, #1
 800c9bc:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	1e5a      	subs	r2, r3, #1
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	689a      	ldr	r2, [r3, #8]
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	699a      	ldr	r2, [r3, #24]
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	695b      	ldr	r3, [r3, #20]
 800c9d8:	4413      	add	r3, r2
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 800c9de:	7dfb      	ldrb	r3, [r7, #23]
 800c9e0:	f003 031f 	and.w	r3, r3, #31
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 800c9ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	09db      	lsrs	r3, r3, #7
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 800c9f8:	7dfb      	ldrb	r3, [r7, #23]
 800c9fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	bf14      	ite	ne
 800ca02:	2301      	movne	r3, #1
 800ca04:	2300      	moveq	r3, #0
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 800ca0c:	7dfb      	ldrb	r3, [r7, #23]
 800ca0e:	f003 0320 	and.w	r3, r3, #32
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	bf14      	ite	ne
 800ca16:	2301      	movne	r3, #1
 800ca18:	2300      	moveq	r3, #0
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 800ca20:	7ffb      	ldrb	r3, [r7, #31]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00c      	beq.n	800ca40 <rxTryParseFrame+0x1d8>
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	7bdb      	ldrb	r3, [r3, #15]
 800ca2a:	f083 0301 	eor.w	r3, r3, #1
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d103      	bne.n	800ca3c <rxTryParseFrame+0x1d4>
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	7c5b      	ldrb	r3, [r3, #17]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <rxTryParseFrame+0x1d8>
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e000      	b.n	800ca42 <rxTryParseFrame+0x1da>
 800ca40:	2300      	movs	r3, #0
 800ca42:	77fb      	strb	r3, [r7, #31]
 800ca44:	7ffb      	ldrb	r3, [r7, #31]
 800ca46:	f003 0301 	and.w	r3, r3, #1
 800ca4a:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 800ca4c:	7ffb      	ldrb	r3, [r7, #31]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00d      	beq.n	800ca6e <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d003      	beq.n	800ca62 <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	7c1b      	ldrb	r3, [r3, #16]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d103      	bne.n	800ca6a <rxTryParseFrame+0x202>
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	7b1b      	ldrb	r3, [r3, #12]
 800ca66:	2bff      	cmp	r3, #255	@ 0xff
 800ca68:	d001      	beq.n	800ca6e <rxTryParseFrame+0x206>
        valid = valid &&
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e000      	b.n	800ca70 <rxTryParseFrame+0x208>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	77fb      	strb	r3, [r7, #31]
 800ca72:	7ffb      	ldrb	r3, [r7, #31]
 800ca74:	f003 0301 	and.w	r3, r3, #1
 800ca78:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 800ca7a:	7ffb      	ldrb	r3, [r7, #31]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d009      	beq.n	800ca94 <rxTryParseFrame+0x22c>
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	695b      	ldr	r3, [r3, #20]
 800ca84:	2b06      	cmp	r3, #6
 800ca86:	d803      	bhi.n	800ca90 <rxTryParseFrame+0x228>
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	7c1b      	ldrb	r3, [r3, #16]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d001      	beq.n	800ca94 <rxTryParseFrame+0x22c>
 800ca90:	2301      	movs	r3, #1
 800ca92:	e000      	b.n	800ca96 <rxTryParseFrame+0x22e>
 800ca94:	2300      	movs	r3, #0
 800ca96:	77fb      	strb	r3, [r7, #31]
 800ca98:	7ffb      	ldrb	r3, [r7, #31]
 800ca9a:	f003 0301 	and.w	r3, r3, #1
 800ca9e:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 800caa0:	7ffb      	ldrb	r3, [r7, #31]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00d      	beq.n	800cac2 <rxTryParseFrame+0x25a>
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	695b      	ldr	r3, [r3, #20]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d107      	bne.n	800cabe <rxTryParseFrame+0x256>
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	7bdb      	ldrb	r3, [r3, #15]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d005      	beq.n	800cac2 <rxTryParseFrame+0x25a>
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	7c1b      	ldrb	r3, [r3, #16]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d001      	beq.n	800cac2 <rxTryParseFrame+0x25a>
 800cabe:	2301      	movs	r3, #1
 800cac0:	e000      	b.n	800cac4 <rxTryParseFrame+0x25c>
 800cac2:	2300      	movs	r3, #0
 800cac4:	77fb      	strb	r3, [r7, #31]
 800cac6:	7ffb      	ldrb	r3, [r7, #31]
 800cac8:	f003 0301 	and.w	r3, r3, #1
 800cacc:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 800cace:	7ffb      	ldrb	r3, [r7, #31]
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3720      	adds	r7, #32
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	08012920 	.word	0x08012920
 800cadc:	0801332c 	.word	0x0801332c
 800cae0:	080124c8 	.word	0x080124c8
 800cae4:	08012938 	.word	0x08012938
 800cae8:	08012968 	.word	0x08012968
 800caec:	0801297c 	.word	0x0801297c

0800caf0 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d106      	bne.n	800cb0e <rxInitTransferMetadataFromFrame+0x1e>
 800cb00:	4b19      	ldr	r3, [pc, #100]	@ (800cb68 <rxInitTransferMetadataFromFrame+0x78>)
 800cb02:	4a1a      	ldr	r2, [pc, #104]	@ (800cb6c <rxInitTransferMetadataFromFrame+0x7c>)
 800cb04:	f240 218f 	movw	r1, #655	@ 0x28f
 800cb08:	4819      	ldr	r0, [pc, #100]	@ (800cb70 <rxInitTransferMetadataFromFrame+0x80>)
 800cb0a:	f001 f855 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	699b      	ldr	r3, [r3, #24]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d106      	bne.n	800cb24 <rxInitTransferMetadataFromFrame+0x34>
 800cb16:	4b17      	ldr	r3, [pc, #92]	@ (800cb74 <rxInitTransferMetadataFromFrame+0x84>)
 800cb18:	4a14      	ldr	r2, [pc, #80]	@ (800cb6c <rxInitTransferMetadataFromFrame+0x7c>)
 800cb1a:	f44f 7124 	mov.w	r1, #656	@ 0x290
 800cb1e:	4814      	ldr	r0, [pc, #80]	@ (800cb70 <rxInitTransferMetadataFromFrame+0x80>)
 800cb20:	f001 f84a 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d106      	bne.n	800cb38 <rxInitTransferMetadataFromFrame+0x48>
 800cb2a:	4b13      	ldr	r3, [pc, #76]	@ (800cb78 <rxInitTransferMetadataFromFrame+0x88>)
 800cb2c:	4a0f      	ldr	r2, [pc, #60]	@ (800cb6c <rxInitTransferMetadataFromFrame+0x7c>)
 800cb2e:	f240 2191 	movw	r1, #657	@ 0x291
 800cb32:	480f      	ldr	r0, [pc, #60]	@ (800cb70 <rxInitTransferMetadataFromFrame+0x80>)
 800cb34:	f001 f840 	bl	800dbb8 <__assert_func>
    out_transfer->priority       = frame->priority;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	7a1a      	ldrb	r2, [r3, #8]
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	7a5a      	ldrb	r2, [r3, #9]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	895a      	ldrh	r2, [r3, #10]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	7b1a      	ldrb	r2, [r3, #12]
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	7b9a      	ldrb	r2, [r3, #14]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	715a      	strb	r2, [r3, #5]
}
 800cb60:	bf00      	nop
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	08012920 	.word	0x08012920
 800cb6c:	080133c0 	.word	0x080133c0
 800cb70:	080124c8 	.word	0x080124c8
 800cb74:	0801297c 	.word	0x0801297c
 800cb78:	0801299c 	.word	0x0801299c

0800cb7c <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	4603      	mov	r3, r0
 800cb84:	460a      	mov	r2, r1
 800cb86:	71fb      	strb	r3, [r7, #7]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 800cb8c:	79fb      	ldrb	r3, [r7, #7]
 800cb8e:	2b1f      	cmp	r3, #31
 800cb90:	d906      	bls.n	800cba0 <rxComputeTransferIDDifference+0x24>
 800cb92:	4b15      	ldr	r3, [pc, #84]	@ (800cbe8 <rxComputeTransferIDDifference+0x6c>)
 800cb94:	4a15      	ldr	r2, [pc, #84]	@ (800cbec <rxComputeTransferIDDifference+0x70>)
 800cb96:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 800cb9a:	4815      	ldr	r0, [pc, #84]	@ (800cbf0 <rxComputeTransferIDDifference+0x74>)
 800cb9c:	f001 f80c 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 800cba0:	79bb      	ldrb	r3, [r7, #6]
 800cba2:	2b1f      	cmp	r3, #31
 800cba4:	d906      	bls.n	800cbb4 <rxComputeTransferIDDifference+0x38>
 800cba6:	4b13      	ldr	r3, [pc, #76]	@ (800cbf4 <rxComputeTransferIDDifference+0x78>)
 800cba8:	4a10      	ldr	r2, [pc, #64]	@ (800cbec <rxComputeTransferIDDifference+0x70>)
 800cbaa:	f240 219d 	movw	r1, #669	@ 0x29d
 800cbae:	4810      	ldr	r0, [pc, #64]	@ (800cbf0 <rxComputeTransferIDDifference+0x74>)
 800cbb0:	f001 f802 	bl	800dbb8 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 800cbb4:	79fb      	ldrb	r3, [r7, #7]
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	79bb      	ldrb	r3, [r7, #6]
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 800cbc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	da07      	bge.n	800cbda <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 800cbca:	2320      	movs	r3, #32
 800cbcc:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 800cbce:	7b7b      	ldrb	r3, [r7, #13]
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	89fb      	ldrh	r3, [r7, #14]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	b29b      	uxth	r3, r3
 800cbd8:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 800cbda:	89fb      	ldrh	r3, [r7, #14]
 800cbdc:	b2db      	uxtb	r3, r3
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	080129b8 	.word	0x080129b8
 800cbec:	0801335c 	.word	0x0801335c
 800cbf0:	080124c8 	.word	0x080124c8
 800cbf4:	080129d0 	.word	0x080129d0

0800cbf8 <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b086      	sub	sp, #24
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
 800cc04:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d106      	bne.n	800cc1a <rxSessionWritePayload+0x22>
 800cc0c:	4b67      	ldr	r3, [pc, #412]	@ (800cdac <rxSessionWritePayload+0x1b4>)
 800cc0e:	4a68      	ldr	r2, [pc, #416]	@ (800cdb0 <rxSessionWritePayload+0x1b8>)
 800cc10:	f240 21ad 	movw	r1, #685	@ 0x2ad
 800cc14:	4867      	ldr	r0, [pc, #412]	@ (800cdb4 <rxSessionWritePayload+0x1bc>)
 800cc16:	f000 ffcf 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d106      	bne.n	800cc2e <rxSessionWritePayload+0x36>
 800cc20:	4b65      	ldr	r3, [pc, #404]	@ (800cdb8 <rxSessionWritePayload+0x1c0>)
 800cc22:	4a63      	ldr	r2, [pc, #396]	@ (800cdb0 <rxSessionWritePayload+0x1b8>)
 800cc24:	f240 21ae 	movw	r1, #686	@ 0x2ae
 800cc28:	4862      	ldr	r0, [pc, #392]	@ (800cdb4 <rxSessionWritePayload+0x1bc>)
 800cc2a:	f000 ffc5 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800cc2e:	6a3b      	ldr	r3, [r7, #32]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d109      	bne.n	800cc48 <rxSessionWritePayload+0x50>
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d006      	beq.n	800cc48 <rxSessionWritePayload+0x50>
 800cc3a:	4b60      	ldr	r3, [pc, #384]	@ (800cdbc <rxSessionWritePayload+0x1c4>)
 800cc3c:	4a5c      	ldr	r2, [pc, #368]	@ (800cdb0 <rxSessionWritePayload+0x1b8>)
 800cc3e:	f240 21af 	movw	r1, #687	@ 0x2af
 800cc42:	485c      	ldr	r0, [pc, #368]	@ (800cdb4 <rxSessionWritePayload+0x1bc>)
 800cc44:	f000 ffb8 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d206      	bcs.n	800cc60 <rxSessionWritePayload+0x68>
 800cc52:	4b5b      	ldr	r3, [pc, #364]	@ (800cdc0 <rxSessionWritePayload+0x1c8>)
 800cc54:	4a56      	ldr	r2, [pc, #344]	@ (800cdb0 <rxSessionWritePayload+0x1b8>)
 800cc56:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 800cc5a:	4856      	ldr	r0, [pc, #344]	@ (800cdb4 <rxSessionWritePayload+0x1bc>)
 800cc5c:	f000 ffac 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	68da      	ldr	r2, [r3, #12]
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d906      	bls.n	800cc7a <rxSessionWritePayload+0x82>
 800cc6c:	4b55      	ldr	r3, [pc, #340]	@ (800cdc4 <rxSessionWritePayload+0x1cc>)
 800cc6e:	4a50      	ldr	r2, [pc, #320]	@ (800cdb0 <rxSessionWritePayload+0x1b8>)
 800cc70:	f240 21b1 	movw	r1, #689	@ 0x2b1
 800cc74:	484f      	ldr	r0, [pc, #316]	@ (800cdb4 <rxSessionWritePayload+0x1bc>)
 800cc76:	f000 ff9f 	bl	800dbb8 <__assert_func>

    rxs->total_payload_size += payload_size;
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	689a      	ldr	r2, [r3, #8]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	441a      	add	r2, r3
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d115      	bne.n	800ccba <rxSessionWritePayload+0xc2>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d012      	beq.n	800ccba <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d006      	beq.n	800ccaa <rxSessionWritePayload+0xb2>
 800cc9c:	4b4a      	ldr	r3, [pc, #296]	@ (800cdc8 <rxSessionWritePayload+0x1d0>)
 800cc9e:	4a44      	ldr	r2, [pc, #272]	@ (800cdb0 <rxSessionWritePayload+0x1b8>)
 800cca0:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 800cca4:	4843      	ldr	r0, [pc, #268]	@ (800cdb4 <rxSessionWritePayload+0x1bc>)
 800cca6:	f000 ff87 	bl	800dbb8 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	6879      	ldr	r1, [r7, #4]
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	4798      	blx	r3
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	691b      	ldr	r3, [r3, #16]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d04e      	beq.n	800cd64 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	68da      	ldr	r2, [r3, #12]
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d229      	bcs.n	800cd2c <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d206      	bcs.n	800ccf0 <rxSessionWritePayload+0xf8>
 800cce2:	4b37      	ldr	r3, [pc, #220]	@ (800cdc0 <rxSessionWritePayload+0x1c8>)
 800cce4:	4a32      	ldr	r2, [pc, #200]	@ (800cdb0 <rxSessionWritePayload+0x1b8>)
 800cce6:	f240 21c3 	movw	r1, #707	@ 0x2c3
 800ccea:	4832      	ldr	r0, [pc, #200]	@ (800cdb4 <rxSessionWritePayload+0x1bc>)
 800ccec:	f000 ff64 	bl	800dbb8 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	68da      	ldr	r2, [r3, #12]
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	4413      	add	r3, r2
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d006      	beq.n	800cd16 <rxSessionWritePayload+0x11e>
 800cd08:	4b30      	ldr	r3, [pc, #192]	@ (800cdcc <rxSessionWritePayload+0x1d4>)
 800cd0a:	4a29      	ldr	r2, [pc, #164]	@ (800cdb0 <rxSessionWritePayload+0x1b8>)
 800cd0c:	f240 21c5 	movw	r1, #709	@ 0x2c5
 800cd10:	4828      	ldr	r0, [pc, #160]	@ (800cdb4 <rxSessionWritePayload+0x1bc>)
 800cd12:	f000 ff51 	bl	800dbb8 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 800cd16:	693a      	ldr	r2, [r7, #16]
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d306      	bcc.n	800cd2c <rxSessionWritePayload+0x134>
 800cd1e:	4b2c      	ldr	r3, [pc, #176]	@ (800cdd0 <rxSessionWritePayload+0x1d8>)
 800cd20:	4a23      	ldr	r2, [pc, #140]	@ (800cdb0 <rxSessionWritePayload+0x1b8>)
 800cd22:	f240 21c6 	movw	r1, #710	@ 0x2c6
 800cd26:	4823      	ldr	r0, [pc, #140]	@ (800cdb4 <rxSessionWritePayload+0x1bc>)
 800cd28:	f000 ff46 	bl	800dbb8 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	691a      	ldr	r2, [r3, #16]
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	4413      	add	r3, r2
 800cd36:	693a      	ldr	r2, [r7, #16]
 800cd38:	6a39      	ldr	r1, [r7, #32]
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f002 f8cd 	bl	800eeda <memcpy>
        rxs->payload_size += bytes_to_copy;
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	68da      	ldr	r2, [r3, #12]
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	441a      	add	r2, r3
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d219      	bcs.n	800cd8a <rxSessionWritePayload+0x192>
 800cd56:	4b1a      	ldr	r3, [pc, #104]	@ (800cdc0 <rxSessionWritePayload+0x1c8>)
 800cd58:	4a15      	ldr	r2, [pc, #84]	@ (800cdb0 <rxSessionWritePayload+0x1b8>)
 800cd5a:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 800cd5e:	4815      	ldr	r0, [pc, #84]	@ (800cdb4 <rxSessionWritePayload+0x1bc>)
 800cd60:	f000 ff2a 	bl	800dbb8 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d006      	beq.n	800cd7a <rxSessionWritePayload+0x182>
 800cd6c:	4b16      	ldr	r3, [pc, #88]	@ (800cdc8 <rxSessionWritePayload+0x1d0>)
 800cd6e:	4a10      	ldr	r2, [pc, #64]	@ (800cdb0 <rxSessionWritePayload+0x1b8>)
 800cd70:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 800cd74:	480f      	ldr	r0, [pc, #60]	@ (800cdb4 <rxSessionWritePayload+0x1bc>)
 800cd76:	f000 ff1f 	bl	800dbb8 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <rxSessionWritePayload+0x18e>
 800cd80:	f06f 0302 	mvn.w	r3, #2
 800cd84:	e000      	b.n	800cd88 <rxSessionWritePayload+0x190>
 800cd86:	2300      	movs	r3, #0
 800cd88:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 800cd8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	dd06      	ble.n	800cda0 <rxSessionWritePayload+0x1a8>
 800cd92:	4b10      	ldr	r3, [pc, #64]	@ (800cdd4 <rxSessionWritePayload+0x1dc>)
 800cd94:	4a06      	ldr	r2, [pc, #24]	@ (800cdb0 <rxSessionWritePayload+0x1b8>)
 800cd96:	f240 21d7 	movw	r1, #727	@ 0x2d7
 800cd9a:	4806      	ldr	r0, [pc, #24]	@ (800cdb4 <rxSessionWritePayload+0x1bc>)
 800cd9c:	f000 ff0c 	bl	800dbb8 <__assert_func>
    return out;
 800cda0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3718      	adds	r7, #24
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	0801268c 	.word	0x0801268c
 800cdb0:	080133a8 	.word	0x080133a8
 800cdb4:	080124c8 	.word	0x080124c8
 800cdb8:	080129e8 	.word	0x080129e8
 800cdbc:	08012584 	.word	0x08012584
 800cdc0:	080129fc 	.word	0x080129fc
 800cdc4:	08012a18 	.word	0x08012a18
 800cdc8:	08012a48 	.word	0x08012a48
 800cdcc:	08012a60 	.word	0x08012a60
 800cdd0:	08012a90 	.word	0x08012a90
 800cdd4:	08012ab0 	.word	0x08012ab0

0800cdd8 <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d106      	bne.n	800cdf6 <rxSessionRestart+0x1e>
 800cde8:	4b1a      	ldr	r3, [pc, #104]	@ (800ce54 <rxSessionRestart+0x7c>)
 800cdea:	4a1b      	ldr	r2, [pc, #108]	@ (800ce58 <rxSessionRestart+0x80>)
 800cdec:	f240 21dd 	movw	r1, #733	@ 0x2dd
 800cdf0:	481a      	ldr	r0, [pc, #104]	@ (800ce5c <rxSessionRestart+0x84>)
 800cdf2:	f000 fee1 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d106      	bne.n	800ce0a <rxSessionRestart+0x32>
 800cdfc:	4b18      	ldr	r3, [pc, #96]	@ (800ce60 <rxSessionRestart+0x88>)
 800cdfe:	4a16      	ldr	r2, [pc, #88]	@ (800ce58 <rxSessionRestart+0x80>)
 800ce00:	f240 21de 	movw	r1, #734	@ 0x2de
 800ce04:	4815      	ldr	r0, [pc, #84]	@ (800ce5c <rxSessionRestart+0x84>)
 800ce06:	f000 fed7 	bl	800dbb8 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	683a      	ldr	r2, [r7, #0]
 800ce10:	6912      	ldr	r2, [r2, #16]
 800ce12:	4611      	mov	r1, r2
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	2200      	movs	r2, #0
 800ce22:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	2200      	movs	r2, #0
 800ce28:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ce30:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	7d9b      	ldrb	r3, [r3, #22]
 800ce36:	3301      	adds	r3, #1
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	f003 031f 	and.w	r3, r3, #31
 800ce3e:	b2da      	uxtb	r2, r3
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	2201      	movs	r2, #1
 800ce48:	761a      	strb	r2, [r3, #24]
}
 800ce4a:	bf00      	nop
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	0801268c 	.word	0x0801268c
 800ce58:	0801337c 	.word	0x0801337c
 800ce5c:	080124c8 	.word	0x080124c8
 800ce60:	080129e8 	.word	0x080129e8

0800ce64 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b088      	sub	sp, #32
 800ce68:	af02      	add	r7, sp, #8
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
 800ce70:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d106      	bne.n	800ce86 <rxSessionAcceptFrame+0x22>
 800ce78:	4b81      	ldr	r3, [pc, #516]	@ (800d080 <rxSessionAcceptFrame+0x21c>)
 800ce7a:	4a82      	ldr	r2, [pc, #520]	@ (800d084 <rxSessionAcceptFrame+0x220>)
 800ce7c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ce80:	4881      	ldr	r0, [pc, #516]	@ (800d088 <rxSessionAcceptFrame+0x224>)
 800ce82:	f000 fe99 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d106      	bne.n	800ce9a <rxSessionAcceptFrame+0x36>
 800ce8c:	4b7f      	ldr	r3, [pc, #508]	@ (800d08c <rxSessionAcceptFrame+0x228>)
 800ce8e:	4a7d      	ldr	r2, [pc, #500]	@ (800d084 <rxSessionAcceptFrame+0x220>)
 800ce90:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 800ce94:	487c      	ldr	r0, [pc, #496]	@ (800d088 <rxSessionAcceptFrame+0x224>)
 800ce96:	f000 fe8f 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d106      	bne.n	800ceae <rxSessionAcceptFrame+0x4a>
 800cea0:	4b7b      	ldr	r3, [pc, #492]	@ (800d090 <rxSessionAcceptFrame+0x22c>)
 800cea2:	4a78      	ldr	r2, [pc, #480]	@ (800d084 <rxSessionAcceptFrame+0x220>)
 800cea4:	f240 21f1 	movw	r1, #753	@ 0x2f1
 800cea8:	4877      	ldr	r0, [pc, #476]	@ (800d088 <rxSessionAcceptFrame+0x224>)
 800ceaa:	f000 fe85 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	699b      	ldr	r3, [r3, #24]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d106      	bne.n	800cec4 <rxSessionAcceptFrame+0x60>
 800ceb6:	4b77      	ldr	r3, [pc, #476]	@ (800d094 <rxSessionAcceptFrame+0x230>)
 800ceb8:	4a72      	ldr	r2, [pc, #456]	@ (800d084 <rxSessionAcceptFrame+0x220>)
 800ceba:	f240 21f2 	movw	r1, #754	@ 0x2f2
 800cebe:	4872      	ldr	r0, [pc, #456]	@ (800d088 <rxSessionAcceptFrame+0x224>)
 800cec0:	f000 fe7a 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	7b9b      	ldrb	r3, [r3, #14]
 800cec8:	2b1f      	cmp	r3, #31
 800ceca:	d906      	bls.n	800ceda <rxSessionAcceptFrame+0x76>
 800cecc:	4b72      	ldr	r3, [pc, #456]	@ (800d098 <rxSessionAcceptFrame+0x234>)
 800cece:	4a6d      	ldr	r2, [pc, #436]	@ (800d084 <rxSessionAcceptFrame+0x220>)
 800ced0:	f240 21f3 	movw	r1, #755	@ 0x2f3
 800ced4:	486c      	ldr	r0, [pc, #432]	@ (800d088 <rxSessionAcceptFrame+0x224>)
 800ced6:	f000 fe6f 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800ceda:	6a3b      	ldr	r3, [r7, #32]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d106      	bne.n	800ceee <rxSessionAcceptFrame+0x8a>
 800cee0:	4b6e      	ldr	r3, [pc, #440]	@ (800d09c <rxSessionAcceptFrame+0x238>)
 800cee2:	4a68      	ldr	r2, [pc, #416]	@ (800d084 <rxSessionAcceptFrame+0x220>)
 800cee4:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 800cee8:	4867      	ldr	r0, [pc, #412]	@ (800d088 <rxSessionAcceptFrame+0x224>)
 800ceea:	f000 fe65 	bl	800dbb8 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	7bdb      	ldrb	r3, [r3, #15]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d005      	beq.n	800cf02 <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cefc:	68b9      	ldr	r1, [r7, #8]
 800cefe:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	7bdb      	ldrb	r3, [r3, #15]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d005      	beq.n	800cf16 <rxSessionAcceptFrame+0xb2>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	7c1b      	ldrb	r3, [r3, #16]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d001      	beq.n	800cf16 <rxSessionAcceptFrame+0xb2>
 800cf12:	2301      	movs	r3, #1
 800cf14:	e000      	b.n	800cf18 <rxSessionAcceptFrame+0xb4>
 800cf16:	2300      	movs	r3, #0
 800cf18:	75bb      	strb	r3, [r7, #22]
 800cf1a:	7dbb      	ldrb	r3, [r7, #22]
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 800cf22:	7dbb      	ldrb	r3, [r7, #22]
 800cf24:	f083 0301 	eor.w	r3, r3, #1
 800cf28:	b2db      	uxtb	r3, r3
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00c      	beq.n	800cf48 <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	8a98      	ldrh	r0, [r3, #20]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6959      	ldr	r1, [r3, #20]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	699b      	ldr	r3, [r3, #24]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	f7fe fed6 	bl	800bcec <crcAdd>
 800cf40:	4603      	mov	r3, r0
 800cf42:	461a      	mov	r2, r3
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	695a      	ldr	r2, [r3, #20]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	699b      	ldr	r3, [r3, #24]
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	4613      	mov	r3, r2
 800cf54:	683a      	ldr	r2, [r7, #0]
 800cf56:	68b9      	ldr	r1, [r7, #8]
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f7ff fe4d 	bl	800cbf8 <rxSessionWritePayload>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 800cf62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	da10      	bge.n	800cf8c <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 800cf6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf6e:	f113 0f03 	cmn.w	r3, #3
 800cf72:	d006      	beq.n	800cf82 <rxSessionAcceptFrame+0x11e>
 800cf74:	4b4a      	ldr	r3, [pc, #296]	@ (800d0a0 <rxSessionAcceptFrame+0x23c>)
 800cf76:	4a43      	ldr	r2, [pc, #268]	@ (800d084 <rxSessionAcceptFrame+0x220>)
 800cf78:	f240 3106 	movw	r1, #774	@ 0x306
 800cf7c:	4842      	ldr	r0, [pc, #264]	@ (800d088 <rxSessionAcceptFrame+0x224>)
 800cf7e:	f000 fe1b 	bl	800dbb8 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 800cf82:	68b9      	ldr	r1, [r7, #8]
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	f7ff ff27 	bl	800cdd8 <rxSessionRestart>
 800cf8a:	e072      	b.n	800d072 <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	7c1b      	ldrb	r3, [r3, #16]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d05f      	beq.n	800d054 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 800cf94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d006      	beq.n	800cfaa <rxSessionAcceptFrame+0x146>
 800cf9c:	4b41      	ldr	r3, [pc, #260]	@ (800d0a4 <rxSessionAcceptFrame+0x240>)
 800cf9e:	4a39      	ldr	r2, [pc, #228]	@ (800d084 <rxSessionAcceptFrame+0x220>)
 800cfa0:	f240 310b 	movw	r1, #779	@ 0x30b
 800cfa4:	4838      	ldr	r0, [pc, #224]	@ (800d088 <rxSessionAcceptFrame+0x224>)
 800cfa6:	f000 fe07 	bl	800dbb8 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 800cfaa:	7dbb      	ldrb	r3, [r7, #22]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d103      	bne.n	800cfb8 <rxSessionAcceptFrame+0x154>
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	8a9b      	ldrh	r3, [r3, #20]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d148      	bne.n	800d04a <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 800cfb8:	2301      	movs	r3, #1
 800cfba:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800cfbc:	6a3b      	ldr	r3, [r7, #32]
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f7ff fd95 	bl	800caf0 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfcc:	6a39      	ldr	r1, [r7, #32]
 800cfce:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	68da      	ldr	r2, [r3, #12]
 800cfd6:	6a3b      	ldr	r3, [r7, #32]
 800cfd8:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	691a      	ldr	r2, [r3, #16]
 800cfde:	6a3b      	ldr	r3, [r7, #32]
 800cfe0:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	689a      	ldr	r2, [r3, #8]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d206      	bcs.n	800cffc <rxSessionAcceptFrame+0x198>
 800cfee:	4b2e      	ldr	r3, [pc, #184]	@ (800d0a8 <rxSessionAcceptFrame+0x244>)
 800cff0:	4a24      	ldr	r2, [pc, #144]	@ (800d084 <rxSessionAcceptFrame+0x220>)
 800cff2:	f240 3115 	movw	r1, #789	@ 0x315
 800cff6:	4824      	ldr	r0, [pc, #144]	@ (800d088 <rxSessionAcceptFrame+0x224>)
 800cff8:	f000 fdde 	bl	800dbb8 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	689a      	ldr	r2, [r3, #8]
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	1ad3      	subs	r3, r2, r3
 800d006:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 800d008:	7dbb      	ldrb	r3, [r7, #22]
 800d00a:	f083 0301 	eor.w	r3, r3, #1
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	d017      	beq.n	800d044 <rxSessionAcceptFrame+0x1e0>
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	2b01      	cmp	r3, #1
 800d018:	d814      	bhi.n	800d044 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 800d01a:	6a3b      	ldr	r3, [r7, #32]
 800d01c:	691a      	ldr	r2, [r3, #16]
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	f1c3 0302 	rsb	r3, r3, #2
 800d024:	429a      	cmp	r2, r3
 800d026:	d206      	bcs.n	800d036 <rxSessionAcceptFrame+0x1d2>
 800d028:	4b20      	ldr	r3, [pc, #128]	@ (800d0ac <rxSessionAcceptFrame+0x248>)
 800d02a:	4a16      	ldr	r2, [pc, #88]	@ (800d084 <rxSessionAcceptFrame+0x220>)
 800d02c:	f240 3119 	movw	r1, #793	@ 0x319
 800d030:	4815      	ldr	r0, [pc, #84]	@ (800d088 <rxSessionAcceptFrame+0x224>)
 800d032:	f000 fdc1 	bl	800dbb8 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	691a      	ldr	r2, [r3, #16]
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	4413      	add	r3, r2
 800d03e:	1e9a      	subs	r2, r3, #2
 800d040:	6a3b      	ldr	r3, [r7, #32]
 800d042:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	2200      	movs	r2, #0
 800d048:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 800d04a:	68b9      	ldr	r1, [r7, #8]
 800d04c:	68f8      	ldr	r0, [r7, #12]
 800d04e:	f7ff fec3 	bl	800cdd8 <rxSessionRestart>
 800d052:	e00e      	b.n	800d072 <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	7e1b      	ldrb	r3, [r3, #24]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	bf14      	ite	ne
 800d05c:	2301      	movne	r3, #1
 800d05e:	2300      	moveq	r3, #0
 800d060:	b2db      	uxtb	r3, r3
 800d062:	f083 0301 	eor.w	r3, r3, #1
 800d066:	b2db      	uxtb	r3, r3
 800d068:	f003 0301 	and.w	r3, r3, #1
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	761a      	strb	r2, [r3, #24]
    }
    return out;
 800d072:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	0801268c 	.word	0x0801268c
 800d084:	08013390 	.word	0x08013390
 800d088:	080124c8 	.word	0x080124c8
 800d08c:	080129e8 	.word	0x080129e8
 800d090:	08012920 	.word	0x08012920
 800d094:	0801297c 	.word	0x0801297c
 800d098:	08012abc 	.word	0x08012abc
 800d09c:	0801299c 	.word	0x0801299c
 800d0a0:	08012ae4 	.word	0x08012ae4
 800d0a4:	08012af0 	.word	0x08012af0
 800d0a8:	08012afc 	.word	0x08012afc
 800d0ac:	08012b2c 	.word	0x08012b2c

0800d0b0 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_transport_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 800d0b0:	b5b0      	push	{r4, r5, r7, lr}
 800d0b2:	b088      	sub	sp, #32
 800d0b4:	af02      	add	r7, sp, #8
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	607a      	str	r2, [r7, #4]
 800d0bc:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d106      	bne.n	800d0d2 <rxSessionUpdate+0x22>
 800d0c4:	4b6d      	ldr	r3, [pc, #436]	@ (800d27c <rxSessionUpdate+0x1cc>)
 800d0c6:	4a6e      	ldr	r2, [pc, #440]	@ (800d280 <rxSessionUpdate+0x1d0>)
 800d0c8:	f240 3137 	movw	r1, #823	@ 0x337
 800d0cc:	486d      	ldr	r0, [pc, #436]	@ (800d284 <rxSessionUpdate+0x1d4>)
 800d0ce:	f000 fd73 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d106      	bne.n	800d0e6 <rxSessionUpdate+0x36>
 800d0d8:	4b6b      	ldr	r3, [pc, #428]	@ (800d288 <rxSessionUpdate+0x1d8>)
 800d0da:	4a69      	ldr	r2, [pc, #420]	@ (800d280 <rxSessionUpdate+0x1d0>)
 800d0dc:	f44f 714e 	mov.w	r1, #824	@ 0x338
 800d0e0:	4868      	ldr	r0, [pc, #416]	@ (800d284 <rxSessionUpdate+0x1d4>)
 800d0e2:	f000 fd69 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d106      	bne.n	800d0fa <rxSessionUpdate+0x4a>
 800d0ec:	4b67      	ldr	r3, [pc, #412]	@ (800d28c <rxSessionUpdate+0x1dc>)
 800d0ee:	4a64      	ldr	r2, [pc, #400]	@ (800d280 <rxSessionUpdate+0x1d0>)
 800d0f0:	f240 3139 	movw	r1, #825	@ 0x339
 800d0f4:	4863      	ldr	r0, [pc, #396]	@ (800d284 <rxSessionUpdate+0x1d4>)
 800d0f6:	f000 fd5f 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800d0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d106      	bne.n	800d10e <rxSessionUpdate+0x5e>
 800d100:	4b63      	ldr	r3, [pc, #396]	@ (800d290 <rxSessionUpdate+0x1e0>)
 800d102:	4a5f      	ldr	r2, [pc, #380]	@ (800d280 <rxSessionUpdate+0x1d0>)
 800d104:	f240 313a 	movw	r1, #826	@ 0x33a
 800d108:	485e      	ldr	r0, [pc, #376]	@ (800d284 <rxSessionUpdate+0x1d4>)
 800d10a:	f000 fd55 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	7d9b      	ldrb	r3, [r3, #22]
 800d112:	2b1f      	cmp	r3, #31
 800d114:	d906      	bls.n	800d124 <rxSessionUpdate+0x74>
 800d116:	4b5f      	ldr	r3, [pc, #380]	@ (800d294 <rxSessionUpdate+0x1e4>)
 800d118:	4a59      	ldr	r2, [pc, #356]	@ (800d280 <rxSessionUpdate+0x1d0>)
 800d11a:	f240 313b 	movw	r1, #827	@ 0x33b
 800d11e:	4859      	ldr	r0, [pc, #356]	@ (800d284 <rxSessionUpdate+0x1d4>)
 800d120:	f000 fd4a 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	7b9b      	ldrb	r3, [r3, #14]
 800d128:	2b1f      	cmp	r3, #31
 800d12a:	d906      	bls.n	800d13a <rxSessionUpdate+0x8a>
 800d12c:	4b5a      	ldr	r3, [pc, #360]	@ (800d298 <rxSessionUpdate+0x1e8>)
 800d12e:	4a54      	ldr	r2, [pc, #336]	@ (800d280 <rxSessionUpdate+0x1d0>)
 800d130:	f44f 714f 	mov.w	r1, #828	@ 0x33c
 800d134:	4853      	ldr	r0, [pc, #332]	@ (800d284 <rxSessionUpdate+0x1d4>)
 800d136:	f000 fd3f 	bl	800dbb8 <__assert_func>

    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d140:	68b9      	ldr	r1, [r7, #8]
 800d142:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d146:	4290      	cmp	r0, r2
 800d148:	eb71 0303 	sbcs.w	r3, r1, r3
 800d14c:	d20f      	bcs.n	800d16e <rxSessionUpdate+0xbe>
                               ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15a:	1a84      	subs	r4, r0, r2
 800d15c:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800d160:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d164:	42a2      	cmp	r2, r4
 800d166:	41ab      	sbcs	r3, r5
 800d168:	d201      	bcs.n	800d16e <rxSessionUpdate+0xbe>
 800d16a:	2301      	movs	r3, #1
 800d16c:	e000      	b.n	800d170 <rxSessionUpdate+0xc0>
 800d16e:	2300      	movs	r3, #0
 800d170:	75bb      	strb	r3, [r7, #22]
 800d172:	7dbb      	ldrb	r3, [r7, #22]
 800d174:	f003 0301 	and.w	r3, r3, #1
 800d178:	75bb      	strb	r3, [r7, #22]

    const bool not_previous_tid = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	7d9a      	ldrb	r2, [r3, #22]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	7b9b      	ldrb	r3, [r3, #14]
 800d182:	4619      	mov	r1, r3
 800d184:	4610      	mov	r0, r2
 800d186:	f7ff fcf9 	bl	800cb7c <rxComputeTransferIDDifference>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	bf8c      	ite	hi
 800d190:	2301      	movhi	r3, #1
 800d192:	2300      	movls	r3, #0
 800d194:	757b      	strb	r3, [r7, #21]

    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800d196:	7dbb      	ldrb	r3, [r7, #22]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10b      	bne.n	800d1b4 <rxSessionUpdate+0x104>
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	7ddb      	ldrb	r3, [r3, #23]
 800d1a0:	78fa      	ldrb	r2, [r7, #3]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d108      	bne.n	800d1b8 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	7bdb      	ldrb	r3, [r3, #15]
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d004      	beq.n	800d1b8 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 800d1ae:	7d7b      	ldrb	r3, [r7, #21]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d001      	beq.n	800d1b8 <rxSessionUpdate+0x108>
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e000      	b.n	800d1ba <rxSessionUpdate+0x10a>
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	753b      	strb	r3, [r7, #20]
 800d1bc:	7d3b      	ldrb	r3, [r7, #20]
 800d1be:	f003 0301 	and.w	r3, r3, #1
 800d1c2:	753b      	strb	r3, [r7, #20]

    if (need_restart)
 800d1c4:	7d3b      	ldrb	r3, [r7, #20]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d013      	beq.n	800d1f2 <rxSessionUpdate+0x142>
    {
        rxs->total_payload_size        = 0U;
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	609a      	str	r2, [r3, #8]
        rxs->payload_size              = 0U;
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc            = CRC_INITIAL;
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d1dc:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id               = frame->transfer_id;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	7b9a      	ldrb	r2, [r3, #14]
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	759a      	strb	r2, [r3, #22]
        rxs->toggle                    = INITIAL_TOGGLE_STATE;
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	761a      	strb	r2, [r3, #24]
        rxs->redundant_transport_index = redundant_transport_index;
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	78fa      	ldrb	r2, [r7, #3]
 800d1f0:	75da      	strb	r2, [r3, #23]
    }

    int8_t out = 0;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	75fb      	strb	r3, [r7, #23]
    if (need_restart && (!frame->start_of_transfer))
 800d1f6:	7d3b      	ldrb	r3, [r7, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00b      	beq.n	800d214 <rxSessionUpdate+0x164>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	7bdb      	ldrb	r3, [r3, #15]
 800d200:	f083 0301 	eor.w	r3, r3, #1
 800d204:	b2db      	uxtb	r3, r3
 800d206:	2b00      	cmp	r3, #0
 800d208:	d004      	beq.n	800d214 <rxSessionUpdate+0x164>
    {
        rxSessionRestart(ins, rxs);  // SOT-miss, no point going further.
 800d20a:	68b9      	ldr	r1, [r7, #8]
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f7ff fde3 	bl	800cdd8 <rxSessionRestart>
 800d212:	e02c      	b.n	800d26e <rxSessionUpdate+0x1be>
    }
    else
    {
        const bool correct_transport = (rxs->redundant_transport_index == redundant_transport_index);
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	7ddb      	ldrb	r3, [r3, #23]
 800d218:	78fa      	ldrb	r2, [r7, #3]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	bf0c      	ite	eq
 800d21e:	2301      	moveq	r3, #1
 800d220:	2300      	movne	r3, #0
 800d222:	74fb      	strb	r3, [r7, #19]
        const bool correct_toggle    = (frame->toggle == rxs->toggle);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	7c5a      	ldrb	r2, [r3, #17]
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	7e1b      	ldrb	r3, [r3, #24]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	bf0c      	ite	eq
 800d230:	2301      	moveq	r3, #1
 800d232:	2300      	movne	r3, #0
 800d234:	74bb      	strb	r3, [r7, #18]
        const bool correct_tid       = (frame->transfer_id == rxs->transfer_id);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	7b9a      	ldrb	r2, [r3, #14]
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	7d9b      	ldrb	r3, [r3, #22]
 800d23e:	429a      	cmp	r2, r3
 800d240:	bf0c      	ite	eq
 800d242:	2301      	moveq	r3, #1
 800d244:	2300      	movne	r3, #0
 800d246:	747b      	strb	r3, [r7, #17]
        if (correct_transport && correct_toggle && correct_tid)
 800d248:	7cfb      	ldrb	r3, [r7, #19]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00f      	beq.n	800d26e <rxSessionUpdate+0x1be>
 800d24e:	7cbb      	ldrb	r3, [r7, #18]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d00c      	beq.n	800d26e <rxSessionUpdate+0x1be>
 800d254:	7c7b      	ldrb	r3, [r7, #17]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d009      	beq.n	800d26e <rxSessionUpdate+0x1be>
        {
            out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 800d25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d25c:	9300      	str	r3, [sp, #0]
 800d25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	68b9      	ldr	r1, [r7, #8]
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f7ff fdfd 	bl	800ce64 <rxSessionAcceptFrame>
 800d26a:	4603      	mov	r3, r0
 800d26c:	75fb      	strb	r3, [r7, #23]
        }
    }
    return out;
 800d26e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3718      	adds	r7, #24
 800d276:	46bd      	mov	sp, r7
 800d278:	bdb0      	pop	{r4, r5, r7, pc}
 800d27a:	bf00      	nop
 800d27c:	0801268c 	.word	0x0801268c
 800d280:	0801334c 	.word	0x0801334c
 800d284:	080124c8 	.word	0x080124c8
 800d288:	080129e8 	.word	0x080129e8
 800d28c:	08012920 	.word	0x08012920
 800d290:	0801299c 	.word	0x0801299c
 800d294:	08012b64 	.word	0x08012b64
 800d298:	08012abc 	.word	0x08012abc

0800d29c <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_transport_index,
                                    CanardRxTransfer* const     out_transfer)
{
 800d29c:	b5b0      	push	{r4, r5, r7, lr}
 800d29e:	b08c      	sub	sp, #48	@ 0x30
 800d2a0:	af04      	add	r7, sp, #16
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	607a      	str	r2, [r7, #4]
 800d2a8:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d106      	bne.n	800d2be <rxAcceptFrame+0x22>
 800d2b0:	4b85      	ldr	r3, [pc, #532]	@ (800d4c8 <rxAcceptFrame+0x22c>)
 800d2b2:	4a86      	ldr	r2, [pc, #536]	@ (800d4cc <rxAcceptFrame+0x230>)
 800d2b4:	f44f 715a 	mov.w	r1, #872	@ 0x368
 800d2b8:	4885      	ldr	r0, [pc, #532]	@ (800d4d0 <rxAcceptFrame+0x234>)
 800d2ba:	f000 fc7d 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d106      	bne.n	800d2d2 <rxAcceptFrame+0x36>
 800d2c4:	4b83      	ldr	r3, [pc, #524]	@ (800d4d4 <rxAcceptFrame+0x238>)
 800d2c6:	4a81      	ldr	r2, [pc, #516]	@ (800d4cc <rxAcceptFrame+0x230>)
 800d2c8:	f240 3169 	movw	r1, #873	@ 0x369
 800d2cc:	4880      	ldr	r0, [pc, #512]	@ (800d4d0 <rxAcceptFrame+0x234>)
 800d2ce:	f000 fc73 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	8b9a      	ldrh	r2, [r3, #28]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	895b      	ldrh	r3, [r3, #10]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d006      	beq.n	800d2ec <rxAcceptFrame+0x50>
 800d2de:	4b7e      	ldr	r3, [pc, #504]	@ (800d4d8 <rxAcceptFrame+0x23c>)
 800d2e0:	4a7a      	ldr	r2, [pc, #488]	@ (800d4cc <rxAcceptFrame+0x230>)
 800d2e2:	f240 316a 	movw	r1, #874	@ 0x36a
 800d2e6:	487a      	ldr	r0, [pc, #488]	@ (800d4d0 <rxAcceptFrame+0x234>)
 800d2e8:	f000 fc66 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d106      	bne.n	800d300 <rxAcceptFrame+0x64>
 800d2f2:	4b7a      	ldr	r3, [pc, #488]	@ (800d4dc <rxAcceptFrame+0x240>)
 800d2f4:	4a75      	ldr	r2, [pc, #468]	@ (800d4cc <rxAcceptFrame+0x230>)
 800d2f6:	f240 316b 	movw	r1, #875	@ 0x36b
 800d2fa:	4875      	ldr	r0, [pc, #468]	@ (800d4d0 <rxAcceptFrame+0x234>)
 800d2fc:	f000 fc5c 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	699b      	ldr	r3, [r3, #24]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d106      	bne.n	800d316 <rxAcceptFrame+0x7a>
 800d308:	4b75      	ldr	r3, [pc, #468]	@ (800d4e0 <rxAcceptFrame+0x244>)
 800d30a:	4a70      	ldr	r2, [pc, #448]	@ (800d4cc <rxAcceptFrame+0x230>)
 800d30c:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 800d310:	486f      	ldr	r0, [pc, #444]	@ (800d4d0 <rxAcceptFrame+0x234>)
 800d312:	f000 fc51 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	7b9b      	ldrb	r3, [r3, #14]
 800d31a:	2b1f      	cmp	r3, #31
 800d31c:	d906      	bls.n	800d32c <rxAcceptFrame+0x90>
 800d31e:	4b71      	ldr	r3, [pc, #452]	@ (800d4e4 <rxAcceptFrame+0x248>)
 800d320:	4a6a      	ldr	r2, [pc, #424]	@ (800d4cc <rxAcceptFrame+0x230>)
 800d322:	f240 316d 	movw	r1, #877	@ 0x36d
 800d326:	486a      	ldr	r0, [pc, #424]	@ (800d4d0 <rxAcceptFrame+0x234>)
 800d328:	f000 fc46 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	7b5b      	ldrb	r3, [r3, #13]
 800d330:	2bff      	cmp	r3, #255	@ 0xff
 800d332:	d00c      	beq.n	800d34e <rxAcceptFrame+0xb2>
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	791a      	ldrb	r2, [r3, #4]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	7b5b      	ldrb	r3, [r3, #13]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d006      	beq.n	800d34e <rxAcceptFrame+0xb2>
 800d340:	4b69      	ldr	r3, [pc, #420]	@ (800d4e8 <rxAcceptFrame+0x24c>)
 800d342:	4a62      	ldr	r2, [pc, #392]	@ (800d4cc <rxAcceptFrame+0x230>)
 800d344:	f240 316e 	movw	r1, #878	@ 0x36e
 800d348:	4861      	ldr	r0, [pc, #388]	@ (800d4d0 <rxAcceptFrame+0x234>)
 800d34a:	f000 fc35 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800d34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d350:	2b00      	cmp	r3, #0
 800d352:	d106      	bne.n	800d362 <rxAcceptFrame+0xc6>
 800d354:	4b65      	ldr	r3, [pc, #404]	@ (800d4ec <rxAcceptFrame+0x250>)
 800d356:	4a5d      	ldr	r2, [pc, #372]	@ (800d4cc <rxAcceptFrame+0x230>)
 800d358:	f240 316f 	movw	r1, #879	@ 0x36f
 800d35c:	485c      	ldr	r0, [pc, #368]	@ (800d4d0 <rxAcceptFrame+0x234>)
 800d35e:	f000 fc2b 	bl	800dbb8 <__assert_func>

    int8_t out = 0;
 800d362:	2300      	movs	r3, #0
 800d364:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	7b1b      	ldrb	r3, [r3, #12]
 800d36a:	b25b      	sxtb	r3, r3
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	db6c      	blt.n	800d44a <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	7b1b      	ldrb	r3, [r3, #12]
 800d374:	68ba      	ldr	r2, [r7, #8]
 800d376:	3308      	adds	r3, #8
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	4413      	add	r3, r2
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d134      	bne.n	800d3ec <rxAcceptFrame+0x150>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	7bdb      	ldrb	r3, [r3, #15]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d030      	beq.n	800d3ec <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	2120      	movs	r1, #32
 800d390:	68f8      	ldr	r0, [r7, #12]
 800d392:	4798      	blx	r3
 800d394:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	7b1b      	ldrb	r3, [r3, #12]
 800d39a:	68ba      	ldr	r2, [r7, #8]
 800d39c:	3308      	adds	r3, #8
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	4413      	add	r3, r2
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d01d      	beq.n	800d3e8 <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec   = frame->timestamp_usec;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b2:	6939      	ldr	r1, [r7, #16]
 800d3b4:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size        = 0U;
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	609a      	str	r2, [r3, #8]
                rxs->payload_size              = 0U;
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	60da      	str	r2, [r3, #12]
                rxs->payload                   = NULL;
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc            = CRC_INITIAL;
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d3d0:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id               = frame->transfer_id;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	7b9a      	ldrb	r2, [r3, #14]
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	759a      	strb	r2, [r3, #22]
                rxs->redundant_transport_index = redundant_transport_index;
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	78fa      	ldrb	r2, [r7, #3]
 800d3de:	75da      	strb	r2, [r3, #23]
                rxs->toggle                    = INITIAL_TOGGLE_STATE;
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	761a      	strb	r2, [r3, #24]
 800d3e6:	e001      	b.n	800d3ec <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 800d3e8:	23fd      	movs	r3, #253	@ 0xfd
 800d3ea:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	7b1b      	ldrb	r3, [r3, #12]
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	3308      	adds	r3, #8
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4413      	add	r3, r2
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d05e      	beq.n	800d4bc <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 800d3fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d006      	beq.n	800d414 <rxAcceptFrame+0x178>
 800d406:	4b3a      	ldr	r3, [pc, #232]	@ (800d4f0 <rxAcceptFrame+0x254>)
 800d408:	4a30      	ldr	r2, [pc, #192]	@ (800d4cc <rxAcceptFrame+0x230>)
 800d40a:	f240 318e 	movw	r1, #910	@ 0x38e
 800d40e:	4830      	ldr	r0, [pc, #192]	@ (800d4d0 <rxAcceptFrame+0x234>)
 800d410:	f000 fbd2 	bl	800dbb8 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	7b1b      	ldrb	r3, [r3, #12]
 800d418:	68ba      	ldr	r2, [r7, #8]
 800d41a:	3308      	adds	r3, #8
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d428:	68b9      	ldr	r1, [r7, #8]
 800d42a:	6989      	ldr	r1, [r1, #24]
 800d42c:	78fd      	ldrb	r5, [r7, #3]
 800d42e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d430:	9003      	str	r0, [sp, #12]
 800d432:	9102      	str	r1, [sp, #8]
 800d434:	e9cd 2300 	strd	r2, r3, [sp]
 800d438:	462b      	mov	r3, r5
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	4621      	mov	r1, r4
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f7ff fe36 	bl	800d0b0 <rxSessionUpdate>
 800d444:	4603      	mov	r3, r0
 800d446:	77fb      	strb	r3, [r7, #31]
 800d448:	e038      	b.n	800d4bc <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	7b1b      	ldrb	r3, [r3, #12]
 800d44e:	2bff      	cmp	r3, #255	@ 0xff
 800d450:	d006      	beq.n	800d460 <rxAcceptFrame+0x1c4>
 800d452:	4b28      	ldr	r3, [pc, #160]	@ (800d4f4 <rxAcceptFrame+0x258>)
 800d454:	4a1d      	ldr	r2, [pc, #116]	@ (800d4cc <rxAcceptFrame+0x230>)
 800d456:	f240 319a 	movw	r1, #922	@ 0x39a
 800d45a:	481d      	ldr	r0, [pc, #116]	@ (800d4d0 <rxAcceptFrame+0x234>)
 800d45c:	f000 fbac 	bl	800dbb8 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	695a      	ldr	r2, [r3, #20]
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 800d468:	4293      	cmp	r3, r2
 800d46a:	bf28      	it	cs
 800d46c:	4613      	movcs	r3, r2
 800d46e:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	69b9      	ldr	r1, [r7, #24]
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	4798      	blx	r3
 800d47a:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d01a      	beq.n	800d4b8 <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800d482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d484:	4619      	mov	r1, r3
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7ff fb32 	bl	800caf0 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d492:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d494:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 800d498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49a:	69ba      	ldr	r2, [r7, #24]
 800d49c:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 800d49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a0:	697a      	ldr	r2, [r7, #20]
 800d4a2:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	699b      	ldr	r3, [r3, #24]
 800d4a8:	69ba      	ldr	r2, [r7, #24]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	6978      	ldr	r0, [r7, #20]
 800d4ae:	f001 fd14 	bl	800eeda <memcpy>
            out = 1;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	77fb      	strb	r3, [r7, #31]
 800d4b6:	e001      	b.n	800d4bc <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 800d4b8:	23fd      	movs	r3, #253	@ 0xfd
 800d4ba:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800d4bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3720      	adds	r7, #32
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bdb0      	pop	{r4, r5, r7, pc}
 800d4c8:	0801268c 	.word	0x0801268c
 800d4cc:	0801333c 	.word	0x0801333c
 800d4d0:	080124c8 	.word	0x080124c8
 800d4d4:	08012b8c 	.word	0x08012b8c
 800d4d8:	08012ba8 	.word	0x08012ba8
 800d4dc:	08012920 	.word	0x08012920
 800d4e0:	0801297c 	.word	0x0801297c
 800d4e4:	08012abc 	.word	0x08012abc
 800d4e8:	08012bd0 	.word	0x08012bd0
 800d4ec:	0801299c 	.word	0x0801299c
 800d4f0:	08012c28 	.word	0x08012c28
 800d4f4:	08012c34 	.word	0x08012c34

0800d4f8 <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	881b      	ldrh	r3, [r3, #0]
 800d506:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) node)->port_id;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	8b9b      	ldrh	r3, [r3, #28]
 800d50c:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 800d50e:	89fa      	ldrh	r2, [r7, #14]
 800d510:	89bb      	ldrh	r3, [r7, #12]
 800d512:	429a      	cmp	r2, r3
 800d514:	d00a      	beq.n	800d52c <rxSubscriptionPredicateOnPortID+0x34>
 800d516:	89fa      	ldrh	r2, [r7, #14]
 800d518:	89bb      	ldrh	r3, [r7, #12]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	bf8c      	ite	hi
 800d51e:	2301      	movhi	r3, #1
 800d520:	2300      	movls	r3, #0
 800d522:	b2db      	uxtb	r3, r3
 800d524:	461a      	mov	r2, r3
 800d526:	4b05      	ldr	r3, [pc, #20]	@ (800d53c <rxSubscriptionPredicateOnPortID+0x44>)
 800d528:	569b      	ldrsb	r3, [r3, r2]
 800d52a:	e000      	b.n	800d52e <rxSubscriptionPredicateOnPortID+0x36>
 800d52c:	2300      	movs	r3, #0
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3714      	adds	r7, #20
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	08013328 	.word	0x08013328

0800d540 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	331c      	adds	r3, #28
 800d54e:	6839      	ldr	r1, [r7, #0]
 800d550:	4618      	mov	r0, r3
 800d552:	f7ff ffd1 	bl	800d4f8 <rxSubscriptionPredicateOnPortID>
 800d556:	4603      	mov	r3, r0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3708      	adds	r7, #8
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 800d560:	b5b0      	push	{r4, r5, r7, lr}
 800d562:	b08c      	sub	sp, #48	@ 0x30
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d106      	bne.n	800d580 <canardInit+0x20>
 800d572:	4b16      	ldr	r3, [pc, #88]	@ (800d5cc <canardInit+0x6c>)
 800d574:	4a16      	ldr	r2, [pc, #88]	@ (800d5d0 <canardInit+0x70>)
 800d576:	f240 31d6 	movw	r1, #982	@ 0x3d6
 800d57a:	4816      	ldr	r0, [pc, #88]	@ (800d5d4 <canardInit+0x74>)
 800d57c:	f000 fb1c 	bl	800dbb8 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d106      	bne.n	800d594 <canardInit+0x34>
 800d586:	4b14      	ldr	r3, [pc, #80]	@ (800d5d8 <canardInit+0x78>)
 800d588:	4a11      	ldr	r2, [pc, #68]	@ (800d5d0 <canardInit+0x70>)
 800d58a:	f240 31d7 	movw	r1, #983	@ 0x3d7
 800d58e:	4811      	ldr	r0, [pc, #68]	@ (800d5d4 <canardInit+0x74>)
 800d590:	f000 fb12 	bl	800dbb8 <__assert_func>
    const CanardInstance out = {
 800d594:	2300      	movs	r3, #0
 800d596:	617b      	str	r3, [r7, #20]
 800d598:	23ff      	movs	r3, #255	@ 0xff
 800d59a:	763b      	strb	r3, [r7, #24]
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	61fb      	str	r3, [r7, #28]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	623b      	str	r3, [r7, #32]
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	461d      	mov	r5, r3
 800d5b4:	f107 0414 	add.w	r4, r7, #20
 800d5b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d5bc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d5c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	3730      	adds	r7, #48	@ 0x30
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bdb0      	pop	{r4, r5, r7, pc}
 800d5cc:	08012c54 	.word	0x08012c54
 800d5d0:	080131b0 	.word	0x080131b0
 800d5d4:	080124c8 	.word	0x080124c8
 800d5d8:	08012c74 	.word	0x08012c74

0800d5dc <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 800d5dc:	b4b0      	push	{r4, r5, r7}
 800d5de:	b08b      	sub	sp, #44	@ 0x2c
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	617b      	str	r3, [r7, #20]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	61bb      	str	r3, [r7, #24]
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	61fb      	str	r3, [r7, #28]
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	623b      	str	r3, [r7, #32]
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	627b      	str	r3, [r7, #36]	@ 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	461d      	mov	r5, r3
 800d600:	f107 0414 	add.w	r4, r7, #20
 800d604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d608:	6823      	ldr	r3, [r4, #0]
 800d60a:	602b      	str	r3, [r5, #0]
}
 800d60c:	68f8      	ldr	r0, [r7, #12]
 800d60e:	372c      	adds	r7, #44	@ 0x2c
 800d610:	46bd      	mov	sp, r7
 800d612:	bcb0      	pop	{r4, r5, r7}
 800d614:	4770      	bx	lr
	...

0800d618 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b08e      	sub	sp, #56	@ 0x38
 800d61c:	af06      	add	r7, sp, #24
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800d626:	f06f 0301 	mvn.w	r3, #1
 800d62a:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d062      	beq.n	800d6f8 <canardTxPush+0xe0>
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d05f      	beq.n	800d6f8 <canardTxPush+0xe0>
 800d638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d05c      	beq.n	800d6f8 <canardTxPush+0xe0>
 800d63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d640:	2b00      	cmp	r3, #0
 800d642:	d102      	bne.n	800d64a <canardTxPush+0x32>
 800d644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d646:	2b00      	cmp	r3, #0
 800d648:	d156      	bne.n	800d6f8 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe fc02 	bl	800be58 <adjustPresentationLayerMTU>
 800d654:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	791a      	ldrb	r2, [r3, #4]
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	4613      	mov	r3, r2
 800d660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d664:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d666:	f7fe fc27 	bl	800beb8 <txMakeCANID>
 800d66a:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	db40      	blt.n	800d6f4 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 800d672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	429a      	cmp	r2, r3
 800d678:	d81c      	bhi.n	800d6b4 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800d67a:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 800d67c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d67e:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 800d680:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d682:	9103      	str	r1, [sp, #12]
 800d684:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d686:	9102      	str	r1, [sp, #8]
 800d688:	9201      	str	r2, [sp, #4]
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d690:	68b9      	ldr	r1, [r7, #8]
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f7fe fdda 	bl	800c24c <txPushSingleFrame>
 800d698:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	db2b      	blt.n	800d6f8 <canardTxPush+0xe0>
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d028      	beq.n	800d6f8 <canardTxPush+0xe0>
 800d6a6:	4b1c      	ldr	r3, [pc, #112]	@ (800d718 <canardTxPush+0x100>)
 800d6a8:	4a1c      	ldr	r2, [pc, #112]	@ (800d71c <canardTxPush+0x104>)
 800d6aa:	f240 4105 	movw	r1, #1029	@ 0x405
 800d6ae:	481c      	ldr	r0, [pc, #112]	@ (800d720 <canardTxPush+0x108>)
 800d6b0:	f000 fa82 	bl	800dbb8 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 800d6b4:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 800d6b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6b8:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 800d6ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d6bc:	9105      	str	r1, [sp, #20]
 800d6be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6c0:	9104      	str	r1, [sp, #16]
 800d6c2:	9203      	str	r2, [sp, #12]
 800d6c4:	9302      	str	r3, [sp, #8]
 800d6c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6ca:	e9cd 2300 	strd	r2, r3, [sp]
 800d6ce:	69ba      	ldr	r2, [r7, #24]
 800d6d0:	68b9      	ldr	r1, [r7, #8]
 800d6d2:	68f8      	ldr	r0, [r7, #12]
 800d6d4:	f7fe ffd4 	bl	800c680 <txPushMultiFrame>
 800d6d8:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	db0b      	blt.n	800d6f8 <canardTxPush+0xe0>
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	dc08      	bgt.n	800d6f8 <canardTxPush+0xe0>
 800d6e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d724 <canardTxPush+0x10c>)
 800d6e8:	4a0c      	ldr	r2, [pc, #48]	@ (800d71c <canardTxPush+0x104>)
 800d6ea:	f240 4111 	movw	r1, #1041	@ 0x411
 800d6ee:	480c      	ldr	r0, [pc, #48]	@ (800d720 <canardTxPush+0x108>)
 800d6f0:	f000 fa62 	bl	800dbb8 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d106      	bne.n	800d70c <canardTxPush+0xf4>
 800d6fe:	4b0a      	ldr	r3, [pc, #40]	@ (800d728 <canardTxPush+0x110>)
 800d700:	4a06      	ldr	r2, [pc, #24]	@ (800d71c <canardTxPush+0x104>)
 800d702:	f240 4119 	movw	r1, #1049	@ 0x419
 800d706:	4806      	ldr	r0, [pc, #24]	@ (800d720 <canardTxPush+0x108>)
 800d708:	f000 fa56 	bl	800dbb8 <__assert_func>
    return out;
 800d70c:	69fb      	ldr	r3, [r7, #28]
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3720      	adds	r7, #32
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	080127c4 	.word	0x080127c4
 800d71c:	080131bc 	.word	0x080131bc
 800d720:	080124c8 	.word	0x080124c8
 800d724:	08012908 	.word	0x08012908
 800d728:	08012c90 	.word	0x08012c90

0800d72c <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 800d734:	2300      	movs	r3, #0
 800d736:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d006      	beq.n	800d74c <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) cavlFindExtremum(que->root, false);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	2100      	movs	r1, #0
 800d744:	4618      	mov	r0, r3
 800d746:	f7fd ff1d 	bl	800b584 <cavlFindExtremum>
 800d74a:	60f8      	str	r0, [r7, #12]
    }
    return out;
 800d74c:	68fb      	ldr	r3, [r7, #12]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 800d756:	b580      	push	{r7, lr}
 800d758:	b084      	sub	sp, #16
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
 800d75e:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 800d760:	2300      	movs	r3, #0
 800d762:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d010      	beq.n	800d78c <canardTxPop+0x36>
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00d      	beq.n	800d78c <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	330c      	adds	r3, #12
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	4611      	mov	r1, r2
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fe f957 	bl	800ba30 <cavlRemove>
        que->size--;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	689b      	ldr	r3, [r3, #8]
 800d786:	1e5a      	subs	r2, r3, #1
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	609a      	str	r2, [r3, #8]
    }
    return out;
 800d78c:	68fb      	ldr	r3, [r7, #12]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
	...

0800d798 <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_transport_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b090      	sub	sp, #64	@ 0x40
 800d79c:	af02      	add	r7, sp, #8
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800d7a4:	23fe      	movs	r3, #254	@ 0xfe
 800d7a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d068      	beq.n	800d882 <canardRxAccept+0xea>
 800d7b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d065      	beq.n	800d882 <canardRxAccept+0xea>
 800d7b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d062      	beq.n	800d882 <canardRxAccept+0xea>
 800d7bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7c4:	d25d      	bcs.n	800d882 <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800d7c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7c8:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d103      	bne.n	800d7d6 <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800d7ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d155      	bne.n	800d882 <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 800d7d6:	f107 0310 	add.w	r3, r7, #16
 800d7da:	2220      	movs	r2, #32
 800d7dc:	2100      	movs	r1, #0
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f001 fa95 	bl	800ed0e <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 800d7e4:	f107 0310 	add.w	r3, r7, #16
 800d7e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d7ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7ee:	f7ff f83b 	bl	800c868 <rxTryParseFrame>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d041      	beq.n	800d87c <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 800d7f8:	7f7b      	ldrb	r3, [r7, #29]
 800d7fa:	2bff      	cmp	r3, #255	@ 0xff
 800d7fc:	d004      	beq.n	800d808 <canardRxAccept+0x70>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	791a      	ldrb	r2, [r3, #4]
 800d802:	7f7b      	ldrb	r3, [r7, #29]
 800d804:	429a      	cmp	r2, r3
 800d806:	d135      	bne.n	800d874 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 800d808:	7e7b      	ldrb	r3, [r7, #25]
 800d80a:	3304      	adds	r3, #4
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	68fa      	ldr	r2, [r7, #12]
 800d810:	18d0      	adds	r0, r2, r3
 800d812:	f107 0310 	add.w	r3, r7, #16
 800d816:	f103 010a 	add.w	r1, r3, #10
 800d81a:	2300      	movs	r3, #0
 800d81c:	4a21      	ldr	r2, [pc, #132]	@ (800d8a4 <canardRxAccept+0x10c>)
 800d81e:	f7fe f889 	bl	800b934 <cavlSearch>
 800d822:	6338      	str	r0, [r7, #48]	@ 0x30
                                                       &model.port_id,
                                                       &rxSubscriptionPredicateOnPortID,
                                                       NULL);
                if (out_subscription != NULL)
 800d824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d826:	2b00      	cmp	r3, #0
 800d828:	d002      	beq.n	800d830 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 800d82a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d82c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d82e:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 800d830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d832:	2b00      	cmp	r3, #0
 800d834:	d01a      	beq.n	800d86c <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 800d836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d838:	8b9a      	ldrh	r2, [r3, #28]
 800d83a:	8b7b      	ldrh	r3, [r7, #26]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d006      	beq.n	800d84e <canardRxAccept+0xb6>
 800d840:	4b19      	ldr	r3, [pc, #100]	@ (800d8a8 <canardRxAccept+0x110>)
 800d842:	4a1a      	ldr	r2, [pc, #104]	@ (800d8ac <canardRxAccept+0x114>)
 800d844:	f240 415a 	movw	r1, #1114	@ 0x45a
 800d848:	4819      	ldr	r0, [pc, #100]	@ (800d8b0 <canardRxAccept+0x118>)
 800d84a:	f000 f9b5 	bl	800dbb8 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_transport_index, out_transfer);
 800d84e:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 800d852:	f107 0210 	add.w	r2, r7, #16
 800d856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d858:	9300      	str	r3, [sp, #0]
 800d85a:	460b      	mov	r3, r1
 800d85c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	f7ff fd1c 	bl	800d29c <rxAcceptFrame>
 800d864:	4603      	mov	r3, r0
 800d866:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 800d86a:	e00a      	b.n	800d882 <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 800d86c:	2300      	movs	r3, #0
 800d86e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 800d872:	e006      	b.n	800d882 <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 800d874:	2300      	movs	r3, #0
 800d876:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d87a:	e002      	b.n	800d882 <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-UAVCAN/CAN input frame.
 800d87c:	2300      	movs	r3, #0
 800d87e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 800d882:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d886:	2b01      	cmp	r3, #1
 800d888:	dd06      	ble.n	800d898 <canardRxAccept+0x100>
 800d88a:	4b0a      	ldr	r3, [pc, #40]	@ (800d8b4 <canardRxAccept+0x11c>)
 800d88c:	4a07      	ldr	r2, [pc, #28]	@ (800d8ac <canardRxAccept+0x114>)
 800d88e:	f240 416c 	movw	r1, #1132	@ 0x46c
 800d892:	4807      	ldr	r0, [pc, #28]	@ (800d8b0 <canardRxAccept+0x118>)
 800d894:	f000 f990 	bl	800dbb8 <__assert_func>
    return out;
 800d898:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3738      	adds	r7, #56	@ 0x38
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	0800d4f9 	.word	0x0800d4f9
 800d8a8:	08012c9c 	.word	0x08012c9c
 800d8ac:	08013318 	.word	0x08013318
 800d8b0:	080124c8 	.word	0x080124c8
 800d8b4:	08012cbc 	.word	0x08012cbc

0800d8b8 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b088      	sub	sp, #32
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	607b      	str	r3, [r7, #4]
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	72fb      	strb	r3, [r7, #11]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800d8ca:	23fe      	movs	r3, #254	@ 0xfe
 800d8cc:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800d8ce:	7afb      	ldrb	r3, [r7, #11]
 800d8d0:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d04a      	beq.n	800d96e <canardRxSubscribe+0xb6>
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d047      	beq.n	800d96e <canardRxSubscribe+0xb6>
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	2b02      	cmp	r3, #2
 800d8e2:	d844      	bhi.n	800d96e <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 800d8e4:	893a      	ldrh	r2, [r7, #8]
 800d8e6:	7afb      	ldrb	r3, [r7, #11]
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f000 f850 	bl	800d990 <canardRxUnsubscribe>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 800d8f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	db38      	blt.n	800d96e <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 800d8fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d8fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d902:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 800d906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d908:	687a      	ldr	r2, [r7, #4]
 800d90a:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 800d90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d90e:	893a      	ldrh	r2, [r7, #8]
 800d910:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800d912:	2300      	movs	r3, #0
 800d914:	61bb      	str	r3, [r7, #24]
 800d916:	e009      	b.n	800d92c <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 800d918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	3308      	adds	r3, #8
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	4413      	add	r3, r2
 800d922:	2200      	movs	r2, #0
 800d924:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	3301      	adds	r3, #1
 800d92a:	61bb      	str	r3, [r7, #24]
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d930:	d9f2      	bls.n	800d918 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	3304      	adds	r3, #4
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	68fa      	ldr	r2, [r7, #12]
 800d93a:	18d0      	adds	r0, r2, r3
 800d93c:	4b0f      	ldr	r3, [pc, #60]	@ (800d97c <canardRxSubscribe+0xc4>)
 800d93e:	4a10      	ldr	r2, [pc, #64]	@ (800d980 <canardRxSubscribe+0xc8>)
 800d940:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d942:	f7fd fff7 	bl	800b934 <cavlSearch>
 800d946:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 800d948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d94a:	693a      	ldr	r2, [r7, #16]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d006      	beq.n	800d95e <canardRxSubscribe+0xa6>
 800d950:	4b0c      	ldr	r3, [pc, #48]	@ (800d984 <canardRxSubscribe+0xcc>)
 800d952:	4a0d      	ldr	r2, [pc, #52]	@ (800d988 <canardRxSubscribe+0xd0>)
 800d954:	f44f 6192 	mov.w	r1, #1168	@ 0x490
 800d958:	480c      	ldr	r0, [pc, #48]	@ (800d98c <canardRxSubscribe+0xd4>)
 800d95a:	f000 f92d 	bl	800dbb8 <__assert_func>
            out = (out > 0) ? 0 : 1;
 800d95e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d962:	2b00      	cmp	r3, #0
 800d964:	bfd4      	ite	le
 800d966:	2301      	movle	r3, #1
 800d968:	2300      	movgt	r3, #0
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800d96e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3720      	adds	r7, #32
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	0800bc95 	.word	0x0800bc95
 800d980:	0800d541 	.word	0x0800d541
 800d984:	08012cc8 	.word	0x08012cc8
 800d988:	080133e0 	.word	0x080133e0
 800d98c:	080124c8 	.word	0x080124c8

0800d990 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b088      	sub	sp, #32
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	460b      	mov	r3, r1
 800d99a:	70fb      	strb	r3, [r7, #3]
 800d99c:	4613      	mov	r3, r2
 800d99e:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800d9a0:	23fe      	movs	r3, #254	@ 0xfe
 800d9a2:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800d9a4:	78fb      	ldrb	r3, [r7, #3]
 800d9a6:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d05f      	beq.n	800da6e <canardRxUnsubscribe+0xde>
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	d85c      	bhi.n	800da6e <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 800d9b4:	883b      	ldrh	r3, [r7, #0]
 800d9b6:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	009b      	lsls	r3, r3, #2
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	18d0      	adds	r0, r2, r3
 800d9c2:	f107 010e 	add.w	r1, r7, #14
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	4a2c      	ldr	r2, [pc, #176]	@ (800da7c <canardRxUnsubscribe+0xec>)
 800d9ca:	f7fd ffb3 	bl	800b934 <cavlSearch>
 800d9ce:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d049      	beq.n	800da6a <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	3304      	adds	r3, #4
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	4413      	add	r3, r2
 800d9e0:	693a      	ldr	r2, [r7, #16]
 800d9e2:	4611      	mov	r1, r2
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7fe f823 	bl	800ba30 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	8b9b      	ldrh	r3, [r3, #28]
 800d9ee:	883a      	ldrh	r2, [r7, #0]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d006      	beq.n	800da02 <canardRxUnsubscribe+0x72>
 800d9f4:	4b22      	ldr	r3, [pc, #136]	@ (800da80 <canardRxUnsubscribe+0xf0>)
 800d9f6:	4a23      	ldr	r2, [pc, #140]	@ (800da84 <canardRxUnsubscribe+0xf4>)
 800d9f8:	f240 41a5 	movw	r1, #1189	@ 0x4a5
 800d9fc:	4822      	ldr	r0, [pc, #136]	@ (800da88 <canardRxUnsubscribe+0xf8>)
 800d9fe:	f000 f8db 	bl	800dbb8 <__assert_func>
            out = 1;
 800da02:	2301      	movs	r3, #1
 800da04:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800da06:	2300      	movs	r3, #0
 800da08:	61bb      	str	r3, [r7, #24]
 800da0a:	e02a      	b.n	800da62 <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	68da      	ldr	r2, [r3, #12]
 800da10:	6939      	ldr	r1, [r7, #16]
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	3308      	adds	r3, #8
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	440b      	add	r3, r1
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d007      	beq.n	800da30 <canardRxUnsubscribe+0xa0>
 800da20:	6939      	ldr	r1, [r7, #16]
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	3308      	adds	r3, #8
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	440b      	add	r3, r1
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	691b      	ldr	r3, [r3, #16]
 800da2e:	e000      	b.n	800da32 <canardRxUnsubscribe+0xa2>
 800da30:	2300      	movs	r3, #0
 800da32:	4619      	mov	r1, r3
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	68da      	ldr	r2, [r3, #12]
 800da3c:	6939      	ldr	r1, [r7, #16]
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	3308      	adds	r3, #8
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	440b      	add	r3, r1
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	4619      	mov	r1, r3
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	4790      	blx	r2
                sub->sessions[i] = NULL;
 800da4e:	693a      	ldr	r2, [r7, #16]
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	3308      	adds	r3, #8
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	4413      	add	r3, r2
 800da58:	2200      	movs	r2, #0
 800da5a:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800da5c:	69bb      	ldr	r3, [r7, #24]
 800da5e:	3301      	adds	r3, #1
 800da60:	61bb      	str	r3, [r7, #24]
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	2b7f      	cmp	r3, #127	@ 0x7f
 800da66:	d9d1      	bls.n	800da0c <canardRxUnsubscribe+0x7c>
 800da68:	e001      	b.n	800da6e <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 800da6a:	2300      	movs	r3, #0
 800da6c:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800da6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3720      	adds	r7, #32
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	0800d4f9 	.word	0x0800d4f9
 800da80:	08012ce8 	.word	0x08012ce8
 800da84:	080133f4 	.word	0x080133f4
 800da88:	080124c8 	.word	0x080124c8

0800da8c <canardMakeFilterForSubject>:

CanardFilter canardMakeFilterForSubject(const CanardPortID subject_id)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b085      	sub	sp, #20
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	460b      	mov	r3, r1
 800da96:	807b      	strh	r3, [r7, #2]
    CanardFilter out = {0};
 800da98:	f107 0308 	add.w	r3, r7, #8
 800da9c:	2200      	movs	r2, #0
 800da9e:	601a      	str	r2, [r3, #0]
 800daa0:	605a      	str	r2, [r3, #4]

    out.extended_can_id = ((uint32_t) subject_id) << OFFSET_SUBJECT_ID;
 800daa2:	887b      	ldrh	r3, [r7, #2]
 800daa4:	021b      	lsls	r3, r3, #8
 800daa6:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_07 | (CANARD_SUBJECT_ID_MAX << OFFSET_SUBJECT_ID);
 800daa8:	4b07      	ldr	r3, [pc, #28]	@ (800dac8 <canardMakeFilterForSubject+0x3c>)
 800daaa:	60fb      	str	r3, [r7, #12]

    return out;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	461a      	mov	r2, r3
 800dab0:	f107 0308 	add.w	r3, r7, #8
 800dab4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dab8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	3714      	adds	r7, #20
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr
 800dac8:	021fff80 	.word	0x021fff80

0800dacc <canardMakeFilterForServices>:

    return out;
}

CanardFilter canardMakeFilterForServices(const CanardNodeID local_node_id)
{
 800dacc:	b480      	push	{r7}
 800dace:	b085      	sub	sp, #20
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	460b      	mov	r3, r1
 800dad6:	70fb      	strb	r3, [r7, #3]
    CanardFilter out = {0};
 800dad8:	f107 0308 	add.w	r3, r7, #8
 800dadc:	2200      	movs	r2, #0
 800dade:	601a      	str	r2, [r3, #0]
 800dae0:	605a      	str	r2, [r3, #4]

    out.extended_can_id = FLAG_SERVICE_NOT_MESSAGE | (((uint32_t) local_node_id) << OFFSET_DST_NODE_ID);
 800dae2:	78fb      	ldrb	r3, [r7, #3]
 800dae4:	01db      	lsls	r3, r3, #7
 800dae6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800daea:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_23 | (CANARD_NODE_ID_MAX << OFFSET_DST_NODE_ID);
 800daec:	4b07      	ldr	r3, [pc, #28]	@ (800db0c <canardMakeFilterForServices+0x40>)
 800daee:	60fb      	str	r3, [r7, #12]

    return out;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	461a      	mov	r2, r3
 800daf4:	f107 0308 	add.w	r3, r7, #8
 800daf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dafc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	3714      	adds	r7, #20
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr
 800db0c:	02803f80 	.word	0x02803f80

0800db10 <canardConsolidateFilters>:

CanardFilter canardConsolidateFilters(const CanardFilter* a, const CanardFilter* b)
{
 800db10:	b480      	push	{r7}
 800db12:	b087      	sub	sp, #28
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	607a      	str	r2, [r7, #4]
    CanardFilter out = {0};
 800db1c:	f107 0310 	add.w	r3, r7, #16
 800db20:	2200      	movs	r2, #0
 800db22:	601a      	str	r2, [r3, #0]
 800db24:	605a      	str	r2, [r3, #4]

    out.extended_mask   = a->extended_mask & b->extended_mask & ~(a->extended_can_id ^ b->extended_can_id);
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	685a      	ldr	r2, [r3, #4]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	401a      	ands	r2, r3
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	6819      	ldr	r1, [r3, #0]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	404b      	eors	r3, r1
 800db3a:	43db      	mvns	r3, r3
 800db3c:	4013      	ands	r3, r2
 800db3e:	617b      	str	r3, [r7, #20]
    out.extended_can_id = a->extended_can_id & out.extended_mask;
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	4013      	ands	r3, r2
 800db48:	613b      	str	r3, [r7, #16]

    return out;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	461a      	mov	r2, r3
 800db4e:	f107 0310 	add.w	r3, r7, #16
 800db52:	e893 0003 	ldmia.w	r3, {r0, r1}
 800db56:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800db5a:	68f8      	ldr	r0, [r7, #12]
 800db5c:	371c      	adds	r7, #28
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr

0800db66 <_ZdlPvj>:
 800db66:	f000 b814 	b.w	800db92 <_ZdlPv>

0800db6a <_Znwj>:
 800db6a:	2801      	cmp	r0, #1
 800db6c:	bf38      	it	cc
 800db6e:	2001      	movcc	r0, #1
 800db70:	b510      	push	{r4, lr}
 800db72:	4604      	mov	r4, r0
 800db74:	4620      	mov	r0, r4
 800db76:	f000 f84f 	bl	800dc18 <malloc>
 800db7a:	b100      	cbz	r0, 800db7e <_Znwj+0x14>
 800db7c:	bd10      	pop	{r4, pc}
 800db7e:	f000 f80b 	bl	800db98 <_ZSt15get_new_handlerv>
 800db82:	b908      	cbnz	r0, 800db88 <_Znwj+0x1e>
 800db84:	f000 f810 	bl	800dba8 <abort>
 800db88:	4780      	blx	r0
 800db8a:	e7f3      	b.n	800db74 <_Znwj+0xa>

0800db8c <_ZSt25__throw_bad_function_callv>:
 800db8c:	b508      	push	{r3, lr}
 800db8e:	f000 f80b 	bl	800dba8 <abort>

0800db92 <_ZdlPv>:
 800db92:	f000 b849 	b.w	800dc28 <free>
	...

0800db98 <_ZSt15get_new_handlerv>:
 800db98:	4b02      	ldr	r3, [pc, #8]	@ (800dba4 <_ZSt15get_new_handlerv+0xc>)
 800db9a:	6818      	ldr	r0, [r3, #0]
 800db9c:	f3bf 8f5b 	dmb	ish
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop
 800dba4:	200005b4 	.word	0x200005b4

0800dba8 <abort>:
 800dba8:	b508      	push	{r3, lr}
 800dbaa:	2006      	movs	r0, #6
 800dbac:	f001 f8f2 	bl	800ed94 <raise>
 800dbb0:	2001      	movs	r0, #1
 800dbb2:	f7f7 ff23 	bl	80059fc <_exit>
	...

0800dbb8 <__assert_func>:
 800dbb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbba:	4614      	mov	r4, r2
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	4b09      	ldr	r3, [pc, #36]	@ (800dbe4 <__assert_func+0x2c>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4605      	mov	r5, r0
 800dbc4:	68d8      	ldr	r0, [r3, #12]
 800dbc6:	b954      	cbnz	r4, 800dbde <__assert_func+0x26>
 800dbc8:	4b07      	ldr	r3, [pc, #28]	@ (800dbe8 <__assert_func+0x30>)
 800dbca:	461c      	mov	r4, r3
 800dbcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbd0:	9100      	str	r1, [sp, #0]
 800dbd2:	462b      	mov	r3, r5
 800dbd4:	4905      	ldr	r1, [pc, #20]	@ (800dbec <__assert_func+0x34>)
 800dbd6:	f000 ffed 	bl	800ebb4 <fiprintf>
 800dbda:	f7ff ffe5 	bl	800dba8 <abort>
 800dbde:	4b04      	ldr	r3, [pc, #16]	@ (800dbf0 <__assert_func+0x38>)
 800dbe0:	e7f4      	b.n	800dbcc <__assert_func+0x14>
 800dbe2:	bf00      	nop
 800dbe4:	20000018 	.word	0x20000018
 800dbe8:	08013443 	.word	0x08013443
 800dbec:	08013415 	.word	0x08013415
 800dbf0:	08013408 	.word	0x08013408

0800dbf4 <exit>:
 800dbf4:	b508      	push	{r3, lr}
 800dbf6:	4b06      	ldr	r3, [pc, #24]	@ (800dc10 <exit+0x1c>)
 800dbf8:	4604      	mov	r4, r0
 800dbfa:	b113      	cbz	r3, 800dc02 <exit+0xe>
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	f3af 8000 	nop.w
 800dc02:	4b04      	ldr	r3, [pc, #16]	@ (800dc14 <exit+0x20>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	b103      	cbz	r3, 800dc0a <exit+0x16>
 800dc08:	4798      	blx	r3
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	f7f7 fef6 	bl	80059fc <_exit>
 800dc10:	00000000 	.word	0x00000000
 800dc14:	200006f8 	.word	0x200006f8

0800dc18 <malloc>:
 800dc18:	4b02      	ldr	r3, [pc, #8]	@ (800dc24 <malloc+0xc>)
 800dc1a:	4601      	mov	r1, r0
 800dc1c:	6818      	ldr	r0, [r3, #0]
 800dc1e:	f000 b82d 	b.w	800dc7c <_malloc_r>
 800dc22:	bf00      	nop
 800dc24:	20000018 	.word	0x20000018

0800dc28 <free>:
 800dc28:	4b02      	ldr	r3, [pc, #8]	@ (800dc34 <free+0xc>)
 800dc2a:	4601      	mov	r1, r0
 800dc2c:	6818      	ldr	r0, [r3, #0]
 800dc2e:	f001 bfb7 	b.w	800fba0 <_free_r>
 800dc32:	bf00      	nop
 800dc34:	20000018 	.word	0x20000018

0800dc38 <sbrk_aligned>:
 800dc38:	b570      	push	{r4, r5, r6, lr}
 800dc3a:	4e0f      	ldr	r6, [pc, #60]	@ (800dc78 <sbrk_aligned+0x40>)
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	6831      	ldr	r1, [r6, #0]
 800dc40:	4605      	mov	r5, r0
 800dc42:	b911      	cbnz	r1, 800dc4a <sbrk_aligned+0x12>
 800dc44:	f001 f8fa 	bl	800ee3c <_sbrk_r>
 800dc48:	6030      	str	r0, [r6, #0]
 800dc4a:	4621      	mov	r1, r4
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	f001 f8f5 	bl	800ee3c <_sbrk_r>
 800dc52:	1c43      	adds	r3, r0, #1
 800dc54:	d103      	bne.n	800dc5e <sbrk_aligned+0x26>
 800dc56:	f04f 34ff 	mov.w	r4, #4294967295
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	bd70      	pop	{r4, r5, r6, pc}
 800dc5e:	1cc4      	adds	r4, r0, #3
 800dc60:	f024 0403 	bic.w	r4, r4, #3
 800dc64:	42a0      	cmp	r0, r4
 800dc66:	d0f8      	beq.n	800dc5a <sbrk_aligned+0x22>
 800dc68:	1a21      	subs	r1, r4, r0
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	f001 f8e6 	bl	800ee3c <_sbrk_r>
 800dc70:	3001      	adds	r0, #1
 800dc72:	d1f2      	bne.n	800dc5a <sbrk_aligned+0x22>
 800dc74:	e7ef      	b.n	800dc56 <sbrk_aligned+0x1e>
 800dc76:	bf00      	nop
 800dc78:	200005b8 	.word	0x200005b8

0800dc7c <_malloc_r>:
 800dc7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc80:	1ccd      	adds	r5, r1, #3
 800dc82:	f025 0503 	bic.w	r5, r5, #3
 800dc86:	3508      	adds	r5, #8
 800dc88:	2d0c      	cmp	r5, #12
 800dc8a:	bf38      	it	cc
 800dc8c:	250c      	movcc	r5, #12
 800dc8e:	2d00      	cmp	r5, #0
 800dc90:	4606      	mov	r6, r0
 800dc92:	db01      	blt.n	800dc98 <_malloc_r+0x1c>
 800dc94:	42a9      	cmp	r1, r5
 800dc96:	d904      	bls.n	800dca2 <_malloc_r+0x26>
 800dc98:	230c      	movs	r3, #12
 800dc9a:	6033      	str	r3, [r6, #0]
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dca2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd78 <_malloc_r+0xfc>
 800dca6:	f000 f869 	bl	800dd7c <__malloc_lock>
 800dcaa:	f8d8 3000 	ldr.w	r3, [r8]
 800dcae:	461c      	mov	r4, r3
 800dcb0:	bb44      	cbnz	r4, 800dd04 <_malloc_r+0x88>
 800dcb2:	4629      	mov	r1, r5
 800dcb4:	4630      	mov	r0, r6
 800dcb6:	f7ff ffbf 	bl	800dc38 <sbrk_aligned>
 800dcba:	1c43      	adds	r3, r0, #1
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	d158      	bne.n	800dd72 <_malloc_r+0xf6>
 800dcc0:	f8d8 4000 	ldr.w	r4, [r8]
 800dcc4:	4627      	mov	r7, r4
 800dcc6:	2f00      	cmp	r7, #0
 800dcc8:	d143      	bne.n	800dd52 <_malloc_r+0xd6>
 800dcca:	2c00      	cmp	r4, #0
 800dccc:	d04b      	beq.n	800dd66 <_malloc_r+0xea>
 800dcce:	6823      	ldr	r3, [r4, #0]
 800dcd0:	4639      	mov	r1, r7
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	eb04 0903 	add.w	r9, r4, r3
 800dcd8:	f001 f8b0 	bl	800ee3c <_sbrk_r>
 800dcdc:	4581      	cmp	r9, r0
 800dcde:	d142      	bne.n	800dd66 <_malloc_r+0xea>
 800dce0:	6821      	ldr	r1, [r4, #0]
 800dce2:	1a6d      	subs	r5, r5, r1
 800dce4:	4629      	mov	r1, r5
 800dce6:	4630      	mov	r0, r6
 800dce8:	f7ff ffa6 	bl	800dc38 <sbrk_aligned>
 800dcec:	3001      	adds	r0, #1
 800dcee:	d03a      	beq.n	800dd66 <_malloc_r+0xea>
 800dcf0:	6823      	ldr	r3, [r4, #0]
 800dcf2:	442b      	add	r3, r5
 800dcf4:	6023      	str	r3, [r4, #0]
 800dcf6:	f8d8 3000 	ldr.w	r3, [r8]
 800dcfa:	685a      	ldr	r2, [r3, #4]
 800dcfc:	bb62      	cbnz	r2, 800dd58 <_malloc_r+0xdc>
 800dcfe:	f8c8 7000 	str.w	r7, [r8]
 800dd02:	e00f      	b.n	800dd24 <_malloc_r+0xa8>
 800dd04:	6822      	ldr	r2, [r4, #0]
 800dd06:	1b52      	subs	r2, r2, r5
 800dd08:	d420      	bmi.n	800dd4c <_malloc_r+0xd0>
 800dd0a:	2a0b      	cmp	r2, #11
 800dd0c:	d917      	bls.n	800dd3e <_malloc_r+0xc2>
 800dd0e:	1961      	adds	r1, r4, r5
 800dd10:	42a3      	cmp	r3, r4
 800dd12:	6025      	str	r5, [r4, #0]
 800dd14:	bf18      	it	ne
 800dd16:	6059      	strne	r1, [r3, #4]
 800dd18:	6863      	ldr	r3, [r4, #4]
 800dd1a:	bf08      	it	eq
 800dd1c:	f8c8 1000 	streq.w	r1, [r8]
 800dd20:	5162      	str	r2, [r4, r5]
 800dd22:	604b      	str	r3, [r1, #4]
 800dd24:	4630      	mov	r0, r6
 800dd26:	f000 f82f 	bl	800dd88 <__malloc_unlock>
 800dd2a:	f104 000b 	add.w	r0, r4, #11
 800dd2e:	1d23      	adds	r3, r4, #4
 800dd30:	f020 0007 	bic.w	r0, r0, #7
 800dd34:	1ac2      	subs	r2, r0, r3
 800dd36:	bf1c      	itt	ne
 800dd38:	1a1b      	subne	r3, r3, r0
 800dd3a:	50a3      	strne	r3, [r4, r2]
 800dd3c:	e7af      	b.n	800dc9e <_malloc_r+0x22>
 800dd3e:	6862      	ldr	r2, [r4, #4]
 800dd40:	42a3      	cmp	r3, r4
 800dd42:	bf0c      	ite	eq
 800dd44:	f8c8 2000 	streq.w	r2, [r8]
 800dd48:	605a      	strne	r2, [r3, #4]
 800dd4a:	e7eb      	b.n	800dd24 <_malloc_r+0xa8>
 800dd4c:	4623      	mov	r3, r4
 800dd4e:	6864      	ldr	r4, [r4, #4]
 800dd50:	e7ae      	b.n	800dcb0 <_malloc_r+0x34>
 800dd52:	463c      	mov	r4, r7
 800dd54:	687f      	ldr	r7, [r7, #4]
 800dd56:	e7b6      	b.n	800dcc6 <_malloc_r+0x4a>
 800dd58:	461a      	mov	r2, r3
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	42a3      	cmp	r3, r4
 800dd5e:	d1fb      	bne.n	800dd58 <_malloc_r+0xdc>
 800dd60:	2300      	movs	r3, #0
 800dd62:	6053      	str	r3, [r2, #4]
 800dd64:	e7de      	b.n	800dd24 <_malloc_r+0xa8>
 800dd66:	230c      	movs	r3, #12
 800dd68:	6033      	str	r3, [r6, #0]
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	f000 f80c 	bl	800dd88 <__malloc_unlock>
 800dd70:	e794      	b.n	800dc9c <_malloc_r+0x20>
 800dd72:	6005      	str	r5, [r0, #0]
 800dd74:	e7d6      	b.n	800dd24 <_malloc_r+0xa8>
 800dd76:	bf00      	nop
 800dd78:	200005bc 	.word	0x200005bc

0800dd7c <__malloc_lock>:
 800dd7c:	4801      	ldr	r0, [pc, #4]	@ (800dd84 <__malloc_lock+0x8>)
 800dd7e:	f001 b8aa 	b.w	800eed6 <__retarget_lock_acquire_recursive>
 800dd82:	bf00      	nop
 800dd84:	20000700 	.word	0x20000700

0800dd88 <__malloc_unlock>:
 800dd88:	4801      	ldr	r0, [pc, #4]	@ (800dd90 <__malloc_unlock+0x8>)
 800dd8a:	f001 b8a5 	b.w	800eed8 <__retarget_lock_release_recursive>
 800dd8e:	bf00      	nop
 800dd90:	20000700 	.word	0x20000700

0800dd94 <__cvt>:
 800dd94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd98:	ec57 6b10 	vmov	r6, r7, d0
 800dd9c:	2f00      	cmp	r7, #0
 800dd9e:	460c      	mov	r4, r1
 800dda0:	4619      	mov	r1, r3
 800dda2:	463b      	mov	r3, r7
 800dda4:	bfbb      	ittet	lt
 800dda6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ddaa:	461f      	movlt	r7, r3
 800ddac:	2300      	movge	r3, #0
 800ddae:	232d      	movlt	r3, #45	@ 0x2d
 800ddb0:	700b      	strb	r3, [r1, #0]
 800ddb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ddb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ddb8:	4691      	mov	r9, r2
 800ddba:	f023 0820 	bic.w	r8, r3, #32
 800ddbe:	bfbc      	itt	lt
 800ddc0:	4632      	movlt	r2, r6
 800ddc2:	4616      	movlt	r6, r2
 800ddc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ddc8:	d005      	beq.n	800ddd6 <__cvt+0x42>
 800ddca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ddce:	d100      	bne.n	800ddd2 <__cvt+0x3e>
 800ddd0:	3401      	adds	r4, #1
 800ddd2:	2102      	movs	r1, #2
 800ddd4:	e000      	b.n	800ddd8 <__cvt+0x44>
 800ddd6:	2103      	movs	r1, #3
 800ddd8:	ab03      	add	r3, sp, #12
 800ddda:	9301      	str	r3, [sp, #4]
 800dddc:	ab02      	add	r3, sp, #8
 800ddde:	9300      	str	r3, [sp, #0]
 800dde0:	ec47 6b10 	vmov	d0, r6, r7
 800dde4:	4653      	mov	r3, sl
 800dde6:	4622      	mov	r2, r4
 800dde8:	f001 f916 	bl	800f018 <_dtoa_r>
 800ddec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ddf0:	4605      	mov	r5, r0
 800ddf2:	d119      	bne.n	800de28 <__cvt+0x94>
 800ddf4:	f019 0f01 	tst.w	r9, #1
 800ddf8:	d00e      	beq.n	800de18 <__cvt+0x84>
 800ddfa:	eb00 0904 	add.w	r9, r0, r4
 800ddfe:	2200      	movs	r2, #0
 800de00:	2300      	movs	r3, #0
 800de02:	4630      	mov	r0, r6
 800de04:	4639      	mov	r1, r7
 800de06:	f7f2 fe87 	bl	8000b18 <__aeabi_dcmpeq>
 800de0a:	b108      	cbz	r0, 800de10 <__cvt+0x7c>
 800de0c:	f8cd 900c 	str.w	r9, [sp, #12]
 800de10:	2230      	movs	r2, #48	@ 0x30
 800de12:	9b03      	ldr	r3, [sp, #12]
 800de14:	454b      	cmp	r3, r9
 800de16:	d31e      	bcc.n	800de56 <__cvt+0xc2>
 800de18:	9b03      	ldr	r3, [sp, #12]
 800de1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de1c:	1b5b      	subs	r3, r3, r5
 800de1e:	4628      	mov	r0, r5
 800de20:	6013      	str	r3, [r2, #0]
 800de22:	b004      	add	sp, #16
 800de24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800de2c:	eb00 0904 	add.w	r9, r0, r4
 800de30:	d1e5      	bne.n	800ddfe <__cvt+0x6a>
 800de32:	7803      	ldrb	r3, [r0, #0]
 800de34:	2b30      	cmp	r3, #48	@ 0x30
 800de36:	d10a      	bne.n	800de4e <__cvt+0xba>
 800de38:	2200      	movs	r2, #0
 800de3a:	2300      	movs	r3, #0
 800de3c:	4630      	mov	r0, r6
 800de3e:	4639      	mov	r1, r7
 800de40:	f7f2 fe6a 	bl	8000b18 <__aeabi_dcmpeq>
 800de44:	b918      	cbnz	r0, 800de4e <__cvt+0xba>
 800de46:	f1c4 0401 	rsb	r4, r4, #1
 800de4a:	f8ca 4000 	str.w	r4, [sl]
 800de4e:	f8da 3000 	ldr.w	r3, [sl]
 800de52:	4499      	add	r9, r3
 800de54:	e7d3      	b.n	800ddfe <__cvt+0x6a>
 800de56:	1c59      	adds	r1, r3, #1
 800de58:	9103      	str	r1, [sp, #12]
 800de5a:	701a      	strb	r2, [r3, #0]
 800de5c:	e7d9      	b.n	800de12 <__cvt+0x7e>

0800de5e <__exponent>:
 800de5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de60:	2900      	cmp	r1, #0
 800de62:	bfba      	itte	lt
 800de64:	4249      	neglt	r1, r1
 800de66:	232d      	movlt	r3, #45	@ 0x2d
 800de68:	232b      	movge	r3, #43	@ 0x2b
 800de6a:	2909      	cmp	r1, #9
 800de6c:	7002      	strb	r2, [r0, #0]
 800de6e:	7043      	strb	r3, [r0, #1]
 800de70:	dd29      	ble.n	800dec6 <__exponent+0x68>
 800de72:	f10d 0307 	add.w	r3, sp, #7
 800de76:	461d      	mov	r5, r3
 800de78:	270a      	movs	r7, #10
 800de7a:	461a      	mov	r2, r3
 800de7c:	fbb1 f6f7 	udiv	r6, r1, r7
 800de80:	fb07 1416 	mls	r4, r7, r6, r1
 800de84:	3430      	adds	r4, #48	@ 0x30
 800de86:	f802 4c01 	strb.w	r4, [r2, #-1]
 800de8a:	460c      	mov	r4, r1
 800de8c:	2c63      	cmp	r4, #99	@ 0x63
 800de8e:	f103 33ff 	add.w	r3, r3, #4294967295
 800de92:	4631      	mov	r1, r6
 800de94:	dcf1      	bgt.n	800de7a <__exponent+0x1c>
 800de96:	3130      	adds	r1, #48	@ 0x30
 800de98:	1e94      	subs	r4, r2, #2
 800de9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800de9e:	1c41      	adds	r1, r0, #1
 800dea0:	4623      	mov	r3, r4
 800dea2:	42ab      	cmp	r3, r5
 800dea4:	d30a      	bcc.n	800debc <__exponent+0x5e>
 800dea6:	f10d 0309 	add.w	r3, sp, #9
 800deaa:	1a9b      	subs	r3, r3, r2
 800deac:	42ac      	cmp	r4, r5
 800deae:	bf88      	it	hi
 800deb0:	2300      	movhi	r3, #0
 800deb2:	3302      	adds	r3, #2
 800deb4:	4403      	add	r3, r0
 800deb6:	1a18      	subs	r0, r3, r0
 800deb8:	b003      	add	sp, #12
 800deba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800debc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dec0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dec4:	e7ed      	b.n	800dea2 <__exponent+0x44>
 800dec6:	2330      	movs	r3, #48	@ 0x30
 800dec8:	3130      	adds	r1, #48	@ 0x30
 800deca:	7083      	strb	r3, [r0, #2]
 800decc:	70c1      	strb	r1, [r0, #3]
 800dece:	1d03      	adds	r3, r0, #4
 800ded0:	e7f1      	b.n	800deb6 <__exponent+0x58>
	...

0800ded4 <_printf_float>:
 800ded4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded8:	b08d      	sub	sp, #52	@ 0x34
 800deda:	460c      	mov	r4, r1
 800dedc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dee0:	4616      	mov	r6, r2
 800dee2:	461f      	mov	r7, r3
 800dee4:	4605      	mov	r5, r0
 800dee6:	f000 ff5d 	bl	800eda4 <_localeconv_r>
 800deea:	6803      	ldr	r3, [r0, #0]
 800deec:	9304      	str	r3, [sp, #16]
 800deee:	4618      	mov	r0, r3
 800def0:	f7f2 f9e6 	bl	80002c0 <strlen>
 800def4:	2300      	movs	r3, #0
 800def6:	930a      	str	r3, [sp, #40]	@ 0x28
 800def8:	f8d8 3000 	ldr.w	r3, [r8]
 800defc:	9005      	str	r0, [sp, #20]
 800defe:	3307      	adds	r3, #7
 800df00:	f023 0307 	bic.w	r3, r3, #7
 800df04:	f103 0208 	add.w	r2, r3, #8
 800df08:	f894 a018 	ldrb.w	sl, [r4, #24]
 800df0c:	f8d4 b000 	ldr.w	fp, [r4]
 800df10:	f8c8 2000 	str.w	r2, [r8]
 800df14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800df1c:	9307      	str	r3, [sp, #28]
 800df1e:	f8cd 8018 	str.w	r8, [sp, #24]
 800df22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800df26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df2a:	4b9c      	ldr	r3, [pc, #624]	@ (800e19c <_printf_float+0x2c8>)
 800df2c:	f04f 32ff 	mov.w	r2, #4294967295
 800df30:	f7f2 fe24 	bl	8000b7c <__aeabi_dcmpun>
 800df34:	bb70      	cbnz	r0, 800df94 <_printf_float+0xc0>
 800df36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df3a:	4b98      	ldr	r3, [pc, #608]	@ (800e19c <_printf_float+0x2c8>)
 800df3c:	f04f 32ff 	mov.w	r2, #4294967295
 800df40:	f7f2 fdfe 	bl	8000b40 <__aeabi_dcmple>
 800df44:	bb30      	cbnz	r0, 800df94 <_printf_float+0xc0>
 800df46:	2200      	movs	r2, #0
 800df48:	2300      	movs	r3, #0
 800df4a:	4640      	mov	r0, r8
 800df4c:	4649      	mov	r1, r9
 800df4e:	f7f2 fded 	bl	8000b2c <__aeabi_dcmplt>
 800df52:	b110      	cbz	r0, 800df5a <_printf_float+0x86>
 800df54:	232d      	movs	r3, #45	@ 0x2d
 800df56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df5a:	4a91      	ldr	r2, [pc, #580]	@ (800e1a0 <_printf_float+0x2cc>)
 800df5c:	4b91      	ldr	r3, [pc, #580]	@ (800e1a4 <_printf_float+0x2d0>)
 800df5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800df62:	bf94      	ite	ls
 800df64:	4690      	movls	r8, r2
 800df66:	4698      	movhi	r8, r3
 800df68:	2303      	movs	r3, #3
 800df6a:	6123      	str	r3, [r4, #16]
 800df6c:	f02b 0304 	bic.w	r3, fp, #4
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	f04f 0900 	mov.w	r9, #0
 800df76:	9700      	str	r7, [sp, #0]
 800df78:	4633      	mov	r3, r6
 800df7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800df7c:	4621      	mov	r1, r4
 800df7e:	4628      	mov	r0, r5
 800df80:	f000 f9d2 	bl	800e328 <_printf_common>
 800df84:	3001      	adds	r0, #1
 800df86:	f040 808d 	bne.w	800e0a4 <_printf_float+0x1d0>
 800df8a:	f04f 30ff 	mov.w	r0, #4294967295
 800df8e:	b00d      	add	sp, #52	@ 0x34
 800df90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df94:	4642      	mov	r2, r8
 800df96:	464b      	mov	r3, r9
 800df98:	4640      	mov	r0, r8
 800df9a:	4649      	mov	r1, r9
 800df9c:	f7f2 fdee 	bl	8000b7c <__aeabi_dcmpun>
 800dfa0:	b140      	cbz	r0, 800dfb4 <_printf_float+0xe0>
 800dfa2:	464b      	mov	r3, r9
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	bfbc      	itt	lt
 800dfa8:	232d      	movlt	r3, #45	@ 0x2d
 800dfaa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800dfae:	4a7e      	ldr	r2, [pc, #504]	@ (800e1a8 <_printf_float+0x2d4>)
 800dfb0:	4b7e      	ldr	r3, [pc, #504]	@ (800e1ac <_printf_float+0x2d8>)
 800dfb2:	e7d4      	b.n	800df5e <_printf_float+0x8a>
 800dfb4:	6863      	ldr	r3, [r4, #4]
 800dfb6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800dfba:	9206      	str	r2, [sp, #24]
 800dfbc:	1c5a      	adds	r2, r3, #1
 800dfbe:	d13b      	bne.n	800e038 <_printf_float+0x164>
 800dfc0:	2306      	movs	r3, #6
 800dfc2:	6063      	str	r3, [r4, #4]
 800dfc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800dfc8:	2300      	movs	r3, #0
 800dfca:	6022      	str	r2, [r4, #0]
 800dfcc:	9303      	str	r3, [sp, #12]
 800dfce:	ab0a      	add	r3, sp, #40	@ 0x28
 800dfd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dfd4:	ab09      	add	r3, sp, #36	@ 0x24
 800dfd6:	9300      	str	r3, [sp, #0]
 800dfd8:	6861      	ldr	r1, [r4, #4]
 800dfda:	ec49 8b10 	vmov	d0, r8, r9
 800dfde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f7ff fed6 	bl	800dd94 <__cvt>
 800dfe8:	9b06      	ldr	r3, [sp, #24]
 800dfea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dfec:	2b47      	cmp	r3, #71	@ 0x47
 800dfee:	4680      	mov	r8, r0
 800dff0:	d129      	bne.n	800e046 <_printf_float+0x172>
 800dff2:	1cc8      	adds	r0, r1, #3
 800dff4:	db02      	blt.n	800dffc <_printf_float+0x128>
 800dff6:	6863      	ldr	r3, [r4, #4]
 800dff8:	4299      	cmp	r1, r3
 800dffa:	dd41      	ble.n	800e080 <_printf_float+0x1ac>
 800dffc:	f1aa 0a02 	sub.w	sl, sl, #2
 800e000:	fa5f fa8a 	uxtb.w	sl, sl
 800e004:	3901      	subs	r1, #1
 800e006:	4652      	mov	r2, sl
 800e008:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e00c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e00e:	f7ff ff26 	bl	800de5e <__exponent>
 800e012:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e014:	1813      	adds	r3, r2, r0
 800e016:	2a01      	cmp	r2, #1
 800e018:	4681      	mov	r9, r0
 800e01a:	6123      	str	r3, [r4, #16]
 800e01c:	dc02      	bgt.n	800e024 <_printf_float+0x150>
 800e01e:	6822      	ldr	r2, [r4, #0]
 800e020:	07d2      	lsls	r2, r2, #31
 800e022:	d501      	bpl.n	800e028 <_printf_float+0x154>
 800e024:	3301      	adds	r3, #1
 800e026:	6123      	str	r3, [r4, #16]
 800e028:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d0a2      	beq.n	800df76 <_printf_float+0xa2>
 800e030:	232d      	movs	r3, #45	@ 0x2d
 800e032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e036:	e79e      	b.n	800df76 <_printf_float+0xa2>
 800e038:	9a06      	ldr	r2, [sp, #24]
 800e03a:	2a47      	cmp	r2, #71	@ 0x47
 800e03c:	d1c2      	bne.n	800dfc4 <_printf_float+0xf0>
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1c0      	bne.n	800dfc4 <_printf_float+0xf0>
 800e042:	2301      	movs	r3, #1
 800e044:	e7bd      	b.n	800dfc2 <_printf_float+0xee>
 800e046:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e04a:	d9db      	bls.n	800e004 <_printf_float+0x130>
 800e04c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e050:	d118      	bne.n	800e084 <_printf_float+0x1b0>
 800e052:	2900      	cmp	r1, #0
 800e054:	6863      	ldr	r3, [r4, #4]
 800e056:	dd0b      	ble.n	800e070 <_printf_float+0x19c>
 800e058:	6121      	str	r1, [r4, #16]
 800e05a:	b913      	cbnz	r3, 800e062 <_printf_float+0x18e>
 800e05c:	6822      	ldr	r2, [r4, #0]
 800e05e:	07d0      	lsls	r0, r2, #31
 800e060:	d502      	bpl.n	800e068 <_printf_float+0x194>
 800e062:	3301      	adds	r3, #1
 800e064:	440b      	add	r3, r1
 800e066:	6123      	str	r3, [r4, #16]
 800e068:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e06a:	f04f 0900 	mov.w	r9, #0
 800e06e:	e7db      	b.n	800e028 <_printf_float+0x154>
 800e070:	b913      	cbnz	r3, 800e078 <_printf_float+0x1a4>
 800e072:	6822      	ldr	r2, [r4, #0]
 800e074:	07d2      	lsls	r2, r2, #31
 800e076:	d501      	bpl.n	800e07c <_printf_float+0x1a8>
 800e078:	3302      	adds	r3, #2
 800e07a:	e7f4      	b.n	800e066 <_printf_float+0x192>
 800e07c:	2301      	movs	r3, #1
 800e07e:	e7f2      	b.n	800e066 <_printf_float+0x192>
 800e080:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e086:	4299      	cmp	r1, r3
 800e088:	db05      	blt.n	800e096 <_printf_float+0x1c2>
 800e08a:	6823      	ldr	r3, [r4, #0]
 800e08c:	6121      	str	r1, [r4, #16]
 800e08e:	07d8      	lsls	r0, r3, #31
 800e090:	d5ea      	bpl.n	800e068 <_printf_float+0x194>
 800e092:	1c4b      	adds	r3, r1, #1
 800e094:	e7e7      	b.n	800e066 <_printf_float+0x192>
 800e096:	2900      	cmp	r1, #0
 800e098:	bfd4      	ite	le
 800e09a:	f1c1 0202 	rsble	r2, r1, #2
 800e09e:	2201      	movgt	r2, #1
 800e0a0:	4413      	add	r3, r2
 800e0a2:	e7e0      	b.n	800e066 <_printf_float+0x192>
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	055a      	lsls	r2, r3, #21
 800e0a8:	d407      	bmi.n	800e0ba <_printf_float+0x1e6>
 800e0aa:	6923      	ldr	r3, [r4, #16]
 800e0ac:	4642      	mov	r2, r8
 800e0ae:	4631      	mov	r1, r6
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	47b8      	blx	r7
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	d12b      	bne.n	800e110 <_printf_float+0x23c>
 800e0b8:	e767      	b.n	800df8a <_printf_float+0xb6>
 800e0ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e0be:	f240 80dd 	bls.w	800e27c <_printf_float+0x3a8>
 800e0c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	f7f2 fd25 	bl	8000b18 <__aeabi_dcmpeq>
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d033      	beq.n	800e13a <_printf_float+0x266>
 800e0d2:	4a37      	ldr	r2, [pc, #220]	@ (800e1b0 <_printf_float+0x2dc>)
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	4631      	mov	r1, r6
 800e0d8:	4628      	mov	r0, r5
 800e0da:	47b8      	blx	r7
 800e0dc:	3001      	adds	r0, #1
 800e0de:	f43f af54 	beq.w	800df8a <_printf_float+0xb6>
 800e0e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e0e6:	4543      	cmp	r3, r8
 800e0e8:	db02      	blt.n	800e0f0 <_printf_float+0x21c>
 800e0ea:	6823      	ldr	r3, [r4, #0]
 800e0ec:	07d8      	lsls	r0, r3, #31
 800e0ee:	d50f      	bpl.n	800e110 <_printf_float+0x23c>
 800e0f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0f4:	4631      	mov	r1, r6
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	47b8      	blx	r7
 800e0fa:	3001      	adds	r0, #1
 800e0fc:	f43f af45 	beq.w	800df8a <_printf_float+0xb6>
 800e100:	f04f 0900 	mov.w	r9, #0
 800e104:	f108 38ff 	add.w	r8, r8, #4294967295
 800e108:	f104 0a1a 	add.w	sl, r4, #26
 800e10c:	45c8      	cmp	r8, r9
 800e10e:	dc09      	bgt.n	800e124 <_printf_float+0x250>
 800e110:	6823      	ldr	r3, [r4, #0]
 800e112:	079b      	lsls	r3, r3, #30
 800e114:	f100 8103 	bmi.w	800e31e <_printf_float+0x44a>
 800e118:	68e0      	ldr	r0, [r4, #12]
 800e11a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e11c:	4298      	cmp	r0, r3
 800e11e:	bfb8      	it	lt
 800e120:	4618      	movlt	r0, r3
 800e122:	e734      	b.n	800df8e <_printf_float+0xba>
 800e124:	2301      	movs	r3, #1
 800e126:	4652      	mov	r2, sl
 800e128:	4631      	mov	r1, r6
 800e12a:	4628      	mov	r0, r5
 800e12c:	47b8      	blx	r7
 800e12e:	3001      	adds	r0, #1
 800e130:	f43f af2b 	beq.w	800df8a <_printf_float+0xb6>
 800e134:	f109 0901 	add.w	r9, r9, #1
 800e138:	e7e8      	b.n	800e10c <_printf_float+0x238>
 800e13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	dc39      	bgt.n	800e1b4 <_printf_float+0x2e0>
 800e140:	4a1b      	ldr	r2, [pc, #108]	@ (800e1b0 <_printf_float+0x2dc>)
 800e142:	2301      	movs	r3, #1
 800e144:	4631      	mov	r1, r6
 800e146:	4628      	mov	r0, r5
 800e148:	47b8      	blx	r7
 800e14a:	3001      	adds	r0, #1
 800e14c:	f43f af1d 	beq.w	800df8a <_printf_float+0xb6>
 800e150:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e154:	ea59 0303 	orrs.w	r3, r9, r3
 800e158:	d102      	bne.n	800e160 <_printf_float+0x28c>
 800e15a:	6823      	ldr	r3, [r4, #0]
 800e15c:	07d9      	lsls	r1, r3, #31
 800e15e:	d5d7      	bpl.n	800e110 <_printf_float+0x23c>
 800e160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e164:	4631      	mov	r1, r6
 800e166:	4628      	mov	r0, r5
 800e168:	47b8      	blx	r7
 800e16a:	3001      	adds	r0, #1
 800e16c:	f43f af0d 	beq.w	800df8a <_printf_float+0xb6>
 800e170:	f04f 0a00 	mov.w	sl, #0
 800e174:	f104 0b1a 	add.w	fp, r4, #26
 800e178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e17a:	425b      	negs	r3, r3
 800e17c:	4553      	cmp	r3, sl
 800e17e:	dc01      	bgt.n	800e184 <_printf_float+0x2b0>
 800e180:	464b      	mov	r3, r9
 800e182:	e793      	b.n	800e0ac <_printf_float+0x1d8>
 800e184:	2301      	movs	r3, #1
 800e186:	465a      	mov	r2, fp
 800e188:	4631      	mov	r1, r6
 800e18a:	4628      	mov	r0, r5
 800e18c:	47b8      	blx	r7
 800e18e:	3001      	adds	r0, #1
 800e190:	f43f aefb 	beq.w	800df8a <_printf_float+0xb6>
 800e194:	f10a 0a01 	add.w	sl, sl, #1
 800e198:	e7ee      	b.n	800e178 <_printf_float+0x2a4>
 800e19a:	bf00      	nop
 800e19c:	7fefffff 	.word	0x7fefffff
 800e1a0:	08013444 	.word	0x08013444
 800e1a4:	08013448 	.word	0x08013448
 800e1a8:	0801344c 	.word	0x0801344c
 800e1ac:	08013450 	.word	0x08013450
 800e1b0:	08013454 	.word	0x08013454
 800e1b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e1b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e1ba:	4553      	cmp	r3, sl
 800e1bc:	bfa8      	it	ge
 800e1be:	4653      	movge	r3, sl
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	4699      	mov	r9, r3
 800e1c4:	dc36      	bgt.n	800e234 <_printf_float+0x360>
 800e1c6:	f04f 0b00 	mov.w	fp, #0
 800e1ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e1ce:	f104 021a 	add.w	r2, r4, #26
 800e1d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e1d4:	9306      	str	r3, [sp, #24]
 800e1d6:	eba3 0309 	sub.w	r3, r3, r9
 800e1da:	455b      	cmp	r3, fp
 800e1dc:	dc31      	bgt.n	800e242 <_printf_float+0x36e>
 800e1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1e0:	459a      	cmp	sl, r3
 800e1e2:	dc3a      	bgt.n	800e25a <_printf_float+0x386>
 800e1e4:	6823      	ldr	r3, [r4, #0]
 800e1e6:	07da      	lsls	r2, r3, #31
 800e1e8:	d437      	bmi.n	800e25a <_printf_float+0x386>
 800e1ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1ec:	ebaa 0903 	sub.w	r9, sl, r3
 800e1f0:	9b06      	ldr	r3, [sp, #24]
 800e1f2:	ebaa 0303 	sub.w	r3, sl, r3
 800e1f6:	4599      	cmp	r9, r3
 800e1f8:	bfa8      	it	ge
 800e1fa:	4699      	movge	r9, r3
 800e1fc:	f1b9 0f00 	cmp.w	r9, #0
 800e200:	dc33      	bgt.n	800e26a <_printf_float+0x396>
 800e202:	f04f 0800 	mov.w	r8, #0
 800e206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e20a:	f104 0b1a 	add.w	fp, r4, #26
 800e20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e210:	ebaa 0303 	sub.w	r3, sl, r3
 800e214:	eba3 0309 	sub.w	r3, r3, r9
 800e218:	4543      	cmp	r3, r8
 800e21a:	f77f af79 	ble.w	800e110 <_printf_float+0x23c>
 800e21e:	2301      	movs	r3, #1
 800e220:	465a      	mov	r2, fp
 800e222:	4631      	mov	r1, r6
 800e224:	4628      	mov	r0, r5
 800e226:	47b8      	blx	r7
 800e228:	3001      	adds	r0, #1
 800e22a:	f43f aeae 	beq.w	800df8a <_printf_float+0xb6>
 800e22e:	f108 0801 	add.w	r8, r8, #1
 800e232:	e7ec      	b.n	800e20e <_printf_float+0x33a>
 800e234:	4642      	mov	r2, r8
 800e236:	4631      	mov	r1, r6
 800e238:	4628      	mov	r0, r5
 800e23a:	47b8      	blx	r7
 800e23c:	3001      	adds	r0, #1
 800e23e:	d1c2      	bne.n	800e1c6 <_printf_float+0x2f2>
 800e240:	e6a3      	b.n	800df8a <_printf_float+0xb6>
 800e242:	2301      	movs	r3, #1
 800e244:	4631      	mov	r1, r6
 800e246:	4628      	mov	r0, r5
 800e248:	9206      	str	r2, [sp, #24]
 800e24a:	47b8      	blx	r7
 800e24c:	3001      	adds	r0, #1
 800e24e:	f43f ae9c 	beq.w	800df8a <_printf_float+0xb6>
 800e252:	9a06      	ldr	r2, [sp, #24]
 800e254:	f10b 0b01 	add.w	fp, fp, #1
 800e258:	e7bb      	b.n	800e1d2 <_printf_float+0x2fe>
 800e25a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e25e:	4631      	mov	r1, r6
 800e260:	4628      	mov	r0, r5
 800e262:	47b8      	blx	r7
 800e264:	3001      	adds	r0, #1
 800e266:	d1c0      	bne.n	800e1ea <_printf_float+0x316>
 800e268:	e68f      	b.n	800df8a <_printf_float+0xb6>
 800e26a:	9a06      	ldr	r2, [sp, #24]
 800e26c:	464b      	mov	r3, r9
 800e26e:	4442      	add	r2, r8
 800e270:	4631      	mov	r1, r6
 800e272:	4628      	mov	r0, r5
 800e274:	47b8      	blx	r7
 800e276:	3001      	adds	r0, #1
 800e278:	d1c3      	bne.n	800e202 <_printf_float+0x32e>
 800e27a:	e686      	b.n	800df8a <_printf_float+0xb6>
 800e27c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e280:	f1ba 0f01 	cmp.w	sl, #1
 800e284:	dc01      	bgt.n	800e28a <_printf_float+0x3b6>
 800e286:	07db      	lsls	r3, r3, #31
 800e288:	d536      	bpl.n	800e2f8 <_printf_float+0x424>
 800e28a:	2301      	movs	r3, #1
 800e28c:	4642      	mov	r2, r8
 800e28e:	4631      	mov	r1, r6
 800e290:	4628      	mov	r0, r5
 800e292:	47b8      	blx	r7
 800e294:	3001      	adds	r0, #1
 800e296:	f43f ae78 	beq.w	800df8a <_printf_float+0xb6>
 800e29a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e29e:	4631      	mov	r1, r6
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	47b8      	blx	r7
 800e2a4:	3001      	adds	r0, #1
 800e2a6:	f43f ae70 	beq.w	800df8a <_printf_float+0xb6>
 800e2aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2b6:	f7f2 fc2f 	bl	8000b18 <__aeabi_dcmpeq>
 800e2ba:	b9c0      	cbnz	r0, 800e2ee <_printf_float+0x41a>
 800e2bc:	4653      	mov	r3, sl
 800e2be:	f108 0201 	add.w	r2, r8, #1
 800e2c2:	4631      	mov	r1, r6
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	47b8      	blx	r7
 800e2c8:	3001      	adds	r0, #1
 800e2ca:	d10c      	bne.n	800e2e6 <_printf_float+0x412>
 800e2cc:	e65d      	b.n	800df8a <_printf_float+0xb6>
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	465a      	mov	r2, fp
 800e2d2:	4631      	mov	r1, r6
 800e2d4:	4628      	mov	r0, r5
 800e2d6:	47b8      	blx	r7
 800e2d8:	3001      	adds	r0, #1
 800e2da:	f43f ae56 	beq.w	800df8a <_printf_float+0xb6>
 800e2de:	f108 0801 	add.w	r8, r8, #1
 800e2e2:	45d0      	cmp	r8, sl
 800e2e4:	dbf3      	blt.n	800e2ce <_printf_float+0x3fa>
 800e2e6:	464b      	mov	r3, r9
 800e2e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e2ec:	e6df      	b.n	800e0ae <_printf_float+0x1da>
 800e2ee:	f04f 0800 	mov.w	r8, #0
 800e2f2:	f104 0b1a 	add.w	fp, r4, #26
 800e2f6:	e7f4      	b.n	800e2e2 <_printf_float+0x40e>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	4642      	mov	r2, r8
 800e2fc:	e7e1      	b.n	800e2c2 <_printf_float+0x3ee>
 800e2fe:	2301      	movs	r3, #1
 800e300:	464a      	mov	r2, r9
 800e302:	4631      	mov	r1, r6
 800e304:	4628      	mov	r0, r5
 800e306:	47b8      	blx	r7
 800e308:	3001      	adds	r0, #1
 800e30a:	f43f ae3e 	beq.w	800df8a <_printf_float+0xb6>
 800e30e:	f108 0801 	add.w	r8, r8, #1
 800e312:	68e3      	ldr	r3, [r4, #12]
 800e314:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e316:	1a5b      	subs	r3, r3, r1
 800e318:	4543      	cmp	r3, r8
 800e31a:	dcf0      	bgt.n	800e2fe <_printf_float+0x42a>
 800e31c:	e6fc      	b.n	800e118 <_printf_float+0x244>
 800e31e:	f04f 0800 	mov.w	r8, #0
 800e322:	f104 0919 	add.w	r9, r4, #25
 800e326:	e7f4      	b.n	800e312 <_printf_float+0x43e>

0800e328 <_printf_common>:
 800e328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e32c:	4616      	mov	r6, r2
 800e32e:	4698      	mov	r8, r3
 800e330:	688a      	ldr	r2, [r1, #8]
 800e332:	690b      	ldr	r3, [r1, #16]
 800e334:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e338:	4293      	cmp	r3, r2
 800e33a:	bfb8      	it	lt
 800e33c:	4613      	movlt	r3, r2
 800e33e:	6033      	str	r3, [r6, #0]
 800e340:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e344:	4607      	mov	r7, r0
 800e346:	460c      	mov	r4, r1
 800e348:	b10a      	cbz	r2, 800e34e <_printf_common+0x26>
 800e34a:	3301      	adds	r3, #1
 800e34c:	6033      	str	r3, [r6, #0]
 800e34e:	6823      	ldr	r3, [r4, #0]
 800e350:	0699      	lsls	r1, r3, #26
 800e352:	bf42      	ittt	mi
 800e354:	6833      	ldrmi	r3, [r6, #0]
 800e356:	3302      	addmi	r3, #2
 800e358:	6033      	strmi	r3, [r6, #0]
 800e35a:	6825      	ldr	r5, [r4, #0]
 800e35c:	f015 0506 	ands.w	r5, r5, #6
 800e360:	d106      	bne.n	800e370 <_printf_common+0x48>
 800e362:	f104 0a19 	add.w	sl, r4, #25
 800e366:	68e3      	ldr	r3, [r4, #12]
 800e368:	6832      	ldr	r2, [r6, #0]
 800e36a:	1a9b      	subs	r3, r3, r2
 800e36c:	42ab      	cmp	r3, r5
 800e36e:	dc26      	bgt.n	800e3be <_printf_common+0x96>
 800e370:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e374:	6822      	ldr	r2, [r4, #0]
 800e376:	3b00      	subs	r3, #0
 800e378:	bf18      	it	ne
 800e37a:	2301      	movne	r3, #1
 800e37c:	0692      	lsls	r2, r2, #26
 800e37e:	d42b      	bmi.n	800e3d8 <_printf_common+0xb0>
 800e380:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e384:	4641      	mov	r1, r8
 800e386:	4638      	mov	r0, r7
 800e388:	47c8      	blx	r9
 800e38a:	3001      	adds	r0, #1
 800e38c:	d01e      	beq.n	800e3cc <_printf_common+0xa4>
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	6922      	ldr	r2, [r4, #16]
 800e392:	f003 0306 	and.w	r3, r3, #6
 800e396:	2b04      	cmp	r3, #4
 800e398:	bf02      	ittt	eq
 800e39a:	68e5      	ldreq	r5, [r4, #12]
 800e39c:	6833      	ldreq	r3, [r6, #0]
 800e39e:	1aed      	subeq	r5, r5, r3
 800e3a0:	68a3      	ldr	r3, [r4, #8]
 800e3a2:	bf0c      	ite	eq
 800e3a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e3a8:	2500      	movne	r5, #0
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	bfc4      	itt	gt
 800e3ae:	1a9b      	subgt	r3, r3, r2
 800e3b0:	18ed      	addgt	r5, r5, r3
 800e3b2:	2600      	movs	r6, #0
 800e3b4:	341a      	adds	r4, #26
 800e3b6:	42b5      	cmp	r5, r6
 800e3b8:	d11a      	bne.n	800e3f0 <_printf_common+0xc8>
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	e008      	b.n	800e3d0 <_printf_common+0xa8>
 800e3be:	2301      	movs	r3, #1
 800e3c0:	4652      	mov	r2, sl
 800e3c2:	4641      	mov	r1, r8
 800e3c4:	4638      	mov	r0, r7
 800e3c6:	47c8      	blx	r9
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	d103      	bne.n	800e3d4 <_printf_common+0xac>
 800e3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3d4:	3501      	adds	r5, #1
 800e3d6:	e7c6      	b.n	800e366 <_printf_common+0x3e>
 800e3d8:	18e1      	adds	r1, r4, r3
 800e3da:	1c5a      	adds	r2, r3, #1
 800e3dc:	2030      	movs	r0, #48	@ 0x30
 800e3de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e3e2:	4422      	add	r2, r4
 800e3e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e3e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e3ec:	3302      	adds	r3, #2
 800e3ee:	e7c7      	b.n	800e380 <_printf_common+0x58>
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	4622      	mov	r2, r4
 800e3f4:	4641      	mov	r1, r8
 800e3f6:	4638      	mov	r0, r7
 800e3f8:	47c8      	blx	r9
 800e3fa:	3001      	adds	r0, #1
 800e3fc:	d0e6      	beq.n	800e3cc <_printf_common+0xa4>
 800e3fe:	3601      	adds	r6, #1
 800e400:	e7d9      	b.n	800e3b6 <_printf_common+0x8e>
	...

0800e404 <_printf_i>:
 800e404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e408:	7e0f      	ldrb	r7, [r1, #24]
 800e40a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e40c:	2f78      	cmp	r7, #120	@ 0x78
 800e40e:	4691      	mov	r9, r2
 800e410:	4680      	mov	r8, r0
 800e412:	460c      	mov	r4, r1
 800e414:	469a      	mov	sl, r3
 800e416:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e41a:	d807      	bhi.n	800e42c <_printf_i+0x28>
 800e41c:	2f62      	cmp	r7, #98	@ 0x62
 800e41e:	d80a      	bhi.n	800e436 <_printf_i+0x32>
 800e420:	2f00      	cmp	r7, #0
 800e422:	f000 80d2 	beq.w	800e5ca <_printf_i+0x1c6>
 800e426:	2f58      	cmp	r7, #88	@ 0x58
 800e428:	f000 80b9 	beq.w	800e59e <_printf_i+0x19a>
 800e42c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e430:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e434:	e03a      	b.n	800e4ac <_printf_i+0xa8>
 800e436:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e43a:	2b15      	cmp	r3, #21
 800e43c:	d8f6      	bhi.n	800e42c <_printf_i+0x28>
 800e43e:	a101      	add	r1, pc, #4	@ (adr r1, 800e444 <_printf_i+0x40>)
 800e440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e444:	0800e49d 	.word	0x0800e49d
 800e448:	0800e4b1 	.word	0x0800e4b1
 800e44c:	0800e42d 	.word	0x0800e42d
 800e450:	0800e42d 	.word	0x0800e42d
 800e454:	0800e42d 	.word	0x0800e42d
 800e458:	0800e42d 	.word	0x0800e42d
 800e45c:	0800e4b1 	.word	0x0800e4b1
 800e460:	0800e42d 	.word	0x0800e42d
 800e464:	0800e42d 	.word	0x0800e42d
 800e468:	0800e42d 	.word	0x0800e42d
 800e46c:	0800e42d 	.word	0x0800e42d
 800e470:	0800e5b1 	.word	0x0800e5b1
 800e474:	0800e4db 	.word	0x0800e4db
 800e478:	0800e56b 	.word	0x0800e56b
 800e47c:	0800e42d 	.word	0x0800e42d
 800e480:	0800e42d 	.word	0x0800e42d
 800e484:	0800e5d3 	.word	0x0800e5d3
 800e488:	0800e42d 	.word	0x0800e42d
 800e48c:	0800e4db 	.word	0x0800e4db
 800e490:	0800e42d 	.word	0x0800e42d
 800e494:	0800e42d 	.word	0x0800e42d
 800e498:	0800e573 	.word	0x0800e573
 800e49c:	6833      	ldr	r3, [r6, #0]
 800e49e:	1d1a      	adds	r2, r3, #4
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	6032      	str	r2, [r6, #0]
 800e4a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e4a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	e09d      	b.n	800e5ec <_printf_i+0x1e8>
 800e4b0:	6833      	ldr	r3, [r6, #0]
 800e4b2:	6820      	ldr	r0, [r4, #0]
 800e4b4:	1d19      	adds	r1, r3, #4
 800e4b6:	6031      	str	r1, [r6, #0]
 800e4b8:	0606      	lsls	r6, r0, #24
 800e4ba:	d501      	bpl.n	800e4c0 <_printf_i+0xbc>
 800e4bc:	681d      	ldr	r5, [r3, #0]
 800e4be:	e003      	b.n	800e4c8 <_printf_i+0xc4>
 800e4c0:	0645      	lsls	r5, r0, #25
 800e4c2:	d5fb      	bpl.n	800e4bc <_printf_i+0xb8>
 800e4c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e4c8:	2d00      	cmp	r5, #0
 800e4ca:	da03      	bge.n	800e4d4 <_printf_i+0xd0>
 800e4cc:	232d      	movs	r3, #45	@ 0x2d
 800e4ce:	426d      	negs	r5, r5
 800e4d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4d4:	4859      	ldr	r0, [pc, #356]	@ (800e63c <_printf_i+0x238>)
 800e4d6:	230a      	movs	r3, #10
 800e4d8:	e011      	b.n	800e4fe <_printf_i+0xfa>
 800e4da:	6821      	ldr	r1, [r4, #0]
 800e4dc:	6833      	ldr	r3, [r6, #0]
 800e4de:	0608      	lsls	r0, r1, #24
 800e4e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e4e4:	d402      	bmi.n	800e4ec <_printf_i+0xe8>
 800e4e6:	0649      	lsls	r1, r1, #25
 800e4e8:	bf48      	it	mi
 800e4ea:	b2ad      	uxthmi	r5, r5
 800e4ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800e4ee:	4853      	ldr	r0, [pc, #332]	@ (800e63c <_printf_i+0x238>)
 800e4f0:	6033      	str	r3, [r6, #0]
 800e4f2:	bf14      	ite	ne
 800e4f4:	230a      	movne	r3, #10
 800e4f6:	2308      	moveq	r3, #8
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e4fe:	6866      	ldr	r6, [r4, #4]
 800e500:	60a6      	str	r6, [r4, #8]
 800e502:	2e00      	cmp	r6, #0
 800e504:	bfa2      	ittt	ge
 800e506:	6821      	ldrge	r1, [r4, #0]
 800e508:	f021 0104 	bicge.w	r1, r1, #4
 800e50c:	6021      	strge	r1, [r4, #0]
 800e50e:	b90d      	cbnz	r5, 800e514 <_printf_i+0x110>
 800e510:	2e00      	cmp	r6, #0
 800e512:	d04b      	beq.n	800e5ac <_printf_i+0x1a8>
 800e514:	4616      	mov	r6, r2
 800e516:	fbb5 f1f3 	udiv	r1, r5, r3
 800e51a:	fb03 5711 	mls	r7, r3, r1, r5
 800e51e:	5dc7      	ldrb	r7, [r0, r7]
 800e520:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e524:	462f      	mov	r7, r5
 800e526:	42bb      	cmp	r3, r7
 800e528:	460d      	mov	r5, r1
 800e52a:	d9f4      	bls.n	800e516 <_printf_i+0x112>
 800e52c:	2b08      	cmp	r3, #8
 800e52e:	d10b      	bne.n	800e548 <_printf_i+0x144>
 800e530:	6823      	ldr	r3, [r4, #0]
 800e532:	07df      	lsls	r7, r3, #31
 800e534:	d508      	bpl.n	800e548 <_printf_i+0x144>
 800e536:	6923      	ldr	r3, [r4, #16]
 800e538:	6861      	ldr	r1, [r4, #4]
 800e53a:	4299      	cmp	r1, r3
 800e53c:	bfde      	ittt	le
 800e53e:	2330      	movle	r3, #48	@ 0x30
 800e540:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e544:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e548:	1b92      	subs	r2, r2, r6
 800e54a:	6122      	str	r2, [r4, #16]
 800e54c:	f8cd a000 	str.w	sl, [sp]
 800e550:	464b      	mov	r3, r9
 800e552:	aa03      	add	r2, sp, #12
 800e554:	4621      	mov	r1, r4
 800e556:	4640      	mov	r0, r8
 800e558:	f7ff fee6 	bl	800e328 <_printf_common>
 800e55c:	3001      	adds	r0, #1
 800e55e:	d14a      	bne.n	800e5f6 <_printf_i+0x1f2>
 800e560:	f04f 30ff 	mov.w	r0, #4294967295
 800e564:	b004      	add	sp, #16
 800e566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e56a:	6823      	ldr	r3, [r4, #0]
 800e56c:	f043 0320 	orr.w	r3, r3, #32
 800e570:	6023      	str	r3, [r4, #0]
 800e572:	4833      	ldr	r0, [pc, #204]	@ (800e640 <_printf_i+0x23c>)
 800e574:	2778      	movs	r7, #120	@ 0x78
 800e576:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e57a:	6823      	ldr	r3, [r4, #0]
 800e57c:	6831      	ldr	r1, [r6, #0]
 800e57e:	061f      	lsls	r7, r3, #24
 800e580:	f851 5b04 	ldr.w	r5, [r1], #4
 800e584:	d402      	bmi.n	800e58c <_printf_i+0x188>
 800e586:	065f      	lsls	r7, r3, #25
 800e588:	bf48      	it	mi
 800e58a:	b2ad      	uxthmi	r5, r5
 800e58c:	6031      	str	r1, [r6, #0]
 800e58e:	07d9      	lsls	r1, r3, #31
 800e590:	bf44      	itt	mi
 800e592:	f043 0320 	orrmi.w	r3, r3, #32
 800e596:	6023      	strmi	r3, [r4, #0]
 800e598:	b11d      	cbz	r5, 800e5a2 <_printf_i+0x19e>
 800e59a:	2310      	movs	r3, #16
 800e59c:	e7ac      	b.n	800e4f8 <_printf_i+0xf4>
 800e59e:	4827      	ldr	r0, [pc, #156]	@ (800e63c <_printf_i+0x238>)
 800e5a0:	e7e9      	b.n	800e576 <_printf_i+0x172>
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	f023 0320 	bic.w	r3, r3, #32
 800e5a8:	6023      	str	r3, [r4, #0]
 800e5aa:	e7f6      	b.n	800e59a <_printf_i+0x196>
 800e5ac:	4616      	mov	r6, r2
 800e5ae:	e7bd      	b.n	800e52c <_printf_i+0x128>
 800e5b0:	6833      	ldr	r3, [r6, #0]
 800e5b2:	6825      	ldr	r5, [r4, #0]
 800e5b4:	6961      	ldr	r1, [r4, #20]
 800e5b6:	1d18      	adds	r0, r3, #4
 800e5b8:	6030      	str	r0, [r6, #0]
 800e5ba:	062e      	lsls	r6, r5, #24
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	d501      	bpl.n	800e5c4 <_printf_i+0x1c0>
 800e5c0:	6019      	str	r1, [r3, #0]
 800e5c2:	e002      	b.n	800e5ca <_printf_i+0x1c6>
 800e5c4:	0668      	lsls	r0, r5, #25
 800e5c6:	d5fb      	bpl.n	800e5c0 <_printf_i+0x1bc>
 800e5c8:	8019      	strh	r1, [r3, #0]
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	6123      	str	r3, [r4, #16]
 800e5ce:	4616      	mov	r6, r2
 800e5d0:	e7bc      	b.n	800e54c <_printf_i+0x148>
 800e5d2:	6833      	ldr	r3, [r6, #0]
 800e5d4:	1d1a      	adds	r2, r3, #4
 800e5d6:	6032      	str	r2, [r6, #0]
 800e5d8:	681e      	ldr	r6, [r3, #0]
 800e5da:	6862      	ldr	r2, [r4, #4]
 800e5dc:	2100      	movs	r1, #0
 800e5de:	4630      	mov	r0, r6
 800e5e0:	f7f1 fe1e 	bl	8000220 <memchr>
 800e5e4:	b108      	cbz	r0, 800e5ea <_printf_i+0x1e6>
 800e5e6:	1b80      	subs	r0, r0, r6
 800e5e8:	6060      	str	r0, [r4, #4]
 800e5ea:	6863      	ldr	r3, [r4, #4]
 800e5ec:	6123      	str	r3, [r4, #16]
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5f4:	e7aa      	b.n	800e54c <_printf_i+0x148>
 800e5f6:	6923      	ldr	r3, [r4, #16]
 800e5f8:	4632      	mov	r2, r6
 800e5fa:	4649      	mov	r1, r9
 800e5fc:	4640      	mov	r0, r8
 800e5fe:	47d0      	blx	sl
 800e600:	3001      	adds	r0, #1
 800e602:	d0ad      	beq.n	800e560 <_printf_i+0x15c>
 800e604:	6823      	ldr	r3, [r4, #0]
 800e606:	079b      	lsls	r3, r3, #30
 800e608:	d413      	bmi.n	800e632 <_printf_i+0x22e>
 800e60a:	68e0      	ldr	r0, [r4, #12]
 800e60c:	9b03      	ldr	r3, [sp, #12]
 800e60e:	4298      	cmp	r0, r3
 800e610:	bfb8      	it	lt
 800e612:	4618      	movlt	r0, r3
 800e614:	e7a6      	b.n	800e564 <_printf_i+0x160>
 800e616:	2301      	movs	r3, #1
 800e618:	4632      	mov	r2, r6
 800e61a:	4649      	mov	r1, r9
 800e61c:	4640      	mov	r0, r8
 800e61e:	47d0      	blx	sl
 800e620:	3001      	adds	r0, #1
 800e622:	d09d      	beq.n	800e560 <_printf_i+0x15c>
 800e624:	3501      	adds	r5, #1
 800e626:	68e3      	ldr	r3, [r4, #12]
 800e628:	9903      	ldr	r1, [sp, #12]
 800e62a:	1a5b      	subs	r3, r3, r1
 800e62c:	42ab      	cmp	r3, r5
 800e62e:	dcf2      	bgt.n	800e616 <_printf_i+0x212>
 800e630:	e7eb      	b.n	800e60a <_printf_i+0x206>
 800e632:	2500      	movs	r5, #0
 800e634:	f104 0619 	add.w	r6, r4, #25
 800e638:	e7f5      	b.n	800e626 <_printf_i+0x222>
 800e63a:	bf00      	nop
 800e63c:	08013456 	.word	0x08013456
 800e640:	08013467 	.word	0x08013467

0800e644 <_scanf_float>:
 800e644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e648:	b087      	sub	sp, #28
 800e64a:	4617      	mov	r7, r2
 800e64c:	9303      	str	r3, [sp, #12]
 800e64e:	688b      	ldr	r3, [r1, #8]
 800e650:	1e5a      	subs	r2, r3, #1
 800e652:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e656:	bf81      	itttt	hi
 800e658:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e65c:	eb03 0b05 	addhi.w	fp, r3, r5
 800e660:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e664:	608b      	strhi	r3, [r1, #8]
 800e666:	680b      	ldr	r3, [r1, #0]
 800e668:	460a      	mov	r2, r1
 800e66a:	f04f 0500 	mov.w	r5, #0
 800e66e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e672:	f842 3b1c 	str.w	r3, [r2], #28
 800e676:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e67a:	4680      	mov	r8, r0
 800e67c:	460c      	mov	r4, r1
 800e67e:	bf98      	it	ls
 800e680:	f04f 0b00 	movls.w	fp, #0
 800e684:	9201      	str	r2, [sp, #4]
 800e686:	4616      	mov	r6, r2
 800e688:	46aa      	mov	sl, r5
 800e68a:	46a9      	mov	r9, r5
 800e68c:	9502      	str	r5, [sp, #8]
 800e68e:	68a2      	ldr	r2, [r4, #8]
 800e690:	b152      	cbz	r2, 800e6a8 <_scanf_float+0x64>
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	2b4e      	cmp	r3, #78	@ 0x4e
 800e698:	d864      	bhi.n	800e764 <_scanf_float+0x120>
 800e69a:	2b40      	cmp	r3, #64	@ 0x40
 800e69c:	d83c      	bhi.n	800e718 <_scanf_float+0xd4>
 800e69e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e6a2:	b2c8      	uxtb	r0, r1
 800e6a4:	280e      	cmp	r0, #14
 800e6a6:	d93a      	bls.n	800e71e <_scanf_float+0xda>
 800e6a8:	f1b9 0f00 	cmp.w	r9, #0
 800e6ac:	d003      	beq.n	800e6b6 <_scanf_float+0x72>
 800e6ae:	6823      	ldr	r3, [r4, #0]
 800e6b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e6b4:	6023      	str	r3, [r4, #0]
 800e6b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6ba:	f1ba 0f01 	cmp.w	sl, #1
 800e6be:	f200 8117 	bhi.w	800e8f0 <_scanf_float+0x2ac>
 800e6c2:	9b01      	ldr	r3, [sp, #4]
 800e6c4:	429e      	cmp	r6, r3
 800e6c6:	f200 8108 	bhi.w	800e8da <_scanf_float+0x296>
 800e6ca:	2001      	movs	r0, #1
 800e6cc:	b007      	add	sp, #28
 800e6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e6d6:	2a0d      	cmp	r2, #13
 800e6d8:	d8e6      	bhi.n	800e6a8 <_scanf_float+0x64>
 800e6da:	a101      	add	r1, pc, #4	@ (adr r1, 800e6e0 <_scanf_float+0x9c>)
 800e6dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e6e0:	0800e827 	.word	0x0800e827
 800e6e4:	0800e6a9 	.word	0x0800e6a9
 800e6e8:	0800e6a9 	.word	0x0800e6a9
 800e6ec:	0800e6a9 	.word	0x0800e6a9
 800e6f0:	0800e887 	.word	0x0800e887
 800e6f4:	0800e85f 	.word	0x0800e85f
 800e6f8:	0800e6a9 	.word	0x0800e6a9
 800e6fc:	0800e6a9 	.word	0x0800e6a9
 800e700:	0800e835 	.word	0x0800e835
 800e704:	0800e6a9 	.word	0x0800e6a9
 800e708:	0800e6a9 	.word	0x0800e6a9
 800e70c:	0800e6a9 	.word	0x0800e6a9
 800e710:	0800e6a9 	.word	0x0800e6a9
 800e714:	0800e7ed 	.word	0x0800e7ed
 800e718:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e71c:	e7db      	b.n	800e6d6 <_scanf_float+0x92>
 800e71e:	290e      	cmp	r1, #14
 800e720:	d8c2      	bhi.n	800e6a8 <_scanf_float+0x64>
 800e722:	a001      	add	r0, pc, #4	@ (adr r0, 800e728 <_scanf_float+0xe4>)
 800e724:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e728:	0800e7dd 	.word	0x0800e7dd
 800e72c:	0800e6a9 	.word	0x0800e6a9
 800e730:	0800e7dd 	.word	0x0800e7dd
 800e734:	0800e873 	.word	0x0800e873
 800e738:	0800e6a9 	.word	0x0800e6a9
 800e73c:	0800e785 	.word	0x0800e785
 800e740:	0800e7c3 	.word	0x0800e7c3
 800e744:	0800e7c3 	.word	0x0800e7c3
 800e748:	0800e7c3 	.word	0x0800e7c3
 800e74c:	0800e7c3 	.word	0x0800e7c3
 800e750:	0800e7c3 	.word	0x0800e7c3
 800e754:	0800e7c3 	.word	0x0800e7c3
 800e758:	0800e7c3 	.word	0x0800e7c3
 800e75c:	0800e7c3 	.word	0x0800e7c3
 800e760:	0800e7c3 	.word	0x0800e7c3
 800e764:	2b6e      	cmp	r3, #110	@ 0x6e
 800e766:	d809      	bhi.n	800e77c <_scanf_float+0x138>
 800e768:	2b60      	cmp	r3, #96	@ 0x60
 800e76a:	d8b2      	bhi.n	800e6d2 <_scanf_float+0x8e>
 800e76c:	2b54      	cmp	r3, #84	@ 0x54
 800e76e:	d07b      	beq.n	800e868 <_scanf_float+0x224>
 800e770:	2b59      	cmp	r3, #89	@ 0x59
 800e772:	d199      	bne.n	800e6a8 <_scanf_float+0x64>
 800e774:	2d07      	cmp	r5, #7
 800e776:	d197      	bne.n	800e6a8 <_scanf_float+0x64>
 800e778:	2508      	movs	r5, #8
 800e77a:	e02c      	b.n	800e7d6 <_scanf_float+0x192>
 800e77c:	2b74      	cmp	r3, #116	@ 0x74
 800e77e:	d073      	beq.n	800e868 <_scanf_float+0x224>
 800e780:	2b79      	cmp	r3, #121	@ 0x79
 800e782:	e7f6      	b.n	800e772 <_scanf_float+0x12e>
 800e784:	6821      	ldr	r1, [r4, #0]
 800e786:	05c8      	lsls	r0, r1, #23
 800e788:	d51b      	bpl.n	800e7c2 <_scanf_float+0x17e>
 800e78a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e78e:	6021      	str	r1, [r4, #0]
 800e790:	f109 0901 	add.w	r9, r9, #1
 800e794:	f1bb 0f00 	cmp.w	fp, #0
 800e798:	d003      	beq.n	800e7a2 <_scanf_float+0x15e>
 800e79a:	3201      	adds	r2, #1
 800e79c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e7a0:	60a2      	str	r2, [r4, #8]
 800e7a2:	68a3      	ldr	r3, [r4, #8]
 800e7a4:	3b01      	subs	r3, #1
 800e7a6:	60a3      	str	r3, [r4, #8]
 800e7a8:	6923      	ldr	r3, [r4, #16]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	6123      	str	r3, [r4, #16]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	607b      	str	r3, [r7, #4]
 800e7b6:	f340 8087 	ble.w	800e8c8 <_scanf_float+0x284>
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	603b      	str	r3, [r7, #0]
 800e7c0:	e765      	b.n	800e68e <_scanf_float+0x4a>
 800e7c2:	eb1a 0105 	adds.w	r1, sl, r5
 800e7c6:	f47f af6f 	bne.w	800e6a8 <_scanf_float+0x64>
 800e7ca:	6822      	ldr	r2, [r4, #0]
 800e7cc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e7d0:	6022      	str	r2, [r4, #0]
 800e7d2:	460d      	mov	r5, r1
 800e7d4:	468a      	mov	sl, r1
 800e7d6:	f806 3b01 	strb.w	r3, [r6], #1
 800e7da:	e7e2      	b.n	800e7a2 <_scanf_float+0x15e>
 800e7dc:	6822      	ldr	r2, [r4, #0]
 800e7de:	0610      	lsls	r0, r2, #24
 800e7e0:	f57f af62 	bpl.w	800e6a8 <_scanf_float+0x64>
 800e7e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e7e8:	6022      	str	r2, [r4, #0]
 800e7ea:	e7f4      	b.n	800e7d6 <_scanf_float+0x192>
 800e7ec:	f1ba 0f00 	cmp.w	sl, #0
 800e7f0:	d10e      	bne.n	800e810 <_scanf_float+0x1cc>
 800e7f2:	f1b9 0f00 	cmp.w	r9, #0
 800e7f6:	d10e      	bne.n	800e816 <_scanf_float+0x1d2>
 800e7f8:	6822      	ldr	r2, [r4, #0]
 800e7fa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e7fe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e802:	d108      	bne.n	800e816 <_scanf_float+0x1d2>
 800e804:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e808:	6022      	str	r2, [r4, #0]
 800e80a:	f04f 0a01 	mov.w	sl, #1
 800e80e:	e7e2      	b.n	800e7d6 <_scanf_float+0x192>
 800e810:	f1ba 0f02 	cmp.w	sl, #2
 800e814:	d055      	beq.n	800e8c2 <_scanf_float+0x27e>
 800e816:	2d01      	cmp	r5, #1
 800e818:	d002      	beq.n	800e820 <_scanf_float+0x1dc>
 800e81a:	2d04      	cmp	r5, #4
 800e81c:	f47f af44 	bne.w	800e6a8 <_scanf_float+0x64>
 800e820:	3501      	adds	r5, #1
 800e822:	b2ed      	uxtb	r5, r5
 800e824:	e7d7      	b.n	800e7d6 <_scanf_float+0x192>
 800e826:	f1ba 0f01 	cmp.w	sl, #1
 800e82a:	f47f af3d 	bne.w	800e6a8 <_scanf_float+0x64>
 800e82e:	f04f 0a02 	mov.w	sl, #2
 800e832:	e7d0      	b.n	800e7d6 <_scanf_float+0x192>
 800e834:	b97d      	cbnz	r5, 800e856 <_scanf_float+0x212>
 800e836:	f1b9 0f00 	cmp.w	r9, #0
 800e83a:	f47f af38 	bne.w	800e6ae <_scanf_float+0x6a>
 800e83e:	6822      	ldr	r2, [r4, #0]
 800e840:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e844:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e848:	f040 8108 	bne.w	800ea5c <_scanf_float+0x418>
 800e84c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e850:	6022      	str	r2, [r4, #0]
 800e852:	2501      	movs	r5, #1
 800e854:	e7bf      	b.n	800e7d6 <_scanf_float+0x192>
 800e856:	2d03      	cmp	r5, #3
 800e858:	d0e2      	beq.n	800e820 <_scanf_float+0x1dc>
 800e85a:	2d05      	cmp	r5, #5
 800e85c:	e7de      	b.n	800e81c <_scanf_float+0x1d8>
 800e85e:	2d02      	cmp	r5, #2
 800e860:	f47f af22 	bne.w	800e6a8 <_scanf_float+0x64>
 800e864:	2503      	movs	r5, #3
 800e866:	e7b6      	b.n	800e7d6 <_scanf_float+0x192>
 800e868:	2d06      	cmp	r5, #6
 800e86a:	f47f af1d 	bne.w	800e6a8 <_scanf_float+0x64>
 800e86e:	2507      	movs	r5, #7
 800e870:	e7b1      	b.n	800e7d6 <_scanf_float+0x192>
 800e872:	6822      	ldr	r2, [r4, #0]
 800e874:	0591      	lsls	r1, r2, #22
 800e876:	f57f af17 	bpl.w	800e6a8 <_scanf_float+0x64>
 800e87a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e87e:	6022      	str	r2, [r4, #0]
 800e880:	f8cd 9008 	str.w	r9, [sp, #8]
 800e884:	e7a7      	b.n	800e7d6 <_scanf_float+0x192>
 800e886:	6822      	ldr	r2, [r4, #0]
 800e888:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e88c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e890:	d006      	beq.n	800e8a0 <_scanf_float+0x25c>
 800e892:	0550      	lsls	r0, r2, #21
 800e894:	f57f af08 	bpl.w	800e6a8 <_scanf_float+0x64>
 800e898:	f1b9 0f00 	cmp.w	r9, #0
 800e89c:	f000 80de 	beq.w	800ea5c <_scanf_float+0x418>
 800e8a0:	0591      	lsls	r1, r2, #22
 800e8a2:	bf58      	it	pl
 800e8a4:	9902      	ldrpl	r1, [sp, #8]
 800e8a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e8aa:	bf58      	it	pl
 800e8ac:	eba9 0101 	subpl.w	r1, r9, r1
 800e8b0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e8b4:	bf58      	it	pl
 800e8b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e8ba:	6022      	str	r2, [r4, #0]
 800e8bc:	f04f 0900 	mov.w	r9, #0
 800e8c0:	e789      	b.n	800e7d6 <_scanf_float+0x192>
 800e8c2:	f04f 0a03 	mov.w	sl, #3
 800e8c6:	e786      	b.n	800e7d6 <_scanf_float+0x192>
 800e8c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e8cc:	4639      	mov	r1, r7
 800e8ce:	4640      	mov	r0, r8
 800e8d0:	4798      	blx	r3
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	f43f aedb 	beq.w	800e68e <_scanf_float+0x4a>
 800e8d8:	e6e6      	b.n	800e6a8 <_scanf_float+0x64>
 800e8da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e8de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e8e2:	463a      	mov	r2, r7
 800e8e4:	4640      	mov	r0, r8
 800e8e6:	4798      	blx	r3
 800e8e8:	6923      	ldr	r3, [r4, #16]
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	6123      	str	r3, [r4, #16]
 800e8ee:	e6e8      	b.n	800e6c2 <_scanf_float+0x7e>
 800e8f0:	1e6b      	subs	r3, r5, #1
 800e8f2:	2b06      	cmp	r3, #6
 800e8f4:	d824      	bhi.n	800e940 <_scanf_float+0x2fc>
 800e8f6:	2d02      	cmp	r5, #2
 800e8f8:	d836      	bhi.n	800e968 <_scanf_float+0x324>
 800e8fa:	9b01      	ldr	r3, [sp, #4]
 800e8fc:	429e      	cmp	r6, r3
 800e8fe:	f67f aee4 	bls.w	800e6ca <_scanf_float+0x86>
 800e902:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e906:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e90a:	463a      	mov	r2, r7
 800e90c:	4640      	mov	r0, r8
 800e90e:	4798      	blx	r3
 800e910:	6923      	ldr	r3, [r4, #16]
 800e912:	3b01      	subs	r3, #1
 800e914:	6123      	str	r3, [r4, #16]
 800e916:	e7f0      	b.n	800e8fa <_scanf_float+0x2b6>
 800e918:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e91c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e920:	463a      	mov	r2, r7
 800e922:	4640      	mov	r0, r8
 800e924:	4798      	blx	r3
 800e926:	6923      	ldr	r3, [r4, #16]
 800e928:	3b01      	subs	r3, #1
 800e92a:	6123      	str	r3, [r4, #16]
 800e92c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e930:	fa5f fa8a 	uxtb.w	sl, sl
 800e934:	f1ba 0f02 	cmp.w	sl, #2
 800e938:	d1ee      	bne.n	800e918 <_scanf_float+0x2d4>
 800e93a:	3d03      	subs	r5, #3
 800e93c:	b2ed      	uxtb	r5, r5
 800e93e:	1b76      	subs	r6, r6, r5
 800e940:	6823      	ldr	r3, [r4, #0]
 800e942:	05da      	lsls	r2, r3, #23
 800e944:	d530      	bpl.n	800e9a8 <_scanf_float+0x364>
 800e946:	055b      	lsls	r3, r3, #21
 800e948:	d511      	bpl.n	800e96e <_scanf_float+0x32a>
 800e94a:	9b01      	ldr	r3, [sp, #4]
 800e94c:	429e      	cmp	r6, r3
 800e94e:	f67f aebc 	bls.w	800e6ca <_scanf_float+0x86>
 800e952:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e956:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e95a:	463a      	mov	r2, r7
 800e95c:	4640      	mov	r0, r8
 800e95e:	4798      	blx	r3
 800e960:	6923      	ldr	r3, [r4, #16]
 800e962:	3b01      	subs	r3, #1
 800e964:	6123      	str	r3, [r4, #16]
 800e966:	e7f0      	b.n	800e94a <_scanf_float+0x306>
 800e968:	46aa      	mov	sl, r5
 800e96a:	46b3      	mov	fp, r6
 800e96c:	e7de      	b.n	800e92c <_scanf_float+0x2e8>
 800e96e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e972:	6923      	ldr	r3, [r4, #16]
 800e974:	2965      	cmp	r1, #101	@ 0x65
 800e976:	f103 33ff 	add.w	r3, r3, #4294967295
 800e97a:	f106 35ff 	add.w	r5, r6, #4294967295
 800e97e:	6123      	str	r3, [r4, #16]
 800e980:	d00c      	beq.n	800e99c <_scanf_float+0x358>
 800e982:	2945      	cmp	r1, #69	@ 0x45
 800e984:	d00a      	beq.n	800e99c <_scanf_float+0x358>
 800e986:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e98a:	463a      	mov	r2, r7
 800e98c:	4640      	mov	r0, r8
 800e98e:	4798      	blx	r3
 800e990:	6923      	ldr	r3, [r4, #16]
 800e992:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e996:	3b01      	subs	r3, #1
 800e998:	1eb5      	subs	r5, r6, #2
 800e99a:	6123      	str	r3, [r4, #16]
 800e99c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e9a0:	463a      	mov	r2, r7
 800e9a2:	4640      	mov	r0, r8
 800e9a4:	4798      	blx	r3
 800e9a6:	462e      	mov	r6, r5
 800e9a8:	6822      	ldr	r2, [r4, #0]
 800e9aa:	f012 0210 	ands.w	r2, r2, #16
 800e9ae:	d001      	beq.n	800e9b4 <_scanf_float+0x370>
 800e9b0:	2000      	movs	r0, #0
 800e9b2:	e68b      	b.n	800e6cc <_scanf_float+0x88>
 800e9b4:	7032      	strb	r2, [r6, #0]
 800e9b6:	6823      	ldr	r3, [r4, #0]
 800e9b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e9bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e9c0:	d11c      	bne.n	800e9fc <_scanf_float+0x3b8>
 800e9c2:	9b02      	ldr	r3, [sp, #8]
 800e9c4:	454b      	cmp	r3, r9
 800e9c6:	eba3 0209 	sub.w	r2, r3, r9
 800e9ca:	d123      	bne.n	800ea14 <_scanf_float+0x3d0>
 800e9cc:	9901      	ldr	r1, [sp, #4]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	4640      	mov	r0, r8
 800e9d2:	f002 fbe5 	bl	80111a0 <_strtod_r>
 800e9d6:	9b03      	ldr	r3, [sp, #12]
 800e9d8:	6821      	ldr	r1, [r4, #0]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f011 0f02 	tst.w	r1, #2
 800e9e0:	ec57 6b10 	vmov	r6, r7, d0
 800e9e4:	f103 0204 	add.w	r2, r3, #4
 800e9e8:	d01f      	beq.n	800ea2a <_scanf_float+0x3e6>
 800e9ea:	9903      	ldr	r1, [sp, #12]
 800e9ec:	600a      	str	r2, [r1, #0]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	e9c3 6700 	strd	r6, r7, [r3]
 800e9f4:	68e3      	ldr	r3, [r4, #12]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	60e3      	str	r3, [r4, #12]
 800e9fa:	e7d9      	b.n	800e9b0 <_scanf_float+0x36c>
 800e9fc:	9b04      	ldr	r3, [sp, #16]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d0e4      	beq.n	800e9cc <_scanf_float+0x388>
 800ea02:	9905      	ldr	r1, [sp, #20]
 800ea04:	230a      	movs	r3, #10
 800ea06:	3101      	adds	r1, #1
 800ea08:	4640      	mov	r0, r8
 800ea0a:	f002 fc49 	bl	80112a0 <_strtol_r>
 800ea0e:	9b04      	ldr	r3, [sp, #16]
 800ea10:	9e05      	ldr	r6, [sp, #20]
 800ea12:	1ac2      	subs	r2, r0, r3
 800ea14:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ea18:	429e      	cmp	r6, r3
 800ea1a:	bf28      	it	cs
 800ea1c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ea20:	4910      	ldr	r1, [pc, #64]	@ (800ea64 <_scanf_float+0x420>)
 800ea22:	4630      	mov	r0, r6
 800ea24:	f000 f8f6 	bl	800ec14 <siprintf>
 800ea28:	e7d0      	b.n	800e9cc <_scanf_float+0x388>
 800ea2a:	f011 0f04 	tst.w	r1, #4
 800ea2e:	9903      	ldr	r1, [sp, #12]
 800ea30:	600a      	str	r2, [r1, #0]
 800ea32:	d1dc      	bne.n	800e9ee <_scanf_float+0x3aa>
 800ea34:	681d      	ldr	r5, [r3, #0]
 800ea36:	4632      	mov	r2, r6
 800ea38:	463b      	mov	r3, r7
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	4639      	mov	r1, r7
 800ea3e:	f7f2 f89d 	bl	8000b7c <__aeabi_dcmpun>
 800ea42:	b128      	cbz	r0, 800ea50 <_scanf_float+0x40c>
 800ea44:	4808      	ldr	r0, [pc, #32]	@ (800ea68 <_scanf_float+0x424>)
 800ea46:	f000 fa57 	bl	800eef8 <nanf>
 800ea4a:	ed85 0a00 	vstr	s0, [r5]
 800ea4e:	e7d1      	b.n	800e9f4 <_scanf_float+0x3b0>
 800ea50:	4630      	mov	r0, r6
 800ea52:	4639      	mov	r1, r7
 800ea54:	f7f2 f8f0 	bl	8000c38 <__aeabi_d2f>
 800ea58:	6028      	str	r0, [r5, #0]
 800ea5a:	e7cb      	b.n	800e9f4 <_scanf_float+0x3b0>
 800ea5c:	f04f 0900 	mov.w	r9, #0
 800ea60:	e629      	b.n	800e6b6 <_scanf_float+0x72>
 800ea62:	bf00      	nop
 800ea64:	08013478 	.word	0x08013478
 800ea68:	08013443 	.word	0x08013443

0800ea6c <std>:
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	b510      	push	{r4, lr}
 800ea70:	4604      	mov	r4, r0
 800ea72:	e9c0 3300 	strd	r3, r3, [r0]
 800ea76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea7a:	6083      	str	r3, [r0, #8]
 800ea7c:	8181      	strh	r1, [r0, #12]
 800ea7e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ea80:	81c2      	strh	r2, [r0, #14]
 800ea82:	6183      	str	r3, [r0, #24]
 800ea84:	4619      	mov	r1, r3
 800ea86:	2208      	movs	r2, #8
 800ea88:	305c      	adds	r0, #92	@ 0x5c
 800ea8a:	f000 f940 	bl	800ed0e <memset>
 800ea8e:	4b0d      	ldr	r3, [pc, #52]	@ (800eac4 <std+0x58>)
 800ea90:	6263      	str	r3, [r4, #36]	@ 0x24
 800ea92:	4b0d      	ldr	r3, [pc, #52]	@ (800eac8 <std+0x5c>)
 800ea94:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ea96:	4b0d      	ldr	r3, [pc, #52]	@ (800eacc <std+0x60>)
 800ea98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ea9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ead0 <std+0x64>)
 800ea9c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ea9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ead4 <std+0x68>)
 800eaa0:	6224      	str	r4, [r4, #32]
 800eaa2:	429c      	cmp	r4, r3
 800eaa4:	d006      	beq.n	800eab4 <std+0x48>
 800eaa6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800eaaa:	4294      	cmp	r4, r2
 800eaac:	d002      	beq.n	800eab4 <std+0x48>
 800eaae:	33d0      	adds	r3, #208	@ 0xd0
 800eab0:	429c      	cmp	r4, r3
 800eab2:	d105      	bne.n	800eac0 <std+0x54>
 800eab4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800eab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eabc:	f000 ba0a 	b.w	800eed4 <__retarget_lock_init_recursive>
 800eac0:	bd10      	pop	{r4, pc}
 800eac2:	bf00      	nop
 800eac4:	0800ec55 	.word	0x0800ec55
 800eac8:	0800ec77 	.word	0x0800ec77
 800eacc:	0800ecaf 	.word	0x0800ecaf
 800ead0:	0800ecd3 	.word	0x0800ecd3
 800ead4:	200005c0 	.word	0x200005c0

0800ead8 <stdio_exit_handler>:
 800ead8:	4a02      	ldr	r2, [pc, #8]	@ (800eae4 <stdio_exit_handler+0xc>)
 800eada:	4903      	ldr	r1, [pc, #12]	@ (800eae8 <stdio_exit_handler+0x10>)
 800eadc:	4803      	ldr	r0, [pc, #12]	@ (800eaec <stdio_exit_handler+0x14>)
 800eade:	f000 b87b 	b.w	800ebd8 <_fwalk_sglue>
 800eae2:	bf00      	nop
 800eae4:	2000000c 	.word	0x2000000c
 800eae8:	080118e1 	.word	0x080118e1
 800eaec:	2000001c 	.word	0x2000001c

0800eaf0 <cleanup_stdio>:
 800eaf0:	6841      	ldr	r1, [r0, #4]
 800eaf2:	4b0c      	ldr	r3, [pc, #48]	@ (800eb24 <cleanup_stdio+0x34>)
 800eaf4:	4299      	cmp	r1, r3
 800eaf6:	b510      	push	{r4, lr}
 800eaf8:	4604      	mov	r4, r0
 800eafa:	d001      	beq.n	800eb00 <cleanup_stdio+0x10>
 800eafc:	f002 fef0 	bl	80118e0 <_fflush_r>
 800eb00:	68a1      	ldr	r1, [r4, #8]
 800eb02:	4b09      	ldr	r3, [pc, #36]	@ (800eb28 <cleanup_stdio+0x38>)
 800eb04:	4299      	cmp	r1, r3
 800eb06:	d002      	beq.n	800eb0e <cleanup_stdio+0x1e>
 800eb08:	4620      	mov	r0, r4
 800eb0a:	f002 fee9 	bl	80118e0 <_fflush_r>
 800eb0e:	68e1      	ldr	r1, [r4, #12]
 800eb10:	4b06      	ldr	r3, [pc, #24]	@ (800eb2c <cleanup_stdio+0x3c>)
 800eb12:	4299      	cmp	r1, r3
 800eb14:	d004      	beq.n	800eb20 <cleanup_stdio+0x30>
 800eb16:	4620      	mov	r0, r4
 800eb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb1c:	f002 bee0 	b.w	80118e0 <_fflush_r>
 800eb20:	bd10      	pop	{r4, pc}
 800eb22:	bf00      	nop
 800eb24:	200005c0 	.word	0x200005c0
 800eb28:	20000628 	.word	0x20000628
 800eb2c:	20000690 	.word	0x20000690

0800eb30 <global_stdio_init.part.0>:
 800eb30:	b510      	push	{r4, lr}
 800eb32:	4b0b      	ldr	r3, [pc, #44]	@ (800eb60 <global_stdio_init.part.0+0x30>)
 800eb34:	4c0b      	ldr	r4, [pc, #44]	@ (800eb64 <global_stdio_init.part.0+0x34>)
 800eb36:	4a0c      	ldr	r2, [pc, #48]	@ (800eb68 <global_stdio_init.part.0+0x38>)
 800eb38:	601a      	str	r2, [r3, #0]
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	2104      	movs	r1, #4
 800eb40:	f7ff ff94 	bl	800ea6c <std>
 800eb44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eb48:	2201      	movs	r2, #1
 800eb4a:	2109      	movs	r1, #9
 800eb4c:	f7ff ff8e 	bl	800ea6c <std>
 800eb50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eb54:	2202      	movs	r2, #2
 800eb56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb5a:	2112      	movs	r1, #18
 800eb5c:	f7ff bf86 	b.w	800ea6c <std>
 800eb60:	200006f8 	.word	0x200006f8
 800eb64:	200005c0 	.word	0x200005c0
 800eb68:	0800ead9 	.word	0x0800ead9

0800eb6c <__sfp_lock_acquire>:
 800eb6c:	4801      	ldr	r0, [pc, #4]	@ (800eb74 <__sfp_lock_acquire+0x8>)
 800eb6e:	f000 b9b2 	b.w	800eed6 <__retarget_lock_acquire_recursive>
 800eb72:	bf00      	nop
 800eb74:	20000701 	.word	0x20000701

0800eb78 <__sfp_lock_release>:
 800eb78:	4801      	ldr	r0, [pc, #4]	@ (800eb80 <__sfp_lock_release+0x8>)
 800eb7a:	f000 b9ad 	b.w	800eed8 <__retarget_lock_release_recursive>
 800eb7e:	bf00      	nop
 800eb80:	20000701 	.word	0x20000701

0800eb84 <__sinit>:
 800eb84:	b510      	push	{r4, lr}
 800eb86:	4604      	mov	r4, r0
 800eb88:	f7ff fff0 	bl	800eb6c <__sfp_lock_acquire>
 800eb8c:	6a23      	ldr	r3, [r4, #32]
 800eb8e:	b11b      	cbz	r3, 800eb98 <__sinit+0x14>
 800eb90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb94:	f7ff bff0 	b.w	800eb78 <__sfp_lock_release>
 800eb98:	4b04      	ldr	r3, [pc, #16]	@ (800ebac <__sinit+0x28>)
 800eb9a:	6223      	str	r3, [r4, #32]
 800eb9c:	4b04      	ldr	r3, [pc, #16]	@ (800ebb0 <__sinit+0x2c>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d1f5      	bne.n	800eb90 <__sinit+0xc>
 800eba4:	f7ff ffc4 	bl	800eb30 <global_stdio_init.part.0>
 800eba8:	e7f2      	b.n	800eb90 <__sinit+0xc>
 800ebaa:	bf00      	nop
 800ebac:	0800eaf1 	.word	0x0800eaf1
 800ebb0:	200006f8 	.word	0x200006f8

0800ebb4 <fiprintf>:
 800ebb4:	b40e      	push	{r1, r2, r3}
 800ebb6:	b503      	push	{r0, r1, lr}
 800ebb8:	4601      	mov	r1, r0
 800ebba:	ab03      	add	r3, sp, #12
 800ebbc:	4805      	ldr	r0, [pc, #20]	@ (800ebd4 <fiprintf+0x20>)
 800ebbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebc2:	6800      	ldr	r0, [r0, #0]
 800ebc4:	9301      	str	r3, [sp, #4]
 800ebc6:	f002 fcef 	bl	80115a8 <_vfiprintf_r>
 800ebca:	b002      	add	sp, #8
 800ebcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebd0:	b003      	add	sp, #12
 800ebd2:	4770      	bx	lr
 800ebd4:	20000018 	.word	0x20000018

0800ebd8 <_fwalk_sglue>:
 800ebd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebdc:	4607      	mov	r7, r0
 800ebde:	4688      	mov	r8, r1
 800ebe0:	4614      	mov	r4, r2
 800ebe2:	2600      	movs	r6, #0
 800ebe4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ebe8:	f1b9 0901 	subs.w	r9, r9, #1
 800ebec:	d505      	bpl.n	800ebfa <_fwalk_sglue+0x22>
 800ebee:	6824      	ldr	r4, [r4, #0]
 800ebf0:	2c00      	cmp	r4, #0
 800ebf2:	d1f7      	bne.n	800ebe4 <_fwalk_sglue+0xc>
 800ebf4:	4630      	mov	r0, r6
 800ebf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebfa:	89ab      	ldrh	r3, [r5, #12]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d907      	bls.n	800ec10 <_fwalk_sglue+0x38>
 800ec00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec04:	3301      	adds	r3, #1
 800ec06:	d003      	beq.n	800ec10 <_fwalk_sglue+0x38>
 800ec08:	4629      	mov	r1, r5
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	47c0      	blx	r8
 800ec0e:	4306      	orrs	r6, r0
 800ec10:	3568      	adds	r5, #104	@ 0x68
 800ec12:	e7e9      	b.n	800ebe8 <_fwalk_sglue+0x10>

0800ec14 <siprintf>:
 800ec14:	b40e      	push	{r1, r2, r3}
 800ec16:	b500      	push	{lr}
 800ec18:	b09c      	sub	sp, #112	@ 0x70
 800ec1a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ec1c:	9002      	str	r0, [sp, #8]
 800ec1e:	9006      	str	r0, [sp, #24]
 800ec20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ec24:	4809      	ldr	r0, [pc, #36]	@ (800ec4c <siprintf+0x38>)
 800ec26:	9107      	str	r1, [sp, #28]
 800ec28:	9104      	str	r1, [sp, #16]
 800ec2a:	4909      	ldr	r1, [pc, #36]	@ (800ec50 <siprintf+0x3c>)
 800ec2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec30:	9105      	str	r1, [sp, #20]
 800ec32:	6800      	ldr	r0, [r0, #0]
 800ec34:	9301      	str	r3, [sp, #4]
 800ec36:	a902      	add	r1, sp, #8
 800ec38:	f002 fb90 	bl	801135c <_svfiprintf_r>
 800ec3c:	9b02      	ldr	r3, [sp, #8]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	701a      	strb	r2, [r3, #0]
 800ec42:	b01c      	add	sp, #112	@ 0x70
 800ec44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec48:	b003      	add	sp, #12
 800ec4a:	4770      	bx	lr
 800ec4c:	20000018 	.word	0x20000018
 800ec50:	ffff0208 	.word	0xffff0208

0800ec54 <__sread>:
 800ec54:	b510      	push	{r4, lr}
 800ec56:	460c      	mov	r4, r1
 800ec58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec5c:	f000 f8c8 	bl	800edf0 <_read_r>
 800ec60:	2800      	cmp	r0, #0
 800ec62:	bfab      	itete	ge
 800ec64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ec66:	89a3      	ldrhlt	r3, [r4, #12]
 800ec68:	181b      	addge	r3, r3, r0
 800ec6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ec6e:	bfac      	ite	ge
 800ec70:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ec72:	81a3      	strhlt	r3, [r4, #12]
 800ec74:	bd10      	pop	{r4, pc}

0800ec76 <__swrite>:
 800ec76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec7a:	461f      	mov	r7, r3
 800ec7c:	898b      	ldrh	r3, [r1, #12]
 800ec7e:	05db      	lsls	r3, r3, #23
 800ec80:	4605      	mov	r5, r0
 800ec82:	460c      	mov	r4, r1
 800ec84:	4616      	mov	r6, r2
 800ec86:	d505      	bpl.n	800ec94 <__swrite+0x1e>
 800ec88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec8c:	2302      	movs	r3, #2
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f000 f89c 	bl	800edcc <_lseek_r>
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec9e:	81a3      	strh	r3, [r4, #12]
 800eca0:	4632      	mov	r2, r6
 800eca2:	463b      	mov	r3, r7
 800eca4:	4628      	mov	r0, r5
 800eca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecaa:	f000 b8d7 	b.w	800ee5c <_write_r>

0800ecae <__sseek>:
 800ecae:	b510      	push	{r4, lr}
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecb6:	f000 f889 	bl	800edcc <_lseek_r>
 800ecba:	1c43      	adds	r3, r0, #1
 800ecbc:	89a3      	ldrh	r3, [r4, #12]
 800ecbe:	bf15      	itete	ne
 800ecc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ecc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ecc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ecca:	81a3      	strheq	r3, [r4, #12]
 800eccc:	bf18      	it	ne
 800ecce:	81a3      	strhne	r3, [r4, #12]
 800ecd0:	bd10      	pop	{r4, pc}

0800ecd2 <__sclose>:
 800ecd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecd6:	f000 b869 	b.w	800edac <_close_r>

0800ecda <memmove>:
 800ecda:	4288      	cmp	r0, r1
 800ecdc:	b510      	push	{r4, lr}
 800ecde:	eb01 0402 	add.w	r4, r1, r2
 800ece2:	d902      	bls.n	800ecea <memmove+0x10>
 800ece4:	4284      	cmp	r4, r0
 800ece6:	4623      	mov	r3, r4
 800ece8:	d807      	bhi.n	800ecfa <memmove+0x20>
 800ecea:	1e43      	subs	r3, r0, #1
 800ecec:	42a1      	cmp	r1, r4
 800ecee:	d008      	beq.n	800ed02 <memmove+0x28>
 800ecf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ecf4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ecf8:	e7f8      	b.n	800ecec <memmove+0x12>
 800ecfa:	4402      	add	r2, r0
 800ecfc:	4601      	mov	r1, r0
 800ecfe:	428a      	cmp	r2, r1
 800ed00:	d100      	bne.n	800ed04 <memmove+0x2a>
 800ed02:	bd10      	pop	{r4, pc}
 800ed04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed08:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed0c:	e7f7      	b.n	800ecfe <memmove+0x24>

0800ed0e <memset>:
 800ed0e:	4402      	add	r2, r0
 800ed10:	4603      	mov	r3, r0
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d100      	bne.n	800ed18 <memset+0xa>
 800ed16:	4770      	bx	lr
 800ed18:	f803 1b01 	strb.w	r1, [r3], #1
 800ed1c:	e7f9      	b.n	800ed12 <memset+0x4>

0800ed1e <strncpy>:
 800ed1e:	b510      	push	{r4, lr}
 800ed20:	3901      	subs	r1, #1
 800ed22:	4603      	mov	r3, r0
 800ed24:	b132      	cbz	r2, 800ed34 <strncpy+0x16>
 800ed26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ed2a:	f803 4b01 	strb.w	r4, [r3], #1
 800ed2e:	3a01      	subs	r2, #1
 800ed30:	2c00      	cmp	r4, #0
 800ed32:	d1f7      	bne.n	800ed24 <strncpy+0x6>
 800ed34:	441a      	add	r2, r3
 800ed36:	2100      	movs	r1, #0
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d100      	bne.n	800ed3e <strncpy+0x20>
 800ed3c:	bd10      	pop	{r4, pc}
 800ed3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ed42:	e7f9      	b.n	800ed38 <strncpy+0x1a>

0800ed44 <_raise_r>:
 800ed44:	291f      	cmp	r1, #31
 800ed46:	b538      	push	{r3, r4, r5, lr}
 800ed48:	4605      	mov	r5, r0
 800ed4a:	460c      	mov	r4, r1
 800ed4c:	d904      	bls.n	800ed58 <_raise_r+0x14>
 800ed4e:	2316      	movs	r3, #22
 800ed50:	6003      	str	r3, [r0, #0]
 800ed52:	f04f 30ff 	mov.w	r0, #4294967295
 800ed56:	bd38      	pop	{r3, r4, r5, pc}
 800ed58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ed5a:	b112      	cbz	r2, 800ed62 <_raise_r+0x1e>
 800ed5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed60:	b94b      	cbnz	r3, 800ed76 <_raise_r+0x32>
 800ed62:	4628      	mov	r0, r5
 800ed64:	f000 f868 	bl	800ee38 <_getpid_r>
 800ed68:	4622      	mov	r2, r4
 800ed6a:	4601      	mov	r1, r0
 800ed6c:	4628      	mov	r0, r5
 800ed6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed72:	f000 b84f 	b.w	800ee14 <_kill_r>
 800ed76:	2b01      	cmp	r3, #1
 800ed78:	d00a      	beq.n	800ed90 <_raise_r+0x4c>
 800ed7a:	1c59      	adds	r1, r3, #1
 800ed7c:	d103      	bne.n	800ed86 <_raise_r+0x42>
 800ed7e:	2316      	movs	r3, #22
 800ed80:	6003      	str	r3, [r0, #0]
 800ed82:	2001      	movs	r0, #1
 800ed84:	e7e7      	b.n	800ed56 <_raise_r+0x12>
 800ed86:	2100      	movs	r1, #0
 800ed88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	4798      	blx	r3
 800ed90:	2000      	movs	r0, #0
 800ed92:	e7e0      	b.n	800ed56 <_raise_r+0x12>

0800ed94 <raise>:
 800ed94:	4b02      	ldr	r3, [pc, #8]	@ (800eda0 <raise+0xc>)
 800ed96:	4601      	mov	r1, r0
 800ed98:	6818      	ldr	r0, [r3, #0]
 800ed9a:	f7ff bfd3 	b.w	800ed44 <_raise_r>
 800ed9e:	bf00      	nop
 800eda0:	20000018 	.word	0x20000018

0800eda4 <_localeconv_r>:
 800eda4:	4800      	ldr	r0, [pc, #0]	@ (800eda8 <_localeconv_r+0x4>)
 800eda6:	4770      	bx	lr
 800eda8:	20000158 	.word	0x20000158

0800edac <_close_r>:
 800edac:	b538      	push	{r3, r4, r5, lr}
 800edae:	4d06      	ldr	r5, [pc, #24]	@ (800edc8 <_close_r+0x1c>)
 800edb0:	2300      	movs	r3, #0
 800edb2:	4604      	mov	r4, r0
 800edb4:	4608      	mov	r0, r1
 800edb6:	602b      	str	r3, [r5, #0]
 800edb8:	f7f6 fe64 	bl	8005a84 <_close>
 800edbc:	1c43      	adds	r3, r0, #1
 800edbe:	d102      	bne.n	800edc6 <_close_r+0x1a>
 800edc0:	682b      	ldr	r3, [r5, #0]
 800edc2:	b103      	cbz	r3, 800edc6 <_close_r+0x1a>
 800edc4:	6023      	str	r3, [r4, #0]
 800edc6:	bd38      	pop	{r3, r4, r5, pc}
 800edc8:	200006fc 	.word	0x200006fc

0800edcc <_lseek_r>:
 800edcc:	b538      	push	{r3, r4, r5, lr}
 800edce:	4d07      	ldr	r5, [pc, #28]	@ (800edec <_lseek_r+0x20>)
 800edd0:	4604      	mov	r4, r0
 800edd2:	4608      	mov	r0, r1
 800edd4:	4611      	mov	r1, r2
 800edd6:	2200      	movs	r2, #0
 800edd8:	602a      	str	r2, [r5, #0]
 800edda:	461a      	mov	r2, r3
 800eddc:	f7f6 fe79 	bl	8005ad2 <_lseek>
 800ede0:	1c43      	adds	r3, r0, #1
 800ede2:	d102      	bne.n	800edea <_lseek_r+0x1e>
 800ede4:	682b      	ldr	r3, [r5, #0]
 800ede6:	b103      	cbz	r3, 800edea <_lseek_r+0x1e>
 800ede8:	6023      	str	r3, [r4, #0]
 800edea:	bd38      	pop	{r3, r4, r5, pc}
 800edec:	200006fc 	.word	0x200006fc

0800edf0 <_read_r>:
 800edf0:	b538      	push	{r3, r4, r5, lr}
 800edf2:	4d07      	ldr	r5, [pc, #28]	@ (800ee10 <_read_r+0x20>)
 800edf4:	4604      	mov	r4, r0
 800edf6:	4608      	mov	r0, r1
 800edf8:	4611      	mov	r1, r2
 800edfa:	2200      	movs	r2, #0
 800edfc:	602a      	str	r2, [r5, #0]
 800edfe:	461a      	mov	r2, r3
 800ee00:	f7f6 fe07 	bl	8005a12 <_read>
 800ee04:	1c43      	adds	r3, r0, #1
 800ee06:	d102      	bne.n	800ee0e <_read_r+0x1e>
 800ee08:	682b      	ldr	r3, [r5, #0]
 800ee0a:	b103      	cbz	r3, 800ee0e <_read_r+0x1e>
 800ee0c:	6023      	str	r3, [r4, #0]
 800ee0e:	bd38      	pop	{r3, r4, r5, pc}
 800ee10:	200006fc 	.word	0x200006fc

0800ee14 <_kill_r>:
 800ee14:	b538      	push	{r3, r4, r5, lr}
 800ee16:	4d07      	ldr	r5, [pc, #28]	@ (800ee34 <_kill_r+0x20>)
 800ee18:	2300      	movs	r3, #0
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	4608      	mov	r0, r1
 800ee1e:	4611      	mov	r1, r2
 800ee20:	602b      	str	r3, [r5, #0]
 800ee22:	f7f6 fddb 	bl	80059dc <_kill>
 800ee26:	1c43      	adds	r3, r0, #1
 800ee28:	d102      	bne.n	800ee30 <_kill_r+0x1c>
 800ee2a:	682b      	ldr	r3, [r5, #0]
 800ee2c:	b103      	cbz	r3, 800ee30 <_kill_r+0x1c>
 800ee2e:	6023      	str	r3, [r4, #0]
 800ee30:	bd38      	pop	{r3, r4, r5, pc}
 800ee32:	bf00      	nop
 800ee34:	200006fc 	.word	0x200006fc

0800ee38 <_getpid_r>:
 800ee38:	f7f6 bdc8 	b.w	80059cc <_getpid>

0800ee3c <_sbrk_r>:
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	4d06      	ldr	r5, [pc, #24]	@ (800ee58 <_sbrk_r+0x1c>)
 800ee40:	2300      	movs	r3, #0
 800ee42:	4604      	mov	r4, r0
 800ee44:	4608      	mov	r0, r1
 800ee46:	602b      	str	r3, [r5, #0]
 800ee48:	f7f6 fe50 	bl	8005aec <_sbrk>
 800ee4c:	1c43      	adds	r3, r0, #1
 800ee4e:	d102      	bne.n	800ee56 <_sbrk_r+0x1a>
 800ee50:	682b      	ldr	r3, [r5, #0]
 800ee52:	b103      	cbz	r3, 800ee56 <_sbrk_r+0x1a>
 800ee54:	6023      	str	r3, [r4, #0]
 800ee56:	bd38      	pop	{r3, r4, r5, pc}
 800ee58:	200006fc 	.word	0x200006fc

0800ee5c <_write_r>:
 800ee5c:	b538      	push	{r3, r4, r5, lr}
 800ee5e:	4d07      	ldr	r5, [pc, #28]	@ (800ee7c <_write_r+0x20>)
 800ee60:	4604      	mov	r4, r0
 800ee62:	4608      	mov	r0, r1
 800ee64:	4611      	mov	r1, r2
 800ee66:	2200      	movs	r2, #0
 800ee68:	602a      	str	r2, [r5, #0]
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	f7f6 fdee 	bl	8005a4c <_write>
 800ee70:	1c43      	adds	r3, r0, #1
 800ee72:	d102      	bne.n	800ee7a <_write_r+0x1e>
 800ee74:	682b      	ldr	r3, [r5, #0]
 800ee76:	b103      	cbz	r3, 800ee7a <_write_r+0x1e>
 800ee78:	6023      	str	r3, [r4, #0]
 800ee7a:	bd38      	pop	{r3, r4, r5, pc}
 800ee7c:	200006fc 	.word	0x200006fc

0800ee80 <__errno>:
 800ee80:	4b01      	ldr	r3, [pc, #4]	@ (800ee88 <__errno+0x8>)
 800ee82:	6818      	ldr	r0, [r3, #0]
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	20000018 	.word	0x20000018

0800ee8c <__libc_init_array>:
 800ee8c:	b570      	push	{r4, r5, r6, lr}
 800ee8e:	4d0d      	ldr	r5, [pc, #52]	@ (800eec4 <__libc_init_array+0x38>)
 800ee90:	4c0d      	ldr	r4, [pc, #52]	@ (800eec8 <__libc_init_array+0x3c>)
 800ee92:	1b64      	subs	r4, r4, r5
 800ee94:	10a4      	asrs	r4, r4, #2
 800ee96:	2600      	movs	r6, #0
 800ee98:	42a6      	cmp	r6, r4
 800ee9a:	d109      	bne.n	800eeb0 <__libc_init_array+0x24>
 800ee9c:	4d0b      	ldr	r5, [pc, #44]	@ (800eecc <__libc_init_array+0x40>)
 800ee9e:	4c0c      	ldr	r4, [pc, #48]	@ (800eed0 <__libc_init_array+0x44>)
 800eea0:	f003 fa1c 	bl	80122dc <_init>
 800eea4:	1b64      	subs	r4, r4, r5
 800eea6:	10a4      	asrs	r4, r4, #2
 800eea8:	2600      	movs	r6, #0
 800eeaa:	42a6      	cmp	r6, r4
 800eeac:	d105      	bne.n	800eeba <__libc_init_array+0x2e>
 800eeae:	bd70      	pop	{r4, r5, r6, pc}
 800eeb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeb4:	4798      	blx	r3
 800eeb6:	3601      	adds	r6, #1
 800eeb8:	e7ee      	b.n	800ee98 <__libc_init_array+0xc>
 800eeba:	f855 3b04 	ldr.w	r3, [r5], #4
 800eebe:	4798      	blx	r3
 800eec0:	3601      	adds	r6, #1
 800eec2:	e7f2      	b.n	800eeaa <__libc_init_array+0x1e>
 800eec4:	0801383c 	.word	0x0801383c
 800eec8:	0801383c 	.word	0x0801383c
 800eecc:	0801383c 	.word	0x0801383c
 800eed0:	0801384c 	.word	0x0801384c

0800eed4 <__retarget_lock_init_recursive>:
 800eed4:	4770      	bx	lr

0800eed6 <__retarget_lock_acquire_recursive>:
 800eed6:	4770      	bx	lr

0800eed8 <__retarget_lock_release_recursive>:
 800eed8:	4770      	bx	lr

0800eeda <memcpy>:
 800eeda:	440a      	add	r2, r1
 800eedc:	4291      	cmp	r1, r2
 800eede:	f100 33ff 	add.w	r3, r0, #4294967295
 800eee2:	d100      	bne.n	800eee6 <memcpy+0xc>
 800eee4:	4770      	bx	lr
 800eee6:	b510      	push	{r4, lr}
 800eee8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eef0:	4291      	cmp	r1, r2
 800eef2:	d1f9      	bne.n	800eee8 <memcpy+0xe>
 800eef4:	bd10      	pop	{r4, pc}
	...

0800eef8 <nanf>:
 800eef8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ef00 <nanf+0x8>
 800eefc:	4770      	bx	lr
 800eefe:	bf00      	nop
 800ef00:	7fc00000 	.word	0x7fc00000

0800ef04 <quorem>:
 800ef04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef08:	6903      	ldr	r3, [r0, #16]
 800ef0a:	690c      	ldr	r4, [r1, #16]
 800ef0c:	42a3      	cmp	r3, r4
 800ef0e:	4607      	mov	r7, r0
 800ef10:	db7e      	blt.n	800f010 <quorem+0x10c>
 800ef12:	3c01      	subs	r4, #1
 800ef14:	f101 0814 	add.w	r8, r1, #20
 800ef18:	00a3      	lsls	r3, r4, #2
 800ef1a:	f100 0514 	add.w	r5, r0, #20
 800ef1e:	9300      	str	r3, [sp, #0]
 800ef20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef24:	9301      	str	r3, [sp, #4]
 800ef26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	429a      	cmp	r2, r3
 800ef32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef36:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef3a:	d32e      	bcc.n	800ef9a <quorem+0x96>
 800ef3c:	f04f 0a00 	mov.w	sl, #0
 800ef40:	46c4      	mov	ip, r8
 800ef42:	46ae      	mov	lr, r5
 800ef44:	46d3      	mov	fp, sl
 800ef46:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ef4a:	b298      	uxth	r0, r3
 800ef4c:	fb06 a000 	mla	r0, r6, r0, sl
 800ef50:	0c02      	lsrs	r2, r0, #16
 800ef52:	0c1b      	lsrs	r3, r3, #16
 800ef54:	fb06 2303 	mla	r3, r6, r3, r2
 800ef58:	f8de 2000 	ldr.w	r2, [lr]
 800ef5c:	b280      	uxth	r0, r0
 800ef5e:	b292      	uxth	r2, r2
 800ef60:	1a12      	subs	r2, r2, r0
 800ef62:	445a      	add	r2, fp
 800ef64:	f8de 0000 	ldr.w	r0, [lr]
 800ef68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ef72:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ef76:	b292      	uxth	r2, r2
 800ef78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ef7c:	45e1      	cmp	r9, ip
 800ef7e:	f84e 2b04 	str.w	r2, [lr], #4
 800ef82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ef86:	d2de      	bcs.n	800ef46 <quorem+0x42>
 800ef88:	9b00      	ldr	r3, [sp, #0]
 800ef8a:	58eb      	ldr	r3, [r5, r3]
 800ef8c:	b92b      	cbnz	r3, 800ef9a <quorem+0x96>
 800ef8e:	9b01      	ldr	r3, [sp, #4]
 800ef90:	3b04      	subs	r3, #4
 800ef92:	429d      	cmp	r5, r3
 800ef94:	461a      	mov	r2, r3
 800ef96:	d32f      	bcc.n	800eff8 <quorem+0xf4>
 800ef98:	613c      	str	r4, [r7, #16]
 800ef9a:	4638      	mov	r0, r7
 800ef9c:	f001 f90e 	bl	80101bc <__mcmp>
 800efa0:	2800      	cmp	r0, #0
 800efa2:	db25      	blt.n	800eff0 <quorem+0xec>
 800efa4:	4629      	mov	r1, r5
 800efa6:	2000      	movs	r0, #0
 800efa8:	f858 2b04 	ldr.w	r2, [r8], #4
 800efac:	f8d1 c000 	ldr.w	ip, [r1]
 800efb0:	fa1f fe82 	uxth.w	lr, r2
 800efb4:	fa1f f38c 	uxth.w	r3, ip
 800efb8:	eba3 030e 	sub.w	r3, r3, lr
 800efbc:	4403      	add	r3, r0
 800efbe:	0c12      	lsrs	r2, r2, #16
 800efc0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800efc4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800efc8:	b29b      	uxth	r3, r3
 800efca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efce:	45c1      	cmp	r9, r8
 800efd0:	f841 3b04 	str.w	r3, [r1], #4
 800efd4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800efd8:	d2e6      	bcs.n	800efa8 <quorem+0xa4>
 800efda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efe2:	b922      	cbnz	r2, 800efee <quorem+0xea>
 800efe4:	3b04      	subs	r3, #4
 800efe6:	429d      	cmp	r5, r3
 800efe8:	461a      	mov	r2, r3
 800efea:	d30b      	bcc.n	800f004 <quorem+0x100>
 800efec:	613c      	str	r4, [r7, #16]
 800efee:	3601      	adds	r6, #1
 800eff0:	4630      	mov	r0, r6
 800eff2:	b003      	add	sp, #12
 800eff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff8:	6812      	ldr	r2, [r2, #0]
 800effa:	3b04      	subs	r3, #4
 800effc:	2a00      	cmp	r2, #0
 800effe:	d1cb      	bne.n	800ef98 <quorem+0x94>
 800f000:	3c01      	subs	r4, #1
 800f002:	e7c6      	b.n	800ef92 <quorem+0x8e>
 800f004:	6812      	ldr	r2, [r2, #0]
 800f006:	3b04      	subs	r3, #4
 800f008:	2a00      	cmp	r2, #0
 800f00a:	d1ef      	bne.n	800efec <quorem+0xe8>
 800f00c:	3c01      	subs	r4, #1
 800f00e:	e7ea      	b.n	800efe6 <quorem+0xe2>
 800f010:	2000      	movs	r0, #0
 800f012:	e7ee      	b.n	800eff2 <quorem+0xee>
 800f014:	0000      	movs	r0, r0
	...

0800f018 <_dtoa_r>:
 800f018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f01c:	69c7      	ldr	r7, [r0, #28]
 800f01e:	b099      	sub	sp, #100	@ 0x64
 800f020:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f024:	ec55 4b10 	vmov	r4, r5, d0
 800f028:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f02a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f02c:	4683      	mov	fp, r0
 800f02e:	920e      	str	r2, [sp, #56]	@ 0x38
 800f030:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f032:	b97f      	cbnz	r7, 800f054 <_dtoa_r+0x3c>
 800f034:	2010      	movs	r0, #16
 800f036:	f7fe fdef 	bl	800dc18 <malloc>
 800f03a:	4602      	mov	r2, r0
 800f03c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f040:	b920      	cbnz	r0, 800f04c <_dtoa_r+0x34>
 800f042:	4ba7      	ldr	r3, [pc, #668]	@ (800f2e0 <_dtoa_r+0x2c8>)
 800f044:	21ef      	movs	r1, #239	@ 0xef
 800f046:	48a7      	ldr	r0, [pc, #668]	@ (800f2e4 <_dtoa_r+0x2cc>)
 800f048:	f7fe fdb6 	bl	800dbb8 <__assert_func>
 800f04c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f050:	6007      	str	r7, [r0, #0]
 800f052:	60c7      	str	r7, [r0, #12]
 800f054:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f058:	6819      	ldr	r1, [r3, #0]
 800f05a:	b159      	cbz	r1, 800f074 <_dtoa_r+0x5c>
 800f05c:	685a      	ldr	r2, [r3, #4]
 800f05e:	604a      	str	r2, [r1, #4]
 800f060:	2301      	movs	r3, #1
 800f062:	4093      	lsls	r3, r2
 800f064:	608b      	str	r3, [r1, #8]
 800f066:	4658      	mov	r0, fp
 800f068:	f000 fe24 	bl	800fcb4 <_Bfree>
 800f06c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f070:	2200      	movs	r2, #0
 800f072:	601a      	str	r2, [r3, #0]
 800f074:	1e2b      	subs	r3, r5, #0
 800f076:	bfb9      	ittee	lt
 800f078:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f07c:	9303      	strlt	r3, [sp, #12]
 800f07e:	2300      	movge	r3, #0
 800f080:	6033      	strge	r3, [r6, #0]
 800f082:	9f03      	ldr	r7, [sp, #12]
 800f084:	4b98      	ldr	r3, [pc, #608]	@ (800f2e8 <_dtoa_r+0x2d0>)
 800f086:	bfbc      	itt	lt
 800f088:	2201      	movlt	r2, #1
 800f08a:	6032      	strlt	r2, [r6, #0]
 800f08c:	43bb      	bics	r3, r7
 800f08e:	d112      	bne.n	800f0b6 <_dtoa_r+0x9e>
 800f090:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f092:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f096:	6013      	str	r3, [r2, #0]
 800f098:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f09c:	4323      	orrs	r3, r4
 800f09e:	f000 854d 	beq.w	800fb3c <_dtoa_r+0xb24>
 800f0a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f2fc <_dtoa_r+0x2e4>
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	f000 854f 	beq.w	800fb4c <_dtoa_r+0xb34>
 800f0ae:	f10a 0303 	add.w	r3, sl, #3
 800f0b2:	f000 bd49 	b.w	800fb48 <_dtoa_r+0xb30>
 800f0b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	ec51 0b17 	vmov	r0, r1, d7
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f0c6:	f7f1 fd27 	bl	8000b18 <__aeabi_dcmpeq>
 800f0ca:	4680      	mov	r8, r0
 800f0cc:	b158      	cbz	r0, 800f0e6 <_dtoa_r+0xce>
 800f0ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	6013      	str	r3, [r2, #0]
 800f0d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0d6:	b113      	cbz	r3, 800f0de <_dtoa_r+0xc6>
 800f0d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f0da:	4b84      	ldr	r3, [pc, #528]	@ (800f2ec <_dtoa_r+0x2d4>)
 800f0dc:	6013      	str	r3, [r2, #0]
 800f0de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f300 <_dtoa_r+0x2e8>
 800f0e2:	f000 bd33 	b.w	800fb4c <_dtoa_r+0xb34>
 800f0e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f0ea:	aa16      	add	r2, sp, #88	@ 0x58
 800f0ec:	a917      	add	r1, sp, #92	@ 0x5c
 800f0ee:	4658      	mov	r0, fp
 800f0f0:	f001 f984 	bl	80103fc <__d2b>
 800f0f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f0f8:	4681      	mov	r9, r0
 800f0fa:	2e00      	cmp	r6, #0
 800f0fc:	d077      	beq.n	800f1ee <_dtoa_r+0x1d6>
 800f0fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f100:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f10c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f110:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f114:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f118:	4619      	mov	r1, r3
 800f11a:	2200      	movs	r2, #0
 800f11c:	4b74      	ldr	r3, [pc, #464]	@ (800f2f0 <_dtoa_r+0x2d8>)
 800f11e:	f7f1 f8db 	bl	80002d8 <__aeabi_dsub>
 800f122:	a369      	add	r3, pc, #420	@ (adr r3, 800f2c8 <_dtoa_r+0x2b0>)
 800f124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f128:	f7f1 fa8e 	bl	8000648 <__aeabi_dmul>
 800f12c:	a368      	add	r3, pc, #416	@ (adr r3, 800f2d0 <_dtoa_r+0x2b8>)
 800f12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f132:	f7f1 f8d3 	bl	80002dc <__adddf3>
 800f136:	4604      	mov	r4, r0
 800f138:	4630      	mov	r0, r6
 800f13a:	460d      	mov	r5, r1
 800f13c:	f7f1 fa1a 	bl	8000574 <__aeabi_i2d>
 800f140:	a365      	add	r3, pc, #404	@ (adr r3, 800f2d8 <_dtoa_r+0x2c0>)
 800f142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f146:	f7f1 fa7f 	bl	8000648 <__aeabi_dmul>
 800f14a:	4602      	mov	r2, r0
 800f14c:	460b      	mov	r3, r1
 800f14e:	4620      	mov	r0, r4
 800f150:	4629      	mov	r1, r5
 800f152:	f7f1 f8c3 	bl	80002dc <__adddf3>
 800f156:	4604      	mov	r4, r0
 800f158:	460d      	mov	r5, r1
 800f15a:	f7f1 fd25 	bl	8000ba8 <__aeabi_d2iz>
 800f15e:	2200      	movs	r2, #0
 800f160:	4607      	mov	r7, r0
 800f162:	2300      	movs	r3, #0
 800f164:	4620      	mov	r0, r4
 800f166:	4629      	mov	r1, r5
 800f168:	f7f1 fce0 	bl	8000b2c <__aeabi_dcmplt>
 800f16c:	b140      	cbz	r0, 800f180 <_dtoa_r+0x168>
 800f16e:	4638      	mov	r0, r7
 800f170:	f7f1 fa00 	bl	8000574 <__aeabi_i2d>
 800f174:	4622      	mov	r2, r4
 800f176:	462b      	mov	r3, r5
 800f178:	f7f1 fcce 	bl	8000b18 <__aeabi_dcmpeq>
 800f17c:	b900      	cbnz	r0, 800f180 <_dtoa_r+0x168>
 800f17e:	3f01      	subs	r7, #1
 800f180:	2f16      	cmp	r7, #22
 800f182:	d851      	bhi.n	800f228 <_dtoa_r+0x210>
 800f184:	4b5b      	ldr	r3, [pc, #364]	@ (800f2f4 <_dtoa_r+0x2dc>)
 800f186:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f192:	f7f1 fccb 	bl	8000b2c <__aeabi_dcmplt>
 800f196:	2800      	cmp	r0, #0
 800f198:	d048      	beq.n	800f22c <_dtoa_r+0x214>
 800f19a:	3f01      	subs	r7, #1
 800f19c:	2300      	movs	r3, #0
 800f19e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f1a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f1a2:	1b9b      	subs	r3, r3, r6
 800f1a4:	1e5a      	subs	r2, r3, #1
 800f1a6:	bf44      	itt	mi
 800f1a8:	f1c3 0801 	rsbmi	r8, r3, #1
 800f1ac:	2300      	movmi	r3, #0
 800f1ae:	9208      	str	r2, [sp, #32]
 800f1b0:	bf54      	ite	pl
 800f1b2:	f04f 0800 	movpl.w	r8, #0
 800f1b6:	9308      	strmi	r3, [sp, #32]
 800f1b8:	2f00      	cmp	r7, #0
 800f1ba:	db39      	blt.n	800f230 <_dtoa_r+0x218>
 800f1bc:	9b08      	ldr	r3, [sp, #32]
 800f1be:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f1c0:	443b      	add	r3, r7
 800f1c2:	9308      	str	r3, [sp, #32]
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1ca:	2b09      	cmp	r3, #9
 800f1cc:	d864      	bhi.n	800f298 <_dtoa_r+0x280>
 800f1ce:	2b05      	cmp	r3, #5
 800f1d0:	bfc4      	itt	gt
 800f1d2:	3b04      	subgt	r3, #4
 800f1d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f1d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1d8:	f1a3 0302 	sub.w	r3, r3, #2
 800f1dc:	bfcc      	ite	gt
 800f1de:	2400      	movgt	r4, #0
 800f1e0:	2401      	movle	r4, #1
 800f1e2:	2b03      	cmp	r3, #3
 800f1e4:	d863      	bhi.n	800f2ae <_dtoa_r+0x296>
 800f1e6:	e8df f003 	tbb	[pc, r3]
 800f1ea:	372a      	.short	0x372a
 800f1ec:	5535      	.short	0x5535
 800f1ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f1f2:	441e      	add	r6, r3
 800f1f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f1f8:	2b20      	cmp	r3, #32
 800f1fa:	bfc1      	itttt	gt
 800f1fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f200:	409f      	lslgt	r7, r3
 800f202:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f206:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f20a:	bfd6      	itet	le
 800f20c:	f1c3 0320 	rsble	r3, r3, #32
 800f210:	ea47 0003 	orrgt.w	r0, r7, r3
 800f214:	fa04 f003 	lslle.w	r0, r4, r3
 800f218:	f7f1 f99c 	bl	8000554 <__aeabi_ui2d>
 800f21c:	2201      	movs	r2, #1
 800f21e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f222:	3e01      	subs	r6, #1
 800f224:	9214      	str	r2, [sp, #80]	@ 0x50
 800f226:	e777      	b.n	800f118 <_dtoa_r+0x100>
 800f228:	2301      	movs	r3, #1
 800f22a:	e7b8      	b.n	800f19e <_dtoa_r+0x186>
 800f22c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f22e:	e7b7      	b.n	800f1a0 <_dtoa_r+0x188>
 800f230:	427b      	negs	r3, r7
 800f232:	930a      	str	r3, [sp, #40]	@ 0x28
 800f234:	2300      	movs	r3, #0
 800f236:	eba8 0807 	sub.w	r8, r8, r7
 800f23a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f23c:	e7c4      	b.n	800f1c8 <_dtoa_r+0x1b0>
 800f23e:	2300      	movs	r3, #0
 800f240:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f244:	2b00      	cmp	r3, #0
 800f246:	dc35      	bgt.n	800f2b4 <_dtoa_r+0x29c>
 800f248:	2301      	movs	r3, #1
 800f24a:	9300      	str	r3, [sp, #0]
 800f24c:	9307      	str	r3, [sp, #28]
 800f24e:	461a      	mov	r2, r3
 800f250:	920e      	str	r2, [sp, #56]	@ 0x38
 800f252:	e00b      	b.n	800f26c <_dtoa_r+0x254>
 800f254:	2301      	movs	r3, #1
 800f256:	e7f3      	b.n	800f240 <_dtoa_r+0x228>
 800f258:	2300      	movs	r3, #0
 800f25a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f25c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f25e:	18fb      	adds	r3, r7, r3
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	3301      	adds	r3, #1
 800f264:	2b01      	cmp	r3, #1
 800f266:	9307      	str	r3, [sp, #28]
 800f268:	bfb8      	it	lt
 800f26a:	2301      	movlt	r3, #1
 800f26c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f270:	2100      	movs	r1, #0
 800f272:	2204      	movs	r2, #4
 800f274:	f102 0514 	add.w	r5, r2, #20
 800f278:	429d      	cmp	r5, r3
 800f27a:	d91f      	bls.n	800f2bc <_dtoa_r+0x2a4>
 800f27c:	6041      	str	r1, [r0, #4]
 800f27e:	4658      	mov	r0, fp
 800f280:	f000 fcd8 	bl	800fc34 <_Balloc>
 800f284:	4682      	mov	sl, r0
 800f286:	2800      	cmp	r0, #0
 800f288:	d13c      	bne.n	800f304 <_dtoa_r+0x2ec>
 800f28a:	4b1b      	ldr	r3, [pc, #108]	@ (800f2f8 <_dtoa_r+0x2e0>)
 800f28c:	4602      	mov	r2, r0
 800f28e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f292:	e6d8      	b.n	800f046 <_dtoa_r+0x2e>
 800f294:	2301      	movs	r3, #1
 800f296:	e7e0      	b.n	800f25a <_dtoa_r+0x242>
 800f298:	2401      	movs	r4, #1
 800f29a:	2300      	movs	r3, #0
 800f29c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f29e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a4:	9300      	str	r3, [sp, #0]
 800f2a6:	9307      	str	r3, [sp, #28]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	2312      	movs	r3, #18
 800f2ac:	e7d0      	b.n	800f250 <_dtoa_r+0x238>
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2b2:	e7f5      	b.n	800f2a0 <_dtoa_r+0x288>
 800f2b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	9307      	str	r3, [sp, #28]
 800f2ba:	e7d7      	b.n	800f26c <_dtoa_r+0x254>
 800f2bc:	3101      	adds	r1, #1
 800f2be:	0052      	lsls	r2, r2, #1
 800f2c0:	e7d8      	b.n	800f274 <_dtoa_r+0x25c>
 800f2c2:	bf00      	nop
 800f2c4:	f3af 8000 	nop.w
 800f2c8:	636f4361 	.word	0x636f4361
 800f2cc:	3fd287a7 	.word	0x3fd287a7
 800f2d0:	8b60c8b3 	.word	0x8b60c8b3
 800f2d4:	3fc68a28 	.word	0x3fc68a28
 800f2d8:	509f79fb 	.word	0x509f79fb
 800f2dc:	3fd34413 	.word	0x3fd34413
 800f2e0:	0801348a 	.word	0x0801348a
 800f2e4:	080134a1 	.word	0x080134a1
 800f2e8:	7ff00000 	.word	0x7ff00000
 800f2ec:	08013455 	.word	0x08013455
 800f2f0:	3ff80000 	.word	0x3ff80000
 800f2f4:	08013598 	.word	0x08013598
 800f2f8:	080134f9 	.word	0x080134f9
 800f2fc:	08013486 	.word	0x08013486
 800f300:	08013454 	.word	0x08013454
 800f304:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f308:	6018      	str	r0, [r3, #0]
 800f30a:	9b07      	ldr	r3, [sp, #28]
 800f30c:	2b0e      	cmp	r3, #14
 800f30e:	f200 80a4 	bhi.w	800f45a <_dtoa_r+0x442>
 800f312:	2c00      	cmp	r4, #0
 800f314:	f000 80a1 	beq.w	800f45a <_dtoa_r+0x442>
 800f318:	2f00      	cmp	r7, #0
 800f31a:	dd33      	ble.n	800f384 <_dtoa_r+0x36c>
 800f31c:	4bad      	ldr	r3, [pc, #692]	@ (800f5d4 <_dtoa_r+0x5bc>)
 800f31e:	f007 020f 	and.w	r2, r7, #15
 800f322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f326:	ed93 7b00 	vldr	d7, [r3]
 800f32a:	05f8      	lsls	r0, r7, #23
 800f32c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f330:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f334:	d516      	bpl.n	800f364 <_dtoa_r+0x34c>
 800f336:	4ba8      	ldr	r3, [pc, #672]	@ (800f5d8 <_dtoa_r+0x5c0>)
 800f338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f33c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f340:	f7f1 faac 	bl	800089c <__aeabi_ddiv>
 800f344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f348:	f004 040f 	and.w	r4, r4, #15
 800f34c:	2603      	movs	r6, #3
 800f34e:	4da2      	ldr	r5, [pc, #648]	@ (800f5d8 <_dtoa_r+0x5c0>)
 800f350:	b954      	cbnz	r4, 800f368 <_dtoa_r+0x350>
 800f352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f35a:	f7f1 fa9f 	bl	800089c <__aeabi_ddiv>
 800f35e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f362:	e028      	b.n	800f3b6 <_dtoa_r+0x39e>
 800f364:	2602      	movs	r6, #2
 800f366:	e7f2      	b.n	800f34e <_dtoa_r+0x336>
 800f368:	07e1      	lsls	r1, r4, #31
 800f36a:	d508      	bpl.n	800f37e <_dtoa_r+0x366>
 800f36c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f370:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f374:	f7f1 f968 	bl	8000648 <__aeabi_dmul>
 800f378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f37c:	3601      	adds	r6, #1
 800f37e:	1064      	asrs	r4, r4, #1
 800f380:	3508      	adds	r5, #8
 800f382:	e7e5      	b.n	800f350 <_dtoa_r+0x338>
 800f384:	f000 80d2 	beq.w	800f52c <_dtoa_r+0x514>
 800f388:	427c      	negs	r4, r7
 800f38a:	4b92      	ldr	r3, [pc, #584]	@ (800f5d4 <_dtoa_r+0x5bc>)
 800f38c:	4d92      	ldr	r5, [pc, #584]	@ (800f5d8 <_dtoa_r+0x5c0>)
 800f38e:	f004 020f 	and.w	r2, r4, #15
 800f392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f39e:	f7f1 f953 	bl	8000648 <__aeabi_dmul>
 800f3a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3a6:	1124      	asrs	r4, r4, #4
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	2602      	movs	r6, #2
 800f3ac:	2c00      	cmp	r4, #0
 800f3ae:	f040 80b2 	bne.w	800f516 <_dtoa_r+0x4fe>
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d1d3      	bne.n	800f35e <_dtoa_r+0x346>
 800f3b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f3b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f000 80b7 	beq.w	800f530 <_dtoa_r+0x518>
 800f3c2:	4b86      	ldr	r3, [pc, #536]	@ (800f5dc <_dtoa_r+0x5c4>)
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	4629      	mov	r1, r5
 800f3ca:	f7f1 fbaf 	bl	8000b2c <__aeabi_dcmplt>
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	f000 80ae 	beq.w	800f530 <_dtoa_r+0x518>
 800f3d4:	9b07      	ldr	r3, [sp, #28]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	f000 80aa 	beq.w	800f530 <_dtoa_r+0x518>
 800f3dc:	9b00      	ldr	r3, [sp, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	dd37      	ble.n	800f452 <_dtoa_r+0x43a>
 800f3e2:	1e7b      	subs	r3, r7, #1
 800f3e4:	9304      	str	r3, [sp, #16]
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	4b7d      	ldr	r3, [pc, #500]	@ (800f5e0 <_dtoa_r+0x5c8>)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	f7f1 f92b 	bl	8000648 <__aeabi_dmul>
 800f3f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3f6:	9c00      	ldr	r4, [sp, #0]
 800f3f8:	3601      	adds	r6, #1
 800f3fa:	4630      	mov	r0, r6
 800f3fc:	f7f1 f8ba 	bl	8000574 <__aeabi_i2d>
 800f400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f404:	f7f1 f920 	bl	8000648 <__aeabi_dmul>
 800f408:	4b76      	ldr	r3, [pc, #472]	@ (800f5e4 <_dtoa_r+0x5cc>)
 800f40a:	2200      	movs	r2, #0
 800f40c:	f7f0 ff66 	bl	80002dc <__adddf3>
 800f410:	4605      	mov	r5, r0
 800f412:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f416:	2c00      	cmp	r4, #0
 800f418:	f040 808d 	bne.w	800f536 <_dtoa_r+0x51e>
 800f41c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f420:	4b71      	ldr	r3, [pc, #452]	@ (800f5e8 <_dtoa_r+0x5d0>)
 800f422:	2200      	movs	r2, #0
 800f424:	f7f0 ff58 	bl	80002d8 <__aeabi_dsub>
 800f428:	4602      	mov	r2, r0
 800f42a:	460b      	mov	r3, r1
 800f42c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f430:	462a      	mov	r2, r5
 800f432:	4633      	mov	r3, r6
 800f434:	f7f1 fb98 	bl	8000b68 <__aeabi_dcmpgt>
 800f438:	2800      	cmp	r0, #0
 800f43a:	f040 828b 	bne.w	800f954 <_dtoa_r+0x93c>
 800f43e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f442:	462a      	mov	r2, r5
 800f444:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f448:	f7f1 fb70 	bl	8000b2c <__aeabi_dcmplt>
 800f44c:	2800      	cmp	r0, #0
 800f44e:	f040 8128 	bne.w	800f6a2 <_dtoa_r+0x68a>
 800f452:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f456:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f45a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f2c0 815a 	blt.w	800f716 <_dtoa_r+0x6fe>
 800f462:	2f0e      	cmp	r7, #14
 800f464:	f300 8157 	bgt.w	800f716 <_dtoa_r+0x6fe>
 800f468:	4b5a      	ldr	r3, [pc, #360]	@ (800f5d4 <_dtoa_r+0x5bc>)
 800f46a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f46e:	ed93 7b00 	vldr	d7, [r3]
 800f472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f474:	2b00      	cmp	r3, #0
 800f476:	ed8d 7b00 	vstr	d7, [sp]
 800f47a:	da03      	bge.n	800f484 <_dtoa_r+0x46c>
 800f47c:	9b07      	ldr	r3, [sp, #28]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	f340 8101 	ble.w	800f686 <_dtoa_r+0x66e>
 800f484:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f488:	4656      	mov	r6, sl
 800f48a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f48e:	4620      	mov	r0, r4
 800f490:	4629      	mov	r1, r5
 800f492:	f7f1 fa03 	bl	800089c <__aeabi_ddiv>
 800f496:	f7f1 fb87 	bl	8000ba8 <__aeabi_d2iz>
 800f49a:	4680      	mov	r8, r0
 800f49c:	f7f1 f86a 	bl	8000574 <__aeabi_i2d>
 800f4a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4a4:	f7f1 f8d0 	bl	8000648 <__aeabi_dmul>
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	4629      	mov	r1, r5
 800f4b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f4b4:	f7f0 ff10 	bl	80002d8 <__aeabi_dsub>
 800f4b8:	f806 4b01 	strb.w	r4, [r6], #1
 800f4bc:	9d07      	ldr	r5, [sp, #28]
 800f4be:	eba6 040a 	sub.w	r4, r6, sl
 800f4c2:	42a5      	cmp	r5, r4
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	f040 8117 	bne.w	800f6fa <_dtoa_r+0x6e2>
 800f4cc:	f7f0 ff06 	bl	80002dc <__adddf3>
 800f4d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4d4:	4604      	mov	r4, r0
 800f4d6:	460d      	mov	r5, r1
 800f4d8:	f7f1 fb46 	bl	8000b68 <__aeabi_dcmpgt>
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	f040 80f9 	bne.w	800f6d4 <_dtoa_r+0x6bc>
 800f4e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	4629      	mov	r1, r5
 800f4ea:	f7f1 fb15 	bl	8000b18 <__aeabi_dcmpeq>
 800f4ee:	b118      	cbz	r0, 800f4f8 <_dtoa_r+0x4e0>
 800f4f0:	f018 0f01 	tst.w	r8, #1
 800f4f4:	f040 80ee 	bne.w	800f6d4 <_dtoa_r+0x6bc>
 800f4f8:	4649      	mov	r1, r9
 800f4fa:	4658      	mov	r0, fp
 800f4fc:	f000 fbda 	bl	800fcb4 <_Bfree>
 800f500:	2300      	movs	r3, #0
 800f502:	7033      	strb	r3, [r6, #0]
 800f504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f506:	3701      	adds	r7, #1
 800f508:	601f      	str	r7, [r3, #0]
 800f50a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f000 831d 	beq.w	800fb4c <_dtoa_r+0xb34>
 800f512:	601e      	str	r6, [r3, #0]
 800f514:	e31a      	b.n	800fb4c <_dtoa_r+0xb34>
 800f516:	07e2      	lsls	r2, r4, #31
 800f518:	d505      	bpl.n	800f526 <_dtoa_r+0x50e>
 800f51a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f51e:	f7f1 f893 	bl	8000648 <__aeabi_dmul>
 800f522:	3601      	adds	r6, #1
 800f524:	2301      	movs	r3, #1
 800f526:	1064      	asrs	r4, r4, #1
 800f528:	3508      	adds	r5, #8
 800f52a:	e73f      	b.n	800f3ac <_dtoa_r+0x394>
 800f52c:	2602      	movs	r6, #2
 800f52e:	e742      	b.n	800f3b6 <_dtoa_r+0x39e>
 800f530:	9c07      	ldr	r4, [sp, #28]
 800f532:	9704      	str	r7, [sp, #16]
 800f534:	e761      	b.n	800f3fa <_dtoa_r+0x3e2>
 800f536:	4b27      	ldr	r3, [pc, #156]	@ (800f5d4 <_dtoa_r+0x5bc>)
 800f538:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f53a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f53e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f542:	4454      	add	r4, sl
 800f544:	2900      	cmp	r1, #0
 800f546:	d053      	beq.n	800f5f0 <_dtoa_r+0x5d8>
 800f548:	4928      	ldr	r1, [pc, #160]	@ (800f5ec <_dtoa_r+0x5d4>)
 800f54a:	2000      	movs	r0, #0
 800f54c:	f7f1 f9a6 	bl	800089c <__aeabi_ddiv>
 800f550:	4633      	mov	r3, r6
 800f552:	462a      	mov	r2, r5
 800f554:	f7f0 fec0 	bl	80002d8 <__aeabi_dsub>
 800f558:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f55c:	4656      	mov	r6, sl
 800f55e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f562:	f7f1 fb21 	bl	8000ba8 <__aeabi_d2iz>
 800f566:	4605      	mov	r5, r0
 800f568:	f7f1 f804 	bl	8000574 <__aeabi_i2d>
 800f56c:	4602      	mov	r2, r0
 800f56e:	460b      	mov	r3, r1
 800f570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f574:	f7f0 feb0 	bl	80002d8 <__aeabi_dsub>
 800f578:	3530      	adds	r5, #48	@ 0x30
 800f57a:	4602      	mov	r2, r0
 800f57c:	460b      	mov	r3, r1
 800f57e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f582:	f806 5b01 	strb.w	r5, [r6], #1
 800f586:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f58a:	f7f1 facf 	bl	8000b2c <__aeabi_dcmplt>
 800f58e:	2800      	cmp	r0, #0
 800f590:	d171      	bne.n	800f676 <_dtoa_r+0x65e>
 800f592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f596:	4911      	ldr	r1, [pc, #68]	@ (800f5dc <_dtoa_r+0x5c4>)
 800f598:	2000      	movs	r0, #0
 800f59a:	f7f0 fe9d 	bl	80002d8 <__aeabi_dsub>
 800f59e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f5a2:	f7f1 fac3 	bl	8000b2c <__aeabi_dcmplt>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	f040 8095 	bne.w	800f6d6 <_dtoa_r+0x6be>
 800f5ac:	42a6      	cmp	r6, r4
 800f5ae:	f43f af50 	beq.w	800f452 <_dtoa_r+0x43a>
 800f5b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f5b6:	4b0a      	ldr	r3, [pc, #40]	@ (800f5e0 <_dtoa_r+0x5c8>)
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	f7f1 f845 	bl	8000648 <__aeabi_dmul>
 800f5be:	4b08      	ldr	r3, [pc, #32]	@ (800f5e0 <_dtoa_r+0x5c8>)
 800f5c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5ca:	f7f1 f83d 	bl	8000648 <__aeabi_dmul>
 800f5ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5d2:	e7c4      	b.n	800f55e <_dtoa_r+0x546>
 800f5d4:	08013598 	.word	0x08013598
 800f5d8:	08013570 	.word	0x08013570
 800f5dc:	3ff00000 	.word	0x3ff00000
 800f5e0:	40240000 	.word	0x40240000
 800f5e4:	401c0000 	.word	0x401c0000
 800f5e8:	40140000 	.word	0x40140000
 800f5ec:	3fe00000 	.word	0x3fe00000
 800f5f0:	4631      	mov	r1, r6
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	f7f1 f828 	bl	8000648 <__aeabi_dmul>
 800f5f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5fc:	9415      	str	r4, [sp, #84]	@ 0x54
 800f5fe:	4656      	mov	r6, sl
 800f600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f604:	f7f1 fad0 	bl	8000ba8 <__aeabi_d2iz>
 800f608:	4605      	mov	r5, r0
 800f60a:	f7f0 ffb3 	bl	8000574 <__aeabi_i2d>
 800f60e:	4602      	mov	r2, r0
 800f610:	460b      	mov	r3, r1
 800f612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f616:	f7f0 fe5f 	bl	80002d8 <__aeabi_dsub>
 800f61a:	3530      	adds	r5, #48	@ 0x30
 800f61c:	f806 5b01 	strb.w	r5, [r6], #1
 800f620:	4602      	mov	r2, r0
 800f622:	460b      	mov	r3, r1
 800f624:	42a6      	cmp	r6, r4
 800f626:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f62a:	f04f 0200 	mov.w	r2, #0
 800f62e:	d124      	bne.n	800f67a <_dtoa_r+0x662>
 800f630:	4bac      	ldr	r3, [pc, #688]	@ (800f8e4 <_dtoa_r+0x8cc>)
 800f632:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f636:	f7f0 fe51 	bl	80002dc <__adddf3>
 800f63a:	4602      	mov	r2, r0
 800f63c:	460b      	mov	r3, r1
 800f63e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f642:	f7f1 fa91 	bl	8000b68 <__aeabi_dcmpgt>
 800f646:	2800      	cmp	r0, #0
 800f648:	d145      	bne.n	800f6d6 <_dtoa_r+0x6be>
 800f64a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f64e:	49a5      	ldr	r1, [pc, #660]	@ (800f8e4 <_dtoa_r+0x8cc>)
 800f650:	2000      	movs	r0, #0
 800f652:	f7f0 fe41 	bl	80002d8 <__aeabi_dsub>
 800f656:	4602      	mov	r2, r0
 800f658:	460b      	mov	r3, r1
 800f65a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f65e:	f7f1 fa65 	bl	8000b2c <__aeabi_dcmplt>
 800f662:	2800      	cmp	r0, #0
 800f664:	f43f aef5 	beq.w	800f452 <_dtoa_r+0x43a>
 800f668:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f66a:	1e73      	subs	r3, r6, #1
 800f66c:	9315      	str	r3, [sp, #84]	@ 0x54
 800f66e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f672:	2b30      	cmp	r3, #48	@ 0x30
 800f674:	d0f8      	beq.n	800f668 <_dtoa_r+0x650>
 800f676:	9f04      	ldr	r7, [sp, #16]
 800f678:	e73e      	b.n	800f4f8 <_dtoa_r+0x4e0>
 800f67a:	4b9b      	ldr	r3, [pc, #620]	@ (800f8e8 <_dtoa_r+0x8d0>)
 800f67c:	f7f0 ffe4 	bl	8000648 <__aeabi_dmul>
 800f680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f684:	e7bc      	b.n	800f600 <_dtoa_r+0x5e8>
 800f686:	d10c      	bne.n	800f6a2 <_dtoa_r+0x68a>
 800f688:	4b98      	ldr	r3, [pc, #608]	@ (800f8ec <_dtoa_r+0x8d4>)
 800f68a:	2200      	movs	r2, #0
 800f68c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f690:	f7f0 ffda 	bl	8000648 <__aeabi_dmul>
 800f694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f698:	f7f1 fa5c 	bl	8000b54 <__aeabi_dcmpge>
 800f69c:	2800      	cmp	r0, #0
 800f69e:	f000 8157 	beq.w	800f950 <_dtoa_r+0x938>
 800f6a2:	2400      	movs	r4, #0
 800f6a4:	4625      	mov	r5, r4
 800f6a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6a8:	43db      	mvns	r3, r3
 800f6aa:	9304      	str	r3, [sp, #16]
 800f6ac:	4656      	mov	r6, sl
 800f6ae:	2700      	movs	r7, #0
 800f6b0:	4621      	mov	r1, r4
 800f6b2:	4658      	mov	r0, fp
 800f6b4:	f000 fafe 	bl	800fcb4 <_Bfree>
 800f6b8:	2d00      	cmp	r5, #0
 800f6ba:	d0dc      	beq.n	800f676 <_dtoa_r+0x65e>
 800f6bc:	b12f      	cbz	r7, 800f6ca <_dtoa_r+0x6b2>
 800f6be:	42af      	cmp	r7, r5
 800f6c0:	d003      	beq.n	800f6ca <_dtoa_r+0x6b2>
 800f6c2:	4639      	mov	r1, r7
 800f6c4:	4658      	mov	r0, fp
 800f6c6:	f000 faf5 	bl	800fcb4 <_Bfree>
 800f6ca:	4629      	mov	r1, r5
 800f6cc:	4658      	mov	r0, fp
 800f6ce:	f000 faf1 	bl	800fcb4 <_Bfree>
 800f6d2:	e7d0      	b.n	800f676 <_dtoa_r+0x65e>
 800f6d4:	9704      	str	r7, [sp, #16]
 800f6d6:	4633      	mov	r3, r6
 800f6d8:	461e      	mov	r6, r3
 800f6da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6de:	2a39      	cmp	r2, #57	@ 0x39
 800f6e0:	d107      	bne.n	800f6f2 <_dtoa_r+0x6da>
 800f6e2:	459a      	cmp	sl, r3
 800f6e4:	d1f8      	bne.n	800f6d8 <_dtoa_r+0x6c0>
 800f6e6:	9a04      	ldr	r2, [sp, #16]
 800f6e8:	3201      	adds	r2, #1
 800f6ea:	9204      	str	r2, [sp, #16]
 800f6ec:	2230      	movs	r2, #48	@ 0x30
 800f6ee:	f88a 2000 	strb.w	r2, [sl]
 800f6f2:	781a      	ldrb	r2, [r3, #0]
 800f6f4:	3201      	adds	r2, #1
 800f6f6:	701a      	strb	r2, [r3, #0]
 800f6f8:	e7bd      	b.n	800f676 <_dtoa_r+0x65e>
 800f6fa:	4b7b      	ldr	r3, [pc, #492]	@ (800f8e8 <_dtoa_r+0x8d0>)
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f7f0 ffa3 	bl	8000648 <__aeabi_dmul>
 800f702:	2200      	movs	r2, #0
 800f704:	2300      	movs	r3, #0
 800f706:	4604      	mov	r4, r0
 800f708:	460d      	mov	r5, r1
 800f70a:	f7f1 fa05 	bl	8000b18 <__aeabi_dcmpeq>
 800f70e:	2800      	cmp	r0, #0
 800f710:	f43f aebb 	beq.w	800f48a <_dtoa_r+0x472>
 800f714:	e6f0      	b.n	800f4f8 <_dtoa_r+0x4e0>
 800f716:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f718:	2a00      	cmp	r2, #0
 800f71a:	f000 80db 	beq.w	800f8d4 <_dtoa_r+0x8bc>
 800f71e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f720:	2a01      	cmp	r2, #1
 800f722:	f300 80bf 	bgt.w	800f8a4 <_dtoa_r+0x88c>
 800f726:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f728:	2a00      	cmp	r2, #0
 800f72a:	f000 80b7 	beq.w	800f89c <_dtoa_r+0x884>
 800f72e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f732:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f734:	4646      	mov	r6, r8
 800f736:	9a08      	ldr	r2, [sp, #32]
 800f738:	2101      	movs	r1, #1
 800f73a:	441a      	add	r2, r3
 800f73c:	4658      	mov	r0, fp
 800f73e:	4498      	add	r8, r3
 800f740:	9208      	str	r2, [sp, #32]
 800f742:	f000 fbb5 	bl	800feb0 <__i2b>
 800f746:	4605      	mov	r5, r0
 800f748:	b15e      	cbz	r6, 800f762 <_dtoa_r+0x74a>
 800f74a:	9b08      	ldr	r3, [sp, #32]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	dd08      	ble.n	800f762 <_dtoa_r+0x74a>
 800f750:	42b3      	cmp	r3, r6
 800f752:	9a08      	ldr	r2, [sp, #32]
 800f754:	bfa8      	it	ge
 800f756:	4633      	movge	r3, r6
 800f758:	eba8 0803 	sub.w	r8, r8, r3
 800f75c:	1af6      	subs	r6, r6, r3
 800f75e:	1ad3      	subs	r3, r2, r3
 800f760:	9308      	str	r3, [sp, #32]
 800f762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f764:	b1f3      	cbz	r3, 800f7a4 <_dtoa_r+0x78c>
 800f766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f000 80b7 	beq.w	800f8dc <_dtoa_r+0x8c4>
 800f76e:	b18c      	cbz	r4, 800f794 <_dtoa_r+0x77c>
 800f770:	4629      	mov	r1, r5
 800f772:	4622      	mov	r2, r4
 800f774:	4658      	mov	r0, fp
 800f776:	f000 fc5b 	bl	8010030 <__pow5mult>
 800f77a:	464a      	mov	r2, r9
 800f77c:	4601      	mov	r1, r0
 800f77e:	4605      	mov	r5, r0
 800f780:	4658      	mov	r0, fp
 800f782:	f000 fbab 	bl	800fedc <__multiply>
 800f786:	4649      	mov	r1, r9
 800f788:	9004      	str	r0, [sp, #16]
 800f78a:	4658      	mov	r0, fp
 800f78c:	f000 fa92 	bl	800fcb4 <_Bfree>
 800f790:	9b04      	ldr	r3, [sp, #16]
 800f792:	4699      	mov	r9, r3
 800f794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f796:	1b1a      	subs	r2, r3, r4
 800f798:	d004      	beq.n	800f7a4 <_dtoa_r+0x78c>
 800f79a:	4649      	mov	r1, r9
 800f79c:	4658      	mov	r0, fp
 800f79e:	f000 fc47 	bl	8010030 <__pow5mult>
 800f7a2:	4681      	mov	r9, r0
 800f7a4:	2101      	movs	r1, #1
 800f7a6:	4658      	mov	r0, fp
 800f7a8:	f000 fb82 	bl	800feb0 <__i2b>
 800f7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	f000 81cf 	beq.w	800fb54 <_dtoa_r+0xb3c>
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	4601      	mov	r1, r0
 800f7ba:	4658      	mov	r0, fp
 800f7bc:	f000 fc38 	bl	8010030 <__pow5mult>
 800f7c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	f300 8095 	bgt.w	800f8f4 <_dtoa_r+0x8dc>
 800f7ca:	9b02      	ldr	r3, [sp, #8]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f040 8087 	bne.w	800f8e0 <_dtoa_r+0x8c8>
 800f7d2:	9b03      	ldr	r3, [sp, #12]
 800f7d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f040 8089 	bne.w	800f8f0 <_dtoa_r+0x8d8>
 800f7de:	9b03      	ldr	r3, [sp, #12]
 800f7e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f7e4:	0d1b      	lsrs	r3, r3, #20
 800f7e6:	051b      	lsls	r3, r3, #20
 800f7e8:	b12b      	cbz	r3, 800f7f6 <_dtoa_r+0x7de>
 800f7ea:	9b08      	ldr	r3, [sp, #32]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	9308      	str	r3, [sp, #32]
 800f7f0:	f108 0801 	add.w	r8, r8, #1
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f000 81b0 	beq.w	800fb60 <_dtoa_r+0xb48>
 800f800:	6923      	ldr	r3, [r4, #16]
 800f802:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f806:	6918      	ldr	r0, [r3, #16]
 800f808:	f000 fb06 	bl	800fe18 <__hi0bits>
 800f80c:	f1c0 0020 	rsb	r0, r0, #32
 800f810:	9b08      	ldr	r3, [sp, #32]
 800f812:	4418      	add	r0, r3
 800f814:	f010 001f 	ands.w	r0, r0, #31
 800f818:	d077      	beq.n	800f90a <_dtoa_r+0x8f2>
 800f81a:	f1c0 0320 	rsb	r3, r0, #32
 800f81e:	2b04      	cmp	r3, #4
 800f820:	dd6b      	ble.n	800f8fa <_dtoa_r+0x8e2>
 800f822:	9b08      	ldr	r3, [sp, #32]
 800f824:	f1c0 001c 	rsb	r0, r0, #28
 800f828:	4403      	add	r3, r0
 800f82a:	4480      	add	r8, r0
 800f82c:	4406      	add	r6, r0
 800f82e:	9308      	str	r3, [sp, #32]
 800f830:	f1b8 0f00 	cmp.w	r8, #0
 800f834:	dd05      	ble.n	800f842 <_dtoa_r+0x82a>
 800f836:	4649      	mov	r1, r9
 800f838:	4642      	mov	r2, r8
 800f83a:	4658      	mov	r0, fp
 800f83c:	f000 fc52 	bl	80100e4 <__lshift>
 800f840:	4681      	mov	r9, r0
 800f842:	9b08      	ldr	r3, [sp, #32]
 800f844:	2b00      	cmp	r3, #0
 800f846:	dd05      	ble.n	800f854 <_dtoa_r+0x83c>
 800f848:	4621      	mov	r1, r4
 800f84a:	461a      	mov	r2, r3
 800f84c:	4658      	mov	r0, fp
 800f84e:	f000 fc49 	bl	80100e4 <__lshift>
 800f852:	4604      	mov	r4, r0
 800f854:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f856:	2b00      	cmp	r3, #0
 800f858:	d059      	beq.n	800f90e <_dtoa_r+0x8f6>
 800f85a:	4621      	mov	r1, r4
 800f85c:	4648      	mov	r0, r9
 800f85e:	f000 fcad 	bl	80101bc <__mcmp>
 800f862:	2800      	cmp	r0, #0
 800f864:	da53      	bge.n	800f90e <_dtoa_r+0x8f6>
 800f866:	1e7b      	subs	r3, r7, #1
 800f868:	9304      	str	r3, [sp, #16]
 800f86a:	4649      	mov	r1, r9
 800f86c:	2300      	movs	r3, #0
 800f86e:	220a      	movs	r2, #10
 800f870:	4658      	mov	r0, fp
 800f872:	f000 fa41 	bl	800fcf8 <__multadd>
 800f876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f878:	4681      	mov	r9, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	f000 8172 	beq.w	800fb64 <_dtoa_r+0xb4c>
 800f880:	2300      	movs	r3, #0
 800f882:	4629      	mov	r1, r5
 800f884:	220a      	movs	r2, #10
 800f886:	4658      	mov	r0, fp
 800f888:	f000 fa36 	bl	800fcf8 <__multadd>
 800f88c:	9b00      	ldr	r3, [sp, #0]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	4605      	mov	r5, r0
 800f892:	dc67      	bgt.n	800f964 <_dtoa_r+0x94c>
 800f894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f896:	2b02      	cmp	r3, #2
 800f898:	dc41      	bgt.n	800f91e <_dtoa_r+0x906>
 800f89a:	e063      	b.n	800f964 <_dtoa_r+0x94c>
 800f89c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f89e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f8a2:	e746      	b.n	800f732 <_dtoa_r+0x71a>
 800f8a4:	9b07      	ldr	r3, [sp, #28]
 800f8a6:	1e5c      	subs	r4, r3, #1
 800f8a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8aa:	42a3      	cmp	r3, r4
 800f8ac:	bfbf      	itttt	lt
 800f8ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f8b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f8b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f8b4:	1ae3      	sublt	r3, r4, r3
 800f8b6:	bfb4      	ite	lt
 800f8b8:	18d2      	addlt	r2, r2, r3
 800f8ba:	1b1c      	subge	r4, r3, r4
 800f8bc:	9b07      	ldr	r3, [sp, #28]
 800f8be:	bfbc      	itt	lt
 800f8c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f8c2:	2400      	movlt	r4, #0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	bfb5      	itete	lt
 800f8c8:	eba8 0603 	sublt.w	r6, r8, r3
 800f8cc:	9b07      	ldrge	r3, [sp, #28]
 800f8ce:	2300      	movlt	r3, #0
 800f8d0:	4646      	movge	r6, r8
 800f8d2:	e730      	b.n	800f736 <_dtoa_r+0x71e>
 800f8d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f8d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f8d8:	4646      	mov	r6, r8
 800f8da:	e735      	b.n	800f748 <_dtoa_r+0x730>
 800f8dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f8de:	e75c      	b.n	800f79a <_dtoa_r+0x782>
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	e788      	b.n	800f7f6 <_dtoa_r+0x7de>
 800f8e4:	3fe00000 	.word	0x3fe00000
 800f8e8:	40240000 	.word	0x40240000
 800f8ec:	40140000 	.word	0x40140000
 800f8f0:	9b02      	ldr	r3, [sp, #8]
 800f8f2:	e780      	b.n	800f7f6 <_dtoa_r+0x7de>
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8f8:	e782      	b.n	800f800 <_dtoa_r+0x7e8>
 800f8fa:	d099      	beq.n	800f830 <_dtoa_r+0x818>
 800f8fc:	9a08      	ldr	r2, [sp, #32]
 800f8fe:	331c      	adds	r3, #28
 800f900:	441a      	add	r2, r3
 800f902:	4498      	add	r8, r3
 800f904:	441e      	add	r6, r3
 800f906:	9208      	str	r2, [sp, #32]
 800f908:	e792      	b.n	800f830 <_dtoa_r+0x818>
 800f90a:	4603      	mov	r3, r0
 800f90c:	e7f6      	b.n	800f8fc <_dtoa_r+0x8e4>
 800f90e:	9b07      	ldr	r3, [sp, #28]
 800f910:	9704      	str	r7, [sp, #16]
 800f912:	2b00      	cmp	r3, #0
 800f914:	dc20      	bgt.n	800f958 <_dtoa_r+0x940>
 800f916:	9300      	str	r3, [sp, #0]
 800f918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f91a:	2b02      	cmp	r3, #2
 800f91c:	dd1e      	ble.n	800f95c <_dtoa_r+0x944>
 800f91e:	9b00      	ldr	r3, [sp, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	f47f aec0 	bne.w	800f6a6 <_dtoa_r+0x68e>
 800f926:	4621      	mov	r1, r4
 800f928:	2205      	movs	r2, #5
 800f92a:	4658      	mov	r0, fp
 800f92c:	f000 f9e4 	bl	800fcf8 <__multadd>
 800f930:	4601      	mov	r1, r0
 800f932:	4604      	mov	r4, r0
 800f934:	4648      	mov	r0, r9
 800f936:	f000 fc41 	bl	80101bc <__mcmp>
 800f93a:	2800      	cmp	r0, #0
 800f93c:	f77f aeb3 	ble.w	800f6a6 <_dtoa_r+0x68e>
 800f940:	4656      	mov	r6, sl
 800f942:	2331      	movs	r3, #49	@ 0x31
 800f944:	f806 3b01 	strb.w	r3, [r6], #1
 800f948:	9b04      	ldr	r3, [sp, #16]
 800f94a:	3301      	adds	r3, #1
 800f94c:	9304      	str	r3, [sp, #16]
 800f94e:	e6ae      	b.n	800f6ae <_dtoa_r+0x696>
 800f950:	9c07      	ldr	r4, [sp, #28]
 800f952:	9704      	str	r7, [sp, #16]
 800f954:	4625      	mov	r5, r4
 800f956:	e7f3      	b.n	800f940 <_dtoa_r+0x928>
 800f958:	9b07      	ldr	r3, [sp, #28]
 800f95a:	9300      	str	r3, [sp, #0]
 800f95c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f95e:	2b00      	cmp	r3, #0
 800f960:	f000 8104 	beq.w	800fb6c <_dtoa_r+0xb54>
 800f964:	2e00      	cmp	r6, #0
 800f966:	dd05      	ble.n	800f974 <_dtoa_r+0x95c>
 800f968:	4629      	mov	r1, r5
 800f96a:	4632      	mov	r2, r6
 800f96c:	4658      	mov	r0, fp
 800f96e:	f000 fbb9 	bl	80100e4 <__lshift>
 800f972:	4605      	mov	r5, r0
 800f974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f976:	2b00      	cmp	r3, #0
 800f978:	d05a      	beq.n	800fa30 <_dtoa_r+0xa18>
 800f97a:	6869      	ldr	r1, [r5, #4]
 800f97c:	4658      	mov	r0, fp
 800f97e:	f000 f959 	bl	800fc34 <_Balloc>
 800f982:	4606      	mov	r6, r0
 800f984:	b928      	cbnz	r0, 800f992 <_dtoa_r+0x97a>
 800f986:	4b84      	ldr	r3, [pc, #528]	@ (800fb98 <_dtoa_r+0xb80>)
 800f988:	4602      	mov	r2, r0
 800f98a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f98e:	f7ff bb5a 	b.w	800f046 <_dtoa_r+0x2e>
 800f992:	692a      	ldr	r2, [r5, #16]
 800f994:	3202      	adds	r2, #2
 800f996:	0092      	lsls	r2, r2, #2
 800f998:	f105 010c 	add.w	r1, r5, #12
 800f99c:	300c      	adds	r0, #12
 800f99e:	f7ff fa9c 	bl	800eeda <memcpy>
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	4631      	mov	r1, r6
 800f9a6:	4658      	mov	r0, fp
 800f9a8:	f000 fb9c 	bl	80100e4 <__lshift>
 800f9ac:	f10a 0301 	add.w	r3, sl, #1
 800f9b0:	9307      	str	r3, [sp, #28]
 800f9b2:	9b00      	ldr	r3, [sp, #0]
 800f9b4:	4453      	add	r3, sl
 800f9b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9b8:	9b02      	ldr	r3, [sp, #8]
 800f9ba:	f003 0301 	and.w	r3, r3, #1
 800f9be:	462f      	mov	r7, r5
 800f9c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9c2:	4605      	mov	r5, r0
 800f9c4:	9b07      	ldr	r3, [sp, #28]
 800f9c6:	4621      	mov	r1, r4
 800f9c8:	3b01      	subs	r3, #1
 800f9ca:	4648      	mov	r0, r9
 800f9cc:	9300      	str	r3, [sp, #0]
 800f9ce:	f7ff fa99 	bl	800ef04 <quorem>
 800f9d2:	4639      	mov	r1, r7
 800f9d4:	9002      	str	r0, [sp, #8]
 800f9d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f9da:	4648      	mov	r0, r9
 800f9dc:	f000 fbee 	bl	80101bc <__mcmp>
 800f9e0:	462a      	mov	r2, r5
 800f9e2:	9008      	str	r0, [sp, #32]
 800f9e4:	4621      	mov	r1, r4
 800f9e6:	4658      	mov	r0, fp
 800f9e8:	f000 fc04 	bl	80101f4 <__mdiff>
 800f9ec:	68c2      	ldr	r2, [r0, #12]
 800f9ee:	4606      	mov	r6, r0
 800f9f0:	bb02      	cbnz	r2, 800fa34 <_dtoa_r+0xa1c>
 800f9f2:	4601      	mov	r1, r0
 800f9f4:	4648      	mov	r0, r9
 800f9f6:	f000 fbe1 	bl	80101bc <__mcmp>
 800f9fa:	4602      	mov	r2, r0
 800f9fc:	4631      	mov	r1, r6
 800f9fe:	4658      	mov	r0, fp
 800fa00:	920e      	str	r2, [sp, #56]	@ 0x38
 800fa02:	f000 f957 	bl	800fcb4 <_Bfree>
 800fa06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa0a:	9e07      	ldr	r6, [sp, #28]
 800fa0c:	ea43 0102 	orr.w	r1, r3, r2
 800fa10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa12:	4319      	orrs	r1, r3
 800fa14:	d110      	bne.n	800fa38 <_dtoa_r+0xa20>
 800fa16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa1a:	d029      	beq.n	800fa70 <_dtoa_r+0xa58>
 800fa1c:	9b08      	ldr	r3, [sp, #32]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	dd02      	ble.n	800fa28 <_dtoa_r+0xa10>
 800fa22:	9b02      	ldr	r3, [sp, #8]
 800fa24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fa28:	9b00      	ldr	r3, [sp, #0]
 800fa2a:	f883 8000 	strb.w	r8, [r3]
 800fa2e:	e63f      	b.n	800f6b0 <_dtoa_r+0x698>
 800fa30:	4628      	mov	r0, r5
 800fa32:	e7bb      	b.n	800f9ac <_dtoa_r+0x994>
 800fa34:	2201      	movs	r2, #1
 800fa36:	e7e1      	b.n	800f9fc <_dtoa_r+0x9e4>
 800fa38:	9b08      	ldr	r3, [sp, #32]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	db04      	blt.n	800fa48 <_dtoa_r+0xa30>
 800fa3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fa40:	430b      	orrs	r3, r1
 800fa42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa44:	430b      	orrs	r3, r1
 800fa46:	d120      	bne.n	800fa8a <_dtoa_r+0xa72>
 800fa48:	2a00      	cmp	r2, #0
 800fa4a:	dded      	ble.n	800fa28 <_dtoa_r+0xa10>
 800fa4c:	4649      	mov	r1, r9
 800fa4e:	2201      	movs	r2, #1
 800fa50:	4658      	mov	r0, fp
 800fa52:	f000 fb47 	bl	80100e4 <__lshift>
 800fa56:	4621      	mov	r1, r4
 800fa58:	4681      	mov	r9, r0
 800fa5a:	f000 fbaf 	bl	80101bc <__mcmp>
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	dc03      	bgt.n	800fa6a <_dtoa_r+0xa52>
 800fa62:	d1e1      	bne.n	800fa28 <_dtoa_r+0xa10>
 800fa64:	f018 0f01 	tst.w	r8, #1
 800fa68:	d0de      	beq.n	800fa28 <_dtoa_r+0xa10>
 800fa6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa6e:	d1d8      	bne.n	800fa22 <_dtoa_r+0xa0a>
 800fa70:	9a00      	ldr	r2, [sp, #0]
 800fa72:	2339      	movs	r3, #57	@ 0x39
 800fa74:	7013      	strb	r3, [r2, #0]
 800fa76:	4633      	mov	r3, r6
 800fa78:	461e      	mov	r6, r3
 800fa7a:	3b01      	subs	r3, #1
 800fa7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fa80:	2a39      	cmp	r2, #57	@ 0x39
 800fa82:	d052      	beq.n	800fb2a <_dtoa_r+0xb12>
 800fa84:	3201      	adds	r2, #1
 800fa86:	701a      	strb	r2, [r3, #0]
 800fa88:	e612      	b.n	800f6b0 <_dtoa_r+0x698>
 800fa8a:	2a00      	cmp	r2, #0
 800fa8c:	dd07      	ble.n	800fa9e <_dtoa_r+0xa86>
 800fa8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa92:	d0ed      	beq.n	800fa70 <_dtoa_r+0xa58>
 800fa94:	9a00      	ldr	r2, [sp, #0]
 800fa96:	f108 0301 	add.w	r3, r8, #1
 800fa9a:	7013      	strb	r3, [r2, #0]
 800fa9c:	e608      	b.n	800f6b0 <_dtoa_r+0x698>
 800fa9e:	9b07      	ldr	r3, [sp, #28]
 800faa0:	9a07      	ldr	r2, [sp, #28]
 800faa2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800faa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800faa8:	4293      	cmp	r3, r2
 800faaa:	d028      	beq.n	800fafe <_dtoa_r+0xae6>
 800faac:	4649      	mov	r1, r9
 800faae:	2300      	movs	r3, #0
 800fab0:	220a      	movs	r2, #10
 800fab2:	4658      	mov	r0, fp
 800fab4:	f000 f920 	bl	800fcf8 <__multadd>
 800fab8:	42af      	cmp	r7, r5
 800faba:	4681      	mov	r9, r0
 800fabc:	f04f 0300 	mov.w	r3, #0
 800fac0:	f04f 020a 	mov.w	r2, #10
 800fac4:	4639      	mov	r1, r7
 800fac6:	4658      	mov	r0, fp
 800fac8:	d107      	bne.n	800fada <_dtoa_r+0xac2>
 800faca:	f000 f915 	bl	800fcf8 <__multadd>
 800face:	4607      	mov	r7, r0
 800fad0:	4605      	mov	r5, r0
 800fad2:	9b07      	ldr	r3, [sp, #28]
 800fad4:	3301      	adds	r3, #1
 800fad6:	9307      	str	r3, [sp, #28]
 800fad8:	e774      	b.n	800f9c4 <_dtoa_r+0x9ac>
 800fada:	f000 f90d 	bl	800fcf8 <__multadd>
 800fade:	4629      	mov	r1, r5
 800fae0:	4607      	mov	r7, r0
 800fae2:	2300      	movs	r3, #0
 800fae4:	220a      	movs	r2, #10
 800fae6:	4658      	mov	r0, fp
 800fae8:	f000 f906 	bl	800fcf8 <__multadd>
 800faec:	4605      	mov	r5, r0
 800faee:	e7f0      	b.n	800fad2 <_dtoa_r+0xaba>
 800faf0:	9b00      	ldr	r3, [sp, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	bfcc      	ite	gt
 800faf6:	461e      	movgt	r6, r3
 800faf8:	2601      	movle	r6, #1
 800fafa:	4456      	add	r6, sl
 800fafc:	2700      	movs	r7, #0
 800fafe:	4649      	mov	r1, r9
 800fb00:	2201      	movs	r2, #1
 800fb02:	4658      	mov	r0, fp
 800fb04:	f000 faee 	bl	80100e4 <__lshift>
 800fb08:	4621      	mov	r1, r4
 800fb0a:	4681      	mov	r9, r0
 800fb0c:	f000 fb56 	bl	80101bc <__mcmp>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	dcb0      	bgt.n	800fa76 <_dtoa_r+0xa5e>
 800fb14:	d102      	bne.n	800fb1c <_dtoa_r+0xb04>
 800fb16:	f018 0f01 	tst.w	r8, #1
 800fb1a:	d1ac      	bne.n	800fa76 <_dtoa_r+0xa5e>
 800fb1c:	4633      	mov	r3, r6
 800fb1e:	461e      	mov	r6, r3
 800fb20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb24:	2a30      	cmp	r2, #48	@ 0x30
 800fb26:	d0fa      	beq.n	800fb1e <_dtoa_r+0xb06>
 800fb28:	e5c2      	b.n	800f6b0 <_dtoa_r+0x698>
 800fb2a:	459a      	cmp	sl, r3
 800fb2c:	d1a4      	bne.n	800fa78 <_dtoa_r+0xa60>
 800fb2e:	9b04      	ldr	r3, [sp, #16]
 800fb30:	3301      	adds	r3, #1
 800fb32:	9304      	str	r3, [sp, #16]
 800fb34:	2331      	movs	r3, #49	@ 0x31
 800fb36:	f88a 3000 	strb.w	r3, [sl]
 800fb3a:	e5b9      	b.n	800f6b0 <_dtoa_r+0x698>
 800fb3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fb3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fb9c <_dtoa_r+0xb84>
 800fb42:	b11b      	cbz	r3, 800fb4c <_dtoa_r+0xb34>
 800fb44:	f10a 0308 	add.w	r3, sl, #8
 800fb48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fb4a:	6013      	str	r3, [r2, #0]
 800fb4c:	4650      	mov	r0, sl
 800fb4e:	b019      	add	sp, #100	@ 0x64
 800fb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	f77f ae37 	ble.w	800f7ca <_dtoa_r+0x7b2>
 800fb5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb60:	2001      	movs	r0, #1
 800fb62:	e655      	b.n	800f810 <_dtoa_r+0x7f8>
 800fb64:	9b00      	ldr	r3, [sp, #0]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	f77f aed6 	ble.w	800f918 <_dtoa_r+0x900>
 800fb6c:	4656      	mov	r6, sl
 800fb6e:	4621      	mov	r1, r4
 800fb70:	4648      	mov	r0, r9
 800fb72:	f7ff f9c7 	bl	800ef04 <quorem>
 800fb76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fb7a:	f806 8b01 	strb.w	r8, [r6], #1
 800fb7e:	9b00      	ldr	r3, [sp, #0]
 800fb80:	eba6 020a 	sub.w	r2, r6, sl
 800fb84:	4293      	cmp	r3, r2
 800fb86:	ddb3      	ble.n	800faf0 <_dtoa_r+0xad8>
 800fb88:	4649      	mov	r1, r9
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	220a      	movs	r2, #10
 800fb8e:	4658      	mov	r0, fp
 800fb90:	f000 f8b2 	bl	800fcf8 <__multadd>
 800fb94:	4681      	mov	r9, r0
 800fb96:	e7ea      	b.n	800fb6e <_dtoa_r+0xb56>
 800fb98:	080134f9 	.word	0x080134f9
 800fb9c:	0801347d 	.word	0x0801347d

0800fba0 <_free_r>:
 800fba0:	b538      	push	{r3, r4, r5, lr}
 800fba2:	4605      	mov	r5, r0
 800fba4:	2900      	cmp	r1, #0
 800fba6:	d041      	beq.n	800fc2c <_free_r+0x8c>
 800fba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbac:	1f0c      	subs	r4, r1, #4
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	bfb8      	it	lt
 800fbb2:	18e4      	addlt	r4, r4, r3
 800fbb4:	f7fe f8e2 	bl	800dd7c <__malloc_lock>
 800fbb8:	4a1d      	ldr	r2, [pc, #116]	@ (800fc30 <_free_r+0x90>)
 800fbba:	6813      	ldr	r3, [r2, #0]
 800fbbc:	b933      	cbnz	r3, 800fbcc <_free_r+0x2c>
 800fbbe:	6063      	str	r3, [r4, #4]
 800fbc0:	6014      	str	r4, [r2, #0]
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbc8:	f7fe b8de 	b.w	800dd88 <__malloc_unlock>
 800fbcc:	42a3      	cmp	r3, r4
 800fbce:	d908      	bls.n	800fbe2 <_free_r+0x42>
 800fbd0:	6820      	ldr	r0, [r4, #0]
 800fbd2:	1821      	adds	r1, r4, r0
 800fbd4:	428b      	cmp	r3, r1
 800fbd6:	bf01      	itttt	eq
 800fbd8:	6819      	ldreq	r1, [r3, #0]
 800fbda:	685b      	ldreq	r3, [r3, #4]
 800fbdc:	1809      	addeq	r1, r1, r0
 800fbde:	6021      	streq	r1, [r4, #0]
 800fbe0:	e7ed      	b.n	800fbbe <_free_r+0x1e>
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	b10b      	cbz	r3, 800fbec <_free_r+0x4c>
 800fbe8:	42a3      	cmp	r3, r4
 800fbea:	d9fa      	bls.n	800fbe2 <_free_r+0x42>
 800fbec:	6811      	ldr	r1, [r2, #0]
 800fbee:	1850      	adds	r0, r2, r1
 800fbf0:	42a0      	cmp	r0, r4
 800fbf2:	d10b      	bne.n	800fc0c <_free_r+0x6c>
 800fbf4:	6820      	ldr	r0, [r4, #0]
 800fbf6:	4401      	add	r1, r0
 800fbf8:	1850      	adds	r0, r2, r1
 800fbfa:	4283      	cmp	r3, r0
 800fbfc:	6011      	str	r1, [r2, #0]
 800fbfe:	d1e0      	bne.n	800fbc2 <_free_r+0x22>
 800fc00:	6818      	ldr	r0, [r3, #0]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	6053      	str	r3, [r2, #4]
 800fc06:	4408      	add	r0, r1
 800fc08:	6010      	str	r0, [r2, #0]
 800fc0a:	e7da      	b.n	800fbc2 <_free_r+0x22>
 800fc0c:	d902      	bls.n	800fc14 <_free_r+0x74>
 800fc0e:	230c      	movs	r3, #12
 800fc10:	602b      	str	r3, [r5, #0]
 800fc12:	e7d6      	b.n	800fbc2 <_free_r+0x22>
 800fc14:	6820      	ldr	r0, [r4, #0]
 800fc16:	1821      	adds	r1, r4, r0
 800fc18:	428b      	cmp	r3, r1
 800fc1a:	bf04      	itt	eq
 800fc1c:	6819      	ldreq	r1, [r3, #0]
 800fc1e:	685b      	ldreq	r3, [r3, #4]
 800fc20:	6063      	str	r3, [r4, #4]
 800fc22:	bf04      	itt	eq
 800fc24:	1809      	addeq	r1, r1, r0
 800fc26:	6021      	streq	r1, [r4, #0]
 800fc28:	6054      	str	r4, [r2, #4]
 800fc2a:	e7ca      	b.n	800fbc2 <_free_r+0x22>
 800fc2c:	bd38      	pop	{r3, r4, r5, pc}
 800fc2e:	bf00      	nop
 800fc30:	200005bc 	.word	0x200005bc

0800fc34 <_Balloc>:
 800fc34:	b570      	push	{r4, r5, r6, lr}
 800fc36:	69c6      	ldr	r6, [r0, #28]
 800fc38:	4604      	mov	r4, r0
 800fc3a:	460d      	mov	r5, r1
 800fc3c:	b976      	cbnz	r6, 800fc5c <_Balloc+0x28>
 800fc3e:	2010      	movs	r0, #16
 800fc40:	f7fd ffea 	bl	800dc18 <malloc>
 800fc44:	4602      	mov	r2, r0
 800fc46:	61e0      	str	r0, [r4, #28]
 800fc48:	b920      	cbnz	r0, 800fc54 <_Balloc+0x20>
 800fc4a:	4b18      	ldr	r3, [pc, #96]	@ (800fcac <_Balloc+0x78>)
 800fc4c:	4818      	ldr	r0, [pc, #96]	@ (800fcb0 <_Balloc+0x7c>)
 800fc4e:	216b      	movs	r1, #107	@ 0x6b
 800fc50:	f7fd ffb2 	bl	800dbb8 <__assert_func>
 800fc54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc58:	6006      	str	r6, [r0, #0]
 800fc5a:	60c6      	str	r6, [r0, #12]
 800fc5c:	69e6      	ldr	r6, [r4, #28]
 800fc5e:	68f3      	ldr	r3, [r6, #12]
 800fc60:	b183      	cbz	r3, 800fc84 <_Balloc+0x50>
 800fc62:	69e3      	ldr	r3, [r4, #28]
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc6a:	b9b8      	cbnz	r0, 800fc9c <_Balloc+0x68>
 800fc6c:	2101      	movs	r1, #1
 800fc6e:	fa01 f605 	lsl.w	r6, r1, r5
 800fc72:	1d72      	adds	r2, r6, #5
 800fc74:	0092      	lsls	r2, r2, #2
 800fc76:	4620      	mov	r0, r4
 800fc78:	f001 ff0a 	bl	8011a90 <_calloc_r>
 800fc7c:	b160      	cbz	r0, 800fc98 <_Balloc+0x64>
 800fc7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc82:	e00e      	b.n	800fca2 <_Balloc+0x6e>
 800fc84:	2221      	movs	r2, #33	@ 0x21
 800fc86:	2104      	movs	r1, #4
 800fc88:	4620      	mov	r0, r4
 800fc8a:	f001 ff01 	bl	8011a90 <_calloc_r>
 800fc8e:	69e3      	ldr	r3, [r4, #28]
 800fc90:	60f0      	str	r0, [r6, #12]
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1e4      	bne.n	800fc62 <_Balloc+0x2e>
 800fc98:	2000      	movs	r0, #0
 800fc9a:	bd70      	pop	{r4, r5, r6, pc}
 800fc9c:	6802      	ldr	r2, [r0, #0]
 800fc9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fca2:	2300      	movs	r3, #0
 800fca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fca8:	e7f7      	b.n	800fc9a <_Balloc+0x66>
 800fcaa:	bf00      	nop
 800fcac:	0801348a 	.word	0x0801348a
 800fcb0:	0801350a 	.word	0x0801350a

0800fcb4 <_Bfree>:
 800fcb4:	b570      	push	{r4, r5, r6, lr}
 800fcb6:	69c6      	ldr	r6, [r0, #28]
 800fcb8:	4605      	mov	r5, r0
 800fcba:	460c      	mov	r4, r1
 800fcbc:	b976      	cbnz	r6, 800fcdc <_Bfree+0x28>
 800fcbe:	2010      	movs	r0, #16
 800fcc0:	f7fd ffaa 	bl	800dc18 <malloc>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	61e8      	str	r0, [r5, #28]
 800fcc8:	b920      	cbnz	r0, 800fcd4 <_Bfree+0x20>
 800fcca:	4b09      	ldr	r3, [pc, #36]	@ (800fcf0 <_Bfree+0x3c>)
 800fccc:	4809      	ldr	r0, [pc, #36]	@ (800fcf4 <_Bfree+0x40>)
 800fcce:	218f      	movs	r1, #143	@ 0x8f
 800fcd0:	f7fd ff72 	bl	800dbb8 <__assert_func>
 800fcd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fcd8:	6006      	str	r6, [r0, #0]
 800fcda:	60c6      	str	r6, [r0, #12]
 800fcdc:	b13c      	cbz	r4, 800fcee <_Bfree+0x3a>
 800fcde:	69eb      	ldr	r3, [r5, #28]
 800fce0:	6862      	ldr	r2, [r4, #4]
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fce8:	6021      	str	r1, [r4, #0]
 800fcea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fcee:	bd70      	pop	{r4, r5, r6, pc}
 800fcf0:	0801348a 	.word	0x0801348a
 800fcf4:	0801350a 	.word	0x0801350a

0800fcf8 <__multadd>:
 800fcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcfc:	690d      	ldr	r5, [r1, #16]
 800fcfe:	4607      	mov	r7, r0
 800fd00:	460c      	mov	r4, r1
 800fd02:	461e      	mov	r6, r3
 800fd04:	f101 0c14 	add.w	ip, r1, #20
 800fd08:	2000      	movs	r0, #0
 800fd0a:	f8dc 3000 	ldr.w	r3, [ip]
 800fd0e:	b299      	uxth	r1, r3
 800fd10:	fb02 6101 	mla	r1, r2, r1, r6
 800fd14:	0c1e      	lsrs	r6, r3, #16
 800fd16:	0c0b      	lsrs	r3, r1, #16
 800fd18:	fb02 3306 	mla	r3, r2, r6, r3
 800fd1c:	b289      	uxth	r1, r1
 800fd1e:	3001      	adds	r0, #1
 800fd20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fd24:	4285      	cmp	r5, r0
 800fd26:	f84c 1b04 	str.w	r1, [ip], #4
 800fd2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fd2e:	dcec      	bgt.n	800fd0a <__multadd+0x12>
 800fd30:	b30e      	cbz	r6, 800fd76 <__multadd+0x7e>
 800fd32:	68a3      	ldr	r3, [r4, #8]
 800fd34:	42ab      	cmp	r3, r5
 800fd36:	dc19      	bgt.n	800fd6c <__multadd+0x74>
 800fd38:	6861      	ldr	r1, [r4, #4]
 800fd3a:	4638      	mov	r0, r7
 800fd3c:	3101      	adds	r1, #1
 800fd3e:	f7ff ff79 	bl	800fc34 <_Balloc>
 800fd42:	4680      	mov	r8, r0
 800fd44:	b928      	cbnz	r0, 800fd52 <__multadd+0x5a>
 800fd46:	4602      	mov	r2, r0
 800fd48:	4b0c      	ldr	r3, [pc, #48]	@ (800fd7c <__multadd+0x84>)
 800fd4a:	480d      	ldr	r0, [pc, #52]	@ (800fd80 <__multadd+0x88>)
 800fd4c:	21ba      	movs	r1, #186	@ 0xba
 800fd4e:	f7fd ff33 	bl	800dbb8 <__assert_func>
 800fd52:	6922      	ldr	r2, [r4, #16]
 800fd54:	3202      	adds	r2, #2
 800fd56:	f104 010c 	add.w	r1, r4, #12
 800fd5a:	0092      	lsls	r2, r2, #2
 800fd5c:	300c      	adds	r0, #12
 800fd5e:	f7ff f8bc 	bl	800eeda <memcpy>
 800fd62:	4621      	mov	r1, r4
 800fd64:	4638      	mov	r0, r7
 800fd66:	f7ff ffa5 	bl	800fcb4 <_Bfree>
 800fd6a:	4644      	mov	r4, r8
 800fd6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd70:	3501      	adds	r5, #1
 800fd72:	615e      	str	r6, [r3, #20]
 800fd74:	6125      	str	r5, [r4, #16]
 800fd76:	4620      	mov	r0, r4
 800fd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd7c:	080134f9 	.word	0x080134f9
 800fd80:	0801350a 	.word	0x0801350a

0800fd84 <__s2b>:
 800fd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd88:	460c      	mov	r4, r1
 800fd8a:	4615      	mov	r5, r2
 800fd8c:	461f      	mov	r7, r3
 800fd8e:	2209      	movs	r2, #9
 800fd90:	3308      	adds	r3, #8
 800fd92:	4606      	mov	r6, r0
 800fd94:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd98:	2100      	movs	r1, #0
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	db09      	blt.n	800fdb4 <__s2b+0x30>
 800fda0:	4630      	mov	r0, r6
 800fda2:	f7ff ff47 	bl	800fc34 <_Balloc>
 800fda6:	b940      	cbnz	r0, 800fdba <__s2b+0x36>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	4b19      	ldr	r3, [pc, #100]	@ (800fe10 <__s2b+0x8c>)
 800fdac:	4819      	ldr	r0, [pc, #100]	@ (800fe14 <__s2b+0x90>)
 800fdae:	21d3      	movs	r1, #211	@ 0xd3
 800fdb0:	f7fd ff02 	bl	800dbb8 <__assert_func>
 800fdb4:	0052      	lsls	r2, r2, #1
 800fdb6:	3101      	adds	r1, #1
 800fdb8:	e7f0      	b.n	800fd9c <__s2b+0x18>
 800fdba:	9b08      	ldr	r3, [sp, #32]
 800fdbc:	6143      	str	r3, [r0, #20]
 800fdbe:	2d09      	cmp	r5, #9
 800fdc0:	f04f 0301 	mov.w	r3, #1
 800fdc4:	6103      	str	r3, [r0, #16]
 800fdc6:	dd16      	ble.n	800fdf6 <__s2b+0x72>
 800fdc8:	f104 0909 	add.w	r9, r4, #9
 800fdcc:	46c8      	mov	r8, r9
 800fdce:	442c      	add	r4, r5
 800fdd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fdd4:	4601      	mov	r1, r0
 800fdd6:	3b30      	subs	r3, #48	@ 0x30
 800fdd8:	220a      	movs	r2, #10
 800fdda:	4630      	mov	r0, r6
 800fddc:	f7ff ff8c 	bl	800fcf8 <__multadd>
 800fde0:	45a0      	cmp	r8, r4
 800fde2:	d1f5      	bne.n	800fdd0 <__s2b+0x4c>
 800fde4:	f1a5 0408 	sub.w	r4, r5, #8
 800fde8:	444c      	add	r4, r9
 800fdea:	1b2d      	subs	r5, r5, r4
 800fdec:	1963      	adds	r3, r4, r5
 800fdee:	42bb      	cmp	r3, r7
 800fdf0:	db04      	blt.n	800fdfc <__s2b+0x78>
 800fdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdf6:	340a      	adds	r4, #10
 800fdf8:	2509      	movs	r5, #9
 800fdfa:	e7f6      	b.n	800fdea <__s2b+0x66>
 800fdfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fe00:	4601      	mov	r1, r0
 800fe02:	3b30      	subs	r3, #48	@ 0x30
 800fe04:	220a      	movs	r2, #10
 800fe06:	4630      	mov	r0, r6
 800fe08:	f7ff ff76 	bl	800fcf8 <__multadd>
 800fe0c:	e7ee      	b.n	800fdec <__s2b+0x68>
 800fe0e:	bf00      	nop
 800fe10:	080134f9 	.word	0x080134f9
 800fe14:	0801350a 	.word	0x0801350a

0800fe18 <__hi0bits>:
 800fe18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	bf36      	itet	cc
 800fe20:	0403      	lslcc	r3, r0, #16
 800fe22:	2000      	movcs	r0, #0
 800fe24:	2010      	movcc	r0, #16
 800fe26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fe2a:	bf3c      	itt	cc
 800fe2c:	021b      	lslcc	r3, r3, #8
 800fe2e:	3008      	addcc	r0, #8
 800fe30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe34:	bf3c      	itt	cc
 800fe36:	011b      	lslcc	r3, r3, #4
 800fe38:	3004      	addcc	r0, #4
 800fe3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe3e:	bf3c      	itt	cc
 800fe40:	009b      	lslcc	r3, r3, #2
 800fe42:	3002      	addcc	r0, #2
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	db05      	blt.n	800fe54 <__hi0bits+0x3c>
 800fe48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fe4c:	f100 0001 	add.w	r0, r0, #1
 800fe50:	bf08      	it	eq
 800fe52:	2020      	moveq	r0, #32
 800fe54:	4770      	bx	lr

0800fe56 <__lo0bits>:
 800fe56:	6803      	ldr	r3, [r0, #0]
 800fe58:	4602      	mov	r2, r0
 800fe5a:	f013 0007 	ands.w	r0, r3, #7
 800fe5e:	d00b      	beq.n	800fe78 <__lo0bits+0x22>
 800fe60:	07d9      	lsls	r1, r3, #31
 800fe62:	d421      	bmi.n	800fea8 <__lo0bits+0x52>
 800fe64:	0798      	lsls	r0, r3, #30
 800fe66:	bf49      	itett	mi
 800fe68:	085b      	lsrmi	r3, r3, #1
 800fe6a:	089b      	lsrpl	r3, r3, #2
 800fe6c:	2001      	movmi	r0, #1
 800fe6e:	6013      	strmi	r3, [r2, #0]
 800fe70:	bf5c      	itt	pl
 800fe72:	6013      	strpl	r3, [r2, #0]
 800fe74:	2002      	movpl	r0, #2
 800fe76:	4770      	bx	lr
 800fe78:	b299      	uxth	r1, r3
 800fe7a:	b909      	cbnz	r1, 800fe80 <__lo0bits+0x2a>
 800fe7c:	0c1b      	lsrs	r3, r3, #16
 800fe7e:	2010      	movs	r0, #16
 800fe80:	b2d9      	uxtb	r1, r3
 800fe82:	b909      	cbnz	r1, 800fe88 <__lo0bits+0x32>
 800fe84:	3008      	adds	r0, #8
 800fe86:	0a1b      	lsrs	r3, r3, #8
 800fe88:	0719      	lsls	r1, r3, #28
 800fe8a:	bf04      	itt	eq
 800fe8c:	091b      	lsreq	r3, r3, #4
 800fe8e:	3004      	addeq	r0, #4
 800fe90:	0799      	lsls	r1, r3, #30
 800fe92:	bf04      	itt	eq
 800fe94:	089b      	lsreq	r3, r3, #2
 800fe96:	3002      	addeq	r0, #2
 800fe98:	07d9      	lsls	r1, r3, #31
 800fe9a:	d403      	bmi.n	800fea4 <__lo0bits+0x4e>
 800fe9c:	085b      	lsrs	r3, r3, #1
 800fe9e:	f100 0001 	add.w	r0, r0, #1
 800fea2:	d003      	beq.n	800feac <__lo0bits+0x56>
 800fea4:	6013      	str	r3, [r2, #0]
 800fea6:	4770      	bx	lr
 800fea8:	2000      	movs	r0, #0
 800feaa:	4770      	bx	lr
 800feac:	2020      	movs	r0, #32
 800feae:	4770      	bx	lr

0800feb0 <__i2b>:
 800feb0:	b510      	push	{r4, lr}
 800feb2:	460c      	mov	r4, r1
 800feb4:	2101      	movs	r1, #1
 800feb6:	f7ff febd 	bl	800fc34 <_Balloc>
 800feba:	4602      	mov	r2, r0
 800febc:	b928      	cbnz	r0, 800feca <__i2b+0x1a>
 800febe:	4b05      	ldr	r3, [pc, #20]	@ (800fed4 <__i2b+0x24>)
 800fec0:	4805      	ldr	r0, [pc, #20]	@ (800fed8 <__i2b+0x28>)
 800fec2:	f240 1145 	movw	r1, #325	@ 0x145
 800fec6:	f7fd fe77 	bl	800dbb8 <__assert_func>
 800feca:	2301      	movs	r3, #1
 800fecc:	6144      	str	r4, [r0, #20]
 800fece:	6103      	str	r3, [r0, #16]
 800fed0:	bd10      	pop	{r4, pc}
 800fed2:	bf00      	nop
 800fed4:	080134f9 	.word	0x080134f9
 800fed8:	0801350a 	.word	0x0801350a

0800fedc <__multiply>:
 800fedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee0:	4614      	mov	r4, r2
 800fee2:	690a      	ldr	r2, [r1, #16]
 800fee4:	6923      	ldr	r3, [r4, #16]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	bfa8      	it	ge
 800feea:	4623      	movge	r3, r4
 800feec:	460f      	mov	r7, r1
 800feee:	bfa4      	itt	ge
 800fef0:	460c      	movge	r4, r1
 800fef2:	461f      	movge	r7, r3
 800fef4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fef8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fefc:	68a3      	ldr	r3, [r4, #8]
 800fefe:	6861      	ldr	r1, [r4, #4]
 800ff00:	eb0a 0609 	add.w	r6, sl, r9
 800ff04:	42b3      	cmp	r3, r6
 800ff06:	b085      	sub	sp, #20
 800ff08:	bfb8      	it	lt
 800ff0a:	3101      	addlt	r1, #1
 800ff0c:	f7ff fe92 	bl	800fc34 <_Balloc>
 800ff10:	b930      	cbnz	r0, 800ff20 <__multiply+0x44>
 800ff12:	4602      	mov	r2, r0
 800ff14:	4b44      	ldr	r3, [pc, #272]	@ (8010028 <__multiply+0x14c>)
 800ff16:	4845      	ldr	r0, [pc, #276]	@ (801002c <__multiply+0x150>)
 800ff18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ff1c:	f7fd fe4c 	bl	800dbb8 <__assert_func>
 800ff20:	f100 0514 	add.w	r5, r0, #20
 800ff24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff28:	462b      	mov	r3, r5
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	4543      	cmp	r3, r8
 800ff2e:	d321      	bcc.n	800ff74 <__multiply+0x98>
 800ff30:	f107 0114 	add.w	r1, r7, #20
 800ff34:	f104 0214 	add.w	r2, r4, #20
 800ff38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ff3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ff40:	9302      	str	r3, [sp, #8]
 800ff42:	1b13      	subs	r3, r2, r4
 800ff44:	3b15      	subs	r3, #21
 800ff46:	f023 0303 	bic.w	r3, r3, #3
 800ff4a:	3304      	adds	r3, #4
 800ff4c:	f104 0715 	add.w	r7, r4, #21
 800ff50:	42ba      	cmp	r2, r7
 800ff52:	bf38      	it	cc
 800ff54:	2304      	movcc	r3, #4
 800ff56:	9301      	str	r3, [sp, #4]
 800ff58:	9b02      	ldr	r3, [sp, #8]
 800ff5a:	9103      	str	r1, [sp, #12]
 800ff5c:	428b      	cmp	r3, r1
 800ff5e:	d80c      	bhi.n	800ff7a <__multiply+0x9e>
 800ff60:	2e00      	cmp	r6, #0
 800ff62:	dd03      	ble.n	800ff6c <__multiply+0x90>
 800ff64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d05b      	beq.n	8010024 <__multiply+0x148>
 800ff6c:	6106      	str	r6, [r0, #16]
 800ff6e:	b005      	add	sp, #20
 800ff70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff74:	f843 2b04 	str.w	r2, [r3], #4
 800ff78:	e7d8      	b.n	800ff2c <__multiply+0x50>
 800ff7a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ff7e:	f1ba 0f00 	cmp.w	sl, #0
 800ff82:	d024      	beq.n	800ffce <__multiply+0xf2>
 800ff84:	f104 0e14 	add.w	lr, r4, #20
 800ff88:	46a9      	mov	r9, r5
 800ff8a:	f04f 0c00 	mov.w	ip, #0
 800ff8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ff92:	f8d9 3000 	ldr.w	r3, [r9]
 800ff96:	fa1f fb87 	uxth.w	fp, r7
 800ff9a:	b29b      	uxth	r3, r3
 800ff9c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ffa0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ffa4:	f8d9 7000 	ldr.w	r7, [r9]
 800ffa8:	4463      	add	r3, ip
 800ffaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ffae:	fb0a c70b 	mla	r7, sl, fp, ip
 800ffb2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ffbc:	4572      	cmp	r2, lr
 800ffbe:	f849 3b04 	str.w	r3, [r9], #4
 800ffc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ffc6:	d8e2      	bhi.n	800ff8e <__multiply+0xb2>
 800ffc8:	9b01      	ldr	r3, [sp, #4]
 800ffca:	f845 c003 	str.w	ip, [r5, r3]
 800ffce:	9b03      	ldr	r3, [sp, #12]
 800ffd0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ffd4:	3104      	adds	r1, #4
 800ffd6:	f1b9 0f00 	cmp.w	r9, #0
 800ffda:	d021      	beq.n	8010020 <__multiply+0x144>
 800ffdc:	682b      	ldr	r3, [r5, #0]
 800ffde:	f104 0c14 	add.w	ip, r4, #20
 800ffe2:	46ae      	mov	lr, r5
 800ffe4:	f04f 0a00 	mov.w	sl, #0
 800ffe8:	f8bc b000 	ldrh.w	fp, [ip]
 800ffec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fff0:	fb09 770b 	mla	r7, r9, fp, r7
 800fff4:	4457      	add	r7, sl
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fffc:	f84e 3b04 	str.w	r3, [lr], #4
 8010000:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010004:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010008:	f8be 3000 	ldrh.w	r3, [lr]
 801000c:	fb09 330a 	mla	r3, r9, sl, r3
 8010010:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010014:	4562      	cmp	r2, ip
 8010016:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801001a:	d8e5      	bhi.n	800ffe8 <__multiply+0x10c>
 801001c:	9f01      	ldr	r7, [sp, #4]
 801001e:	51eb      	str	r3, [r5, r7]
 8010020:	3504      	adds	r5, #4
 8010022:	e799      	b.n	800ff58 <__multiply+0x7c>
 8010024:	3e01      	subs	r6, #1
 8010026:	e79b      	b.n	800ff60 <__multiply+0x84>
 8010028:	080134f9 	.word	0x080134f9
 801002c:	0801350a 	.word	0x0801350a

08010030 <__pow5mult>:
 8010030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010034:	4615      	mov	r5, r2
 8010036:	f012 0203 	ands.w	r2, r2, #3
 801003a:	4607      	mov	r7, r0
 801003c:	460e      	mov	r6, r1
 801003e:	d007      	beq.n	8010050 <__pow5mult+0x20>
 8010040:	4c25      	ldr	r4, [pc, #148]	@ (80100d8 <__pow5mult+0xa8>)
 8010042:	3a01      	subs	r2, #1
 8010044:	2300      	movs	r3, #0
 8010046:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801004a:	f7ff fe55 	bl	800fcf8 <__multadd>
 801004e:	4606      	mov	r6, r0
 8010050:	10ad      	asrs	r5, r5, #2
 8010052:	d03d      	beq.n	80100d0 <__pow5mult+0xa0>
 8010054:	69fc      	ldr	r4, [r7, #28]
 8010056:	b97c      	cbnz	r4, 8010078 <__pow5mult+0x48>
 8010058:	2010      	movs	r0, #16
 801005a:	f7fd fddd 	bl	800dc18 <malloc>
 801005e:	4602      	mov	r2, r0
 8010060:	61f8      	str	r0, [r7, #28]
 8010062:	b928      	cbnz	r0, 8010070 <__pow5mult+0x40>
 8010064:	4b1d      	ldr	r3, [pc, #116]	@ (80100dc <__pow5mult+0xac>)
 8010066:	481e      	ldr	r0, [pc, #120]	@ (80100e0 <__pow5mult+0xb0>)
 8010068:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801006c:	f7fd fda4 	bl	800dbb8 <__assert_func>
 8010070:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010074:	6004      	str	r4, [r0, #0]
 8010076:	60c4      	str	r4, [r0, #12]
 8010078:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801007c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010080:	b94c      	cbnz	r4, 8010096 <__pow5mult+0x66>
 8010082:	f240 2171 	movw	r1, #625	@ 0x271
 8010086:	4638      	mov	r0, r7
 8010088:	f7ff ff12 	bl	800feb0 <__i2b>
 801008c:	2300      	movs	r3, #0
 801008e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010092:	4604      	mov	r4, r0
 8010094:	6003      	str	r3, [r0, #0]
 8010096:	f04f 0900 	mov.w	r9, #0
 801009a:	07eb      	lsls	r3, r5, #31
 801009c:	d50a      	bpl.n	80100b4 <__pow5mult+0x84>
 801009e:	4631      	mov	r1, r6
 80100a0:	4622      	mov	r2, r4
 80100a2:	4638      	mov	r0, r7
 80100a4:	f7ff ff1a 	bl	800fedc <__multiply>
 80100a8:	4631      	mov	r1, r6
 80100aa:	4680      	mov	r8, r0
 80100ac:	4638      	mov	r0, r7
 80100ae:	f7ff fe01 	bl	800fcb4 <_Bfree>
 80100b2:	4646      	mov	r6, r8
 80100b4:	106d      	asrs	r5, r5, #1
 80100b6:	d00b      	beq.n	80100d0 <__pow5mult+0xa0>
 80100b8:	6820      	ldr	r0, [r4, #0]
 80100ba:	b938      	cbnz	r0, 80100cc <__pow5mult+0x9c>
 80100bc:	4622      	mov	r2, r4
 80100be:	4621      	mov	r1, r4
 80100c0:	4638      	mov	r0, r7
 80100c2:	f7ff ff0b 	bl	800fedc <__multiply>
 80100c6:	6020      	str	r0, [r4, #0]
 80100c8:	f8c0 9000 	str.w	r9, [r0]
 80100cc:	4604      	mov	r4, r0
 80100ce:	e7e4      	b.n	801009a <__pow5mult+0x6a>
 80100d0:	4630      	mov	r0, r6
 80100d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100d6:	bf00      	nop
 80100d8:	08013564 	.word	0x08013564
 80100dc:	0801348a 	.word	0x0801348a
 80100e0:	0801350a 	.word	0x0801350a

080100e4 <__lshift>:
 80100e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100e8:	460c      	mov	r4, r1
 80100ea:	6849      	ldr	r1, [r1, #4]
 80100ec:	6923      	ldr	r3, [r4, #16]
 80100ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80100f2:	68a3      	ldr	r3, [r4, #8]
 80100f4:	4607      	mov	r7, r0
 80100f6:	4691      	mov	r9, r2
 80100f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80100fc:	f108 0601 	add.w	r6, r8, #1
 8010100:	42b3      	cmp	r3, r6
 8010102:	db0b      	blt.n	801011c <__lshift+0x38>
 8010104:	4638      	mov	r0, r7
 8010106:	f7ff fd95 	bl	800fc34 <_Balloc>
 801010a:	4605      	mov	r5, r0
 801010c:	b948      	cbnz	r0, 8010122 <__lshift+0x3e>
 801010e:	4602      	mov	r2, r0
 8010110:	4b28      	ldr	r3, [pc, #160]	@ (80101b4 <__lshift+0xd0>)
 8010112:	4829      	ldr	r0, [pc, #164]	@ (80101b8 <__lshift+0xd4>)
 8010114:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010118:	f7fd fd4e 	bl	800dbb8 <__assert_func>
 801011c:	3101      	adds	r1, #1
 801011e:	005b      	lsls	r3, r3, #1
 8010120:	e7ee      	b.n	8010100 <__lshift+0x1c>
 8010122:	2300      	movs	r3, #0
 8010124:	f100 0114 	add.w	r1, r0, #20
 8010128:	f100 0210 	add.w	r2, r0, #16
 801012c:	4618      	mov	r0, r3
 801012e:	4553      	cmp	r3, sl
 8010130:	db33      	blt.n	801019a <__lshift+0xb6>
 8010132:	6920      	ldr	r0, [r4, #16]
 8010134:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010138:	f104 0314 	add.w	r3, r4, #20
 801013c:	f019 091f 	ands.w	r9, r9, #31
 8010140:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010144:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010148:	d02b      	beq.n	80101a2 <__lshift+0xbe>
 801014a:	f1c9 0e20 	rsb	lr, r9, #32
 801014e:	468a      	mov	sl, r1
 8010150:	2200      	movs	r2, #0
 8010152:	6818      	ldr	r0, [r3, #0]
 8010154:	fa00 f009 	lsl.w	r0, r0, r9
 8010158:	4310      	orrs	r0, r2
 801015a:	f84a 0b04 	str.w	r0, [sl], #4
 801015e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010162:	459c      	cmp	ip, r3
 8010164:	fa22 f20e 	lsr.w	r2, r2, lr
 8010168:	d8f3      	bhi.n	8010152 <__lshift+0x6e>
 801016a:	ebac 0304 	sub.w	r3, ip, r4
 801016e:	3b15      	subs	r3, #21
 8010170:	f023 0303 	bic.w	r3, r3, #3
 8010174:	3304      	adds	r3, #4
 8010176:	f104 0015 	add.w	r0, r4, #21
 801017a:	4584      	cmp	ip, r0
 801017c:	bf38      	it	cc
 801017e:	2304      	movcc	r3, #4
 8010180:	50ca      	str	r2, [r1, r3]
 8010182:	b10a      	cbz	r2, 8010188 <__lshift+0xa4>
 8010184:	f108 0602 	add.w	r6, r8, #2
 8010188:	3e01      	subs	r6, #1
 801018a:	4638      	mov	r0, r7
 801018c:	612e      	str	r6, [r5, #16]
 801018e:	4621      	mov	r1, r4
 8010190:	f7ff fd90 	bl	800fcb4 <_Bfree>
 8010194:	4628      	mov	r0, r5
 8010196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801019a:	f842 0f04 	str.w	r0, [r2, #4]!
 801019e:	3301      	adds	r3, #1
 80101a0:	e7c5      	b.n	801012e <__lshift+0x4a>
 80101a2:	3904      	subs	r1, #4
 80101a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80101a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80101ac:	459c      	cmp	ip, r3
 80101ae:	d8f9      	bhi.n	80101a4 <__lshift+0xc0>
 80101b0:	e7ea      	b.n	8010188 <__lshift+0xa4>
 80101b2:	bf00      	nop
 80101b4:	080134f9 	.word	0x080134f9
 80101b8:	0801350a 	.word	0x0801350a

080101bc <__mcmp>:
 80101bc:	690a      	ldr	r2, [r1, #16]
 80101be:	4603      	mov	r3, r0
 80101c0:	6900      	ldr	r0, [r0, #16]
 80101c2:	1a80      	subs	r0, r0, r2
 80101c4:	b530      	push	{r4, r5, lr}
 80101c6:	d10e      	bne.n	80101e6 <__mcmp+0x2a>
 80101c8:	3314      	adds	r3, #20
 80101ca:	3114      	adds	r1, #20
 80101cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80101d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80101d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80101d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80101dc:	4295      	cmp	r5, r2
 80101de:	d003      	beq.n	80101e8 <__mcmp+0x2c>
 80101e0:	d205      	bcs.n	80101ee <__mcmp+0x32>
 80101e2:	f04f 30ff 	mov.w	r0, #4294967295
 80101e6:	bd30      	pop	{r4, r5, pc}
 80101e8:	42a3      	cmp	r3, r4
 80101ea:	d3f3      	bcc.n	80101d4 <__mcmp+0x18>
 80101ec:	e7fb      	b.n	80101e6 <__mcmp+0x2a>
 80101ee:	2001      	movs	r0, #1
 80101f0:	e7f9      	b.n	80101e6 <__mcmp+0x2a>
	...

080101f4 <__mdiff>:
 80101f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f8:	4689      	mov	r9, r1
 80101fa:	4606      	mov	r6, r0
 80101fc:	4611      	mov	r1, r2
 80101fe:	4648      	mov	r0, r9
 8010200:	4614      	mov	r4, r2
 8010202:	f7ff ffdb 	bl	80101bc <__mcmp>
 8010206:	1e05      	subs	r5, r0, #0
 8010208:	d112      	bne.n	8010230 <__mdiff+0x3c>
 801020a:	4629      	mov	r1, r5
 801020c:	4630      	mov	r0, r6
 801020e:	f7ff fd11 	bl	800fc34 <_Balloc>
 8010212:	4602      	mov	r2, r0
 8010214:	b928      	cbnz	r0, 8010222 <__mdiff+0x2e>
 8010216:	4b3f      	ldr	r3, [pc, #252]	@ (8010314 <__mdiff+0x120>)
 8010218:	f240 2137 	movw	r1, #567	@ 0x237
 801021c:	483e      	ldr	r0, [pc, #248]	@ (8010318 <__mdiff+0x124>)
 801021e:	f7fd fccb 	bl	800dbb8 <__assert_func>
 8010222:	2301      	movs	r3, #1
 8010224:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010228:	4610      	mov	r0, r2
 801022a:	b003      	add	sp, #12
 801022c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010230:	bfbc      	itt	lt
 8010232:	464b      	movlt	r3, r9
 8010234:	46a1      	movlt	r9, r4
 8010236:	4630      	mov	r0, r6
 8010238:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801023c:	bfba      	itte	lt
 801023e:	461c      	movlt	r4, r3
 8010240:	2501      	movlt	r5, #1
 8010242:	2500      	movge	r5, #0
 8010244:	f7ff fcf6 	bl	800fc34 <_Balloc>
 8010248:	4602      	mov	r2, r0
 801024a:	b918      	cbnz	r0, 8010254 <__mdiff+0x60>
 801024c:	4b31      	ldr	r3, [pc, #196]	@ (8010314 <__mdiff+0x120>)
 801024e:	f240 2145 	movw	r1, #581	@ 0x245
 8010252:	e7e3      	b.n	801021c <__mdiff+0x28>
 8010254:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010258:	6926      	ldr	r6, [r4, #16]
 801025a:	60c5      	str	r5, [r0, #12]
 801025c:	f109 0310 	add.w	r3, r9, #16
 8010260:	f109 0514 	add.w	r5, r9, #20
 8010264:	f104 0e14 	add.w	lr, r4, #20
 8010268:	f100 0b14 	add.w	fp, r0, #20
 801026c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010270:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010274:	9301      	str	r3, [sp, #4]
 8010276:	46d9      	mov	r9, fp
 8010278:	f04f 0c00 	mov.w	ip, #0
 801027c:	9b01      	ldr	r3, [sp, #4]
 801027e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010282:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010286:	9301      	str	r3, [sp, #4]
 8010288:	fa1f f38a 	uxth.w	r3, sl
 801028c:	4619      	mov	r1, r3
 801028e:	b283      	uxth	r3, r0
 8010290:	1acb      	subs	r3, r1, r3
 8010292:	0c00      	lsrs	r0, r0, #16
 8010294:	4463      	add	r3, ip
 8010296:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801029a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801029e:	b29b      	uxth	r3, r3
 80102a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80102a4:	4576      	cmp	r6, lr
 80102a6:	f849 3b04 	str.w	r3, [r9], #4
 80102aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80102ae:	d8e5      	bhi.n	801027c <__mdiff+0x88>
 80102b0:	1b33      	subs	r3, r6, r4
 80102b2:	3b15      	subs	r3, #21
 80102b4:	f023 0303 	bic.w	r3, r3, #3
 80102b8:	3415      	adds	r4, #21
 80102ba:	3304      	adds	r3, #4
 80102bc:	42a6      	cmp	r6, r4
 80102be:	bf38      	it	cc
 80102c0:	2304      	movcc	r3, #4
 80102c2:	441d      	add	r5, r3
 80102c4:	445b      	add	r3, fp
 80102c6:	461e      	mov	r6, r3
 80102c8:	462c      	mov	r4, r5
 80102ca:	4544      	cmp	r4, r8
 80102cc:	d30e      	bcc.n	80102ec <__mdiff+0xf8>
 80102ce:	f108 0103 	add.w	r1, r8, #3
 80102d2:	1b49      	subs	r1, r1, r5
 80102d4:	f021 0103 	bic.w	r1, r1, #3
 80102d8:	3d03      	subs	r5, #3
 80102da:	45a8      	cmp	r8, r5
 80102dc:	bf38      	it	cc
 80102de:	2100      	movcc	r1, #0
 80102e0:	440b      	add	r3, r1
 80102e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80102e6:	b191      	cbz	r1, 801030e <__mdiff+0x11a>
 80102e8:	6117      	str	r7, [r2, #16]
 80102ea:	e79d      	b.n	8010228 <__mdiff+0x34>
 80102ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80102f0:	46e6      	mov	lr, ip
 80102f2:	0c08      	lsrs	r0, r1, #16
 80102f4:	fa1c fc81 	uxtah	ip, ip, r1
 80102f8:	4471      	add	r1, lr
 80102fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80102fe:	b289      	uxth	r1, r1
 8010300:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010304:	f846 1b04 	str.w	r1, [r6], #4
 8010308:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801030c:	e7dd      	b.n	80102ca <__mdiff+0xd6>
 801030e:	3f01      	subs	r7, #1
 8010310:	e7e7      	b.n	80102e2 <__mdiff+0xee>
 8010312:	bf00      	nop
 8010314:	080134f9 	.word	0x080134f9
 8010318:	0801350a 	.word	0x0801350a

0801031c <__ulp>:
 801031c:	b082      	sub	sp, #8
 801031e:	ed8d 0b00 	vstr	d0, [sp]
 8010322:	9a01      	ldr	r2, [sp, #4]
 8010324:	4b0f      	ldr	r3, [pc, #60]	@ (8010364 <__ulp+0x48>)
 8010326:	4013      	ands	r3, r2
 8010328:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801032c:	2b00      	cmp	r3, #0
 801032e:	dc08      	bgt.n	8010342 <__ulp+0x26>
 8010330:	425b      	negs	r3, r3
 8010332:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010336:	ea4f 5223 	mov.w	r2, r3, asr #20
 801033a:	da04      	bge.n	8010346 <__ulp+0x2a>
 801033c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010340:	4113      	asrs	r3, r2
 8010342:	2200      	movs	r2, #0
 8010344:	e008      	b.n	8010358 <__ulp+0x3c>
 8010346:	f1a2 0314 	sub.w	r3, r2, #20
 801034a:	2b1e      	cmp	r3, #30
 801034c:	bfda      	itte	le
 801034e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010352:	40da      	lsrle	r2, r3
 8010354:	2201      	movgt	r2, #1
 8010356:	2300      	movs	r3, #0
 8010358:	4619      	mov	r1, r3
 801035a:	4610      	mov	r0, r2
 801035c:	ec41 0b10 	vmov	d0, r0, r1
 8010360:	b002      	add	sp, #8
 8010362:	4770      	bx	lr
 8010364:	7ff00000 	.word	0x7ff00000

08010368 <__b2d>:
 8010368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801036c:	6906      	ldr	r6, [r0, #16]
 801036e:	f100 0814 	add.w	r8, r0, #20
 8010372:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010376:	1f37      	subs	r7, r6, #4
 8010378:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801037c:	4610      	mov	r0, r2
 801037e:	f7ff fd4b 	bl	800fe18 <__hi0bits>
 8010382:	f1c0 0320 	rsb	r3, r0, #32
 8010386:	280a      	cmp	r0, #10
 8010388:	600b      	str	r3, [r1, #0]
 801038a:	491b      	ldr	r1, [pc, #108]	@ (80103f8 <__b2d+0x90>)
 801038c:	dc15      	bgt.n	80103ba <__b2d+0x52>
 801038e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010392:	fa22 f30c 	lsr.w	r3, r2, ip
 8010396:	45b8      	cmp	r8, r7
 8010398:	ea43 0501 	orr.w	r5, r3, r1
 801039c:	bf34      	ite	cc
 801039e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80103a2:	2300      	movcs	r3, #0
 80103a4:	3015      	adds	r0, #21
 80103a6:	fa02 f000 	lsl.w	r0, r2, r0
 80103aa:	fa23 f30c 	lsr.w	r3, r3, ip
 80103ae:	4303      	orrs	r3, r0
 80103b0:	461c      	mov	r4, r3
 80103b2:	ec45 4b10 	vmov	d0, r4, r5
 80103b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ba:	45b8      	cmp	r8, r7
 80103bc:	bf3a      	itte	cc
 80103be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80103c2:	f1a6 0708 	subcc.w	r7, r6, #8
 80103c6:	2300      	movcs	r3, #0
 80103c8:	380b      	subs	r0, #11
 80103ca:	d012      	beq.n	80103f2 <__b2d+0x8a>
 80103cc:	f1c0 0120 	rsb	r1, r0, #32
 80103d0:	fa23 f401 	lsr.w	r4, r3, r1
 80103d4:	4082      	lsls	r2, r0
 80103d6:	4322      	orrs	r2, r4
 80103d8:	4547      	cmp	r7, r8
 80103da:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80103de:	bf8c      	ite	hi
 80103e0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80103e4:	2200      	movls	r2, #0
 80103e6:	4083      	lsls	r3, r0
 80103e8:	40ca      	lsrs	r2, r1
 80103ea:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80103ee:	4313      	orrs	r3, r2
 80103f0:	e7de      	b.n	80103b0 <__b2d+0x48>
 80103f2:	ea42 0501 	orr.w	r5, r2, r1
 80103f6:	e7db      	b.n	80103b0 <__b2d+0x48>
 80103f8:	3ff00000 	.word	0x3ff00000

080103fc <__d2b>:
 80103fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010400:	460f      	mov	r7, r1
 8010402:	2101      	movs	r1, #1
 8010404:	ec59 8b10 	vmov	r8, r9, d0
 8010408:	4616      	mov	r6, r2
 801040a:	f7ff fc13 	bl	800fc34 <_Balloc>
 801040e:	4604      	mov	r4, r0
 8010410:	b930      	cbnz	r0, 8010420 <__d2b+0x24>
 8010412:	4602      	mov	r2, r0
 8010414:	4b23      	ldr	r3, [pc, #140]	@ (80104a4 <__d2b+0xa8>)
 8010416:	4824      	ldr	r0, [pc, #144]	@ (80104a8 <__d2b+0xac>)
 8010418:	f240 310f 	movw	r1, #783	@ 0x30f
 801041c:	f7fd fbcc 	bl	800dbb8 <__assert_func>
 8010420:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010424:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010428:	b10d      	cbz	r5, 801042e <__d2b+0x32>
 801042a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801042e:	9301      	str	r3, [sp, #4]
 8010430:	f1b8 0300 	subs.w	r3, r8, #0
 8010434:	d023      	beq.n	801047e <__d2b+0x82>
 8010436:	4668      	mov	r0, sp
 8010438:	9300      	str	r3, [sp, #0]
 801043a:	f7ff fd0c 	bl	800fe56 <__lo0bits>
 801043e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010442:	b1d0      	cbz	r0, 801047a <__d2b+0x7e>
 8010444:	f1c0 0320 	rsb	r3, r0, #32
 8010448:	fa02 f303 	lsl.w	r3, r2, r3
 801044c:	430b      	orrs	r3, r1
 801044e:	40c2      	lsrs	r2, r0
 8010450:	6163      	str	r3, [r4, #20]
 8010452:	9201      	str	r2, [sp, #4]
 8010454:	9b01      	ldr	r3, [sp, #4]
 8010456:	61a3      	str	r3, [r4, #24]
 8010458:	2b00      	cmp	r3, #0
 801045a:	bf0c      	ite	eq
 801045c:	2201      	moveq	r2, #1
 801045e:	2202      	movne	r2, #2
 8010460:	6122      	str	r2, [r4, #16]
 8010462:	b1a5      	cbz	r5, 801048e <__d2b+0x92>
 8010464:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010468:	4405      	add	r5, r0
 801046a:	603d      	str	r5, [r7, #0]
 801046c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010470:	6030      	str	r0, [r6, #0]
 8010472:	4620      	mov	r0, r4
 8010474:	b003      	add	sp, #12
 8010476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801047a:	6161      	str	r1, [r4, #20]
 801047c:	e7ea      	b.n	8010454 <__d2b+0x58>
 801047e:	a801      	add	r0, sp, #4
 8010480:	f7ff fce9 	bl	800fe56 <__lo0bits>
 8010484:	9b01      	ldr	r3, [sp, #4]
 8010486:	6163      	str	r3, [r4, #20]
 8010488:	3020      	adds	r0, #32
 801048a:	2201      	movs	r2, #1
 801048c:	e7e8      	b.n	8010460 <__d2b+0x64>
 801048e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010492:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010496:	6038      	str	r0, [r7, #0]
 8010498:	6918      	ldr	r0, [r3, #16]
 801049a:	f7ff fcbd 	bl	800fe18 <__hi0bits>
 801049e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80104a2:	e7e5      	b.n	8010470 <__d2b+0x74>
 80104a4:	080134f9 	.word	0x080134f9
 80104a8:	0801350a 	.word	0x0801350a

080104ac <__ratio>:
 80104ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b0:	b085      	sub	sp, #20
 80104b2:	e9cd 1000 	strd	r1, r0, [sp]
 80104b6:	a902      	add	r1, sp, #8
 80104b8:	f7ff ff56 	bl	8010368 <__b2d>
 80104bc:	9800      	ldr	r0, [sp, #0]
 80104be:	a903      	add	r1, sp, #12
 80104c0:	ec55 4b10 	vmov	r4, r5, d0
 80104c4:	f7ff ff50 	bl	8010368 <__b2d>
 80104c8:	9b01      	ldr	r3, [sp, #4]
 80104ca:	6919      	ldr	r1, [r3, #16]
 80104cc:	9b00      	ldr	r3, [sp, #0]
 80104ce:	691b      	ldr	r3, [r3, #16]
 80104d0:	1ac9      	subs	r1, r1, r3
 80104d2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80104d6:	1a9b      	subs	r3, r3, r2
 80104d8:	ec5b ab10 	vmov	sl, fp, d0
 80104dc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	bfce      	itee	gt
 80104e4:	462a      	movgt	r2, r5
 80104e6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80104ea:	465a      	movle	r2, fp
 80104ec:	462f      	mov	r7, r5
 80104ee:	46d9      	mov	r9, fp
 80104f0:	bfcc      	ite	gt
 80104f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80104f6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80104fa:	464b      	mov	r3, r9
 80104fc:	4652      	mov	r2, sl
 80104fe:	4620      	mov	r0, r4
 8010500:	4639      	mov	r1, r7
 8010502:	f7f0 f9cb 	bl	800089c <__aeabi_ddiv>
 8010506:	ec41 0b10 	vmov	d0, r0, r1
 801050a:	b005      	add	sp, #20
 801050c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010510 <__copybits>:
 8010510:	3901      	subs	r1, #1
 8010512:	b570      	push	{r4, r5, r6, lr}
 8010514:	1149      	asrs	r1, r1, #5
 8010516:	6914      	ldr	r4, [r2, #16]
 8010518:	3101      	adds	r1, #1
 801051a:	f102 0314 	add.w	r3, r2, #20
 801051e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010522:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010526:	1f05      	subs	r5, r0, #4
 8010528:	42a3      	cmp	r3, r4
 801052a:	d30c      	bcc.n	8010546 <__copybits+0x36>
 801052c:	1aa3      	subs	r3, r4, r2
 801052e:	3b11      	subs	r3, #17
 8010530:	f023 0303 	bic.w	r3, r3, #3
 8010534:	3211      	adds	r2, #17
 8010536:	42a2      	cmp	r2, r4
 8010538:	bf88      	it	hi
 801053a:	2300      	movhi	r3, #0
 801053c:	4418      	add	r0, r3
 801053e:	2300      	movs	r3, #0
 8010540:	4288      	cmp	r0, r1
 8010542:	d305      	bcc.n	8010550 <__copybits+0x40>
 8010544:	bd70      	pop	{r4, r5, r6, pc}
 8010546:	f853 6b04 	ldr.w	r6, [r3], #4
 801054a:	f845 6f04 	str.w	r6, [r5, #4]!
 801054e:	e7eb      	b.n	8010528 <__copybits+0x18>
 8010550:	f840 3b04 	str.w	r3, [r0], #4
 8010554:	e7f4      	b.n	8010540 <__copybits+0x30>

08010556 <__any_on>:
 8010556:	f100 0214 	add.w	r2, r0, #20
 801055a:	6900      	ldr	r0, [r0, #16]
 801055c:	114b      	asrs	r3, r1, #5
 801055e:	4298      	cmp	r0, r3
 8010560:	b510      	push	{r4, lr}
 8010562:	db11      	blt.n	8010588 <__any_on+0x32>
 8010564:	dd0a      	ble.n	801057c <__any_on+0x26>
 8010566:	f011 011f 	ands.w	r1, r1, #31
 801056a:	d007      	beq.n	801057c <__any_on+0x26>
 801056c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010570:	fa24 f001 	lsr.w	r0, r4, r1
 8010574:	fa00 f101 	lsl.w	r1, r0, r1
 8010578:	428c      	cmp	r4, r1
 801057a:	d10b      	bne.n	8010594 <__any_on+0x3e>
 801057c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010580:	4293      	cmp	r3, r2
 8010582:	d803      	bhi.n	801058c <__any_on+0x36>
 8010584:	2000      	movs	r0, #0
 8010586:	bd10      	pop	{r4, pc}
 8010588:	4603      	mov	r3, r0
 801058a:	e7f7      	b.n	801057c <__any_on+0x26>
 801058c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010590:	2900      	cmp	r1, #0
 8010592:	d0f5      	beq.n	8010580 <__any_on+0x2a>
 8010594:	2001      	movs	r0, #1
 8010596:	e7f6      	b.n	8010586 <__any_on+0x30>

08010598 <sulp>:
 8010598:	b570      	push	{r4, r5, r6, lr}
 801059a:	4604      	mov	r4, r0
 801059c:	460d      	mov	r5, r1
 801059e:	ec45 4b10 	vmov	d0, r4, r5
 80105a2:	4616      	mov	r6, r2
 80105a4:	f7ff feba 	bl	801031c <__ulp>
 80105a8:	ec51 0b10 	vmov	r0, r1, d0
 80105ac:	b17e      	cbz	r6, 80105ce <sulp+0x36>
 80105ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80105b2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	dd09      	ble.n	80105ce <sulp+0x36>
 80105ba:	051b      	lsls	r3, r3, #20
 80105bc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80105c0:	2400      	movs	r4, #0
 80105c2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80105c6:	4622      	mov	r2, r4
 80105c8:	462b      	mov	r3, r5
 80105ca:	f7f0 f83d 	bl	8000648 <__aeabi_dmul>
 80105ce:	ec41 0b10 	vmov	d0, r0, r1
 80105d2:	bd70      	pop	{r4, r5, r6, pc}
 80105d4:	0000      	movs	r0, r0
	...

080105d8 <_strtod_l>:
 80105d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105dc:	b09f      	sub	sp, #124	@ 0x7c
 80105de:	460c      	mov	r4, r1
 80105e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80105e2:	2200      	movs	r2, #0
 80105e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80105e6:	9005      	str	r0, [sp, #20]
 80105e8:	f04f 0a00 	mov.w	sl, #0
 80105ec:	f04f 0b00 	mov.w	fp, #0
 80105f0:	460a      	mov	r2, r1
 80105f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80105f4:	7811      	ldrb	r1, [r2, #0]
 80105f6:	292b      	cmp	r1, #43	@ 0x2b
 80105f8:	d04a      	beq.n	8010690 <_strtod_l+0xb8>
 80105fa:	d838      	bhi.n	801066e <_strtod_l+0x96>
 80105fc:	290d      	cmp	r1, #13
 80105fe:	d832      	bhi.n	8010666 <_strtod_l+0x8e>
 8010600:	2908      	cmp	r1, #8
 8010602:	d832      	bhi.n	801066a <_strtod_l+0x92>
 8010604:	2900      	cmp	r1, #0
 8010606:	d03b      	beq.n	8010680 <_strtod_l+0xa8>
 8010608:	2200      	movs	r2, #0
 801060a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801060c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801060e:	782a      	ldrb	r2, [r5, #0]
 8010610:	2a30      	cmp	r2, #48	@ 0x30
 8010612:	f040 80b3 	bne.w	801077c <_strtod_l+0x1a4>
 8010616:	786a      	ldrb	r2, [r5, #1]
 8010618:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801061c:	2a58      	cmp	r2, #88	@ 0x58
 801061e:	d16e      	bne.n	80106fe <_strtod_l+0x126>
 8010620:	9302      	str	r3, [sp, #8]
 8010622:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010624:	9301      	str	r3, [sp, #4]
 8010626:	ab1a      	add	r3, sp, #104	@ 0x68
 8010628:	9300      	str	r3, [sp, #0]
 801062a:	4a8e      	ldr	r2, [pc, #568]	@ (8010864 <_strtod_l+0x28c>)
 801062c:	9805      	ldr	r0, [sp, #20]
 801062e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010630:	a919      	add	r1, sp, #100	@ 0x64
 8010632:	f001 faa9 	bl	8011b88 <__gethex>
 8010636:	f010 060f 	ands.w	r6, r0, #15
 801063a:	4604      	mov	r4, r0
 801063c:	d005      	beq.n	801064a <_strtod_l+0x72>
 801063e:	2e06      	cmp	r6, #6
 8010640:	d128      	bne.n	8010694 <_strtod_l+0xbc>
 8010642:	3501      	adds	r5, #1
 8010644:	2300      	movs	r3, #0
 8010646:	9519      	str	r5, [sp, #100]	@ 0x64
 8010648:	930b      	str	r3, [sp, #44]	@ 0x2c
 801064a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801064c:	2b00      	cmp	r3, #0
 801064e:	f040 858e 	bne.w	801116e <_strtod_l+0xb96>
 8010652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010654:	b1cb      	cbz	r3, 801068a <_strtod_l+0xb2>
 8010656:	4652      	mov	r2, sl
 8010658:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801065c:	ec43 2b10 	vmov	d0, r2, r3
 8010660:	b01f      	add	sp, #124	@ 0x7c
 8010662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010666:	2920      	cmp	r1, #32
 8010668:	d1ce      	bne.n	8010608 <_strtod_l+0x30>
 801066a:	3201      	adds	r2, #1
 801066c:	e7c1      	b.n	80105f2 <_strtod_l+0x1a>
 801066e:	292d      	cmp	r1, #45	@ 0x2d
 8010670:	d1ca      	bne.n	8010608 <_strtod_l+0x30>
 8010672:	2101      	movs	r1, #1
 8010674:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010676:	1c51      	adds	r1, r2, #1
 8010678:	9119      	str	r1, [sp, #100]	@ 0x64
 801067a:	7852      	ldrb	r2, [r2, #1]
 801067c:	2a00      	cmp	r2, #0
 801067e:	d1c5      	bne.n	801060c <_strtod_l+0x34>
 8010680:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010682:	9419      	str	r4, [sp, #100]	@ 0x64
 8010684:	2b00      	cmp	r3, #0
 8010686:	f040 8570 	bne.w	801116a <_strtod_l+0xb92>
 801068a:	4652      	mov	r2, sl
 801068c:	465b      	mov	r3, fp
 801068e:	e7e5      	b.n	801065c <_strtod_l+0x84>
 8010690:	2100      	movs	r1, #0
 8010692:	e7ef      	b.n	8010674 <_strtod_l+0x9c>
 8010694:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010696:	b13a      	cbz	r2, 80106a8 <_strtod_l+0xd0>
 8010698:	2135      	movs	r1, #53	@ 0x35
 801069a:	a81c      	add	r0, sp, #112	@ 0x70
 801069c:	f7ff ff38 	bl	8010510 <__copybits>
 80106a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80106a2:	9805      	ldr	r0, [sp, #20]
 80106a4:	f7ff fb06 	bl	800fcb4 <_Bfree>
 80106a8:	3e01      	subs	r6, #1
 80106aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80106ac:	2e04      	cmp	r6, #4
 80106ae:	d806      	bhi.n	80106be <_strtod_l+0xe6>
 80106b0:	e8df f006 	tbb	[pc, r6]
 80106b4:	201d0314 	.word	0x201d0314
 80106b8:	14          	.byte	0x14
 80106b9:	00          	.byte	0x00
 80106ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80106be:	05e1      	lsls	r1, r4, #23
 80106c0:	bf48      	it	mi
 80106c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80106c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80106ca:	0d1b      	lsrs	r3, r3, #20
 80106cc:	051b      	lsls	r3, r3, #20
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d1bb      	bne.n	801064a <_strtod_l+0x72>
 80106d2:	f7fe fbd5 	bl	800ee80 <__errno>
 80106d6:	2322      	movs	r3, #34	@ 0x22
 80106d8:	6003      	str	r3, [r0, #0]
 80106da:	e7b6      	b.n	801064a <_strtod_l+0x72>
 80106dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80106e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80106e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80106e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80106ec:	e7e7      	b.n	80106be <_strtod_l+0xe6>
 80106ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801086c <_strtod_l+0x294>
 80106f2:	e7e4      	b.n	80106be <_strtod_l+0xe6>
 80106f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80106f8:	f04f 3aff 	mov.w	sl, #4294967295
 80106fc:	e7df      	b.n	80106be <_strtod_l+0xe6>
 80106fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010700:	1c5a      	adds	r2, r3, #1
 8010702:	9219      	str	r2, [sp, #100]	@ 0x64
 8010704:	785b      	ldrb	r3, [r3, #1]
 8010706:	2b30      	cmp	r3, #48	@ 0x30
 8010708:	d0f9      	beq.n	80106fe <_strtod_l+0x126>
 801070a:	2b00      	cmp	r3, #0
 801070c:	d09d      	beq.n	801064a <_strtod_l+0x72>
 801070e:	2301      	movs	r3, #1
 8010710:	9309      	str	r3, [sp, #36]	@ 0x24
 8010712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010714:	930c      	str	r3, [sp, #48]	@ 0x30
 8010716:	2300      	movs	r3, #0
 8010718:	9308      	str	r3, [sp, #32]
 801071a:	930a      	str	r3, [sp, #40]	@ 0x28
 801071c:	461f      	mov	r7, r3
 801071e:	220a      	movs	r2, #10
 8010720:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010722:	7805      	ldrb	r5, [r0, #0]
 8010724:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010728:	b2d9      	uxtb	r1, r3
 801072a:	2909      	cmp	r1, #9
 801072c:	d928      	bls.n	8010780 <_strtod_l+0x1a8>
 801072e:	494e      	ldr	r1, [pc, #312]	@ (8010868 <_strtod_l+0x290>)
 8010730:	2201      	movs	r2, #1
 8010732:	f001 f991 	bl	8011a58 <strncmp>
 8010736:	2800      	cmp	r0, #0
 8010738:	d032      	beq.n	80107a0 <_strtod_l+0x1c8>
 801073a:	2000      	movs	r0, #0
 801073c:	462a      	mov	r2, r5
 801073e:	4681      	mov	r9, r0
 8010740:	463d      	mov	r5, r7
 8010742:	4603      	mov	r3, r0
 8010744:	2a65      	cmp	r2, #101	@ 0x65
 8010746:	d001      	beq.n	801074c <_strtod_l+0x174>
 8010748:	2a45      	cmp	r2, #69	@ 0x45
 801074a:	d114      	bne.n	8010776 <_strtod_l+0x19e>
 801074c:	b91d      	cbnz	r5, 8010756 <_strtod_l+0x17e>
 801074e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010750:	4302      	orrs	r2, r0
 8010752:	d095      	beq.n	8010680 <_strtod_l+0xa8>
 8010754:	2500      	movs	r5, #0
 8010756:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010758:	1c62      	adds	r2, r4, #1
 801075a:	9219      	str	r2, [sp, #100]	@ 0x64
 801075c:	7862      	ldrb	r2, [r4, #1]
 801075e:	2a2b      	cmp	r2, #43	@ 0x2b
 8010760:	d077      	beq.n	8010852 <_strtod_l+0x27a>
 8010762:	2a2d      	cmp	r2, #45	@ 0x2d
 8010764:	d07b      	beq.n	801085e <_strtod_l+0x286>
 8010766:	f04f 0c00 	mov.w	ip, #0
 801076a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801076e:	2909      	cmp	r1, #9
 8010770:	f240 8082 	bls.w	8010878 <_strtod_l+0x2a0>
 8010774:	9419      	str	r4, [sp, #100]	@ 0x64
 8010776:	f04f 0800 	mov.w	r8, #0
 801077a:	e0a2      	b.n	80108c2 <_strtod_l+0x2ea>
 801077c:	2300      	movs	r3, #0
 801077e:	e7c7      	b.n	8010710 <_strtod_l+0x138>
 8010780:	2f08      	cmp	r7, #8
 8010782:	bfd5      	itete	le
 8010784:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010786:	9908      	ldrgt	r1, [sp, #32]
 8010788:	fb02 3301 	mlale	r3, r2, r1, r3
 801078c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010790:	f100 0001 	add.w	r0, r0, #1
 8010794:	bfd4      	ite	le
 8010796:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010798:	9308      	strgt	r3, [sp, #32]
 801079a:	3701      	adds	r7, #1
 801079c:	9019      	str	r0, [sp, #100]	@ 0x64
 801079e:	e7bf      	b.n	8010720 <_strtod_l+0x148>
 80107a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80107a2:	1c5a      	adds	r2, r3, #1
 80107a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80107a6:	785a      	ldrb	r2, [r3, #1]
 80107a8:	b37f      	cbz	r7, 801080a <_strtod_l+0x232>
 80107aa:	4681      	mov	r9, r0
 80107ac:	463d      	mov	r5, r7
 80107ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80107b2:	2b09      	cmp	r3, #9
 80107b4:	d912      	bls.n	80107dc <_strtod_l+0x204>
 80107b6:	2301      	movs	r3, #1
 80107b8:	e7c4      	b.n	8010744 <_strtod_l+0x16c>
 80107ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80107bc:	1c5a      	adds	r2, r3, #1
 80107be:	9219      	str	r2, [sp, #100]	@ 0x64
 80107c0:	785a      	ldrb	r2, [r3, #1]
 80107c2:	3001      	adds	r0, #1
 80107c4:	2a30      	cmp	r2, #48	@ 0x30
 80107c6:	d0f8      	beq.n	80107ba <_strtod_l+0x1e2>
 80107c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80107cc:	2b08      	cmp	r3, #8
 80107ce:	f200 84d3 	bhi.w	8011178 <_strtod_l+0xba0>
 80107d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80107d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80107d6:	4681      	mov	r9, r0
 80107d8:	2000      	movs	r0, #0
 80107da:	4605      	mov	r5, r0
 80107dc:	3a30      	subs	r2, #48	@ 0x30
 80107de:	f100 0301 	add.w	r3, r0, #1
 80107e2:	d02a      	beq.n	801083a <_strtod_l+0x262>
 80107e4:	4499      	add	r9, r3
 80107e6:	eb00 0c05 	add.w	ip, r0, r5
 80107ea:	462b      	mov	r3, r5
 80107ec:	210a      	movs	r1, #10
 80107ee:	4563      	cmp	r3, ip
 80107f0:	d10d      	bne.n	801080e <_strtod_l+0x236>
 80107f2:	1c69      	adds	r1, r5, #1
 80107f4:	4401      	add	r1, r0
 80107f6:	4428      	add	r0, r5
 80107f8:	2808      	cmp	r0, #8
 80107fa:	dc16      	bgt.n	801082a <_strtod_l+0x252>
 80107fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80107fe:	230a      	movs	r3, #10
 8010800:	fb03 2300 	mla	r3, r3, r0, r2
 8010804:	930a      	str	r3, [sp, #40]	@ 0x28
 8010806:	2300      	movs	r3, #0
 8010808:	e018      	b.n	801083c <_strtod_l+0x264>
 801080a:	4638      	mov	r0, r7
 801080c:	e7da      	b.n	80107c4 <_strtod_l+0x1ec>
 801080e:	2b08      	cmp	r3, #8
 8010810:	f103 0301 	add.w	r3, r3, #1
 8010814:	dc03      	bgt.n	801081e <_strtod_l+0x246>
 8010816:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010818:	434e      	muls	r6, r1
 801081a:	960a      	str	r6, [sp, #40]	@ 0x28
 801081c:	e7e7      	b.n	80107ee <_strtod_l+0x216>
 801081e:	2b10      	cmp	r3, #16
 8010820:	bfde      	ittt	le
 8010822:	9e08      	ldrle	r6, [sp, #32]
 8010824:	434e      	mulle	r6, r1
 8010826:	9608      	strle	r6, [sp, #32]
 8010828:	e7e1      	b.n	80107ee <_strtod_l+0x216>
 801082a:	280f      	cmp	r0, #15
 801082c:	dceb      	bgt.n	8010806 <_strtod_l+0x22e>
 801082e:	9808      	ldr	r0, [sp, #32]
 8010830:	230a      	movs	r3, #10
 8010832:	fb03 2300 	mla	r3, r3, r0, r2
 8010836:	9308      	str	r3, [sp, #32]
 8010838:	e7e5      	b.n	8010806 <_strtod_l+0x22e>
 801083a:	4629      	mov	r1, r5
 801083c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801083e:	1c50      	adds	r0, r2, #1
 8010840:	9019      	str	r0, [sp, #100]	@ 0x64
 8010842:	7852      	ldrb	r2, [r2, #1]
 8010844:	4618      	mov	r0, r3
 8010846:	460d      	mov	r5, r1
 8010848:	e7b1      	b.n	80107ae <_strtod_l+0x1d6>
 801084a:	f04f 0900 	mov.w	r9, #0
 801084e:	2301      	movs	r3, #1
 8010850:	e77d      	b.n	801074e <_strtod_l+0x176>
 8010852:	f04f 0c00 	mov.w	ip, #0
 8010856:	1ca2      	adds	r2, r4, #2
 8010858:	9219      	str	r2, [sp, #100]	@ 0x64
 801085a:	78a2      	ldrb	r2, [r4, #2]
 801085c:	e785      	b.n	801076a <_strtod_l+0x192>
 801085e:	f04f 0c01 	mov.w	ip, #1
 8010862:	e7f8      	b.n	8010856 <_strtod_l+0x27e>
 8010864:	08013678 	.word	0x08013678
 8010868:	08013660 	.word	0x08013660
 801086c:	7ff00000 	.word	0x7ff00000
 8010870:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010872:	1c51      	adds	r1, r2, #1
 8010874:	9119      	str	r1, [sp, #100]	@ 0x64
 8010876:	7852      	ldrb	r2, [r2, #1]
 8010878:	2a30      	cmp	r2, #48	@ 0x30
 801087a:	d0f9      	beq.n	8010870 <_strtod_l+0x298>
 801087c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010880:	2908      	cmp	r1, #8
 8010882:	f63f af78 	bhi.w	8010776 <_strtod_l+0x19e>
 8010886:	3a30      	subs	r2, #48	@ 0x30
 8010888:	920e      	str	r2, [sp, #56]	@ 0x38
 801088a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801088c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801088e:	f04f 080a 	mov.w	r8, #10
 8010892:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010894:	1c56      	adds	r6, r2, #1
 8010896:	9619      	str	r6, [sp, #100]	@ 0x64
 8010898:	7852      	ldrb	r2, [r2, #1]
 801089a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801089e:	f1be 0f09 	cmp.w	lr, #9
 80108a2:	d939      	bls.n	8010918 <_strtod_l+0x340>
 80108a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80108a6:	1a76      	subs	r6, r6, r1
 80108a8:	2e08      	cmp	r6, #8
 80108aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80108ae:	dc03      	bgt.n	80108b8 <_strtod_l+0x2e0>
 80108b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80108b2:	4588      	cmp	r8, r1
 80108b4:	bfa8      	it	ge
 80108b6:	4688      	movge	r8, r1
 80108b8:	f1bc 0f00 	cmp.w	ip, #0
 80108bc:	d001      	beq.n	80108c2 <_strtod_l+0x2ea>
 80108be:	f1c8 0800 	rsb	r8, r8, #0
 80108c2:	2d00      	cmp	r5, #0
 80108c4:	d14e      	bne.n	8010964 <_strtod_l+0x38c>
 80108c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80108c8:	4308      	orrs	r0, r1
 80108ca:	f47f aebe 	bne.w	801064a <_strtod_l+0x72>
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	f47f aed6 	bne.w	8010680 <_strtod_l+0xa8>
 80108d4:	2a69      	cmp	r2, #105	@ 0x69
 80108d6:	d028      	beq.n	801092a <_strtod_l+0x352>
 80108d8:	dc25      	bgt.n	8010926 <_strtod_l+0x34e>
 80108da:	2a49      	cmp	r2, #73	@ 0x49
 80108dc:	d025      	beq.n	801092a <_strtod_l+0x352>
 80108de:	2a4e      	cmp	r2, #78	@ 0x4e
 80108e0:	f47f aece 	bne.w	8010680 <_strtod_l+0xa8>
 80108e4:	499b      	ldr	r1, [pc, #620]	@ (8010b54 <_strtod_l+0x57c>)
 80108e6:	a819      	add	r0, sp, #100	@ 0x64
 80108e8:	f001 fb70 	bl	8011fcc <__match>
 80108ec:	2800      	cmp	r0, #0
 80108ee:	f43f aec7 	beq.w	8010680 <_strtod_l+0xa8>
 80108f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	2b28      	cmp	r3, #40	@ 0x28
 80108f8:	d12e      	bne.n	8010958 <_strtod_l+0x380>
 80108fa:	4997      	ldr	r1, [pc, #604]	@ (8010b58 <_strtod_l+0x580>)
 80108fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80108fe:	a819      	add	r0, sp, #100	@ 0x64
 8010900:	f001 fb78 	bl	8011ff4 <__hexnan>
 8010904:	2805      	cmp	r0, #5
 8010906:	d127      	bne.n	8010958 <_strtod_l+0x380>
 8010908:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801090a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801090e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010912:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010916:	e698      	b.n	801064a <_strtod_l+0x72>
 8010918:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801091a:	fb08 2101 	mla	r1, r8, r1, r2
 801091e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010922:	920e      	str	r2, [sp, #56]	@ 0x38
 8010924:	e7b5      	b.n	8010892 <_strtod_l+0x2ba>
 8010926:	2a6e      	cmp	r2, #110	@ 0x6e
 8010928:	e7da      	b.n	80108e0 <_strtod_l+0x308>
 801092a:	498c      	ldr	r1, [pc, #560]	@ (8010b5c <_strtod_l+0x584>)
 801092c:	a819      	add	r0, sp, #100	@ 0x64
 801092e:	f001 fb4d 	bl	8011fcc <__match>
 8010932:	2800      	cmp	r0, #0
 8010934:	f43f aea4 	beq.w	8010680 <_strtod_l+0xa8>
 8010938:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801093a:	4989      	ldr	r1, [pc, #548]	@ (8010b60 <_strtod_l+0x588>)
 801093c:	3b01      	subs	r3, #1
 801093e:	a819      	add	r0, sp, #100	@ 0x64
 8010940:	9319      	str	r3, [sp, #100]	@ 0x64
 8010942:	f001 fb43 	bl	8011fcc <__match>
 8010946:	b910      	cbnz	r0, 801094e <_strtod_l+0x376>
 8010948:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801094a:	3301      	adds	r3, #1
 801094c:	9319      	str	r3, [sp, #100]	@ 0x64
 801094e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010b70 <_strtod_l+0x598>
 8010952:	f04f 0a00 	mov.w	sl, #0
 8010956:	e678      	b.n	801064a <_strtod_l+0x72>
 8010958:	4882      	ldr	r0, [pc, #520]	@ (8010b64 <_strtod_l+0x58c>)
 801095a:	f001 f891 	bl	8011a80 <nan>
 801095e:	ec5b ab10 	vmov	sl, fp, d0
 8010962:	e672      	b.n	801064a <_strtod_l+0x72>
 8010964:	eba8 0309 	sub.w	r3, r8, r9
 8010968:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801096a:	9309      	str	r3, [sp, #36]	@ 0x24
 801096c:	2f00      	cmp	r7, #0
 801096e:	bf08      	it	eq
 8010970:	462f      	moveq	r7, r5
 8010972:	2d10      	cmp	r5, #16
 8010974:	462c      	mov	r4, r5
 8010976:	bfa8      	it	ge
 8010978:	2410      	movge	r4, #16
 801097a:	f7ef fdeb 	bl	8000554 <__aeabi_ui2d>
 801097e:	2d09      	cmp	r5, #9
 8010980:	4682      	mov	sl, r0
 8010982:	468b      	mov	fp, r1
 8010984:	dc13      	bgt.n	80109ae <_strtod_l+0x3d6>
 8010986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010988:	2b00      	cmp	r3, #0
 801098a:	f43f ae5e 	beq.w	801064a <_strtod_l+0x72>
 801098e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010990:	dd78      	ble.n	8010a84 <_strtod_l+0x4ac>
 8010992:	2b16      	cmp	r3, #22
 8010994:	dc5f      	bgt.n	8010a56 <_strtod_l+0x47e>
 8010996:	4974      	ldr	r1, [pc, #464]	@ (8010b68 <_strtod_l+0x590>)
 8010998:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801099c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109a0:	4652      	mov	r2, sl
 80109a2:	465b      	mov	r3, fp
 80109a4:	f7ef fe50 	bl	8000648 <__aeabi_dmul>
 80109a8:	4682      	mov	sl, r0
 80109aa:	468b      	mov	fp, r1
 80109ac:	e64d      	b.n	801064a <_strtod_l+0x72>
 80109ae:	4b6e      	ldr	r3, [pc, #440]	@ (8010b68 <_strtod_l+0x590>)
 80109b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80109b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80109b8:	f7ef fe46 	bl	8000648 <__aeabi_dmul>
 80109bc:	4682      	mov	sl, r0
 80109be:	9808      	ldr	r0, [sp, #32]
 80109c0:	468b      	mov	fp, r1
 80109c2:	f7ef fdc7 	bl	8000554 <__aeabi_ui2d>
 80109c6:	4602      	mov	r2, r0
 80109c8:	460b      	mov	r3, r1
 80109ca:	4650      	mov	r0, sl
 80109cc:	4659      	mov	r1, fp
 80109ce:	f7ef fc85 	bl	80002dc <__adddf3>
 80109d2:	2d0f      	cmp	r5, #15
 80109d4:	4682      	mov	sl, r0
 80109d6:	468b      	mov	fp, r1
 80109d8:	ddd5      	ble.n	8010986 <_strtod_l+0x3ae>
 80109da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109dc:	1b2c      	subs	r4, r5, r4
 80109de:	441c      	add	r4, r3
 80109e0:	2c00      	cmp	r4, #0
 80109e2:	f340 8096 	ble.w	8010b12 <_strtod_l+0x53a>
 80109e6:	f014 030f 	ands.w	r3, r4, #15
 80109ea:	d00a      	beq.n	8010a02 <_strtod_l+0x42a>
 80109ec:	495e      	ldr	r1, [pc, #376]	@ (8010b68 <_strtod_l+0x590>)
 80109ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80109f2:	4652      	mov	r2, sl
 80109f4:	465b      	mov	r3, fp
 80109f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109fa:	f7ef fe25 	bl	8000648 <__aeabi_dmul>
 80109fe:	4682      	mov	sl, r0
 8010a00:	468b      	mov	fp, r1
 8010a02:	f034 040f 	bics.w	r4, r4, #15
 8010a06:	d073      	beq.n	8010af0 <_strtod_l+0x518>
 8010a08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010a0c:	dd48      	ble.n	8010aa0 <_strtod_l+0x4c8>
 8010a0e:	2400      	movs	r4, #0
 8010a10:	46a0      	mov	r8, r4
 8010a12:	940a      	str	r4, [sp, #40]	@ 0x28
 8010a14:	46a1      	mov	r9, r4
 8010a16:	9a05      	ldr	r2, [sp, #20]
 8010a18:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010b70 <_strtod_l+0x598>
 8010a1c:	2322      	movs	r3, #34	@ 0x22
 8010a1e:	6013      	str	r3, [r2, #0]
 8010a20:	f04f 0a00 	mov.w	sl, #0
 8010a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	f43f ae0f 	beq.w	801064a <_strtod_l+0x72>
 8010a2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010a2e:	9805      	ldr	r0, [sp, #20]
 8010a30:	f7ff f940 	bl	800fcb4 <_Bfree>
 8010a34:	9805      	ldr	r0, [sp, #20]
 8010a36:	4649      	mov	r1, r9
 8010a38:	f7ff f93c 	bl	800fcb4 <_Bfree>
 8010a3c:	9805      	ldr	r0, [sp, #20]
 8010a3e:	4641      	mov	r1, r8
 8010a40:	f7ff f938 	bl	800fcb4 <_Bfree>
 8010a44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a46:	9805      	ldr	r0, [sp, #20]
 8010a48:	f7ff f934 	bl	800fcb4 <_Bfree>
 8010a4c:	9805      	ldr	r0, [sp, #20]
 8010a4e:	4621      	mov	r1, r4
 8010a50:	f7ff f930 	bl	800fcb4 <_Bfree>
 8010a54:	e5f9      	b.n	801064a <_strtod_l+0x72>
 8010a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	dbbc      	blt.n	80109da <_strtod_l+0x402>
 8010a60:	4c41      	ldr	r4, [pc, #260]	@ (8010b68 <_strtod_l+0x590>)
 8010a62:	f1c5 050f 	rsb	r5, r5, #15
 8010a66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010a6a:	4652      	mov	r2, sl
 8010a6c:	465b      	mov	r3, fp
 8010a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a72:	f7ef fde9 	bl	8000648 <__aeabi_dmul>
 8010a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a78:	1b5d      	subs	r5, r3, r5
 8010a7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010a7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010a82:	e78f      	b.n	80109a4 <_strtod_l+0x3cc>
 8010a84:	3316      	adds	r3, #22
 8010a86:	dba8      	blt.n	80109da <_strtod_l+0x402>
 8010a88:	4b37      	ldr	r3, [pc, #220]	@ (8010b68 <_strtod_l+0x590>)
 8010a8a:	eba9 0808 	sub.w	r8, r9, r8
 8010a8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010a92:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010a96:	4650      	mov	r0, sl
 8010a98:	4659      	mov	r1, fp
 8010a9a:	f7ef feff 	bl	800089c <__aeabi_ddiv>
 8010a9e:	e783      	b.n	80109a8 <_strtod_l+0x3d0>
 8010aa0:	4b32      	ldr	r3, [pc, #200]	@ (8010b6c <_strtod_l+0x594>)
 8010aa2:	9308      	str	r3, [sp, #32]
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	1124      	asrs	r4, r4, #4
 8010aa8:	4650      	mov	r0, sl
 8010aaa:	4659      	mov	r1, fp
 8010aac:	461e      	mov	r6, r3
 8010aae:	2c01      	cmp	r4, #1
 8010ab0:	dc21      	bgt.n	8010af6 <_strtod_l+0x51e>
 8010ab2:	b10b      	cbz	r3, 8010ab8 <_strtod_l+0x4e0>
 8010ab4:	4682      	mov	sl, r0
 8010ab6:	468b      	mov	fp, r1
 8010ab8:	492c      	ldr	r1, [pc, #176]	@ (8010b6c <_strtod_l+0x594>)
 8010aba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010abe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010ac2:	4652      	mov	r2, sl
 8010ac4:	465b      	mov	r3, fp
 8010ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010aca:	f7ef fdbd 	bl	8000648 <__aeabi_dmul>
 8010ace:	4b28      	ldr	r3, [pc, #160]	@ (8010b70 <_strtod_l+0x598>)
 8010ad0:	460a      	mov	r2, r1
 8010ad2:	400b      	ands	r3, r1
 8010ad4:	4927      	ldr	r1, [pc, #156]	@ (8010b74 <_strtod_l+0x59c>)
 8010ad6:	428b      	cmp	r3, r1
 8010ad8:	4682      	mov	sl, r0
 8010ada:	d898      	bhi.n	8010a0e <_strtod_l+0x436>
 8010adc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010ae0:	428b      	cmp	r3, r1
 8010ae2:	bf86      	itte	hi
 8010ae4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010b78 <_strtod_l+0x5a0>
 8010ae8:	f04f 3aff 	movhi.w	sl, #4294967295
 8010aec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010af0:	2300      	movs	r3, #0
 8010af2:	9308      	str	r3, [sp, #32]
 8010af4:	e07a      	b.n	8010bec <_strtod_l+0x614>
 8010af6:	07e2      	lsls	r2, r4, #31
 8010af8:	d505      	bpl.n	8010b06 <_strtod_l+0x52e>
 8010afa:	9b08      	ldr	r3, [sp, #32]
 8010afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b00:	f7ef fda2 	bl	8000648 <__aeabi_dmul>
 8010b04:	2301      	movs	r3, #1
 8010b06:	9a08      	ldr	r2, [sp, #32]
 8010b08:	3208      	adds	r2, #8
 8010b0a:	3601      	adds	r6, #1
 8010b0c:	1064      	asrs	r4, r4, #1
 8010b0e:	9208      	str	r2, [sp, #32]
 8010b10:	e7cd      	b.n	8010aae <_strtod_l+0x4d6>
 8010b12:	d0ed      	beq.n	8010af0 <_strtod_l+0x518>
 8010b14:	4264      	negs	r4, r4
 8010b16:	f014 020f 	ands.w	r2, r4, #15
 8010b1a:	d00a      	beq.n	8010b32 <_strtod_l+0x55a>
 8010b1c:	4b12      	ldr	r3, [pc, #72]	@ (8010b68 <_strtod_l+0x590>)
 8010b1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b22:	4650      	mov	r0, sl
 8010b24:	4659      	mov	r1, fp
 8010b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b2a:	f7ef feb7 	bl	800089c <__aeabi_ddiv>
 8010b2e:	4682      	mov	sl, r0
 8010b30:	468b      	mov	fp, r1
 8010b32:	1124      	asrs	r4, r4, #4
 8010b34:	d0dc      	beq.n	8010af0 <_strtod_l+0x518>
 8010b36:	2c1f      	cmp	r4, #31
 8010b38:	dd20      	ble.n	8010b7c <_strtod_l+0x5a4>
 8010b3a:	2400      	movs	r4, #0
 8010b3c:	46a0      	mov	r8, r4
 8010b3e:	940a      	str	r4, [sp, #40]	@ 0x28
 8010b40:	46a1      	mov	r9, r4
 8010b42:	9a05      	ldr	r2, [sp, #20]
 8010b44:	2322      	movs	r3, #34	@ 0x22
 8010b46:	f04f 0a00 	mov.w	sl, #0
 8010b4a:	f04f 0b00 	mov.w	fp, #0
 8010b4e:	6013      	str	r3, [r2, #0]
 8010b50:	e768      	b.n	8010a24 <_strtod_l+0x44c>
 8010b52:	bf00      	nop
 8010b54:	08013451 	.word	0x08013451
 8010b58:	08013664 	.word	0x08013664
 8010b5c:	08013449 	.word	0x08013449
 8010b60:	08013480 	.word	0x08013480
 8010b64:	08013443 	.word	0x08013443
 8010b68:	08013598 	.word	0x08013598
 8010b6c:	08013570 	.word	0x08013570
 8010b70:	7ff00000 	.word	0x7ff00000
 8010b74:	7ca00000 	.word	0x7ca00000
 8010b78:	7fefffff 	.word	0x7fefffff
 8010b7c:	f014 0310 	ands.w	r3, r4, #16
 8010b80:	bf18      	it	ne
 8010b82:	236a      	movne	r3, #106	@ 0x6a
 8010b84:	4ea9      	ldr	r6, [pc, #676]	@ (8010e2c <_strtod_l+0x854>)
 8010b86:	9308      	str	r3, [sp, #32]
 8010b88:	4650      	mov	r0, sl
 8010b8a:	4659      	mov	r1, fp
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	07e2      	lsls	r2, r4, #31
 8010b90:	d504      	bpl.n	8010b9c <_strtod_l+0x5c4>
 8010b92:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010b96:	f7ef fd57 	bl	8000648 <__aeabi_dmul>
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	1064      	asrs	r4, r4, #1
 8010b9e:	f106 0608 	add.w	r6, r6, #8
 8010ba2:	d1f4      	bne.n	8010b8e <_strtod_l+0x5b6>
 8010ba4:	b10b      	cbz	r3, 8010baa <_strtod_l+0x5d2>
 8010ba6:	4682      	mov	sl, r0
 8010ba8:	468b      	mov	fp, r1
 8010baa:	9b08      	ldr	r3, [sp, #32]
 8010bac:	b1b3      	cbz	r3, 8010bdc <_strtod_l+0x604>
 8010bae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010bb2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	4659      	mov	r1, fp
 8010bba:	dd0f      	ble.n	8010bdc <_strtod_l+0x604>
 8010bbc:	2b1f      	cmp	r3, #31
 8010bbe:	dd55      	ble.n	8010c6c <_strtod_l+0x694>
 8010bc0:	2b34      	cmp	r3, #52	@ 0x34
 8010bc2:	bfde      	ittt	le
 8010bc4:	f04f 33ff 	movle.w	r3, #4294967295
 8010bc8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010bcc:	4093      	lslle	r3, r2
 8010bce:	f04f 0a00 	mov.w	sl, #0
 8010bd2:	bfcc      	ite	gt
 8010bd4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010bd8:	ea03 0b01 	andle.w	fp, r3, r1
 8010bdc:	2200      	movs	r2, #0
 8010bde:	2300      	movs	r3, #0
 8010be0:	4650      	mov	r0, sl
 8010be2:	4659      	mov	r1, fp
 8010be4:	f7ef ff98 	bl	8000b18 <__aeabi_dcmpeq>
 8010be8:	2800      	cmp	r0, #0
 8010bea:	d1a6      	bne.n	8010b3a <_strtod_l+0x562>
 8010bec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bee:	9300      	str	r3, [sp, #0]
 8010bf0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010bf2:	9805      	ldr	r0, [sp, #20]
 8010bf4:	462b      	mov	r3, r5
 8010bf6:	463a      	mov	r2, r7
 8010bf8:	f7ff f8c4 	bl	800fd84 <__s2b>
 8010bfc:	900a      	str	r0, [sp, #40]	@ 0x28
 8010bfe:	2800      	cmp	r0, #0
 8010c00:	f43f af05 	beq.w	8010a0e <_strtod_l+0x436>
 8010c04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c06:	2a00      	cmp	r2, #0
 8010c08:	eba9 0308 	sub.w	r3, r9, r8
 8010c0c:	bfa8      	it	ge
 8010c0e:	2300      	movge	r3, #0
 8010c10:	9312      	str	r3, [sp, #72]	@ 0x48
 8010c12:	2400      	movs	r4, #0
 8010c14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010c18:	9316      	str	r3, [sp, #88]	@ 0x58
 8010c1a:	46a0      	mov	r8, r4
 8010c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c1e:	9805      	ldr	r0, [sp, #20]
 8010c20:	6859      	ldr	r1, [r3, #4]
 8010c22:	f7ff f807 	bl	800fc34 <_Balloc>
 8010c26:	4681      	mov	r9, r0
 8010c28:	2800      	cmp	r0, #0
 8010c2a:	f43f aef4 	beq.w	8010a16 <_strtod_l+0x43e>
 8010c2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c30:	691a      	ldr	r2, [r3, #16]
 8010c32:	3202      	adds	r2, #2
 8010c34:	f103 010c 	add.w	r1, r3, #12
 8010c38:	0092      	lsls	r2, r2, #2
 8010c3a:	300c      	adds	r0, #12
 8010c3c:	f7fe f94d 	bl	800eeda <memcpy>
 8010c40:	ec4b ab10 	vmov	d0, sl, fp
 8010c44:	9805      	ldr	r0, [sp, #20]
 8010c46:	aa1c      	add	r2, sp, #112	@ 0x70
 8010c48:	a91b      	add	r1, sp, #108	@ 0x6c
 8010c4a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010c4e:	f7ff fbd5 	bl	80103fc <__d2b>
 8010c52:	901a      	str	r0, [sp, #104]	@ 0x68
 8010c54:	2800      	cmp	r0, #0
 8010c56:	f43f aede 	beq.w	8010a16 <_strtod_l+0x43e>
 8010c5a:	9805      	ldr	r0, [sp, #20]
 8010c5c:	2101      	movs	r1, #1
 8010c5e:	f7ff f927 	bl	800feb0 <__i2b>
 8010c62:	4680      	mov	r8, r0
 8010c64:	b948      	cbnz	r0, 8010c7a <_strtod_l+0x6a2>
 8010c66:	f04f 0800 	mov.w	r8, #0
 8010c6a:	e6d4      	b.n	8010a16 <_strtod_l+0x43e>
 8010c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c70:	fa02 f303 	lsl.w	r3, r2, r3
 8010c74:	ea03 0a0a 	and.w	sl, r3, sl
 8010c78:	e7b0      	b.n	8010bdc <_strtod_l+0x604>
 8010c7a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010c7c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010c7e:	2d00      	cmp	r5, #0
 8010c80:	bfab      	itete	ge
 8010c82:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010c84:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010c86:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010c88:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010c8a:	bfac      	ite	ge
 8010c8c:	18ef      	addge	r7, r5, r3
 8010c8e:	1b5e      	sublt	r6, r3, r5
 8010c90:	9b08      	ldr	r3, [sp, #32]
 8010c92:	1aed      	subs	r5, r5, r3
 8010c94:	4415      	add	r5, r2
 8010c96:	4b66      	ldr	r3, [pc, #408]	@ (8010e30 <_strtod_l+0x858>)
 8010c98:	3d01      	subs	r5, #1
 8010c9a:	429d      	cmp	r5, r3
 8010c9c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010ca0:	da50      	bge.n	8010d44 <_strtod_l+0x76c>
 8010ca2:	1b5b      	subs	r3, r3, r5
 8010ca4:	2b1f      	cmp	r3, #31
 8010ca6:	eba2 0203 	sub.w	r2, r2, r3
 8010caa:	f04f 0101 	mov.w	r1, #1
 8010cae:	dc3d      	bgt.n	8010d2c <_strtod_l+0x754>
 8010cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8010cb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8010cba:	18bd      	adds	r5, r7, r2
 8010cbc:	9b08      	ldr	r3, [sp, #32]
 8010cbe:	42af      	cmp	r7, r5
 8010cc0:	4416      	add	r6, r2
 8010cc2:	441e      	add	r6, r3
 8010cc4:	463b      	mov	r3, r7
 8010cc6:	bfa8      	it	ge
 8010cc8:	462b      	movge	r3, r5
 8010cca:	42b3      	cmp	r3, r6
 8010ccc:	bfa8      	it	ge
 8010cce:	4633      	movge	r3, r6
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	bfc2      	ittt	gt
 8010cd4:	1aed      	subgt	r5, r5, r3
 8010cd6:	1af6      	subgt	r6, r6, r3
 8010cd8:	1aff      	subgt	r7, r7, r3
 8010cda:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	dd16      	ble.n	8010d0e <_strtod_l+0x736>
 8010ce0:	4641      	mov	r1, r8
 8010ce2:	9805      	ldr	r0, [sp, #20]
 8010ce4:	461a      	mov	r2, r3
 8010ce6:	f7ff f9a3 	bl	8010030 <__pow5mult>
 8010cea:	4680      	mov	r8, r0
 8010cec:	2800      	cmp	r0, #0
 8010cee:	d0ba      	beq.n	8010c66 <_strtod_l+0x68e>
 8010cf0:	4601      	mov	r1, r0
 8010cf2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010cf4:	9805      	ldr	r0, [sp, #20]
 8010cf6:	f7ff f8f1 	bl	800fedc <__multiply>
 8010cfa:	900e      	str	r0, [sp, #56]	@ 0x38
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	f43f ae8a 	beq.w	8010a16 <_strtod_l+0x43e>
 8010d02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010d04:	9805      	ldr	r0, [sp, #20]
 8010d06:	f7fe ffd5 	bl	800fcb4 <_Bfree>
 8010d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d0e:	2d00      	cmp	r5, #0
 8010d10:	dc1d      	bgt.n	8010d4e <_strtod_l+0x776>
 8010d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	dd23      	ble.n	8010d60 <_strtod_l+0x788>
 8010d18:	4649      	mov	r1, r9
 8010d1a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010d1c:	9805      	ldr	r0, [sp, #20]
 8010d1e:	f7ff f987 	bl	8010030 <__pow5mult>
 8010d22:	4681      	mov	r9, r0
 8010d24:	b9e0      	cbnz	r0, 8010d60 <_strtod_l+0x788>
 8010d26:	f04f 0900 	mov.w	r9, #0
 8010d2a:	e674      	b.n	8010a16 <_strtod_l+0x43e>
 8010d2c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010d30:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010d34:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010d38:	35e2      	adds	r5, #226	@ 0xe2
 8010d3a:	fa01 f305 	lsl.w	r3, r1, r5
 8010d3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010d40:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010d42:	e7ba      	b.n	8010cba <_strtod_l+0x6e2>
 8010d44:	2300      	movs	r3, #0
 8010d46:	9310      	str	r3, [sp, #64]	@ 0x40
 8010d48:	2301      	movs	r3, #1
 8010d4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010d4c:	e7b5      	b.n	8010cba <_strtod_l+0x6e2>
 8010d4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010d50:	9805      	ldr	r0, [sp, #20]
 8010d52:	462a      	mov	r2, r5
 8010d54:	f7ff f9c6 	bl	80100e4 <__lshift>
 8010d58:	901a      	str	r0, [sp, #104]	@ 0x68
 8010d5a:	2800      	cmp	r0, #0
 8010d5c:	d1d9      	bne.n	8010d12 <_strtod_l+0x73a>
 8010d5e:	e65a      	b.n	8010a16 <_strtod_l+0x43e>
 8010d60:	2e00      	cmp	r6, #0
 8010d62:	dd07      	ble.n	8010d74 <_strtod_l+0x79c>
 8010d64:	4649      	mov	r1, r9
 8010d66:	9805      	ldr	r0, [sp, #20]
 8010d68:	4632      	mov	r2, r6
 8010d6a:	f7ff f9bb 	bl	80100e4 <__lshift>
 8010d6e:	4681      	mov	r9, r0
 8010d70:	2800      	cmp	r0, #0
 8010d72:	d0d8      	beq.n	8010d26 <_strtod_l+0x74e>
 8010d74:	2f00      	cmp	r7, #0
 8010d76:	dd08      	ble.n	8010d8a <_strtod_l+0x7b2>
 8010d78:	4641      	mov	r1, r8
 8010d7a:	9805      	ldr	r0, [sp, #20]
 8010d7c:	463a      	mov	r2, r7
 8010d7e:	f7ff f9b1 	bl	80100e4 <__lshift>
 8010d82:	4680      	mov	r8, r0
 8010d84:	2800      	cmp	r0, #0
 8010d86:	f43f ae46 	beq.w	8010a16 <_strtod_l+0x43e>
 8010d8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010d8c:	9805      	ldr	r0, [sp, #20]
 8010d8e:	464a      	mov	r2, r9
 8010d90:	f7ff fa30 	bl	80101f4 <__mdiff>
 8010d94:	4604      	mov	r4, r0
 8010d96:	2800      	cmp	r0, #0
 8010d98:	f43f ae3d 	beq.w	8010a16 <_strtod_l+0x43e>
 8010d9c:	68c3      	ldr	r3, [r0, #12]
 8010d9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010da0:	2300      	movs	r3, #0
 8010da2:	60c3      	str	r3, [r0, #12]
 8010da4:	4641      	mov	r1, r8
 8010da6:	f7ff fa09 	bl	80101bc <__mcmp>
 8010daa:	2800      	cmp	r0, #0
 8010dac:	da46      	bge.n	8010e3c <_strtod_l+0x864>
 8010dae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010db0:	ea53 030a 	orrs.w	r3, r3, sl
 8010db4:	d16c      	bne.n	8010e90 <_strtod_l+0x8b8>
 8010db6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d168      	bne.n	8010e90 <_strtod_l+0x8b8>
 8010dbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010dc2:	0d1b      	lsrs	r3, r3, #20
 8010dc4:	051b      	lsls	r3, r3, #20
 8010dc6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010dca:	d961      	bls.n	8010e90 <_strtod_l+0x8b8>
 8010dcc:	6963      	ldr	r3, [r4, #20]
 8010dce:	b913      	cbnz	r3, 8010dd6 <_strtod_l+0x7fe>
 8010dd0:	6923      	ldr	r3, [r4, #16]
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	dd5c      	ble.n	8010e90 <_strtod_l+0x8b8>
 8010dd6:	4621      	mov	r1, r4
 8010dd8:	2201      	movs	r2, #1
 8010dda:	9805      	ldr	r0, [sp, #20]
 8010ddc:	f7ff f982 	bl	80100e4 <__lshift>
 8010de0:	4641      	mov	r1, r8
 8010de2:	4604      	mov	r4, r0
 8010de4:	f7ff f9ea 	bl	80101bc <__mcmp>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	dd51      	ble.n	8010e90 <_strtod_l+0x8b8>
 8010dec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010df0:	9a08      	ldr	r2, [sp, #32]
 8010df2:	0d1b      	lsrs	r3, r3, #20
 8010df4:	051b      	lsls	r3, r3, #20
 8010df6:	2a00      	cmp	r2, #0
 8010df8:	d06b      	beq.n	8010ed2 <_strtod_l+0x8fa>
 8010dfa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010dfe:	d868      	bhi.n	8010ed2 <_strtod_l+0x8fa>
 8010e00:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010e04:	f67f ae9d 	bls.w	8010b42 <_strtod_l+0x56a>
 8010e08:	4b0a      	ldr	r3, [pc, #40]	@ (8010e34 <_strtod_l+0x85c>)
 8010e0a:	4650      	mov	r0, sl
 8010e0c:	4659      	mov	r1, fp
 8010e0e:	2200      	movs	r2, #0
 8010e10:	f7ef fc1a 	bl	8000648 <__aeabi_dmul>
 8010e14:	4b08      	ldr	r3, [pc, #32]	@ (8010e38 <_strtod_l+0x860>)
 8010e16:	400b      	ands	r3, r1
 8010e18:	4682      	mov	sl, r0
 8010e1a:	468b      	mov	fp, r1
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f47f ae05 	bne.w	8010a2c <_strtod_l+0x454>
 8010e22:	9a05      	ldr	r2, [sp, #20]
 8010e24:	2322      	movs	r3, #34	@ 0x22
 8010e26:	6013      	str	r3, [r2, #0]
 8010e28:	e600      	b.n	8010a2c <_strtod_l+0x454>
 8010e2a:	bf00      	nop
 8010e2c:	08013690 	.word	0x08013690
 8010e30:	fffffc02 	.word	0xfffffc02
 8010e34:	39500000 	.word	0x39500000
 8010e38:	7ff00000 	.word	0x7ff00000
 8010e3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010e40:	d165      	bne.n	8010f0e <_strtod_l+0x936>
 8010e42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010e44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010e48:	b35a      	cbz	r2, 8010ea2 <_strtod_l+0x8ca>
 8010e4a:	4a9f      	ldr	r2, [pc, #636]	@ (80110c8 <_strtod_l+0xaf0>)
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	d12b      	bne.n	8010ea8 <_strtod_l+0x8d0>
 8010e50:	9b08      	ldr	r3, [sp, #32]
 8010e52:	4651      	mov	r1, sl
 8010e54:	b303      	cbz	r3, 8010e98 <_strtod_l+0x8c0>
 8010e56:	4b9d      	ldr	r3, [pc, #628]	@ (80110cc <_strtod_l+0xaf4>)
 8010e58:	465a      	mov	r2, fp
 8010e5a:	4013      	ands	r3, r2
 8010e5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010e60:	f04f 32ff 	mov.w	r2, #4294967295
 8010e64:	d81b      	bhi.n	8010e9e <_strtod_l+0x8c6>
 8010e66:	0d1b      	lsrs	r3, r3, #20
 8010e68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e70:	4299      	cmp	r1, r3
 8010e72:	d119      	bne.n	8010ea8 <_strtod_l+0x8d0>
 8010e74:	4b96      	ldr	r3, [pc, #600]	@ (80110d0 <_strtod_l+0xaf8>)
 8010e76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d102      	bne.n	8010e82 <_strtod_l+0x8aa>
 8010e7c:	3101      	adds	r1, #1
 8010e7e:	f43f adca 	beq.w	8010a16 <_strtod_l+0x43e>
 8010e82:	4b92      	ldr	r3, [pc, #584]	@ (80110cc <_strtod_l+0xaf4>)
 8010e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e86:	401a      	ands	r2, r3
 8010e88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010e8c:	f04f 0a00 	mov.w	sl, #0
 8010e90:	9b08      	ldr	r3, [sp, #32]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d1b8      	bne.n	8010e08 <_strtod_l+0x830>
 8010e96:	e5c9      	b.n	8010a2c <_strtod_l+0x454>
 8010e98:	f04f 33ff 	mov.w	r3, #4294967295
 8010e9c:	e7e8      	b.n	8010e70 <_strtod_l+0x898>
 8010e9e:	4613      	mov	r3, r2
 8010ea0:	e7e6      	b.n	8010e70 <_strtod_l+0x898>
 8010ea2:	ea53 030a 	orrs.w	r3, r3, sl
 8010ea6:	d0a1      	beq.n	8010dec <_strtod_l+0x814>
 8010ea8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010eaa:	b1db      	cbz	r3, 8010ee4 <_strtod_l+0x90c>
 8010eac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010eae:	4213      	tst	r3, r2
 8010eb0:	d0ee      	beq.n	8010e90 <_strtod_l+0x8b8>
 8010eb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010eb4:	9a08      	ldr	r2, [sp, #32]
 8010eb6:	4650      	mov	r0, sl
 8010eb8:	4659      	mov	r1, fp
 8010eba:	b1bb      	cbz	r3, 8010eec <_strtod_l+0x914>
 8010ebc:	f7ff fb6c 	bl	8010598 <sulp>
 8010ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010ec4:	ec53 2b10 	vmov	r2, r3, d0
 8010ec8:	f7ef fa08 	bl	80002dc <__adddf3>
 8010ecc:	4682      	mov	sl, r0
 8010ece:	468b      	mov	fp, r1
 8010ed0:	e7de      	b.n	8010e90 <_strtod_l+0x8b8>
 8010ed2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010ed6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010eda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010ede:	f04f 3aff 	mov.w	sl, #4294967295
 8010ee2:	e7d5      	b.n	8010e90 <_strtod_l+0x8b8>
 8010ee4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010ee6:	ea13 0f0a 	tst.w	r3, sl
 8010eea:	e7e1      	b.n	8010eb0 <_strtod_l+0x8d8>
 8010eec:	f7ff fb54 	bl	8010598 <sulp>
 8010ef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010ef4:	ec53 2b10 	vmov	r2, r3, d0
 8010ef8:	f7ef f9ee 	bl	80002d8 <__aeabi_dsub>
 8010efc:	2200      	movs	r2, #0
 8010efe:	2300      	movs	r3, #0
 8010f00:	4682      	mov	sl, r0
 8010f02:	468b      	mov	fp, r1
 8010f04:	f7ef fe08 	bl	8000b18 <__aeabi_dcmpeq>
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	d0c1      	beq.n	8010e90 <_strtod_l+0x8b8>
 8010f0c:	e619      	b.n	8010b42 <_strtod_l+0x56a>
 8010f0e:	4641      	mov	r1, r8
 8010f10:	4620      	mov	r0, r4
 8010f12:	f7ff facb 	bl	80104ac <__ratio>
 8010f16:	ec57 6b10 	vmov	r6, r7, d0
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010f20:	4630      	mov	r0, r6
 8010f22:	4639      	mov	r1, r7
 8010f24:	f7ef fe0c 	bl	8000b40 <__aeabi_dcmple>
 8010f28:	2800      	cmp	r0, #0
 8010f2a:	d06f      	beq.n	801100c <_strtod_l+0xa34>
 8010f2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d17a      	bne.n	8011028 <_strtod_l+0xa50>
 8010f32:	f1ba 0f00 	cmp.w	sl, #0
 8010f36:	d158      	bne.n	8010fea <_strtod_l+0xa12>
 8010f38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d15a      	bne.n	8010ff8 <_strtod_l+0xa20>
 8010f42:	4b64      	ldr	r3, [pc, #400]	@ (80110d4 <_strtod_l+0xafc>)
 8010f44:	2200      	movs	r2, #0
 8010f46:	4630      	mov	r0, r6
 8010f48:	4639      	mov	r1, r7
 8010f4a:	f7ef fdef 	bl	8000b2c <__aeabi_dcmplt>
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	d159      	bne.n	8011006 <_strtod_l+0xa2e>
 8010f52:	4630      	mov	r0, r6
 8010f54:	4639      	mov	r1, r7
 8010f56:	4b60      	ldr	r3, [pc, #384]	@ (80110d8 <_strtod_l+0xb00>)
 8010f58:	2200      	movs	r2, #0
 8010f5a:	f7ef fb75 	bl	8000648 <__aeabi_dmul>
 8010f5e:	4606      	mov	r6, r0
 8010f60:	460f      	mov	r7, r1
 8010f62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010f66:	9606      	str	r6, [sp, #24]
 8010f68:	9307      	str	r3, [sp, #28]
 8010f6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f6e:	4d57      	ldr	r5, [pc, #348]	@ (80110cc <_strtod_l+0xaf4>)
 8010f70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f76:	401d      	ands	r5, r3
 8010f78:	4b58      	ldr	r3, [pc, #352]	@ (80110dc <_strtod_l+0xb04>)
 8010f7a:	429d      	cmp	r5, r3
 8010f7c:	f040 80b2 	bne.w	80110e4 <_strtod_l+0xb0c>
 8010f80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010f86:	ec4b ab10 	vmov	d0, sl, fp
 8010f8a:	f7ff f9c7 	bl	801031c <__ulp>
 8010f8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f92:	ec51 0b10 	vmov	r0, r1, d0
 8010f96:	f7ef fb57 	bl	8000648 <__aeabi_dmul>
 8010f9a:	4652      	mov	r2, sl
 8010f9c:	465b      	mov	r3, fp
 8010f9e:	f7ef f99d 	bl	80002dc <__adddf3>
 8010fa2:	460b      	mov	r3, r1
 8010fa4:	4949      	ldr	r1, [pc, #292]	@ (80110cc <_strtod_l+0xaf4>)
 8010fa6:	4a4e      	ldr	r2, [pc, #312]	@ (80110e0 <_strtod_l+0xb08>)
 8010fa8:	4019      	ands	r1, r3
 8010faa:	4291      	cmp	r1, r2
 8010fac:	4682      	mov	sl, r0
 8010fae:	d942      	bls.n	8011036 <_strtod_l+0xa5e>
 8010fb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010fb2:	4b47      	ldr	r3, [pc, #284]	@ (80110d0 <_strtod_l+0xaf8>)
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d103      	bne.n	8010fc0 <_strtod_l+0x9e8>
 8010fb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010fba:	3301      	adds	r3, #1
 8010fbc:	f43f ad2b 	beq.w	8010a16 <_strtod_l+0x43e>
 8010fc0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80110d0 <_strtod_l+0xaf8>
 8010fc4:	f04f 3aff 	mov.w	sl, #4294967295
 8010fc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010fca:	9805      	ldr	r0, [sp, #20]
 8010fcc:	f7fe fe72 	bl	800fcb4 <_Bfree>
 8010fd0:	9805      	ldr	r0, [sp, #20]
 8010fd2:	4649      	mov	r1, r9
 8010fd4:	f7fe fe6e 	bl	800fcb4 <_Bfree>
 8010fd8:	9805      	ldr	r0, [sp, #20]
 8010fda:	4641      	mov	r1, r8
 8010fdc:	f7fe fe6a 	bl	800fcb4 <_Bfree>
 8010fe0:	9805      	ldr	r0, [sp, #20]
 8010fe2:	4621      	mov	r1, r4
 8010fe4:	f7fe fe66 	bl	800fcb4 <_Bfree>
 8010fe8:	e618      	b.n	8010c1c <_strtod_l+0x644>
 8010fea:	f1ba 0f01 	cmp.w	sl, #1
 8010fee:	d103      	bne.n	8010ff8 <_strtod_l+0xa20>
 8010ff0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	f43f ada5 	beq.w	8010b42 <_strtod_l+0x56a>
 8010ff8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80110a8 <_strtod_l+0xad0>
 8010ffc:	4f35      	ldr	r7, [pc, #212]	@ (80110d4 <_strtod_l+0xafc>)
 8010ffe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011002:	2600      	movs	r6, #0
 8011004:	e7b1      	b.n	8010f6a <_strtod_l+0x992>
 8011006:	4f34      	ldr	r7, [pc, #208]	@ (80110d8 <_strtod_l+0xb00>)
 8011008:	2600      	movs	r6, #0
 801100a:	e7aa      	b.n	8010f62 <_strtod_l+0x98a>
 801100c:	4b32      	ldr	r3, [pc, #200]	@ (80110d8 <_strtod_l+0xb00>)
 801100e:	4630      	mov	r0, r6
 8011010:	4639      	mov	r1, r7
 8011012:	2200      	movs	r2, #0
 8011014:	f7ef fb18 	bl	8000648 <__aeabi_dmul>
 8011018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801101a:	4606      	mov	r6, r0
 801101c:	460f      	mov	r7, r1
 801101e:	2b00      	cmp	r3, #0
 8011020:	d09f      	beq.n	8010f62 <_strtod_l+0x98a>
 8011022:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011026:	e7a0      	b.n	8010f6a <_strtod_l+0x992>
 8011028:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80110b0 <_strtod_l+0xad8>
 801102c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011030:	ec57 6b17 	vmov	r6, r7, d7
 8011034:	e799      	b.n	8010f6a <_strtod_l+0x992>
 8011036:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801103a:	9b08      	ldr	r3, [sp, #32]
 801103c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011040:	2b00      	cmp	r3, #0
 8011042:	d1c1      	bne.n	8010fc8 <_strtod_l+0x9f0>
 8011044:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011048:	0d1b      	lsrs	r3, r3, #20
 801104a:	051b      	lsls	r3, r3, #20
 801104c:	429d      	cmp	r5, r3
 801104e:	d1bb      	bne.n	8010fc8 <_strtod_l+0x9f0>
 8011050:	4630      	mov	r0, r6
 8011052:	4639      	mov	r1, r7
 8011054:	f7ef fe58 	bl	8000d08 <__aeabi_d2lz>
 8011058:	f7ef fac8 	bl	80005ec <__aeabi_l2d>
 801105c:	4602      	mov	r2, r0
 801105e:	460b      	mov	r3, r1
 8011060:	4630      	mov	r0, r6
 8011062:	4639      	mov	r1, r7
 8011064:	f7ef f938 	bl	80002d8 <__aeabi_dsub>
 8011068:	460b      	mov	r3, r1
 801106a:	4602      	mov	r2, r0
 801106c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011070:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011076:	ea46 060a 	orr.w	r6, r6, sl
 801107a:	431e      	orrs	r6, r3
 801107c:	d06f      	beq.n	801115e <_strtod_l+0xb86>
 801107e:	a30e      	add	r3, pc, #56	@ (adr r3, 80110b8 <_strtod_l+0xae0>)
 8011080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011084:	f7ef fd52 	bl	8000b2c <__aeabi_dcmplt>
 8011088:	2800      	cmp	r0, #0
 801108a:	f47f accf 	bne.w	8010a2c <_strtod_l+0x454>
 801108e:	a30c      	add	r3, pc, #48	@ (adr r3, 80110c0 <_strtod_l+0xae8>)
 8011090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011094:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011098:	f7ef fd66 	bl	8000b68 <__aeabi_dcmpgt>
 801109c:	2800      	cmp	r0, #0
 801109e:	d093      	beq.n	8010fc8 <_strtod_l+0x9f0>
 80110a0:	e4c4      	b.n	8010a2c <_strtod_l+0x454>
 80110a2:	bf00      	nop
 80110a4:	f3af 8000 	nop.w
 80110a8:	00000000 	.word	0x00000000
 80110ac:	bff00000 	.word	0xbff00000
 80110b0:	00000000 	.word	0x00000000
 80110b4:	3ff00000 	.word	0x3ff00000
 80110b8:	94a03595 	.word	0x94a03595
 80110bc:	3fdfffff 	.word	0x3fdfffff
 80110c0:	35afe535 	.word	0x35afe535
 80110c4:	3fe00000 	.word	0x3fe00000
 80110c8:	000fffff 	.word	0x000fffff
 80110cc:	7ff00000 	.word	0x7ff00000
 80110d0:	7fefffff 	.word	0x7fefffff
 80110d4:	3ff00000 	.word	0x3ff00000
 80110d8:	3fe00000 	.word	0x3fe00000
 80110dc:	7fe00000 	.word	0x7fe00000
 80110e0:	7c9fffff 	.word	0x7c9fffff
 80110e4:	9b08      	ldr	r3, [sp, #32]
 80110e6:	b323      	cbz	r3, 8011132 <_strtod_l+0xb5a>
 80110e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80110ec:	d821      	bhi.n	8011132 <_strtod_l+0xb5a>
 80110ee:	a328      	add	r3, pc, #160	@ (adr r3, 8011190 <_strtod_l+0xbb8>)
 80110f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f4:	4630      	mov	r0, r6
 80110f6:	4639      	mov	r1, r7
 80110f8:	f7ef fd22 	bl	8000b40 <__aeabi_dcmple>
 80110fc:	b1a0      	cbz	r0, 8011128 <_strtod_l+0xb50>
 80110fe:	4639      	mov	r1, r7
 8011100:	4630      	mov	r0, r6
 8011102:	f7ef fd79 	bl	8000bf8 <__aeabi_d2uiz>
 8011106:	2801      	cmp	r0, #1
 8011108:	bf38      	it	cc
 801110a:	2001      	movcc	r0, #1
 801110c:	f7ef fa22 	bl	8000554 <__aeabi_ui2d>
 8011110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011112:	4606      	mov	r6, r0
 8011114:	460f      	mov	r7, r1
 8011116:	b9fb      	cbnz	r3, 8011158 <_strtod_l+0xb80>
 8011118:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801111c:	9014      	str	r0, [sp, #80]	@ 0x50
 801111e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011120:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011124:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011128:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801112a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801112e:	1b5b      	subs	r3, r3, r5
 8011130:	9311      	str	r3, [sp, #68]	@ 0x44
 8011132:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011136:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801113a:	f7ff f8ef 	bl	801031c <__ulp>
 801113e:	4650      	mov	r0, sl
 8011140:	ec53 2b10 	vmov	r2, r3, d0
 8011144:	4659      	mov	r1, fp
 8011146:	f7ef fa7f 	bl	8000648 <__aeabi_dmul>
 801114a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801114e:	f7ef f8c5 	bl	80002dc <__adddf3>
 8011152:	4682      	mov	sl, r0
 8011154:	468b      	mov	fp, r1
 8011156:	e770      	b.n	801103a <_strtod_l+0xa62>
 8011158:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801115c:	e7e0      	b.n	8011120 <_strtod_l+0xb48>
 801115e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011198 <_strtod_l+0xbc0>)
 8011160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011164:	f7ef fce2 	bl	8000b2c <__aeabi_dcmplt>
 8011168:	e798      	b.n	801109c <_strtod_l+0xac4>
 801116a:	2300      	movs	r3, #0
 801116c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801116e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011170:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011172:	6013      	str	r3, [r2, #0]
 8011174:	f7ff ba6d 	b.w	8010652 <_strtod_l+0x7a>
 8011178:	2a65      	cmp	r2, #101	@ 0x65
 801117a:	f43f ab66 	beq.w	801084a <_strtod_l+0x272>
 801117e:	2a45      	cmp	r2, #69	@ 0x45
 8011180:	f43f ab63 	beq.w	801084a <_strtod_l+0x272>
 8011184:	2301      	movs	r3, #1
 8011186:	f7ff bb9e 	b.w	80108c6 <_strtod_l+0x2ee>
 801118a:	bf00      	nop
 801118c:	f3af 8000 	nop.w
 8011190:	ffc00000 	.word	0xffc00000
 8011194:	41dfffff 	.word	0x41dfffff
 8011198:	94a03595 	.word	0x94a03595
 801119c:	3fcfffff 	.word	0x3fcfffff

080111a0 <_strtod_r>:
 80111a0:	4b01      	ldr	r3, [pc, #4]	@ (80111a8 <_strtod_r+0x8>)
 80111a2:	f7ff ba19 	b.w	80105d8 <_strtod_l>
 80111a6:	bf00      	nop
 80111a8:	20000068 	.word	0x20000068

080111ac <_strtol_l.constprop.0>:
 80111ac:	2b24      	cmp	r3, #36	@ 0x24
 80111ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111b2:	4686      	mov	lr, r0
 80111b4:	4690      	mov	r8, r2
 80111b6:	d801      	bhi.n	80111bc <_strtol_l.constprop.0+0x10>
 80111b8:	2b01      	cmp	r3, #1
 80111ba:	d106      	bne.n	80111ca <_strtol_l.constprop.0+0x1e>
 80111bc:	f7fd fe60 	bl	800ee80 <__errno>
 80111c0:	2316      	movs	r3, #22
 80111c2:	6003      	str	r3, [r0, #0]
 80111c4:	2000      	movs	r0, #0
 80111c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111ca:	4834      	ldr	r0, [pc, #208]	@ (801129c <_strtol_l.constprop.0+0xf0>)
 80111cc:	460d      	mov	r5, r1
 80111ce:	462a      	mov	r2, r5
 80111d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111d4:	5d06      	ldrb	r6, [r0, r4]
 80111d6:	f016 0608 	ands.w	r6, r6, #8
 80111da:	d1f8      	bne.n	80111ce <_strtol_l.constprop.0+0x22>
 80111dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80111de:	d12d      	bne.n	801123c <_strtol_l.constprop.0+0x90>
 80111e0:	782c      	ldrb	r4, [r5, #0]
 80111e2:	2601      	movs	r6, #1
 80111e4:	1c95      	adds	r5, r2, #2
 80111e6:	f033 0210 	bics.w	r2, r3, #16
 80111ea:	d109      	bne.n	8011200 <_strtol_l.constprop.0+0x54>
 80111ec:	2c30      	cmp	r4, #48	@ 0x30
 80111ee:	d12a      	bne.n	8011246 <_strtol_l.constprop.0+0x9a>
 80111f0:	782a      	ldrb	r2, [r5, #0]
 80111f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80111f6:	2a58      	cmp	r2, #88	@ 0x58
 80111f8:	d125      	bne.n	8011246 <_strtol_l.constprop.0+0x9a>
 80111fa:	786c      	ldrb	r4, [r5, #1]
 80111fc:	2310      	movs	r3, #16
 80111fe:	3502      	adds	r5, #2
 8011200:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011204:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011208:	2200      	movs	r2, #0
 801120a:	fbbc f9f3 	udiv	r9, ip, r3
 801120e:	4610      	mov	r0, r2
 8011210:	fb03 ca19 	mls	sl, r3, r9, ip
 8011214:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011218:	2f09      	cmp	r7, #9
 801121a:	d81b      	bhi.n	8011254 <_strtol_l.constprop.0+0xa8>
 801121c:	463c      	mov	r4, r7
 801121e:	42a3      	cmp	r3, r4
 8011220:	dd27      	ble.n	8011272 <_strtol_l.constprop.0+0xc6>
 8011222:	1c57      	adds	r7, r2, #1
 8011224:	d007      	beq.n	8011236 <_strtol_l.constprop.0+0x8a>
 8011226:	4581      	cmp	r9, r0
 8011228:	d320      	bcc.n	801126c <_strtol_l.constprop.0+0xc0>
 801122a:	d101      	bne.n	8011230 <_strtol_l.constprop.0+0x84>
 801122c:	45a2      	cmp	sl, r4
 801122e:	db1d      	blt.n	801126c <_strtol_l.constprop.0+0xc0>
 8011230:	fb00 4003 	mla	r0, r0, r3, r4
 8011234:	2201      	movs	r2, #1
 8011236:	f815 4b01 	ldrb.w	r4, [r5], #1
 801123a:	e7eb      	b.n	8011214 <_strtol_l.constprop.0+0x68>
 801123c:	2c2b      	cmp	r4, #43	@ 0x2b
 801123e:	bf04      	itt	eq
 8011240:	782c      	ldrbeq	r4, [r5, #0]
 8011242:	1c95      	addeq	r5, r2, #2
 8011244:	e7cf      	b.n	80111e6 <_strtol_l.constprop.0+0x3a>
 8011246:	2b00      	cmp	r3, #0
 8011248:	d1da      	bne.n	8011200 <_strtol_l.constprop.0+0x54>
 801124a:	2c30      	cmp	r4, #48	@ 0x30
 801124c:	bf0c      	ite	eq
 801124e:	2308      	moveq	r3, #8
 8011250:	230a      	movne	r3, #10
 8011252:	e7d5      	b.n	8011200 <_strtol_l.constprop.0+0x54>
 8011254:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011258:	2f19      	cmp	r7, #25
 801125a:	d801      	bhi.n	8011260 <_strtol_l.constprop.0+0xb4>
 801125c:	3c37      	subs	r4, #55	@ 0x37
 801125e:	e7de      	b.n	801121e <_strtol_l.constprop.0+0x72>
 8011260:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011264:	2f19      	cmp	r7, #25
 8011266:	d804      	bhi.n	8011272 <_strtol_l.constprop.0+0xc6>
 8011268:	3c57      	subs	r4, #87	@ 0x57
 801126a:	e7d8      	b.n	801121e <_strtol_l.constprop.0+0x72>
 801126c:	f04f 32ff 	mov.w	r2, #4294967295
 8011270:	e7e1      	b.n	8011236 <_strtol_l.constprop.0+0x8a>
 8011272:	1c53      	adds	r3, r2, #1
 8011274:	d108      	bne.n	8011288 <_strtol_l.constprop.0+0xdc>
 8011276:	2322      	movs	r3, #34	@ 0x22
 8011278:	f8ce 3000 	str.w	r3, [lr]
 801127c:	4660      	mov	r0, ip
 801127e:	f1b8 0f00 	cmp.w	r8, #0
 8011282:	d0a0      	beq.n	80111c6 <_strtol_l.constprop.0+0x1a>
 8011284:	1e69      	subs	r1, r5, #1
 8011286:	e006      	b.n	8011296 <_strtol_l.constprop.0+0xea>
 8011288:	b106      	cbz	r6, 801128c <_strtol_l.constprop.0+0xe0>
 801128a:	4240      	negs	r0, r0
 801128c:	f1b8 0f00 	cmp.w	r8, #0
 8011290:	d099      	beq.n	80111c6 <_strtol_l.constprop.0+0x1a>
 8011292:	2a00      	cmp	r2, #0
 8011294:	d1f6      	bne.n	8011284 <_strtol_l.constprop.0+0xd8>
 8011296:	f8c8 1000 	str.w	r1, [r8]
 801129a:	e794      	b.n	80111c6 <_strtol_l.constprop.0+0x1a>
 801129c:	080136b9 	.word	0x080136b9

080112a0 <_strtol_r>:
 80112a0:	f7ff bf84 	b.w	80111ac <_strtol_l.constprop.0>

080112a4 <__ssputs_r>:
 80112a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112a8:	688e      	ldr	r6, [r1, #8]
 80112aa:	461f      	mov	r7, r3
 80112ac:	42be      	cmp	r6, r7
 80112ae:	680b      	ldr	r3, [r1, #0]
 80112b0:	4682      	mov	sl, r0
 80112b2:	460c      	mov	r4, r1
 80112b4:	4690      	mov	r8, r2
 80112b6:	d82d      	bhi.n	8011314 <__ssputs_r+0x70>
 80112b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80112bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80112c0:	d026      	beq.n	8011310 <__ssputs_r+0x6c>
 80112c2:	6965      	ldr	r5, [r4, #20]
 80112c4:	6909      	ldr	r1, [r1, #16]
 80112c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80112ca:	eba3 0901 	sub.w	r9, r3, r1
 80112ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80112d2:	1c7b      	adds	r3, r7, #1
 80112d4:	444b      	add	r3, r9
 80112d6:	106d      	asrs	r5, r5, #1
 80112d8:	429d      	cmp	r5, r3
 80112da:	bf38      	it	cc
 80112dc:	461d      	movcc	r5, r3
 80112de:	0553      	lsls	r3, r2, #21
 80112e0:	d527      	bpl.n	8011332 <__ssputs_r+0x8e>
 80112e2:	4629      	mov	r1, r5
 80112e4:	f7fc fcca 	bl	800dc7c <_malloc_r>
 80112e8:	4606      	mov	r6, r0
 80112ea:	b360      	cbz	r0, 8011346 <__ssputs_r+0xa2>
 80112ec:	6921      	ldr	r1, [r4, #16]
 80112ee:	464a      	mov	r2, r9
 80112f0:	f7fd fdf3 	bl	800eeda <memcpy>
 80112f4:	89a3      	ldrh	r3, [r4, #12]
 80112f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80112fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112fe:	81a3      	strh	r3, [r4, #12]
 8011300:	6126      	str	r6, [r4, #16]
 8011302:	6165      	str	r5, [r4, #20]
 8011304:	444e      	add	r6, r9
 8011306:	eba5 0509 	sub.w	r5, r5, r9
 801130a:	6026      	str	r6, [r4, #0]
 801130c:	60a5      	str	r5, [r4, #8]
 801130e:	463e      	mov	r6, r7
 8011310:	42be      	cmp	r6, r7
 8011312:	d900      	bls.n	8011316 <__ssputs_r+0x72>
 8011314:	463e      	mov	r6, r7
 8011316:	6820      	ldr	r0, [r4, #0]
 8011318:	4632      	mov	r2, r6
 801131a:	4641      	mov	r1, r8
 801131c:	f7fd fcdd 	bl	800ecda <memmove>
 8011320:	68a3      	ldr	r3, [r4, #8]
 8011322:	1b9b      	subs	r3, r3, r6
 8011324:	60a3      	str	r3, [r4, #8]
 8011326:	6823      	ldr	r3, [r4, #0]
 8011328:	4433      	add	r3, r6
 801132a:	6023      	str	r3, [r4, #0]
 801132c:	2000      	movs	r0, #0
 801132e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011332:	462a      	mov	r2, r5
 8011334:	f000 ff0b 	bl	801214e <_realloc_r>
 8011338:	4606      	mov	r6, r0
 801133a:	2800      	cmp	r0, #0
 801133c:	d1e0      	bne.n	8011300 <__ssputs_r+0x5c>
 801133e:	6921      	ldr	r1, [r4, #16]
 8011340:	4650      	mov	r0, sl
 8011342:	f7fe fc2d 	bl	800fba0 <_free_r>
 8011346:	230c      	movs	r3, #12
 8011348:	f8ca 3000 	str.w	r3, [sl]
 801134c:	89a3      	ldrh	r3, [r4, #12]
 801134e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011352:	81a3      	strh	r3, [r4, #12]
 8011354:	f04f 30ff 	mov.w	r0, #4294967295
 8011358:	e7e9      	b.n	801132e <__ssputs_r+0x8a>
	...

0801135c <_svfiprintf_r>:
 801135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011360:	4698      	mov	r8, r3
 8011362:	898b      	ldrh	r3, [r1, #12]
 8011364:	061b      	lsls	r3, r3, #24
 8011366:	b09d      	sub	sp, #116	@ 0x74
 8011368:	4607      	mov	r7, r0
 801136a:	460d      	mov	r5, r1
 801136c:	4614      	mov	r4, r2
 801136e:	d510      	bpl.n	8011392 <_svfiprintf_r+0x36>
 8011370:	690b      	ldr	r3, [r1, #16]
 8011372:	b973      	cbnz	r3, 8011392 <_svfiprintf_r+0x36>
 8011374:	2140      	movs	r1, #64	@ 0x40
 8011376:	f7fc fc81 	bl	800dc7c <_malloc_r>
 801137a:	6028      	str	r0, [r5, #0]
 801137c:	6128      	str	r0, [r5, #16]
 801137e:	b930      	cbnz	r0, 801138e <_svfiprintf_r+0x32>
 8011380:	230c      	movs	r3, #12
 8011382:	603b      	str	r3, [r7, #0]
 8011384:	f04f 30ff 	mov.w	r0, #4294967295
 8011388:	b01d      	add	sp, #116	@ 0x74
 801138a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801138e:	2340      	movs	r3, #64	@ 0x40
 8011390:	616b      	str	r3, [r5, #20]
 8011392:	2300      	movs	r3, #0
 8011394:	9309      	str	r3, [sp, #36]	@ 0x24
 8011396:	2320      	movs	r3, #32
 8011398:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801139c:	f8cd 800c 	str.w	r8, [sp, #12]
 80113a0:	2330      	movs	r3, #48	@ 0x30
 80113a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011540 <_svfiprintf_r+0x1e4>
 80113a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80113aa:	f04f 0901 	mov.w	r9, #1
 80113ae:	4623      	mov	r3, r4
 80113b0:	469a      	mov	sl, r3
 80113b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113b6:	b10a      	cbz	r2, 80113bc <_svfiprintf_r+0x60>
 80113b8:	2a25      	cmp	r2, #37	@ 0x25
 80113ba:	d1f9      	bne.n	80113b0 <_svfiprintf_r+0x54>
 80113bc:	ebba 0b04 	subs.w	fp, sl, r4
 80113c0:	d00b      	beq.n	80113da <_svfiprintf_r+0x7e>
 80113c2:	465b      	mov	r3, fp
 80113c4:	4622      	mov	r2, r4
 80113c6:	4629      	mov	r1, r5
 80113c8:	4638      	mov	r0, r7
 80113ca:	f7ff ff6b 	bl	80112a4 <__ssputs_r>
 80113ce:	3001      	adds	r0, #1
 80113d0:	f000 80a7 	beq.w	8011522 <_svfiprintf_r+0x1c6>
 80113d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113d6:	445a      	add	r2, fp
 80113d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80113da:	f89a 3000 	ldrb.w	r3, [sl]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	f000 809f 	beq.w	8011522 <_svfiprintf_r+0x1c6>
 80113e4:	2300      	movs	r3, #0
 80113e6:	f04f 32ff 	mov.w	r2, #4294967295
 80113ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113ee:	f10a 0a01 	add.w	sl, sl, #1
 80113f2:	9304      	str	r3, [sp, #16]
 80113f4:	9307      	str	r3, [sp, #28]
 80113f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80113fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80113fc:	4654      	mov	r4, sl
 80113fe:	2205      	movs	r2, #5
 8011400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011404:	484e      	ldr	r0, [pc, #312]	@ (8011540 <_svfiprintf_r+0x1e4>)
 8011406:	f7ee ff0b 	bl	8000220 <memchr>
 801140a:	9a04      	ldr	r2, [sp, #16]
 801140c:	b9d8      	cbnz	r0, 8011446 <_svfiprintf_r+0xea>
 801140e:	06d0      	lsls	r0, r2, #27
 8011410:	bf44      	itt	mi
 8011412:	2320      	movmi	r3, #32
 8011414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011418:	0711      	lsls	r1, r2, #28
 801141a:	bf44      	itt	mi
 801141c:	232b      	movmi	r3, #43	@ 0x2b
 801141e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011422:	f89a 3000 	ldrb.w	r3, [sl]
 8011426:	2b2a      	cmp	r3, #42	@ 0x2a
 8011428:	d015      	beq.n	8011456 <_svfiprintf_r+0xfa>
 801142a:	9a07      	ldr	r2, [sp, #28]
 801142c:	4654      	mov	r4, sl
 801142e:	2000      	movs	r0, #0
 8011430:	f04f 0c0a 	mov.w	ip, #10
 8011434:	4621      	mov	r1, r4
 8011436:	f811 3b01 	ldrb.w	r3, [r1], #1
 801143a:	3b30      	subs	r3, #48	@ 0x30
 801143c:	2b09      	cmp	r3, #9
 801143e:	d94b      	bls.n	80114d8 <_svfiprintf_r+0x17c>
 8011440:	b1b0      	cbz	r0, 8011470 <_svfiprintf_r+0x114>
 8011442:	9207      	str	r2, [sp, #28]
 8011444:	e014      	b.n	8011470 <_svfiprintf_r+0x114>
 8011446:	eba0 0308 	sub.w	r3, r0, r8
 801144a:	fa09 f303 	lsl.w	r3, r9, r3
 801144e:	4313      	orrs	r3, r2
 8011450:	9304      	str	r3, [sp, #16]
 8011452:	46a2      	mov	sl, r4
 8011454:	e7d2      	b.n	80113fc <_svfiprintf_r+0xa0>
 8011456:	9b03      	ldr	r3, [sp, #12]
 8011458:	1d19      	adds	r1, r3, #4
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	9103      	str	r1, [sp, #12]
 801145e:	2b00      	cmp	r3, #0
 8011460:	bfbb      	ittet	lt
 8011462:	425b      	neglt	r3, r3
 8011464:	f042 0202 	orrlt.w	r2, r2, #2
 8011468:	9307      	strge	r3, [sp, #28]
 801146a:	9307      	strlt	r3, [sp, #28]
 801146c:	bfb8      	it	lt
 801146e:	9204      	strlt	r2, [sp, #16]
 8011470:	7823      	ldrb	r3, [r4, #0]
 8011472:	2b2e      	cmp	r3, #46	@ 0x2e
 8011474:	d10a      	bne.n	801148c <_svfiprintf_r+0x130>
 8011476:	7863      	ldrb	r3, [r4, #1]
 8011478:	2b2a      	cmp	r3, #42	@ 0x2a
 801147a:	d132      	bne.n	80114e2 <_svfiprintf_r+0x186>
 801147c:	9b03      	ldr	r3, [sp, #12]
 801147e:	1d1a      	adds	r2, r3, #4
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	9203      	str	r2, [sp, #12]
 8011484:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011488:	3402      	adds	r4, #2
 801148a:	9305      	str	r3, [sp, #20]
 801148c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011550 <_svfiprintf_r+0x1f4>
 8011490:	7821      	ldrb	r1, [r4, #0]
 8011492:	2203      	movs	r2, #3
 8011494:	4650      	mov	r0, sl
 8011496:	f7ee fec3 	bl	8000220 <memchr>
 801149a:	b138      	cbz	r0, 80114ac <_svfiprintf_r+0x150>
 801149c:	9b04      	ldr	r3, [sp, #16]
 801149e:	eba0 000a 	sub.w	r0, r0, sl
 80114a2:	2240      	movs	r2, #64	@ 0x40
 80114a4:	4082      	lsls	r2, r0
 80114a6:	4313      	orrs	r3, r2
 80114a8:	3401      	adds	r4, #1
 80114aa:	9304      	str	r3, [sp, #16]
 80114ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114b0:	4824      	ldr	r0, [pc, #144]	@ (8011544 <_svfiprintf_r+0x1e8>)
 80114b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80114b6:	2206      	movs	r2, #6
 80114b8:	f7ee feb2 	bl	8000220 <memchr>
 80114bc:	2800      	cmp	r0, #0
 80114be:	d036      	beq.n	801152e <_svfiprintf_r+0x1d2>
 80114c0:	4b21      	ldr	r3, [pc, #132]	@ (8011548 <_svfiprintf_r+0x1ec>)
 80114c2:	bb1b      	cbnz	r3, 801150c <_svfiprintf_r+0x1b0>
 80114c4:	9b03      	ldr	r3, [sp, #12]
 80114c6:	3307      	adds	r3, #7
 80114c8:	f023 0307 	bic.w	r3, r3, #7
 80114cc:	3308      	adds	r3, #8
 80114ce:	9303      	str	r3, [sp, #12]
 80114d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114d2:	4433      	add	r3, r6
 80114d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80114d6:	e76a      	b.n	80113ae <_svfiprintf_r+0x52>
 80114d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80114dc:	460c      	mov	r4, r1
 80114de:	2001      	movs	r0, #1
 80114e0:	e7a8      	b.n	8011434 <_svfiprintf_r+0xd8>
 80114e2:	2300      	movs	r3, #0
 80114e4:	3401      	adds	r4, #1
 80114e6:	9305      	str	r3, [sp, #20]
 80114e8:	4619      	mov	r1, r3
 80114ea:	f04f 0c0a 	mov.w	ip, #10
 80114ee:	4620      	mov	r0, r4
 80114f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114f4:	3a30      	subs	r2, #48	@ 0x30
 80114f6:	2a09      	cmp	r2, #9
 80114f8:	d903      	bls.n	8011502 <_svfiprintf_r+0x1a6>
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d0c6      	beq.n	801148c <_svfiprintf_r+0x130>
 80114fe:	9105      	str	r1, [sp, #20]
 8011500:	e7c4      	b.n	801148c <_svfiprintf_r+0x130>
 8011502:	fb0c 2101 	mla	r1, ip, r1, r2
 8011506:	4604      	mov	r4, r0
 8011508:	2301      	movs	r3, #1
 801150a:	e7f0      	b.n	80114ee <_svfiprintf_r+0x192>
 801150c:	ab03      	add	r3, sp, #12
 801150e:	9300      	str	r3, [sp, #0]
 8011510:	462a      	mov	r2, r5
 8011512:	4b0e      	ldr	r3, [pc, #56]	@ (801154c <_svfiprintf_r+0x1f0>)
 8011514:	a904      	add	r1, sp, #16
 8011516:	4638      	mov	r0, r7
 8011518:	f7fc fcdc 	bl	800ded4 <_printf_float>
 801151c:	1c42      	adds	r2, r0, #1
 801151e:	4606      	mov	r6, r0
 8011520:	d1d6      	bne.n	80114d0 <_svfiprintf_r+0x174>
 8011522:	89ab      	ldrh	r3, [r5, #12]
 8011524:	065b      	lsls	r3, r3, #25
 8011526:	f53f af2d 	bmi.w	8011384 <_svfiprintf_r+0x28>
 801152a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801152c:	e72c      	b.n	8011388 <_svfiprintf_r+0x2c>
 801152e:	ab03      	add	r3, sp, #12
 8011530:	9300      	str	r3, [sp, #0]
 8011532:	462a      	mov	r2, r5
 8011534:	4b05      	ldr	r3, [pc, #20]	@ (801154c <_svfiprintf_r+0x1f0>)
 8011536:	a904      	add	r1, sp, #16
 8011538:	4638      	mov	r0, r7
 801153a:	f7fc ff63 	bl	800e404 <_printf_i>
 801153e:	e7ed      	b.n	801151c <_svfiprintf_r+0x1c0>
 8011540:	080137b9 	.word	0x080137b9
 8011544:	080137c3 	.word	0x080137c3
 8011548:	0800ded5 	.word	0x0800ded5
 801154c:	080112a5 	.word	0x080112a5
 8011550:	080137bf 	.word	0x080137bf

08011554 <__sfputc_r>:
 8011554:	6893      	ldr	r3, [r2, #8]
 8011556:	3b01      	subs	r3, #1
 8011558:	2b00      	cmp	r3, #0
 801155a:	b410      	push	{r4}
 801155c:	6093      	str	r3, [r2, #8]
 801155e:	da08      	bge.n	8011572 <__sfputc_r+0x1e>
 8011560:	6994      	ldr	r4, [r2, #24]
 8011562:	42a3      	cmp	r3, r4
 8011564:	db01      	blt.n	801156a <__sfputc_r+0x16>
 8011566:	290a      	cmp	r1, #10
 8011568:	d103      	bne.n	8011572 <__sfputc_r+0x1e>
 801156a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801156e:	f000 b9df 	b.w	8011930 <__swbuf_r>
 8011572:	6813      	ldr	r3, [r2, #0]
 8011574:	1c58      	adds	r0, r3, #1
 8011576:	6010      	str	r0, [r2, #0]
 8011578:	7019      	strb	r1, [r3, #0]
 801157a:	4608      	mov	r0, r1
 801157c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011580:	4770      	bx	lr

08011582 <__sfputs_r>:
 8011582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011584:	4606      	mov	r6, r0
 8011586:	460f      	mov	r7, r1
 8011588:	4614      	mov	r4, r2
 801158a:	18d5      	adds	r5, r2, r3
 801158c:	42ac      	cmp	r4, r5
 801158e:	d101      	bne.n	8011594 <__sfputs_r+0x12>
 8011590:	2000      	movs	r0, #0
 8011592:	e007      	b.n	80115a4 <__sfputs_r+0x22>
 8011594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011598:	463a      	mov	r2, r7
 801159a:	4630      	mov	r0, r6
 801159c:	f7ff ffda 	bl	8011554 <__sfputc_r>
 80115a0:	1c43      	adds	r3, r0, #1
 80115a2:	d1f3      	bne.n	801158c <__sfputs_r+0xa>
 80115a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080115a8 <_vfiprintf_r>:
 80115a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ac:	460d      	mov	r5, r1
 80115ae:	b09d      	sub	sp, #116	@ 0x74
 80115b0:	4614      	mov	r4, r2
 80115b2:	4698      	mov	r8, r3
 80115b4:	4606      	mov	r6, r0
 80115b6:	b118      	cbz	r0, 80115c0 <_vfiprintf_r+0x18>
 80115b8:	6a03      	ldr	r3, [r0, #32]
 80115ba:	b90b      	cbnz	r3, 80115c0 <_vfiprintf_r+0x18>
 80115bc:	f7fd fae2 	bl	800eb84 <__sinit>
 80115c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80115c2:	07d9      	lsls	r1, r3, #31
 80115c4:	d405      	bmi.n	80115d2 <_vfiprintf_r+0x2a>
 80115c6:	89ab      	ldrh	r3, [r5, #12]
 80115c8:	059a      	lsls	r2, r3, #22
 80115ca:	d402      	bmi.n	80115d2 <_vfiprintf_r+0x2a>
 80115cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80115ce:	f7fd fc82 	bl	800eed6 <__retarget_lock_acquire_recursive>
 80115d2:	89ab      	ldrh	r3, [r5, #12]
 80115d4:	071b      	lsls	r3, r3, #28
 80115d6:	d501      	bpl.n	80115dc <_vfiprintf_r+0x34>
 80115d8:	692b      	ldr	r3, [r5, #16]
 80115da:	b99b      	cbnz	r3, 8011604 <_vfiprintf_r+0x5c>
 80115dc:	4629      	mov	r1, r5
 80115de:	4630      	mov	r0, r6
 80115e0:	f000 f9e4 	bl	80119ac <__swsetup_r>
 80115e4:	b170      	cbz	r0, 8011604 <_vfiprintf_r+0x5c>
 80115e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80115e8:	07dc      	lsls	r4, r3, #31
 80115ea:	d504      	bpl.n	80115f6 <_vfiprintf_r+0x4e>
 80115ec:	f04f 30ff 	mov.w	r0, #4294967295
 80115f0:	b01d      	add	sp, #116	@ 0x74
 80115f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f6:	89ab      	ldrh	r3, [r5, #12]
 80115f8:	0598      	lsls	r0, r3, #22
 80115fa:	d4f7      	bmi.n	80115ec <_vfiprintf_r+0x44>
 80115fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80115fe:	f7fd fc6b 	bl	800eed8 <__retarget_lock_release_recursive>
 8011602:	e7f3      	b.n	80115ec <_vfiprintf_r+0x44>
 8011604:	2300      	movs	r3, #0
 8011606:	9309      	str	r3, [sp, #36]	@ 0x24
 8011608:	2320      	movs	r3, #32
 801160a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801160e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011612:	2330      	movs	r3, #48	@ 0x30
 8011614:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80117c4 <_vfiprintf_r+0x21c>
 8011618:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801161c:	f04f 0901 	mov.w	r9, #1
 8011620:	4623      	mov	r3, r4
 8011622:	469a      	mov	sl, r3
 8011624:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011628:	b10a      	cbz	r2, 801162e <_vfiprintf_r+0x86>
 801162a:	2a25      	cmp	r2, #37	@ 0x25
 801162c:	d1f9      	bne.n	8011622 <_vfiprintf_r+0x7a>
 801162e:	ebba 0b04 	subs.w	fp, sl, r4
 8011632:	d00b      	beq.n	801164c <_vfiprintf_r+0xa4>
 8011634:	465b      	mov	r3, fp
 8011636:	4622      	mov	r2, r4
 8011638:	4629      	mov	r1, r5
 801163a:	4630      	mov	r0, r6
 801163c:	f7ff ffa1 	bl	8011582 <__sfputs_r>
 8011640:	3001      	adds	r0, #1
 8011642:	f000 80a7 	beq.w	8011794 <_vfiprintf_r+0x1ec>
 8011646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011648:	445a      	add	r2, fp
 801164a:	9209      	str	r2, [sp, #36]	@ 0x24
 801164c:	f89a 3000 	ldrb.w	r3, [sl]
 8011650:	2b00      	cmp	r3, #0
 8011652:	f000 809f 	beq.w	8011794 <_vfiprintf_r+0x1ec>
 8011656:	2300      	movs	r3, #0
 8011658:	f04f 32ff 	mov.w	r2, #4294967295
 801165c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011660:	f10a 0a01 	add.w	sl, sl, #1
 8011664:	9304      	str	r3, [sp, #16]
 8011666:	9307      	str	r3, [sp, #28]
 8011668:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801166c:	931a      	str	r3, [sp, #104]	@ 0x68
 801166e:	4654      	mov	r4, sl
 8011670:	2205      	movs	r2, #5
 8011672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011676:	4853      	ldr	r0, [pc, #332]	@ (80117c4 <_vfiprintf_r+0x21c>)
 8011678:	f7ee fdd2 	bl	8000220 <memchr>
 801167c:	9a04      	ldr	r2, [sp, #16]
 801167e:	b9d8      	cbnz	r0, 80116b8 <_vfiprintf_r+0x110>
 8011680:	06d1      	lsls	r1, r2, #27
 8011682:	bf44      	itt	mi
 8011684:	2320      	movmi	r3, #32
 8011686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801168a:	0713      	lsls	r3, r2, #28
 801168c:	bf44      	itt	mi
 801168e:	232b      	movmi	r3, #43	@ 0x2b
 8011690:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011694:	f89a 3000 	ldrb.w	r3, [sl]
 8011698:	2b2a      	cmp	r3, #42	@ 0x2a
 801169a:	d015      	beq.n	80116c8 <_vfiprintf_r+0x120>
 801169c:	9a07      	ldr	r2, [sp, #28]
 801169e:	4654      	mov	r4, sl
 80116a0:	2000      	movs	r0, #0
 80116a2:	f04f 0c0a 	mov.w	ip, #10
 80116a6:	4621      	mov	r1, r4
 80116a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116ac:	3b30      	subs	r3, #48	@ 0x30
 80116ae:	2b09      	cmp	r3, #9
 80116b0:	d94b      	bls.n	801174a <_vfiprintf_r+0x1a2>
 80116b2:	b1b0      	cbz	r0, 80116e2 <_vfiprintf_r+0x13a>
 80116b4:	9207      	str	r2, [sp, #28]
 80116b6:	e014      	b.n	80116e2 <_vfiprintf_r+0x13a>
 80116b8:	eba0 0308 	sub.w	r3, r0, r8
 80116bc:	fa09 f303 	lsl.w	r3, r9, r3
 80116c0:	4313      	orrs	r3, r2
 80116c2:	9304      	str	r3, [sp, #16]
 80116c4:	46a2      	mov	sl, r4
 80116c6:	e7d2      	b.n	801166e <_vfiprintf_r+0xc6>
 80116c8:	9b03      	ldr	r3, [sp, #12]
 80116ca:	1d19      	adds	r1, r3, #4
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	9103      	str	r1, [sp, #12]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	bfbb      	ittet	lt
 80116d4:	425b      	neglt	r3, r3
 80116d6:	f042 0202 	orrlt.w	r2, r2, #2
 80116da:	9307      	strge	r3, [sp, #28]
 80116dc:	9307      	strlt	r3, [sp, #28]
 80116de:	bfb8      	it	lt
 80116e0:	9204      	strlt	r2, [sp, #16]
 80116e2:	7823      	ldrb	r3, [r4, #0]
 80116e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80116e6:	d10a      	bne.n	80116fe <_vfiprintf_r+0x156>
 80116e8:	7863      	ldrb	r3, [r4, #1]
 80116ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80116ec:	d132      	bne.n	8011754 <_vfiprintf_r+0x1ac>
 80116ee:	9b03      	ldr	r3, [sp, #12]
 80116f0:	1d1a      	adds	r2, r3, #4
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	9203      	str	r2, [sp, #12]
 80116f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80116fa:	3402      	adds	r4, #2
 80116fc:	9305      	str	r3, [sp, #20]
 80116fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80117d4 <_vfiprintf_r+0x22c>
 8011702:	7821      	ldrb	r1, [r4, #0]
 8011704:	2203      	movs	r2, #3
 8011706:	4650      	mov	r0, sl
 8011708:	f7ee fd8a 	bl	8000220 <memchr>
 801170c:	b138      	cbz	r0, 801171e <_vfiprintf_r+0x176>
 801170e:	9b04      	ldr	r3, [sp, #16]
 8011710:	eba0 000a 	sub.w	r0, r0, sl
 8011714:	2240      	movs	r2, #64	@ 0x40
 8011716:	4082      	lsls	r2, r0
 8011718:	4313      	orrs	r3, r2
 801171a:	3401      	adds	r4, #1
 801171c:	9304      	str	r3, [sp, #16]
 801171e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011722:	4829      	ldr	r0, [pc, #164]	@ (80117c8 <_vfiprintf_r+0x220>)
 8011724:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011728:	2206      	movs	r2, #6
 801172a:	f7ee fd79 	bl	8000220 <memchr>
 801172e:	2800      	cmp	r0, #0
 8011730:	d03f      	beq.n	80117b2 <_vfiprintf_r+0x20a>
 8011732:	4b26      	ldr	r3, [pc, #152]	@ (80117cc <_vfiprintf_r+0x224>)
 8011734:	bb1b      	cbnz	r3, 801177e <_vfiprintf_r+0x1d6>
 8011736:	9b03      	ldr	r3, [sp, #12]
 8011738:	3307      	adds	r3, #7
 801173a:	f023 0307 	bic.w	r3, r3, #7
 801173e:	3308      	adds	r3, #8
 8011740:	9303      	str	r3, [sp, #12]
 8011742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011744:	443b      	add	r3, r7
 8011746:	9309      	str	r3, [sp, #36]	@ 0x24
 8011748:	e76a      	b.n	8011620 <_vfiprintf_r+0x78>
 801174a:	fb0c 3202 	mla	r2, ip, r2, r3
 801174e:	460c      	mov	r4, r1
 8011750:	2001      	movs	r0, #1
 8011752:	e7a8      	b.n	80116a6 <_vfiprintf_r+0xfe>
 8011754:	2300      	movs	r3, #0
 8011756:	3401      	adds	r4, #1
 8011758:	9305      	str	r3, [sp, #20]
 801175a:	4619      	mov	r1, r3
 801175c:	f04f 0c0a 	mov.w	ip, #10
 8011760:	4620      	mov	r0, r4
 8011762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011766:	3a30      	subs	r2, #48	@ 0x30
 8011768:	2a09      	cmp	r2, #9
 801176a:	d903      	bls.n	8011774 <_vfiprintf_r+0x1cc>
 801176c:	2b00      	cmp	r3, #0
 801176e:	d0c6      	beq.n	80116fe <_vfiprintf_r+0x156>
 8011770:	9105      	str	r1, [sp, #20]
 8011772:	e7c4      	b.n	80116fe <_vfiprintf_r+0x156>
 8011774:	fb0c 2101 	mla	r1, ip, r1, r2
 8011778:	4604      	mov	r4, r0
 801177a:	2301      	movs	r3, #1
 801177c:	e7f0      	b.n	8011760 <_vfiprintf_r+0x1b8>
 801177e:	ab03      	add	r3, sp, #12
 8011780:	9300      	str	r3, [sp, #0]
 8011782:	462a      	mov	r2, r5
 8011784:	4b12      	ldr	r3, [pc, #72]	@ (80117d0 <_vfiprintf_r+0x228>)
 8011786:	a904      	add	r1, sp, #16
 8011788:	4630      	mov	r0, r6
 801178a:	f7fc fba3 	bl	800ded4 <_printf_float>
 801178e:	4607      	mov	r7, r0
 8011790:	1c78      	adds	r0, r7, #1
 8011792:	d1d6      	bne.n	8011742 <_vfiprintf_r+0x19a>
 8011794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011796:	07d9      	lsls	r1, r3, #31
 8011798:	d405      	bmi.n	80117a6 <_vfiprintf_r+0x1fe>
 801179a:	89ab      	ldrh	r3, [r5, #12]
 801179c:	059a      	lsls	r2, r3, #22
 801179e:	d402      	bmi.n	80117a6 <_vfiprintf_r+0x1fe>
 80117a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117a2:	f7fd fb99 	bl	800eed8 <__retarget_lock_release_recursive>
 80117a6:	89ab      	ldrh	r3, [r5, #12]
 80117a8:	065b      	lsls	r3, r3, #25
 80117aa:	f53f af1f 	bmi.w	80115ec <_vfiprintf_r+0x44>
 80117ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80117b0:	e71e      	b.n	80115f0 <_vfiprintf_r+0x48>
 80117b2:	ab03      	add	r3, sp, #12
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	462a      	mov	r2, r5
 80117b8:	4b05      	ldr	r3, [pc, #20]	@ (80117d0 <_vfiprintf_r+0x228>)
 80117ba:	a904      	add	r1, sp, #16
 80117bc:	4630      	mov	r0, r6
 80117be:	f7fc fe21 	bl	800e404 <_printf_i>
 80117c2:	e7e4      	b.n	801178e <_vfiprintf_r+0x1e6>
 80117c4:	080137b9 	.word	0x080137b9
 80117c8:	080137c3 	.word	0x080137c3
 80117cc:	0800ded5 	.word	0x0800ded5
 80117d0:	08011583 	.word	0x08011583
 80117d4:	080137bf 	.word	0x080137bf

080117d8 <__sflush_r>:
 80117d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80117dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117e0:	0716      	lsls	r6, r2, #28
 80117e2:	4605      	mov	r5, r0
 80117e4:	460c      	mov	r4, r1
 80117e6:	d454      	bmi.n	8011892 <__sflush_r+0xba>
 80117e8:	684b      	ldr	r3, [r1, #4]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	dc02      	bgt.n	80117f4 <__sflush_r+0x1c>
 80117ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	dd48      	ble.n	8011886 <__sflush_r+0xae>
 80117f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80117f6:	2e00      	cmp	r6, #0
 80117f8:	d045      	beq.n	8011886 <__sflush_r+0xae>
 80117fa:	2300      	movs	r3, #0
 80117fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011800:	682f      	ldr	r7, [r5, #0]
 8011802:	6a21      	ldr	r1, [r4, #32]
 8011804:	602b      	str	r3, [r5, #0]
 8011806:	d030      	beq.n	801186a <__sflush_r+0x92>
 8011808:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801180a:	89a3      	ldrh	r3, [r4, #12]
 801180c:	0759      	lsls	r1, r3, #29
 801180e:	d505      	bpl.n	801181c <__sflush_r+0x44>
 8011810:	6863      	ldr	r3, [r4, #4]
 8011812:	1ad2      	subs	r2, r2, r3
 8011814:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011816:	b10b      	cbz	r3, 801181c <__sflush_r+0x44>
 8011818:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801181a:	1ad2      	subs	r2, r2, r3
 801181c:	2300      	movs	r3, #0
 801181e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011820:	6a21      	ldr	r1, [r4, #32]
 8011822:	4628      	mov	r0, r5
 8011824:	47b0      	blx	r6
 8011826:	1c43      	adds	r3, r0, #1
 8011828:	89a3      	ldrh	r3, [r4, #12]
 801182a:	d106      	bne.n	801183a <__sflush_r+0x62>
 801182c:	6829      	ldr	r1, [r5, #0]
 801182e:	291d      	cmp	r1, #29
 8011830:	d82b      	bhi.n	801188a <__sflush_r+0xb2>
 8011832:	4a2a      	ldr	r2, [pc, #168]	@ (80118dc <__sflush_r+0x104>)
 8011834:	410a      	asrs	r2, r1
 8011836:	07d6      	lsls	r6, r2, #31
 8011838:	d427      	bmi.n	801188a <__sflush_r+0xb2>
 801183a:	2200      	movs	r2, #0
 801183c:	6062      	str	r2, [r4, #4]
 801183e:	04d9      	lsls	r1, r3, #19
 8011840:	6922      	ldr	r2, [r4, #16]
 8011842:	6022      	str	r2, [r4, #0]
 8011844:	d504      	bpl.n	8011850 <__sflush_r+0x78>
 8011846:	1c42      	adds	r2, r0, #1
 8011848:	d101      	bne.n	801184e <__sflush_r+0x76>
 801184a:	682b      	ldr	r3, [r5, #0]
 801184c:	b903      	cbnz	r3, 8011850 <__sflush_r+0x78>
 801184e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011850:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011852:	602f      	str	r7, [r5, #0]
 8011854:	b1b9      	cbz	r1, 8011886 <__sflush_r+0xae>
 8011856:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801185a:	4299      	cmp	r1, r3
 801185c:	d002      	beq.n	8011864 <__sflush_r+0x8c>
 801185e:	4628      	mov	r0, r5
 8011860:	f7fe f99e 	bl	800fba0 <_free_r>
 8011864:	2300      	movs	r3, #0
 8011866:	6363      	str	r3, [r4, #52]	@ 0x34
 8011868:	e00d      	b.n	8011886 <__sflush_r+0xae>
 801186a:	2301      	movs	r3, #1
 801186c:	4628      	mov	r0, r5
 801186e:	47b0      	blx	r6
 8011870:	4602      	mov	r2, r0
 8011872:	1c50      	adds	r0, r2, #1
 8011874:	d1c9      	bne.n	801180a <__sflush_r+0x32>
 8011876:	682b      	ldr	r3, [r5, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d0c6      	beq.n	801180a <__sflush_r+0x32>
 801187c:	2b1d      	cmp	r3, #29
 801187e:	d001      	beq.n	8011884 <__sflush_r+0xac>
 8011880:	2b16      	cmp	r3, #22
 8011882:	d11e      	bne.n	80118c2 <__sflush_r+0xea>
 8011884:	602f      	str	r7, [r5, #0]
 8011886:	2000      	movs	r0, #0
 8011888:	e022      	b.n	80118d0 <__sflush_r+0xf8>
 801188a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801188e:	b21b      	sxth	r3, r3
 8011890:	e01b      	b.n	80118ca <__sflush_r+0xf2>
 8011892:	690f      	ldr	r7, [r1, #16]
 8011894:	2f00      	cmp	r7, #0
 8011896:	d0f6      	beq.n	8011886 <__sflush_r+0xae>
 8011898:	0793      	lsls	r3, r2, #30
 801189a:	680e      	ldr	r6, [r1, #0]
 801189c:	bf08      	it	eq
 801189e:	694b      	ldreq	r3, [r1, #20]
 80118a0:	600f      	str	r7, [r1, #0]
 80118a2:	bf18      	it	ne
 80118a4:	2300      	movne	r3, #0
 80118a6:	eba6 0807 	sub.w	r8, r6, r7
 80118aa:	608b      	str	r3, [r1, #8]
 80118ac:	f1b8 0f00 	cmp.w	r8, #0
 80118b0:	dde9      	ble.n	8011886 <__sflush_r+0xae>
 80118b2:	6a21      	ldr	r1, [r4, #32]
 80118b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80118b6:	4643      	mov	r3, r8
 80118b8:	463a      	mov	r2, r7
 80118ba:	4628      	mov	r0, r5
 80118bc:	47b0      	blx	r6
 80118be:	2800      	cmp	r0, #0
 80118c0:	dc08      	bgt.n	80118d4 <__sflush_r+0xfc>
 80118c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118ca:	81a3      	strh	r3, [r4, #12]
 80118cc:	f04f 30ff 	mov.w	r0, #4294967295
 80118d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118d4:	4407      	add	r7, r0
 80118d6:	eba8 0800 	sub.w	r8, r8, r0
 80118da:	e7e7      	b.n	80118ac <__sflush_r+0xd4>
 80118dc:	dfbffffe 	.word	0xdfbffffe

080118e0 <_fflush_r>:
 80118e0:	b538      	push	{r3, r4, r5, lr}
 80118e2:	690b      	ldr	r3, [r1, #16]
 80118e4:	4605      	mov	r5, r0
 80118e6:	460c      	mov	r4, r1
 80118e8:	b913      	cbnz	r3, 80118f0 <_fflush_r+0x10>
 80118ea:	2500      	movs	r5, #0
 80118ec:	4628      	mov	r0, r5
 80118ee:	bd38      	pop	{r3, r4, r5, pc}
 80118f0:	b118      	cbz	r0, 80118fa <_fflush_r+0x1a>
 80118f2:	6a03      	ldr	r3, [r0, #32]
 80118f4:	b90b      	cbnz	r3, 80118fa <_fflush_r+0x1a>
 80118f6:	f7fd f945 	bl	800eb84 <__sinit>
 80118fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d0f3      	beq.n	80118ea <_fflush_r+0xa>
 8011902:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011904:	07d0      	lsls	r0, r2, #31
 8011906:	d404      	bmi.n	8011912 <_fflush_r+0x32>
 8011908:	0599      	lsls	r1, r3, #22
 801190a:	d402      	bmi.n	8011912 <_fflush_r+0x32>
 801190c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801190e:	f7fd fae2 	bl	800eed6 <__retarget_lock_acquire_recursive>
 8011912:	4628      	mov	r0, r5
 8011914:	4621      	mov	r1, r4
 8011916:	f7ff ff5f 	bl	80117d8 <__sflush_r>
 801191a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801191c:	07da      	lsls	r2, r3, #31
 801191e:	4605      	mov	r5, r0
 8011920:	d4e4      	bmi.n	80118ec <_fflush_r+0xc>
 8011922:	89a3      	ldrh	r3, [r4, #12]
 8011924:	059b      	lsls	r3, r3, #22
 8011926:	d4e1      	bmi.n	80118ec <_fflush_r+0xc>
 8011928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801192a:	f7fd fad5 	bl	800eed8 <__retarget_lock_release_recursive>
 801192e:	e7dd      	b.n	80118ec <_fflush_r+0xc>

08011930 <__swbuf_r>:
 8011930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011932:	460e      	mov	r6, r1
 8011934:	4614      	mov	r4, r2
 8011936:	4605      	mov	r5, r0
 8011938:	b118      	cbz	r0, 8011942 <__swbuf_r+0x12>
 801193a:	6a03      	ldr	r3, [r0, #32]
 801193c:	b90b      	cbnz	r3, 8011942 <__swbuf_r+0x12>
 801193e:	f7fd f921 	bl	800eb84 <__sinit>
 8011942:	69a3      	ldr	r3, [r4, #24]
 8011944:	60a3      	str	r3, [r4, #8]
 8011946:	89a3      	ldrh	r3, [r4, #12]
 8011948:	071a      	lsls	r2, r3, #28
 801194a:	d501      	bpl.n	8011950 <__swbuf_r+0x20>
 801194c:	6923      	ldr	r3, [r4, #16]
 801194e:	b943      	cbnz	r3, 8011962 <__swbuf_r+0x32>
 8011950:	4621      	mov	r1, r4
 8011952:	4628      	mov	r0, r5
 8011954:	f000 f82a 	bl	80119ac <__swsetup_r>
 8011958:	b118      	cbz	r0, 8011962 <__swbuf_r+0x32>
 801195a:	f04f 37ff 	mov.w	r7, #4294967295
 801195e:	4638      	mov	r0, r7
 8011960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011962:	6823      	ldr	r3, [r4, #0]
 8011964:	6922      	ldr	r2, [r4, #16]
 8011966:	1a98      	subs	r0, r3, r2
 8011968:	6963      	ldr	r3, [r4, #20]
 801196a:	b2f6      	uxtb	r6, r6
 801196c:	4283      	cmp	r3, r0
 801196e:	4637      	mov	r7, r6
 8011970:	dc05      	bgt.n	801197e <__swbuf_r+0x4e>
 8011972:	4621      	mov	r1, r4
 8011974:	4628      	mov	r0, r5
 8011976:	f7ff ffb3 	bl	80118e0 <_fflush_r>
 801197a:	2800      	cmp	r0, #0
 801197c:	d1ed      	bne.n	801195a <__swbuf_r+0x2a>
 801197e:	68a3      	ldr	r3, [r4, #8]
 8011980:	3b01      	subs	r3, #1
 8011982:	60a3      	str	r3, [r4, #8]
 8011984:	6823      	ldr	r3, [r4, #0]
 8011986:	1c5a      	adds	r2, r3, #1
 8011988:	6022      	str	r2, [r4, #0]
 801198a:	701e      	strb	r6, [r3, #0]
 801198c:	6962      	ldr	r2, [r4, #20]
 801198e:	1c43      	adds	r3, r0, #1
 8011990:	429a      	cmp	r2, r3
 8011992:	d004      	beq.n	801199e <__swbuf_r+0x6e>
 8011994:	89a3      	ldrh	r3, [r4, #12]
 8011996:	07db      	lsls	r3, r3, #31
 8011998:	d5e1      	bpl.n	801195e <__swbuf_r+0x2e>
 801199a:	2e0a      	cmp	r6, #10
 801199c:	d1df      	bne.n	801195e <__swbuf_r+0x2e>
 801199e:	4621      	mov	r1, r4
 80119a0:	4628      	mov	r0, r5
 80119a2:	f7ff ff9d 	bl	80118e0 <_fflush_r>
 80119a6:	2800      	cmp	r0, #0
 80119a8:	d0d9      	beq.n	801195e <__swbuf_r+0x2e>
 80119aa:	e7d6      	b.n	801195a <__swbuf_r+0x2a>

080119ac <__swsetup_r>:
 80119ac:	b538      	push	{r3, r4, r5, lr}
 80119ae:	4b29      	ldr	r3, [pc, #164]	@ (8011a54 <__swsetup_r+0xa8>)
 80119b0:	4605      	mov	r5, r0
 80119b2:	6818      	ldr	r0, [r3, #0]
 80119b4:	460c      	mov	r4, r1
 80119b6:	b118      	cbz	r0, 80119c0 <__swsetup_r+0x14>
 80119b8:	6a03      	ldr	r3, [r0, #32]
 80119ba:	b90b      	cbnz	r3, 80119c0 <__swsetup_r+0x14>
 80119bc:	f7fd f8e2 	bl	800eb84 <__sinit>
 80119c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119c4:	0719      	lsls	r1, r3, #28
 80119c6:	d422      	bmi.n	8011a0e <__swsetup_r+0x62>
 80119c8:	06da      	lsls	r2, r3, #27
 80119ca:	d407      	bmi.n	80119dc <__swsetup_r+0x30>
 80119cc:	2209      	movs	r2, #9
 80119ce:	602a      	str	r2, [r5, #0]
 80119d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119d4:	81a3      	strh	r3, [r4, #12]
 80119d6:	f04f 30ff 	mov.w	r0, #4294967295
 80119da:	e033      	b.n	8011a44 <__swsetup_r+0x98>
 80119dc:	0758      	lsls	r0, r3, #29
 80119de:	d512      	bpl.n	8011a06 <__swsetup_r+0x5a>
 80119e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80119e2:	b141      	cbz	r1, 80119f6 <__swsetup_r+0x4a>
 80119e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80119e8:	4299      	cmp	r1, r3
 80119ea:	d002      	beq.n	80119f2 <__swsetup_r+0x46>
 80119ec:	4628      	mov	r0, r5
 80119ee:	f7fe f8d7 	bl	800fba0 <_free_r>
 80119f2:	2300      	movs	r3, #0
 80119f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80119f6:	89a3      	ldrh	r3, [r4, #12]
 80119f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80119fc:	81a3      	strh	r3, [r4, #12]
 80119fe:	2300      	movs	r3, #0
 8011a00:	6063      	str	r3, [r4, #4]
 8011a02:	6923      	ldr	r3, [r4, #16]
 8011a04:	6023      	str	r3, [r4, #0]
 8011a06:	89a3      	ldrh	r3, [r4, #12]
 8011a08:	f043 0308 	orr.w	r3, r3, #8
 8011a0c:	81a3      	strh	r3, [r4, #12]
 8011a0e:	6923      	ldr	r3, [r4, #16]
 8011a10:	b94b      	cbnz	r3, 8011a26 <__swsetup_r+0x7a>
 8011a12:	89a3      	ldrh	r3, [r4, #12]
 8011a14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a1c:	d003      	beq.n	8011a26 <__swsetup_r+0x7a>
 8011a1e:	4621      	mov	r1, r4
 8011a20:	4628      	mov	r0, r5
 8011a22:	f000 fbf5 	bl	8012210 <__smakebuf_r>
 8011a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a2a:	f013 0201 	ands.w	r2, r3, #1
 8011a2e:	d00a      	beq.n	8011a46 <__swsetup_r+0x9a>
 8011a30:	2200      	movs	r2, #0
 8011a32:	60a2      	str	r2, [r4, #8]
 8011a34:	6962      	ldr	r2, [r4, #20]
 8011a36:	4252      	negs	r2, r2
 8011a38:	61a2      	str	r2, [r4, #24]
 8011a3a:	6922      	ldr	r2, [r4, #16]
 8011a3c:	b942      	cbnz	r2, 8011a50 <__swsetup_r+0xa4>
 8011a3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011a42:	d1c5      	bne.n	80119d0 <__swsetup_r+0x24>
 8011a44:	bd38      	pop	{r3, r4, r5, pc}
 8011a46:	0799      	lsls	r1, r3, #30
 8011a48:	bf58      	it	pl
 8011a4a:	6962      	ldrpl	r2, [r4, #20]
 8011a4c:	60a2      	str	r2, [r4, #8]
 8011a4e:	e7f4      	b.n	8011a3a <__swsetup_r+0x8e>
 8011a50:	2000      	movs	r0, #0
 8011a52:	e7f7      	b.n	8011a44 <__swsetup_r+0x98>
 8011a54:	20000018 	.word	0x20000018

08011a58 <strncmp>:
 8011a58:	b510      	push	{r4, lr}
 8011a5a:	b16a      	cbz	r2, 8011a78 <strncmp+0x20>
 8011a5c:	3901      	subs	r1, #1
 8011a5e:	1884      	adds	r4, r0, r2
 8011a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d103      	bne.n	8011a74 <strncmp+0x1c>
 8011a6c:	42a0      	cmp	r0, r4
 8011a6e:	d001      	beq.n	8011a74 <strncmp+0x1c>
 8011a70:	2a00      	cmp	r2, #0
 8011a72:	d1f5      	bne.n	8011a60 <strncmp+0x8>
 8011a74:	1ad0      	subs	r0, r2, r3
 8011a76:	bd10      	pop	{r4, pc}
 8011a78:	4610      	mov	r0, r2
 8011a7a:	e7fc      	b.n	8011a76 <strncmp+0x1e>
 8011a7c:	0000      	movs	r0, r0
	...

08011a80 <nan>:
 8011a80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011a88 <nan+0x8>
 8011a84:	4770      	bx	lr
 8011a86:	bf00      	nop
 8011a88:	00000000 	.word	0x00000000
 8011a8c:	7ff80000 	.word	0x7ff80000

08011a90 <_calloc_r>:
 8011a90:	b570      	push	{r4, r5, r6, lr}
 8011a92:	fba1 5402 	umull	r5, r4, r1, r2
 8011a96:	b93c      	cbnz	r4, 8011aa8 <_calloc_r+0x18>
 8011a98:	4629      	mov	r1, r5
 8011a9a:	f7fc f8ef 	bl	800dc7c <_malloc_r>
 8011a9e:	4606      	mov	r6, r0
 8011aa0:	b928      	cbnz	r0, 8011aae <_calloc_r+0x1e>
 8011aa2:	2600      	movs	r6, #0
 8011aa4:	4630      	mov	r0, r6
 8011aa6:	bd70      	pop	{r4, r5, r6, pc}
 8011aa8:	220c      	movs	r2, #12
 8011aaa:	6002      	str	r2, [r0, #0]
 8011aac:	e7f9      	b.n	8011aa2 <_calloc_r+0x12>
 8011aae:	462a      	mov	r2, r5
 8011ab0:	4621      	mov	r1, r4
 8011ab2:	f7fd f92c 	bl	800ed0e <memset>
 8011ab6:	e7f5      	b.n	8011aa4 <_calloc_r+0x14>

08011ab8 <rshift>:
 8011ab8:	6903      	ldr	r3, [r0, #16]
 8011aba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011abe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ac2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011ac6:	f100 0414 	add.w	r4, r0, #20
 8011aca:	dd45      	ble.n	8011b58 <rshift+0xa0>
 8011acc:	f011 011f 	ands.w	r1, r1, #31
 8011ad0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011ad4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011ad8:	d10c      	bne.n	8011af4 <rshift+0x3c>
 8011ada:	f100 0710 	add.w	r7, r0, #16
 8011ade:	4629      	mov	r1, r5
 8011ae0:	42b1      	cmp	r1, r6
 8011ae2:	d334      	bcc.n	8011b4e <rshift+0x96>
 8011ae4:	1a9b      	subs	r3, r3, r2
 8011ae6:	009b      	lsls	r3, r3, #2
 8011ae8:	1eea      	subs	r2, r5, #3
 8011aea:	4296      	cmp	r6, r2
 8011aec:	bf38      	it	cc
 8011aee:	2300      	movcc	r3, #0
 8011af0:	4423      	add	r3, r4
 8011af2:	e015      	b.n	8011b20 <rshift+0x68>
 8011af4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011af8:	f1c1 0820 	rsb	r8, r1, #32
 8011afc:	40cf      	lsrs	r7, r1
 8011afe:	f105 0e04 	add.w	lr, r5, #4
 8011b02:	46a1      	mov	r9, r4
 8011b04:	4576      	cmp	r6, lr
 8011b06:	46f4      	mov	ip, lr
 8011b08:	d815      	bhi.n	8011b36 <rshift+0x7e>
 8011b0a:	1a9a      	subs	r2, r3, r2
 8011b0c:	0092      	lsls	r2, r2, #2
 8011b0e:	3a04      	subs	r2, #4
 8011b10:	3501      	adds	r5, #1
 8011b12:	42ae      	cmp	r6, r5
 8011b14:	bf38      	it	cc
 8011b16:	2200      	movcc	r2, #0
 8011b18:	18a3      	adds	r3, r4, r2
 8011b1a:	50a7      	str	r7, [r4, r2]
 8011b1c:	b107      	cbz	r7, 8011b20 <rshift+0x68>
 8011b1e:	3304      	adds	r3, #4
 8011b20:	1b1a      	subs	r2, r3, r4
 8011b22:	42a3      	cmp	r3, r4
 8011b24:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011b28:	bf08      	it	eq
 8011b2a:	2300      	moveq	r3, #0
 8011b2c:	6102      	str	r2, [r0, #16]
 8011b2e:	bf08      	it	eq
 8011b30:	6143      	streq	r3, [r0, #20]
 8011b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b36:	f8dc c000 	ldr.w	ip, [ip]
 8011b3a:	fa0c fc08 	lsl.w	ip, ip, r8
 8011b3e:	ea4c 0707 	orr.w	r7, ip, r7
 8011b42:	f849 7b04 	str.w	r7, [r9], #4
 8011b46:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011b4a:	40cf      	lsrs	r7, r1
 8011b4c:	e7da      	b.n	8011b04 <rshift+0x4c>
 8011b4e:	f851 cb04 	ldr.w	ip, [r1], #4
 8011b52:	f847 cf04 	str.w	ip, [r7, #4]!
 8011b56:	e7c3      	b.n	8011ae0 <rshift+0x28>
 8011b58:	4623      	mov	r3, r4
 8011b5a:	e7e1      	b.n	8011b20 <rshift+0x68>

08011b5c <__hexdig_fun>:
 8011b5c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011b60:	2b09      	cmp	r3, #9
 8011b62:	d802      	bhi.n	8011b6a <__hexdig_fun+0xe>
 8011b64:	3820      	subs	r0, #32
 8011b66:	b2c0      	uxtb	r0, r0
 8011b68:	4770      	bx	lr
 8011b6a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011b6e:	2b05      	cmp	r3, #5
 8011b70:	d801      	bhi.n	8011b76 <__hexdig_fun+0x1a>
 8011b72:	3847      	subs	r0, #71	@ 0x47
 8011b74:	e7f7      	b.n	8011b66 <__hexdig_fun+0xa>
 8011b76:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011b7a:	2b05      	cmp	r3, #5
 8011b7c:	d801      	bhi.n	8011b82 <__hexdig_fun+0x26>
 8011b7e:	3827      	subs	r0, #39	@ 0x27
 8011b80:	e7f1      	b.n	8011b66 <__hexdig_fun+0xa>
 8011b82:	2000      	movs	r0, #0
 8011b84:	4770      	bx	lr
	...

08011b88 <__gethex>:
 8011b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b8c:	b085      	sub	sp, #20
 8011b8e:	468a      	mov	sl, r1
 8011b90:	9302      	str	r3, [sp, #8]
 8011b92:	680b      	ldr	r3, [r1, #0]
 8011b94:	9001      	str	r0, [sp, #4]
 8011b96:	4690      	mov	r8, r2
 8011b98:	1c9c      	adds	r4, r3, #2
 8011b9a:	46a1      	mov	r9, r4
 8011b9c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011ba0:	2830      	cmp	r0, #48	@ 0x30
 8011ba2:	d0fa      	beq.n	8011b9a <__gethex+0x12>
 8011ba4:	eba9 0303 	sub.w	r3, r9, r3
 8011ba8:	f1a3 0b02 	sub.w	fp, r3, #2
 8011bac:	f7ff ffd6 	bl	8011b5c <__hexdig_fun>
 8011bb0:	4605      	mov	r5, r0
 8011bb2:	2800      	cmp	r0, #0
 8011bb4:	d168      	bne.n	8011c88 <__gethex+0x100>
 8011bb6:	49a0      	ldr	r1, [pc, #640]	@ (8011e38 <__gethex+0x2b0>)
 8011bb8:	2201      	movs	r2, #1
 8011bba:	4648      	mov	r0, r9
 8011bbc:	f7ff ff4c 	bl	8011a58 <strncmp>
 8011bc0:	4607      	mov	r7, r0
 8011bc2:	2800      	cmp	r0, #0
 8011bc4:	d167      	bne.n	8011c96 <__gethex+0x10e>
 8011bc6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011bca:	4626      	mov	r6, r4
 8011bcc:	f7ff ffc6 	bl	8011b5c <__hexdig_fun>
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	d062      	beq.n	8011c9a <__gethex+0x112>
 8011bd4:	4623      	mov	r3, r4
 8011bd6:	7818      	ldrb	r0, [r3, #0]
 8011bd8:	2830      	cmp	r0, #48	@ 0x30
 8011bda:	4699      	mov	r9, r3
 8011bdc:	f103 0301 	add.w	r3, r3, #1
 8011be0:	d0f9      	beq.n	8011bd6 <__gethex+0x4e>
 8011be2:	f7ff ffbb 	bl	8011b5c <__hexdig_fun>
 8011be6:	fab0 f580 	clz	r5, r0
 8011bea:	096d      	lsrs	r5, r5, #5
 8011bec:	f04f 0b01 	mov.w	fp, #1
 8011bf0:	464a      	mov	r2, r9
 8011bf2:	4616      	mov	r6, r2
 8011bf4:	3201      	adds	r2, #1
 8011bf6:	7830      	ldrb	r0, [r6, #0]
 8011bf8:	f7ff ffb0 	bl	8011b5c <__hexdig_fun>
 8011bfc:	2800      	cmp	r0, #0
 8011bfe:	d1f8      	bne.n	8011bf2 <__gethex+0x6a>
 8011c00:	498d      	ldr	r1, [pc, #564]	@ (8011e38 <__gethex+0x2b0>)
 8011c02:	2201      	movs	r2, #1
 8011c04:	4630      	mov	r0, r6
 8011c06:	f7ff ff27 	bl	8011a58 <strncmp>
 8011c0a:	2800      	cmp	r0, #0
 8011c0c:	d13f      	bne.n	8011c8e <__gethex+0x106>
 8011c0e:	b944      	cbnz	r4, 8011c22 <__gethex+0x9a>
 8011c10:	1c74      	adds	r4, r6, #1
 8011c12:	4622      	mov	r2, r4
 8011c14:	4616      	mov	r6, r2
 8011c16:	3201      	adds	r2, #1
 8011c18:	7830      	ldrb	r0, [r6, #0]
 8011c1a:	f7ff ff9f 	bl	8011b5c <__hexdig_fun>
 8011c1e:	2800      	cmp	r0, #0
 8011c20:	d1f8      	bne.n	8011c14 <__gethex+0x8c>
 8011c22:	1ba4      	subs	r4, r4, r6
 8011c24:	00a7      	lsls	r7, r4, #2
 8011c26:	7833      	ldrb	r3, [r6, #0]
 8011c28:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011c2c:	2b50      	cmp	r3, #80	@ 0x50
 8011c2e:	d13e      	bne.n	8011cae <__gethex+0x126>
 8011c30:	7873      	ldrb	r3, [r6, #1]
 8011c32:	2b2b      	cmp	r3, #43	@ 0x2b
 8011c34:	d033      	beq.n	8011c9e <__gethex+0x116>
 8011c36:	2b2d      	cmp	r3, #45	@ 0x2d
 8011c38:	d034      	beq.n	8011ca4 <__gethex+0x11c>
 8011c3a:	1c71      	adds	r1, r6, #1
 8011c3c:	2400      	movs	r4, #0
 8011c3e:	7808      	ldrb	r0, [r1, #0]
 8011c40:	f7ff ff8c 	bl	8011b5c <__hexdig_fun>
 8011c44:	1e43      	subs	r3, r0, #1
 8011c46:	b2db      	uxtb	r3, r3
 8011c48:	2b18      	cmp	r3, #24
 8011c4a:	d830      	bhi.n	8011cae <__gethex+0x126>
 8011c4c:	f1a0 0210 	sub.w	r2, r0, #16
 8011c50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011c54:	f7ff ff82 	bl	8011b5c <__hexdig_fun>
 8011c58:	f100 3cff 	add.w	ip, r0, #4294967295
 8011c5c:	fa5f fc8c 	uxtb.w	ip, ip
 8011c60:	f1bc 0f18 	cmp.w	ip, #24
 8011c64:	f04f 030a 	mov.w	r3, #10
 8011c68:	d91e      	bls.n	8011ca8 <__gethex+0x120>
 8011c6a:	b104      	cbz	r4, 8011c6e <__gethex+0xe6>
 8011c6c:	4252      	negs	r2, r2
 8011c6e:	4417      	add	r7, r2
 8011c70:	f8ca 1000 	str.w	r1, [sl]
 8011c74:	b1ed      	cbz	r5, 8011cb2 <__gethex+0x12a>
 8011c76:	f1bb 0f00 	cmp.w	fp, #0
 8011c7a:	bf0c      	ite	eq
 8011c7c:	2506      	moveq	r5, #6
 8011c7e:	2500      	movne	r5, #0
 8011c80:	4628      	mov	r0, r5
 8011c82:	b005      	add	sp, #20
 8011c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c88:	2500      	movs	r5, #0
 8011c8a:	462c      	mov	r4, r5
 8011c8c:	e7b0      	b.n	8011bf0 <__gethex+0x68>
 8011c8e:	2c00      	cmp	r4, #0
 8011c90:	d1c7      	bne.n	8011c22 <__gethex+0x9a>
 8011c92:	4627      	mov	r7, r4
 8011c94:	e7c7      	b.n	8011c26 <__gethex+0x9e>
 8011c96:	464e      	mov	r6, r9
 8011c98:	462f      	mov	r7, r5
 8011c9a:	2501      	movs	r5, #1
 8011c9c:	e7c3      	b.n	8011c26 <__gethex+0x9e>
 8011c9e:	2400      	movs	r4, #0
 8011ca0:	1cb1      	adds	r1, r6, #2
 8011ca2:	e7cc      	b.n	8011c3e <__gethex+0xb6>
 8011ca4:	2401      	movs	r4, #1
 8011ca6:	e7fb      	b.n	8011ca0 <__gethex+0x118>
 8011ca8:	fb03 0002 	mla	r0, r3, r2, r0
 8011cac:	e7ce      	b.n	8011c4c <__gethex+0xc4>
 8011cae:	4631      	mov	r1, r6
 8011cb0:	e7de      	b.n	8011c70 <__gethex+0xe8>
 8011cb2:	eba6 0309 	sub.w	r3, r6, r9
 8011cb6:	3b01      	subs	r3, #1
 8011cb8:	4629      	mov	r1, r5
 8011cba:	2b07      	cmp	r3, #7
 8011cbc:	dc0a      	bgt.n	8011cd4 <__gethex+0x14c>
 8011cbe:	9801      	ldr	r0, [sp, #4]
 8011cc0:	f7fd ffb8 	bl	800fc34 <_Balloc>
 8011cc4:	4604      	mov	r4, r0
 8011cc6:	b940      	cbnz	r0, 8011cda <__gethex+0x152>
 8011cc8:	4b5c      	ldr	r3, [pc, #368]	@ (8011e3c <__gethex+0x2b4>)
 8011cca:	4602      	mov	r2, r0
 8011ccc:	21e4      	movs	r1, #228	@ 0xe4
 8011cce:	485c      	ldr	r0, [pc, #368]	@ (8011e40 <__gethex+0x2b8>)
 8011cd0:	f7fb ff72 	bl	800dbb8 <__assert_func>
 8011cd4:	3101      	adds	r1, #1
 8011cd6:	105b      	asrs	r3, r3, #1
 8011cd8:	e7ef      	b.n	8011cba <__gethex+0x132>
 8011cda:	f100 0a14 	add.w	sl, r0, #20
 8011cde:	2300      	movs	r3, #0
 8011ce0:	4655      	mov	r5, sl
 8011ce2:	469b      	mov	fp, r3
 8011ce4:	45b1      	cmp	r9, r6
 8011ce6:	d337      	bcc.n	8011d58 <__gethex+0x1d0>
 8011ce8:	f845 bb04 	str.w	fp, [r5], #4
 8011cec:	eba5 050a 	sub.w	r5, r5, sl
 8011cf0:	10ad      	asrs	r5, r5, #2
 8011cf2:	6125      	str	r5, [r4, #16]
 8011cf4:	4658      	mov	r0, fp
 8011cf6:	f7fe f88f 	bl	800fe18 <__hi0bits>
 8011cfa:	016d      	lsls	r5, r5, #5
 8011cfc:	f8d8 6000 	ldr.w	r6, [r8]
 8011d00:	1a2d      	subs	r5, r5, r0
 8011d02:	42b5      	cmp	r5, r6
 8011d04:	dd54      	ble.n	8011db0 <__gethex+0x228>
 8011d06:	1bad      	subs	r5, r5, r6
 8011d08:	4629      	mov	r1, r5
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	f7fe fc23 	bl	8010556 <__any_on>
 8011d10:	4681      	mov	r9, r0
 8011d12:	b178      	cbz	r0, 8011d34 <__gethex+0x1ac>
 8011d14:	1e6b      	subs	r3, r5, #1
 8011d16:	1159      	asrs	r1, r3, #5
 8011d18:	f003 021f 	and.w	r2, r3, #31
 8011d1c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011d20:	f04f 0901 	mov.w	r9, #1
 8011d24:	fa09 f202 	lsl.w	r2, r9, r2
 8011d28:	420a      	tst	r2, r1
 8011d2a:	d003      	beq.n	8011d34 <__gethex+0x1ac>
 8011d2c:	454b      	cmp	r3, r9
 8011d2e:	dc36      	bgt.n	8011d9e <__gethex+0x216>
 8011d30:	f04f 0902 	mov.w	r9, #2
 8011d34:	4629      	mov	r1, r5
 8011d36:	4620      	mov	r0, r4
 8011d38:	f7ff febe 	bl	8011ab8 <rshift>
 8011d3c:	442f      	add	r7, r5
 8011d3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011d42:	42bb      	cmp	r3, r7
 8011d44:	da42      	bge.n	8011dcc <__gethex+0x244>
 8011d46:	9801      	ldr	r0, [sp, #4]
 8011d48:	4621      	mov	r1, r4
 8011d4a:	f7fd ffb3 	bl	800fcb4 <_Bfree>
 8011d4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d50:	2300      	movs	r3, #0
 8011d52:	6013      	str	r3, [r2, #0]
 8011d54:	25a3      	movs	r5, #163	@ 0xa3
 8011d56:	e793      	b.n	8011c80 <__gethex+0xf8>
 8011d58:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011d5c:	2a2e      	cmp	r2, #46	@ 0x2e
 8011d5e:	d012      	beq.n	8011d86 <__gethex+0x1fe>
 8011d60:	2b20      	cmp	r3, #32
 8011d62:	d104      	bne.n	8011d6e <__gethex+0x1e6>
 8011d64:	f845 bb04 	str.w	fp, [r5], #4
 8011d68:	f04f 0b00 	mov.w	fp, #0
 8011d6c:	465b      	mov	r3, fp
 8011d6e:	7830      	ldrb	r0, [r6, #0]
 8011d70:	9303      	str	r3, [sp, #12]
 8011d72:	f7ff fef3 	bl	8011b5c <__hexdig_fun>
 8011d76:	9b03      	ldr	r3, [sp, #12]
 8011d78:	f000 000f 	and.w	r0, r0, #15
 8011d7c:	4098      	lsls	r0, r3
 8011d7e:	ea4b 0b00 	orr.w	fp, fp, r0
 8011d82:	3304      	adds	r3, #4
 8011d84:	e7ae      	b.n	8011ce4 <__gethex+0x15c>
 8011d86:	45b1      	cmp	r9, r6
 8011d88:	d8ea      	bhi.n	8011d60 <__gethex+0x1d8>
 8011d8a:	492b      	ldr	r1, [pc, #172]	@ (8011e38 <__gethex+0x2b0>)
 8011d8c:	9303      	str	r3, [sp, #12]
 8011d8e:	2201      	movs	r2, #1
 8011d90:	4630      	mov	r0, r6
 8011d92:	f7ff fe61 	bl	8011a58 <strncmp>
 8011d96:	9b03      	ldr	r3, [sp, #12]
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	d1e1      	bne.n	8011d60 <__gethex+0x1d8>
 8011d9c:	e7a2      	b.n	8011ce4 <__gethex+0x15c>
 8011d9e:	1ea9      	subs	r1, r5, #2
 8011da0:	4620      	mov	r0, r4
 8011da2:	f7fe fbd8 	bl	8010556 <__any_on>
 8011da6:	2800      	cmp	r0, #0
 8011da8:	d0c2      	beq.n	8011d30 <__gethex+0x1a8>
 8011daa:	f04f 0903 	mov.w	r9, #3
 8011dae:	e7c1      	b.n	8011d34 <__gethex+0x1ac>
 8011db0:	da09      	bge.n	8011dc6 <__gethex+0x23e>
 8011db2:	1b75      	subs	r5, r6, r5
 8011db4:	4621      	mov	r1, r4
 8011db6:	9801      	ldr	r0, [sp, #4]
 8011db8:	462a      	mov	r2, r5
 8011dba:	f7fe f993 	bl	80100e4 <__lshift>
 8011dbe:	1b7f      	subs	r7, r7, r5
 8011dc0:	4604      	mov	r4, r0
 8011dc2:	f100 0a14 	add.w	sl, r0, #20
 8011dc6:	f04f 0900 	mov.w	r9, #0
 8011dca:	e7b8      	b.n	8011d3e <__gethex+0x1b6>
 8011dcc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011dd0:	42bd      	cmp	r5, r7
 8011dd2:	dd6f      	ble.n	8011eb4 <__gethex+0x32c>
 8011dd4:	1bed      	subs	r5, r5, r7
 8011dd6:	42ae      	cmp	r6, r5
 8011dd8:	dc34      	bgt.n	8011e44 <__gethex+0x2bc>
 8011dda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011dde:	2b02      	cmp	r3, #2
 8011de0:	d022      	beq.n	8011e28 <__gethex+0x2a0>
 8011de2:	2b03      	cmp	r3, #3
 8011de4:	d024      	beq.n	8011e30 <__gethex+0x2a8>
 8011de6:	2b01      	cmp	r3, #1
 8011de8:	d115      	bne.n	8011e16 <__gethex+0x28e>
 8011dea:	42ae      	cmp	r6, r5
 8011dec:	d113      	bne.n	8011e16 <__gethex+0x28e>
 8011dee:	2e01      	cmp	r6, #1
 8011df0:	d10b      	bne.n	8011e0a <__gethex+0x282>
 8011df2:	9a02      	ldr	r2, [sp, #8]
 8011df4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011df8:	6013      	str	r3, [r2, #0]
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	6123      	str	r3, [r4, #16]
 8011dfe:	f8ca 3000 	str.w	r3, [sl]
 8011e02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e04:	2562      	movs	r5, #98	@ 0x62
 8011e06:	601c      	str	r4, [r3, #0]
 8011e08:	e73a      	b.n	8011c80 <__gethex+0xf8>
 8011e0a:	1e71      	subs	r1, r6, #1
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	f7fe fba2 	bl	8010556 <__any_on>
 8011e12:	2800      	cmp	r0, #0
 8011e14:	d1ed      	bne.n	8011df2 <__gethex+0x26a>
 8011e16:	9801      	ldr	r0, [sp, #4]
 8011e18:	4621      	mov	r1, r4
 8011e1a:	f7fd ff4b 	bl	800fcb4 <_Bfree>
 8011e1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e20:	2300      	movs	r3, #0
 8011e22:	6013      	str	r3, [r2, #0]
 8011e24:	2550      	movs	r5, #80	@ 0x50
 8011e26:	e72b      	b.n	8011c80 <__gethex+0xf8>
 8011e28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1f3      	bne.n	8011e16 <__gethex+0x28e>
 8011e2e:	e7e0      	b.n	8011df2 <__gethex+0x26a>
 8011e30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d1dd      	bne.n	8011df2 <__gethex+0x26a>
 8011e36:	e7ee      	b.n	8011e16 <__gethex+0x28e>
 8011e38:	08013660 	.word	0x08013660
 8011e3c:	080134f9 	.word	0x080134f9
 8011e40:	080137d2 	.word	0x080137d2
 8011e44:	1e6f      	subs	r7, r5, #1
 8011e46:	f1b9 0f00 	cmp.w	r9, #0
 8011e4a:	d130      	bne.n	8011eae <__gethex+0x326>
 8011e4c:	b127      	cbz	r7, 8011e58 <__gethex+0x2d0>
 8011e4e:	4639      	mov	r1, r7
 8011e50:	4620      	mov	r0, r4
 8011e52:	f7fe fb80 	bl	8010556 <__any_on>
 8011e56:	4681      	mov	r9, r0
 8011e58:	117a      	asrs	r2, r7, #5
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011e60:	f007 071f 	and.w	r7, r7, #31
 8011e64:	40bb      	lsls	r3, r7
 8011e66:	4213      	tst	r3, r2
 8011e68:	4629      	mov	r1, r5
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	bf18      	it	ne
 8011e6e:	f049 0902 	orrne.w	r9, r9, #2
 8011e72:	f7ff fe21 	bl	8011ab8 <rshift>
 8011e76:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011e7a:	1b76      	subs	r6, r6, r5
 8011e7c:	2502      	movs	r5, #2
 8011e7e:	f1b9 0f00 	cmp.w	r9, #0
 8011e82:	d047      	beq.n	8011f14 <__gethex+0x38c>
 8011e84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011e88:	2b02      	cmp	r3, #2
 8011e8a:	d015      	beq.n	8011eb8 <__gethex+0x330>
 8011e8c:	2b03      	cmp	r3, #3
 8011e8e:	d017      	beq.n	8011ec0 <__gethex+0x338>
 8011e90:	2b01      	cmp	r3, #1
 8011e92:	d109      	bne.n	8011ea8 <__gethex+0x320>
 8011e94:	f019 0f02 	tst.w	r9, #2
 8011e98:	d006      	beq.n	8011ea8 <__gethex+0x320>
 8011e9a:	f8da 3000 	ldr.w	r3, [sl]
 8011e9e:	ea49 0903 	orr.w	r9, r9, r3
 8011ea2:	f019 0f01 	tst.w	r9, #1
 8011ea6:	d10e      	bne.n	8011ec6 <__gethex+0x33e>
 8011ea8:	f045 0510 	orr.w	r5, r5, #16
 8011eac:	e032      	b.n	8011f14 <__gethex+0x38c>
 8011eae:	f04f 0901 	mov.w	r9, #1
 8011eb2:	e7d1      	b.n	8011e58 <__gethex+0x2d0>
 8011eb4:	2501      	movs	r5, #1
 8011eb6:	e7e2      	b.n	8011e7e <__gethex+0x2f6>
 8011eb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011eba:	f1c3 0301 	rsb	r3, r3, #1
 8011ebe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011ec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d0f0      	beq.n	8011ea8 <__gethex+0x320>
 8011ec6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011eca:	f104 0314 	add.w	r3, r4, #20
 8011ece:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011ed2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011ed6:	f04f 0c00 	mov.w	ip, #0
 8011eda:	4618      	mov	r0, r3
 8011edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ee0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011ee4:	d01b      	beq.n	8011f1e <__gethex+0x396>
 8011ee6:	3201      	adds	r2, #1
 8011ee8:	6002      	str	r2, [r0, #0]
 8011eea:	2d02      	cmp	r5, #2
 8011eec:	f104 0314 	add.w	r3, r4, #20
 8011ef0:	d13c      	bne.n	8011f6c <__gethex+0x3e4>
 8011ef2:	f8d8 2000 	ldr.w	r2, [r8]
 8011ef6:	3a01      	subs	r2, #1
 8011ef8:	42b2      	cmp	r2, r6
 8011efa:	d109      	bne.n	8011f10 <__gethex+0x388>
 8011efc:	1171      	asrs	r1, r6, #5
 8011efe:	2201      	movs	r2, #1
 8011f00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011f04:	f006 061f 	and.w	r6, r6, #31
 8011f08:	fa02 f606 	lsl.w	r6, r2, r6
 8011f0c:	421e      	tst	r6, r3
 8011f0e:	d13a      	bne.n	8011f86 <__gethex+0x3fe>
 8011f10:	f045 0520 	orr.w	r5, r5, #32
 8011f14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f16:	601c      	str	r4, [r3, #0]
 8011f18:	9b02      	ldr	r3, [sp, #8]
 8011f1a:	601f      	str	r7, [r3, #0]
 8011f1c:	e6b0      	b.n	8011c80 <__gethex+0xf8>
 8011f1e:	4299      	cmp	r1, r3
 8011f20:	f843 cc04 	str.w	ip, [r3, #-4]
 8011f24:	d8d9      	bhi.n	8011eda <__gethex+0x352>
 8011f26:	68a3      	ldr	r3, [r4, #8]
 8011f28:	459b      	cmp	fp, r3
 8011f2a:	db17      	blt.n	8011f5c <__gethex+0x3d4>
 8011f2c:	6861      	ldr	r1, [r4, #4]
 8011f2e:	9801      	ldr	r0, [sp, #4]
 8011f30:	3101      	adds	r1, #1
 8011f32:	f7fd fe7f 	bl	800fc34 <_Balloc>
 8011f36:	4681      	mov	r9, r0
 8011f38:	b918      	cbnz	r0, 8011f42 <__gethex+0x3ba>
 8011f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8011fa4 <__gethex+0x41c>)
 8011f3c:	4602      	mov	r2, r0
 8011f3e:	2184      	movs	r1, #132	@ 0x84
 8011f40:	e6c5      	b.n	8011cce <__gethex+0x146>
 8011f42:	6922      	ldr	r2, [r4, #16]
 8011f44:	3202      	adds	r2, #2
 8011f46:	f104 010c 	add.w	r1, r4, #12
 8011f4a:	0092      	lsls	r2, r2, #2
 8011f4c:	300c      	adds	r0, #12
 8011f4e:	f7fc ffc4 	bl	800eeda <memcpy>
 8011f52:	4621      	mov	r1, r4
 8011f54:	9801      	ldr	r0, [sp, #4]
 8011f56:	f7fd fead 	bl	800fcb4 <_Bfree>
 8011f5a:	464c      	mov	r4, r9
 8011f5c:	6923      	ldr	r3, [r4, #16]
 8011f5e:	1c5a      	adds	r2, r3, #1
 8011f60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011f64:	6122      	str	r2, [r4, #16]
 8011f66:	2201      	movs	r2, #1
 8011f68:	615a      	str	r2, [r3, #20]
 8011f6a:	e7be      	b.n	8011eea <__gethex+0x362>
 8011f6c:	6922      	ldr	r2, [r4, #16]
 8011f6e:	455a      	cmp	r2, fp
 8011f70:	dd0b      	ble.n	8011f8a <__gethex+0x402>
 8011f72:	2101      	movs	r1, #1
 8011f74:	4620      	mov	r0, r4
 8011f76:	f7ff fd9f 	bl	8011ab8 <rshift>
 8011f7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011f7e:	3701      	adds	r7, #1
 8011f80:	42bb      	cmp	r3, r7
 8011f82:	f6ff aee0 	blt.w	8011d46 <__gethex+0x1be>
 8011f86:	2501      	movs	r5, #1
 8011f88:	e7c2      	b.n	8011f10 <__gethex+0x388>
 8011f8a:	f016 061f 	ands.w	r6, r6, #31
 8011f8e:	d0fa      	beq.n	8011f86 <__gethex+0x3fe>
 8011f90:	4453      	add	r3, sl
 8011f92:	f1c6 0620 	rsb	r6, r6, #32
 8011f96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011f9a:	f7fd ff3d 	bl	800fe18 <__hi0bits>
 8011f9e:	42b0      	cmp	r0, r6
 8011fa0:	dbe7      	blt.n	8011f72 <__gethex+0x3ea>
 8011fa2:	e7f0      	b.n	8011f86 <__gethex+0x3fe>
 8011fa4:	080134f9 	.word	0x080134f9

08011fa8 <L_shift>:
 8011fa8:	f1c2 0208 	rsb	r2, r2, #8
 8011fac:	0092      	lsls	r2, r2, #2
 8011fae:	b570      	push	{r4, r5, r6, lr}
 8011fb0:	f1c2 0620 	rsb	r6, r2, #32
 8011fb4:	6843      	ldr	r3, [r0, #4]
 8011fb6:	6804      	ldr	r4, [r0, #0]
 8011fb8:	fa03 f506 	lsl.w	r5, r3, r6
 8011fbc:	432c      	orrs	r4, r5
 8011fbe:	40d3      	lsrs	r3, r2
 8011fc0:	6004      	str	r4, [r0, #0]
 8011fc2:	f840 3f04 	str.w	r3, [r0, #4]!
 8011fc6:	4288      	cmp	r0, r1
 8011fc8:	d3f4      	bcc.n	8011fb4 <L_shift+0xc>
 8011fca:	bd70      	pop	{r4, r5, r6, pc}

08011fcc <__match>:
 8011fcc:	b530      	push	{r4, r5, lr}
 8011fce:	6803      	ldr	r3, [r0, #0]
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fd6:	b914      	cbnz	r4, 8011fde <__match+0x12>
 8011fd8:	6003      	str	r3, [r0, #0]
 8011fda:	2001      	movs	r0, #1
 8011fdc:	bd30      	pop	{r4, r5, pc}
 8011fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fe2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011fe6:	2d19      	cmp	r5, #25
 8011fe8:	bf98      	it	ls
 8011fea:	3220      	addls	r2, #32
 8011fec:	42a2      	cmp	r2, r4
 8011fee:	d0f0      	beq.n	8011fd2 <__match+0x6>
 8011ff0:	2000      	movs	r0, #0
 8011ff2:	e7f3      	b.n	8011fdc <__match+0x10>

08011ff4 <__hexnan>:
 8011ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff8:	680b      	ldr	r3, [r1, #0]
 8011ffa:	6801      	ldr	r1, [r0, #0]
 8011ffc:	115e      	asrs	r6, r3, #5
 8011ffe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012002:	f013 031f 	ands.w	r3, r3, #31
 8012006:	b087      	sub	sp, #28
 8012008:	bf18      	it	ne
 801200a:	3604      	addne	r6, #4
 801200c:	2500      	movs	r5, #0
 801200e:	1f37      	subs	r7, r6, #4
 8012010:	4682      	mov	sl, r0
 8012012:	4690      	mov	r8, r2
 8012014:	9301      	str	r3, [sp, #4]
 8012016:	f846 5c04 	str.w	r5, [r6, #-4]
 801201a:	46b9      	mov	r9, r7
 801201c:	463c      	mov	r4, r7
 801201e:	9502      	str	r5, [sp, #8]
 8012020:	46ab      	mov	fp, r5
 8012022:	784a      	ldrb	r2, [r1, #1]
 8012024:	1c4b      	adds	r3, r1, #1
 8012026:	9303      	str	r3, [sp, #12]
 8012028:	b342      	cbz	r2, 801207c <__hexnan+0x88>
 801202a:	4610      	mov	r0, r2
 801202c:	9105      	str	r1, [sp, #20]
 801202e:	9204      	str	r2, [sp, #16]
 8012030:	f7ff fd94 	bl	8011b5c <__hexdig_fun>
 8012034:	2800      	cmp	r0, #0
 8012036:	d151      	bne.n	80120dc <__hexnan+0xe8>
 8012038:	9a04      	ldr	r2, [sp, #16]
 801203a:	9905      	ldr	r1, [sp, #20]
 801203c:	2a20      	cmp	r2, #32
 801203e:	d818      	bhi.n	8012072 <__hexnan+0x7e>
 8012040:	9b02      	ldr	r3, [sp, #8]
 8012042:	459b      	cmp	fp, r3
 8012044:	dd13      	ble.n	801206e <__hexnan+0x7a>
 8012046:	454c      	cmp	r4, r9
 8012048:	d206      	bcs.n	8012058 <__hexnan+0x64>
 801204a:	2d07      	cmp	r5, #7
 801204c:	dc04      	bgt.n	8012058 <__hexnan+0x64>
 801204e:	462a      	mov	r2, r5
 8012050:	4649      	mov	r1, r9
 8012052:	4620      	mov	r0, r4
 8012054:	f7ff ffa8 	bl	8011fa8 <L_shift>
 8012058:	4544      	cmp	r4, r8
 801205a:	d952      	bls.n	8012102 <__hexnan+0x10e>
 801205c:	2300      	movs	r3, #0
 801205e:	f1a4 0904 	sub.w	r9, r4, #4
 8012062:	f844 3c04 	str.w	r3, [r4, #-4]
 8012066:	f8cd b008 	str.w	fp, [sp, #8]
 801206a:	464c      	mov	r4, r9
 801206c:	461d      	mov	r5, r3
 801206e:	9903      	ldr	r1, [sp, #12]
 8012070:	e7d7      	b.n	8012022 <__hexnan+0x2e>
 8012072:	2a29      	cmp	r2, #41	@ 0x29
 8012074:	d157      	bne.n	8012126 <__hexnan+0x132>
 8012076:	3102      	adds	r1, #2
 8012078:	f8ca 1000 	str.w	r1, [sl]
 801207c:	f1bb 0f00 	cmp.w	fp, #0
 8012080:	d051      	beq.n	8012126 <__hexnan+0x132>
 8012082:	454c      	cmp	r4, r9
 8012084:	d206      	bcs.n	8012094 <__hexnan+0xa0>
 8012086:	2d07      	cmp	r5, #7
 8012088:	dc04      	bgt.n	8012094 <__hexnan+0xa0>
 801208a:	462a      	mov	r2, r5
 801208c:	4649      	mov	r1, r9
 801208e:	4620      	mov	r0, r4
 8012090:	f7ff ff8a 	bl	8011fa8 <L_shift>
 8012094:	4544      	cmp	r4, r8
 8012096:	d936      	bls.n	8012106 <__hexnan+0x112>
 8012098:	f1a8 0204 	sub.w	r2, r8, #4
 801209c:	4623      	mov	r3, r4
 801209e:	f853 1b04 	ldr.w	r1, [r3], #4
 80120a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80120a6:	429f      	cmp	r7, r3
 80120a8:	d2f9      	bcs.n	801209e <__hexnan+0xaa>
 80120aa:	1b3b      	subs	r3, r7, r4
 80120ac:	f023 0303 	bic.w	r3, r3, #3
 80120b0:	3304      	adds	r3, #4
 80120b2:	3401      	adds	r4, #1
 80120b4:	3e03      	subs	r6, #3
 80120b6:	42b4      	cmp	r4, r6
 80120b8:	bf88      	it	hi
 80120ba:	2304      	movhi	r3, #4
 80120bc:	4443      	add	r3, r8
 80120be:	2200      	movs	r2, #0
 80120c0:	f843 2b04 	str.w	r2, [r3], #4
 80120c4:	429f      	cmp	r7, r3
 80120c6:	d2fb      	bcs.n	80120c0 <__hexnan+0xcc>
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	b91b      	cbnz	r3, 80120d4 <__hexnan+0xe0>
 80120cc:	4547      	cmp	r7, r8
 80120ce:	d128      	bne.n	8012122 <__hexnan+0x12e>
 80120d0:	2301      	movs	r3, #1
 80120d2:	603b      	str	r3, [r7, #0]
 80120d4:	2005      	movs	r0, #5
 80120d6:	b007      	add	sp, #28
 80120d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120dc:	3501      	adds	r5, #1
 80120de:	2d08      	cmp	r5, #8
 80120e0:	f10b 0b01 	add.w	fp, fp, #1
 80120e4:	dd06      	ble.n	80120f4 <__hexnan+0x100>
 80120e6:	4544      	cmp	r4, r8
 80120e8:	d9c1      	bls.n	801206e <__hexnan+0x7a>
 80120ea:	2300      	movs	r3, #0
 80120ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80120f0:	2501      	movs	r5, #1
 80120f2:	3c04      	subs	r4, #4
 80120f4:	6822      	ldr	r2, [r4, #0]
 80120f6:	f000 000f 	and.w	r0, r0, #15
 80120fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80120fe:	6020      	str	r0, [r4, #0]
 8012100:	e7b5      	b.n	801206e <__hexnan+0x7a>
 8012102:	2508      	movs	r5, #8
 8012104:	e7b3      	b.n	801206e <__hexnan+0x7a>
 8012106:	9b01      	ldr	r3, [sp, #4]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d0dd      	beq.n	80120c8 <__hexnan+0xd4>
 801210c:	f1c3 0320 	rsb	r3, r3, #32
 8012110:	f04f 32ff 	mov.w	r2, #4294967295
 8012114:	40da      	lsrs	r2, r3
 8012116:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801211a:	4013      	ands	r3, r2
 801211c:	f846 3c04 	str.w	r3, [r6, #-4]
 8012120:	e7d2      	b.n	80120c8 <__hexnan+0xd4>
 8012122:	3f04      	subs	r7, #4
 8012124:	e7d0      	b.n	80120c8 <__hexnan+0xd4>
 8012126:	2004      	movs	r0, #4
 8012128:	e7d5      	b.n	80120d6 <__hexnan+0xe2>

0801212a <__ascii_mbtowc>:
 801212a:	b082      	sub	sp, #8
 801212c:	b901      	cbnz	r1, 8012130 <__ascii_mbtowc+0x6>
 801212e:	a901      	add	r1, sp, #4
 8012130:	b142      	cbz	r2, 8012144 <__ascii_mbtowc+0x1a>
 8012132:	b14b      	cbz	r3, 8012148 <__ascii_mbtowc+0x1e>
 8012134:	7813      	ldrb	r3, [r2, #0]
 8012136:	600b      	str	r3, [r1, #0]
 8012138:	7812      	ldrb	r2, [r2, #0]
 801213a:	1e10      	subs	r0, r2, #0
 801213c:	bf18      	it	ne
 801213e:	2001      	movne	r0, #1
 8012140:	b002      	add	sp, #8
 8012142:	4770      	bx	lr
 8012144:	4610      	mov	r0, r2
 8012146:	e7fb      	b.n	8012140 <__ascii_mbtowc+0x16>
 8012148:	f06f 0001 	mvn.w	r0, #1
 801214c:	e7f8      	b.n	8012140 <__ascii_mbtowc+0x16>

0801214e <_realloc_r>:
 801214e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012152:	4680      	mov	r8, r0
 8012154:	4615      	mov	r5, r2
 8012156:	460c      	mov	r4, r1
 8012158:	b921      	cbnz	r1, 8012164 <_realloc_r+0x16>
 801215a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801215e:	4611      	mov	r1, r2
 8012160:	f7fb bd8c 	b.w	800dc7c <_malloc_r>
 8012164:	b92a      	cbnz	r2, 8012172 <_realloc_r+0x24>
 8012166:	f7fd fd1b 	bl	800fba0 <_free_r>
 801216a:	2400      	movs	r4, #0
 801216c:	4620      	mov	r0, r4
 801216e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012172:	f000 f8ab 	bl	80122cc <_malloc_usable_size_r>
 8012176:	4285      	cmp	r5, r0
 8012178:	4606      	mov	r6, r0
 801217a:	d802      	bhi.n	8012182 <_realloc_r+0x34>
 801217c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012180:	d8f4      	bhi.n	801216c <_realloc_r+0x1e>
 8012182:	4629      	mov	r1, r5
 8012184:	4640      	mov	r0, r8
 8012186:	f7fb fd79 	bl	800dc7c <_malloc_r>
 801218a:	4607      	mov	r7, r0
 801218c:	2800      	cmp	r0, #0
 801218e:	d0ec      	beq.n	801216a <_realloc_r+0x1c>
 8012190:	42b5      	cmp	r5, r6
 8012192:	462a      	mov	r2, r5
 8012194:	4621      	mov	r1, r4
 8012196:	bf28      	it	cs
 8012198:	4632      	movcs	r2, r6
 801219a:	f7fc fe9e 	bl	800eeda <memcpy>
 801219e:	4621      	mov	r1, r4
 80121a0:	4640      	mov	r0, r8
 80121a2:	f7fd fcfd 	bl	800fba0 <_free_r>
 80121a6:	463c      	mov	r4, r7
 80121a8:	e7e0      	b.n	801216c <_realloc_r+0x1e>

080121aa <__ascii_wctomb>:
 80121aa:	4603      	mov	r3, r0
 80121ac:	4608      	mov	r0, r1
 80121ae:	b141      	cbz	r1, 80121c2 <__ascii_wctomb+0x18>
 80121b0:	2aff      	cmp	r2, #255	@ 0xff
 80121b2:	d904      	bls.n	80121be <__ascii_wctomb+0x14>
 80121b4:	228a      	movs	r2, #138	@ 0x8a
 80121b6:	601a      	str	r2, [r3, #0]
 80121b8:	f04f 30ff 	mov.w	r0, #4294967295
 80121bc:	4770      	bx	lr
 80121be:	700a      	strb	r2, [r1, #0]
 80121c0:	2001      	movs	r0, #1
 80121c2:	4770      	bx	lr

080121c4 <__swhatbuf_r>:
 80121c4:	b570      	push	{r4, r5, r6, lr}
 80121c6:	460c      	mov	r4, r1
 80121c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121cc:	2900      	cmp	r1, #0
 80121ce:	b096      	sub	sp, #88	@ 0x58
 80121d0:	4615      	mov	r5, r2
 80121d2:	461e      	mov	r6, r3
 80121d4:	da0d      	bge.n	80121f2 <__swhatbuf_r+0x2e>
 80121d6:	89a3      	ldrh	r3, [r4, #12]
 80121d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80121dc:	f04f 0100 	mov.w	r1, #0
 80121e0:	bf14      	ite	ne
 80121e2:	2340      	movne	r3, #64	@ 0x40
 80121e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80121e8:	2000      	movs	r0, #0
 80121ea:	6031      	str	r1, [r6, #0]
 80121ec:	602b      	str	r3, [r5, #0]
 80121ee:	b016      	add	sp, #88	@ 0x58
 80121f0:	bd70      	pop	{r4, r5, r6, pc}
 80121f2:	466a      	mov	r2, sp
 80121f4:	f000 f848 	bl	8012288 <_fstat_r>
 80121f8:	2800      	cmp	r0, #0
 80121fa:	dbec      	blt.n	80121d6 <__swhatbuf_r+0x12>
 80121fc:	9901      	ldr	r1, [sp, #4]
 80121fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012202:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012206:	4259      	negs	r1, r3
 8012208:	4159      	adcs	r1, r3
 801220a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801220e:	e7eb      	b.n	80121e8 <__swhatbuf_r+0x24>

08012210 <__smakebuf_r>:
 8012210:	898b      	ldrh	r3, [r1, #12]
 8012212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012214:	079d      	lsls	r5, r3, #30
 8012216:	4606      	mov	r6, r0
 8012218:	460c      	mov	r4, r1
 801221a:	d507      	bpl.n	801222c <__smakebuf_r+0x1c>
 801221c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012220:	6023      	str	r3, [r4, #0]
 8012222:	6123      	str	r3, [r4, #16]
 8012224:	2301      	movs	r3, #1
 8012226:	6163      	str	r3, [r4, #20]
 8012228:	b003      	add	sp, #12
 801222a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801222c:	ab01      	add	r3, sp, #4
 801222e:	466a      	mov	r2, sp
 8012230:	f7ff ffc8 	bl	80121c4 <__swhatbuf_r>
 8012234:	9f00      	ldr	r7, [sp, #0]
 8012236:	4605      	mov	r5, r0
 8012238:	4639      	mov	r1, r7
 801223a:	4630      	mov	r0, r6
 801223c:	f7fb fd1e 	bl	800dc7c <_malloc_r>
 8012240:	b948      	cbnz	r0, 8012256 <__smakebuf_r+0x46>
 8012242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012246:	059a      	lsls	r2, r3, #22
 8012248:	d4ee      	bmi.n	8012228 <__smakebuf_r+0x18>
 801224a:	f023 0303 	bic.w	r3, r3, #3
 801224e:	f043 0302 	orr.w	r3, r3, #2
 8012252:	81a3      	strh	r3, [r4, #12]
 8012254:	e7e2      	b.n	801221c <__smakebuf_r+0xc>
 8012256:	89a3      	ldrh	r3, [r4, #12]
 8012258:	6020      	str	r0, [r4, #0]
 801225a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801225e:	81a3      	strh	r3, [r4, #12]
 8012260:	9b01      	ldr	r3, [sp, #4]
 8012262:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012266:	b15b      	cbz	r3, 8012280 <__smakebuf_r+0x70>
 8012268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801226c:	4630      	mov	r0, r6
 801226e:	f000 f81d 	bl	80122ac <_isatty_r>
 8012272:	b128      	cbz	r0, 8012280 <__smakebuf_r+0x70>
 8012274:	89a3      	ldrh	r3, [r4, #12]
 8012276:	f023 0303 	bic.w	r3, r3, #3
 801227a:	f043 0301 	orr.w	r3, r3, #1
 801227e:	81a3      	strh	r3, [r4, #12]
 8012280:	89a3      	ldrh	r3, [r4, #12]
 8012282:	431d      	orrs	r5, r3
 8012284:	81a5      	strh	r5, [r4, #12]
 8012286:	e7cf      	b.n	8012228 <__smakebuf_r+0x18>

08012288 <_fstat_r>:
 8012288:	b538      	push	{r3, r4, r5, lr}
 801228a:	4d07      	ldr	r5, [pc, #28]	@ (80122a8 <_fstat_r+0x20>)
 801228c:	2300      	movs	r3, #0
 801228e:	4604      	mov	r4, r0
 8012290:	4608      	mov	r0, r1
 8012292:	4611      	mov	r1, r2
 8012294:	602b      	str	r3, [r5, #0]
 8012296:	f7f3 fc01 	bl	8005a9c <_fstat>
 801229a:	1c43      	adds	r3, r0, #1
 801229c:	d102      	bne.n	80122a4 <_fstat_r+0x1c>
 801229e:	682b      	ldr	r3, [r5, #0]
 80122a0:	b103      	cbz	r3, 80122a4 <_fstat_r+0x1c>
 80122a2:	6023      	str	r3, [r4, #0]
 80122a4:	bd38      	pop	{r3, r4, r5, pc}
 80122a6:	bf00      	nop
 80122a8:	200006fc 	.word	0x200006fc

080122ac <_isatty_r>:
 80122ac:	b538      	push	{r3, r4, r5, lr}
 80122ae:	4d06      	ldr	r5, [pc, #24]	@ (80122c8 <_isatty_r+0x1c>)
 80122b0:	2300      	movs	r3, #0
 80122b2:	4604      	mov	r4, r0
 80122b4:	4608      	mov	r0, r1
 80122b6:	602b      	str	r3, [r5, #0]
 80122b8:	f7f3 fc00 	bl	8005abc <_isatty>
 80122bc:	1c43      	adds	r3, r0, #1
 80122be:	d102      	bne.n	80122c6 <_isatty_r+0x1a>
 80122c0:	682b      	ldr	r3, [r5, #0]
 80122c2:	b103      	cbz	r3, 80122c6 <_isatty_r+0x1a>
 80122c4:	6023      	str	r3, [r4, #0]
 80122c6:	bd38      	pop	{r3, r4, r5, pc}
 80122c8:	200006fc 	.word	0x200006fc

080122cc <_malloc_usable_size_r>:
 80122cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122d0:	1f18      	subs	r0, r3, #4
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	bfbc      	itt	lt
 80122d6:	580b      	ldrlt	r3, [r1, r0]
 80122d8:	18c0      	addlt	r0, r0, r3
 80122da:	4770      	bx	lr

080122dc <_init>:
 80122dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122de:	bf00      	nop
 80122e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122e2:	bc08      	pop	{r3}
 80122e4:	469e      	mov	lr, r3
 80122e6:	4770      	bx	lr

080122e8 <_fini>:
 80122e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ea:	bf00      	nop
 80122ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122ee:	bc08      	pop	{r3}
 80122f0:	469e      	mov	lr, r3
 80122f2:	4770      	bx	lr
