
STM32G4_GY91_Cyphal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000128c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000155c  08012aa8  08012aa8  00022aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014004  08014004  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  08014004  08014004  00024004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801400c  0801400c  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801400c  0801400c  0002400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0801401c  0801401c  0002401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0801402c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  200001d8  08014200  000301d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  08014200  00030708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d843  00000000  00000000  00030247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000771a  00000000  00000000  0006da8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fb8  00000000  00000000  000751a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018a6  00000000  00000000  00077160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e8ab  00000000  00000000  00078a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a421  00000000  00000000  000a72b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112278  00000000  00000000  000d16d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009dd0  00000000  00000000  001e394c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001ed71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012a90 	.word	0x08012a90

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	08012a90 	.word	0x08012a90

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	080134d4 	.word	0x080134d4

08001060 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	080134d4 	.word	0x080134d4

08001080 <_ZN15Adafruit_SensorD0Ev>:
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe9 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 800108e:	2108      	movs	r1, #8
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f00d f8da 	bl	800e24a <_ZdlPvj>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZN3imu10QuaternionC1Edddd>:
class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}

    Quaternion(double w, double x, double y, double z):
 80010b8:	b480      	push	{r7}
 80010ba:	b08b      	sub	sp, #44	; 0x2c
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6278      	str	r0, [r7, #36]	; 0x24
 80010c0:	ed87 0b06 	vstr	d0, [r7, #24]
 80010c4:	ed87 1b04 	vstr	d1, [r7, #16]
 80010c8:	ed87 2b02 	vstr	d2, [r7, #8]
 80010cc:	ed87 3b00 	vstr	d3, [r7]
        _w(w), _x(x), _y(y), _z(z) {}
 80010d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010d6:	e9c1 2300 	strd	r2, r3, [r1]
 80010da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80010e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010ea:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80010ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	4618      	mov	r0, r3
 80010fc:	372c      	adds	r7, #44	; 0x2c
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	4613      	mov	r3, r2
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff91 	bl	8001040 <_ZN15Adafruit_SensorC1Ev>
 800111e:	4a07      	ldr	r2, [pc, #28]	; (800113c <_ZN15Adafruit_BNO055C1Elh+0x34>)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	609a      	str	r2, [r3, #8]
  _address = address;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	79fa      	ldrb	r2, [r7, #7]
 800112e:	715a      	strb	r2, [r3, #5]
}
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	080134b8 	.word	0x080134b8

08001140 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
/*!
    @brief  Sets up the HW
*/
/**************************************************************************/
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
#ifdef ESP8266
  Wire.setClockStretchLimit(1000); // Allow for 1000us of clock stretching
#endif

  /* Make sure we have the right device */
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
 800114c:	2100      	movs	r1, #0
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fb82 	bl	8001858 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 8001154:	4603      	mov	r3, r0
 8001156:	73fb      	strb	r3, [r7, #15]
  if(id != BNO055_ID)
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	2ba0      	cmp	r3, #160	; 0xa0
 800115c:	d00e      	beq.n	800117c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3c>
  {
    delay(1000); // hold on for boot
 800115e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001162:	f001 f990 	bl	8002486 <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
 8001166:	2100      	movs	r1, #0
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fb75 	bl	8001858 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
    if(id != BNO055_ID) {
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	2ba0      	cmp	r3, #160	; 0xa0
 8001176:	d001      	beq.n	800117c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3c>
      return false;  // still not? ok bail
 8001178:	2300      	movs	r3, #0
 800117a:	e04b      	b.n	8001214 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xd4>
    }
  }

  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);
 800117c:	2100      	movs	r1, #0
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f84c 	bl	800121c <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
 8001184:	2220      	movs	r2, #32
 8001186:	213f      	movs	r1, #63	; 0x3f
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 fb52 	bl	8001832 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(1000);
 800118e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001192:	f001 f978 	bl	8002486 <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
 8001196:	e002      	b.n	800119e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x5e>
  {
    delay(10);
 8001198:	200a      	movs	r0, #10
 800119a:	f001 f974 	bl	8002486 <delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID)
 800119e:	2100      	movs	r1, #0
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 fb59 	bl	8001858 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2ba0      	cmp	r3, #160	; 0xa0
 80011aa:	bf14      	ite	ne
 80011ac:	2301      	movne	r3, #1
 80011ae:	2300      	moveq	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
  }
  delay(50);
 80011b6:	2032      	movs	r0, #50	; 0x32
 80011b8:	f001 f965 	bl	8002486 <delay>

  /* Set to normal power mode */
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
 80011bc:	2200      	movs	r2, #0
 80011be:	213e      	movs	r1, #62	; 0x3e
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 fb36 	bl	8001832 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(50);
 80011c6:	2032      	movs	r0, #50	; 0x32
 80011c8:	f001 f95d 	bl	8002486 <delay>

  write8(BNO055_PAGE_ID_ADDR, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2107      	movs	r1, #7
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 fb2e 	bl	8001832 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(50);
 80011d6:	2032      	movs	r0, #50	; 0x32
 80011d8:	f001 f955 	bl	8002486 <delay>

  /* Set the output units */
  
  uint8_t unitsel = (0 << 7) | // Orientation
 80011dc:	2306      	movs	r3, #6
 80011de:	73bb      	strb	r3, [r7, #14]
                    (0 << 4) | // Temperature = Celsius
                    (1 << 2) | // Euler 
                    (1 << 1) | // Gyro = Rads
                    (0 << 0);  // Accelerometer = m/s^2
  write8(BNO055_UNIT_SEL_ADDR, unitsel);
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	461a      	mov	r2, r3
 80011e4:	213b      	movs	r1, #59	; 0x3b
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 fb23 	bl	8001832 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(50);
 80011ec:	2032      	movs	r0, #50	; 0x32
 80011ee:	f001 f94a 	bl	8002486 <delay>
  delay(10);
  write8(BNO055_AXIS_MAP_SIGN_ADDR, REMAP_SIGN_P2); // P0-P7, Default is P1
  delay(10);
  */

  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	213f      	movs	r1, #63	; 0x3f
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fb1b 	bl	8001832 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(50);
 80011fc:	2032      	movs	r0, #50	; 0x32
 80011fe:	f001 f942 	bl	8002486 <delay>
  /* Set the requested operating mode (see section 3.3) */
  setMode(mode);
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f808 	bl	800121c <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(50);
 800120c:	2032      	movs	r0, #50	; 0x32
 800120e:	f001 f93a 	bl	8002486 <delay>

  return true;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
/*!
    @brief  Puts the chip in the specified operating mode
*/
/**************************************************************************/
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
  _mode = mode;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	78fa      	ldrb	r2, [r7, #3]
 800122c:	731a      	strb	r2, [r3, #12]
  write8(BNO055_OPR_MODE_ADDR, _mode);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7b1b      	ldrb	r3, [r3, #12]
 8001232:	461a      	mov	r2, r3
 8001234:	213d      	movs	r1, #61	; 0x3d
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 fafb 	bl	8001832 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
 800123c:	201e      	movs	r0, #30
 800123e:	f001 f922 	bl	8002486 <delay>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 800124c:	b5b0      	push	{r4, r5, r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	4613      	mov	r3, r2
 8001258:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 fb52 	bl	8001904 <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2206      	movs	r2, #6
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f00e f8ca 	bl	800f402 <memset>

  int16_t x, y, z;
  x = y = z = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	83fb      	strh	r3, [r7, #30]
 8001272:	8bfb      	ldrh	r3, [r7, #30]
 8001274:	83bb      	strh	r3, [r7, #28]
 8001276:	8bbb      	ldrh	r3, [r7, #28]
 8001278:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 800127a:	f107 0214 	add.w	r2, r7, #20
 800127e:	79f9      	ldrb	r1, [r7, #7]
 8001280:	2306      	movs	r3, #6
 8001282:	68b8      	ldr	r0, [r7, #8]
 8001284:	f000 fafb 	bl	800187e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 8001288:	7d3b      	ldrb	r3, [r7, #20]
 800128a:	b21a      	sxth	r2, r3
 800128c:	7d7b      	ldrb	r3, [r7, #21]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 8001296:	7dbb      	ldrb	r3, [r7, #22]
 8001298:	b21a      	sxth	r2, r3
 800129a:	7dfb      	ldrb	r3, [r7, #23]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 80012a4:	7e3b      	ldrb	r3, [r7, #24]
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	7e7b      	ldrb	r3, [r7, #25]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	3b08      	subs	r3, #8
 80012b6:	2b26      	cmp	r3, #38	; 0x26
 80012b8:	f200 8152 	bhi.w	8001560 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080014e1 	.word	0x080014e1
 80012c8:	08001561 	.word	0x08001561
 80012cc:	08001561 	.word	0x08001561
 80012d0:	08001561 	.word	0x08001561
 80012d4:	08001561 	.word	0x08001561
 80012d8:	08001561 	.word	0x08001561
 80012dc:	08001361 	.word	0x08001361
 80012e0:	08001561 	.word	0x08001561
 80012e4:	08001561 	.word	0x08001561
 80012e8:	08001561 	.word	0x08001561
 80012ec:	08001561 	.word	0x08001561
 80012f0:	08001561 	.word	0x08001561
 80012f4:	080013e1 	.word	0x080013e1
 80012f8:	08001561 	.word	0x08001561
 80012fc:	08001561 	.word	0x08001561
 8001300:	08001561 	.word	0x08001561
 8001304:	08001561 	.word	0x08001561
 8001308:	08001561 	.word	0x08001561
 800130c:	08001461 	.word	0x08001461
 8001310:	08001561 	.word	0x08001561
 8001314:	08001561 	.word	0x08001561
 8001318:	08001561 	.word	0x08001561
 800131c:	08001561 	.word	0x08001561
 8001320:	08001561 	.word	0x08001561
 8001324:	08001561 	.word	0x08001561
 8001328:	08001561 	.word	0x08001561
 800132c:	08001561 	.word	0x08001561
 8001330:	08001561 	.word	0x08001561
 8001334:	08001561 	.word	0x08001561
 8001338:	08001561 	.word	0x08001561
 800133c:	08001561 	.word	0x08001561
 8001340:	08001561 	.word	0x08001561
 8001344:	080014e1 	.word	0x080014e1
 8001348:	08001561 	.word	0x08001561
 800134c:	08001561 	.word	0x08001561
 8001350:	08001561 	.word	0x08001561
 8001354:	08001561 	.word	0x08001561
 8001358:	08001561 	.word	0x08001561
 800135c:	080014e1 	.word	0x080014e1
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 8001360:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f905 	bl	8000574 <__aeabi_i2d>
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4b7f      	ldr	r3, [pc, #508]	; (800156c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001370:	f7ff fa94 	bl	800089c <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4614      	mov	r4, r2
 800137a:	461d      	mov	r5, r3
 800137c:	2100      	movs	r1, #0
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 facf 	bl	8001922 <_ZN3imu6VectorILh3EEixEi>
 8001384:	4603      	mov	r3, r0
 8001386:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 800138a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f8f0 	bl	8000574 <__aeabi_i2d>
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	4b74      	ldr	r3, [pc, #464]	; (800156c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800139a:	f7ff fa7f 	bl	800089c <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4614      	mov	r4, r2
 80013a4:	461d      	mov	r5, r3
 80013a6:	2101      	movs	r1, #1
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 faba 	bl	8001922 <_ZN3imu6VectorILh3EEixEi>
 80013ae:	4603      	mov	r3, r0
 80013b0:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 80013b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8db 	bl	8000574 <__aeabi_i2d>
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	4b6a      	ldr	r3, [pc, #424]	; (800156c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 80013c4:	f7ff fa6a 	bl	800089c <__aeabi_ddiv>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4614      	mov	r4, r2
 80013ce:	461d      	mov	r5, r3
 80013d0:	2102      	movs	r1, #2
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 faa5 	bl	8001922 <_ZN3imu6VectorILh3EEixEi>
 80013d8:	4603      	mov	r3, r0
 80013da:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80013de:	e0bf      	b.n	8001560 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 80013e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f8c5 	bl	8000574 <__aeabi_i2d>
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	4b60      	ldr	r3, [pc, #384]	; (8001570 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80013f0:	f7ff fa54 	bl	800089c <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4614      	mov	r4, r2
 80013fa:	461d      	mov	r5, r3
 80013fc:	2100      	movs	r1, #0
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 fa8f 	bl	8001922 <_ZN3imu6VectorILh3EEixEi>
 8001404:	4603      	mov	r3, r0
 8001406:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 800140a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f8b0 	bl	8000574 <__aeabi_i2d>
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b55      	ldr	r3, [pc, #340]	; (8001570 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800141a:	f7ff fa3f 	bl	800089c <__aeabi_ddiv>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4614      	mov	r4, r2
 8001424:	461d      	mov	r5, r3
 8001426:	2101      	movs	r1, #1
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f000 fa7a 	bl	8001922 <_ZN3imu6VectorILh3EEixEi>
 800142e:	4603      	mov	r3, r0
 8001430:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 8001434:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f89b 	bl	8000574 <__aeabi_i2d>
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001444:	f7ff fa2a 	bl	800089c <__aeabi_ddiv>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4614      	mov	r4, r2
 800144e:	461d      	mov	r5, r3
 8001450:	2102      	movs	r1, #2
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 fa65 	bl	8001922 <_ZN3imu6VectorILh3EEixEi>
 8001458:	4603      	mov	r3, r0
 800145a:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 800145e:	e07f      	b.n	8001560 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001460:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f885 	bl	8000574 <__aeabi_i2d>
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	4b40      	ldr	r3, [pc, #256]	; (8001570 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001470:	f7ff fa14 	bl	800089c <__aeabi_ddiv>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4614      	mov	r4, r2
 800147a:	461d      	mov	r5, r3
 800147c:	2100      	movs	r1, #0
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 fa4f 	bl	8001922 <_ZN3imu6VectorILh3EEixEi>
 8001484:	4603      	mov	r3, r0
 8001486:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 800148a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f870 	bl	8000574 <__aeabi_i2d>
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	4b35      	ldr	r3, [pc, #212]	; (8001570 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800149a:	f7ff f9ff 	bl	800089c <__aeabi_ddiv>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4614      	mov	r4, r2
 80014a4:	461d      	mov	r5, r3
 80014a6:	2101      	movs	r1, #1
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 fa3a 	bl	8001922 <_ZN3imu6VectorILh3EEixEi>
 80014ae:	4603      	mov	r3, r0
 80014b0:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80014b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85b 	bl	8000574 <__aeabi_i2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80014c4:	f7ff f9ea 	bl	800089c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4614      	mov	r4, r2
 80014ce:	461d      	mov	r5, r3
 80014d0:	2102      	movs	r1, #2
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 fa25 	bl	8001922 <_ZN3imu6VectorILh3EEixEi>
 80014d8:	4603      	mov	r3, r0
 80014da:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80014de:	e03f      	b.n	8001560 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 80014e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f845 	bl	8000574 <__aeabi_i2d>
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80014f0:	f7ff f9d4 	bl	800089c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4614      	mov	r4, r2
 80014fa:	461d      	mov	r5, r3
 80014fc:	2100      	movs	r1, #0
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 fa0f 	bl	8001922 <_ZN3imu6VectorILh3EEixEi>
 8001504:	4603      	mov	r3, r0
 8001506:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 800150a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f830 	bl	8000574 <__aeabi_i2d>
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 800151a:	f7ff f9bf 	bl	800089c <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4614      	mov	r4, r2
 8001524:	461d      	mov	r5, r3
 8001526:	2101      	movs	r1, #1
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f9fa 	bl	8001922 <_ZN3imu6VectorILh3EEixEi>
 800152e:	4603      	mov	r3, r0
 8001530:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 8001534:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f81b 	bl	8000574 <__aeabi_i2d>
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001544:	f7ff f9aa 	bl	800089c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4614      	mov	r4, r2
 800154e:	461d      	mov	r5, r3
 8001550:	2102      	movs	r1, #2
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 f9e5 	bl	8001922 <_ZN3imu6VectorILh3EEixEi>
 8001558:	4603      	mov	r3, r0
 800155a:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 800155e:	bf00      	nop
  }

  return xyz;
 8001560:	bf00      	nop
}
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bdb0      	pop	{r4, r5, r7, pc}
 800156a:	bf00      	nop
 800156c:	40300000 	.word	0x40300000
 8001570:	408c2000 	.word	0x408c2000
 8001574:	40590000 	.word	0x40590000

08001578 <_ZN15Adafruit_BNO0557getQuatEv>:
/*!
    @brief  Gets a quaternion reading from the specified source
*/
/**************************************************************************/
imu::Quaternion Adafruit_BNO055::getQuat(void)
{
 8001578:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800157c:	ed2d 8b06 	vpush	{d8-d10}
 8001580:	b0a0      	sub	sp, #128	; 0x80
 8001582:	af00      	add	r7, sp, #0
 8001584:	6278      	str	r0, [r7, #36]	; 0x24
  uint8_t buffer[8];
  memset (buffer, 0, 8);
 8001586:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800158a:	2208      	movs	r2, #8
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f00d ff37 	bl	800f402 <memset>

  int16_t x, y, z, w;
  x = y = z = w = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800159a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800159e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80015a2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80015a6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80015aa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80015ae:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

  /* Read quat data (8 bytes) */
  readLen(BNO055_QUATERNION_DATA_W_LSB_ADDR, buffer, 8);
 80015b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80015b6:	2308      	movs	r3, #8
 80015b8:	2120      	movs	r1, #32
 80015ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015bc:	f000 f95f 	bl	800187e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>
  w = (((uint16_t)buffer[1]) << 8) | ((uint16_t)buffer[0]);
 80015c0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
  x = (((uint16_t)buffer[3]) << 8) | ((uint16_t)buffer[2]);
 80015d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b21a      	sxth	r2, r3
 80015dc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  y = (((uint16_t)buffer[5]) << 8) | ((uint16_t)buffer[4]);
 80015e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
  z = (((uint16_t)buffer[7]) << 8) | ((uint16_t)buffer[6]);
 80015fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21a      	sxth	r2, r3
 8001604:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001608:	b21b      	sxth	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

  /* Assign to Quaternion */
  /* See http://ae-bst.resource.bosch.com/media/products/dokumente/bno055/BST_BNO055_DS000_12~1.pdf
     3.6.5.5 Orientation (Quaternion)  */
  const double scale = (1.0 / (1<<14));
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	4b3f      	ldr	r3, [pc, #252]	; (8001714 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 8001616:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  imu::Quaternion quat(scale * w, scale * x, scale * y, scale * z);
 800161a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ffa8 	bl	8000574 <__aeabi_i2d>
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 800162a:	f7ff f80d 	bl	8000648 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	ec43 2b18 	vmov	d8, r2, r3
 8001636:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff9a 	bl	8000574 <__aeabi_i2d>
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	4b33      	ldr	r3, [pc, #204]	; (8001714 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 8001646:	f7fe ffff 	bl	8000648 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	ec43 2b19 	vmov	d9, r2, r3
 8001652:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff8c 	bl	8000574 <__aeabi_i2d>
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 8001662:	f7fe fff1 	bl	8000648 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	ec43 2b1a 	vmov	d10, r2, r3
 800166e:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff7e 	bl	8000574 <__aeabi_i2d>
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <_ZN15Adafruit_BNO0557getQuatEv+0x19c>)
 800167e:	f7fe ffe3 	bl	8000648 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	ec43 2b17 	vmov	d7, r2, r3
 800168a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800168e:	eeb0 3a47 	vmov.f32	s6, s14
 8001692:	eef0 3a67 	vmov.f32	s7, s15
 8001696:	eeb0 2a4a 	vmov.f32	s4, s20
 800169a:	eef0 2a6a 	vmov.f32	s5, s21
 800169e:	eeb0 1a49 	vmov.f32	s2, s18
 80016a2:	eef0 1a69 	vmov.f32	s3, s19
 80016a6:	eeb0 0a48 	vmov.f32	s0, s16
 80016aa:	eef0 0a68 	vmov.f32	s1, s17
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fd02 	bl	80010b8 <_ZN3imu10QuaternionC1Edddd>
  return quat;
 80016b4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80016b8:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80016bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016c8:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80016cc:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80016d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80016d8:	ec49 8b14 	vmov	d4, r8, r9
 80016dc:	ec45 4b15 	vmov	d5, r4, r5
 80016e0:	ec41 0b16 	vmov	d6, r0, r1
 80016e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80016e8:	eeb0 0a44 	vmov.f32	s0, s8
 80016ec:	eef0 0a64 	vmov.f32	s1, s9
 80016f0:	eeb0 1a45 	vmov.f32	s2, s10
 80016f4:	eef0 1a65 	vmov.f32	s3, s11
 80016f8:	eeb0 2a46 	vmov.f32	s4, s12
 80016fc:	eef0 2a66 	vmov.f32	s5, s13
 8001700:	eeb0 3a47 	vmov.f32	s6, s14
 8001704:	eef0 3a67 	vmov.f32	s7, s15
 8001708:	3780      	adds	r7, #128	; 0x80
 800170a:	46bd      	mov	sp, r7
 800170c:	ecbd 8b06 	vpop	{d8-d10}
 8001710:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001714:	3f100000 	.word	0x3f100000

08001718 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8001722:	2228      	movs	r2, #40	; 0x28
 8001724:	2100      	movs	r1, #0
 8001726:	6838      	ldr	r0, [r7, #0]
 8001728:	f00d fe6b 	bl	800f402 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	220b      	movs	r2, #11
 8001730:	4911      	ldr	r1, [pc, #68]	; (8001778 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 8001732:	4618      	mov	r0, r3
 8001734:	f00d fe6d 	bl	800f412 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2203      	movs	r2, #3
 8001750:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2200      	movs	r2, #0
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->max_value   = 0.0F;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4a04      	ldr	r2, [pc, #16]	; (800177c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 800176c:	621a      	str	r2, [r3, #32]
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	08012aa8 	.word	0x08012aa8
 800177c:	3c23d70a 	.word	0x3c23d70a

08001780 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 800178a:	2224      	movs	r2, #36	; 0x24
 800178c:	2100      	movs	r1, #0
 800178e:	6838      	ldr	r0, [r7, #0]
 8001790:	f00d fe37 	bl	800f402 <memset>

  event->version   = sizeof(sensors_event_t);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	2224      	movs	r2, #36	; 0x24
 8001798:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2203      	movs	r2, #3
 80017a6:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 80017a8:	f004 fda8 	bl	80062fc <HAL_GetTick>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	221a      	movs	r2, #26
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fd45 	bl	800124c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f879 	bl	80018be <_ZN3imu6VectorILh3EE1xEv>
 80017cc:	4603      	mov	r3, r0
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff fa2f 	bl	8000c38 <__aeabi_d2f>
 80017da:	4602      	mov	r2, r0
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 f875 	bl	80018d4 <_ZN3imu6VectorILh3EE1yEv>
 80017ea:	4603      	mov	r3, r0
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff fa20 	bl	8000c38 <__aeabi_d2f>
 80017f8:	4602      	mov	r2, r0
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f872 	bl	80018ec <_ZN3imu6VectorILh3EE1zEv>
 8001808:	4603      	mov	r3, r0
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff fa11 	bl	8000c38 <__aeabi_d2f>
 8001816:	4602      	mov	r2, r0
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	61da      	str	r2, [r3, #28]

  return true;
 800181c:	2401      	movs	r4, #1
}
 800181e:	f107 0308 	add.w	r3, r7, #8
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f840 	bl	80018a8 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 8001828:	4623      	mov	r3, r4
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}

08001832 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
/*!
    @brief  Writes an 8 bit value over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	70fb      	strb	r3, [r7, #3]
 800183e:	4613      	mov	r3, r2
 8001840:	70bb      	strb	r3, [r7, #2]
  I2C_byte_transmit(reg, value);
 8001842:	78ba      	ldrb	r2, [r7, #2]
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fa31 	bl	8001cb0 <I2C_byte_transmit>
  /* ToDo: Check for error! */
  return true;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg )
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
  byte value = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
  
  value = I2C_byte_receive((uint8_t)reg);
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f9f6 	bl	8001c5c <I2C_byte_receive>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]

  return value;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	461a      	mov	r2, r3
 800188a:	460b      	mov	r3, r1
 800188c:	72fb      	strb	r3, [r7, #11]
 800188e:	4613      	mov	r3, r2
 8001890:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 8001892:	7aba      	ldrb	r2, [r7, #10]
 8001894:	7afb      	ldrb	r3, [r7, #11]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fa2b 	bl	8001cf4 <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    {
    }
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3308      	adds	r3, #8
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3310      	adds	r3, #16
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2218      	movs	r2, #24
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f00d fd75 	bl	800f402 <memset>
    }
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4413      	add	r3, r2
    }
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	4a05      	ldr	r2, [pc, #20]	; (8001960 <_ZN15Adafruit_BNO055D1Ev+0x20>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fb85 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	080134b8 	.word	0x080134b8

08001964 <_ZN15Adafruit_BNO055D0Ev>:
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ffe7 	bl	8001940 <_ZN15Adafruit_BNO055D1Ev>
 8001972:	2110      	movs	r1, #16
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f00c fc68 	bl	800e24a <_ZdlPvj>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZN3imu10QuaternionC1Ev>:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <_ZN3imu10QuaternionC1Ev+0x4c>)
 8001994:	e9c1 2300 	strd	r2, r3, [r1]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	3ff00000 	.word	0x3ff00000

080019d4 <_ZN3imu10Quaternion1wEv>:

    Quaternion(double w, Vector<3> vec):
        _w(w), _x(vec.x()), _y(vec.y()), _z(vec.z()) {}

    double& w()
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
    {
        return _w;
 80019dc:	687b      	ldr	r3, [r7, #4]
    }
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_ZN3imu10Quaternion1xEv>:
    double& x()
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
    {
        return _x;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3308      	adds	r3, #8
    }
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_ZN3imu10Quaternion1yEv>:
    double& y()
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
    {
        return _y;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3310      	adds	r3, #16
    }
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <_ZN3imu10Quaternion1zEv>:
    double& z()
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
    {
        return _z;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3318      	adds	r3, #24
    }
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <imu_get_quat>:

imu::Quaternion quat;
imu::Vector<3> vec;

void imu_get_quat(vec_4ax *vector)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if( BNO_conf == 1)
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <imu_get_quat+0xbc>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d150      	bne.n	8001ae6 <imu_get_quat+0xb2>
  {
    quat = bno.getQuat();
 8001a44:	482b      	ldr	r0, [pc, #172]	; (8001af4 <imu_get_quat+0xc0>)
 8001a46:	f7ff fd97 	bl	8001578 <_ZN15Adafruit_BNO0557getQuatEv>
 8001a4a:	eeb0 4a40 	vmov.f32	s8, s0
 8001a4e:	eef0 4a60 	vmov.f32	s9, s1
 8001a52:	eeb0 5a41 	vmov.f32	s10, s2
 8001a56:	eef0 5a61 	vmov.f32	s11, s3
 8001a5a:	eeb0 6a42 	vmov.f32	s12, s4
 8001a5e:	eef0 6a62 	vmov.f32	s13, s5
 8001a62:	eeb0 7a43 	vmov.f32	s14, s6
 8001a66:	eef0 7a63 	vmov.f32	s15, s7
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <imu_get_quat+0xc4>)
 8001a6c:	ed83 4b00 	vstr	d4, [r3]
 8001a70:	ed83 5b02 	vstr	d5, [r3, #8]
 8001a74:	ed83 6b04 	vstr	d6, [r3, #16]
 8001a78:	ed83 7b06 	vstr	d7, [r3, #24]
    vector->x = quat.x();
 8001a7c:	481e      	ldr	r0, [pc, #120]	; (8001af8 <imu_get_quat+0xc4>)
 8001a7e:	f7ff ffb4 	bl	80019ea <_ZN3imu10Quaternion1xEv>
 8001a82:	4603      	mov	r3, r0
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7ff f8d4 	bl	8000c38 <__aeabi_d2f>
 8001a90:	4602      	mov	r2, r0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	601a      	str	r2, [r3, #0]
    vector->y = quat.y();
 8001a96:	4818      	ldr	r0, [pc, #96]	; (8001af8 <imu_get_quat+0xc4>)
 8001a98:	f7ff ffb3 	bl	8001a02 <_ZN3imu10Quaternion1yEv>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f8c7 	bl	8000c38 <__aeabi_d2f>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	605a      	str	r2, [r3, #4]
    vector->z = quat.z();
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <imu_get_quat+0xc4>)
 8001ab2:	f7ff ffb2 	bl	8001a1a <_ZN3imu10Quaternion1zEv>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7ff f8ba 	bl	8000c38 <__aeabi_d2f>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
    vector->w = quat.w();
 8001aca:	480b      	ldr	r0, [pc, #44]	; (8001af8 <imu_get_quat+0xc4>)
 8001acc:	f7ff ff82 	bl	80019d4 <_ZN3imu10Quaternion1wEv>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f7ff f8ad 	bl	8000c38 <__aeabi_d2f>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]
  }
  return ;
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
}
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000204 	.word	0x20000204
 8001af4:	200001f4 	.word	0x200001f4
 8001af8:	20000208 	.word	0x20000208

08001afc <imu_get_linear>:

void imu_get_linear(vec_4ax *vector)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if( BNO_conf == 1)
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <imu_get_linear+0x8c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d139      	bne.n	8001b80 <imu_get_linear+0x84>
  {
    vec = bno.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	2228      	movs	r2, #40	; 0x28
 8001b12:	491e      	ldr	r1, [pc, #120]	; (8001b8c <imu_get_linear+0x90>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fb99 	bl	800124c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	4619      	mov	r1, r3
 8001b20:	481b      	ldr	r0, [pc, #108]	; (8001b90 <imu_get_linear+0x94>)
 8001b22:	f000 f913 	bl	8001d4c <_ZN3imu6VectorILh3EEaSERKS1_>
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff febc 	bl	80018a8 <_ZN3imu6VectorILh3EED1Ev>
    vector->x = vec.x();
 8001b30:	4817      	ldr	r0, [pc, #92]	; (8001b90 <imu_get_linear+0x94>)
 8001b32:	f7ff fec4 	bl	80018be <_ZN3imu6VectorILh3EE1xEv>
 8001b36:	4603      	mov	r3, r0
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7ff f87a 	bl	8000c38 <__aeabi_d2f>
 8001b44:	4602      	mov	r2, r0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
    vector->y = vec.y();
 8001b4a:	4811      	ldr	r0, [pc, #68]	; (8001b90 <imu_get_linear+0x94>)
 8001b4c:	f7ff fec2 	bl	80018d4 <_ZN3imu6VectorILh3EE1yEv>
 8001b50:	4603      	mov	r3, r0
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7ff f86d 	bl	8000c38 <__aeabi_d2f>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	605a      	str	r2, [r3, #4]
    vector->z = vec.z();
 8001b64:	480a      	ldr	r0, [pc, #40]	; (8001b90 <imu_get_linear+0x94>)
 8001b66:	f7ff fec1 	bl	80018ec <_ZN3imu6VectorILh3EE1zEv>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7ff f860 	bl	8000c38 <__aeabi_d2f>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
  }
  return ;
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
}
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000204 	.word	0x20000204
 8001b8c:	200001f4 	.word	0x200001f4
 8001b90:	20000228 	.word	0x20000228

08001b94 <imu_get_gyro>:

void imu_get_gyro(vec_4ax *vector)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if( BNO_conf == 1)
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <imu_get_gyro+0x8c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d139      	bne.n	8001c18 <imu_get_gyro+0x84>
  {
    vec = bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
 8001ba4:	f107 0308 	add.w	r3, r7, #8
 8001ba8:	2214      	movs	r2, #20
 8001baa:	491e      	ldr	r1, [pc, #120]	; (8001c24 <imu_get_gyro+0x90>)
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fb4d 	bl	800124c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481b      	ldr	r0, [pc, #108]	; (8001c28 <imu_get_gyro+0x94>)
 8001bba:	f000 f8c7 	bl	8001d4c <_ZN3imu6VectorILh3EEaSERKS1_>
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fe70 	bl	80018a8 <_ZN3imu6VectorILh3EED1Ev>
    vector->x = vec.x();
 8001bc8:	4817      	ldr	r0, [pc, #92]	; (8001c28 <imu_get_gyro+0x94>)
 8001bca:	f7ff fe78 	bl	80018be <_ZN3imu6VectorILh3EE1xEv>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7ff f82e 	bl	8000c38 <__aeabi_d2f>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	601a      	str	r2, [r3, #0]
    vector->y = vec.y();
 8001be2:	4811      	ldr	r0, [pc, #68]	; (8001c28 <imu_get_gyro+0x94>)
 8001be4:	f7ff fe76 	bl	80018d4 <_ZN3imu6VectorILh3EE1yEv>
 8001be8:	4603      	mov	r3, r0
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7ff f821 	bl	8000c38 <__aeabi_d2f>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	605a      	str	r2, [r3, #4]
    vector->z = vec.z();
 8001bfc:	480a      	ldr	r0, [pc, #40]	; (8001c28 <imu_get_gyro+0x94>)
 8001bfe:	f7ff fe75 	bl	80018ec <_ZN3imu6VectorILh3EE1zEv>
 8001c02:	4603      	mov	r3, r0
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7ff f814 	bl	8000c38 <__aeabi_d2f>
 8001c10:	4602      	mov	r2, r0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	609a      	str	r2, [r3, #8]
  }
  return ;
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
}
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000204 	.word	0x20000204
 8001c24:	200001f4 	.word	0x200001f4
 8001c28:	20000228 	.word	0x20000228

08001c2c <IMU_setup>:
  }
  return ;
}

void IMU_setup(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
//  HAL_Delay(5);
//  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_SET);
//  HAL_Delay(50);

  BNO_conf = 0;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <IMU_setup+0x28>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
  if(bno.begin())
 8001c36:	210c      	movs	r1, #12
 8001c38:	4807      	ldr	r0, [pc, #28]	; (8001c58 <IMU_setup+0x2c>)
 8001c3a:	f7ff fa81 	bl	8001140 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <IMU_setup+0x20>
  {
    BNO_conf = 1;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <IMU_setup+0x28>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    IMU_setup();
  }
  return ;
 8001c4a:	e002      	b.n	8001c52 <IMU_setup+0x26>
    IMU_setup();
 8001c4c:	f7ff ffee 	bl	8001c2c <IMU_setup>
  return ;
 8001c50:	bf00      	nop
}
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000204 	.word	0x20000204
 8001c58:	200001f4 	.word	0x200001f4

08001c5c <I2C_byte_receive>:
}

extern I2C_HandleTypeDef hi2c4;

uint8_t I2C_byte_receive(uint8_t address)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af04      	add	r7, sp, #16
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  uint8_t value = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73bb      	strb	r3, [r7, #14]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, &value, 1, 100);
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	2364      	movs	r3, #100	; 0x64
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	2301      	movs	r3, #1
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	f107 030e 	add.w	r3, r7, #14
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	2152      	movs	r1, #82	; 0x52
 8001c80:	480a      	ldr	r0, [pc, #40]	; (8001cac <I2C_byte_receive+0x50>)
 8001c82:	f005 feeb 	bl	8007a5c <HAL_I2C_Mem_Read>
 8001c86:	4603      	mov	r3, r0
 8001c88:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 8001c8a:	bf00      	nop
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <I2C_byte_receive+0x50>)
 8001c8e:	f006 f9a0 	bl	8007fd2 <HAL_I2C_GetState>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	bf14      	ite	ne
 8001c98:	2301      	movne	r3, #1
 8001c9a:	2300      	moveq	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f4      	bne.n	8001c8c <I2C_byte_receive+0x30>

  return value;
 8001ca2:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200002a4 	.word	0x200002a4

08001cb0 <I2C_byte_transmit>:

uint8_t I2C_byte_transmit(uint8_t address, uint8_t byte)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af04      	add	r7, sp, #16
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	460a      	mov	r2, r1
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c4, BNO055<<1, address, 1, &byte, 1, 100);
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	2364      	movs	r3, #100	; 0x64
 8001cc6:	9302      	str	r3, [sp, #8]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	1dbb      	adds	r3, r7, #6
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	2152      	movs	r1, #82	; 0x52
 8001cd4:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <I2C_byte_transmit+0x40>)
 8001cd6:	f005 fdad 	bl	8007834 <HAL_I2C_Mem_Write>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(1);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f004 fb18 	bl	8006314 <HAL_Delay>

  return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200002a4 	.word	0x200002a4

08001cf4 <I2C_n_byte_receive>:

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af04      	add	r7, sp, #16
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
 8001d00:	4613      	mov	r3, r2
 8001d02:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	79bb      	ldrb	r3, [r7, #6]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2164      	movs	r1, #100	; 0x64
 8001d0e:	9102      	str	r1, [sp, #8]
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2301      	movs	r3, #1
 8001d18:	2152      	movs	r1, #82	; 0x52
 8001d1a:	480b      	ldr	r0, [pc, #44]	; (8001d48 <I2C_n_byte_receive+0x54>)
 8001d1c:	f005 fe9e 	bl	8007a5c <HAL_I2C_Mem_Read>
 8001d20:	4603      	mov	r3, r0
 8001d22:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 8001d24:	bf00      	nop
 8001d26:	4808      	ldr	r0, [pc, #32]	; (8001d48 <I2C_n_byte_receive+0x54>)
 8001d28:	f006 f953 	bl	8007fd2 <HAL_I2C_GetState>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b20      	cmp	r3, #32
 8001d30:	bf14      	ite	ne
 8001d32:	2301      	movne	r3, #1
 8001d34:	2300      	moveq	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f4      	bne.n	8001d26 <I2C_n_byte_receive+0x32>

  return 0;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200002a4 	.word	0x200002a4

08001d4c <_ZN3imu6VectorILh3EEaSERKS1_>:
    Vector& operator=(const Vector& v)
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
        for (int x = 0; x < N; x++ )
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	e00e      	b.n	8001d7a <_ZN3imu6VectorILh3EEaSERKS1_+0x2e>
            p_vec[x] = v.p_vec[x];
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	68f9      	ldr	r1, [r7, #12]
 8001d6c:	00c9      	lsls	r1, r1, #3
 8001d6e:	4401      	add	r1, r0
 8001d70:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < N; x++ )
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3301      	adds	r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	dded      	ble.n	8001d5c <_ZN3imu6VectorILh3EEaSERKS1_+0x10>
        return *this;
 8001d80:	687b      	ldr	r3, [r7, #4]
    }
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d10f      	bne.n	8001dc0 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d10a      	bne.n	8001dc0 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 8001daa:	2229      	movs	r2, #41	; 0x29
 8001dac:	2137      	movs	r1, #55	; 0x37
 8001dae:	480d      	ldr	r0, [pc, #52]	; (8001de4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001db0:	f7ff f9aa 	bl	8001108 <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 8001db4:	480c      	ldr	r0, [pc, #48]	; (8001de8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001db6:	f7ff fde5 	bl	8001984 <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 8001dba:	480c      	ldr	r0, [pc, #48]	; (8001dec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001dbc:	f7ff fda2 	bl	8001904 <_ZN3imu6VectorILh3EEC1Ev>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10a      	bne.n	8001ddc <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d105      	bne.n	8001ddc <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001dd0:	4806      	ldr	r0, [pc, #24]	; (8001dec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001dd2:	f7ff fd69 	bl	80018a8 <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 8001dd6:	4803      	ldr	r0, [pc, #12]	; (8001de4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001dd8:	f7ff fdb2 	bl	8001940 <_ZN15Adafruit_BNO055D1Ev>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200001f4 	.word	0x200001f4
 8001de8:	20000208 	.word	0x20000208
 8001dec:	20000228 	.word	0x20000228

08001df0 <_GLOBAL__sub_I_bno>:
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f7ff ffc9 	bl	8001d90 <_Z41__static_initialization_and_destruction_0ii>
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_GLOBAL__sub_D_bno>:
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff ffc1 	bl	8001d90 <_Z41__static_initialization_and_destruction_0ii>
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e16:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_DMA_Init+0x60>)
 8001e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1a:	4a15      	ldr	r2, [pc, #84]	; (8001e70 <MX_DMA_Init+0x60>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6493      	str	r3, [r2, #72]	; 0x48
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <MX_DMA_Init+0x60>)
 8001e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <MX_DMA_Init+0x60>)
 8001e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e32:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <MX_DMA_Init+0x60>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6493      	str	r3, [r2, #72]	; 0x48
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <MX_DMA_Init+0x60>)
 8001e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	200b      	movs	r0, #11
 8001e4c:	f004 fb5f 	bl	800650e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e50:	200b      	movs	r0, #11
 8001e52:	f004 fb76 	bl	8006542 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	200c      	movs	r0, #12
 8001e5c:	f004 fb57 	bl	800650e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e60:	200c      	movs	r0, #12
 8001e62:	f004 fb6e 	bl	8006542 <HAL_NVIC_EnableIRQ>

}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000

08001e74 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001e7a:	4a21      	ldr	r2, [pc, #132]	; (8001f00 <MX_FDCAN1_Init+0x8c>)
 8001e7c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001e86:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e8a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001eb2:	221d      	movs	r2, #29
 8001eb4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001eb8:	220a      	movs	r2, #10
 8001eba:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001eca:	2202      	movs	r2, #2
 8001ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001edc:	2203      	movs	r2, #3
 8001ede:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_FDCAN1_Init+0x88>)
 8001ee8:	f004 fdce 	bl	8006a88 <HAL_FDCAN_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001ef2:	f000 fad3 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000240 	.word	0x20000240
 8001f00:	40006400 	.word	0x40006400

08001f04 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b09e      	sub	sp, #120	; 0x78
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	2254      	movs	r2, #84	; 0x54
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f00d fa6c 	bl	800f402 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a20      	ldr	r2, [pc, #128]	; (8001fb0 <HAL_FDCAN_MspInit+0xac>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d138      	bne.n	8001fa6 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f3e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	4618      	mov	r0, r3
 8001f46:	f007 feb1 	bl	8009cac <HAL_RCCEx_PeriphCLKConfig>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001f50:	f000 faa4 	bl	800249c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <HAL_FDCAN_MspInit+0xb0>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <HAL_FDCAN_MspInit+0xb0>)
 8001f5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <HAL_FDCAN_MspInit+0xb0>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_FDCAN_MspInit+0xb0>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f70:	4a10      	ldr	r2, [pc, #64]	; (8001fb4 <HAL_FDCAN_MspInit+0xb0>)
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <HAL_FDCAN_MspInit+0xb0>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f88:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f96:	2309      	movs	r3, #9
 8001f98:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <HAL_FDCAN_MspInit+0xb4>)
 8001fa2:	f005 f9f7 	bl	8007394 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3778      	adds	r7, #120	; 0x78
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40006400 	.word	0x40006400
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	48000400 	.word	0x48000400

08001fbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
 8001fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd2:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	4a33      	ldr	r2, [pc, #204]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8001fd8:	f043 0320 	orr.w	r3, r3, #32
 8001fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fde:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	4a2d      	ldr	r2, [pc, #180]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff6:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002006:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200e:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <MX_GPIO_Init+0xe8>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201e:	4a21      	ldr	r2, [pc, #132]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002026:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <MX_GPIO_Init+0xe8>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	2120      	movs	r1, #32
 800204e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002052:	f005 fb21 	bl	8007698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	2104      	movs	r1, #4
 800205a:	4813      	ldr	r0, [pc, #76]	; (80020a8 <MX_GPIO_Init+0xec>)
 800205c:	f005 fb1c 	bl	8007698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8002060:	2320      	movs	r3, #32
 8002062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4619      	mov	r1, r3
 8002076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207a:	f005 f98b 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800207e:	2304      	movs	r3, #4
 8002080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002082:	2301      	movs	r3, #1
 8002084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4804      	ldr	r0, [pc, #16]	; (80020a8 <MX_GPIO_Init+0xec>)
 8002096:	f005 f97d 	bl	8007394 <HAL_GPIO_Init>

}
 800209a:	bf00      	nop
 800209c:	3728      	adds	r7, #40	; 0x28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	48000c00 	.word	0x48000c00

080020ac <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <MX_I2C4_Init+0x74>)
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <MX_I2C4_Init+0x78>)
 80020b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <MX_I2C4_Init+0x74>)
 80020b8:	4a1b      	ldr	r2, [pc, #108]	; (8002128 <MX_I2C4_Init+0x7c>)
 80020ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <MX_I2C4_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <MX_I2C4_Init+0x74>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <MX_I2C4_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <MX_I2C4_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <MX_I2C4_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <MX_I2C4_Init+0x74>)
 80020dc:	2200      	movs	r2, #0
 80020de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <MX_I2C4_Init+0x74>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80020e6:	480e      	ldr	r0, [pc, #56]	; (8002120 <MX_I2C4_Init+0x74>)
 80020e8:	f005 fb08 	bl	80076fc <HAL_I2C_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80020f2:	f000 f9d3 	bl	800249c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020f6:	2100      	movs	r1, #0
 80020f8:	4809      	ldr	r0, [pc, #36]	; (8002120 <MX_I2C4_Init+0x74>)
 80020fa:	f006 ff5d 	bl	8008fb8 <HAL_I2CEx_ConfigAnalogFilter>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002104:	f000 f9ca 	bl	800249c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002108:	2100      	movs	r1, #0
 800210a:	4805      	ldr	r0, [pc, #20]	; (8002120 <MX_I2C4_Init+0x74>)
 800210c:	f006 ff9f 	bl	800904e <HAL_I2CEx_ConfigDigitalFilter>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002116:	f000 f9c1 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200002a4 	.word	0x200002a4
 8002124:	40008400 	.word	0x40008400
 8002128:	00702991 	.word	0x00702991

0800212c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b0a0      	sub	sp, #128	; 0x80
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002144:	f107 0318 	add.w	r3, r7, #24
 8002148:	2254      	movs	r2, #84	; 0x54
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f00d f958 	bl	800f402 <memset>
  if(i2cHandle->Instance==I2C4)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a5e      	ldr	r2, [pc, #376]	; (80022d0 <HAL_I2C_MspInit+0x1a4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	f040 80b5 	bne.w	80022c8 <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800215e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002162:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002164:	2300      	movs	r3, #0
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002168:	f107 0318 	add.w	r3, r7, #24
 800216c:	4618      	mov	r0, r3
 800216e:	f007 fd9d 	bl	8009cac <HAL_RCCEx_PeriphCLKConfig>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002178:	f000 f990 	bl	800249c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217c:	4b55      	ldr	r3, [pc, #340]	; (80022d4 <HAL_I2C_MspInit+0x1a8>)
 800217e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002180:	4a54      	ldr	r2, [pc, #336]	; (80022d4 <HAL_I2C_MspInit+0x1a8>)
 8002182:	f043 0304 	orr.w	r3, r3, #4
 8002186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002188:	4b52      	ldr	r3, [pc, #328]	; (80022d4 <HAL_I2C_MspInit+0x1a8>)
 800218a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002194:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <HAL_I2C_MspInit+0x1a8>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002198:	4a4e      	ldr	r2, [pc, #312]	; (80022d4 <HAL_I2C_MspInit+0x1a8>)
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a0:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <HAL_I2C_MspInit+0x1a8>)
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021ac:	2340      	movs	r3, #64	; 0x40
 80021ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b0:	2312      	movs	r3, #18
 80021b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 80021bc:	2308      	movs	r3, #8
 80021be:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021c4:	4619      	mov	r1, r3
 80021c6:	4844      	ldr	r0, [pc, #272]	; (80022d8 <HAL_I2C_MspInit+0x1ac>)
 80021c8:	f005 f8e4 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d0:	2312      	movs	r3, #18
 80021d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80021dc:	2303      	movs	r3, #3
 80021de:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021e4:	4619      	mov	r1, r3
 80021e6:	483d      	ldr	r0, [pc, #244]	; (80022dc <HAL_I2C_MspInit+0x1b0>)
 80021e8:	f005 f8d4 	bl	8007394 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_I2C_MspInit+0x1a8>)
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <HAL_I2C_MspInit+0x1a8>)
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_I2C_MspInit+0x1a8>)
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 8002204:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_I2C_MspInit+0x1b4>)
 8002206:	4a37      	ldr	r2, [pc, #220]	; (80022e4 <HAL_I2C_MspInit+0x1b8>)
 8002208:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 800220a:	4b35      	ldr	r3, [pc, #212]	; (80022e0 <HAL_I2C_MspInit+0x1b4>)
 800220c:	2216      	movs	r2, #22
 800220e:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002210:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <HAL_I2C_MspInit+0x1b4>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002216:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <HAL_I2C_MspInit+0x1b4>)
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_I2C_MspInit+0x1b4>)
 800221e:	2280      	movs	r2, #128	; 0x80
 8002220:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002222:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <HAL_I2C_MspInit+0x1b4>)
 8002224:	2200      	movs	r2, #0
 8002226:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002228:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <HAL_I2C_MspInit+0x1b4>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 800222e:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <HAL_I2C_MspInit+0x1b4>)
 8002230:	2200      	movs	r2, #0
 8002232:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002234:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <HAL_I2C_MspInit+0x1b4>)
 8002236:	2200      	movs	r2, #0
 8002238:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 800223a:	4829      	ldr	r0, [pc, #164]	; (80022e0 <HAL_I2C_MspInit+0x1b4>)
 800223c:	f004 f99c 	bl	8006578 <HAL_DMA_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8002246:	f000 f929 	bl	800249c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <HAL_I2C_MspInit+0x1b4>)
 800224e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002250:	4a23      	ldr	r2, [pc, #140]	; (80022e0 <HAL_I2C_MspInit+0x1b4>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_I2C_MspInit+0x1bc>)
 8002258:	4a24      	ldr	r2, [pc, #144]	; (80022ec <HAL_I2C_MspInit+0x1c0>)
 800225a:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 800225c:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_I2C_MspInit+0x1bc>)
 800225e:	2217      	movs	r2, #23
 8002260:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002262:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <HAL_I2C_MspInit+0x1bc>)
 8002264:	2210      	movs	r2, #16
 8002266:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002268:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <HAL_I2C_MspInit+0x1bc>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800226e:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <HAL_I2C_MspInit+0x1bc>)
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002274:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <HAL_I2C_MspInit+0x1bc>)
 8002276:	2200      	movs	r2, #0
 8002278:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_I2C_MspInit+0x1bc>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_I2C_MspInit+0x1bc>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_I2C_MspInit+0x1bc>)
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 800228c:	4816      	ldr	r0, [pc, #88]	; (80022e8 <HAL_I2C_MspInit+0x1bc>)
 800228e:	f004 f973 	bl	8006578 <HAL_DMA_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 8002298:	f000 f900 	bl	800249c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <HAL_I2C_MspInit+0x1bc>)
 80022a0:	639a      	str	r2, [r3, #56]	; 0x38
 80022a2:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <HAL_I2C_MspInit+0x1bc>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2100      	movs	r1, #0
 80022ac:	2052      	movs	r0, #82	; 0x52
 80022ae:	f004 f92e 	bl	800650e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80022b2:	2052      	movs	r0, #82	; 0x52
 80022b4:	f004 f945 	bl	8006542 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80022b8:	2200      	movs	r2, #0
 80022ba:	2100      	movs	r1, #0
 80022bc:	2053      	movs	r0, #83	; 0x53
 80022be:	f004 f926 	bl	800650e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80022c2:	2053      	movs	r0, #83	; 0x53
 80022c4:	f004 f93d 	bl	8006542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80022c8:	bf00      	nop
 80022ca:	3780      	adds	r7, #128	; 0x80
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40008400 	.word	0x40008400
 80022d4:	40021000 	.word	0x40021000
 80022d8:	48000800 	.word	0x48000800
 80022dc:	48000400 	.word	0x48000400
 80022e0:	200002f8 	.word	0x200002f8
 80022e4:	40020008 	.word	0x40020008
 80022e8:	20000358 	.word	0x20000358
 80022ec:	4002001c 	.word	0x4002001c

080022f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b09b      	sub	sp, #108	; 0x6c
 80022f4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f6:	f003 ff9c 	bl	8006232 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022fa:	f000 f879 	bl	80023f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022fe:	f7ff fe5d 	bl	8001fbc <MX_GPIO_Init>
  MX_DMA_Init();
 8002302:	f7ff fd85 	bl	8001e10 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002306:	f7ff fdb5 	bl	8001e74 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 800230a:	f7ff fecf 	bl	80020ac <MX_I2C4_Init>
  MX_USART2_UART_Init();
 800230e:	f003 febb 	bl	8006088 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  cyphal_can_starter(&hfdcan1);
 8002312:	4835      	ldr	r0, [pc, #212]	; (80023e8 <main+0xf8>)
 8002314:	f001 fd7a 	bl	8003e0c <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 8002318:	4833      	ldr	r0, [pc, #204]	; (80023e8 <main+0xf8>)
 800231a:	f001 fd09 	bl	8003d30 <setup_cyphal>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t msg[10];
  int i = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	64bb      	str	r3, [r7, #72]	; 0x48
  //uint16_t addr9250=0xD0; //0x68<<1

  HAL_StatusTypeDef rv;


  uint32_t last_hbeat = HAL_GetTick();
 8002322:	f003 ffeb 	bl	80062fc <HAL_GetTick>
 8002326:	64f8      	str	r0, [r7, #76]	; 0x4c

  vec_4ax linear = {0};
 8002328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
  vec_4ax quat = {0};
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
  vec_4ax gyro = {0};
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	60da      	str	r2, [r3, #12]

  rv = HAL_I2C_IsDeviceReady(&hi2c4, 0x29, 1, 10);
 8002350:	230a      	movs	r3, #10
 8002352:	2201      	movs	r2, #1
 8002354:	2129      	movs	r1, #41	; 0x29
 8002356:	4825      	ldr	r0, [pc, #148]	; (80023ec <main+0xfc>)
 8002358:	f005 fc9a 	bl	8007c90 <HAL_I2C_IsDeviceReady>
 800235c:	4603      	mov	r3, r0
 800235e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  IMU_setup();
 8002362:	f7ff fc63 	bl	8001c2c <IMU_setup>

  while (1)
  {

      uint32_t now = HAL_GetTick();
 8002366:	f003 ffc9 	bl	80062fc <HAL_GetTick>
 800236a:	6438      	str	r0, [r7, #64]	; 0x40
      if ( (now - last_hbeat) >= 100) {
 800236c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800236e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b63      	cmp	r3, #99	; 0x63
 8002374:	d934      	bls.n	80023e0 <main+0xf0>
      	  imu_get_quat(&quat);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fb5a 	bl	8001a34 <imu_get_quat>
      	  imu_get_linear(&linear);
 8002380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fbb9 	bl	8001afc <imu_get_linear>
      	  imu_get_gyro(&gyro);
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fc01 	bl	8001b94 <imu_get_gyro>
          last_hbeat = now;
 8002392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002394:	64fb      	str	r3, [r7, #76]	; 0x4c
          heartbeat();
 8002396:	f001 fca5 	bl	8003ce4 <heartbeat>
          //sprintf(msg,"%d\n\0", q[1]);
          //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
          send_IMU(&quat.w, &quat.x, &quat.y, &quat.z, &linear.x, &linear.y, &linear.z, &gyro.x, &gyro.y, &gyro.z);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	f103 0408 	add.w	r4, r3, #8
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	1d1a      	adds	r2, r3, #4
 80023a8:	f107 0114 	add.w	r1, r7, #20
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	f103 000c 	add.w	r0, r3, #12
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	3308      	adds	r3, #8
 80023b8:	9305      	str	r3, [sp, #20]
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	3304      	adds	r3, #4
 80023be:	9304      	str	r3, [sp, #16]
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	9303      	str	r3, [sp, #12]
 80023c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c8:	3308      	adds	r3, #8
 80023ca:	9302      	str	r3, [sp, #8]
 80023cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d0:	3304      	adds	r3, #4
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	4623      	mov	r3, r4
 80023dc:	f001 fc26 	bl	8003c2c <send_IMU>
      }
      cyphal_loop();
 80023e0:	f001 fd06 	bl	8003df0 <cyphal_loop>
  {
 80023e4:	e7bf      	b.n	8002366 <main+0x76>
 80023e6:	bf00      	nop
 80023e8:	20000240 	.word	0x20000240
 80023ec:	200002a4 	.word	0x200002a4

080023f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b094      	sub	sp, #80	; 0x50
 80023f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023f6:	f107 0318 	add.w	r3, r7, #24
 80023fa:	2238      	movs	r2, #56	; 0x38
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f00c ffff 	bl	800f402 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	60da      	str	r2, [r3, #12]
 8002410:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002412:	2000      	movs	r0, #0
 8002414:	f006 fe68 	bl	80090e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002418:	2301      	movs	r3, #1
 800241a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800241c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002420:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002422:	2302      	movs	r3, #2
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002426:	2303      	movs	r3, #3
 8002428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800242a:	2301      	movs	r3, #1
 800242c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800242e:	2328      	movs	r3, #40	; 0x28
 8002430:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002432:	2302      	movs	r3, #2
 8002434:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002436:	2302      	movs	r3, #2
 8002438:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800243a:	2302      	movs	r3, #2
 800243c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800243e:	f107 0318 	add.w	r3, r7, #24
 8002442:	4618      	mov	r0, r3
 8002444:	f006 ff04 	bl	8009250 <HAL_RCC_OscConfig>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800244e:	f000 f825 	bl	800249c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002452:	230f      	movs	r3, #15
 8002454:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002456:	2303      	movs	r3, #3
 8002458:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800245e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002468:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2104      	movs	r1, #4
 800246e:	4618      	mov	r0, r3
 8002470:	f007 fa00 	bl	8009874 <HAL_RCC_ClockConfig>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800247a:	f000 f80f 	bl	800249c <Error_Handler>
  }
}
 800247e:	bf00      	nop
 8002480:	3750      	adds	r7, #80	; 0x50
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <delay>:

/* USER CODE BEGIN 4 */
void delay(uint32_t delay)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f003 ff40 	bl	8006314 <HAL_Delay>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a0:	b672      	cpsid	i
}
 80024a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <Error_Handler+0x8>

080024a6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bf0c      	ite	eq
 80024f6:	2301      	moveq	r3, #1
 80024f8:	2300      	movne	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d019      	beq.n	8002534 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3308      	adds	r3, #8
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	1e5a      	subs	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	bf0c      	ite	eq
 800251e:	2301      	moveq	r3, #1
 8002520:	2300      	movne	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	330c      	adds	r3, #12
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
        }
    }
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	2203      	movs	r2, #3
 8002582:	4798      	blx	r3
    }
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	bf0c      	ite	eq
 800259e:	2301      	moveq	r3, #1
 80025a0:	2300      	movne	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ffd4 	bl	8002568 <_ZNSt14_Function_baseD1Ev>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_ZNSt8functionIFvvEED1Ev>:
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ffc7 	bl	8002568 <_ZNSt14_Function_baseD1Ev>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 fcdf 	bl	8003fb8 <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3310      	adds	r3, #16
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4618      	mov	r0, r3
 8002602:	f001 fd04 	bl	800400e <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	4a06      	ldr	r2, [pc, #24]	; (8002638 <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	08013578 	.word	0x08013578

0800263c <_Z7alloc_fP14CanardInstancej>:
#include "cyphal/definitions.h"
#include "libcanard/canard.h"

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8002646:	480d      	ldr	r0, [pc, #52]	; (800267c <_Z7alloc_fP14CanardInstancej+0x40>)
 8002648:	f001 fd0c 	bl	8004064 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 800264c:	4603      	mov	r3, r0
 800264e:	f083 0301 	eor.w	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8002658:	2001      	movs	r0, #1
 800265a:	f00b fe3d 	bl	800e2d8 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 800265e:	4807      	ldr	r0, [pc, #28]	; (800267c <_Z7alloc_fP14CanardInstancej+0x40>)
 8002660:	f001 fd11 	bl	8004086 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8002664:	4603      	mov	r3, r0
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	6814      	ldr	r4, [r2, #0]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4618      	mov	r0, r3
 8002670:	47a0      	blx	r4
 8002672:	4603      	mov	r3, r0
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bd90      	pop	{r4, r7, pc}
 800267c:	200005b4 	.word	0x200005b4

08002680 <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 800268a:	480d      	ldr	r0, [pc, #52]	; (80026c0 <_Z6free_fP14CanardInstancePv+0x40>)
 800268c:	f001 fcea 	bl	8004064 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8002690:	4603      	mov	r3, r0
 8002692:	f083 0301 	eor.w	r3, r3, #1
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 800269c:	2001      	movs	r0, #1
 800269e:	f00b fe1b 	bl	800e2d8 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 80026a2:	4807      	ldr	r0, [pc, #28]	; (80026c0 <_Z6free_fP14CanardInstancePv+0x40>)
 80026a4:	f001 fcef 	bl	8004086 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 80026a8:	4603      	mov	r3, r0
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	3204      	adds	r2, #4
 80026ae:	6814      	ldr	r4, [r2, #0]
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4618      	mov	r0, r3
 80026b6:	47a0      	blx	r4
 80026b8:	bf00      	nop
}
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd90      	pop	{r4, r7, pc}
 80026c0:	200005b4 	.word	0x200005b4

080026c4 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;

    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
        WIRE_MTU(wire_mtu),
        CANARD_MTU(canard_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 80026d2:	4a0c      	ldr	r2, [pc, #48]	; (8002704 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	330c      	adds	r3, #12
 80026ec:	6839      	ldr	r1, [r7, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f00b fae6 	bl	800dcc0 <canardTxInit>
        utilities(utilities)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	63da      	str	r2, [r3, #60]	; 0x3c
    {};
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	0801355c 	.word	0x0801355c

08002708 <_ZN15CyphalInterfaceC1EhR13UtilityConfig>:

class CyphalInterface {
private:
    const CanardNodeID node_id;
    std::unique_ptr<AbstractCANProvider> provider;
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config) : node_id(node_id), utilities(config) {};
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	460b      	mov	r3, r1
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	72fb      	strb	r3, [r7, #11]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	7afa      	ldrb	r2, [r7, #11]
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3304      	adds	r3, #4
 8002720:	4618      	mov	r0, r3
 8002722:	f001 fce3 	bl	80040ec <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEv>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2248      	movs	r2, #72	; 0x48
 8002750:	2140      	movs	r1, #64	; 0x40
 8002752:	f7ff ffb7 	bl	80026c4 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	08013718 	.word	0x08013718

08002770 <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include "../allocator.h"

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ff44 	bl	8002610 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 8002788:	4a03      	ldr	r2, [pc, #12]	; (8002798 <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	080135fc 	.word	0x080135fc

0800279c <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d201      	bcs.n	80027b2 <nunavutChooseMin+0x16>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	e000      	b.n	80027b4 <nunavutChooseMin+0x18>
 80027b2:	683b      	ldr	r3, [r7, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	6978      	ldr	r0, [r7, #20]
 80027d6:	f7ff ffe1 	bl	800279c <nunavutChooseMin>
 80027da:	4602      	mov	r2, r0
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 80027e2:	6939      	ldr	r1, [r7, #16]
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ffd9 	bl	800279c <nunavutChooseMin>
 80027ea:	4603      	mov	r3, r0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b092      	sub	sp, #72	; 0x48
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 8002802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	2b00      	cmp	r3, #0
 800280a:	d145      	bne.n	8002898 <nunavutCopyBits+0xa4>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	2b00      	cmp	r3, #0
 8002814:	d140      	bne.n	8002898 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	08db      	lsrs	r3, r3, #3
 800281a:	63fb      	str	r3, [r7, #60]	; 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 800281c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281e:	08db      	lsrs	r3, r3, #3
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4413      	add	r3, r2
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4413      	add	r3, r2
 800282e:	637b      	str	r3, [r7, #52]	; 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8002830:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002832:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002834:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002836:	f00c fdca 	bl	800f3ce <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8002846:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 808a 	beq.w	8002964 <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8002850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002854:	4413      	add	r3, r2
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8002858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800285a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285c:	4413      	add	r3, r2
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8002860:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002864:	2201      	movs	r2, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800287a:	43db      	mvns	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	4013      	ands	r3, r2
 8002880:	b2da      	uxtb	r2, r3
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	7819      	ldrb	r1, [r3, #0]
 8002886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800288a:	400b      	ands	r3, r1
 800288c:	b2db      	uxtb	r3, r3
 800288e:	4313      	orrs	r3, r2
 8002890:	b2da      	uxtb	r2, r3
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	701a      	strb	r2, [r3, #0]
        }
    }
 8002896:	e065      	b.n	8002964 <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 80028a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a2:	647b      	str	r3, [r7, #68]	; 0x44
        size_t       dst_off  = dst_offset_bits;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t last_bit = src_off + length_bits;
 80028a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 80028b0:	e053      	b.n	800295a <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 80028b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 80028bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 80028c6:	7dfa      	ldrb	r2, [r7, #23]
 80028c8:	7dbb      	ldrb	r3, [r7, #22]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d901      	bls.n	80028d2 <nunavutCopyBits+0xde>
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	e000      	b.n	80028d4 <nunavutCopyBits+0xe0>
 80028d2:	7dbb      	ldrb	r3, [r7, #22]
 80028d4:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 80028d6:	7d7b      	ldrb	r3, [r7, #21]
 80028d8:	f1c3 0008 	rsb	r0, r3, #8
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	4619      	mov	r1, r3
 80028e4:	f7ff ff5a 	bl	800279c <nunavutChooseMin>
 80028e8:	4603      	mov	r3, r0
 80028ea:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 80028ec:	7d3b      	ldrb	r3, [r7, #20]
 80028ee:	2201      	movs	r2, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	1e5a      	subs	r2, r3, #1
 80028f6:	7dbb      	ldrb	r3, [r7, #22]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 80028fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002900:	08db      	lsrs	r3, r3, #3
 8002902:	6a3a      	ldr	r2, [r7, #32]
 8002904:	4413      	add	r3, r2
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	7dfb      	ldrb	r3, [r7, #23]
 800290c:	fa42 f303 	asr.w	r3, r2, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	7dbb      	ldrb	r3, [r7, #22]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 800291c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800291e:	08db      	lsrs	r3, r3, #3
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	7cfb      	ldrb	r3, [r7, #19]
 8002928:	43db      	mvns	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4013      	ands	r3, r2
 800292e:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8002930:	7cba      	ldrb	r2, [r7, #18]
 8002932:	7cfb      	ldrb	r3, [r7, #19]
 8002934:	4013      	ands	r3, r2
 8002936:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8002938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293a:	08db      	lsrs	r3, r3, #3
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	4413      	add	r3, r2
 8002940:	7c79      	ldrb	r1, [r7, #17]
 8002942:	7c3a      	ldrb	r2, [r7, #16]
 8002944:	430a      	orrs	r2, r1
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]
            src_off += size;
 800294a:	7d3b      	ldrb	r3, [r7, #20]
 800294c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800294e:	4413      	add	r3, r2
 8002950:	647b      	str	r3, [r7, #68]	; 0x44
            dst_off += size;
 8002952:	7d3b      	ldrb	r3, [r7, #20]
 8002954:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002956:	4413      	add	r3, r2
 8002958:	643b      	str	r3, [r7, #64]	; 0x40
        while (last_bit > src_off)
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800295e:	429a      	cmp	r2, r3
 8002960:	d8a7      	bhi.n	80028b2 <nunavutCopyBits+0xbe>
        }

    }
}
 8002962:	e000      	b.n	8002966 <nunavutCopyBits+0x172>
    }
 8002964:	bf00      	nop
}
 8002966:	bf00      	nop
 8002968:	3748      	adds	r7, #72	; 0x48
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b088      	sub	sp, #32
 8002972:	af02      	add	r7, sp, #8
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	00da      	lsls	r2, r3, #3
 800297e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	440b      	add	r3, r1
 8002986:	429a      	cmp	r2, r3
 8002988:	d202      	bcs.n	8002990 <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800298a:	f06f 0302 	mvn.w	r3, #2
 800298e:	e010      	b.n	80029b2 <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8002990:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002994:	2140      	movs	r1, #64	; 0x40
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff00 	bl	800279c <nunavutChooseMin>
 800299c:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 800299e:	2300      	movs	r3, #0
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	f107 0320 	add.w	r3, r7, #32
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7ff ff22 	bl	80027f4 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b088      	sub	sp, #32
 80029be:	af02      	add	r7, sp, #8
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	2120      	movs	r1, #32
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fee5 	bl	800279c <nunavutChooseMin>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461a      	mov	r2, r3
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	68b8      	ldr	r0, [r7, #8]
 80029da:	f7ff fef1 	bl	80027c0 <nunavutSaturateBufferFragmentBitLength>
 80029de:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 80029e4:	f107 0010 	add.w	r0, r7, #16
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	2100      	movs	r1, #0
 80029f2:	f7ff feff 	bl	80027f4 <nunavutCopyBits>
    return val;
 80029f6:	693b      	ldr	r3, [r7, #16]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff ffd1 	bl	80029ba <nunavutGetU32>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	ee07 3a90 	vmov	s15, r3
}
 8002a22:	eeb0 0a67 	vmov.f32	s0, s15
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08c      	sub	sp, #48	; 0x30
 8002a30:	af04      	add	r7, sp, #16
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <uavcan_node_Health_1_0_serialize_+0x1e>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <uavcan_node_Health_1_0_serialize_+0x1e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002a4a:	f06f 0301 	mvn.w	r3, #1
 8002a4e:	e048      	b.n	8002ae2 <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	2b07      	cmp	r3, #7
 8002a5c:	d802      	bhi.n	8002a64 <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002a5e:	f06f 0302 	mvn.w	r3, #2
 8002a62:	e03e      	b.n	8002ae2 <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8002a6e:	7efb      	ldrb	r3, [r7, #27]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d901      	bls.n	8002a78 <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 8002a74:	2303      	movs	r3, #3
 8002a76:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	08db      	lsrs	r3, r3, #3
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	4413      	add	r3, r2
 8002a80:	7efa      	ldrb	r2, [r7, #27]
 8002a82:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	3302      	adds	r3, #2
 8002a88:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d021      	beq.n	8002ad8 <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f1c3 0308 	rsb	r3, r3, #8
 8002aa2:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	9302      	str	r3, [sp, #8]
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9cd 2300 	strd	r2, r3, [sp]
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	6979      	ldr	r1, [r7, #20]
 8002ab8:	68b8      	ldr	r0, [r7, #8]
 8002aba:	f7ff ff58 	bl	800296e <nunavutSetUxx>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002ac2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	da02      	bge.n	8002ad0 <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002aca:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002ace:	e008      	b.n	8002ae2 <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	08da      	lsrs	r2, r3, #3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <uavcan_node_Health_1_0_deserialize_+0x26>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <uavcan_node_Health_1_0_deserialize_+0x26>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <uavcan_node_Health_1_0_deserialize_+0x2c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002b12:	f06f 0301 	mvn.w	r3, #1
 8002b16:	e030      	b.n	8002b7a <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002b1e:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <uavcan_node_Health_1_0_deserialize_+0x98>)
 8002b20:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3302      	adds	r3, #2
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d30a      	bcc.n	8002b52 <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	08db      	lsrs	r3, r3, #3
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e002      	b.n	8002b58 <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3307      	adds	r3, #7
 8002b62:	f023 0307 	bic.w	r3, r3, #7
 8002b66:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002b68:	69b9      	ldr	r1, [r7, #24]
 8002b6a:	6978      	ldr	r0, [r7, #20]
 8002b6c:	f7ff fe16 	bl	800279c <nunavutChooseMin>
 8002b70:	4603      	mov	r3, r0
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	080134e8 	.word	0x080134e8

08002b88 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08c      	sub	sp, #48	; 0x30
 8002b8c:	af04      	add	r7, sp, #16
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ba6:	f06f 0301 	mvn.w	r3, #1
 8002baa:	e048      	b.n	8002c3e <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	2b07      	cmp	r3, #7
 8002bb8:	d802      	bhi.n	8002bc0 <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002bba:	f06f 0302 	mvn.w	r3, #2
 8002bbe:	e03e      	b.n	8002c3e <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8002bca:	7efb      	ldrb	r3, [r7, #27]
 8002bcc:	2b07      	cmp	r3, #7
 8002bce:	d901      	bls.n	8002bd4 <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 8002bd0:	2307      	movs	r3, #7
 8002bd2:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08db      	lsrs	r3, r3, #3
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	4413      	add	r3, r2
 8002bdc:	7efa      	ldrb	r2, [r7, #27]
 8002bde:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	3303      	adds	r3, #3
 8002be4:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d021      	beq.n	8002c34 <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f1c3 0308 	rsb	r3, r3, #8
 8002bfe:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	9302      	str	r3, [sp, #8]
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	e9cd 2300 	strd	r2, r3, [sp]
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	6979      	ldr	r1, [r7, #20]
 8002c14:	68b8      	ldr	r0, [r7, #8]
 8002c16:	f7ff feaa 	bl	800296e <nunavutSetUxx>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002c1e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	da02      	bge.n	8002c2c <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002c26:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002c2a:	e008      	b.n	8002c3e <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	08da      	lsrs	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d006      	beq.n	8002c6e <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <uavcan_node_Mode_1_0_deserialize_+0x2c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002c6e:	f06f 0301 	mvn.w	r3, #1
 8002c72:	e030      	b.n	8002cd6 <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002c7a:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <uavcan_node_Mode_1_0_deserialize_+0x98>)
 8002c7c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	3303      	adds	r3, #3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d30a      	bcc.n	8002cae <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	08db      	lsrs	r3, r3, #3
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	701a      	strb	r2, [r3, #0]
 8002cac:	e002      	b.n	8002cb4 <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	3303      	adds	r3, #3
 8002cb8:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	3307      	adds	r3, #7
 8002cbe:	f023 0307 	bic.w	r3, r3, #7
 8002cc2:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002cc4:	69b9      	ldr	r1, [r7, #24]
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7ff fd68 	bl	800279c <nunavutChooseMin>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	08da      	lsrs	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	080134e8 	.word	0x080134e8

08002ce4 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08e      	sub	sp, #56	; 0x38
 8002ce8:	af04      	add	r7, sp, #16
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002d02:	f06f 0301 	mvn.w	r3, #1
 8002d06:	e0cf      	b.n	8002ea8 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	2b37      	cmp	r3, #55	; 0x37
 8002d14:	d802      	bhi.n	8002d1c <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002d16:	f06f 0302 	mvn.w	r3, #2
 8002d1a:	e0c5      	b.n	8002ea8 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	08db      	lsrs	r3, r3, #3
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	4413      	add	r3, r2
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	3320      	adds	r3, #32
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d021      	beq.n	8002d82 <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f1c3 0308 	rsb	r3, r3, #8
 8002d4c:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002d4e:	7ffb      	ldrb	r3, [r7, #31]
 8002d50:	9302      	str	r3, [sp, #8]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9cd 2300 	strd	r2, r3, [sp]
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d60:	6a39      	ldr	r1, [r7, #32]
 8002d62:	68b8      	ldr	r0, [r7, #8]
 8002d64:	f7ff fe03 	bl	800296e <nunavutSetUxx>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 8002d6c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	da02      	bge.n	8002d7a <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 8002d74:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002d78:	e096      	b.n	8002ea8 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 8002d7a:	7ffb      	ldrb	r3, [r7, #31]
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7e:	4413      	add	r3, r2
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8002d82:	2301      	movs	r3, #1
 8002d84:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	4413      	add	r3, r2
 8002d92:	f107 0214 	add.w	r2, r7, #20
 8002d96:	4619      	mov	r1, r3
 8002d98:	f7ff fe48 	bl	8002a2c <uavcan_node_Health_1_0_serialize_>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8002da0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	da02      	bge.n	8002dae <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 8002da8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002dac:	e07c      	b.n	8002ea8 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db4:	4413      	add	r3, r2
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d021      	beq.n	8002e06 <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f1c3 0308 	rsb	r3, r3, #8
 8002dd0:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002dd2:	7f3b      	ldrb	r3, [r7, #28]
 8002dd4:	9302      	str	r3, [sp, #8]
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9cd 2300 	strd	r2, r3, [sp]
 8002de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de4:	6a39      	ldr	r1, [r7, #32]
 8002de6:	68b8      	ldr	r0, [r7, #8]
 8002de8:	f7ff fdc1 	bl	800296e <nunavutSetUxx>
 8002dec:	4603      	mov	r3, r0
 8002dee:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 8002df0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	da02      	bge.n	8002dfe <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 8002df8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002dfc:	e054      	b.n	8002ea8 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 8002dfe:	7f3b      	ldrb	r3, [r7, #28]
 8002e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e02:	4413      	add	r3, r2
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8002e06:	2301      	movs	r3, #1
 8002e08:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	4413      	add	r3, r2
 8002e16:	f107 0210 	add.w	r2, r7, #16
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f7ff feb4 	bl	8002b88 <uavcan_node_Mode_1_0_serialize_>
 8002e20:	4603      	mov	r3, r0
 8002e22:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8002e24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	da02      	bge.n	8002e32 <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 8002e2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002e30:	e03a      	b.n	8002ea8 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e38:	4413      	add	r3, r2
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	08db      	lsrs	r3, r3, #3
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	4413      	add	r3, r2
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	7992      	ldrb	r2, [r2, #6]
 8002e48:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	3308      	adds	r3, #8
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d021      	beq.n	8002e9e <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f1c3 0308 	rsb	r3, r3, #8
 8002e68:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8002e6a:	7e7b      	ldrb	r3, [r7, #25]
 8002e6c:	9302      	str	r3, [sp, #8]
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9cd 2300 	strd	r2, r3, [sp]
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	6a39      	ldr	r1, [r7, #32]
 8002e7e:	68b8      	ldr	r0, [r7, #8]
 8002e80:	f7ff fd75 	bl	800296e <nunavutSetUxx>
 8002e84:	4603      	mov	r3, r0
 8002e86:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 8002e88:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	da02      	bge.n	8002e96 <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 8002e90:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002e94:	e008      	b.n	8002ea8 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 8002e96:	7e7b      	ldrb	r3, [r7, #25]
 8002e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9a:	4413      	add	r3, r2
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3728      	adds	r7, #40	; 0x28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d006      	beq.n	8002ed6 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ed6:	f06f 0301 	mvn.w	r3, #1
 8002eda:	e089      	b.n	8002ff0 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002ee2:	4b45      	ldr	r3, [pc, #276]	; (8002ff8 <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 8002ee4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efc:	68b8      	ldr	r0, [r7, #8]
 8002efe:	f7ff fd5c 	bl	80029ba <nunavutGetU32>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	3320      	adds	r3, #32
 8002f0c:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3307      	adds	r3, #7
 8002f12:	f023 0307 	bic.w	r3, r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	08db      	lsrs	r3, r3, #3
 8002f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fc3c 	bl	800279c <nunavutChooseMin>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	4413      	add	r3, r2
 8002f38:	f107 0214 	add.w	r2, r7, #20
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f7ff fdd5 	bl	8002aec <uavcan_node_Health_1_0_deserialize_>
 8002f42:	4603      	mov	r3, r0
 8002f44:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 8002f46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	da02      	bge.n	8002f54 <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 8002f4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002f52:	e04d      	b.n	8002ff0 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3307      	adds	r3, #7
 8002f62:	f023 0307 	bic.w	r3, r3, #7
 8002f66:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	08db      	lsrs	r3, r3, #3
 8002f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fc14 	bl	800279c <nunavutChooseMin>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	4413      	add	r3, r2
 8002f88:	f107 0210 	add.w	r2, r7, #16
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f7ff fe5b 	bl	8002c48 <uavcan_node_Mode_1_0_deserialize_>
 8002f92:	4603      	mov	r3, r0
 8002f94:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 8002f96:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	da02      	bge.n	8002fa4 <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8002f9e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002fa2:	e025      	b.n	8002ff0 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	4413      	add	r3, r2
 8002fac:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	6a3a      	ldr	r2, [r7, #32]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d307      	bcc.n	8002fc8 <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	08db      	lsrs	r3, r3, #3
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	719a      	strb	r2, [r3, #6]
 8002fc6:	e002      	b.n	8002fce <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3307      	adds	r3, #7
 8002fd8:	f023 0307 	bic.w	r3, r3, #7
 8002fdc:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002fde:	6a39      	ldr	r1, [r7, #32]
 8002fe0:	69f8      	ldr	r0, [r7, #28]
 8002fe2:	f7ff fbdb 	bl	800279c <nunavutChooseMin>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	080134e8 	.word	0x080134e8

08002ffc <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d006      	beq.n	8003022 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003022:	f06f 0301 	mvn.w	r3, #1
 8003026:	e027      	b.n	8003078 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 8003030:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	69f9      	ldr	r1, [r7, #28]
 8003046:	68b8      	ldr	r0, [r7, #8]
 8003048:	f7ff fcda 	bl	8002a00 <nunavutGetF32>
 800304c:	eef0 7a40 	vmov.f32	s15, s0
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	3320      	adds	r3, #32
 800305a:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	3307      	adds	r3, #7
 8003060:	f023 0307 	bic.w	r3, r3, #7
 8003064:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003066:	69b9      	ldr	r1, [r7, #24]
 8003068:	6978      	ldr	r0, [r7, #20]
 800306a:	f7ff fb97 	bl	800279c <nunavutChooseMin>
 800306e:	4603      	mov	r3, r0
 8003070:	08da      	lsrs	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	080134e8 	.word	0x080134e8

08003084 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80030aa:	f06f 0301 	mvn.w	r3, #1
 80030ae:	e027      	b.n	8003100 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80030b6:	4b14      	ldr	r3, [pc, #80]	; (8003108 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 80030b8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	69f9      	ldr	r1, [r7, #28]
 80030ce:	68b8      	ldr	r0, [r7, #8]
 80030d0:	f7ff fc96 	bl	8002a00 <nunavutGetF32>
 80030d4:	eef0 7a40 	vmov.f32	s15, s0
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3320      	adds	r3, #32
 80030e2:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3307      	adds	r3, #7
 80030e8:	f023 0307 	bic.w	r3, r3, #7
 80030ec:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80030ee:	69b9      	ldr	r1, [r7, #24]
 80030f0:	6978      	ldr	r0, [r7, #20]
 80030f2:	f7ff fb53 	bl	800279c <nunavutChooseMin>
 80030f6:	4603      	mov	r3, r0
 80030f8:	08da      	lsrs	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	080134e8 	.word	0x080134e8

0800310c <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003132:	f06f 0301 	mvn.w	r3, #1
 8003136:	e027      	b.n	8003188 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 8003140:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	69f9      	ldr	r1, [r7, #28]
 8003156:	68b8      	ldr	r0, [r7, #8]
 8003158:	f7ff fc52 	bl	8002a00 <nunavutGetF32>
 800315c:	eef0 7a40 	vmov.f32	s15, s0
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3320      	adds	r3, #32
 800316a:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	3307      	adds	r3, #7
 8003170:	f023 0307 	bic.w	r3, r3, #7
 8003174:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003176:	69b9      	ldr	r1, [r7, #24]
 8003178:	6978      	ldr	r0, [r7, #20]
 800317a:	f7ff fb0f 	bl	800279c <nunavutChooseMin>
 800317e:	4603      	mov	r3, r0
 8003180:	08da      	lsrs	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	080134e8 	.word	0x080134e8

08003194 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08c      	sub	sp, #48	; 0x30
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d006      	beq.n	80031ba <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80031ba:	f06f 0301 	mvn.w	r3, #1
 80031be:	e090      	b.n	80032e2 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80031c6:	4b49      	ldr	r3, [pc, #292]	; (80032ec <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 80031c8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80031d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t offset_bits = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	08db      	lsrs	r3, r3, #3
 80031de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fadb 	bl	800279c <nunavutChooseMin>
 80031e6:	4602      	mov	r2, r0
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 80031ee:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	4413      	add	r3, r2
 80031f8:	f107 021c 	add.w	r2, r7, #28
 80031fc:	4619      	mov	r1, r3
 80031fe:	f7ff fefd 	bl	8002ffc <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (_err6_ < 0)
 8003208:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800320c:	2b00      	cmp	r3, #0
 800320e:	da02      	bge.n	8003216 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 8003210:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003214:	e065      	b.n	80032e2 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321c:	4413      	add	r3, r2
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	3307      	adds	r3, #7
 8003224:	f023 0307 	bic.w	r3, r3, #7
 8003228:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	08db      	lsrs	r3, r3, #3
 800322e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fab3 	bl	800279c <nunavutChooseMin>
 8003236:	4602      	mov	r2, r0
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	4413      	add	r3, r2
 800324a:	f107 0218 	add.w	r2, r7, #24
 800324e:	4619      	mov	r1, r3
 8003250:	f7ff ff5c 	bl	800310c <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 8003254:	4603      	mov	r3, r0
 8003256:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err7_ < 0)
 800325a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800325e:	2b00      	cmp	r3, #0
 8003260:	da02      	bge.n	8003268 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 8003262:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003266:	e03c      	b.n	80032e2 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326e:	4413      	add	r3, r2
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	3307      	adds	r3, #7
 8003276:	f023 0307 	bic.w	r3, r3, #7
 800327a:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	08db      	lsrs	r3, r3, #3
 8003280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fa8a 	bl	800279c <nunavutChooseMin>
 8003288:	4602      	mov	r2, r0
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	f107 0214 	add.w	r2, r7, #20
 80032a2:	4619      	mov	r1, r3
 80032a4:	f7ff feee 	bl	8003084 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err8_ < 0)
 80032ae:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	da02      	bge.n	80032bc <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 80032b6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80032ba:	e012      	b.n	80032e2 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c2:	4413      	add	r3, r2
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	3307      	adds	r3, #7
 80032ca:	f023 0307 	bic.w	r3, r3, #7
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80032d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032d4:	f7ff fa62 	bl	800279c <nunavutChooseMin>
 80032d8:	4603      	mov	r3, r0
 80032da:	08da      	lsrs	r2, r3, #3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3730      	adds	r7, #48	; 0x30
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	080134e8 	.word	0x080134e8

080032f0 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_(
    const uavcan_si_unit_angular_velocity_Vector3_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	; 0x30
 80032f4:	af04      	add	r7, sp, #16
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x1e>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x1e>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800330e:	f06f 0301 	mvn.w	r3, #1
 8003312:	e042      	b.n	800339a <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 96UL)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	2b5f      	cmp	r3, #95	; 0x5f
 8003320:	d802      	bhi.n	8003328 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003322:	f06f 0302 	mvn.w	r3, #2
 8003326:	e038      	b.n	800339a <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 3UL * 32UL, &obj->radian_per_second[0], 0U);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	9200      	str	r2, [sp, #0]
 8003332:	2260      	movs	r2, #96	; 0x60
 8003334:	69f9      	ldr	r1, [r7, #28]
 8003336:	68b8      	ldr	r0, [r7, #8]
 8003338:	f7ff fa5c 	bl	80027f4 <nunavutCopyBits>
        offset_bits += 3UL * 32UL;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	3360      	adds	r3, #96	; 0x60
 8003340:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	2b00      	cmp	r3, #0
 800334a:	d021      	beq.n	8003390 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f1c3 0308 	rsb	r3, r3, #8
 800335a:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800335c:	7dfb      	ldrb	r3, [r7, #23]
 800335e:	9302      	str	r3, [sp, #8]
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	e9cd 2300 	strd	r2, r3, [sp]
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	69b9      	ldr	r1, [r7, #24]
 8003370:	68b8      	ldr	r0, [r7, #8]
 8003372:	f7ff fafc 	bl	800296e <nunavutSetUxx>
 8003376:	4603      	mov	r3, r0
 8003378:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800337a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800337e:	2b00      	cmp	r3, #0
 8003380:	da02      	bge.n	8003388 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0x98>
        {
            return _err0_;
 8003382:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003386:	e008      	b.n	800339a <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	4413      	add	r3, r2
 800338e:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	08da      	lsrs	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3720      	adds	r7, #32
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <uavcan_si_unit_velocity_Vector3_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_velocity_Vector3_1_0_serialize_(
    const uavcan_si_unit_velocity_Vector3_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b08c      	sub	sp, #48	; 0x30
 80033a6:	af04      	add	r7, sp, #16
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x1e>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x1e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80033c0:	f06f 0301 	mvn.w	r3, #1
 80033c4:	e042      	b.n	800344c <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 96UL)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	2b5f      	cmp	r3, #95	; 0x5f
 80033d2:	d802      	bhi.n	80033da <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80033d4:	f06f 0302 	mvn.w	r3, #2
 80033d8:	e038      	b.n	800344c <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 3UL * 32UL, &obj->meter_per_second[0], 0U);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	9200      	str	r2, [sp, #0]
 80033e4:	2260      	movs	r2, #96	; 0x60
 80033e6:	69f9      	ldr	r1, [r7, #28]
 80033e8:	68b8      	ldr	r0, [r7, #8]
 80033ea:	f7ff fa03 	bl	80027f4 <nunavutCopyBits>
        offset_bits += 3UL * 32UL;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3360      	adds	r3, #96	; 0x60
 80033f2:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d021      	beq.n	8003442 <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f1c3 0308 	rsb	r3, r3, #8
 800340c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	9302      	str	r3, [sp, #8]
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	e9cd 2300 	strd	r2, r3, [sp]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	69b9      	ldr	r1, [r7, #24]
 8003422:	68b8      	ldr	r0, [r7, #8]
 8003424:	f7ff faa3 	bl	800296e <nunavutSetUxx>
 8003428:	4603      	mov	r3, r0
 800342a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800342c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003430:	2b00      	cmp	r3, #0
 8003432:	da02      	bge.n	800343a <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0x98>
        {
            return _err0_;
 8003434:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003438:	e008      	b.n	800344c <uavcan_si_unit_velocity_Vector3_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	4413      	add	r3, r2
 8003440:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	08da      	lsrs	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_(
    const reg_udral_physics_kinematics_cartesian_Twist_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08e      	sub	sp, #56	; 0x38
 8003458:	af04      	add	r7, sp, #16
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x1e>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x1e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003472:	f06f 0301 	mvn.w	r3, #1
 8003476:	e094      	b.n	80035a2 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 192UL)
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	2bbf      	cmp	r3, #191	; 0xbf
 8003484:	d802      	bhi.n	800348c <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003486:	f06f 0302 	mvn.w	r3, #2
 800348a:	e08a      	b.n	80035a2 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.si.unit.velocity.Vector3.1.0 linear
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 12UL;  // Nested object (max) size, in bytes.
 8003490:	230c      	movs	r3, #12
 8003492:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_velocity_Vector3_1_0_serialize_(
 8003494:	68f8      	ldr	r0, [r7, #12]
            &obj->linear, &buffer[offset_bits / 8U], &_size_bytes0_);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_velocity_Vector3_1_0_serialize_(
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	4413      	add	r3, r2
 800349e:	f107 0214 	add.w	r2, r7, #20
 80034a2:	4619      	mov	r1, r3
 80034a4:	f7ff ff7d 	bl	80033a2 <uavcan_si_unit_velocity_Vector3_1_0_serialize_>
 80034a8:	4603      	mov	r3, r0
 80034aa:	77fb      	strb	r3, [r7, #31]
        if (_err0_ < 0)
 80034ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	da02      	bge.n	80034ba <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x66>
        {
            return _err0_;
 80034b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034b8:	e073      	b.n	80035a2 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 96ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c0:	4413      	add	r3, r2
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d021      	beq.n	8003512 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0xbe>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f1c3 0308 	rsb	r3, r3, #8
 80034dc:	77bb      	strb	r3, [r7, #30]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80034de:	7fbb      	ldrb	r3, [r7, #30]
 80034e0:	9302      	str	r3, [sp, #8]
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	e9cd 2300 	strd	r2, r3, [sp]
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	6a39      	ldr	r1, [r7, #32]
 80034f2:	68b8      	ldr	r0, [r7, #8]
 80034f4:	f7ff fa3b 	bl	800296e <nunavutSetUxx>
 80034f8:	4603      	mov	r3, r0
 80034fa:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 80034fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003500:	2b00      	cmp	r3, #0
 8003502:	da02      	bge.n	800350a <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0xb6>
        {
            return _err1_;
 8003504:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003508:	e04b      	b.n	80035a2 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        offset_bits += _pad0_;
 800350a:	7fbb      	ldrb	r3, [r7, #30]
 800350c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350e:	4413      	add	r3, r2
 8003510:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.si.unit.angular_velocity.Vector3.1.0 angular
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 96ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 12UL;  // Nested object (max) size, in bytes.
 8003512:	230c      	movs	r3, #12
 8003514:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_(
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f103 000c 	add.w	r0, r3, #12
            &obj->angular, &buffer[offset_bits / 8U], &_size_bytes1_);
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_(
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	4413      	add	r3, r2
 8003524:	f107 0210 	add.w	r2, r7, #16
 8003528:	4619      	mov	r1, r3
 800352a:	f7ff fee1 	bl	80032f0 <uavcan_si_unit_angular_velocity_Vector3_1_0_serialize_>
 800352e:	4603      	mov	r3, r0
 8003530:	773b      	strb	r3, [r7, #28]
        if (_err2_ < 0)
 8003532:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003536:	2b00      	cmp	r3, #0
 8003538:	da02      	bge.n	8003540 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0xec>
        {
            return _err2_;
 800353a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800353e:	e030      	b.n	80035a2 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 96ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003546:	4413      	add	r3, r2
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	2b00      	cmp	r3, #0
 8003552:	d021      	beq.n	8003598 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x144>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f1c3 0308 	rsb	r3, r3, #8
 8003562:	76fb      	strb	r3, [r7, #27]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8003564:	7efb      	ldrb	r3, [r7, #27]
 8003566:	9302      	str	r3, [sp, #8]
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9cd 2300 	strd	r2, r3, [sp]
 8003574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003576:	6a39      	ldr	r1, [r7, #32]
 8003578:	68b8      	ldr	r0, [r7, #8]
 800357a:	f7ff f9f8 	bl	800296e <nunavutSetUxx>
 800357e:	4603      	mov	r3, r0
 8003580:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8003582:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003586:	2b00      	cmp	r3, #0
 8003588:	da02      	bge.n	8003590 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x13c>
        {
            return _err3_;
 800358a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800358e:	e008      	b.n	80035a2 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_+0x14e>
        }
        offset_bits += _pad1_;
 8003590:	7efb      	ldrb	r3, [r7, #27]
 8003592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003594:	4413      	add	r3, r2
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 192ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	08da      	lsrs	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3728      	adds	r7, #40	; 0x28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <uavcan_si_unit_length_WideVector3_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_length_WideVector3_1_0_serialize_(
    const uavcan_si_unit_length_WideVector3_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b08c      	sub	sp, #48	; 0x30
 80035ae:	af04      	add	r7, sp, #16
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x1e>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x1e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80035c8:	f06f 0301 	mvn.w	r3, #1
 80035cc:	e042      	b.n	8003654 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 192UL)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	2bbf      	cmp	r3, #191	; 0xbf
 80035da:	d802      	bhi.n	80035e2 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80035dc:	f06f 0302 	mvn.w	r3, #2
 80035e0:	e038      	b.n	8003654 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT((offset_bits + 192ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 3UL * 64UL, &obj->meter[0], 0U);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	9200      	str	r2, [sp, #0]
 80035ec:	22c0      	movs	r2, #192	; 0xc0
 80035ee:	69f9      	ldr	r1, [r7, #28]
 80035f0:	68b8      	ldr	r0, [r7, #8]
 80035f2:	f7ff f8ff 	bl	80027f4 <nunavutCopyBits>
        offset_bits += 3UL * 64UL;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	33c0      	adds	r3, #192	; 0xc0
 80035fa:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	2b00      	cmp	r3, #0
 8003604:	d021      	beq.n	800364a <uavcan_si_unit_length_WideVector3_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f1c3 0308 	rsb	r3, r3, #8
 8003614:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003616:	7dfb      	ldrb	r3, [r7, #23]
 8003618:	9302      	str	r3, [sp, #8]
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	e9cd 2300 	strd	r2, r3, [sp]
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	69b9      	ldr	r1, [r7, #24]
 800362a:	68b8      	ldr	r0, [r7, #8]
 800362c:	f7ff f99f 	bl	800296e <nunavutSetUxx>
 8003630:	4603      	mov	r3, r0
 8003632:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003634:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003638:	2b00      	cmp	r3, #0
 800363a:	da02      	bge.n	8003642 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0x98>
        {
            return _err0_;
 800363c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003640:	e008      	b.n	8003654 <uavcan_si_unit_length_WideVector3_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 192ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	08da      	lsrs	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3720      	adds	r7, #32
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_(
    const reg_udral_physics_kinematics_cartesian_Point_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08c      	sub	sp, #48	; 0x30
 8003660:	af04      	add	r7, sp, #16
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x1e>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x1e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800367a:	f06f 0301 	mvn.w	r3, #1
 800367e:	e051      	b.n	8003724 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xc8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 192UL)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	2bbf      	cmp	r3, #191	; 0xbf
 800368c:	d802      	bhi.n	8003694 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800368e:	f06f 0302 	mvn.w	r3, #2
 8003692:	e047      	b.n	8003724 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xc8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]

    {   // uavcan.si.unit.length.WideVector3.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 192ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 24UL;  // Nested object (max) size, in bytes.
 8003698:	2318      	movs	r3, #24
 800369a:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_length_WideVector3_1_0_serialize_(
 800369c:	68f8      	ldr	r0, [r7, #12]
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes0_);
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_length_WideVector3_1_0_serialize_(
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	4413      	add	r3, r2
 80036a6:	f107 0210 	add.w	r2, r7, #16
 80036aa:	4619      	mov	r1, r3
 80036ac:	f7ff ff7d 	bl	80035aa <uavcan_si_unit_length_WideVector3_1_0_serialize_>
 80036b0:	4603      	mov	r3, r0
 80036b2:	75fb      	strb	r3, [r7, #23]
        if (_err0_ < 0)
 80036b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	da02      	bge.n	80036c2 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0x66>
        {
            return _err0_;
 80036bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036c0:	e030      	b.n	8003724 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xc8>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 192ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	4413      	add	r3, r2
 80036ca:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d021      	beq.n	800371a <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xbe>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f1c3 0308 	rsb	r3, r3, #8
 80036e4:	75bb      	strb	r3, [r7, #22]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80036e6:	7dbb      	ldrb	r3, [r7, #22]
 80036e8:	9302      	str	r3, [sp, #8]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9cd 2300 	strd	r2, r3, [sp]
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	69b9      	ldr	r1, [r7, #24]
 80036fa:	68b8      	ldr	r0, [r7, #8]
 80036fc:	f7ff f937 	bl	800296e <nunavutSetUxx>
 8003700:	4603      	mov	r3, r0
 8003702:	757b      	strb	r3, [r7, #21]
        if (_err1_ < 0)
 8003704:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003708:	2b00      	cmp	r3, #0
 800370a:	da02      	bge.n	8003712 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xb6>
        {
            return _err1_;
 800370c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003710:	e008      	b.n	8003724 <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_+0xc8>
        }
        offset_bits += _pad0_;
 8003712:	7dbb      	ldrb	r3, [r7, #22]
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 192ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	08da      	lsrs	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <uavcan_si_unit_angle_Quaternion_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Quaternion_1_0_serialize_(
    const uavcan_si_unit_angle_Quaternion_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	; 0x30
 8003730:	af04      	add	r7, sp, #16
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x1e>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x1e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800374a:	f06f 0301 	mvn.w	r3, #1
 800374e:	e042      	b.n	80037d6 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0xaa>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 128UL)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	2b7f      	cmp	r3, #127	; 0x7f
 800375c:	d802      	bhi.n	8003764 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800375e:	f06f 0302 	mvn.w	r3, #2
 8003762:	e038      	b.n	80037d6 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0xaa>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 4UL * 32UL, &obj->wxyz[0], 0U);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	9200      	str	r2, [sp, #0]
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	69f9      	ldr	r1, [r7, #28]
 8003772:	68b8      	ldr	r0, [r7, #8]
 8003774:	f7ff f83e 	bl	80027f4 <nunavutCopyBits>
        offset_bits += 4UL * 32UL;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	3380      	adds	r3, #128	; 0x80
 800377c:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	2b00      	cmp	r3, #0
 8003786:	d021      	beq.n	80037cc <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0xa0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f1c3 0308 	rsb	r3, r3, #8
 8003796:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	9302      	str	r3, [sp, #8]
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9cd 2300 	strd	r2, r3, [sp]
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	69b9      	ldr	r1, [r7, #24]
 80037ac:	68b8      	ldr	r0, [r7, #8]
 80037ae:	f7ff f8de 	bl	800296e <nunavutSetUxx>
 80037b2:	4603      	mov	r3, r0
 80037b4:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80037b6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	da02      	bge.n	80037c4 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0x98>
        {
            return _err0_;
 80037be:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80037c2:	e008      	b.n	80037d6 <uavcan_si_unit_angle_Quaternion_1_0_serialize_+0xaa>
        }
        offset_bits += _pad0_;
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 128ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	08da      	lsrs	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_(
    const reg_udral_physics_kinematics_cartesian_Pose_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b08e      	sub	sp, #56	; 0x38
 80037e2:	af04      	add	r7, sp, #16
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x1e>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x1e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80037fc:	f06f 0301 	mvn.w	r3, #1
 8003800:	e095      	b.n	800392e <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 320UL)
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003810:	d202      	bcs.n	8003818 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003812:	f06f 0302 	mvn.w	r3, #2
 8003816:	e08a      	b.n	800392e <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	627b      	str	r3, [r7, #36]	; 0x24

    {   // reg.udral.physics.kinematics.cartesian.Point.0.1 position
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 192ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 24UL;  // Nested object (max) size, in bytes.
 800381c:	2318      	movs	r3, #24
 800381e:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_(
 8003820:	68f8      	ldr	r0, [r7, #12]
            &obj->position, &buffer[offset_bits / 8U], &_size_bytes0_);
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_(
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	4413      	add	r3, r2
 800382a:	f107 0214 	add.w	r2, r7, #20
 800382e:	4619      	mov	r1, r3
 8003830:	f7ff ff14 	bl	800365c <reg_udral_physics_kinematics_cartesian_Point_0_1_serialize_>
 8003834:	4603      	mov	r3, r0
 8003836:	77fb      	strb	r3, [r7, #31]
        if (_err0_ < 0)
 8003838:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800383c:	2b00      	cmp	r3, #0
 800383e:	da02      	bge.n	8003846 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x68>
        {
            return _err0_;
 8003840:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003844:	e073      	b.n	800392e <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 192ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384c:	4413      	add	r3, r2
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	2b00      	cmp	r3, #0
 8003858:	d021      	beq.n	800389e <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0xc0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f1c3 0308 	rsb	r3, r3, #8
 8003868:	77bb      	strb	r3, [r7, #30]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800386a:	7fbb      	ldrb	r3, [r7, #30]
 800386c:	9302      	str	r3, [sp, #8]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9cd 2300 	strd	r2, r3, [sp]
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	6a39      	ldr	r1, [r7, #32]
 800387e:	68b8      	ldr	r0, [r7, #8]
 8003880:	f7ff f875 	bl	800296e <nunavutSetUxx>
 8003884:	4603      	mov	r3, r0
 8003886:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8003888:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800388c:	2b00      	cmp	r3, #0
 800388e:	da02      	bge.n	8003896 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0xb8>
        {
            return _err1_;
 8003890:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003894:	e04b      	b.n	800392e <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
        }
        offset_bits += _pad0_;
 8003896:	7fbb      	ldrb	r3, [r7, #30]
 8003898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389a:	4413      	add	r3, r2
 800389c:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.si.unit.angle.Quaternion.1.0 orientation
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 16UL;  // Nested object (max) size, in bytes.
 800389e:	2310      	movs	r3, #16
 80038a0:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angle_Quaternion_1_0_serialize_(
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f103 0018 	add.w	r0, r3, #24
            &obj->orientation, &buffer[offset_bits / 8U], &_size_bytes1_);
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angle_Quaternion_1_0_serialize_(
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	4413      	add	r3, r2
 80038b0:	f107 0210 	add.w	r2, r7, #16
 80038b4:	4619      	mov	r1, r3
 80038b6:	f7ff ff39 	bl	800372c <uavcan_si_unit_angle_Quaternion_1_0_serialize_>
 80038ba:	4603      	mov	r3, r0
 80038bc:	773b      	strb	r3, [r7, #28]
        if (_err2_ < 0)
 80038be:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	da02      	bge.n	80038cc <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0xee>
        {
            return _err2_;
 80038c6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80038ca:	e030      	b.n	800392e <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 128ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d2:	4413      	add	r3, r2
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d021      	beq.n	8003924 <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x146>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f1c3 0308 	rsb	r3, r3, #8
 80038ee:	76fb      	strb	r3, [r7, #27]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 80038f0:	7efb      	ldrb	r3, [r7, #27]
 80038f2:	9302      	str	r3, [sp, #8]
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	e9cd 2300 	strd	r2, r3, [sp]
 8003900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003902:	6a39      	ldr	r1, [r7, #32]
 8003904:	68b8      	ldr	r0, [r7, #8]
 8003906:	f7ff f832 	bl	800296e <nunavutSetUxx>
 800390a:	4603      	mov	r3, r0
 800390c:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 800390e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003912:	2b00      	cmp	r3, #0
 8003914:	da02      	bge.n	800391c <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x13e>
        {
            return _err3_;
 8003916:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800391a:	e008      	b.n	800392e <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_+0x150>
        }
        offset_bits += _pad1_;
 800391c:	7efb      	ldrb	r3, [r7, #27]
 800391e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003920:	4413      	add	r3, r2
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 320ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3728      	adds	r7, #40	; 0x28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_cartesian_State_0_1_serialize_(
    const reg_udral_physics_kinematics_cartesian_State_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b08e      	sub	sp, #56	; 0x38
 800393a:	af04      	add	r7, sp, #16
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x1e>
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x1e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d102      	bne.n	800395a <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003954:	f06f 0301 	mvn.w	r3, #1
 8003958:	e095      	b.n	8003a86 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 512UL)
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003968:	d202      	bcs.n	8003970 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800396a:	f06f 0302 	mvn.w	r3, #2
 800396e:	e08a      	b.n	8003a86 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	; 0x24

    {   // reg.udral.physics.kinematics.cartesian.Pose.0.1 pose
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 320ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 40UL;  // Nested object (max) size, in bytes.
 8003974:	2328      	movs	r3, #40	; 0x28
 8003976:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_(
 8003978:	68f8      	ldr	r0, [r7, #12]
            &obj->pose, &buffer[offset_bits / 8U], &_size_bytes0_);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_(
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	4413      	add	r3, r2
 8003982:	f107 0214 	add.w	r2, r7, #20
 8003986:	4619      	mov	r1, r3
 8003988:	f7ff ff29 	bl	80037de <reg_udral_physics_kinematics_cartesian_Pose_0_1_serialize_>
 800398c:	4603      	mov	r3, r0
 800398e:	77fb      	strb	r3, [r7, #31]
        if (_err0_ < 0)
 8003990:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003994:	2b00      	cmp	r3, #0
 8003996:	da02      	bge.n	800399e <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x68>
        {
            return _err0_;
 8003998:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800399c:	e073      	b.n	8003a86 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 320ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a4:	4413      	add	r3, r2
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d021      	beq.n	80039f6 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0xc0>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f1c3 0308 	rsb	r3, r3, #8
 80039c0:	77bb      	strb	r3, [r7, #30]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80039c2:	7fbb      	ldrb	r3, [r7, #30]
 80039c4:	9302      	str	r3, [sp, #8]
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	e9cd 2300 	strd	r2, r3, [sp]
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	6a39      	ldr	r1, [r7, #32]
 80039d6:	68b8      	ldr	r0, [r7, #8]
 80039d8:	f7fe ffc9 	bl	800296e <nunavutSetUxx>
 80039dc:	4603      	mov	r3, r0
 80039de:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 80039e0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	da02      	bge.n	80039ee <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0xb8>
        {
            return _err1_;
 80039e8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80039ec:	e04b      	b.n	8003a86 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
        }
        offset_bits += _pad0_;
 80039ee:	7fbb      	ldrb	r3, [r7, #30]
 80039f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f2:	4413      	add	r3, r2
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24

    {   // reg.udral.physics.kinematics.cartesian.Twist.0.1 twist
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 192ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 24UL;  // Nested object (max) size, in bytes.
 80039f6:	2318      	movs	r3, #24
 80039f8:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_(
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f103 0028 	add.w	r0, r3, #40	; 0x28
            &obj->twist, &buffer[offset_bits / 8U], &_size_bytes1_);
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_(
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	4413      	add	r3, r2
 8003a08:	f107 0210 	add.w	r2, r7, #16
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f7ff fd21 	bl	8003454 <reg_udral_physics_kinematics_cartesian_Twist_0_1_serialize_>
 8003a12:	4603      	mov	r3, r0
 8003a14:	773b      	strb	r3, [r7, #28]
        if (_err2_ < 0)
 8003a16:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	da02      	bge.n	8003a24 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0xee>
        {
            return _err2_;
 8003a1e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003a22:	e030      	b.n	8003a86 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 192ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2a:	4413      	add	r3, r2
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d021      	beq.n	8003a7c <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x146>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f1c3 0308 	rsb	r3, r3, #8
 8003a46:	76fb      	strb	r3, [r7, #27]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8003a48:	7efb      	ldrb	r3, [r7, #27]
 8003a4a:	9302      	str	r3, [sp, #8]
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9cd 2300 	strd	r2, r3, [sp]
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	6a39      	ldr	r1, [r7, #32]
 8003a5c:	68b8      	ldr	r0, [r7, #8]
 8003a5e:	f7fe ff86 	bl	800296e <nunavutSetUxx>
 8003a62:	4603      	mov	r3, r0
 8003a64:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8003a66:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da02      	bge.n	8003a74 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x13e>
        {
            return _err3_;
 8003a6e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003a72:	e008      	b.n	8003a86 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_+0x150>
        }
        offset_bits += _pad1_;
 8003a74:	7efb      	ldrb	r3, [r7, #27]
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	4413      	add	r3, r2
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 512ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	08da      	lsrs	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3728      	adds	r7, #40	; 0x28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fb58 	bl	8004150 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
      { }
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <_Z13error_handlerv>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	f7fe fce7 	bl	800249c <Error_Handler>
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <_Z9micros_64v>:
// Тут не нужен точный таймер, поэтому так
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 8003ad2:	b5b0      	push	{r4, r5, r7, lr}
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	f002 fc11 	bl	80062fc <HAL_GetTick>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	461c      	mov	r4, r3
 8003ae8:	4615      	mov	r5, r2
 8003aea:	4622      	mov	r2, r4
 8003aec:	462b      	mov	r3, r5
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	bdb0      	pop	{r4, r5, r7, pc}

08003af4 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	1d1a      	adds	r2, r3, #4
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4610      	mov	r0, r2
 8003b12:	f000 fb8f 	bl	8004234 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ffdf 	bl	8003af4 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff9f 	bl	8003a8e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 8003b66:	687c      	ldr	r4, [r7, #4]
 8003b68:	f107 0308 	add.w	r3, r7, #8
 8003b6c:	6839      	ldr	r1, [r7, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff ffd6 	bl	8003b20 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8003b74:	f107 0308 	add.w	r3, r7, #8
 8003b78:	f641 5255 	movw	r2, #7509	; 0x1d55
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f000 fb6f 	bl	8004262 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8003b84:	f107 0308 	add.w	r3, r7, #8
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ffd9 	bl	8003b40 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8003b8e:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd90      	pop	{r4, r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	08013530 	.word	0x08013530

08003ba4 <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003bb0:	2120      	movs	r1, #32
 8003bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bb6:	f003 fd87 	bl	80076c8 <HAL_GPIO_TogglePin>
    }
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

HBeatReader* h_reader;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 8003bce:	687c      	ldr	r4, [r7, #4]
 8003bd0:	f107 0308 	add.w	r3, r7, #8
 8003bd4:	6839      	ldr	r1, [r7, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff ffa2 	bl	8003b20 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8003bdc:	f107 0308 	add.w	r3, r7, #8
 8003be0:	f240 4265 	movw	r2, #1125	; 0x465
 8003be4:	4619      	mov	r1, r3
 8003be6:	4620      	mov	r0, r4
 8003be8:	f000 fb59 	bl	800429e <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8003bec:	f107 0308 	add.w	r3, r7, #8
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ffa5 	bl	8003b40 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8003bf6:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd90      	pop	{r4, r7, pc}
 8003c06:	bf00      	nop
 8003c08:	08013510 	.word	0x08013510

08003c0c <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8003c18:	2104      	movs	r1, #4
 8003c1a:	4803      	ldr	r0, [pc, #12]	; (8003c28 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x1c>)
 8003c1c:	f003 fd54 	bl	80076c8 <HAL_GPIO_TogglePin>
    }
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	48000c00 	.word	0x48000c00

08003c2c <send_IMU>:
		&int_transfer_id
	);
}

void send_IMU(float* qw, float* qx, float* qy, float* qz, float* ax, float* ay, float* az, float* gx, float* gy, float* gz)
{
 8003c2c:	b5b0      	push	{r4, r5, r7, lr}
 8003c2e:	b0a6      	sub	sp, #152	; 0x98
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]

	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);

	//uavcan_si_unit_angle_Quaternion_1_0 q_orient = {*av_1, *av_2, *av_3, *av_3};
	reg_udral_physics_kinematics_cartesian_Pose_0_1 imu_pose;
	imu_pose.orientation = {*qw, *qx, *qy, *qz};
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	6819      	ldr	r1, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8003c4e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8003c52:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//imu_pose.position =

	reg_udral_physics_kinematics_cartesian_Twist_0_1 imu_twist;
	imu_twist.angular = {*ax, *ay, *az};
 8003c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003c6e:	663a      	str	r2, [r7, #96]	; 0x60
 8003c70:	667b      	str	r3, [r7, #100]	; 0x64
	imu_twist.linear = {*gx, *gy, *gz};
 8003c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c76:	6819      	ldr	r1, [r3, #0]
 8003c78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6539      	str	r1, [r7, #80]	; 0x50
 8003c86:	657a      	str	r2, [r7, #84]	; 0x54
 8003c88:	65bb      	str	r3, [r7, #88]	; 0x58

	reg_udral_physics_kinematics_cartesian_State_0_1 state_msg =
	{
			.pose = imu_pose,
			.twist = imu_twist
	};
 8003c8a:	f107 0410 	add.w	r4, r7, #16
 8003c8e:	f107 0568 	add.w	r5, r7, #104	; 0x68
 8003c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c9e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003ca2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003ca6:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8003caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003cb2:	e884 0003 	stmia.w	r4, {r0, r1}
    interface->send_cyphal_default_msg<State>(
 8003cb6:	4808      	ldr	r0, [pc, #32]	; (8003cd8 <send_IMU+0xac>)
 8003cb8:	f000 fb0f 	bl	80042da <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003cbc:	f107 0110 	add.w	r1, r7, #16
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <send_IMU+0xb0>)
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	f240 5339 	movw	r3, #1337	; 0x539
 8003cc8:	4a05      	ldr	r2, [pc, #20]	; (8003ce0 <send_IMU+0xb4>)
 8003cca:	f000 fb12 	bl	80042f2 <_ZNK15CyphalInterface23send_cyphal_default_msgI5StateEEvPNT_4TypeEPhtS5_>
		&state_msg,
		state_buffer,
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}
 8003cce:	bf00      	nop
 8003cd0:	3790      	adds	r7, #144	; 0x90
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000410 	.word	0x20000410
 8003cdc:	20000480 	.word	0x20000480
 8003ce0:	20000440 	.word	0x20000440

08003ce4 <heartbeat>:

void heartbeat() {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af02      	add	r7, sp, #8
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 8003cea:	463b      	mov	r3, r7
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <heartbeat+0x3c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	603b      	str	r3, [r7, #0]
    interface->send_cyphal_default_msg<HBeat>(
 8003cf8:	480a      	ldr	r0, [pc, #40]	; (8003d24 <heartbeat+0x40>)
 8003cfa:	f000 faee 	bl	80042da <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003cfe:	4639      	mov	r1, r7
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <heartbeat+0x44>)
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	f641 5355 	movw	r3, #7509	; 0x1d55
 8003d08:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <heartbeat+0x48>)
 8003d0a:	f000 fb0c 	bl	8004326 <_ZNK15CyphalInterface23send_cyphal_default_msgI5HBeatEEvPNT_4TypeEPhtS5_>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 8003d0e:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <heartbeat+0x3c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3301      	adds	r3, #1
 8003d14:	4a02      	ldr	r2, [pc, #8]	; (8003d20 <heartbeat+0x3c>)
 8003d16:	6013      	str	r3, [r2, #0]

}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	2000048c 	.word	0x2000048c
 8003d24:	20000410 	.word	0x20000410
 8003d28:	2000048b 	.word	0x2000048b
 8003d2c:	20000484 	.word	0x20000484

08003d30 <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 8003d30:	b5b0      	push	{r4, r5, r7, lr}
 8003d32:	b08a      	sub	sp, #40	; 0x28
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 8003d38:	4b28      	ldr	r3, [pc, #160]	; (8003ddc <setup_cyphal+0xac>)
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	2105      	movs	r1, #5
 8003d44:	4826      	ldr	r0, [pc, #152]	; (8003de0 <setup_cyphal+0xb0>)
 8003d46:	f000 fb08 	bl	800435a <_ZN15CyphalInterface6createI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	f107 0308 	add.w	r3, r7, #8
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fb42 	bl	80043dc <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 8003d58:	f107 0308 	add.w	r3, r7, #8
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4821      	ldr	r0, [pc, #132]	; (8003de4 <setup_cyphal+0xb4>)
 8003d60:	f000 fb4b 	bl	80043fa <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 8003d64:	f107 0308 	add.w	r3, r7, #8
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fee9 	bl	8003b40 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 8003d6e:	f107 0310 	add.w	r3, r7, #16
 8003d72:	491c      	ldr	r1, [pc, #112]	; (8003de4 <setup_cyphal+0xb4>)
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fed3 	bl	8003b20 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8003d7a:	f107 0510 	add.w	r5, r7, #16
 8003d7e:	f44f 700e 	mov.w	r0, #568	; 0x238
 8003d82:	f00a fa64 	bl	800e24e <_Znwj>
 8003d86:	4603      	mov	r3, r0
 8003d88:	461c      	mov	r4, r3
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f7ff fee5 	bl	8003b5c <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8003d92:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <setup_cyphal+0xb8>)
 8003d94:	601c      	str	r4, [r3, #0]
 8003d96:	f107 0310 	add.w	r3, r7, #16
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff fed0 	bl	8003b40 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 8003da0:	f107 0318 	add.w	r3, r7, #24
 8003da4:	490f      	ldr	r1, [pc, #60]	; (8003de4 <setup_cyphal+0xb4>)
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff feba 	bl	8003b20 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8003dac:	f107 0518 	add.w	r5, r7, #24
 8003db0:	f44f 700e 	mov.w	r0, #568	; 0x238
 8003db4:	f00a fa4b 	bl	800e24e <_Znwj>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461c      	mov	r4, r3
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f7ff ff00 	bl	8003bc4 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8003dc4:	4b09      	ldr	r3, [pc, #36]	; (8003dec <setup_cyphal+0xbc>)
 8003dc6:	601c      	str	r4, [r3, #0]
 8003dc8:	f107 0318 	add.w	r3, r7, #24
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff feb7 	bl	8003b40 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8003dd2:	bf00      	nop
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000418 	.word	0x20000418
 8003de0:	200003b8 	.word	0x200003b8
 8003de4:	20000410 	.word	0x20000410
 8003de8:	20000438 	.word	0x20000438
 8003dec:	2000043c 	.word	0x2000043c

08003df0 <cyphal_loop>:

void cyphal_loop() {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
    interface->loop();
 8003df4:	4804      	ldr	r0, [pc, #16]	; (8003e08 <cyphal_loop+0x18>)
 8003df6:	f000 fa70 	bl	80042da <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f007 fc8b 	bl	800b718 <_ZN15CyphalInterface4loopEv>
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000410 	.word	0x20000410

08003e0c <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08c      	sub	sp, #48	; 0x30
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 8003e14:	f107 0320 	add.w	r3, r7, #32
 8003e18:	2105      	movs	r1, #5
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f00a f9c8 	bl	800e1b0 <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(1125);//JS_SUB_PORT_ID
 8003e20:	f107 0318 	add.w	r3, r7, #24
 8003e24:	f240 4165 	movw	r1, #1125	; 0x465
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f00a f9a1 	bl	800e170 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 8003e2e:	f107 0310 	add.w	r3, r7, #16
 8003e32:	f641 5155 	movw	r1, #7509	; 0x1d55
 8003e36:	4618      	mov	r0, r3
 8003e38:	f00a f99a 	bl	800e170 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 8003e3c:	f107 0308 	add.w	r3, r7, #8
 8003e40:	f107 0218 	add.w	r2, r7, #24
 8003e44:	f107 0120 	add.w	r1, r7, #32
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f00a f9d3 	bl	800e1f4 <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8003e4e:	4b45      	ldr	r3, [pc, #276]	; (8003f64 <cyphal_can_starter+0x158>)
 8003e50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e54:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 8003e56:	4b43      	ldr	r3, [pc, #268]	; (8003f64 <cyphal_can_starter+0x158>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003e5c:	4b41      	ldr	r3, [pc, #260]	; (8003f64 <cyphal_can_starter+0x158>)
 8003e5e:	2202      	movs	r2, #2
 8003e60:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003e62:	4b40      	ldr	r3, [pc, #256]	; (8003f64 <cyphal_can_starter+0x158>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	4a3e      	ldr	r2, [pc, #248]	; (8003f64 <cyphal_can_starter+0x158>)
 8003e6c:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	4a3c      	ldr	r2, [pc, #240]	; (8003f64 <cyphal_can_starter+0x158>)
 8003e72:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8003e74:	4b3c      	ldr	r3, [pc, #240]	; (8003f68 <cyphal_can_starter+0x15c>)
 8003e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e7a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8003e7c:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <cyphal_can_starter+0x15c>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003e82:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <cyphal_can_starter+0x15c>)
 8003e84:	2202      	movs	r2, #2
 8003e86:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003e88:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <cyphal_can_starter+0x15c>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	4a35      	ldr	r2, [pc, #212]	; (8003f68 <cyphal_can_starter+0x15c>)
 8003e92:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	4a34      	ldr	r2, [pc, #208]	; (8003f68 <cyphal_can_starter+0x15c>)
 8003e98:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8003e9a:	4b34      	ldr	r3, [pc, #208]	; (8003f6c <cyphal_can_starter+0x160>)
 8003e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ea0:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 1;
 8003ea2:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <cyphal_can_starter+0x160>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003ea8:	4b30      	ldr	r3, [pc, #192]	; (8003f6c <cyphal_can_starter+0x160>)
 8003eaa:	2202      	movs	r2, #2
 8003eac:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003eae:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <cyphal_can_starter+0x160>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4a2d      	ldr	r2, [pc, #180]	; (8003f6c <cyphal_can_starter+0x160>)
 8003eb8:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	4a2b      	ldr	r2, [pc, #172]	; (8003f6c <cyphal_can_starter+0x160>)
 8003ebe:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	2102      	movs	r1, #2
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f002 ff90 	bl	8006df0 <HAL_FDCAN_ConfigGlobalFilter>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf14      	ite	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	2300      	moveq	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 8003ee0:	f7fe fadc 	bl	800249c <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 8003ee4:	491f      	ldr	r1, [pc, #124]	; (8003f64 <cyphal_can_starter+0x158>)
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f002 ff28 	bl	8006d3c <HAL_FDCAN_ConfigFilter>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bf14      	ite	ne
 8003ef2:	2301      	movne	r3, #1
 8003ef4:	2300      	moveq	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <cyphal_can_starter+0xf4>
	  Error_Handler();
 8003efc:	f7fe face 	bl	800249c <Error_Handler>
	}
//	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
//	  Error_Handler();
//	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 8003f00:	491a      	ldr	r1, [pc, #104]	; (8003f6c <cyphal_can_starter+0x160>)
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f002 ff1a 	bl	8006d3c <HAL_FDCAN_ConfigFilter>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf14      	ite	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	2300      	moveq	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <cyphal_can_starter+0x110>
	  Error_Handler();
 8003f18:	f7fe fac0 	bl	800249c <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2105      	movs	r1, #5
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f002 ff96 	bl	8006e52 <HAL_FDCAN_ConfigTxDelayCompensation>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf14      	ite	ne
 8003f2c:	2301      	movne	r3, #1
 8003f2e:	2300      	moveq	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <cyphal_can_starter+0x12e>
	  Error_Handler();
 8003f36:	f7fe fab1 	bl	800249c <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f002 ffab 	bl	8006e96 <HAL_FDCAN_EnableTxDelayCompensation>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bf14      	ite	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	2300      	moveq	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <cyphal_can_starter+0x148>
	  Error_Handler();
 8003f50:	f7fe faa4 	bl	800249c <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f002 ffbf 	bl	8006ed8 <HAL_FDCAN_Start>
}
 8003f5a:	bf00      	nop
 8003f5c:	3728      	adds	r7, #40	; 0x28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	200004c0 	.word	0x200004c0
 8003f68:	20000490 	.word	0x20000490
 8003f6c:	200004a8 	.word	0x200004a8

08003f70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
      { delete this; }
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3304      	adds	r3, #4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	4798      	blx	r3
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	6053      	str	r3, [r2, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	609a      	str	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	6053      	str	r3, [r2, #4]
 8003fcc:	6093      	str	r3, [r2, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff ffde 	bl	8003f92 <_ZNSt14_Function_baseC1Ev>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 8003fdc:	6838      	ldr	r0, [r7, #0]
 8003fde:	f000 fa3f 	bl	8004460 <_ZNKSt8functionIFyvEEcvbEv>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	6839      	ldr	r1, [r7, #0]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	609a      	str	r2, [r3, #8]
	  }
      }
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	461a      	mov	r2, r3
 800401c:	2300      	movs	r3, #0
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	6053      	str	r3, [r2, #4]
 8004022:	6093      	str	r3, [r2, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ffb3 	bl	8003f92 <_ZNSt14_Function_baseC1Ev>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8004032:	6838      	ldr	r0, [r7, #0]
 8004034:	f000 fa24 	bl	8004480 <_ZNKSt8functionIFvvEEcvbEv>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00d      	beq.n	800405a <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	6839      	ldr	r1, [r7, #0]
 8004046:	2202      	movs	r2, #2
 8004048:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]
      }
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      explicit operator bool() const noexcept
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fa17 	bl	80044a0 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf14      	ite	ne
 8004078:	2301      	movne	r3, #1
 800407a:	2300      	moveq	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
	return get();
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fa06 	bl	80044a0 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8004094:	4603      	mov	r3, r0
      }
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fa06 	bl	80044ba <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ffeb 	bl	800409e <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b082      	sub	sp, #8
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ffeb 	bl	80040b8 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1Ev>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	: _M_t()
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff ffe8 	bl	80040d2 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f9df 	bl	80044da <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800411c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00c      	beq.n	8004140 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f9e4 	bl	80044f4 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 800412c:	4604      	mov	r4, r0
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f9ed 	bl	800450e <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8004134:	4603      	mov	r3, r0
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4619      	mov	r1, r3
 800413a:	4620      	mov	r0, r4
 800413c:	f000 f9f2 	bl	8004524 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
      }
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	bd90      	pop	{r4, r7, pc}

08004150 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d004      	beq.n	800416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe f9b9 	bl	80024dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8004174:	b590      	push	{r4, r7, lr}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	461a      	mov	r2, r3
 8004182:	2300      	movs	r3, #0
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	6053      	str	r3, [r2, #4]
 8004188:	6093      	str	r3, [r2, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff ff00 	bl	8003f92 <_ZNSt14_Function_baseC1Ev>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8004198:	6838      	ldr	r0, [r7, #0]
 800419a:	f000 f9d3 	bl	8004544 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00e      	beq.n	80041c2 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 80041a4:	687c      	ldr	r4, [r7, #4]
 80041a6:	6838      	ldr	r0, [r7, #0]
 80041a8:	f000 f9dc 	bl	8004564 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80041ac:	4603      	mov	r3, r0
 80041ae:	4619      	mov	r1, r3
 80041b0:	4620      	mov	r0, r4
 80041b2:	f000 f9e2 	bl	800457a <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a04      	ldr	r2, [pc, #16]	; (80041cc <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 80041ba:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a04      	ldr	r2, [pc, #16]	; (80041d0 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 80041c0:	609a      	str	r2, [r3, #8]
	    }
	}
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd90      	pop	{r4, r7, pc}
 80041cc:	0800459f 	.word	0x0800459f
 80041d0:	080045c3 	.word	0x080045c3

080041d4 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 80041d4:	b590      	push	{r4, r7, lr}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	461a      	mov	r2, r3
 80041e2:	2300      	movs	r3, #0
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	6053      	str	r3, [r2, #4]
 80041e8:	6093      	str	r3, [r2, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fed0 	bl	8003f92 <_ZNSt14_Function_baseC1Ev>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80041f8:	6838      	ldr	r0, [r7, #0]
 80041fa:	f000 fa01 	bl	8004600 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8004204:	687c      	ldr	r4, [r7, #4]
 8004206:	6838      	ldr	r0, [r7, #0]
 8004208:	f000 fa0a 	bl	8004620 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 800420c:	4603      	mov	r3, r0
 800420e:	4619      	mov	r1, r3
 8004210:	4620      	mov	r0, r4
 8004212:	f000 fa10 	bl	8004636 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a04      	ldr	r2, [pc, #16]	; (800422c <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 800421a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a04      	ldr	r2, [pc, #16]	; (8004230 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 8004220:	609a      	str	r2, [r3, #8]
	}
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bd90      	pop	{r4, r7, pc}
 800422c:	0800465b 	.word	0x0800465b
 8004230:	08004679 	.word	0x08004679

08004234 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe f933 	bl	80024be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 8004262:	b580      	push	{r7, lr}
 8004264:	b086      	sub	sp, #24
 8004266:	af00      	add	r7, sp, #0
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	4613      	mov	r3, r2
 800426e:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8004270:	f107 0310 	add.w	r3, r7, #16
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fc52 	bl	8003b20 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 800427c:	88fa      	ldrh	r2, [r7, #6]
 800427e:	f107 0110 	add.w	r1, r7, #16
 8004282:	2300      	movs	r3, #0
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fa27 	bl	80046d8 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 800428a:	f107 0310 	add.w	r3, r7, #16
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fc56 	bl	8003b40 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 800429e:	b580      	push	{r7, lr}
 80042a0:	b086      	sub	sp, #24
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	4613      	mov	r3, r2
 80042aa:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 80042ac:	f107 0310 	add.w	r3, r7, #16
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fc34 	bl	8003b20 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80042b8:	88fa      	ldrh	r2, [r7, #6]
 80042ba:	f107 0110 	add.w	r1, r7, #16
 80042be:	2300      	movs	r3, #0
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fa37 	bl	8004734 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 80042c6:	f107 0310 	add.w	r3, r7, #16
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fc38 	bl	8003b40 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
	return _M_get();
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fa54 	bl	8004790 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80042e8:	4603      	mov	r3, r0
      }
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <_ZNK15CyphalInterface23send_cyphal_default_msgI5StateEEvPNT_4TypeEPhtS5_>:
    );
    (*transfer_id)++;
}

template <typename TypeAlias>
inline void CyphalInterface::send_cyphal_default_msg(
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b088      	sub	sp, #32
 80042f6:	af04      	add	r7, sp, #16
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	807b      	strh	r3, [r7, #2]
    typename TypeAlias::Type *obj,
    uint8_t buffer[],
    CanardPortID port,
    CanardTransferID *transfer_id
) const {
    send_cyphal<TypeAlias>(
 8004300:	887a      	ldrh	r2, [r7, #2]
 8004302:	23ff      	movs	r3, #255	; 0xff
 8004304:	9303      	str	r3, [sp, #12]
 8004306:	2300      	movs	r3, #0
 8004308:	9302      	str	r3, [sp, #8]
 800430a:	2304      	movs	r3, #4
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	4613      	mov	r3, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fa45 	bl	80047a8 <_ZNK15CyphalInterface11send_cyphalI5StateEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>
        transfer_id,
        CanardPriorityNominal,
        CanardTransferKindMessage,
        CANARD_NODE_ID_UNSET
    );
}
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <_ZNK15CyphalInterface23send_cyphal_default_msgI5HBeatEEvPNT_4TypeEPhtS5_>:
inline void CyphalInterface::send_cyphal_default_msg(
 8004326:	b580      	push	{r7, lr}
 8004328:	b088      	sub	sp, #32
 800432a:	af04      	add	r7, sp, #16
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	807b      	strh	r3, [r7, #2]
    send_cyphal<TypeAlias>(
 8004334:	887a      	ldrh	r2, [r7, #2]
 8004336:	23ff      	movs	r3, #255	; 0xff
 8004338:	9303      	str	r3, [sp, #12]
 800433a:	2300      	movs	r3, #0
 800433c:	9302      	str	r3, [sp, #8]
 800433e:	2304      	movs	r3, #4
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 fa79 	bl	8004844 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>
}
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <_ZN15CyphalInterface6createI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    UtilityConfig& utilities;
public:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create(
 800435a:	b590      	push	{r4, r7, lr}
 800435c:	b08b      	sub	sp, #44	; 0x2c
 800435e:	af02      	add	r7, sp, #8
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
 8004366:	460b      	mov	r3, r1
 8004368:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 800436a:	f107 030c 	add.w	r3, r7, #12
 800436e:	61fb      	str	r3, [r7, #28]
        auto provider  = std::unique_ptr<Provider>(Provider::template create<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config));
 8004370:	7afa      	ldrb	r2, [r7, #11]
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	69f8      	ldr	r0, [r7, #28]
 800437c:	f000 fab0 	bl	80048e0 <_ZN5G4CAN6createI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 8004380:	4602      	mov	r2, r0
 8004382:	f107 0310 	add.w	r3, r7, #16
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f000 faf6 	bl	800497a <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EEC1IS2_vEEPS0_>
    
        std::byte* interface_ptr = *inout_buffer;
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	61bb      	str	r3, [r7, #24]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config);
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	4619      	mov	r1, r3
 8004398:	200c      	movs	r0, #12
 800439a:	f7fe f884 	bl	80024a6 <_ZnwjPv>
 800439e:	4604      	mov	r4, r0
 80043a0:	7afb      	ldrb	r3, [r7, #11]
 80043a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a4:	4619      	mov	r1, r3
 80043a6:	4620      	mov	r0, r4
 80043a8:	f7fe f9ae 	bl	8002708 <_ZN15CyphalInterfaceC1EhR13UtilityConfig>
 80043ac:	617c      	str	r4, [r7, #20]

        interface->provider = std::move(provider);
 80043ae:	f107 0310 	add.w	r3, r7, #16
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fb12 	bl	80049dc <_ZSt4moveIRSt10unique_ptrI5G4CANSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80043b8:	4602      	mov	r2, r0
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	3304      	adds	r3, #4
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fb16 	bl	80049f2 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEaSI5G4CANS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
        return interface;
 80043c6:	697c      	ldr	r4, [r7, #20]
    }
 80043c8:	f107 0310 	add.w	r3, r7, #16
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fae3 	bl	8004998 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev>
        return interface;
 80043d2:	4623      	mov	r3, r4
    }
 80043d4:	4618      	mov	r0, r3
 80043d6:	3724      	adds	r7, #36	; 0x24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd90      	pop	{r4, r7, pc}

080043dc <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6839      	ldr	r1, [r7, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fb24 	bl	8004a38 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 80043fa:	b590      	push	{r4, r7, lr}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8004404:	687c      	ldr	r4, [r7, #4]
 8004406:	6838      	ldr	r0, [r7, #0]
 8004408:	f000 fb2e 	bl	8004a68 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 800440c:	4603      	mov	r3, r0
 800440e:	4619      	mov	r1, r3
 8004410:	4620      	mov	r0, r4
 8004412:	f000 fb34 	bl	8004a7e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8004416:	687b      	ldr	r3, [r7, #4]
      }
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bd90      	pop	{r4, r7, pc}

08004420 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
      { }
 8004428:	4a04      	ldr	r2, [pc, #16]	; (800443c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	08013590 	.word	0x08013590

08004440 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
      { }
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff ffe9 	bl	8004420 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800444e:	210c      	movs	r1, #12
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f009 fefa 	bl	800e24a <_ZdlPvj>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe f88f 	bl	800258e <_ZNKSt14_Function_base8_M_emptyEv>
 8004470:	4603      	mov	r3, r0
 8004472:	f083 0301 	eor.w	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe f87f 	bl	800258e <_ZNKSt14_Function_base8_M_emptyEv>
 8004490:	4603      	mov	r3, r0
 8004492:	f083 0301 	eor.w	r3, r3, #1
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fb06 	bl	8004abc <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80044b0:	4603      	mov	r3, r0
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fb08 	bl	8004ad8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fb10 	bl	8004af0 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fb11 	bl	8004b0c <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fb11 	bl	8004b26 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8004504:	4603      	mov	r3, r0
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x18>
 8004534:	2140      	movs	r1, #64	; 0x40
 8004536:	4618      	mov	r0, r3
 8004538:	f009 fe87 	bl	800e24a <_ZdlPvj>
      }
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	bf14      	ite	ne
 8004552:	2301      	movne	r3, #1
 8004554:	2300      	moveq	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800457a:	b590      	push	{r4, r7, lr}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004584:	6838      	ldr	r0, [r7, #0]
 8004586:	f7ff ffed 	bl	8004564 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 800458a:	4603      	mov	r3, r0
 800458c:	4622      	mov	r2, r4
 800458e:	4619      	mov	r1, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fad5 	bl	8004b40 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	bd90      	pop	{r4, r7, pc}

0800459e <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fae2 	bl	8004b70 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80045ac:	4603      	mov	r3, r0
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 faee 	bl	8004b90 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
      }
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80045c2:	b590      	push	{r4, r7, lr}
 80045c4:	b085      	sub	sp, #20
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	4613      	mov	r3, r2
 80045ce:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d109      	bne.n	80045ea <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80045d6:	68b8      	ldr	r0, [r7, #8]
 80045d8:	f000 faca 	bl	8004b70 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80045dc:	4604      	mov	r4, r0
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 fae9 	bl	8004bb6 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 80045e4:	4603      	mov	r3, r0
 80045e6:	601c      	str	r4, [r3, #0]
	    break;
 80045e8:	e005      	b.n	80045f6 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	461a      	mov	r2, r3
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 faed 	bl	8004bd0 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 80045f6:	2300      	movs	r3, #0
      }
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd90      	pop	{r4, r7, pc}

08004600 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	bf14      	ite	ne
 800460e:	2301      	movne	r3, #1
 8004610:	2300      	moveq	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8004636:	b590      	push	{r4, r7, lr}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004640:	6838      	ldr	r0, [r7, #0]
 8004642:	f7ff ffed 	bl	8004620 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004646:	4603      	mov	r3, r0
 8004648:	4622      	mov	r2, r4
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 faf9 	bl	8004c44 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bd90      	pop	{r4, r7, pc}

0800465a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fb06 	bl	8004c74 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8004668:	4603      	mov	r3, r0
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fb12 	bl	8004c94 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8004670:	bf00      	nop
      }
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	4613      	mov	r3, r2
 8004684:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d109      	bne.n	80046a0 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800468c:	68b8      	ldr	r0, [r7, #8]
 800468e:	f000 faf1 	bl	8004c74 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8004692:	4604      	mov	r4, r0
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fb0d 	bl	8004cb4 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 800469a:	4603      	mov	r3, r0
 800469c:	601c      	str	r4, [r3, #0]
	    break;
 800469e:	e005      	b.n	80046ac <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	461a      	mov	r2, r3
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fb10 	bl	8004ccc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 80046ac:	2300      	movs	r3, #0
      }
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd90      	pop	{r4, r7, pc}
	...

080046b8 <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4618      	mov	r0, r3
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	08013550 	.word	0x08013550

080046d8 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	4611      	mov	r1, r2
 80046e4:	461a      	mov	r2, r3
 80046e6:	460b      	mov	r3, r1
 80046e8:	80fb      	strh	r3, [r7, #6]
 80046ea:	4613      	mov	r3, r2
 80046ec:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface) {
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ffe1 	bl	80046b8 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80046f6:	4a0e      	ldr	r2, [pc, #56]	; (8004730 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x58>)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3308      	adds	r3, #8
 8004700:	f44f 720a 	mov.w	r2, #552	; 0x228
 8004704:	2100      	movs	r1, #0
 8004706:	4618      	mov	r0, r3
 8004708:	f00a fe7b 	bl	800f402 <memset>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff fa03 	bl	8003b20 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 800471a:	797a      	ldrb	r2, [r7, #5]
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	4619      	mov	r1, r3
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 fb0d 	bl	8004d40 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	08013540 	.word	0x08013540

08004734 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	4611      	mov	r1, r2
 8004740:	461a      	mov	r2, r3
 8004742:	460b      	mov	r3, r1
 8004744:	80fb      	strh	r3, [r7, #6]
 8004746:	4613      	mov	r3, r2
 8004748:	717b      	strb	r3, [r7, #5]
    ): interface(interface) {
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff ffb3 	bl	80046b8 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8004752:	4a0e      	ldr	r2, [pc, #56]	; (800478c <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x58>)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3308      	adds	r3, #8
 800475c:	f44f 720a 	mov.w	r2, #552	; 0x228
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f00a fe4d 	bl	800f402 <memset>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff f9d5 	bl	8003b20 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8004776:	797a      	ldrb	r2, [r7, #5]
 8004778:	88fb      	ldrh	r3, [r7, #6]
 800477a:	4619      	mov	r1, r3
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fafd 	bl	8004d7c <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	08013520 	.word	0x08013520

08004790 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fb0d 	bl	8004db8 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800479e:	4603      	mov	r3, r0
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <_ZNK15CyphalInterface11send_cyphalI5StateEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>:
inline void CyphalInterface::send_cyphal(
 80047a8:	b5b0      	push	{r4, r5, r7, lr}
 80047aa:	b08c      	sub	sp, #48	; 0x30
 80047ac:	af04      	add	r7, sp, #16
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80047b6:	2340      	movs	r3, #64	; 0x40
 80047b8:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 80047ba:	f107 031c 	add.w	r3, r7, #28
 80047be:	461a      	mov	r2, r3
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	68b8      	ldr	r0, [r7, #8]
 80047c4:	f7ff f8b7 	bl	8003936 <reg_udral_physics_kinematics_cartesian_State_0_1_serialize_>
 80047c8:	4603      	mov	r3, r0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	09db      	lsrs	r3, r3, #7
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <_ZNK15CyphalInterface11send_cyphalI5StateEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x38>
        utilities.error_handler();
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	3310      	adds	r3, #16
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 faf8 	bl	8004dd0 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80047e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047e4:	753b      	strb	r3, [r7, #20]
 80047e6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80047ea:	757b      	strb	r3, [r7, #21]
 80047ec:	887b      	ldrh	r3, [r7, #2]
 80047ee:	82fb      	strh	r3, [r7, #22]
 80047f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80047f4:	763b      	strb	r3, [r7, #24]
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + DEFAULT_TIMEOUT_MICROS,
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fafb 	bl	8004dfc <_ZNKSt8functionIFyvEEclEv>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
    push(
 800480a:	490d      	ldr	r1, [pc, #52]	; (8004840 <_ZNK15CyphalInterface11send_cyphalI5StateEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x98>)
 800480c:	1854      	adds	r4, r2, r1
 800480e:	f143 0500 	adc.w	r5, r3, #0
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	9202      	str	r2, [sp, #8]
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	f107 0314 	add.w	r3, r7, #20
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	4622      	mov	r2, r4
 8004822:	462b      	mov	r3, r5
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f006 ff09 	bl	800b63c <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	3301      	adds	r3, #1
 8004830:	b2da      	uxtb	r2, r3
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	701a      	strb	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	3720      	adds	r7, #32
 800483a:	46bd      	mov	sp, r7
 800483c:	bdb0      	pop	{r4, r5, r7, pc}
 800483e:	bf00      	nop
 8004840:	000f4240 	.word	0x000f4240

08004844 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>:
inline void CyphalInterface::send_cyphal(
 8004844:	b5b0      	push	{r4, r5, r7, lr}
 8004846:	b08c      	sub	sp, #48	; 0x30
 8004848:	af04      	add	r7, sp, #16
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8004852:	2307      	movs	r3, #7
 8004854:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8004856:	f107 031c 	add.w	r3, r7, #28
 800485a:	461a      	mov	r2, r3
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	68b8      	ldr	r0, [r7, #8]
 8004860:	f7fe fa40 	bl	8002ce4 <uavcan_node_Heartbeat_1_0_serialize_>
 8004864:	4603      	mov	r3, r0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	09db      	lsrs	r3, r3, #7
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x38>
        utilities.error_handler();
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	3310      	adds	r3, #16
 8004876:	4618      	mov	r0, r3
 8004878:	f000 faaa 	bl	8004dd0 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 800487c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004880:	753b      	strb	r3, [r7, #20]
 8004882:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004886:	757b      	strb	r3, [r7, #21]
 8004888:	887b      	ldrh	r3, [r7, #2]
 800488a:	82fb      	strh	r3, [r7, #22]
 800488c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004890:	763b      	strb	r3, [r7, #24]
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + DEFAULT_TIMEOUT_MICROS,
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 faad 	bl	8004dfc <_ZNKSt8functionIFyvEEclEv>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
    push(
 80048a6:	490d      	ldr	r1, [pc, #52]	; (80048dc <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x98>)
 80048a8:	1854      	adds	r4, r2, r1
 80048aa:	f143 0500 	adc.w	r5, r3, #0
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	9202      	str	r2, [sp, #8]
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	f107 0314 	add.w	r3, r7, #20
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	4622      	mov	r2, r4
 80048be:	462b      	mov	r3, r5
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f006 febb 	bl	800b63c <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	3301      	adds	r3, #1
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	701a      	strb	r2, [r3, #0]
}
 80048d2:	bf00      	nop
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bdb0      	pop	{r4, r5, r7, pc}
 80048da:	bf00      	nop
 80048dc:	000f4240 	.word	0x000f4240

080048e0 <_ZN5G4CAN6createI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create(
 80048e0:	b590      	push	{r4, r7, lr}
 80048e2:	b089      	sub	sp, #36	; 0x24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem), args..., utilities);
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	4619      	mov	r1, r3
 80048fa:	2008      	movs	r0, #8
 80048fc:	f7fd fdd3 	bl	80024a6 <_ZnwjPv>
 8004900:	4604      	mov	r4, r0
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	4413      	add	r3, r2
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800490e:	4619      	mov	r1, r3
 8004910:	4620      	mov	r0, r4
 8004912:	f7fd ff2d 	bl	8002770 <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 8004916:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	3308      	adds	r3, #8
 800491c:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len / 2, utilities);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	4619      	mov	r1, r3
 8004922:	2044      	movs	r0, #68	; 0x44
 8004924:	f7fd fdbf 	bl	80024a6 <_ZnwjPv>
 8004928:	4604      	mov	r4, r0
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	085a      	lsrs	r2, r3, #1
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	4620      	mov	r0, r4
 8004934:	f7fd ff00 	bl	8002738 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 8004938:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	79fa      	ldrb	r2, [r7, #7]
 800493e:	69b9      	ldr	r1, [r7, #24]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fa75 	bl	8004e30 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	601a      	str	r2, [r3, #0]
        return ptr;
 8004950:	693b      	ldr	r3, [r7, #16]
    }
 8004952:	4618      	mov	r0, r3
 8004954:	3724      	adds	r7, #36	; 0x24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd90      	pop	{r4, r7, pc}

0800495a <_ZNSt15__uniq_ptr_dataI5G4CANSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f000 faa4 	bl	8004eb8 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EEC1EPS0_>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6839      	ldr	r1, [r7, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff ffe6 	bl	800495a <_ZNSt15__uniq_ptr_dataI5G4CANSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fa9c 	bl	8004ee0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 80049a8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00c      	beq.n	80049cc <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 faa1 	bl	8004efa <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>
 80049b8:	4604      	mov	r4, r0
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 faaa 	bl	8004f14 <_ZSt4moveIRP5G4CANEONSt16remove_referenceIT_E4typeEOS4_>
 80049c0:	4603      	mov	r3, r0
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4619      	mov	r1, r3
 80049c6:	4620      	mov	r0, r4
 80049c8:	f000 faaf 	bl	8004f2a <_ZNKSt14default_deleteI5G4CANEclEPS0_>
	__ptr = pointer();
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
      }
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd90      	pop	{r4, r7, pc}

080049dc <_ZSt4moveIRSt10unique_ptrI5G4CANSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEaSI5G4CANS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 80049fc:	6838      	ldr	r0, [r7, #0]
 80049fe:	f000 fab8 	bl	8004f72 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE7releaseEv>
 8004a02:	4603      	mov	r3, r0
 8004a04:	4619      	mov	r1, r3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa9f 	bl	8004f4a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8004a0c:	6838      	ldr	r0, [r7, #0]
 8004a0e:	f000 fa74 	bl	8004efa <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>
 8004a12:	4603      	mov	r3, r0
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fab9 	bl	8004f8c <_ZSt7forwardISt14default_deleteI5G4CANEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	f107 030c 	add.w	r3, r7, #12
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fabd 	bl	8004fa2 <_ZNSt14default_deleteI19AbstractCANProviderEC1I5G4CANvEERKS_IT_E>
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff fd63 	bl	80044f4 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8004a2e:	687b      	ldr	r3, [r7, #4]
	}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8004a38:	b590      	push	{r4, r7, lr}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fab2 	bl	8004fba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8004a56:	6839      	ldr	r1, [r7, #0]
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fabd 	bl	8004fd8 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd90      	pop	{r4, r7, pc}

08004a68 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4618      	mov	r0, r3
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 8004a88:	6838      	ldr	r0, [r7, #0]
 8004a8a:	f000 fab0 	bl	8004fee <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	f107 0308 	add.w	r3, r7, #8
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fab4 	bl	8005004 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8004a9c:	f107 0308 	add.w	r3, r7, #8
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 facc 	bl	8005040 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8004aa8:	f107 0308 	add.w	r3, r7, #8
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fe ffee 	bl	8003a8e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8004ab2:	687b      	ldr	r3, [r7, #4]
      }
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fad1 	bl	800506e <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8004acc:	4603      	mov	r3, r0
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fad1 	bl	8005088 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fac1 	bl	800509e <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fac0 	bl	80050b6 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004b36:	4603      	mov	r3, r0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8004b4c:	68b8      	ldr	r0, [r7, #8]
 8004b4e:	f7ff fd09 	bl	8004564 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004b52:	4604      	mov	r4, r0
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7fd fcf1 	bl	800253c <_ZNSt9_Any_data9_M_accessEv>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	2004      	movs	r0, #4
 8004b60:	f7fd fca1 	bl	80024a6 <_ZnwjPv>
 8004b64:	4603      	mov	r3, r0
 8004b66:	601c      	str	r4, [r3, #0]
	  }
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd90      	pop	{r4, r7, pc}

08004b70 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 faa8 	bl	80050ce <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 8004b7e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fab0 	bl	80050e6 <_ZSt11__addressofIKPFyvEEPT_RS3_>
 8004b86:	4603      	mov	r3, r0
	}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004b90:	b590      	push	{r4, r7, lr}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 faaf 	bl	80050fc <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f000 fab5 	bl	8005112 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd90      	pop	{r4, r7, pc}

08004bb6 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access()
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fd fcbc 	bl	800253c <_ZNSt9_Any_data9_M_accessEv>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d82a      	bhi.n	8004c3a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004bfd 	.word	0x08004bfd
 8004bf0:	08004c0b 	.word	0x08004c0b
 8004bf4:	08004c1f 	.word	0x08004c1f
 8004bf8:	08004c31 	.word	0x08004c31
	      __dest._M_access<const type_info*>() = nullptr;
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fa9a 	bl	8005136 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
	      break;
 8004c08:	e017      	b.n	8004c3a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004c0a:	68b8      	ldr	r0, [r7, #8]
 8004c0c:	f7ff ffb0 	bl	8004b70 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8004c10:	4604      	mov	r4, r0
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f7ff ffcf 	bl	8004bb6 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	601c      	str	r4, [r3, #0]
	      break;
 8004c1c:	e00d      	b.n	8004c3a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8004c1e:	68b8      	ldr	r0, [r7, #8]
 8004c20:	f7ff ffa6 	bl	8004b70 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8004c24:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8004c26:	4619      	mov	r1, r3
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fa90 	bl	800514e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8004c2e:	e004      	b.n	8004c3a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8004c30:	4621      	mov	r1, r4
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fa9d 	bl	8005172 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004c38:	bf00      	nop
	  return false;
 8004c3a:	2300      	movs	r3, #0
	}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd90      	pop	{r4, r7, pc}

08004c44 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8004c50:	68b8      	ldr	r0, [r7, #8]
 8004c52:	f7ff fce5 	bl	8004620 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004c56:	4604      	mov	r4, r0
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7fd fc6f 	bl	800253c <_ZNSt9_Any_data9_M_accessEv>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4619      	mov	r1, r3
 8004c62:	2004      	movs	r0, #4
 8004c64:	f7fd fc1f 	bl	80024a6 <_ZnwjPv>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	601c      	str	r4, [r3, #0]
	  }
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd90      	pop	{r4, r7, pc}

08004c74 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fa84 	bl	800518a <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8004c82:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fa8c 	bl	80051a2 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 8004c8a:	4603      	mov	r3, r0
	}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004c94:	b590      	push	{r4, r7, lr}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fa8b 	bl	80051b8 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f000 fa91 	bl	80051ce <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd90      	pop	{r4, r7, pc}

08004cb4 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7fd fc3d 	bl	800253c <_ZNSt9_Any_data9_M_accessEv>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8004ccc:	b590      	push	{r4, r7, lr}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d82a      	bhi.n	8004d36 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004cf9 	.word	0x08004cf9
 8004cec:	08004d07 	.word	0x08004d07
 8004cf0:	08004d1b 	.word	0x08004d1b
 8004cf4:	08004d2d 	.word	0x08004d2d
	      __dest._M_access<const type_info*>() = nullptr;
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fa1c 	bl	8005136 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
	      break;
 8004d04:	e017      	b.n	8004d36 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004d06:	68b8      	ldr	r0, [r7, #8]
 8004d08:	f7ff ffb4 	bl	8004c74 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff ffd0 	bl	8004cb4 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8004d14:	4603      	mov	r3, r0
 8004d16:	601c      	str	r4, [r3, #0]
	      break;
 8004d18:	e00d      	b.n	8004d36 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8004d1a:	68b8      	ldr	r0, [r7, #8]
 8004d1c:	f7ff ffaa 	bl	8004c74 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8004d20:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8004d22:	4619      	mov	r1, r3
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fa61 	bl	80051ec <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8004d2a:	e004      	b.n	8004d36 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fa6e 	bl	8005210 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004d34:	bf00      	nop
	  return false;
 8004d36:	2300      	movs	r3, #0
	}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd90      	pop	{r4, r7, pc}

08004d40 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	807b      	strh	r3, [r7, #2]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fabc 	bl	80042da <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3308      	adds	r3, #8
 8004d66:	787a      	ldrb	r2, [r7, #1]
 8004d68:	8879      	ldrh	r1, [r7, #2]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	220c      	movs	r2, #12
 8004d70:	f006 fc9e 	bl	800b6b0 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	807b      	strh	r3, [r7, #2]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fa9e 	bl	80042da <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3308      	adds	r3, #8
 8004da2:	787a      	ldrb	r2, [r7, #1]
 8004da4:	8879      	ldrh	r1, [r7, #2]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	220c      	movs	r2, #12
 8004dac:	f006 fc80 	bl	800b6b0 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fd fbd7 	bl	800258e <_ZNKSt14_Function_base8_M_emptyEv>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 8004de6:	f009 fa43 	bl	800e270 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	4610      	mov	r0, r2
 8004df2:	4798      	blx	r3
 8004df4:	bf00      	nop
      }
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fd fbc1 	bl	800258e <_ZNKSt14_Function_base8_M_emptyEv>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 8004e12:	f009 fa2d 	bl	800e270 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	4798      	blx	r3
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
      }
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8004e30:	b5b0      	push	{r4, r5, r7, lr}
 8004e32:	b08e      	sub	sp, #56	; 0x38
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004e38:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8004e40:	481a      	ldr	r0, [pc, #104]	; (8004eac <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8004e42:	f7ff f90f 	bl	8004064 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e50:	3310      	adds	r3, #16
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff ffbc 	bl	8004dd0 <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 8004e58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 f9f2 	bl	8005248 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8004e64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4810      	ldr	r0, [pc, #64]	; (8004eac <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8004e6c:	f000 fa1d 	bl	80052aa <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 8004e70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 f9f6 	bl	8005266 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 8004e7a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8004e7c:	463b      	mov	r3, r7
 8004e7e:	4a0c      	ldr	r2, [pc, #48]	; (8004eb0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 8004e80:	490c      	ldr	r1, [pc, #48]	; (8004eb4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 8004e82:	4618      	mov	r0, r3
 8004e84:	f008 fede 	bl	800dc44 <canardInit>
 8004e88:	3420      	adds	r4, #32
 8004e8a:	463d      	mov	r5, r7
 8004e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8004ea2:	bf00      	nop
 8004ea4:	3738      	adds	r7, #56	; 0x38
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	200005b4 	.word	0x200005b4
 8004eb0:	08002681 	.word	0x08002681
 8004eb4:	0800263d 	.word	0x0800263d

08004eb8 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8004eb8:	b590      	push	{r4, r7, lr}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fa13 	bl	80052f0 <_ZNSt5tupleIJP5G4CANSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8004eca:	683c      	ldr	r4, [r7, #0]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f807 	bl	8004ee0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	601c      	str	r4, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd90      	pop	{r4, r7, pc}

08004ee0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fa0d 	bl	800530a <_ZSt3getILj0EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fa0d 	bl	8005324 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE10_M_deleterEv>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <_ZSt4moveIRP5G4CANEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <_ZNKSt14default_deleteI5G4CANEclEPS0_>:
      operator()(_Tp* __ptr) const
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <_ZNKSt14default_deleteI5G4CANEclEPS0_+0x18>
 8004f3a:	2144      	movs	r1, #68	; 0x44
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f009 f984 	bl	800e24a <_ZdlPvj>
      }
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8004f4a:	b590      	push	{r4, r7, lr}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8004f54:	687c      	ldr	r4, [r7, #4]
 8004f56:	463b      	mov	r3, r7
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff fad8 	bl	800450e <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4619      	mov	r1, r3
 8004f64:	4620      	mov	r0, r4
 8004f66:	f000 f9ea 	bl	800533e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>
      }
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd90      	pop	{r4, r7, pc}

08004f72 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 f9fe 	bl	800537e <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE7releaseEv>
 8004f82:	4603      	mov	r3, r0
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <_ZSt7forwardISt14default_deleteI5G4CANEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <_ZNSt14default_deleteI19AbstractCANProviderEC1I5G4CANvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f9fb 	bl	80053c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
	{ }
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3304      	adds	r3, #4
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe fd45 	bl	8003aaa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	1d1a      	adds	r2, r3, #4
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f000 f9e2 	bl	80053f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
      }
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f9ef 	bl	8005434 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	1d1a      	adds	r2, r3, #4
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	3304      	adds	r3, #4
 800505e:	4619      	mov	r1, r3
 8005060:	4610      	mov	r0, r2
 8005062:	f000 f9c7 	bl	80053f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4618      	mov	r0, r3
 800507a:	f000 f9fa 	bl	8005472 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800507e:	4603      	mov	r3, r0
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4618      	mov	r0, r3
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f9ef 	bl	800548a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 80050ac:	4603      	mov	r3, r0
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f9f0 	bl	80054a4 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fd fa3b 	bl	8002552 <_ZNKSt9_Any_data9_M_accessEv>
 80050dc:	4603      	mov	r3, r0
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8005112:	b580      	push	{r7, lr}
 8005114:	b082      	sub	sp, #8
 8005116:	af00      	add	r7, sp, #0
 8005118:	7138      	strb	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800511c:	6838      	ldr	r0, [r7, #0]
 800511e:	f7ff ffed 	bl	80050fc <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005122:	4603      	mov	r3, r0
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4798      	blx	r3
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4610      	mov	r0, r2
 800512e:	4619      	mov	r1, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fd f9fc 	bl	800253c <_ZNSt9_Any_data9_M_accessEv>
 8005144:	4603      	mov	r3, r0
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800514e:	b590      	push	{r4, r7, lr}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8005158:	6838      	ldr	r0, [r7, #0]
 800515a:	f000 f9af 	bl	80054bc <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 800515e:	4603      	mov	r3, r0
 8005160:	4622      	mov	r2, r4
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f9b4 	bl	80054d2 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	bd90      	pop	{r4, r7, pc}

08005172 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f9c1 	bl	8005504 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fd f9dd 	bl	8002552 <_ZNKSt9_Any_data9_M_accessEv>
 8005198:	4603      	mov	r3, r0
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	7138      	strb	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80051d8:	6838      	ldr	r0, [r7, #0]
 80051da:	f7ff ffed 	bl	80051b8 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80051de:	4603      	mov	r3, r0
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4798      	blx	r3
 80051e4:	bf00      	nop
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80051f6:	6838      	ldr	r0, [r7, #0]
 80051f8:	f000 f990 	bl	800551c <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80051fc:	4603      	mov	r3, r0
 80051fe:	4622      	mov	r2, r4
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f995 	bl	8005532 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	bd90      	pop	{r4, r7, pc}

08005210 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f9a2 	bl	8005564 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	4611      	mov	r1, r2
 8005238:	4618      	mov	r0, r3
 800523a:	f000 f99f 	bl	800557c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4618      	mov	r0, r3
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff ffe6 	bl	8005228 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8005266:	b590      	push	{r4, r7, lr}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 f997 	bl	80055a4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8005276:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00c      	beq.n	800529a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f99c 	bl	80055be <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8005286:	4604      	mov	r4, r0
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f9a5 	bl	80055d8 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 800528e:	4603      	mov	r3, r0
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4619      	mov	r1, r3
 8005294:	4620      	mov	r0, r4
 8005296:	f000 f9aa 	bl	80055ee <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
      }
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd90      	pop	{r4, r7, pc}

080052aa <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 80052b4:	6838      	ldr	r0, [r7, #0]
 80052b6:	f000 f9bf 	bl	8005638 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 80052ba:	4603      	mov	r3, r0
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f9a6 	bl	8005610 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 80052c4:	6838      	ldr	r0, [r7, #0]
 80052c6:	f000 f97a 	bl	80055be <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 80052ca:	4603      	mov	r3, r0
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f9cd 	bl	800566c <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 80052d2:	4602      	mov	r2, r0
 80052d4:	f107 030c 	add.w	r3, r7, #12
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f9d1 	bl	8005682 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f9b6 	bl	8005652 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 80052e6:	687b      	ldr	r3, [r7, #4]
	}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <_ZNSt5tupleIJP5G4CANSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f9cd 	bl	800569a <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEEC1Ev>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <_ZSt3getILj0EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4618      	mov	r0, r3
 8005316:	f000 f9d0 	bl	80056ba <_ZSt12__get_helperILj0EP5G4CANJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800531a:	4603      	mov	r3, r0
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f9cf 	bl	80056d2 <_ZSt3getILj1EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8005334:	4603      	mov	r3, r0
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800533e:	b590      	push	{r4, r7, lr}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff f8c6 	bl	80044da <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800534e:	4603      	mov	r3, r0
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8005354:	683c      	ldr	r4, [r7, #0]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff f8bf 	bl	80044da <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800535c:	4603      	mov	r3, r0
 800535e:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fbdd 	bl	8004b26 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 800536c:	4603      	mov	r3, r0
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff f8d7 	bl	8004524 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
      }
 8005376:	bf00      	nop
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	bd90      	pop	{r4, r7, pc}

0800537e <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fdaa 	bl	8004ee0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 800538c:	4603      	mov	r3, r0
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff fda4 	bl	8004ee0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8005398:	4603      	mov	r3, r0
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
	return __p;
 800539e:	68fb      	ldr	r3, [r7, #12]
      }
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fe fea9 	bl	800410c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80053c4:	b590      	push	{r4, r7, lr}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80053d4:	2010      	movs	r0, #16
 80053d6:	f008 ff3a 	bl	800e24e <_Znwj>
 80053da:	4603      	mov	r3, r0
 80053dc:	461c      	mov	r4, r3
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	4620      	mov	r0, r4
 80053e2:	f000 f983 	bl	80056ec <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	601c      	str	r4, [r3, #0]
	}
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd90      	pop	{r4, r7, pc}

080053f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	601a      	str	r2, [r3, #0]
      }
 8005412:	bf00      	nop
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff ffed 	bl	800541e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8005444:	4603      	mov	r3, r0
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800544a:	6838      	ldr	r0, [r7, #0]
 800544c:	f7ff ffe7 	bl	800541e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8005450:	4603      	mov	r3, r0
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8005458:	f107 030c 	add.w	r3, r7, #12
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff ffde 	bl	800541e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8005462:	4603      	mov	r3, r0
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	601a      	str	r2, [r3, #0]
    }
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f94c 	bl	8005718 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 8005480:	4603      	mov	r3, r0
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800548a:	b580      	push	{r7, lr}
 800548c:	b082      	sub	sp, #8
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4618      	mov	r0, r3
 8005496:	f000 f94c 	bl	8005732 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 800549a:	4603      	mov	r3, r0
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f94b 	bl	8005748 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80054d2:	b590      	push	{r4, r7, lr}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80054de:	68b8      	ldr	r0, [r7, #8]
 80054e0:	f7ff ffec 	bl	80054bc <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80054e4:	4603      	mov	r3, r0
 80054e6:	681c      	ldr	r4, [r3, #0]
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7fd f827 	bl	800253c <_ZNSt9_Any_data9_M_accessEv>
 80054ee:	4603      	mov	r3, r0
 80054f0:	4619      	mov	r1, r3
 80054f2:	2004      	movs	r0, #4
 80054f4:	f7fc ffd7 	bl	80024a6 <_ZnwjPv>
 80054f8:	4603      	mov	r3, r0
 80054fa:	601c      	str	r4, [r3, #0]
	  }
 80054fc:	bf00      	nop
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	bd90      	pop	{r4, r7, pc}

08005504 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access()
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7fd f815 	bl	800253c <_ZNSt9_Any_data9_M_accessEv>
 8005512:	4603      	mov	r3, r0
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4618      	mov	r0, r3
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8005532:	b590      	push	{r4, r7, lr}
 8005534:	b085      	sub	sp, #20
 8005536:	af00      	add	r7, sp, #0
 8005538:	60f8      	str	r0, [r7, #12]
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800553e:	68b8      	ldr	r0, [r7, #8]
 8005540:	f7ff ffec 	bl	800551c <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005544:	4603      	mov	r3, r0
 8005546:	681c      	ldr	r4, [r3, #0]
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f7fc fff7 	bl	800253c <_ZNSt9_Any_data9_M_accessEv>
 800554e:	4603      	mov	r3, r0
 8005550:	4619      	mov	r1, r3
 8005552:	2004      	movs	r0, #4
 8005554:	f7fc ffa7 	bl	80024a6 <_ZnwjPv>
 8005558:	4603      	mov	r3, r0
 800555a:	601c      	str	r4, [r3, #0]
	  }
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	bd90      	pop	{r4, r7, pc}

08005564 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fc ffe5 	bl	800253c <_ZNSt9_Any_data9_M_accessEv>
 8005572:	4603      	mov	r3, r0
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800557c:	b590      	push	{r4, r7, lr}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 f8e9 	bl	8005760 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800558e:	683c      	ldr	r4, [r7, #0]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f807 	bl	80055a4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8005596:	4603      	mov	r3, r0
 8005598:	601c      	str	r4, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd90      	pop	{r4, r7, pc}

080055a4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 f8e3 	bl	800577a <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80055b4:	4603      	mov	r3, r0
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 f8e3 	bl	8005794 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 80055ce:	4603      	mov	r3, r0
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d004      	beq.n	8005608 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	320c      	adds	r2, #12
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	4790      	blx	r2
      }
 8005608:	bf00      	nop
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      reset(pointer __p = pointer()) noexcept
 8005610:	b590      	push	{r4, r7, lr}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
	_M_t.reset(std::move(__p));
 800561a:	687c      	ldr	r4, [r7, #4]
 800561c:	463b      	mov	r3, r7
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f8c5 	bl	80057ae <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8005624:	4603      	mov	r3, r0
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4619      	mov	r1, r3
 800562a:	4620      	mov	r0, r4
 800562c:	f000 f8ca 	bl	80057c4 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	bd90      	pop	{r4, r7, pc}

08005638 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 f8de 	bl	8005804 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8005648:	4603      	mov	r3, r0
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f8e6 	bl	800582e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8005662:	4603      	mov	r3, r0
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4618      	mov	r0, r3
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8d0 	bl	8005848 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEEC1Ev>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 f8d8 	bl	8005860 <_ZNSt10_Head_baseILj0EP5G4CANLb0EEC1Ev>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <_ZSt12__get_helperILj0EP5G4CANJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f8da 	bl	800587c <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEE7_M_headERS4_>
 80056c8:	4603      	mov	r3, r0
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <_ZSt3getILj1EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f8db 	bl	8005896 <_ZSt12__get_helperILj1ESt14default_deleteI5G4CANEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80056e0:	4603      	mov	r3, r0
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 f8d9 	bl	80058b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80056fe:	4a05      	ldr	r2, [pc, #20]	; (8005714 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	60da      	str	r2, [r3, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	080134f4 	.word	0x080134f4

08005718 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f8da 	bl	80058dc <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 8005728:	4603      	mov	r3, r0
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f8ce 	bl	80058f2 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 8005756:	4603      	mov	r3, r0
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 f8cc 	bl	8005908 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4618      	mov	r0, r3
 8005786:	f000 f8cf 	bl	8005928 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800578a:	4603      	mov	r3, r0
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f8ce 	bl	8005940 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80057a4:	4603      	mov	r3, r0
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 80057c4:	b590      	push	{r4, r7, lr}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f8c2 	bl	8005958 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80057d4:	4603      	mov	r3, r0
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80057da:	683c      	ldr	r4, [r7, #0]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f8bb 	bl	8005958 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80057e2:	4603      	mov	r3, r0
 80057e4:	601c      	str	r4, [r3, #0]
	if (__old_p)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f81e 	bl	800582e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 80057f2:	4603      	mov	r3, r0
 80057f4:	68f9      	ldr	r1, [r7, #12]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f8bb 	bl	8005972 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	bd90      	pop	{r4, r7, pc}

08005804 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff fec9 	bl	80055a4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8005812:	4603      	mov	r3, r0
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fec3 	bl	80055a4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800581e:	4603      	mov	r3, r0
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
	return __p;
 8005824:	68fb      	ldr	r3, [r7, #12]
      }
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800582e:	b580      	push	{r7, lr}
 8005830:	b082      	sub	sp, #8
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4618      	mov	r0, r3
 800583a:	f000 f8ab 	bl	8005994 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800583e:	4603      	mov	r3, r0
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEEC1Ev>:
      _Tuple_impl()
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f8ab 	bl	80059ac <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EEC1Ev>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <_ZNSt10_Head_baseILj0EP5G4CANLb0EEC1Ev>:
      constexpr _Head_base()
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f89b 	bl	80059c2 <_ZNSt10_Head_baseILj0EP5G4CANLb0EE7_M_headERS2_>
 800588c:	4603      	mov	r3, r0
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <_ZSt12__get_helperILj1ESt14default_deleteI5G4CANEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f89a 	bl	80059d8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEE7_M_headERS3_>
 80058a4:	4603      	mov	r3, r0
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 80058b8:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	605a      	str	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	609a      	str	r2, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4618      	mov	r0, r3
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	08013590 	.word	0x08013590

080058dc <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f86d 	bl	80059f0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4618      	mov	r0, r3
 800591a:	f000 f875 	bl	8005a08 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f877 	bl	8005a24 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8005936:	4603      	mov	r3, r0
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f878 	bl	8005a3e <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800594e:	4603      	mov	r3, r0
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 f877 	bl	8005a56 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8005968:	4603      	mov	r3, r0
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d004      	beq.n	800598c <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	320c      	adds	r2, #12
 8005986:	6812      	ldr	r2, [r2, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	4790      	blx	r2
      }
 800598c:	bf00      	nop
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f867 	bl	8005a70 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80059a2:	4603      	mov	r3, r0
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EEC1Ev>:
      constexpr _Head_base()
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4618      	mov	r0, r3
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <_ZNSt10_Head_baseILj0EP5G4CANLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4618      	mov	r0, r3
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f851 	bl	8005a88 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EE7_M_headERS3_>
 80059e6:	4603      	mov	r3, r0
 80059e8:	4618      	mov	r0, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f850 	bl	8005a9e <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 f840 	bl	8005ab4 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 8005a34:	4603      	mov	r3, r0
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f83f 	bl	8005aca <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 f83e 	bl	8005ae2 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005a66:	4603      	mov	r3, r0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f83e 	bl	8005afa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b082      	sub	sp, #8
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f81d 	bl	8005b12 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f81c 	bl	8005b28 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8005af0:	4603      	mov	r3, r0
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f81d 	bl	8005b42 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f810 	bl	8005b58 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	4a05      	ldr	r2, [pc, #20]	; (8005b90 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fe fc4d 	bl	8004420 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	080134f4 	.word	0x080134f4

08005b94 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff ffe7 	bl	8005b70 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005ba2:	2110      	movs	r1, #16
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f008 fb50 	bl	800e24a <_ZdlPvj>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3310      	adds	r3, #16
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fc fd02 	bl	80025ca <_ZNSt8functionIFvvEED1Ev>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fc fcf1 	bl	80025b0 <_ZNSt8functionIFyvEED1Ev>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <_Z41__static_initialization_and_destruction_0ii>:

}
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	; 0x28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d122      	bne.n	8005c2e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d11d      	bne.n	8005c2e <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 8005bf2:	f107 0308 	add.w	r3, r7, #8
 8005bf6:	4917      	ldr	r1, [pc, #92]	; (8005c54 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fabb 	bl	8004174 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 8005bfe:	f107 0318 	add.w	r3, r7, #24
 8005c02:	4915      	ldr	r1, [pc, #84]	; (8005c58 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fe fae5 	bl	80041d4 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 8005c0a:	f107 0218 	add.w	r2, r7, #24
 8005c0e:	f107 0308 	add.w	r3, r7, #8
 8005c12:	4619      	mov	r1, r3
 8005c14:	4811      	ldr	r0, [pc, #68]	; (8005c5c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005c16:	f7fc fce5 	bl	80025e4 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 8005c1a:	f107 0318 	add.w	r3, r7, #24
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fc fcd3 	bl	80025ca <_ZNSt8functionIFvvEED1Ev>
 8005c24:	f107 0308 	add.w	r3, r7, #8
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fc fcc1 	bl	80025b0 <_ZNSt8functionIFyvEED1Ev>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d105      	bne.n	8005c4a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8005c3e:	4807      	ldr	r0, [pc, #28]	; (8005c5c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005c40:	f7ff ffb8 	bl	8005bb4 <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 8005c44:	4806      	ldr	r0, [pc, #24]	; (8005c60 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005c46:	f7fd ff7b 	bl	8003b40 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8005c4a:	bf00      	nop
 8005c4c:	3728      	adds	r7, #40	; 0x28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	08003ad3 	.word	0x08003ad3
 8005c58:	08003ac7 	.word	0x08003ac7
 8005c5c:	20000418 	.word	0x20000418
 8005c60:	20000410 	.word	0x20000410

08005c64 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8005c64:	b590      	push	{r4, r7, lr}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68dc      	ldr	r4, [r3, #12]
 8005c70:	2c00      	cmp	r4, #0
 8005c72:	d006      	beq.n	8005c82 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 8005c74:	4620      	mov	r0, r4
 8005c76:	f7ff fb97 	bl	80053a8 <_ZN15CyphalInterfaceD1Ev>
 8005c7a:	210c      	movs	r1, #12
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f008 fae4 	bl	800e24a <_ZdlPvj>
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd90      	pop	{r4, r7, pc}

08005c8a <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b082      	sub	sp, #8
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
      { delete this; }
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff ff7b 	bl	8005b94 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8005c9e:	bf00      	nop
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:

    void accept(CanardRxTransfer* transfer) {
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b086      	sub	sp, #24
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
        Type object;
        interface->cyphal_deserialize_transfer<T>(&object, transfer);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fb03 	bl	80042da <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8005cd4:	f107 030c 	add.w	r3, r7, #12
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	f000 f82b 	bl	8005d36 <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f107 010c 	add.w	r1, r7, #12
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
    }
 8005cf2:	bf00      	nop
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
        interface->cyphal_deserialize_transfer<T>(&object, transfer);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fe fae5 	bl	80042da <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8005d10:	f107 0308 	add.w	r3, r7, #8
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	4619      	mov	r1, r3
 8005d18:	f000 f82d 	bl	8005d76 <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3304      	adds	r3, #4
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f107 0108 	add.w	r1, r7, #8
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	4798      	blx	r3
    }
 8005d2e:	bf00      	nop
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
        buffer
    );
}

template <typename TypeAlias>
inline void CyphalInterface::cyphal_deserialize_transfer(
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b086      	sub	sp, #24
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 8005d42:	230c      	movs	r3, #12
 8005d44:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj,(uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f107 0214 	add.w	r2, r7, #20
 8005d4e:	4619      	mov	r1, r3
 8005d50:	68b8      	ldr	r0, [r7, #8]
 8005d52:	f7fd fa1f 	bl	8003194 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 8005d56:	4603      	mov	r3, r0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	09db      	lsrs	r3, r3, #7
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	3310      	adds	r3, #16
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff f831 	bl	8004dd0 <_ZNKSt8functionIFvvEEclEv>
    }
}
 8005d6e:	bf00      	nop
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::cyphal_deserialize_transfer(
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b086      	sub	sp, #24
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8005d82:	230c      	movs	r3, #12
 8005d84:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj,(uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	f107 0214 	add.w	r2, r7, #20
 8005d8e:	4619      	mov	r1, r3
 8005d90:	68b8      	ldr	r0, [r7, #8]
 8005d92:	f7fd f88d 	bl	8002eb0 <uavcan_node_Heartbeat_1_0_deserialize_>
 8005d96:	4603      	mov	r3, r0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	09db      	lsrs	r3, r3, #7
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	3310      	adds	r3, #16
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff f811 	bl	8004dd0 <_ZNKSt8functionIFvvEEclEv>
}
 8005dae:	bf00      	nop
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <_GLOBAL__sub_I_buffer>:
 8005db6:	b580      	push	{r7, lr}
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005dbe:	2001      	movs	r0, #1
 8005dc0:	f7ff ff0a 	bl	8005bd8 <_Z41__static_initialization_and_destruction_0ii>
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <_GLOBAL__sub_D_buffer>:
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005dce:	2000      	movs	r0, #0
 8005dd0:	f7ff ff02 	bl	8005bd8 <_Z41__static_initialization_and_destruction_0ii>
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dde:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <HAL_MspInit+0x44>)
 8005de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de2:	4a0e      	ldr	r2, [pc, #56]	; (8005e1c <HAL_MspInit+0x44>)
 8005de4:	f043 0301 	orr.w	r3, r3, #1
 8005de8:	6613      	str	r3, [r2, #96]	; 0x60
 8005dea:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <HAL_MspInit+0x44>)
 8005dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	607b      	str	r3, [r7, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005df6:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <HAL_MspInit+0x44>)
 8005df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfa:	4a08      	ldr	r2, [pc, #32]	; (8005e1c <HAL_MspInit+0x44>)
 8005dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e00:	6593      	str	r3, [r2, #88]	; 0x58
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <HAL_MspInit+0x44>)
 8005e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005e0e:	f003 fa0f 	bl	8009230 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40021000 	.word	0x40021000

08005e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005e24:	e7fe      	b.n	8005e24 <NMI_Handler+0x4>

08005e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e26:	b480      	push	{r7}
 8005e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e2a:	e7fe      	b.n	8005e2a <HardFault_Handler+0x4>

08005e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e30:	e7fe      	b.n	8005e30 <MemManage_Handler+0x4>

08005e32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e32:	b480      	push	{r7}
 8005e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e36:	e7fe      	b.n	8005e36 <BusFault_Handler+0x4>

08005e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e3c:	e7fe      	b.n	8005e3c <UsageFault_Handler+0x4>

08005e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e42:	bf00      	nop
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e50:	bf00      	nop
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e5e:	bf00      	nop
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e6c:	f000 fa34 	bl	80062d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e70:	bf00      	nop
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8005e78:	4802      	ldr	r0, [pc, #8]	; (8005e84 <DMA1_Channel1_IRQHandler+0x10>)
 8005e7a:	f000 fce5 	bl	8006848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005e7e:	bf00      	nop
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	200002f8 	.word	0x200002f8

08005e88 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8005e8c:	4802      	ldr	r0, [pc, #8]	; (8005e98 <DMA1_Channel2_IRQHandler+0x10>)
 8005e8e:	f000 fcdb 	bl	8006848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005e92:	bf00      	nop
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000358 	.word	0x20000358

08005e9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ea0:	4802      	ldr	r0, [pc, #8]	; (8005eac <USART2_IRQHandler+0x10>)
 8005ea2:	f004 f9a1 	bl	800a1e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005ea6:	bf00      	nop
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	200004dc 	.word	0x200004dc

08005eb0 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8005eb4:	4802      	ldr	r0, [pc, #8]	; (8005ec0 <I2C4_EV_IRQHandler+0x10>)
 8005eb6:	f001 ffd7 	bl	8007e68 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8005eba:	bf00      	nop
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	200002a4 	.word	0x200002a4

08005ec4 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8005ec8:	4802      	ldr	r0, [pc, #8]	; (8005ed4 <I2C4_ER_IRQHandler+0x10>)
 8005eca:	f001 ffe7 	bl	8007e9c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8005ece:	bf00      	nop
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	200002a4 	.word	0x200002a4

08005ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  return 1;
 8005edc:	2301      	movs	r3, #1
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <_kill>:

int _kill(int pid, int sig)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005ef2:	f009 fb3f 	bl	800f574 <__errno>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2216      	movs	r2, #22
 8005efa:	601a      	str	r2, [r3, #0]
  return -1;
 8005efc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <_exit>:

void _exit (int status)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005f10:	f04f 31ff 	mov.w	r1, #4294967295
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff ffe7 	bl	8005ee8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005f1a:	e7fe      	b.n	8005f1a <_exit+0x12>

08005f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e00a      	b.n	8005f44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005f2e:	f3af 8000 	nop.w
 8005f32:	4601      	mov	r1, r0
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	60ba      	str	r2, [r7, #8]
 8005f3a:	b2ca      	uxtb	r2, r1
 8005f3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	3301      	adds	r3, #1
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	dbf0      	blt.n	8005f2e <_read+0x12>
  }

  return len;
 8005f4c:	687b      	ldr	r3, [r7, #4]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b086      	sub	sp, #24
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	e009      	b.n	8005f7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	60ba      	str	r2, [r7, #8]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	dbf1      	blt.n	8005f68 <_write+0x12>
  }
  return len;
 8005f84:	687b      	ldr	r3, [r7, #4]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <_close>:

int _close(int file)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fb6:	605a      	str	r2, [r3, #4]
  return 0;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <_isatty>:

int _isatty(int file)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005fce:	2301      	movs	r3, #1
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
	...

08005ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006000:	4a14      	ldr	r2, [pc, #80]	; (8006054 <_sbrk+0x5c>)
 8006002:	4b15      	ldr	r3, [pc, #84]	; (8006058 <_sbrk+0x60>)
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800600c:	4b13      	ldr	r3, [pc, #76]	; (800605c <_sbrk+0x64>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d102      	bne.n	800601a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006014:	4b11      	ldr	r3, [pc, #68]	; (800605c <_sbrk+0x64>)
 8006016:	4a12      	ldr	r2, [pc, #72]	; (8006060 <_sbrk+0x68>)
 8006018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800601a:	4b10      	ldr	r3, [pc, #64]	; (800605c <_sbrk+0x64>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4413      	add	r3, r2
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	429a      	cmp	r2, r3
 8006026:	d207      	bcs.n	8006038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006028:	f009 faa4 	bl	800f574 <__errno>
 800602c:	4603      	mov	r3, r0
 800602e:	220c      	movs	r2, #12
 8006030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006032:	f04f 33ff 	mov.w	r3, #4294967295
 8006036:	e009      	b.n	800604c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006038:	4b08      	ldr	r3, [pc, #32]	; (800605c <_sbrk+0x64>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800603e:	4b07      	ldr	r3, [pc, #28]	; (800605c <_sbrk+0x64>)
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4413      	add	r3, r2
 8006046:	4a05      	ldr	r2, [pc, #20]	; (800605c <_sbrk+0x64>)
 8006048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800604a:	68fb      	ldr	r3, [r7, #12]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20020000 	.word	0x20020000
 8006058:	00000400 	.word	0x00000400
 800605c:	200004d8 	.word	0x200004d8
 8006060:	20000708 	.word	0x20000708

08006064 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006068:	4b06      	ldr	r3, [pc, #24]	; (8006084 <SystemInit+0x20>)
 800606a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606e:	4a05      	ldr	r2, [pc, #20]	; (8006084 <SystemInit+0x20>)
 8006070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006078:	bf00      	nop
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	e000ed00 	.word	0xe000ed00

08006088 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800608c:	4b22      	ldr	r3, [pc, #136]	; (8006118 <MX_USART2_UART_Init+0x90>)
 800608e:	4a23      	ldr	r2, [pc, #140]	; (800611c <MX_USART2_UART_Init+0x94>)
 8006090:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006092:	4b21      	ldr	r3, [pc, #132]	; (8006118 <MX_USART2_UART_Init+0x90>)
 8006094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006098:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800609a:	4b1f      	ldr	r3, [pc, #124]	; (8006118 <MX_USART2_UART_Init+0x90>)
 800609c:	2200      	movs	r2, #0
 800609e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80060a0:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <MX_USART2_UART_Init+0x90>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80060a6:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <MX_USART2_UART_Init+0x90>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80060ac:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <MX_USART2_UART_Init+0x90>)
 80060ae:	220c      	movs	r2, #12
 80060b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060b2:	4b19      	ldr	r3, [pc, #100]	; (8006118 <MX_USART2_UART_Init+0x90>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80060b8:	4b17      	ldr	r3, [pc, #92]	; (8006118 <MX_USART2_UART_Init+0x90>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80060be:	4b16      	ldr	r3, [pc, #88]	; (8006118 <MX_USART2_UART_Init+0x90>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80060c4:	4b14      	ldr	r3, [pc, #80]	; (8006118 <MX_USART2_UART_Init+0x90>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80060ca:	4b13      	ldr	r3, [pc, #76]	; (8006118 <MX_USART2_UART_Init+0x90>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80060d0:	4811      	ldr	r0, [pc, #68]	; (8006118 <MX_USART2_UART_Init+0x90>)
 80060d2:	f004 f839 	bl	800a148 <HAL_UART_Init>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80060dc:	f7fc f9de 	bl	800249c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80060e0:	2100      	movs	r1, #0
 80060e2:	480d      	ldr	r0, [pc, #52]	; (8006118 <MX_USART2_UART_Init+0x90>)
 80060e4:	f005 f977 	bl	800b3d6 <HAL_UARTEx_SetTxFifoThreshold>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80060ee:	f7fc f9d5 	bl	800249c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80060f2:	2100      	movs	r1, #0
 80060f4:	4808      	ldr	r0, [pc, #32]	; (8006118 <MX_USART2_UART_Init+0x90>)
 80060f6:	f005 f9ac 	bl	800b452 <HAL_UARTEx_SetRxFifoThreshold>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006100:	f7fc f9cc 	bl	800249c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006104:	4804      	ldr	r0, [pc, #16]	; (8006118 <MX_USART2_UART_Init+0x90>)
 8006106:	f005 f92d 	bl	800b364 <HAL_UARTEx_DisableFifoMode>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006110:	f7fc f9c4 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006114:	bf00      	nop
 8006116:	bd80      	pop	{r7, pc}
 8006118:	200004dc 	.word	0x200004dc
 800611c:	40004400 	.word	0x40004400

08006120 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b09e      	sub	sp, #120	; 0x78
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006128:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	605a      	str	r2, [r3, #4]
 8006132:	609a      	str	r2, [r3, #8]
 8006134:	60da      	str	r2, [r3, #12]
 8006136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006138:	f107 0310 	add.w	r3, r7, #16
 800613c:	2254      	movs	r2, #84	; 0x54
 800613e:	2100      	movs	r1, #0
 8006140:	4618      	mov	r0, r3
 8006142:	f009 f95e 	bl	800f402 <memset>
  if(uartHandle->Instance==USART2)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a23      	ldr	r2, [pc, #140]	; (80061d8 <HAL_UART_MspInit+0xb8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d13e      	bne.n	80061ce <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006150:	2302      	movs	r3, #2
 8006152:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006154:	2300      	movs	r3, #0
 8006156:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006158:	f107 0310 	add.w	r3, r7, #16
 800615c:	4618      	mov	r0, r3
 800615e:	f003 fda5 	bl	8009cac <HAL_RCCEx_PeriphCLKConfig>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006168:	f7fc f998 	bl	800249c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800616c:	4b1b      	ldr	r3, [pc, #108]	; (80061dc <HAL_UART_MspInit+0xbc>)
 800616e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006170:	4a1a      	ldr	r2, [pc, #104]	; (80061dc <HAL_UART_MspInit+0xbc>)
 8006172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006176:	6593      	str	r3, [r2, #88]	; 0x58
 8006178:	4b18      	ldr	r3, [pc, #96]	; (80061dc <HAL_UART_MspInit+0xbc>)
 800617a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006184:	4b15      	ldr	r3, [pc, #84]	; (80061dc <HAL_UART_MspInit+0xbc>)
 8006186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006188:	4a14      	ldr	r2, [pc, #80]	; (80061dc <HAL_UART_MspInit+0xbc>)
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006190:	4b12      	ldr	r3, [pc, #72]	; (80061dc <HAL_UART_MspInit+0xbc>)
 8006192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800619c:	230c      	movs	r3, #12
 800619e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a0:	2302      	movs	r3, #2
 80061a2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061a8:	2300      	movs	r3, #0
 80061aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80061ac:	2307      	movs	r3, #7
 80061ae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80061b4:	4619      	mov	r1, r3
 80061b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061ba:	f001 f8eb 	bl	8007394 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061be:	2200      	movs	r2, #0
 80061c0:	2100      	movs	r1, #0
 80061c2:	2026      	movs	r0, #38	; 0x26
 80061c4:	f000 f9a3 	bl	800650e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061c8:	2026      	movs	r0, #38	; 0x26
 80061ca:	f000 f9ba 	bl	8006542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80061ce:	bf00      	nop
 80061d0:	3778      	adds	r7, #120	; 0x78
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40004400 	.word	0x40004400
 80061dc:	40021000 	.word	0x40021000

080061e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80061e0:	480d      	ldr	r0, [pc, #52]	; (8006218 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80061e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80061e4:	f7ff ff3e 	bl	8006064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80061e8:	480c      	ldr	r0, [pc, #48]	; (800621c <LoopForever+0x6>)
  ldr r1, =_edata
 80061ea:	490d      	ldr	r1, [pc, #52]	; (8006220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80061ec:	4a0d      	ldr	r2, [pc, #52]	; (8006224 <LoopForever+0xe>)
  movs r3, #0
 80061ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80061f0:	e002      	b.n	80061f8 <LoopCopyDataInit>

080061f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061f6:	3304      	adds	r3, #4

080061f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061fc:	d3f9      	bcc.n	80061f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061fe:	4a0a      	ldr	r2, [pc, #40]	; (8006228 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006200:	4c0a      	ldr	r4, [pc, #40]	; (800622c <LoopForever+0x16>)
  movs r3, #0
 8006202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006204:	e001      	b.n	800620a <LoopFillZerobss>

08006206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006208:	3204      	adds	r2, #4

0800620a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800620a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800620c:	d3fb      	bcc.n	8006206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800620e:	f009 f9b7 	bl	800f580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006212:	f7fc f86d 	bl	80022f0 <main>

08006216 <LoopForever>:

LoopForever:
    b LoopForever
 8006216:	e7fe      	b.n	8006216 <LoopForever>
  ldr   r0, =_estack
 8006218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800621c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006220:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8006224:	0801402c 	.word	0x0801402c
  ldr r2, =_sbss
 8006228:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800622c:	20000708 	.word	0x20000708

08006230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006230:	e7fe      	b.n	8006230 <ADC1_2_IRQHandler>

08006232 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800623c:	2003      	movs	r0, #3
 800623e:	f000 f95b 	bl	80064f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006242:	200f      	movs	r0, #15
 8006244:	f000 f80e 	bl	8006264 <HAL_InitTick>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	71fb      	strb	r3, [r7, #7]
 8006252:	e001      	b.n	8006258 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006254:	f7ff fdc0 	bl	8005dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006258:	79fb      	ldrb	r3, [r7, #7]

}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006270:	4b16      	ldr	r3, [pc, #88]	; (80062cc <HAL_InitTick+0x68>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d022      	beq.n	80062be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006278:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <HAL_InitTick+0x6c>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	4b13      	ldr	r3, [pc, #76]	; (80062cc <HAL_InitTick+0x68>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006284:	fbb1 f3f3 	udiv	r3, r1, r3
 8006288:	fbb2 f3f3 	udiv	r3, r2, r3
 800628c:	4618      	mov	r0, r3
 800628e:	f000 f966 	bl	800655e <HAL_SYSTICK_Config>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10f      	bne.n	80062b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b0f      	cmp	r3, #15
 800629c:	d809      	bhi.n	80062b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800629e:	2200      	movs	r2, #0
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	f04f 30ff 	mov.w	r0, #4294967295
 80062a6:	f000 f932 	bl	800650e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80062aa:	4a0a      	ldr	r2, [pc, #40]	; (80062d4 <HAL_InitTick+0x70>)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	e007      	b.n	80062c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	73fb      	strb	r3, [r7, #15]
 80062b6:	e004      	b.n	80062c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	73fb      	strb	r3, [r7, #15]
 80062bc:	e001      	b.n	80062c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20000008 	.word	0x20000008
 80062d0:	20000000 	.word	0x20000000
 80062d4:	20000004 	.word	0x20000004

080062d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <HAL_IncTick+0x1c>)
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <HAL_IncTick+0x20>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4413      	add	r3, r2
 80062e6:	4a03      	ldr	r2, [pc, #12]	; (80062f4 <HAL_IncTick+0x1c>)
 80062e8:	6013      	str	r3, [r2, #0]
}
 80062ea:	bf00      	nop
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	20000570 	.word	0x20000570
 80062f8:	20000008 	.word	0x20000008

080062fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  return uwTick;
 8006300:	4b03      	ldr	r3, [pc, #12]	; (8006310 <HAL_GetTick+0x14>)
 8006302:	681b      	ldr	r3, [r3, #0]
}
 8006304:	4618      	mov	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	20000570 	.word	0x20000570

08006314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800631c:	f7ff ffee 	bl	80062fc <HAL_GetTick>
 8006320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632c:	d004      	beq.n	8006338 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <HAL_Delay+0x40>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006338:	bf00      	nop
 800633a:	f7ff ffdf 	bl	80062fc <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	429a      	cmp	r2, r3
 8006348:	d8f7      	bhi.n	800633a <HAL_Delay+0x26>
  {
  }
}
 800634a:	bf00      	nop
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000008 	.word	0x20000008

08006358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006368:	4b0c      	ldr	r3, [pc, #48]	; (800639c <__NVIC_SetPriorityGrouping+0x44>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006374:	4013      	ands	r3, r2
 8006376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800638a:	4a04      	ldr	r2, [pc, #16]	; (800639c <__NVIC_SetPriorityGrouping+0x44>)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	60d3      	str	r3, [r2, #12]
}
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	e000ed00 	.word	0xe000ed00

080063a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063a4:	4b04      	ldr	r3, [pc, #16]	; (80063b8 <__NVIC_GetPriorityGrouping+0x18>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	0a1b      	lsrs	r3, r3, #8
 80063aa:	f003 0307 	and.w	r3, r3, #7
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	e000ed00 	.word	0xe000ed00

080063bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	db0b      	blt.n	80063e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	f003 021f 	and.w	r2, r3, #31
 80063d4:	4907      	ldr	r1, [pc, #28]	; (80063f4 <__NVIC_EnableIRQ+0x38>)
 80063d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063da:	095b      	lsrs	r3, r3, #5
 80063dc:	2001      	movs	r0, #1
 80063de:	fa00 f202 	lsl.w	r2, r0, r2
 80063e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	e000e100 	.word	0xe000e100

080063f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	4603      	mov	r3, r0
 8006400:	6039      	str	r1, [r7, #0]
 8006402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006408:	2b00      	cmp	r3, #0
 800640a:	db0a      	blt.n	8006422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	b2da      	uxtb	r2, r3
 8006410:	490c      	ldr	r1, [pc, #48]	; (8006444 <__NVIC_SetPriority+0x4c>)
 8006412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006416:	0112      	lsls	r2, r2, #4
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	440b      	add	r3, r1
 800641c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006420:	e00a      	b.n	8006438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	b2da      	uxtb	r2, r3
 8006426:	4908      	ldr	r1, [pc, #32]	; (8006448 <__NVIC_SetPriority+0x50>)
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	3b04      	subs	r3, #4
 8006430:	0112      	lsls	r2, r2, #4
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	440b      	add	r3, r1
 8006436:	761a      	strb	r2, [r3, #24]
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	e000e100 	.word	0xe000e100
 8006448:	e000ed00 	.word	0xe000ed00

0800644c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800644c:	b480      	push	{r7}
 800644e:	b089      	sub	sp, #36	; 0x24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	f1c3 0307 	rsb	r3, r3, #7
 8006466:	2b04      	cmp	r3, #4
 8006468:	bf28      	it	cs
 800646a:	2304      	movcs	r3, #4
 800646c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	3304      	adds	r3, #4
 8006472:	2b06      	cmp	r3, #6
 8006474:	d902      	bls.n	800647c <NVIC_EncodePriority+0x30>
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	3b03      	subs	r3, #3
 800647a:	e000      	b.n	800647e <NVIC_EncodePriority+0x32>
 800647c:	2300      	movs	r3, #0
 800647e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006480:	f04f 32ff 	mov.w	r2, #4294967295
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	43da      	mvns	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	401a      	ands	r2, r3
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006494:	f04f 31ff 	mov.w	r1, #4294967295
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	fa01 f303 	lsl.w	r3, r1, r3
 800649e:	43d9      	mvns	r1, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064a4:	4313      	orrs	r3, r2
         );
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3724      	adds	r7, #36	; 0x24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
	...

080064b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3b01      	subs	r3, #1
 80064c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064c4:	d301      	bcc.n	80064ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064c6:	2301      	movs	r3, #1
 80064c8:	e00f      	b.n	80064ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064ca:	4a0a      	ldr	r2, [pc, #40]	; (80064f4 <SysTick_Config+0x40>)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3b01      	subs	r3, #1
 80064d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064d2:	210f      	movs	r1, #15
 80064d4:	f04f 30ff 	mov.w	r0, #4294967295
 80064d8:	f7ff ff8e 	bl	80063f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064dc:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <SysTick_Config+0x40>)
 80064de:	2200      	movs	r2, #0
 80064e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064e2:	4b04      	ldr	r3, [pc, #16]	; (80064f4 <SysTick_Config+0x40>)
 80064e4:	2207      	movs	r2, #7
 80064e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	e000e010 	.word	0xe000e010

080064f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff ff29 	bl	8006358 <__NVIC_SetPriorityGrouping>
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b086      	sub	sp, #24
 8006512:	af00      	add	r7, sp, #0
 8006514:	4603      	mov	r3, r0
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
 800651a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800651c:	f7ff ff40 	bl	80063a0 <__NVIC_GetPriorityGrouping>
 8006520:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	6978      	ldr	r0, [r7, #20]
 8006528:	f7ff ff90 	bl	800644c <NVIC_EncodePriority>
 800652c:	4602      	mov	r2, r0
 800652e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006532:	4611      	mov	r1, r2
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff ff5f 	bl	80063f8 <__NVIC_SetPriority>
}
 800653a:	bf00      	nop
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b082      	sub	sp, #8
 8006546:	af00      	add	r7, sp, #0
 8006548:	4603      	mov	r3, r0
 800654a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800654c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff ff33 	bl	80063bc <__NVIC_EnableIRQ>
}
 8006556:	bf00      	nop
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff ffa4 	bl	80064b4 <SysTick_Config>
 800656c:	4603      	mov	r3, r0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e08d      	b.n	80066a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	4b47      	ldr	r3, [pc, #284]	; (80066b0 <HAL_DMA_Init+0x138>)
 8006592:	429a      	cmp	r2, r3
 8006594:	d80f      	bhi.n	80065b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	4b45      	ldr	r3, [pc, #276]	; (80066b4 <HAL_DMA_Init+0x13c>)
 800659e:	4413      	add	r3, r2
 80065a0:	4a45      	ldr	r2, [pc, #276]	; (80066b8 <HAL_DMA_Init+0x140>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	091b      	lsrs	r3, r3, #4
 80065a8:	009a      	lsls	r2, r3, #2
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a42      	ldr	r2, [pc, #264]	; (80066bc <HAL_DMA_Init+0x144>)
 80065b2:	641a      	str	r2, [r3, #64]	; 0x40
 80065b4:	e00e      	b.n	80065d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	4b40      	ldr	r3, [pc, #256]	; (80066c0 <HAL_DMA_Init+0x148>)
 80065be:	4413      	add	r3, r2
 80065c0:	4a3d      	ldr	r2, [pc, #244]	; (80066b8 <HAL_DMA_Init+0x140>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	091b      	lsrs	r3, r3, #4
 80065c8:	009a      	lsls	r2, r3, #2
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a3c      	ldr	r2, [pc, #240]	; (80066c4 <HAL_DMA_Init+0x14c>)
 80065d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80065ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80065f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f9cc 	bl	80069c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006634:	d102      	bne.n	800663c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006650:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d010      	beq.n	800667c <HAL_DMA_Init+0x104>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b04      	cmp	r3, #4
 8006660:	d80c      	bhi.n	800667c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f9ec 	bl	8006a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006678:	605a      	str	r2, [r3, #4]
 800667a:	e008      	b.n	800668e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40020407 	.word	0x40020407
 80066b4:	bffdfff8 	.word	0xbffdfff8
 80066b8:	cccccccd 	.word	0xcccccccd
 80066bc:	40020000 	.word	0x40020000
 80066c0:	bffdfbf8 	.word	0xbffdfbf8
 80066c4:	40020400 	.word	0x40020400

080066c8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d005      	beq.n	80066ec <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2204      	movs	r2, #4
 80066e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	73fb      	strb	r3, [r7, #15]
 80066ea:	e037      	b.n	800675c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 020e 	bic.w	r2, r2, #14
 80066fa:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800670a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006720:	f003 021f 	and.w	r2, r3, #31
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	2101      	movs	r1, #1
 800672a:	fa01 f202 	lsl.w	r2, r1, r2
 800672e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006738:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00c      	beq.n	800675c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006750:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800675a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d00d      	beq.n	80067ae <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2204      	movs	r2, #4
 8006796:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
 80067ac:	e047      	b.n	800683e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 020e 	bic.w	r2, r2, #14
 80067bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0201 	bic.w	r2, r2, #1
 80067cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e2:	f003 021f 	and.w	r2, r3, #31
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	2101      	movs	r1, #1
 80067ec:	fa01 f202 	lsl.w	r2, r1, r2
 80067f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80067fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00c      	beq.n	800681e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006812:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800681c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4798      	blx	r3
    }
  }
  return status;
 800683e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006864:	f003 031f 	and.w	r3, r3, #31
 8006868:	2204      	movs	r2, #4
 800686a:	409a      	lsls	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4013      	ands	r3, r2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d026      	beq.n	80068c2 <HAL_DMA_IRQHandler+0x7a>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	d021      	beq.n	80068c2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b00      	cmp	r3, #0
 800688a:	d107      	bne.n	800689c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0204 	bic.w	r2, r2, #4
 800689a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a0:	f003 021f 	and.w	r2, r3, #31
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	2104      	movs	r1, #4
 80068aa:	fa01 f202 	lsl.w	r2, r1, r2
 80068ae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d071      	beq.n	800699c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80068c0:	e06c      	b.n	800699c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	2202      	movs	r2, #2
 80068cc:	409a      	lsls	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4013      	ands	r3, r2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d02e      	beq.n	8006934 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d029      	beq.n	8006934 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10b      	bne.n	8006906 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 020a 	bic.w	r2, r2, #10
 80068fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690a:	f003 021f 	and.w	r2, r3, #31
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	2102      	movs	r1, #2
 8006914:	fa01 f202 	lsl.w	r2, r1, r2
 8006918:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	2b00      	cmp	r3, #0
 8006928:	d038      	beq.n	800699c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006932:	e033      	b.n	800699c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006938:	f003 031f 	and.w	r3, r3, #31
 800693c:	2208      	movs	r2, #8
 800693e:	409a      	lsls	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4013      	ands	r3, r2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d02a      	beq.n	800699e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f003 0308 	and.w	r3, r3, #8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d025      	beq.n	800699e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 020e 	bic.w	r2, r2, #14
 8006960:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006966:	f003 021f 	and.w	r2, r3, #31
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	2101      	movs	r1, #1
 8006970:	fa01 f202 	lsl.w	r2, r1, r2
 8006974:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800699c:	bf00      	nop
 800699e:	bf00      	nop
}
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069b4:	b2db      	uxtb	r3, r3
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
	...

080069c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	4b16      	ldr	r3, [pc, #88]	; (8006a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d802      	bhi.n	80069de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80069d8:	4b15      	ldr	r3, [pc, #84]	; (8006a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	e001      	b.n	80069e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80069de:	4b15      	ldr	r3, [pc, #84]	; (8006a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80069e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	3b08      	subs	r3, #8
 80069ee:	4a12      	ldr	r2, [pc, #72]	; (8006a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80069f0:	fba2 2303 	umull	r2, r3, r2, r3
 80069f4:	091b      	lsrs	r3, r3, #4
 80069f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fc:	089b      	lsrs	r3, r3, #2
 80069fe:	009a      	lsls	r2, r3, #2
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	4413      	add	r3, r2
 8006a04:	461a      	mov	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a0b      	ldr	r2, [pc, #44]	; (8006a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006a0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 031f 	and.w	r3, r3, #31
 8006a16:	2201      	movs	r2, #1
 8006a18:	409a      	lsls	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40020407 	.word	0x40020407
 8006a30:	40020800 	.word	0x40020800
 8006a34:	40020820 	.word	0x40020820
 8006a38:	cccccccd 	.word	0xcccccccd
 8006a3c:	40020880 	.word	0x40020880

08006a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	461a      	mov	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a08      	ldr	r2, [pc, #32]	; (8006a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006a62:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	f003 031f 	and.w	r3, r3, #31
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	409a      	lsls	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006a74:	bf00      	nop
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	1000823f 	.word	0x1000823f
 8006a84:	40020940 	.word	0x40020940

08006a88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e147      	b.n	8006d2a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7fb fa28 	bl	8001f04 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0210 	bic.w	r2, r2, #16
 8006ac2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ac4:	f7ff fc1a 	bl	80062fc <HAL_GetTick>
 8006ac8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006aca:	e012      	b.n	8006af2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006acc:	f7ff fc16 	bl	80062fc <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b0a      	cmp	r3, #10
 8006ad8:	d90b      	bls.n	8006af2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ade:	f043 0201 	orr.w	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2203      	movs	r2, #3
 8006aea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e11b      	b.n	8006d2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d0e5      	beq.n	8006acc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0201 	orr.w	r2, r2, #1
 8006b0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b10:	f7ff fbf4 	bl	80062fc <HAL_GetTick>
 8006b14:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006b16:	e012      	b.n	8006b3e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006b18:	f7ff fbf0 	bl	80062fc <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b0a      	cmp	r3, #10
 8006b24:	d90b      	bls.n	8006b3e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b2a:	f043 0201 	orr.w	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2203      	movs	r2, #3
 8006b36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e0f5      	b.n	8006d2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0e5      	beq.n	8006b18 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0202 	orr.w	r2, r2, #2
 8006b5a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a74      	ldr	r2, [pc, #464]	; (8006d34 <HAL_FDCAN_Init+0x2ac>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d103      	bne.n	8006b6e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006b66:	4a74      	ldr	r2, [pc, #464]	; (8006d38 <HAL_FDCAN_Init+0x2b0>)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	7c1b      	ldrb	r3, [r3, #16]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d108      	bne.n	8006b88 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699a      	ldr	r2, [r3, #24]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b84:	619a      	str	r2, [r3, #24]
 8006b86:	e007      	b.n	8006b98 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b96:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	7c5b      	ldrb	r3, [r3, #17]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d108      	bne.n	8006bb2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bae:	619a      	str	r2, [r3, #24]
 8006bb0:	e007      	b.n	8006bc2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	699a      	ldr	r2, [r3, #24]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bc0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	7c9b      	ldrb	r3, [r3, #18]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d108      	bne.n	8006bdc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	699a      	ldr	r2, [r3, #24]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bd8:	619a      	str	r2, [r3, #24]
 8006bda:	e007      	b.n	8006bec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	699a      	ldr	r2, [r3, #24]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006c10:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0210 	bic.w	r2, r2, #16
 8006c20:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d108      	bne.n	8006c3c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699a      	ldr	r2, [r3, #24]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0204 	orr.w	r2, r2, #4
 8006c38:	619a      	str	r2, [r3, #24]
 8006c3a:	e02c      	b.n	8006c96 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d028      	beq.n	8006c96 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d01c      	beq.n	8006c86 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c5a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0210 	orr.w	r2, r2, #16
 8006c6a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d110      	bne.n	8006c96 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0220 	orr.w	r2, r2, #32
 8006c82:	619a      	str	r2, [r3, #24]
 8006c84:	e007      	b.n	8006c96 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699a      	ldr	r2, [r3, #24]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0220 	orr.w	r2, r2, #32
 8006c94:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ca6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006cae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006cbe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006cc0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cca:	d115      	bne.n	8006cf8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006cda:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006ce4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	3b01      	subs	r3, #1
 8006cee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006cf4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006cf6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fa58 	bl	80071c4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	40006400 	.word	0x40006400
 8006d38:	40006500 	.word	0x40006500

08006d3c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d4c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d002      	beq.n	8006d5a <HAL_FDCAN_ConfigFilter+0x1e>
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d13d      	bne.n	8006dd6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d119      	bne.n	8006d96 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006d6e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8006d76:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	e01d      	b.n	8006dd2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	075a      	lsls	r2, r3, #29
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	079a      	lsls	r2, r3, #30
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e006      	b.n	8006de4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dda:	f043 0202 	orr.w	r2, r3, #2
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
  }
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	371c      	adds	r7, #28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d116      	bne.n	8006e38 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e12:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	011a      	lsls	r2, r3, #4
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	431a      	orrs	r2, r3
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	e006      	b.n	8006e46 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e3c:	f043 0204 	orr.w	r2, r3, #4
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
  }
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d108      	bne.n	8006e7c <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	0219      	lsls	r1, r3, #8
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e006      	b.n	8006e8a <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e80:	f043 0204 	orr.w	r2, r3, #4
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
  }
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d109      	bne.n	8006ebe <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006eb8:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e006      	b.n	8006ecc <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec2:	f043 0204 	orr.w	r2, r3, #4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
  }
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d110      	bne.n	8006f0e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0201 	bic.w	r2, r2, #1
 8006f02:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e006      	b.n	8006f1c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f12:	f043 0204 	orr.w	r2, r3, #4
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
  }
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d12c      	bne.n	8006f9a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e023      	b.n	8006fa8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	68b9      	ldr	r1, [r7, #8]
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 f990 	bl	800729c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2101      	movs	r1, #1
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	fa01 f202 	lsl.w	r2, r1, r2
 8006f88:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	409a      	lsls	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e006      	b.n	8006fa8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9e:	f043 0208 	orr.w	r2, r3, #8
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
  }
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b08b      	sub	sp, #44	; 0x2c
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006fc4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006fc6:	7efb      	ldrb	r3, [r7, #27]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	f040 80bc 	bne.w	8007146 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b40      	cmp	r3, #64	; 0x40
 8006fd2:	d121      	bne.n	8007018 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fdc:	f003 030f 	and.w	r3, r3, #15
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d107      	bne.n	8006ff4 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e0af      	b.n	8007154 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffc:	0a1b      	lsrs	r3, r3, #8
 8006ffe:	f003 0303 	and.w	r3, r3, #3
 8007002:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	4613      	mov	r3, r2
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	4413      	add	r3, r2
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	440b      	add	r3, r1
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
 8007016:	e020      	b.n	800705a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	2b00      	cmp	r3, #0
 8007026:	d107      	bne.n	8007038 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800702c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e08d      	b.n	8007154 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007040:	0a1b      	lsrs	r3, r3, #8
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	4613      	mov	r3, r2
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	4413      	add	r3, r2
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	440b      	add	r3, r1
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d107      	bne.n	800707e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	0c9b      	lsrs	r3, r3, #18
 8007074:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	e005      	b.n	800708a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	3304      	adds	r3, #4
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	0e1b      	lsrs	r3, r3, #24
 80070dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	0fda      	lsrs	r2, r3, #31
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	3304      	adds	r3, #4
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80070f8:	2300      	movs	r3, #0
 80070fa:	623b      	str	r3, [r7, #32]
 80070fc:	e00a      	b.n	8007114 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	441a      	add	r2, r3
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	440b      	add	r3, r1
 800710a:	7812      	ldrb	r2, [r2, #0]
 800710c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	3301      	adds	r3, #1
 8007112:	623b      	str	r3, [r7, #32]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	0c1b      	lsrs	r3, r3, #16
 800711a:	4a11      	ldr	r2, [pc, #68]	; (8007160 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800711c:	5cd3      	ldrb	r3, [r2, r3]
 800711e:	461a      	mov	r2, r3
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	4293      	cmp	r3, r2
 8007124:	d3eb      	bcc.n	80070fe <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b40      	cmp	r3, #64	; 0x40
 800712a:	d105      	bne.n	8007138 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007136:	e004      	b.n	8007142 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	69fa      	ldr	r2, [r7, #28]
 800713e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	e006      	b.n	8007154 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800714a:	f043 0208 	orr.w	r2, r3, #8
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
  }
}
 8007154:	4618      	mov	r0, r3
 8007156:	372c      	adds	r7, #44	; 0x2c
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	080135bc 	.word	0x080135bc

08007164 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b40      	cmp	r3, #64	; 0x40
 8007172:	d107      	bne.n	8007184 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717c:	f003 030f 	and.w	r3, r3, #15
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	e006      	b.n	8007192 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800718c:	f003 030f 	and.w	r3, r3, #15
 8007190:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8007192:	68fb      	ldr	r3, [r7, #12]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80071b0:	f003 0307 	and.w	r3, r3, #7
 80071b4:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80071b6:	68fb      	ldr	r3, [r7, #12]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80071cc:	4b30      	ldr	r3, [pc, #192]	; (8007290 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80071ce:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2f      	ldr	r2, [pc, #188]	; (8007294 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d103      	bne.n	80071e2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80071e0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a2c      	ldr	r2, [pc, #176]	; (8007298 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d103      	bne.n	80071f4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80071f2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007202:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720a:	041a      	lsls	r2, r3, #16
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007228:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007230:	061a      	lsls	r2, r3, #24
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e005      	b.n	8007276 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3304      	adds	r3, #4
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	429a      	cmp	r2, r3
 8007280:	d3f3      	bcc.n	800726a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8007282:	bf00      	nop
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	4000a400 	.word	0x4000a400
 8007294:	40006800 	.word	0x40006800
 8007298:	40006c00 	.word	0x40006c00

0800729c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800729c:	b480      	push	{r7}
 800729e:	b089      	sub	sp, #36	; 0x24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80072ba:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80072c2:	4313      	orrs	r3, r2
 80072c4:	61fb      	str	r3, [r7, #28]
 80072c6:	e00a      	b.n	80072de <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80072d0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80072d6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80072d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072dc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80072e8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80072ee:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80072f4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80072fa:	4313      	orrs	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	4613      	mov	r3, r2
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	4413      	add	r3, r2
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	440b      	add	r3, r1
 800730e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	69fa      	ldr	r2, [r7, #28]
 8007314:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	3304      	adds	r3, #4
 800731a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	3304      	adds	r3, #4
 8007326:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007328:	2300      	movs	r3, #0
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	e020      	b.n	8007370 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	3303      	adds	r3, #3
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	4413      	add	r3, r2
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	3302      	adds	r3, #2
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	440b      	add	r3, r1
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007346:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	3301      	adds	r3, #1
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	440b      	add	r3, r1
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007354:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	440a      	add	r2, r1
 800735c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800735e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	3304      	adds	r3, #4
 8007368:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	3304      	adds	r3, #4
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	0c1b      	lsrs	r3, r3, #16
 8007376:	4a06      	ldr	r2, [pc, #24]	; (8007390 <FDCAN_CopyMessageToRAM+0xf4>)
 8007378:	5cd3      	ldrb	r3, [r2, r3]
 800737a:	461a      	mov	r2, r3
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	4293      	cmp	r3, r2
 8007380:	d3d5      	bcc.n	800732e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8007382:	bf00      	nop
 8007384:	bf00      	nop
 8007386:	3724      	adds	r7, #36	; 0x24
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	080135bc 	.word	0x080135bc

08007394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80073a2:	e15a      	b.n	800765a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	2101      	movs	r1, #1
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	fa01 f303 	lsl.w	r3, r1, r3
 80073b0:	4013      	ands	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 814c 	beq.w	8007654 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f003 0303 	and.w	r3, r3, #3
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d005      	beq.n	80073d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d130      	bne.n	8007436 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	2203      	movs	r2, #3
 80073e0:	fa02 f303 	lsl.w	r3, r2, r3
 80073e4:	43db      	mvns	r3, r3
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	4013      	ands	r3, r2
 80073ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800740a:	2201      	movs	r2, #1
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	43db      	mvns	r3, r3
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4013      	ands	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	091b      	lsrs	r3, r3, #4
 8007420:	f003 0201 	and.w	r2, r3, #1
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	2b03      	cmp	r3, #3
 8007440:	d017      	beq.n	8007472 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	2203      	movs	r2, #3
 800744e:	fa02 f303 	lsl.w	r3, r2, r3
 8007452:	43db      	mvns	r3, r3
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4013      	ands	r3, r2
 8007458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	2b02      	cmp	r3, #2
 800747c:	d123      	bne.n	80074c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	08da      	lsrs	r2, r3, #3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3208      	adds	r2, #8
 8007486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	220f      	movs	r2, #15
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	43db      	mvns	r3, r3
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4013      	ands	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	691a      	ldr	r2, [r3, #16]
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	08da      	lsrs	r2, r3, #3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3208      	adds	r2, #8
 80074c0:	6939      	ldr	r1, [r7, #16]
 80074c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	2203      	movs	r2, #3
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	43db      	mvns	r3, r3
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4013      	ands	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f003 0203 	and.w	r2, r3, #3
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	fa02 f303 	lsl.w	r3, r2, r3
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 80a6 	beq.w	8007654 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007508:	4b5b      	ldr	r3, [pc, #364]	; (8007678 <HAL_GPIO_Init+0x2e4>)
 800750a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800750c:	4a5a      	ldr	r2, [pc, #360]	; (8007678 <HAL_GPIO_Init+0x2e4>)
 800750e:	f043 0301 	orr.w	r3, r3, #1
 8007512:	6613      	str	r3, [r2, #96]	; 0x60
 8007514:	4b58      	ldr	r3, [pc, #352]	; (8007678 <HAL_GPIO_Init+0x2e4>)
 8007516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	60bb      	str	r3, [r7, #8]
 800751e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007520:	4a56      	ldr	r2, [pc, #344]	; (800767c <HAL_GPIO_Init+0x2e8>)
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	089b      	lsrs	r3, r3, #2
 8007526:	3302      	adds	r3, #2
 8007528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800752c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f003 0303 	and.w	r3, r3, #3
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	220f      	movs	r2, #15
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	43db      	mvns	r3, r3
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	4013      	ands	r3, r2
 8007542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800754a:	d01f      	beq.n	800758c <HAL_GPIO_Init+0x1f8>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a4c      	ldr	r2, [pc, #304]	; (8007680 <HAL_GPIO_Init+0x2ec>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d019      	beq.n	8007588 <HAL_GPIO_Init+0x1f4>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a4b      	ldr	r2, [pc, #300]	; (8007684 <HAL_GPIO_Init+0x2f0>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d013      	beq.n	8007584 <HAL_GPIO_Init+0x1f0>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a4a      	ldr	r2, [pc, #296]	; (8007688 <HAL_GPIO_Init+0x2f4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00d      	beq.n	8007580 <HAL_GPIO_Init+0x1ec>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a49      	ldr	r2, [pc, #292]	; (800768c <HAL_GPIO_Init+0x2f8>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d007      	beq.n	800757c <HAL_GPIO_Init+0x1e8>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a48      	ldr	r2, [pc, #288]	; (8007690 <HAL_GPIO_Init+0x2fc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d101      	bne.n	8007578 <HAL_GPIO_Init+0x1e4>
 8007574:	2305      	movs	r3, #5
 8007576:	e00a      	b.n	800758e <HAL_GPIO_Init+0x1fa>
 8007578:	2306      	movs	r3, #6
 800757a:	e008      	b.n	800758e <HAL_GPIO_Init+0x1fa>
 800757c:	2304      	movs	r3, #4
 800757e:	e006      	b.n	800758e <HAL_GPIO_Init+0x1fa>
 8007580:	2303      	movs	r3, #3
 8007582:	e004      	b.n	800758e <HAL_GPIO_Init+0x1fa>
 8007584:	2302      	movs	r3, #2
 8007586:	e002      	b.n	800758e <HAL_GPIO_Init+0x1fa>
 8007588:	2301      	movs	r3, #1
 800758a:	e000      	b.n	800758e <HAL_GPIO_Init+0x1fa>
 800758c:	2300      	movs	r3, #0
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	f002 0203 	and.w	r2, r2, #3
 8007594:	0092      	lsls	r2, r2, #2
 8007596:	4093      	lsls	r3, r2
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	4313      	orrs	r3, r2
 800759c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800759e:	4937      	ldr	r1, [pc, #220]	; (800767c <HAL_GPIO_Init+0x2e8>)
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	089b      	lsrs	r3, r3, #2
 80075a4:	3302      	adds	r3, #2
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075ac:	4b39      	ldr	r3, [pc, #228]	; (8007694 <HAL_GPIO_Init+0x300>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	43db      	mvns	r3, r3
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4013      	ands	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80075d0:	4a30      	ldr	r2, [pc, #192]	; (8007694 <HAL_GPIO_Init+0x300>)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80075d6:	4b2f      	ldr	r3, [pc, #188]	; (8007694 <HAL_GPIO_Init+0x300>)
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	43db      	mvns	r3, r3
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	4013      	ands	r3, r2
 80075e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80075fa:	4a26      	ldr	r2, [pc, #152]	; (8007694 <HAL_GPIO_Init+0x300>)
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007600:	4b24      	ldr	r3, [pc, #144]	; (8007694 <HAL_GPIO_Init+0x300>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	43db      	mvns	r3, r3
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4013      	ands	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4313      	orrs	r3, r2
 8007622:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007624:	4a1b      	ldr	r2, [pc, #108]	; (8007694 <HAL_GPIO_Init+0x300>)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800762a:	4b1a      	ldr	r3, [pc, #104]	; (8007694 <HAL_GPIO_Init+0x300>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	43db      	mvns	r3, r3
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	4013      	ands	r3, r2
 8007638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800764e:	4a11      	ldr	r2, [pc, #68]	; (8007694 <HAL_GPIO_Init+0x300>)
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	3301      	adds	r3, #1
 8007658:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	fa22 f303 	lsr.w	r3, r2, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	f47f ae9d 	bne.w	80073a4 <HAL_GPIO_Init+0x10>
  }
}
 800766a:	bf00      	nop
 800766c:	bf00      	nop
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	40021000 	.word	0x40021000
 800767c:	40010000 	.word	0x40010000
 8007680:	48000400 	.word	0x48000400
 8007684:	48000800 	.word	0x48000800
 8007688:	48000c00 	.word	0x48000c00
 800768c:	48001000 	.word	0x48001000
 8007690:	48001400 	.word	0x48001400
 8007694:	40010400 	.word	0x40010400

08007698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	807b      	strh	r3, [r7, #2]
 80076a4:	4613      	mov	r3, r2
 80076a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80076a8:	787b      	ldrb	r3, [r7, #1]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80076ae:	887a      	ldrh	r2, [r7, #2]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80076b4:	e002      	b.n	80076bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80076b6:	887a      	ldrh	r2, [r7, #2]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80076da:	887a      	ldrh	r2, [r7, #2]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4013      	ands	r3, r2
 80076e0:	041a      	lsls	r2, r3, #16
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	43d9      	mvns	r1, r3
 80076e6:	887b      	ldrh	r3, [r7, #2]
 80076e8:	400b      	ands	r3, r1
 80076ea:	431a      	orrs	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	619a      	str	r2, [r3, #24]
}
 80076f0:	bf00      	nop
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e08d      	b.n	800782a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7fa fd02 	bl	800212c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2224      	movs	r2, #36	; 0x24
 800772c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 0201 	bic.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800774c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800775c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d107      	bne.n	8007776 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689a      	ldr	r2, [r3, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007772:	609a      	str	r2, [r3, #8]
 8007774:	e006      	b.n	8007784 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007782:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d108      	bne.n	800779e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800779a:	605a      	str	r2, [r3, #4]
 800779c:	e007      	b.n	80077ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6812      	ldr	r2, [r2, #0]
 80077b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80077bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68da      	ldr	r2, [r3, #12]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	691a      	ldr	r2, [r3, #16]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	69d9      	ldr	r1, [r3, #28]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a1a      	ldr	r2, [r3, #32]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0201 	orr.w	r2, r2, #1
 800780a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af02      	add	r7, sp, #8
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	4608      	mov	r0, r1
 800783e:	4611      	mov	r1, r2
 8007840:	461a      	mov	r2, r3
 8007842:	4603      	mov	r3, r0
 8007844:	817b      	strh	r3, [r7, #10]
 8007846:	460b      	mov	r3, r1
 8007848:	813b      	strh	r3, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b20      	cmp	r3, #32
 8007858:	f040 80f9 	bne.w	8007a4e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_I2C_Mem_Write+0x34>
 8007862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007864:	2b00      	cmp	r3, #0
 8007866:	d105      	bne.n	8007874 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800786e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e0ed      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800787a:	2b01      	cmp	r3, #1
 800787c:	d101      	bne.n	8007882 <HAL_I2C_Mem_Write+0x4e>
 800787e:	2302      	movs	r3, #2
 8007880:	e0e6      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800788a:	f7fe fd37 	bl	80062fc <HAL_GetTick>
 800788e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	2319      	movs	r3, #25
 8007896:	2201      	movs	r2, #1
 8007898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f001 f938 	bl	8008b12 <I2C_WaitOnFlagUntilTimeout>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e0d1      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2221      	movs	r2, #33	; 0x21
 80078b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2240      	movs	r2, #64	; 0x40
 80078b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6a3a      	ldr	r2, [r7, #32]
 80078c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80078cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078d4:	88f8      	ldrh	r0, [r7, #6]
 80078d6:	893a      	ldrh	r2, [r7, #8]
 80078d8:	8979      	ldrh	r1, [r7, #10]
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	4603      	mov	r3, r0
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 fc7b 	bl	80081e0 <I2C_RequestMemoryWrite>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e0a9      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	2bff      	cmp	r3, #255	; 0xff
 8007904:	d90e      	bls.n	8007924 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	22ff      	movs	r2, #255	; 0xff
 800790a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007910:	b2da      	uxtb	r2, r3
 8007912:	8979      	ldrh	r1, [r7, #10]
 8007914:	2300      	movs	r3, #0
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f001 fabb 	bl	8008e98 <I2C_TransferConfig>
 8007922:	e00f      	b.n	8007944 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007928:	b29a      	uxth	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007932:	b2da      	uxtb	r2, r3
 8007934:	8979      	ldrh	r1, [r7, #10]
 8007936:	2300      	movs	r3, #0
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f001 faaa 	bl	8008e98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f001 f93b 	bl	8008bc4 <I2C_WaitOnTXISFlagUntilTimeout>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e07b      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	781a      	ldrb	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007972:	b29b      	uxth	r3, r3
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007980:	3b01      	subs	r3, #1
 8007982:	b29a      	uxth	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d034      	beq.n	80079fc <HAL_I2C_Mem_Write+0x1c8>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007996:	2b00      	cmp	r3, #0
 8007998:	d130      	bne.n	80079fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	2200      	movs	r2, #0
 80079a2:	2180      	movs	r1, #128	; 0x80
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f001 f8b4 	bl	8008b12 <I2C_WaitOnFlagUntilTimeout>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e04d      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2bff      	cmp	r3, #255	; 0xff
 80079bc:	d90e      	bls.n	80079dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	22ff      	movs	r2, #255	; 0xff
 80079c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	8979      	ldrh	r1, [r7, #10]
 80079cc:	2300      	movs	r3, #0
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f001 fa5f 	bl	8008e98 <I2C_TransferConfig>
 80079da:	e00f      	b.n	80079fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	8979      	ldrh	r1, [r7, #10]
 80079ee:	2300      	movs	r3, #0
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f001 fa4e 	bl	8008e98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d19e      	bne.n	8007944 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f001 f921 	bl	8008c52 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e01a      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6859      	ldr	r1, [r3, #4]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <HAL_I2C_Mem_Write+0x224>)
 8007a2e:	400b      	ands	r3, r1
 8007a30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e000      	b.n	8007a50 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007a4e:	2302      	movs	r3, #2
  }
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	fe00e800 	.word	0xfe00e800

08007a5c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	817b      	strh	r3, [r7, #10]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	813b      	strh	r3, [r7, #8]
 8007a72:	4613      	mov	r3, r2
 8007a74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b20      	cmp	r3, #32
 8007a80:	f040 80fd 	bne.w	8007c7e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <HAL_I2C_Mem_Read+0x34>
 8007a8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d105      	bne.n	8007a9c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e0f1      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <HAL_I2C_Mem_Read+0x4e>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e0ea      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ab2:	f7fe fc23 	bl	80062fc <HAL_GetTick>
 8007ab6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	2319      	movs	r3, #25
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f001 f824 	bl	8008b12 <I2C_WaitOnFlagUntilTimeout>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e0d5      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2222      	movs	r2, #34	; 0x22
 8007ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2240      	movs	r2, #64	; 0x40
 8007ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6a3a      	ldr	r2, [r7, #32]
 8007aee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007afc:	88f8      	ldrh	r0, [r7, #6]
 8007afe:	893a      	ldrh	r2, [r7, #8]
 8007b00:	8979      	ldrh	r1, [r7, #10]
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 fbbb 	bl	8008288 <I2C_RequestMemoryRead>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e0ad      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2bff      	cmp	r3, #255	; 0xff
 8007b2c:	d90e      	bls.n	8007b4c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	22ff      	movs	r2, #255	; 0xff
 8007b32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	8979      	ldrh	r1, [r7, #10]
 8007b3c:	4b52      	ldr	r3, [pc, #328]	; (8007c88 <HAL_I2C_Mem_Read+0x22c>)
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f001 f9a7 	bl	8008e98 <I2C_TransferConfig>
 8007b4a:	e00f      	b.n	8007b6c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	8979      	ldrh	r1, [r7, #10]
 8007b5e:	4b4a      	ldr	r3, [pc, #296]	; (8007c88 <HAL_I2C_Mem_Read+0x22c>)
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f001 f996 	bl	8008e98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	2200      	movs	r2, #0
 8007b74:	2104      	movs	r1, #4
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 ffcb 	bl	8008b12 <I2C_WaitOnFlagUntilTimeout>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e07c      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	1c5a      	adds	r2, r3, #1
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d034      	beq.n	8007c2c <HAL_I2C_Mem_Read+0x1d0>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d130      	bne.n	8007c2c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2180      	movs	r1, #128	; 0x80
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 ff9c 	bl	8008b12 <I2C_WaitOnFlagUntilTimeout>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e04d      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	2bff      	cmp	r3, #255	; 0xff
 8007bec:	d90e      	bls.n	8007c0c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	22ff      	movs	r2, #255	; 0xff
 8007bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	8979      	ldrh	r1, [r7, #10]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f001 f947 	bl	8008e98 <I2C_TransferConfig>
 8007c0a:	e00f      	b.n	8007c2c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	8979      	ldrh	r1, [r7, #10]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f001 f936 	bl	8008e98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d19a      	bne.n	8007b6c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f001 f809 	bl	8008c52 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e01a      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6859      	ldr	r1, [r3, #4]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <HAL_I2C_Mem_Read+0x230>)
 8007c5e:	400b      	ands	r3, r1
 8007c60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e000      	b.n	8007c80 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007c7e:	2302      	movs	r3, #2
  }
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	80002400 	.word	0x80002400
 8007c8c:	fe00e800 	.word	0xfe00e800

08007c90 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	607a      	str	r2, [r7, #4]
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	f040 80d6 	bne.w	8007e5e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc0:	d101      	bne.n	8007cc6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	e0cc      	b.n	8007e60 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <HAL_I2C_IsDeviceReady+0x44>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e0c5      	b.n	8007e60 <HAL_I2C_IsDeviceReady+0x1d0>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2224      	movs	r2, #36	; 0x24
 8007ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d107      	bne.n	8007d02 <HAL_I2C_IsDeviceReady+0x72>
 8007cf2:	897b      	ldrh	r3, [r7, #10]
 8007cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007cfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007d00:	e006      	b.n	8007d10 <HAL_I2C_IsDeviceReady+0x80>
 8007d02:	897b      	ldrh	r3, [r7, #10]
 8007d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d0c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007d16:	f7fe faf1 	bl	80062fc <HAL_GetTick>
 8007d1a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	bf0c      	ite	eq
 8007d2a:	2301      	moveq	r3, #1
 8007d2c:	2300      	movne	r3, #0
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	f003 0310 	and.w	r3, r3, #16
 8007d3c:	2b10      	cmp	r3, #16
 8007d3e:	bf0c      	ite	eq
 8007d40:	2301      	moveq	r3, #1
 8007d42:	2300      	movne	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007d48:	e034      	b.n	8007db4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d50:	d01a      	beq.n	8007d88 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d52:	f7fe fad3 	bl	80062fc <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d302      	bcc.n	8007d68 <HAL_I2C_IsDeviceReady+0xd8>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10f      	bne.n	8007d88 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d74:	f043 0220 	orr.w	r2, r3, #32
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e06b      	b.n	8007e60 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b20      	cmp	r3, #32
 8007d94:	bf0c      	ite	eq
 8007d96:	2301      	moveq	r3, #1
 8007d98:	2300      	movne	r3, #0
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	bf0c      	ite	eq
 8007dac:	2301      	moveq	r3, #1
 8007dae:	2300      	movne	r3, #0
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007db4:	7ffb      	ldrb	r3, [r7, #31]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d102      	bne.n	8007dc0 <HAL_I2C_IsDeviceReady+0x130>
 8007dba:	7fbb      	ldrb	r3, [r7, #30]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0c4      	beq.n	8007d4a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	f003 0310 	and.w	r3, r3, #16
 8007dca:	2b10      	cmp	r3, #16
 8007dcc:	d01a      	beq.n	8007e04 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2120      	movs	r1, #32
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fe9a 	bl	8008b12 <I2C_WaitOnFlagUntilTimeout>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e03b      	b.n	8007e60 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2220      	movs	r2, #32
 8007dee:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	e02d      	b.n	8007e60 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2120      	movs	r1, #32
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 fe7f 	bl	8008b12 <I2C_WaitOnFlagUntilTimeout>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e020      	b.n	8007e60 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2210      	movs	r2, #16
 8007e24:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	3301      	adds	r3, #1
 8007e32:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	f63f af56 	bhi.w	8007cea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4a:	f043 0220 	orr.w	r2, r3, #32
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8007e5e:	2302      	movs	r3, #2
  }
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3720      	adds	r7, #32
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d005      	beq.n	8007e94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	4798      	blx	r3
  }
}
 8007e94:	bf00      	nop
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00f      	beq.n	8007ede <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00a      	beq.n	8007ede <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ecc:	f043 0201 	orr.w	r2, r3, #1
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007edc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00f      	beq.n	8007f08 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00a      	beq.n	8007f08 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef6:	f043 0208 	orr.w	r2, r3, #8
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f06:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00f      	beq.n	8007f32 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f20:	f043 0202 	orr.w	r2, r3, #2
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f30:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f003 030b 	and.w	r3, r3, #11
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007f42:	68f9      	ldr	r1, [r7, #12]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fc8b 	bl	8008860 <I2C_ITError>
  }
}
 8007f4a:	bf00      	nop
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007f6e:	bf00      	nop
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	460b      	mov	r3, r1
 8007f84:	70fb      	strb	r3, [r7, #3]
 8007f86:	4613      	mov	r3, r2
 8007f88:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b083      	sub	sp, #12
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fe0:	b2db      	uxtb	r3, r3
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b086      	sub	sp, #24
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800800a:	2b01      	cmp	r3, #1
 800800c:	d101      	bne.n	8008012 <I2C_Slave_ISR_IT+0x24>
 800800e:	2302      	movs	r3, #2
 8008010:	e0e2      	b.n	80081d8 <I2C_Slave_ISR_IT+0x1ea>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f003 0320 	and.w	r3, r3, #32
 8008020:	2b00      	cmp	r3, #0
 8008022:	d009      	beq.n	8008038 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800802e:	6939      	ldr	r1, [r7, #16]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 fa5d 	bl	80084f0 <I2C_ITSlaveCplt>
 8008036:	e0ca      	b.n	80081ce <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f003 0310 	and.w	r3, r3, #16
 800803e:	2b00      	cmp	r3, #0
 8008040:	d04b      	beq.n	80080da <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008048:	2b00      	cmp	r3, #0
 800804a:	d046      	beq.n	80080da <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008050:	b29b      	uxth	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d128      	bne.n	80080a8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b28      	cmp	r3, #40	; 0x28
 8008060:	d108      	bne.n	8008074 <I2C_Slave_ISR_IT+0x86>
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008068:	d104      	bne.n	8008074 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800806a:	6939      	ldr	r1, [r7, #16]
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 fba3 	bl	80087b8 <I2C_ITListenCplt>
 8008072:	e031      	b.n	80080d8 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b29      	cmp	r3, #41	; 0x29
 800807e:	d10e      	bne.n	800809e <I2C_Slave_ISR_IT+0xb0>
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008086:	d00a      	beq.n	800809e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2210      	movs	r2, #16
 800808e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 fcfc 	bl	8008a8e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 f9ce 	bl	8008438 <I2C_ITSlaveSeqCplt>
 800809c:	e01c      	b.n	80080d8 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2210      	movs	r2, #16
 80080a4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80080a6:	e08f      	b.n	80081c8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2210      	movs	r2, #16
 80080ae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b4:	f043 0204 	orr.w	r2, r3, #4
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <I2C_Slave_ISR_IT+0xdc>
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080c8:	d17e      	bne.n	80081c8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ce:	4619      	mov	r1, r3
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fbc5 	bl	8008860 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80080d6:	e077      	b.n	80081c8 <I2C_Slave_ISR_IT+0x1da>
 80080d8:	e076      	b.n	80081c8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d02f      	beq.n	8008144 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d02a      	beq.n	8008144 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d018      	beq.n	800812a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008114:	3b01      	subs	r3, #1
 8008116:	b29a      	uxth	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008120:	b29b      	uxth	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812e:	b29b      	uxth	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d14b      	bne.n	80081cc <I2C_Slave_ISR_IT+0x1de>
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800813a:	d047      	beq.n	80081cc <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 f97b 	bl	8008438 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008142:	e043      	b.n	80081cc <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d009      	beq.n	8008162 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008154:	2b00      	cmp	r3, #0
 8008156:	d004      	beq.n	8008162 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008158:	6939      	ldr	r1, [r7, #16]
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 f8e8 	bl	8008330 <I2C_ITAddrCplt>
 8008160:	e035      	b.n	80081ce <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d030      	beq.n	80081ce <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008172:	2b00      	cmp	r3, #0
 8008174:	d02b      	beq.n	80081ce <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800817a:	b29b      	uxth	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d018      	beq.n	80081b2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008184:	781a      	ldrb	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800819a:	b29b      	uxth	r3, r3
 800819c:	3b01      	subs	r3, #1
 800819e:	b29a      	uxth	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a8:	3b01      	subs	r3, #1
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	851a      	strh	r2, [r3, #40]	; 0x28
 80081b0:	e00d      	b.n	80081ce <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081b8:	d002      	beq.n	80081c0 <I2C_Slave_ISR_IT+0x1d2>
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d106      	bne.n	80081ce <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 f939 	bl	8008438 <I2C_ITSlaveSeqCplt>
 80081c6:	e002      	b.n	80081ce <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80081c8:	bf00      	nop
 80081ca:	e000      	b.n	80081ce <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80081cc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	4608      	mov	r0, r1
 80081ea:	4611      	mov	r1, r2
 80081ec:	461a      	mov	r2, r3
 80081ee:	4603      	mov	r3, r0
 80081f0:	817b      	strh	r3, [r7, #10]
 80081f2:	460b      	mov	r3, r1
 80081f4:	813b      	strh	r3, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80081fa:	88fb      	ldrh	r3, [r7, #6]
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	8979      	ldrh	r1, [r7, #10]
 8008200:	4b20      	ldr	r3, [pc, #128]	; (8008284 <I2C_RequestMemoryWrite+0xa4>)
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 fe45 	bl	8008e98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800820e:	69fa      	ldr	r2, [r7, #28]
 8008210:	69b9      	ldr	r1, [r7, #24]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 fcd6 	bl	8008bc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e02c      	b.n	800827c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008222:	88fb      	ldrh	r3, [r7, #6]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d105      	bne.n	8008234 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008228:	893b      	ldrh	r3, [r7, #8]
 800822a:	b2da      	uxtb	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	629a      	str	r2, [r3, #40]	; 0x28
 8008232:	e015      	b.n	8008260 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008234:	893b      	ldrh	r3, [r7, #8]
 8008236:	0a1b      	lsrs	r3, r3, #8
 8008238:	b29b      	uxth	r3, r3
 800823a:	b2da      	uxtb	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	69b9      	ldr	r1, [r7, #24]
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 fcbc 	bl	8008bc4 <I2C_WaitOnTXISFlagUntilTimeout>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e012      	b.n	800827c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008256:	893b      	ldrh	r3, [r7, #8]
 8008258:	b2da      	uxtb	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	2200      	movs	r2, #0
 8008268:	2180      	movs	r1, #128	; 0x80
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 fc51 	bl	8008b12 <I2C_WaitOnFlagUntilTimeout>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	80002000 	.word	0x80002000

08008288 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af02      	add	r7, sp, #8
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	4608      	mov	r0, r1
 8008292:	4611      	mov	r1, r2
 8008294:	461a      	mov	r2, r3
 8008296:	4603      	mov	r3, r0
 8008298:	817b      	strh	r3, [r7, #10]
 800829a:	460b      	mov	r3, r1
 800829c:	813b      	strh	r3, [r7, #8]
 800829e:	4613      	mov	r3, r2
 80082a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80082a2:	88fb      	ldrh	r3, [r7, #6]
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	8979      	ldrh	r1, [r7, #10]
 80082a8:	4b20      	ldr	r3, [pc, #128]	; (800832c <I2C_RequestMemoryRead+0xa4>)
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	2300      	movs	r3, #0
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 fdf2 	bl	8008e98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082b4:	69fa      	ldr	r2, [r7, #28]
 80082b6:	69b9      	ldr	r1, [r7, #24]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 fc83 	bl	8008bc4 <I2C_WaitOnTXISFlagUntilTimeout>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e02c      	b.n	8008322 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082c8:	88fb      	ldrh	r3, [r7, #6]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d105      	bne.n	80082da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082ce:	893b      	ldrh	r3, [r7, #8]
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	629a      	str	r2, [r3, #40]	; 0x28
 80082d8:	e015      	b.n	8008306 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80082da:	893b      	ldrh	r3, [r7, #8]
 80082dc:	0a1b      	lsrs	r3, r3, #8
 80082de:	b29b      	uxth	r3, r3
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	69b9      	ldr	r1, [r7, #24]
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 fc69 	bl	8008bc4 <I2C_WaitOnTXISFlagUntilTimeout>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e012      	b.n	8008322 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082fc:	893b      	ldrh	r3, [r7, #8]
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	2200      	movs	r2, #0
 800830e:	2140      	movs	r1, #64	; 0x40
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 fbfe 	bl	8008b12 <I2C_WaitOnFlagUntilTimeout>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e000      	b.n	8008322 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	80002000 	.word	0x80002000

08008330 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008340:	b2db      	uxtb	r3, r3
 8008342:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008346:	2b28      	cmp	r3, #40	; 0x28
 8008348:	d16a      	bne.n	8008420 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	0c1b      	lsrs	r3, r3, #16
 8008352:	b2db      	uxtb	r3, r3
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	0c1b      	lsrs	r3, r3, #16
 8008362:	b29b      	uxth	r3, r3
 8008364:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008368:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	b29b      	uxth	r3, r3
 8008372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008376:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	b29b      	uxth	r3, r3
 8008380:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008384:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d138      	bne.n	8008400 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800838e:	897b      	ldrh	r3, [r7, #10]
 8008390:	09db      	lsrs	r3, r3, #7
 8008392:	b29a      	uxth	r2, r3
 8008394:	89bb      	ldrh	r3, [r7, #12]
 8008396:	4053      	eors	r3, r2
 8008398:	b29b      	uxth	r3, r3
 800839a:	f003 0306 	and.w	r3, r3, #6
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d11c      	bne.n	80083dc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80083a2:	897b      	ldrh	r3, [r7, #10]
 80083a4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083aa:	1c5a      	adds	r2, r3, #1
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d13b      	bne.n	8008430 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2208      	movs	r2, #8
 80083c4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80083ce:	89ba      	ldrh	r2, [r7, #12]
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff fdd0 	bl	8007f7a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80083da:	e029      	b.n	8008430 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80083dc:	893b      	ldrh	r3, [r7, #8]
 80083de:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80083e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fd89 	bl	8008efc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80083f2:	89ba      	ldrh	r2, [r7, #12]
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff fdbe 	bl	8007f7a <HAL_I2C_AddrCallback>
}
 80083fe:	e017      	b.n	8008430 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fd79 	bl	8008efc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008412:	89ba      	ldrh	r2, [r7, #12]
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff fdae 	bl	8007f7a <HAL_I2C_AddrCallback>
}
 800841e:	e007      	b.n	8008430 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2208      	movs	r2, #8
 8008426:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008430:	bf00      	nop
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d008      	beq.n	800846c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	e00c      	b.n	8008486 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d007      	beq.n	8008486 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008484:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b29      	cmp	r3, #41	; 0x29
 8008490:	d112      	bne.n	80084b8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2228      	movs	r2, #40	; 0x28
 8008496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2221      	movs	r2, #33	; 0x21
 800849e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80084a0:	2101      	movs	r1, #1
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fd2a 	bl	8008efc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fd4e 	bl	8007f52 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80084b6:	e017      	b.n	80084e8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b2a      	cmp	r3, #42	; 0x2a
 80084c2:	d111      	bne.n	80084e8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2228      	movs	r2, #40	; 0x28
 80084c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2222      	movs	r2, #34	; 0x22
 80084d0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80084d2:	2102      	movs	r1, #2
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fd11 	bl	8008efc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7ff fd3f 	bl	8007f66 <HAL_I2C_SlaveRxCpltCallback>
}
 80084e8:	bf00      	nop
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008512:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2220      	movs	r2, #32
 800851a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800851c:	7afb      	ldrb	r3, [r7, #11]
 800851e:	2b21      	cmp	r3, #33	; 0x21
 8008520:	d002      	beq.n	8008528 <I2C_ITSlaveCplt+0x38>
 8008522:	7afb      	ldrb	r3, [r7, #11]
 8008524:	2b29      	cmp	r3, #41	; 0x29
 8008526:	d108      	bne.n	800853a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008528:	f248 0101 	movw	r1, #32769	; 0x8001
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fce5 	bl	8008efc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2221      	movs	r2, #33	; 0x21
 8008536:	631a      	str	r2, [r3, #48]	; 0x30
 8008538:	e019      	b.n	800856e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800853a:	7afb      	ldrb	r3, [r7, #11]
 800853c:	2b22      	cmp	r3, #34	; 0x22
 800853e:	d002      	beq.n	8008546 <I2C_ITSlaveCplt+0x56>
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	2b2a      	cmp	r3, #42	; 0x2a
 8008544:	d108      	bne.n	8008558 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008546:	f248 0102 	movw	r1, #32770	; 0x8002
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fcd6 	bl	8008efc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2222      	movs	r2, #34	; 0x22
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
 8008556:	e00a      	b.n	800856e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008558:	7afb      	ldrb	r3, [r7, #11]
 800855a:	2b28      	cmp	r3, #40	; 0x28
 800855c:	d107      	bne.n	800856e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800855e:	f248 0103 	movw	r1, #32771	; 0x8003
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fcca 	bl	8008efc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800857c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6859      	ldr	r1, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	4b89      	ldr	r3, [pc, #548]	; (80087b0 <I2C_ITSlaveCplt+0x2c0>)
 800858a:	400b      	ands	r3, r1
 800858c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fa7d 	bl	8008a8e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d013      	beq.n	80085c6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80085ac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d01f      	beq.n	80085f6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	b29a      	uxth	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80085c4:	e017      	b.n	80085f6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d012      	beq.n	80085f6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085de:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d006      	beq.n	80085f6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d020      	beq.n	8008642 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	f023 0304 	bic.w	r3, r3, #4
 8008606:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008612:	b2d2      	uxtb	r2, r2
 8008614:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00c      	beq.n	8008642 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800862c:	3b01      	subs	r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008638:	b29b      	uxth	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	b29a      	uxth	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d005      	beq.n	8008658 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008650:	f043 0204 	orr.w	r2, r3, #4
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f003 0310 	and.w	r3, r3, #16
 800865e:	2b00      	cmp	r3, #0
 8008660:	d049      	beq.n	80086f6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008668:	2b00      	cmp	r3, #0
 800866a:	d044      	beq.n	80086f6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008670:	b29b      	uxth	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d128      	bne.n	80086c8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b28      	cmp	r3, #40	; 0x28
 8008680:	d108      	bne.n	8008694 <I2C_ITSlaveCplt+0x1a4>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008688:	d104      	bne.n	8008694 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800868a:	6979      	ldr	r1, [r7, #20]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f893 	bl	80087b8 <I2C_ITListenCplt>
 8008692:	e030      	b.n	80086f6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b29      	cmp	r3, #41	; 0x29
 800869e:	d10e      	bne.n	80086be <I2C_ITSlaveCplt+0x1ce>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086a6:	d00a      	beq.n	80086be <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2210      	movs	r2, #16
 80086ae:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f9ec 	bl	8008a8e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff febe 	bl	8008438 <I2C_ITSlaveSeqCplt>
 80086bc:	e01b      	b.n	80086f6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2210      	movs	r2, #16
 80086c4:	61da      	str	r2, [r3, #28]
 80086c6:	e016      	b.n	80086f6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2210      	movs	r2, #16
 80086ce:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d4:	f043 0204 	orr.w	r2, r3, #4
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <I2C_ITSlaveCplt+0x1fa>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086e8:	d105      	bne.n	80086f6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f8b5 	bl	8008860 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008708:	2b00      	cmp	r3, #0
 800870a:	d010      	beq.n	800872e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f8a4 	bl	8008860 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b28      	cmp	r3, #40	; 0x28
 8008722:	d141      	bne.n	80087a8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008724:	6979      	ldr	r1, [r7, #20]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f846 	bl	80087b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800872c:	e03c      	b.n	80087a8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008732:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008736:	d014      	beq.n	8008762 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7ff fe7d 	bl	8008438 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a1c      	ldr	r2, [pc, #112]	; (80087b4 <I2C_ITSlaveCplt+0x2c4>)
 8008742:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff fc1b 	bl	8007f96 <HAL_I2C_ListenCpltCallback>
}
 8008760:	e022      	b.n	80087a8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b22      	cmp	r3, #34	; 0x22
 800876c:	d10e      	bne.n	800878c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2220      	movs	r2, #32
 8008772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff fbee 	bl	8007f66 <HAL_I2C_SlaveRxCpltCallback>
}
 800878a:	e00d      	b.n	80087a8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2220      	movs	r2, #32
 8008790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff fbd5 	bl	8007f52 <HAL_I2C_SlaveTxCpltCallback>
}
 80087a8:	bf00      	nop
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	fe00e800 	.word	0xfe00e800
 80087b4:	ffff0000 	.word	0xffff0000

080087b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a25      	ldr	r2, [pc, #148]	; (800885c <I2C_ITListenCplt+0xa4>)
 80087c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	f003 0304 	and.w	r3, r3, #4
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d022      	beq.n	8008834 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	b2d2      	uxtb	r2, r2
 80087fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800880a:	2b00      	cmp	r3, #0
 800880c:	d012      	beq.n	8008834 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800881e:	b29b      	uxth	r3, r3
 8008820:	3b01      	subs	r3, #1
 8008822:	b29a      	uxth	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882c:	f043 0204 	orr.w	r2, r3, #4
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008834:	f248 0103 	movw	r1, #32771	; 0x8003
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fb5f 	bl	8008efc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2210      	movs	r2, #16
 8008844:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff fba1 	bl	8007f96 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	ffff0000 	.word	0xffff0000

08008860 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008870:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a6d      	ldr	r2, [pc, #436]	; (8008a34 <I2C_ITError+0x1d4>)
 800887e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	431a      	orrs	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	2b28      	cmp	r3, #40	; 0x28
 8008896:	d005      	beq.n	80088a4 <I2C_ITError+0x44>
 8008898:	7bfb      	ldrb	r3, [r7, #15]
 800889a:	2b29      	cmp	r3, #41	; 0x29
 800889c:	d002      	beq.n	80088a4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	2b2a      	cmp	r3, #42	; 0x2a
 80088a2:	d10b      	bne.n	80088bc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80088a4:	2103      	movs	r1, #3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fb28 	bl	8008efc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2228      	movs	r2, #40	; 0x28
 80088b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a60      	ldr	r2, [pc, #384]	; (8008a38 <I2C_ITError+0x1d8>)
 80088b8:	635a      	str	r2, [r3, #52]	; 0x34
 80088ba:	e030      	b.n	800891e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80088bc:	f248 0103 	movw	r1, #32771	; 0x8003
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fb1b 	bl	8008efc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f8e1 	bl	8008a8e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b60      	cmp	r3, #96	; 0x60
 80088d6:	d01f      	beq.n	8008918 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	f003 0320 	and.w	r3, r3, #32
 80088ea:	2b20      	cmp	r3, #32
 80088ec:	d114      	bne.n	8008918 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	f003 0310 	and.w	r3, r3, #16
 80088f8:	2b10      	cmp	r3, #16
 80088fa:	d109      	bne.n	8008910 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2210      	movs	r2, #16
 8008902:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008908:	f043 0204 	orr.w	r2, r3, #4
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2220      	movs	r2, #32
 8008916:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008928:	2b00      	cmp	r3, #0
 800892a:	d039      	beq.n	80089a0 <I2C_ITError+0x140>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2b11      	cmp	r3, #17
 8008930:	d002      	beq.n	8008938 <I2C_ITError+0xd8>
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b21      	cmp	r3, #33	; 0x21
 8008936:	d133      	bne.n	80089a0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008946:	d107      	bne.n	8008958 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008956:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895c:	4618      	mov	r0, r3
 800895e:	f7fe f822 	bl	80069a6 <HAL_DMA_GetState>
 8008962:	4603      	mov	r3, r0
 8008964:	2b01      	cmp	r3, #1
 8008966:	d017      	beq.n	8008998 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896c:	4a33      	ldr	r2, [pc, #204]	; (8008a3c <I2C_ITError+0x1dc>)
 800896e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897c:	4618      	mov	r0, r3
 800897e:	f7fd fefc 	bl	800677a <HAL_DMA_Abort_IT>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d04d      	beq.n	8008a24 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008992:	4610      	mov	r0, r2
 8008994:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008996:	e045      	b.n	8008a24 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f851 	bl	8008a40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800899e:	e041      	b.n	8008a24 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d039      	beq.n	8008a1c <I2C_ITError+0x1bc>
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2b12      	cmp	r3, #18
 80089ac:	d002      	beq.n	80089b4 <I2C_ITError+0x154>
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2b22      	cmp	r3, #34	; 0x22
 80089b2:	d133      	bne.n	8008a1c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089c2:	d107      	bne.n	80089d4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fd ffe4 	bl	80069a6 <HAL_DMA_GetState>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d017      	beq.n	8008a14 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e8:	4a14      	ldr	r2, [pc, #80]	; (8008a3c <I2C_ITError+0x1dc>)
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fd febe 	bl	800677a <HAL_DMA_Abort_IT>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d011      	beq.n	8008a28 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008a0e:	4610      	mov	r0, r2
 8008a10:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a12:	e009      	b.n	8008a28 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f813 	bl	8008a40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a1a:	e005      	b.n	8008a28 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f80f 	bl	8008a40 <I2C_TreatErrorCallback>
  }
}
 8008a22:	e002      	b.n	8008a2a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008a24:	bf00      	nop
 8008a26:	e000      	b.n	8008a2a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a28:	bf00      	nop
}
 8008a2a:	bf00      	nop
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	ffff0000 	.word	0xffff0000
 8008a38:	08007fef 	.word	0x08007fef
 8008a3c:	08008ad7 	.word	0x08008ad7

08008a40 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b60      	cmp	r3, #96	; 0x60
 8008a52:	d10e      	bne.n	8008a72 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2220      	movs	r2, #32
 8008a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7ff faa7 	bl	8007fbe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a70:	e009      	b.n	8008a86 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff fa92 	bl	8007faa <HAL_I2C_ErrorCallback>
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d103      	bne.n	8008aac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d007      	beq.n	8008aca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	699a      	ldr	r2, [r3, #24]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f042 0201 	orr.w	r2, r2, #1
 8008ac8:	619a      	str	r2, [r3, #24]
  }
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af0:	2200      	movs	r2, #0
 8008af2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b00:	2200      	movs	r2, #0
 8008b02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f7ff ff9b 	bl	8008a40 <I2C_TreatErrorCallback>
}
 8008b0a:	bf00      	nop
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	603b      	str	r3, [r7, #0]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b22:	e03b      	b.n	8008b9c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 f8d5 	bl	8008cd8 <I2C_IsErrorOccurred>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e041      	b.n	8008bbc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3e:	d02d      	beq.n	8008b9c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b40:	f7fd fbdc 	bl	80062fc <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d302      	bcc.n	8008b56 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d122      	bne.n	8008b9c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	699a      	ldr	r2, [r3, #24]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	4013      	ands	r3, r2
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	bf0c      	ite	eq
 8008b66:	2301      	moveq	r3, #1
 8008b68:	2300      	movne	r3, #0
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d113      	bne.n	8008b9c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b78:	f043 0220 	orr.w	r2, r3, #32
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2220      	movs	r2, #32
 8008b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e00f      	b.n	8008bbc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	699a      	ldr	r2, [r3, #24]
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	bf0c      	ite	eq
 8008bac:	2301      	moveq	r3, #1
 8008bae:	2300      	movne	r3, #0
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	79fb      	ldrb	r3, [r7, #7]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d0b4      	beq.n	8008b24 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008bd0:	e033      	b.n	8008c3a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	68b9      	ldr	r1, [r7, #8]
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 f87e 	bl	8008cd8 <I2C_IsErrorOccurred>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e031      	b.n	8008c4a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bec:	d025      	beq.n	8008c3a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bee:	f7fd fb85 	bl	80062fc <HAL_GetTick>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d302      	bcc.n	8008c04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d11a      	bne.n	8008c3a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d013      	beq.n	8008c3a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c16:	f043 0220 	orr.w	r2, r3, #32
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2220      	movs	r2, #32
 8008c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e007      	b.n	8008c4a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	f003 0302 	and.w	r3, r3, #2
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d1c4      	bne.n	8008bd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c5e:	e02f      	b.n	8008cc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	68b9      	ldr	r1, [r7, #8]
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 f837 	bl	8008cd8 <I2C_IsErrorOccurred>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e02d      	b.n	8008cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c74:	f7fd fb42 	bl	80062fc <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d302      	bcc.n	8008c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d11a      	bne.n	8008cc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	f003 0320 	and.w	r3, r3, #32
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	d013      	beq.n	8008cc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c9c:	f043 0220 	orr.w	r2, r3, #32
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e007      	b.n	8008cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	d1c8      	bne.n	8008c60 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08a      	sub	sp, #40	; 0x28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	f003 0310 	and.w	r3, r3, #16
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d068      	beq.n	8008dd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2210      	movs	r2, #16
 8008d0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d0c:	e049      	b.n	8008da2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d14:	d045      	beq.n	8008da2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d16:	f7fd faf1 	bl	80062fc <HAL_GetTick>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d302      	bcc.n	8008d2c <I2C_IsErrorOccurred+0x54>
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d13a      	bne.n	8008da2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d4e:	d121      	bne.n	8008d94 <I2C_IsErrorOccurred+0xbc>
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d56:	d01d      	beq.n	8008d94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008d58:	7cfb      	ldrb	r3, [r7, #19]
 8008d5a:	2b20      	cmp	r3, #32
 8008d5c:	d01a      	beq.n	8008d94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008d6e:	f7fd fac5 	bl	80062fc <HAL_GetTick>
 8008d72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d74:	e00e      	b.n	8008d94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008d76:	f7fd fac1 	bl	80062fc <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	2b19      	cmp	r3, #25
 8008d82:	d907      	bls.n	8008d94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	f043 0320 	orr.w	r3, r3, #32
 8008d8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008d92:	e006      	b.n	8008da2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	f003 0320 	and.w	r3, r3, #32
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	d1e9      	bne.n	8008d76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b20      	cmp	r3, #32
 8008dae:	d003      	beq.n	8008db8 <I2C_IsErrorOccurred+0xe0>
 8008db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0aa      	beq.n	8008d0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d103      	bne.n	8008dc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	f043 0304 	orr.w	r3, r3, #4
 8008dce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	f043 0301 	orr.w	r3, r3, #1
 8008dee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008df8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00b      	beq.n	8008e22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	f043 0308 	orr.w	r3, r3, #8
 8008e10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	f043 0302 	orr.w	r3, r3, #2
 8008e32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d01c      	beq.n	8008e86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f7ff fe1e 	bl	8008a8e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6859      	ldr	r1, [r3, #4]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	4b0d      	ldr	r3, [pc, #52]	; (8008e94 <I2C_IsErrorOccurred+0x1bc>)
 8008e5e:	400b      	ands	r3, r1
 8008e60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2220      	movs	r2, #32
 8008e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3728      	adds	r7, #40	; 0x28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	fe00e800 	.word	0xfe00e800

08008e98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	607b      	str	r3, [r7, #4]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	817b      	strh	r3, [r7, #10]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008eaa:	897b      	ldrh	r3, [r7, #10]
 8008eac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008eb0:	7a7b      	ldrb	r3, [r7, #9]
 8008eb2:	041b      	lsls	r3, r3, #16
 8008eb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008eb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ec6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	0d5b      	lsrs	r3, r3, #21
 8008ed2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008ed6:	4b08      	ldr	r3, [pc, #32]	; (8008ef8 <I2C_TransferConfig+0x60>)
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	43db      	mvns	r3, r3
 8008edc:	ea02 0103 	and.w	r1, r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008eea:	bf00      	nop
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	03ff63ff 	.word	0x03ff63ff

08008efc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f0c:	887b      	ldrh	r3, [r7, #2]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00f      	beq.n	8008f36 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008f1c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f2a:	2b28      	cmp	r3, #40	; 0x28
 8008f2c:	d003      	beq.n	8008f36 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008f34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008f36:	887b      	ldrh	r3, [r7, #2]
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00f      	beq.n	8008f60 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008f46:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f54:	2b28      	cmp	r3, #40	; 0x28
 8008f56:	d003      	beq.n	8008f60 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008f5e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008f60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	da03      	bge.n	8008f70 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008f6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008f70:	887b      	ldrh	r3, [r7, #2]
 8008f72:	2b10      	cmp	r3, #16
 8008f74:	d103      	bne.n	8008f7e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008f7c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008f7e:	887b      	ldrh	r3, [r7, #2]
 8008f80:	2b20      	cmp	r3, #32
 8008f82:	d103      	bne.n	8008f8c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f043 0320 	orr.w	r3, r3, #32
 8008f8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008f8c:	887b      	ldrh	r3, [r7, #2]
 8008f8e:	2b40      	cmp	r3, #64	; 0x40
 8008f90:	d103      	bne.n	8008f9a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f98:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6819      	ldr	r1, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	43da      	mvns	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	400a      	ands	r2, r1
 8008faa:	601a      	str	r2, [r3, #0]
}
 8008fac:	bf00      	nop
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b20      	cmp	r3, #32
 8008fcc:	d138      	bne.n	8009040 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d101      	bne.n	8008fdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008fd8:	2302      	movs	r3, #2
 8008fda:	e032      	b.n	8009042 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2224      	movs	r2, #36	; 0x24
 8008fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0201 	bic.w	r2, r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800900a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6819      	ldr	r1, [r3, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	430a      	orrs	r2, r1
 800901a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f042 0201 	orr.w	r2, r2, #1
 800902a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2220      	movs	r2, #32
 8009030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	e000      	b.n	8009042 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009040:	2302      	movs	r3, #2
  }
}
 8009042:	4618      	mov	r0, r3
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800904e:	b480      	push	{r7}
 8009050:	b085      	sub	sp, #20
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b20      	cmp	r3, #32
 8009062:	d139      	bne.n	80090d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800906a:	2b01      	cmp	r3, #1
 800906c:	d101      	bne.n	8009072 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800906e:	2302      	movs	r3, #2
 8009070:	e033      	b.n	80090da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2224      	movs	r2, #36	; 0x24
 800907e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f022 0201 	bic.w	r2, r2, #1
 8009090:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80090a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	021b      	lsls	r3, r3, #8
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0201 	orr.w	r2, r2, #1
 80090c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2220      	movs	r2, #32
 80090c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	e000      	b.n	80090da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80090d8:	2302      	movs	r3, #2
  }
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d141      	bne.n	800917a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80090f6:	4b4b      	ldr	r3, [pc, #300]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80090fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009102:	d131      	bne.n	8009168 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009104:	4b47      	ldr	r3, [pc, #284]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800910a:	4a46      	ldr	r2, [pc, #280]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800910c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009110:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009114:	4b43      	ldr	r3, [pc, #268]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800911c:	4a41      	ldr	r2, [pc, #260]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800911e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009122:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009124:	4b40      	ldr	r3, [pc, #256]	; (8009228 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2232      	movs	r2, #50	; 0x32
 800912a:	fb02 f303 	mul.w	r3, r2, r3
 800912e:	4a3f      	ldr	r2, [pc, #252]	; (800922c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009130:	fba2 2303 	umull	r2, r3, r2, r3
 8009134:	0c9b      	lsrs	r3, r3, #18
 8009136:	3301      	adds	r3, #1
 8009138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800913a:	e002      	b.n	8009142 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3b01      	subs	r3, #1
 8009140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009142:	4b38      	ldr	r3, [pc, #224]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800914a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800914e:	d102      	bne.n	8009156 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1f2      	bne.n	800913c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009156:	4b33      	ldr	r3, [pc, #204]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800915e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009162:	d158      	bne.n	8009216 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e057      	b.n	8009218 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009168:	4b2e      	ldr	r3, [pc, #184]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800916a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800916e:	4a2d      	ldr	r2, [pc, #180]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009174:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009178:	e04d      	b.n	8009216 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009180:	d141      	bne.n	8009206 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009182:	4b28      	ldr	r3, [pc, #160]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800918a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800918e:	d131      	bne.n	80091f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009190:	4b24      	ldr	r3, [pc, #144]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009196:	4a23      	ldr	r2, [pc, #140]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800919c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80091a0:	4b20      	ldr	r3, [pc, #128]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80091a8:	4a1e      	ldr	r2, [pc, #120]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80091b0:	4b1d      	ldr	r3, [pc, #116]	; (8009228 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2232      	movs	r2, #50	; 0x32
 80091b6:	fb02 f303 	mul.w	r3, r2, r3
 80091ba:	4a1c      	ldr	r2, [pc, #112]	; (800922c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80091bc:	fba2 2303 	umull	r2, r3, r2, r3
 80091c0:	0c9b      	lsrs	r3, r3, #18
 80091c2:	3301      	adds	r3, #1
 80091c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091c6:	e002      	b.n	80091ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091ce:	4b15      	ldr	r3, [pc, #84]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091da:	d102      	bne.n	80091e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1f2      	bne.n	80091c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80091e2:	4b10      	ldr	r3, [pc, #64]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ee:	d112      	bne.n	8009216 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e011      	b.n	8009218 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80091f4:	4b0b      	ldr	r3, [pc, #44]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091fa:	4a0a      	ldr	r2, [pc, #40]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009200:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009204:	e007      	b.n	8009216 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009206:	4b07      	ldr	r3, [pc, #28]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800920e:	4a05      	ldr	r2, [pc, #20]	; (8009224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009210:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009214:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	40007000 	.word	0x40007000
 8009228:	20000000 	.word	0x20000000
 800922c:	431bde83 	.word	0x431bde83

08009230 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009230:	b480      	push	{r7}
 8009232:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009234:	4b05      	ldr	r3, [pc, #20]	; (800924c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	4a04      	ldr	r2, [pc, #16]	; (800924c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800923a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800923e:	6093      	str	r3, [r2, #8]
}
 8009240:	bf00      	nop
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40007000 	.word	0x40007000

08009250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e2fe      	b.n	8009860 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	d075      	beq.n	800935a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800926e:	4b97      	ldr	r3, [pc, #604]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f003 030c 	and.w	r3, r3, #12
 8009276:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009278:	4b94      	ldr	r3, [pc, #592]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	f003 0303 	and.w	r3, r3, #3
 8009280:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	2b0c      	cmp	r3, #12
 8009286:	d102      	bne.n	800928e <HAL_RCC_OscConfig+0x3e>
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	2b03      	cmp	r3, #3
 800928c:	d002      	beq.n	8009294 <HAL_RCC_OscConfig+0x44>
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	2b08      	cmp	r3, #8
 8009292:	d10b      	bne.n	80092ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009294:	4b8d      	ldr	r3, [pc, #564]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d05b      	beq.n	8009358 <HAL_RCC_OscConfig+0x108>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d157      	bne.n	8009358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e2d9      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092b4:	d106      	bne.n	80092c4 <HAL_RCC_OscConfig+0x74>
 80092b6:	4b85      	ldr	r3, [pc, #532]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a84      	ldr	r2, [pc, #528]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	e01d      	b.n	8009300 <HAL_RCC_OscConfig+0xb0>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092cc:	d10c      	bne.n	80092e8 <HAL_RCC_OscConfig+0x98>
 80092ce:	4b7f      	ldr	r3, [pc, #508]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a7e      	ldr	r2, [pc, #504]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	4b7c      	ldr	r3, [pc, #496]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a7b      	ldr	r2, [pc, #492]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	e00b      	b.n	8009300 <HAL_RCC_OscConfig+0xb0>
 80092e8:	4b78      	ldr	r3, [pc, #480]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a77      	ldr	r2, [pc, #476]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	4b75      	ldr	r3, [pc, #468]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a74      	ldr	r2, [pc, #464]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d013      	beq.n	8009330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009308:	f7fc fff8 	bl	80062fc <HAL_GetTick>
 800930c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800930e:	e008      	b.n	8009322 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009310:	f7fc fff4 	bl	80062fc <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	2b64      	cmp	r3, #100	; 0x64
 800931c:	d901      	bls.n	8009322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e29e      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009322:	4b6a      	ldr	r3, [pc, #424]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0f0      	beq.n	8009310 <HAL_RCC_OscConfig+0xc0>
 800932e:	e014      	b.n	800935a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009330:	f7fc ffe4 	bl	80062fc <HAL_GetTick>
 8009334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009336:	e008      	b.n	800934a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009338:	f7fc ffe0 	bl	80062fc <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b64      	cmp	r3, #100	; 0x64
 8009344:	d901      	bls.n	800934a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e28a      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800934a:	4b60      	ldr	r3, [pc, #384]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1f0      	bne.n	8009338 <HAL_RCC_OscConfig+0xe8>
 8009356:	e000      	b.n	800935a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d075      	beq.n	8009452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009366:	4b59      	ldr	r3, [pc, #356]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f003 030c 	and.w	r3, r3, #12
 800936e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009370:	4b56      	ldr	r3, [pc, #344]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	2b0c      	cmp	r3, #12
 800937e:	d102      	bne.n	8009386 <HAL_RCC_OscConfig+0x136>
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	2b02      	cmp	r3, #2
 8009384:	d002      	beq.n	800938c <HAL_RCC_OscConfig+0x13c>
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	2b04      	cmp	r3, #4
 800938a:	d11f      	bne.n	80093cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800938c:	4b4f      	ldr	r3, [pc, #316]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <HAL_RCC_OscConfig+0x154>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e25d      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093a4:	4b49      	ldr	r3, [pc, #292]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	061b      	lsls	r3, r3, #24
 80093b2:	4946      	ldr	r1, [pc, #280]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80093b8:	4b45      	ldr	r3, [pc, #276]	; (80094d0 <HAL_RCC_OscConfig+0x280>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fc ff51 	bl	8006264 <HAL_InitTick>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d043      	beq.n	8009450 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e249      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d023      	beq.n	800941c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093d4:	4b3d      	ldr	r3, [pc, #244]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a3c      	ldr	r2, [pc, #240]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80093da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093e0:	f7fc ff8c 	bl	80062fc <HAL_GetTick>
 80093e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80093e6:	e008      	b.n	80093fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093e8:	f7fc ff88 	bl	80062fc <HAL_GetTick>
 80093ec:	4602      	mov	r2, r0
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d901      	bls.n	80093fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e232      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80093fa:	4b34      	ldr	r3, [pc, #208]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009402:	2b00      	cmp	r3, #0
 8009404:	d0f0      	beq.n	80093e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009406:	4b31      	ldr	r3, [pc, #196]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	061b      	lsls	r3, r3, #24
 8009414:	492d      	ldr	r1, [pc, #180]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009416:	4313      	orrs	r3, r2
 8009418:	604b      	str	r3, [r1, #4]
 800941a:	e01a      	b.n	8009452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800941c:	4b2b      	ldr	r3, [pc, #172]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a2a      	ldr	r2, [pc, #168]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009428:	f7fc ff68 	bl	80062fc <HAL_GetTick>
 800942c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800942e:	e008      	b.n	8009442 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009430:	f7fc ff64 	bl	80062fc <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b02      	cmp	r3, #2
 800943c:	d901      	bls.n	8009442 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e20e      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009442:	4b22      	ldr	r3, [pc, #136]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1f0      	bne.n	8009430 <HAL_RCC_OscConfig+0x1e0>
 800944e:	e000      	b.n	8009452 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009450:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0308 	and.w	r3, r3, #8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d041      	beq.n	80094e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d01c      	beq.n	80094a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009466:	4b19      	ldr	r3, [pc, #100]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800946c:	4a17      	ldr	r2, [pc, #92]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 800946e:	f043 0301 	orr.w	r3, r3, #1
 8009472:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009476:	f7fc ff41 	bl	80062fc <HAL_GetTick>
 800947a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800947c:	e008      	b.n	8009490 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800947e:	f7fc ff3d 	bl	80062fc <HAL_GetTick>
 8009482:	4602      	mov	r2, r0
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	2b02      	cmp	r3, #2
 800948a:	d901      	bls.n	8009490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e1e7      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009490:	4b0e      	ldr	r3, [pc, #56]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0ef      	beq.n	800947e <HAL_RCC_OscConfig+0x22e>
 800949e:	e020      	b.n	80094e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094a0:	4b0a      	ldr	r3, [pc, #40]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80094a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094a6:	4a09      	ldr	r2, [pc, #36]	; (80094cc <HAL_RCC_OscConfig+0x27c>)
 80094a8:	f023 0301 	bic.w	r3, r3, #1
 80094ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094b0:	f7fc ff24 	bl	80062fc <HAL_GetTick>
 80094b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80094b6:	e00d      	b.n	80094d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80094b8:	f7fc ff20 	bl	80062fc <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d906      	bls.n	80094d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e1ca      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
 80094ca:	bf00      	nop
 80094cc:	40021000 	.word	0x40021000
 80094d0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80094d4:	4b8c      	ldr	r3, [pc, #560]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 80094d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094da:	f003 0302 	and.w	r3, r3, #2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1ea      	bne.n	80094b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0304 	and.w	r3, r3, #4
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 80a6 	beq.w	800963c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094f0:	2300      	movs	r3, #0
 80094f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80094f4:	4b84      	ldr	r3, [pc, #528]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 80094f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d101      	bne.n	8009504 <HAL_RCC_OscConfig+0x2b4>
 8009500:	2301      	movs	r3, #1
 8009502:	e000      	b.n	8009506 <HAL_RCC_OscConfig+0x2b6>
 8009504:	2300      	movs	r3, #0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00d      	beq.n	8009526 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800950a:	4b7f      	ldr	r3, [pc, #508]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 800950c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800950e:	4a7e      	ldr	r2, [pc, #504]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 8009510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009514:	6593      	str	r3, [r2, #88]	; 0x58
 8009516:	4b7c      	ldr	r3, [pc, #496]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 8009518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800951a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009522:	2301      	movs	r3, #1
 8009524:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009526:	4b79      	ldr	r3, [pc, #484]	; (800970c <HAL_RCC_OscConfig+0x4bc>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952e:	2b00      	cmp	r3, #0
 8009530:	d118      	bne.n	8009564 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009532:	4b76      	ldr	r3, [pc, #472]	; (800970c <HAL_RCC_OscConfig+0x4bc>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a75      	ldr	r2, [pc, #468]	; (800970c <HAL_RCC_OscConfig+0x4bc>)
 8009538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800953c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800953e:	f7fc fedd 	bl	80062fc <HAL_GetTick>
 8009542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009544:	e008      	b.n	8009558 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009546:	f7fc fed9 	bl	80062fc <HAL_GetTick>
 800954a:	4602      	mov	r2, r0
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	2b02      	cmp	r3, #2
 8009552:	d901      	bls.n	8009558 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e183      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009558:	4b6c      	ldr	r3, [pc, #432]	; (800970c <HAL_RCC_OscConfig+0x4bc>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009560:	2b00      	cmp	r3, #0
 8009562:	d0f0      	beq.n	8009546 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d108      	bne.n	800957e <HAL_RCC_OscConfig+0x32e>
 800956c:	4b66      	ldr	r3, [pc, #408]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 800956e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009572:	4a65      	ldr	r2, [pc, #404]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 8009574:	f043 0301 	orr.w	r3, r3, #1
 8009578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800957c:	e024      	b.n	80095c8 <HAL_RCC_OscConfig+0x378>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	2b05      	cmp	r3, #5
 8009584:	d110      	bne.n	80095a8 <HAL_RCC_OscConfig+0x358>
 8009586:	4b60      	ldr	r3, [pc, #384]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 8009588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800958c:	4a5e      	ldr	r2, [pc, #376]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 800958e:	f043 0304 	orr.w	r3, r3, #4
 8009592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009596:	4b5c      	ldr	r3, [pc, #368]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 8009598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800959c:	4a5a      	ldr	r2, [pc, #360]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 800959e:	f043 0301 	orr.w	r3, r3, #1
 80095a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80095a6:	e00f      	b.n	80095c8 <HAL_RCC_OscConfig+0x378>
 80095a8:	4b57      	ldr	r3, [pc, #348]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 80095aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ae:	4a56      	ldr	r2, [pc, #344]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 80095b0:	f023 0301 	bic.w	r3, r3, #1
 80095b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80095b8:	4b53      	ldr	r3, [pc, #332]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 80095ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095be:	4a52      	ldr	r2, [pc, #328]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 80095c0:	f023 0304 	bic.w	r3, r3, #4
 80095c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d016      	beq.n	80095fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095d0:	f7fc fe94 	bl	80062fc <HAL_GetTick>
 80095d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095d6:	e00a      	b.n	80095ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095d8:	f7fc fe90 	bl	80062fc <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d901      	bls.n	80095ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e138      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095ee:	4b46      	ldr	r3, [pc, #280]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 80095f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095f4:	f003 0302 	and.w	r3, r3, #2
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d0ed      	beq.n	80095d8 <HAL_RCC_OscConfig+0x388>
 80095fc:	e015      	b.n	800962a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095fe:	f7fc fe7d 	bl	80062fc <HAL_GetTick>
 8009602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009604:	e00a      	b.n	800961c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009606:	f7fc fe79 	bl	80062fc <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	f241 3288 	movw	r2, #5000	; 0x1388
 8009614:	4293      	cmp	r3, r2
 8009616:	d901      	bls.n	800961c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	e121      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800961c:	4b3a      	ldr	r3, [pc, #232]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 800961e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1ed      	bne.n	8009606 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800962a:	7ffb      	ldrb	r3, [r7, #31]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d105      	bne.n	800963c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009630:	4b35      	ldr	r3, [pc, #212]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 8009632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009634:	4a34      	ldr	r2, [pc, #208]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 8009636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800963a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 0320 	and.w	r3, r3, #32
 8009644:	2b00      	cmp	r3, #0
 8009646:	d03c      	beq.n	80096c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d01c      	beq.n	800968a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009650:	4b2d      	ldr	r3, [pc, #180]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 8009652:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009656:	4a2c      	ldr	r2, [pc, #176]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 8009658:	f043 0301 	orr.w	r3, r3, #1
 800965c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009660:	f7fc fe4c 	bl	80062fc <HAL_GetTick>
 8009664:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009666:	e008      	b.n	800967a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009668:	f7fc fe48 	bl	80062fc <HAL_GetTick>
 800966c:	4602      	mov	r2, r0
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	2b02      	cmp	r3, #2
 8009674:	d901      	bls.n	800967a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009676:	2303      	movs	r3, #3
 8009678:	e0f2      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800967a:	4b23      	ldr	r3, [pc, #140]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 800967c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009680:	f003 0302 	and.w	r3, r3, #2
 8009684:	2b00      	cmp	r3, #0
 8009686:	d0ef      	beq.n	8009668 <HAL_RCC_OscConfig+0x418>
 8009688:	e01b      	b.n	80096c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800968a:	4b1f      	ldr	r3, [pc, #124]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 800968c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009690:	4a1d      	ldr	r2, [pc, #116]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 8009692:	f023 0301 	bic.w	r3, r3, #1
 8009696:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800969a:	f7fc fe2f 	bl	80062fc <HAL_GetTick>
 800969e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80096a0:	e008      	b.n	80096b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80096a2:	f7fc fe2b 	bl	80062fc <HAL_GetTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d901      	bls.n	80096b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e0d5      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80096b4:	4b14      	ldr	r3, [pc, #80]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 80096b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1ef      	bne.n	80096a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 80c9 	beq.w	800985e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80096cc:	4b0e      	ldr	r3, [pc, #56]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f003 030c 	and.w	r3, r3, #12
 80096d4:	2b0c      	cmp	r3, #12
 80096d6:	f000 8083 	beq.w	80097e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d15e      	bne.n	80097a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096e2:	4b09      	ldr	r3, [pc, #36]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a08      	ldr	r2, [pc, #32]	; (8009708 <HAL_RCC_OscConfig+0x4b8>)
 80096e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ee:	f7fc fe05 	bl	80062fc <HAL_GetTick>
 80096f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80096f4:	e00c      	b.n	8009710 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096f6:	f7fc fe01 	bl	80062fc <HAL_GetTick>
 80096fa:	4602      	mov	r2, r0
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	2b02      	cmp	r3, #2
 8009702:	d905      	bls.n	8009710 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009704:	2303      	movs	r3, #3
 8009706:	e0ab      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
 8009708:	40021000 	.word	0x40021000
 800970c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009710:	4b55      	ldr	r3, [pc, #340]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1ec      	bne.n	80096f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800971c:	4b52      	ldr	r3, [pc, #328]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	4b52      	ldr	r3, [pc, #328]	; (800986c <HAL_RCC_OscConfig+0x61c>)
 8009722:	4013      	ands	r3, r2
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6a11      	ldr	r1, [r2, #32]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800972c:	3a01      	subs	r2, #1
 800972e:	0112      	lsls	r2, r2, #4
 8009730:	4311      	orrs	r1, r2
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009736:	0212      	lsls	r2, r2, #8
 8009738:	4311      	orrs	r1, r2
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800973e:	0852      	lsrs	r2, r2, #1
 8009740:	3a01      	subs	r2, #1
 8009742:	0552      	lsls	r2, r2, #21
 8009744:	4311      	orrs	r1, r2
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800974a:	0852      	lsrs	r2, r2, #1
 800974c:	3a01      	subs	r2, #1
 800974e:	0652      	lsls	r2, r2, #25
 8009750:	4311      	orrs	r1, r2
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009756:	06d2      	lsls	r2, r2, #27
 8009758:	430a      	orrs	r2, r1
 800975a:	4943      	ldr	r1, [pc, #268]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 800975c:	4313      	orrs	r3, r2
 800975e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009760:	4b41      	ldr	r3, [pc, #260]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a40      	ldr	r2, [pc, #256]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 8009766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800976a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800976c:	4b3e      	ldr	r3, [pc, #248]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	4a3d      	ldr	r2, [pc, #244]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 8009772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009776:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009778:	f7fc fdc0 	bl	80062fc <HAL_GetTick>
 800977c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800977e:	e008      	b.n	8009792 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009780:	f7fc fdbc 	bl	80062fc <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	2b02      	cmp	r3, #2
 800978c:	d901      	bls.n	8009792 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e066      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009792:	4b35      	ldr	r3, [pc, #212]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d0f0      	beq.n	8009780 <HAL_RCC_OscConfig+0x530>
 800979e:	e05e      	b.n	800985e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097a0:	4b31      	ldr	r3, [pc, #196]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a30      	ldr	r2, [pc, #192]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 80097a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ac:	f7fc fda6 	bl	80062fc <HAL_GetTick>
 80097b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097b2:	e008      	b.n	80097c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097b4:	f7fc fda2 	bl	80062fc <HAL_GetTick>
 80097b8:	4602      	mov	r2, r0
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d901      	bls.n	80097c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e04c      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097c6:	4b28      	ldr	r3, [pc, #160]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1f0      	bne.n	80097b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80097d2:	4b25      	ldr	r3, [pc, #148]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 80097d4:	68da      	ldr	r2, [r3, #12]
 80097d6:	4924      	ldr	r1, [pc, #144]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 80097d8:	4b25      	ldr	r3, [pc, #148]	; (8009870 <HAL_RCC_OscConfig+0x620>)
 80097da:	4013      	ands	r3, r2
 80097dc:	60cb      	str	r3, [r1, #12]
 80097de:	e03e      	b.n	800985e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	69db      	ldr	r3, [r3, #28]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d101      	bne.n	80097ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e039      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80097ec:	4b1e      	ldr	r3, [pc, #120]	; (8009868 <HAL_RCC_OscConfig+0x618>)
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	f003 0203 	and.w	r2, r3, #3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d12c      	bne.n	800985a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980a:	3b01      	subs	r3, #1
 800980c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800980e:	429a      	cmp	r2, r3
 8009810:	d123      	bne.n	800985a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800981c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800981e:	429a      	cmp	r2, r3
 8009820:	d11b      	bne.n	800985a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800982e:	429a      	cmp	r2, r3
 8009830:	d113      	bne.n	800985a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983c:	085b      	lsrs	r3, r3, #1
 800983e:	3b01      	subs	r3, #1
 8009840:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009842:	429a      	cmp	r2, r3
 8009844:	d109      	bne.n	800985a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009850:	085b      	lsrs	r3, r3, #1
 8009852:	3b01      	subs	r3, #1
 8009854:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009856:	429a      	cmp	r2, r3
 8009858:	d001      	beq.n	800985e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e000      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3720      	adds	r7, #32
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	40021000 	.word	0x40021000
 800986c:	019f800c 	.word	0x019f800c
 8009870:	feeefffc 	.word	0xfeeefffc

08009874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800987e:	2300      	movs	r3, #0
 8009880:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e11e      	b.n	8009aca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800988c:	4b91      	ldr	r3, [pc, #580]	; (8009ad4 <HAL_RCC_ClockConfig+0x260>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	683a      	ldr	r2, [r7, #0]
 8009896:	429a      	cmp	r2, r3
 8009898:	d910      	bls.n	80098bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800989a:	4b8e      	ldr	r3, [pc, #568]	; (8009ad4 <HAL_RCC_ClockConfig+0x260>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f023 020f 	bic.w	r2, r3, #15
 80098a2:	498c      	ldr	r1, [pc, #560]	; (8009ad4 <HAL_RCC_ClockConfig+0x260>)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098aa:	4b8a      	ldr	r3, [pc, #552]	; (8009ad4 <HAL_RCC_ClockConfig+0x260>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 030f 	and.w	r3, r3, #15
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d001      	beq.n	80098bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e106      	b.n	8009aca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d073      	beq.n	80099b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	2b03      	cmp	r3, #3
 80098ce:	d129      	bne.n	8009924 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098d0:	4b81      	ldr	r3, [pc, #516]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e0f4      	b.n	8009aca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80098e0:	f000 f99e 	bl	8009c20 <RCC_GetSysClockFreqFromPLLSource>
 80098e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	4a7c      	ldr	r2, [pc, #496]	; (8009adc <HAL_RCC_ClockConfig+0x268>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d93f      	bls.n	800996e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80098ee:	4b7a      	ldr	r3, [pc, #488]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009902:	2b00      	cmp	r3, #0
 8009904:	d033      	beq.n	800996e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800990a:	2b00      	cmp	r3, #0
 800990c:	d12f      	bne.n	800996e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800990e:	4b72      	ldr	r3, [pc, #456]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009916:	4a70      	ldr	r2, [pc, #448]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 8009918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800991c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800991e:	2380      	movs	r3, #128	; 0x80
 8009920:	617b      	str	r3, [r7, #20]
 8009922:	e024      	b.n	800996e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	2b02      	cmp	r3, #2
 800992a:	d107      	bne.n	800993c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800992c:	4b6a      	ldr	r3, [pc, #424]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d109      	bne.n	800994c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e0c6      	b.n	8009aca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800993c:	4b66      	ldr	r3, [pc, #408]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009944:	2b00      	cmp	r3, #0
 8009946:	d101      	bne.n	800994c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	e0be      	b.n	8009aca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800994c:	f000 f8ce 	bl	8009aec <HAL_RCC_GetSysClockFreq>
 8009950:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	4a61      	ldr	r2, [pc, #388]	; (8009adc <HAL_RCC_ClockConfig+0x268>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d909      	bls.n	800996e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800995a:	4b5f      	ldr	r3, [pc, #380]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009962:	4a5d      	ldr	r2, [pc, #372]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 8009964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009968:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800996a:	2380      	movs	r3, #128	; 0x80
 800996c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800996e:	4b5a      	ldr	r3, [pc, #360]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f023 0203 	bic.w	r2, r3, #3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	4957      	ldr	r1, [pc, #348]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 800997c:	4313      	orrs	r3, r2
 800997e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009980:	f7fc fcbc 	bl	80062fc <HAL_GetTick>
 8009984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009986:	e00a      	b.n	800999e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009988:	f7fc fcb8 	bl	80062fc <HAL_GetTick>
 800998c:	4602      	mov	r2, r0
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	f241 3288 	movw	r2, #5000	; 0x1388
 8009996:	4293      	cmp	r3, r2
 8009998:	d901      	bls.n	800999e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800999a:	2303      	movs	r3, #3
 800999c:	e095      	b.n	8009aca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800999e:	4b4e      	ldr	r3, [pc, #312]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	f003 020c 	and.w	r2, r3, #12
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d1eb      	bne.n	8009988 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0302 	and.w	r3, r3, #2
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d023      	beq.n	8009a04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d005      	beq.n	80099d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80099c8:	4b43      	ldr	r3, [pc, #268]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	4a42      	ldr	r2, [pc, #264]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 80099ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80099d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 0308 	and.w	r3, r3, #8
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d007      	beq.n	80099f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80099e0:	4b3d      	ldr	r3, [pc, #244]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099e8:	4a3b      	ldr	r2, [pc, #236]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 80099ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80099ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099f0:	4b39      	ldr	r3, [pc, #228]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	4936      	ldr	r1, [pc, #216]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	608b      	str	r3, [r1, #8]
 8009a02:	e008      	b.n	8009a16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2b80      	cmp	r3, #128	; 0x80
 8009a08:	d105      	bne.n	8009a16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009a0a:	4b33      	ldr	r3, [pc, #204]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	4a32      	ldr	r2, [pc, #200]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 8009a10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a16:	4b2f      	ldr	r3, [pc, #188]	; (8009ad4 <HAL_RCC_ClockConfig+0x260>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 030f 	and.w	r3, r3, #15
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d21d      	bcs.n	8009a60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a24:	4b2b      	ldr	r3, [pc, #172]	; (8009ad4 <HAL_RCC_ClockConfig+0x260>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f023 020f 	bic.w	r2, r3, #15
 8009a2c:	4929      	ldr	r1, [pc, #164]	; (8009ad4 <HAL_RCC_ClockConfig+0x260>)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009a34:	f7fc fc62 	bl	80062fc <HAL_GetTick>
 8009a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a3a:	e00a      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a3c:	f7fc fc5e 	bl	80062fc <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d901      	bls.n	8009a52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e03b      	b.n	8009aca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a52:	4b20      	ldr	r3, [pc, #128]	; (8009ad4 <HAL_RCC_ClockConfig+0x260>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f003 030f 	and.w	r3, r3, #15
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d1ed      	bne.n	8009a3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d008      	beq.n	8009a7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a6c:	4b1a      	ldr	r3, [pc, #104]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	4917      	ldr	r1, [pc, #92]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 0308 	and.w	r3, r3, #8
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d009      	beq.n	8009a9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a8a:	4b13      	ldr	r3, [pc, #76]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	00db      	lsls	r3, r3, #3
 8009a98:	490f      	ldr	r1, [pc, #60]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009a9e:	f000 f825 	bl	8009aec <HAL_RCC_GetSysClockFreq>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	4b0c      	ldr	r3, [pc, #48]	; (8009ad8 <HAL_RCC_ClockConfig+0x264>)
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	091b      	lsrs	r3, r3, #4
 8009aaa:	f003 030f 	and.w	r3, r3, #15
 8009aae:	490c      	ldr	r1, [pc, #48]	; (8009ae0 <HAL_RCC_ClockConfig+0x26c>)
 8009ab0:	5ccb      	ldrb	r3, [r1, r3]
 8009ab2:	f003 031f 	and.w	r3, r3, #31
 8009ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aba:	4a0a      	ldr	r2, [pc, #40]	; (8009ae4 <HAL_RCC_ClockConfig+0x270>)
 8009abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009abe:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <HAL_RCC_ClockConfig+0x274>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fc fbce 	bl	8006264 <HAL_InitTick>
 8009ac8:	4603      	mov	r3, r0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	40022000 	.word	0x40022000
 8009ad8:	40021000 	.word	0x40021000
 8009adc:	04c4b400 	.word	0x04c4b400
 8009ae0:	080135a4 	.word	0x080135a4
 8009ae4:	20000000 	.word	0x20000000
 8009ae8:	20000004 	.word	0x20000004

08009aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009af2:	4b2c      	ldr	r3, [pc, #176]	; (8009ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f003 030c 	and.w	r3, r3, #12
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d102      	bne.n	8009b04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009afe:	4b2a      	ldr	r3, [pc, #168]	; (8009ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009b00:	613b      	str	r3, [r7, #16]
 8009b02:	e047      	b.n	8009b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009b04:	4b27      	ldr	r3, [pc, #156]	; (8009ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	f003 030c 	and.w	r3, r3, #12
 8009b0c:	2b08      	cmp	r3, #8
 8009b0e:	d102      	bne.n	8009b16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009b10:	4b26      	ldr	r3, [pc, #152]	; (8009bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8009b12:	613b      	str	r3, [r7, #16]
 8009b14:	e03e      	b.n	8009b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009b16:	4b23      	ldr	r3, [pc, #140]	; (8009ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	f003 030c 	and.w	r3, r3, #12
 8009b1e:	2b0c      	cmp	r3, #12
 8009b20:	d136      	bne.n	8009b90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009b22:	4b20      	ldr	r3, [pc, #128]	; (8009ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	f003 0303 	and.w	r3, r3, #3
 8009b2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009b2c:	4b1d      	ldr	r3, [pc, #116]	; (8009ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	091b      	lsrs	r3, r3, #4
 8009b32:	f003 030f 	and.w	r3, r3, #15
 8009b36:	3301      	adds	r3, #1
 8009b38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b03      	cmp	r3, #3
 8009b3e:	d10c      	bne.n	8009b5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009b40:	4a1a      	ldr	r2, [pc, #104]	; (8009bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b48:	4a16      	ldr	r2, [pc, #88]	; (8009ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b4a:	68d2      	ldr	r2, [r2, #12]
 8009b4c:	0a12      	lsrs	r2, r2, #8
 8009b4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009b52:	fb02 f303 	mul.w	r3, r2, r3
 8009b56:	617b      	str	r3, [r7, #20]
      break;
 8009b58:	e00c      	b.n	8009b74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009b5a:	4a13      	ldr	r2, [pc, #76]	; (8009ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b62:	4a10      	ldr	r2, [pc, #64]	; (8009ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b64:	68d2      	ldr	r2, [r2, #12]
 8009b66:	0a12      	lsrs	r2, r2, #8
 8009b68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009b6c:	fb02 f303 	mul.w	r3, r2, r3
 8009b70:	617b      	str	r3, [r7, #20]
      break;
 8009b72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009b74:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	0e5b      	lsrs	r3, r3, #25
 8009b7a:	f003 0303 	and.w	r3, r3, #3
 8009b7e:	3301      	adds	r3, #1
 8009b80:	005b      	lsls	r3, r3, #1
 8009b82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009b84:	697a      	ldr	r2, [r7, #20]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b8c:	613b      	str	r3, [r7, #16]
 8009b8e:	e001      	b.n	8009b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009b90:	2300      	movs	r3, #0
 8009b92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009b94:	693b      	ldr	r3, [r7, #16]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	371c      	adds	r7, #28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	40021000 	.word	0x40021000
 8009ba8:	00f42400 	.word	0x00f42400
 8009bac:	007a1200 	.word	0x007a1200

08009bb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009bb4:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	20000000 	.word	0x20000000

08009bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009bcc:	f7ff fff0 	bl	8009bb0 <HAL_RCC_GetHCLKFreq>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	4b06      	ldr	r3, [pc, #24]	; (8009bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	0a1b      	lsrs	r3, r3, #8
 8009bd8:	f003 0307 	and.w	r3, r3, #7
 8009bdc:	4904      	ldr	r1, [pc, #16]	; (8009bf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009bde:	5ccb      	ldrb	r3, [r1, r3]
 8009be0:	f003 031f 	and.w	r3, r3, #31
 8009be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	40021000 	.word	0x40021000
 8009bf0:	080135b4 	.word	0x080135b4

08009bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009bf8:	f7ff ffda 	bl	8009bb0 <HAL_RCC_GetHCLKFreq>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	0adb      	lsrs	r3, r3, #11
 8009c04:	f003 0307 	and.w	r3, r3, #7
 8009c08:	4904      	ldr	r1, [pc, #16]	; (8009c1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c0a:	5ccb      	ldrb	r3, [r1, r3]
 8009c0c:	f003 031f 	and.w	r3, r3, #31
 8009c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	40021000 	.word	0x40021000
 8009c1c:	080135b4 	.word	0x080135b4

08009c20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c26:	4b1e      	ldr	r3, [pc, #120]	; (8009ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f003 0303 	and.w	r3, r3, #3
 8009c2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009c30:	4b1b      	ldr	r3, [pc, #108]	; (8009ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	091b      	lsrs	r3, r3, #4
 8009c36:	f003 030f 	and.w	r3, r3, #15
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	2b03      	cmp	r3, #3
 8009c42:	d10c      	bne.n	8009c5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c44:	4a17      	ldr	r2, [pc, #92]	; (8009ca4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c4c:	4a14      	ldr	r2, [pc, #80]	; (8009ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009c4e:	68d2      	ldr	r2, [r2, #12]
 8009c50:	0a12      	lsrs	r2, r2, #8
 8009c52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009c56:	fb02 f303 	mul.w	r3, r2, r3
 8009c5a:	617b      	str	r3, [r7, #20]
    break;
 8009c5c:	e00c      	b.n	8009c78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c5e:	4a12      	ldr	r2, [pc, #72]	; (8009ca8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c66:	4a0e      	ldr	r2, [pc, #56]	; (8009ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009c68:	68d2      	ldr	r2, [r2, #12]
 8009c6a:	0a12      	lsrs	r2, r2, #8
 8009c6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009c70:	fb02 f303 	mul.w	r3, r2, r3
 8009c74:	617b      	str	r3, [r7, #20]
    break;
 8009c76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009c78:	4b09      	ldr	r3, [pc, #36]	; (8009ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	0e5b      	lsrs	r3, r3, #25
 8009c7e:	f003 0303 	and.w	r3, r3, #3
 8009c82:	3301      	adds	r3, #1
 8009c84:	005b      	lsls	r3, r3, #1
 8009c86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009c92:	687b      	ldr	r3, [r7, #4]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	371c      	adds	r7, #28
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	40021000 	.word	0x40021000
 8009ca4:	007a1200 	.word	0x007a1200
 8009ca8:	00f42400 	.word	0x00f42400

08009cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009cb8:	2300      	movs	r3, #0
 8009cba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f000 8098 	beq.w	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cce:	4b43      	ldr	r3, [pc, #268]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10d      	bne.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cda:	4b40      	ldr	r3, [pc, #256]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cde:	4a3f      	ldr	r2, [pc, #252]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8009ce6:	4b3d      	ldr	r3, [pc, #244]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cee:	60bb      	str	r3, [r7, #8]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009cf6:	4b3a      	ldr	r3, [pc, #232]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a39      	ldr	r2, [pc, #228]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d02:	f7fc fafb 	bl	80062fc <HAL_GetTick>
 8009d06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d08:	e009      	b.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d0a:	f7fc faf7 	bl	80062fc <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d902      	bls.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	74fb      	strb	r3, [r7, #19]
        break;
 8009d1c:	e005      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d1e:	4b30      	ldr	r3, [pc, #192]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d0ef      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009d2a:	7cfb      	ldrb	r3, [r7, #19]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d159      	bne.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009d30:	4b2a      	ldr	r3, [pc, #168]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d01e      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d019      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009d4c:	4b23      	ldr	r3, [pc, #140]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d58:	4b20      	ldr	r3, [pc, #128]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d5e:	4a1f      	ldr	r2, [pc, #124]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d68:	4b1c      	ldr	r3, [pc, #112]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d6e:	4a1b      	ldr	r2, [pc, #108]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009d78:	4a18      	ldr	r2, [pc, #96]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d016      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d8a:	f7fc fab7 	bl	80062fc <HAL_GetTick>
 8009d8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d90:	e00b      	b.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d92:	f7fc fab3 	bl	80062fc <HAL_GetTick>
 8009d96:	4602      	mov	r2, r0
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d902      	bls.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	74fb      	strb	r3, [r7, #19]
            break;
 8009da8:	e006      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009daa:	4b0c      	ldr	r3, [pc, #48]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009db0:	f003 0302 	and.w	r3, r3, #2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d0ec      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009db8:	7cfb      	ldrb	r3, [r7, #19]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10b      	bne.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009dbe:	4b07      	ldr	r3, [pc, #28]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dcc:	4903      	ldr	r1, [pc, #12]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009dd4:	e008      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009dd6:	7cfb      	ldrb	r3, [r7, #19]
 8009dd8:	74bb      	strb	r3, [r7, #18]
 8009dda:	e005      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009ddc:	40021000 	.word	0x40021000
 8009de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de4:	7cfb      	ldrb	r3, [r7, #19]
 8009de6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009de8:	7c7b      	ldrb	r3, [r7, #17]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d105      	bne.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009dee:	4ba7      	ldr	r3, [pc, #668]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df2:	4aa6      	ldr	r2, [pc, #664]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009df8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 0301 	and.w	r3, r3, #1
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009e06:	4ba1      	ldr	r3, [pc, #644]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e0c:	f023 0203 	bic.w	r2, r3, #3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	499d      	ldr	r1, [pc, #628]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0302 	and.w	r3, r3, #2
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00a      	beq.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009e28:	4b98      	ldr	r3, [pc, #608]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e2e:	f023 020c 	bic.w	r2, r3, #12
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	4995      	ldr	r1, [pc, #596]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0304 	and.w	r3, r3, #4
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009e4a:	4b90      	ldr	r3, [pc, #576]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	498c      	ldr	r1, [pc, #560]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0308 	and.w	r3, r3, #8
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00a      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009e6c:	4b87      	ldr	r3, [pc, #540]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	4984      	ldr	r1, [pc, #528]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0310 	and.w	r3, r3, #16
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00a      	beq.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009e8e:	4b7f      	ldr	r3, [pc, #508]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	497b      	ldr	r1, [pc, #492]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 0320 	and.w	r3, r3, #32
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00a      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009eb0:	4b76      	ldr	r3, [pc, #472]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	4973      	ldr	r1, [pc, #460]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00a      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009ed2:	4b6e      	ldr	r3, [pc, #440]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	496a      	ldr	r1, [pc, #424]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00a      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009ef4:	4b65      	ldr	r3, [pc, #404]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009efa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	4962      	ldr	r1, [pc, #392]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00a      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009f16:	4b5d      	ldr	r3, [pc, #372]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	4959      	ldr	r1, [pc, #356]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00a      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f38:	4b54      	ldr	r3, [pc, #336]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f3e:	f023 0203 	bic.w	r2, r3, #3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f46:	4951      	ldr	r1, [pc, #324]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00a      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f5a:	4b4c      	ldr	r3, [pc, #304]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	4948      	ldr	r1, [pc, #288]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d015      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f7c:	4b43      	ldr	r3, [pc, #268]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8a:	4940      	ldr	r1, [pc, #256]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f9a:	d105      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f9c:	4b3b      	ldr	r3, [pc, #236]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	4a3a      	ldr	r2, [pc, #232]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fa6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d015      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009fb4:	4b35      	ldr	r3, [pc, #212]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc2:	4932      	ldr	r1, [pc, #200]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fd2:	d105      	bne.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009fd4:	4b2d      	ldr	r3, [pc, #180]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	4a2c      	ldr	r2, [pc, #176]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fde:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d015      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009fec:	4b27      	ldr	r3, [pc, #156]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffa:	4924      	ldr	r1, [pc, #144]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a006:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a00a:	d105      	bne.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a00c:	4b1f      	ldr	r3, [pc, #124]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	4a1e      	ldr	r2, [pc, #120]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a016:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d015      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a024:	4b19      	ldr	r3, [pc, #100]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a02a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a032:	4916      	ldr	r1, [pc, #88]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a034:	4313      	orrs	r3, r2
 800a036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a03e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a042:	d105      	bne.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a044:	4b11      	ldr	r3, [pc, #68]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	4a10      	ldr	r2, [pc, #64]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a04a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a04e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d019      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a05c:	4b0b      	ldr	r3, [pc, #44]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a062:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	4908      	ldr	r1, [pc, #32]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a07a:	d109      	bne.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a07c:	4b03      	ldr	r3, [pc, #12]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	4a02      	ldr	r2, [pc, #8]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a086:	60d3      	str	r3, [r2, #12]
 800a088:	e002      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a08a:	bf00      	nop
 800a08c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d015      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a09c:	4b29      	ldr	r3, [pc, #164]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a09e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0aa:	4926      	ldr	r1, [pc, #152]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0ba:	d105      	bne.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a0bc:	4b21      	ldr	r3, [pc, #132]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	4a20      	ldr	r2, [pc, #128]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a0c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d015      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a0d4:	4b1b      	ldr	r3, [pc, #108]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0da:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0e2:	4918      	ldr	r1, [pc, #96]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f2:	d105      	bne.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a0f4:	4b13      	ldr	r3, [pc, #76]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	4a12      	ldr	r2, [pc, #72]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a0fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d015      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a10c:	4b0d      	ldr	r3, [pc, #52]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a10e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a112:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a11a:	490a      	ldr	r1, [pc, #40]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a12a:	d105      	bne.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a12c:	4b05      	ldr	r3, [pc, #20]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	4a04      	ldr	r2, [pc, #16]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a136:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a138:	7cbb      	ldrb	r3, [r7, #18]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	40021000 	.word	0x40021000

0800a148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e042      	b.n	800a1e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a160:	2b00      	cmp	r3, #0
 800a162:	d106      	bne.n	800a172 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7fb ffd7 	bl	8006120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2224      	movs	r2, #36	; 0x24
 800a176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 0201 	bic.w	r2, r2, #1
 800a188:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d002      	beq.n	800a198 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fe68 	bl	800ae68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fb69 	bl	800a870 <UART_SetConfig>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d101      	bne.n	800a1a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e01b      	b.n	800a1e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a1b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	689a      	ldr	r2, [r3, #8]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f042 0201 	orr.w	r2, r2, #1
 800a1d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fee7 	bl	800afac <UART_CheckIdleState>
 800a1de:	4603      	mov	r3, r0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b0ba      	sub	sp, #232	; 0xe8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	69db      	ldr	r3, [r3, #28]
 800a1f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a20e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a212:	f640 030f 	movw	r3, #2063	; 0x80f
 800a216:	4013      	ands	r3, r2
 800a218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a21c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a220:	2b00      	cmp	r3, #0
 800a222:	d11b      	bne.n	800a25c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a228:	f003 0320 	and.w	r3, r3, #32
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d015      	beq.n	800a25c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a234:	f003 0320 	and.w	r3, r3, #32
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d105      	bne.n	800a248 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a23c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d009      	beq.n	800a25c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 82e3 	beq.w	800a818 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	4798      	blx	r3
      }
      return;
 800a25a:	e2dd      	b.n	800a818 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a25c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a260:	2b00      	cmp	r3, #0
 800a262:	f000 8123 	beq.w	800a4ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a266:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a26a:	4b8d      	ldr	r3, [pc, #564]	; (800a4a0 <HAL_UART_IRQHandler+0x2b8>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d106      	bne.n	800a280 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a272:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a276:	4b8b      	ldr	r3, [pc, #556]	; (800a4a4 <HAL_UART_IRQHandler+0x2bc>)
 800a278:	4013      	ands	r3, r2
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 8116 	beq.w	800a4ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d011      	beq.n	800a2b0 <HAL_UART_IRQHandler+0xc8>
 800a28c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00b      	beq.n	800a2b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2201      	movs	r2, #1
 800a29e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2a6:	f043 0201 	orr.w	r2, r3, #1
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2b4:	f003 0302 	and.w	r3, r3, #2
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d011      	beq.n	800a2e0 <HAL_UART_IRQHandler+0xf8>
 800a2bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2c0:	f003 0301 	and.w	r3, r3, #1
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00b      	beq.n	800a2e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2d6:	f043 0204 	orr.w	r2, r3, #4
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2e4:	f003 0304 	and.w	r3, r3, #4
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d011      	beq.n	800a310 <HAL_UART_IRQHandler+0x128>
 800a2ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00b      	beq.n	800a310 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2204      	movs	r2, #4
 800a2fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a306:	f043 0202 	orr.w	r2, r3, #2
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a314:	f003 0308 	and.w	r3, r3, #8
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d017      	beq.n	800a34c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a31c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a320:	f003 0320 	and.w	r3, r3, #32
 800a324:	2b00      	cmp	r3, #0
 800a326:	d105      	bne.n	800a334 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a328:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a32c:	4b5c      	ldr	r3, [pc, #368]	; (800a4a0 <HAL_UART_IRQHandler+0x2b8>)
 800a32e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00b      	beq.n	800a34c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2208      	movs	r2, #8
 800a33a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a342:	f043 0208 	orr.w	r2, r3, #8
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a34c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a354:	2b00      	cmp	r3, #0
 800a356:	d012      	beq.n	800a37e <HAL_UART_IRQHandler+0x196>
 800a358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a35c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00c      	beq.n	800a37e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a36c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a374:	f043 0220 	orr.w	r2, r3, #32
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 8249 	beq.w	800a81c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a38a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a38e:	f003 0320 	and.w	r3, r3, #32
 800a392:	2b00      	cmp	r3, #0
 800a394:	d013      	beq.n	800a3be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a39a:	f003 0320 	and.w	r3, r3, #32
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d105      	bne.n	800a3ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a3a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d007      	beq.n	800a3be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d2:	2b40      	cmp	r3, #64	; 0x40
 800a3d4:	d005      	beq.n	800a3e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a3d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d054      	beq.n	800a48c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fef9 	bl	800b1da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f2:	2b40      	cmp	r3, #64	; 0x40
 800a3f4:	d146      	bne.n	800a484 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a404:	e853 3f00 	ldrex	r3, [r3]
 800a408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a40c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3308      	adds	r3, #8
 800a41e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a422:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a42e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a432:	e841 2300 	strex	r3, r2, [r1]
 800a436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a43a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1d9      	bne.n	800a3f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d017      	beq.n	800a47c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a452:	4a15      	ldr	r2, [pc, #84]	; (800a4a8 <HAL_UART_IRQHandler+0x2c0>)
 800a454:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fc f98c 	bl	800677a <HAL_DMA_Abort_IT>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d019      	beq.n	800a49c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a476:	4610      	mov	r0, r2
 800a478:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a47a:	e00f      	b.n	800a49c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f9e1 	bl	800a844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a482:	e00b      	b.n	800a49c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f9dd 	bl	800a844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a48a:	e007      	b.n	800a49c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 f9d9 	bl	800a844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a49a:	e1bf      	b.n	800a81c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a49c:	bf00      	nop
    return;
 800a49e:	e1bd      	b.n	800a81c <HAL_UART_IRQHandler+0x634>
 800a4a0:	10000001 	.word	0x10000001
 800a4a4:	04000120 	.word	0x04000120
 800a4a8:	0800b2a7 	.word	0x0800b2a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	f040 8153 	bne.w	800a75c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a4b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ba:	f003 0310 	and.w	r3, r3, #16
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 814c 	beq.w	800a75c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4c8:	f003 0310 	and.w	r3, r3, #16
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f000 8145 	beq.w	800a75c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2210      	movs	r2, #16
 800a4d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e4:	2b40      	cmp	r3, #64	; 0x40
 800a4e6:	f040 80bb 	bne.w	800a660 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a4f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 818f 	beq.w	800a820 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a508:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a50c:	429a      	cmp	r2, r3
 800a50e:	f080 8187 	bcs.w	800a820 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a518:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0320 	and.w	r3, r3, #32
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f040 8087 	bne.w	800a63e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a53c:	e853 3f00 	ldrex	r3, [r3]
 800a540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a544:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a54c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	461a      	mov	r2, r3
 800a556:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a55a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a55e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a562:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a566:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a56a:	e841 2300 	strex	r3, r2, [r1]
 800a56e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1da      	bne.n	800a530 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3308      	adds	r3, #8
 800a580:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a584:	e853 3f00 	ldrex	r3, [r3]
 800a588:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a58a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a58c:	f023 0301 	bic.w	r3, r3, #1
 800a590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	3308      	adds	r3, #8
 800a59a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a59e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a5a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a5a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a5aa:	e841 2300 	strex	r3, r2, [r1]
 800a5ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a5b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1e1      	bne.n	800a57a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3308      	adds	r3, #8
 800a5bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5c0:	e853 3f00 	ldrex	r3, [r3]
 800a5c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a5c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3308      	adds	r3, #8
 800a5d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a5da:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a5dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a5e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a5e2:	e841 2300 	strex	r3, r2, [r1]
 800a5e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a5e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1e3      	bne.n	800a5b6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a604:	e853 3f00 	ldrex	r3, [r3]
 800a608:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a60a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a60c:	f023 0310 	bic.w	r3, r3, #16
 800a610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	461a      	mov	r2, r3
 800a61a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a61e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a620:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a622:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a626:	e841 2300 	strex	r3, r2, [r1]
 800a62a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a62c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1e4      	bne.n	800a5fc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fc f845 	bl	80066c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2202      	movs	r2, #2
 800a642:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a650:	b29b      	uxth	r3, r3
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	b29b      	uxth	r3, r3
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f8fd 	bl	800a858 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a65e:	e0df      	b.n	800a820 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 80d1 	beq.w	800a824 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800a682:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 80cc 	beq.w	800a824 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a694:	e853 3f00 	ldrex	r3, [r3]
 800a698:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6ae:	647b      	str	r3, [r7, #68]	; 0x44
 800a6b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6b6:	e841 2300 	strex	r3, r2, [r1]
 800a6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1e4      	bne.n	800a68c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	3308      	adds	r3, #8
 800a6c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6cc:	e853 3f00 	ldrex	r3, [r3]
 800a6d0:	623b      	str	r3, [r7, #32]
   return(result);
 800a6d2:	6a3b      	ldr	r3, [r7, #32]
 800a6d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6d8:	f023 0301 	bic.w	r3, r3, #1
 800a6dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	3308      	adds	r3, #8
 800a6e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a6ea:	633a      	str	r2, [r7, #48]	; 0x30
 800a6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6f2:	e841 2300 	strex	r3, r2, [r1]
 800a6f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1e1      	bne.n	800a6c2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2220      	movs	r2, #32
 800a702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	e853 3f00 	ldrex	r3, [r3]
 800a71e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f023 0310 	bic.w	r3, r3, #16
 800a726:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a734:	61fb      	str	r3, [r7, #28]
 800a736:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a738:	69b9      	ldr	r1, [r7, #24]
 800a73a:	69fa      	ldr	r2, [r7, #28]
 800a73c:	e841 2300 	strex	r3, r2, [r1]
 800a740:	617b      	str	r3, [r7, #20]
   return(result);
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1e4      	bne.n	800a712 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2202      	movs	r2, #2
 800a74c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a74e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f87f 	bl	800a858 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a75a:	e063      	b.n	800a824 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00e      	beq.n	800a786 <HAL_UART_IRQHandler+0x59e>
 800a768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a76c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d008      	beq.n	800a786 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a77c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fdd2 	bl	800b328 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a784:	e051      	b.n	800a82a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a78a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d014      	beq.n	800a7bc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d105      	bne.n	800a7aa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a79e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d008      	beq.n	800a7bc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d03a      	beq.n	800a828 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	4798      	blx	r3
    }
    return;
 800a7ba:	e035      	b.n	800a828 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d009      	beq.n	800a7dc <HAL_UART_IRQHandler+0x5f4>
 800a7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d003      	beq.n	800a7dc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fd7c 	bl	800b2d2 <UART_EndTransmit_IT>
    return;
 800a7da:	e026      	b.n	800a82a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d009      	beq.n	800a7fc <HAL_UART_IRQHandler+0x614>
 800a7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d003      	beq.n	800a7fc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fdab 	bl	800b350 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7fa:	e016      	b.n	800a82a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a804:	2b00      	cmp	r3, #0
 800a806:	d010      	beq.n	800a82a <HAL_UART_IRQHandler+0x642>
 800a808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	da0c      	bge.n	800a82a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fd93 	bl	800b33c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a816:	e008      	b.n	800a82a <HAL_UART_IRQHandler+0x642>
      return;
 800a818:	bf00      	nop
 800a81a:	e006      	b.n	800a82a <HAL_UART_IRQHandler+0x642>
    return;
 800a81c:	bf00      	nop
 800a81e:	e004      	b.n	800a82a <HAL_UART_IRQHandler+0x642>
      return;
 800a820:	bf00      	nop
 800a822:	e002      	b.n	800a82a <HAL_UART_IRQHandler+0x642>
      return;
 800a824:	bf00      	nop
 800a826:	e000      	b.n	800a82a <HAL_UART_IRQHandler+0x642>
    return;
 800a828:	bf00      	nop
  }
}
 800a82a:	37e8      	adds	r7, #232	; 0xe8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a84c:	bf00      	nop
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	460b      	mov	r3, r1
 800a862:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a874:	b08c      	sub	sp, #48	; 0x30
 800a876:	af00      	add	r7, sp, #0
 800a878:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	689a      	ldr	r2, [r3, #8]
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	431a      	orrs	r2, r3
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	431a      	orrs	r2, r3
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	69db      	ldr	r3, [r3, #28]
 800a894:	4313      	orrs	r3, r2
 800a896:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	4baa      	ldr	r3, [pc, #680]	; (800ab48 <UART_SetConfig+0x2d8>)
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	6812      	ldr	r2, [r2, #0]
 800a8a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8a8:	430b      	orrs	r3, r1
 800a8aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	68da      	ldr	r2, [r3, #12]
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a9f      	ldr	r2, [pc, #636]	; (800ab4c <UART_SetConfig+0x2dc>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d004      	beq.n	800a8dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a8e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	6812      	ldr	r2, [r2, #0]
 800a8ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8f0:	430b      	orrs	r3, r1
 800a8f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fa:	f023 010f 	bic.w	r1, r3, #15
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	430a      	orrs	r2, r1
 800a908:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a90      	ldr	r2, [pc, #576]	; (800ab50 <UART_SetConfig+0x2e0>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d125      	bne.n	800a960 <UART_SetConfig+0xf0>
 800a914:	4b8f      	ldr	r3, [pc, #572]	; (800ab54 <UART_SetConfig+0x2e4>)
 800a916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a91a:	f003 0303 	and.w	r3, r3, #3
 800a91e:	2b03      	cmp	r3, #3
 800a920:	d81a      	bhi.n	800a958 <UART_SetConfig+0xe8>
 800a922:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <UART_SetConfig+0xb8>)
 800a924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a928:	0800a939 	.word	0x0800a939
 800a92c:	0800a949 	.word	0x0800a949
 800a930:	0800a941 	.word	0x0800a941
 800a934:	0800a951 	.word	0x0800a951
 800a938:	2301      	movs	r3, #1
 800a93a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a93e:	e116      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800a940:	2302      	movs	r3, #2
 800a942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a946:	e112      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800a948:	2304      	movs	r3, #4
 800a94a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a94e:	e10e      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800a950:	2308      	movs	r3, #8
 800a952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a956:	e10a      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800a958:	2310      	movs	r3, #16
 800a95a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a95e:	e106      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a7c      	ldr	r2, [pc, #496]	; (800ab58 <UART_SetConfig+0x2e8>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d138      	bne.n	800a9dc <UART_SetConfig+0x16c>
 800a96a:	4b7a      	ldr	r3, [pc, #488]	; (800ab54 <UART_SetConfig+0x2e4>)
 800a96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a970:	f003 030c 	and.w	r3, r3, #12
 800a974:	2b0c      	cmp	r3, #12
 800a976:	d82d      	bhi.n	800a9d4 <UART_SetConfig+0x164>
 800a978:	a201      	add	r2, pc, #4	; (adr r2, 800a980 <UART_SetConfig+0x110>)
 800a97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97e:	bf00      	nop
 800a980:	0800a9b5 	.word	0x0800a9b5
 800a984:	0800a9d5 	.word	0x0800a9d5
 800a988:	0800a9d5 	.word	0x0800a9d5
 800a98c:	0800a9d5 	.word	0x0800a9d5
 800a990:	0800a9c5 	.word	0x0800a9c5
 800a994:	0800a9d5 	.word	0x0800a9d5
 800a998:	0800a9d5 	.word	0x0800a9d5
 800a99c:	0800a9d5 	.word	0x0800a9d5
 800a9a0:	0800a9bd 	.word	0x0800a9bd
 800a9a4:	0800a9d5 	.word	0x0800a9d5
 800a9a8:	0800a9d5 	.word	0x0800a9d5
 800a9ac:	0800a9d5 	.word	0x0800a9d5
 800a9b0:	0800a9cd 	.word	0x0800a9cd
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9ba:	e0d8      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800a9bc:	2302      	movs	r3, #2
 800a9be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9c2:	e0d4      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800a9c4:	2304      	movs	r3, #4
 800a9c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9ca:	e0d0      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800a9cc:	2308      	movs	r3, #8
 800a9ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9d2:	e0cc      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800a9d4:	2310      	movs	r3, #16
 800a9d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9da:	e0c8      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a5e      	ldr	r2, [pc, #376]	; (800ab5c <UART_SetConfig+0x2ec>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d125      	bne.n	800aa32 <UART_SetConfig+0x1c2>
 800a9e6:	4b5b      	ldr	r3, [pc, #364]	; (800ab54 <UART_SetConfig+0x2e4>)
 800a9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9f0:	2b30      	cmp	r3, #48	; 0x30
 800a9f2:	d016      	beq.n	800aa22 <UART_SetConfig+0x1b2>
 800a9f4:	2b30      	cmp	r3, #48	; 0x30
 800a9f6:	d818      	bhi.n	800aa2a <UART_SetConfig+0x1ba>
 800a9f8:	2b20      	cmp	r3, #32
 800a9fa:	d00a      	beq.n	800aa12 <UART_SetConfig+0x1a2>
 800a9fc:	2b20      	cmp	r3, #32
 800a9fe:	d814      	bhi.n	800aa2a <UART_SetConfig+0x1ba>
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d002      	beq.n	800aa0a <UART_SetConfig+0x19a>
 800aa04:	2b10      	cmp	r3, #16
 800aa06:	d008      	beq.n	800aa1a <UART_SetConfig+0x1aa>
 800aa08:	e00f      	b.n	800aa2a <UART_SetConfig+0x1ba>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa10:	e0ad      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aa12:	2302      	movs	r3, #2
 800aa14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa18:	e0a9      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aa1a:	2304      	movs	r3, #4
 800aa1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa20:	e0a5      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aa22:	2308      	movs	r3, #8
 800aa24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa28:	e0a1      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aa2a:	2310      	movs	r3, #16
 800aa2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa30:	e09d      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a4a      	ldr	r2, [pc, #296]	; (800ab60 <UART_SetConfig+0x2f0>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d125      	bne.n	800aa88 <UART_SetConfig+0x218>
 800aa3c:	4b45      	ldr	r3, [pc, #276]	; (800ab54 <UART_SetConfig+0x2e4>)
 800aa3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa46:	2bc0      	cmp	r3, #192	; 0xc0
 800aa48:	d016      	beq.n	800aa78 <UART_SetConfig+0x208>
 800aa4a:	2bc0      	cmp	r3, #192	; 0xc0
 800aa4c:	d818      	bhi.n	800aa80 <UART_SetConfig+0x210>
 800aa4e:	2b80      	cmp	r3, #128	; 0x80
 800aa50:	d00a      	beq.n	800aa68 <UART_SetConfig+0x1f8>
 800aa52:	2b80      	cmp	r3, #128	; 0x80
 800aa54:	d814      	bhi.n	800aa80 <UART_SetConfig+0x210>
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d002      	beq.n	800aa60 <UART_SetConfig+0x1f0>
 800aa5a:	2b40      	cmp	r3, #64	; 0x40
 800aa5c:	d008      	beq.n	800aa70 <UART_SetConfig+0x200>
 800aa5e:	e00f      	b.n	800aa80 <UART_SetConfig+0x210>
 800aa60:	2300      	movs	r3, #0
 800aa62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa66:	e082      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aa68:	2302      	movs	r3, #2
 800aa6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa6e:	e07e      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aa70:	2304      	movs	r3, #4
 800aa72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa76:	e07a      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aa78:	2308      	movs	r3, #8
 800aa7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa7e:	e076      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aa80:	2310      	movs	r3, #16
 800aa82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa86:	e072      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a35      	ldr	r2, [pc, #212]	; (800ab64 <UART_SetConfig+0x2f4>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d12a      	bne.n	800aae8 <UART_SetConfig+0x278>
 800aa92:	4b30      	ldr	r3, [pc, #192]	; (800ab54 <UART_SetConfig+0x2e4>)
 800aa94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaa0:	d01a      	beq.n	800aad8 <UART_SetConfig+0x268>
 800aaa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaa6:	d81b      	bhi.n	800aae0 <UART_SetConfig+0x270>
 800aaa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aaac:	d00c      	beq.n	800aac8 <UART_SetConfig+0x258>
 800aaae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aab2:	d815      	bhi.n	800aae0 <UART_SetConfig+0x270>
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d003      	beq.n	800aac0 <UART_SetConfig+0x250>
 800aab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aabc:	d008      	beq.n	800aad0 <UART_SetConfig+0x260>
 800aabe:	e00f      	b.n	800aae0 <UART_SetConfig+0x270>
 800aac0:	2300      	movs	r3, #0
 800aac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aac6:	e052      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aac8:	2302      	movs	r3, #2
 800aaca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aace:	e04e      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aad0:	2304      	movs	r3, #4
 800aad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aad6:	e04a      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aad8:	2308      	movs	r3, #8
 800aada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aade:	e046      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aae0:	2310      	movs	r3, #16
 800aae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aae6:	e042      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a17      	ldr	r2, [pc, #92]	; (800ab4c <UART_SetConfig+0x2dc>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d13a      	bne.n	800ab68 <UART_SetConfig+0x2f8>
 800aaf2:	4b18      	ldr	r3, [pc, #96]	; (800ab54 <UART_SetConfig+0x2e4>)
 800aaf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aafc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab00:	d01a      	beq.n	800ab38 <UART_SetConfig+0x2c8>
 800ab02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab06:	d81b      	bhi.n	800ab40 <UART_SetConfig+0x2d0>
 800ab08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab0c:	d00c      	beq.n	800ab28 <UART_SetConfig+0x2b8>
 800ab0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab12:	d815      	bhi.n	800ab40 <UART_SetConfig+0x2d0>
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d003      	beq.n	800ab20 <UART_SetConfig+0x2b0>
 800ab18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab1c:	d008      	beq.n	800ab30 <UART_SetConfig+0x2c0>
 800ab1e:	e00f      	b.n	800ab40 <UART_SetConfig+0x2d0>
 800ab20:	2300      	movs	r3, #0
 800ab22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab26:	e022      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800ab28:	2302      	movs	r3, #2
 800ab2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab2e:	e01e      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800ab30:	2304      	movs	r3, #4
 800ab32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab36:	e01a      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800ab38:	2308      	movs	r3, #8
 800ab3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab3e:	e016      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800ab40:	2310      	movs	r3, #16
 800ab42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab46:	e012      	b.n	800ab6e <UART_SetConfig+0x2fe>
 800ab48:	cfff69f3 	.word	0xcfff69f3
 800ab4c:	40008000 	.word	0x40008000
 800ab50:	40013800 	.word	0x40013800
 800ab54:	40021000 	.word	0x40021000
 800ab58:	40004400 	.word	0x40004400
 800ab5c:	40004800 	.word	0x40004800
 800ab60:	40004c00 	.word	0x40004c00
 800ab64:	40005000 	.word	0x40005000
 800ab68:	2310      	movs	r3, #16
 800ab6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4aae      	ldr	r2, [pc, #696]	; (800ae2c <UART_SetConfig+0x5bc>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	f040 8097 	bne.w	800aca8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab7e:	2b08      	cmp	r3, #8
 800ab80:	d823      	bhi.n	800abca <UART_SetConfig+0x35a>
 800ab82:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <UART_SetConfig+0x318>)
 800ab84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab88:	0800abad 	.word	0x0800abad
 800ab8c:	0800abcb 	.word	0x0800abcb
 800ab90:	0800abb5 	.word	0x0800abb5
 800ab94:	0800abcb 	.word	0x0800abcb
 800ab98:	0800abbb 	.word	0x0800abbb
 800ab9c:	0800abcb 	.word	0x0800abcb
 800aba0:	0800abcb 	.word	0x0800abcb
 800aba4:	0800abcb 	.word	0x0800abcb
 800aba8:	0800abc3 	.word	0x0800abc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abac:	f7ff f80c 	bl	8009bc8 <HAL_RCC_GetPCLK1Freq>
 800abb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800abb2:	e010      	b.n	800abd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abb4:	4b9e      	ldr	r3, [pc, #632]	; (800ae30 <UART_SetConfig+0x5c0>)
 800abb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800abb8:	e00d      	b.n	800abd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abba:	f7fe ff97 	bl	8009aec <HAL_RCC_GetSysClockFreq>
 800abbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800abc0:	e009      	b.n	800abd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800abc8:	e005      	b.n	800abd6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800abca:	2300      	movs	r3, #0
 800abcc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800abd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 8130 	beq.w	800ae3e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe2:	4a94      	ldr	r2, [pc, #592]	; (800ae34 <UART_SetConfig+0x5c4>)
 800abe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abe8:	461a      	mov	r2, r3
 800abea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abec:	fbb3 f3f2 	udiv	r3, r3, r2
 800abf0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	4613      	mov	r3, r2
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	4413      	add	r3, r2
 800abfc:	69ba      	ldr	r2, [r7, #24]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d305      	bcc.n	800ac0e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac08:	69ba      	ldr	r2, [r7, #24]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d903      	bls.n	800ac16 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ac14:	e113      	b.n	800ae3e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac18:	2200      	movs	r2, #0
 800ac1a:	60bb      	str	r3, [r7, #8]
 800ac1c:	60fa      	str	r2, [r7, #12]
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac22:	4a84      	ldr	r2, [pc, #528]	; (800ae34 <UART_SetConfig+0x5c4>)
 800ac24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	603b      	str	r3, [r7, #0]
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac38:	f7f6 f84e 	bl	8000cd8 <__aeabi_uldivmod>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	4610      	mov	r0, r2
 800ac42:	4619      	mov	r1, r3
 800ac44:	f04f 0200 	mov.w	r2, #0
 800ac48:	f04f 0300 	mov.w	r3, #0
 800ac4c:	020b      	lsls	r3, r1, #8
 800ac4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac52:	0202      	lsls	r2, r0, #8
 800ac54:	6979      	ldr	r1, [r7, #20]
 800ac56:	6849      	ldr	r1, [r1, #4]
 800ac58:	0849      	lsrs	r1, r1, #1
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	4605      	mov	r5, r0
 800ac60:	eb12 0804 	adds.w	r8, r2, r4
 800ac64:	eb43 0905 	adc.w	r9, r3, r5
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	469a      	mov	sl, r3
 800ac70:	4693      	mov	fp, r2
 800ac72:	4652      	mov	r2, sl
 800ac74:	465b      	mov	r3, fp
 800ac76:	4640      	mov	r0, r8
 800ac78:	4649      	mov	r1, r9
 800ac7a:	f7f6 f82d 	bl	8000cd8 <__aeabi_uldivmod>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4613      	mov	r3, r2
 800ac84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac8c:	d308      	bcc.n	800aca0 <UART_SetConfig+0x430>
 800ac8e:	6a3b      	ldr	r3, [r7, #32]
 800ac90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac94:	d204      	bcs.n	800aca0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	6a3a      	ldr	r2, [r7, #32]
 800ac9c:	60da      	str	r2, [r3, #12]
 800ac9e:	e0ce      	b.n	800ae3e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aca6:	e0ca      	b.n	800ae3e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	69db      	ldr	r3, [r3, #28]
 800acac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acb0:	d166      	bne.n	800ad80 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800acb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acb6:	2b08      	cmp	r3, #8
 800acb8:	d827      	bhi.n	800ad0a <UART_SetConfig+0x49a>
 800acba:	a201      	add	r2, pc, #4	; (adr r2, 800acc0 <UART_SetConfig+0x450>)
 800acbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc0:	0800ace5 	.word	0x0800ace5
 800acc4:	0800aced 	.word	0x0800aced
 800acc8:	0800acf5 	.word	0x0800acf5
 800accc:	0800ad0b 	.word	0x0800ad0b
 800acd0:	0800acfb 	.word	0x0800acfb
 800acd4:	0800ad0b 	.word	0x0800ad0b
 800acd8:	0800ad0b 	.word	0x0800ad0b
 800acdc:	0800ad0b 	.word	0x0800ad0b
 800ace0:	0800ad03 	.word	0x0800ad03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ace4:	f7fe ff70 	bl	8009bc8 <HAL_RCC_GetPCLK1Freq>
 800ace8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800acea:	e014      	b.n	800ad16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acec:	f7fe ff82 	bl	8009bf4 <HAL_RCC_GetPCLK2Freq>
 800acf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800acf2:	e010      	b.n	800ad16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acf4:	4b4e      	ldr	r3, [pc, #312]	; (800ae30 <UART_SetConfig+0x5c0>)
 800acf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800acf8:	e00d      	b.n	800ad16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acfa:	f7fe fef7 	bl	8009aec <HAL_RCC_GetSysClockFreq>
 800acfe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad00:	e009      	b.n	800ad16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad08:	e005      	b.n	800ad16 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ad14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f000 8090 	beq.w	800ae3e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	4a44      	ldr	r2, [pc, #272]	; (800ae34 <UART_SetConfig+0x5c4>)
 800ad24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad30:	005a      	lsls	r2, r3, #1
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	085b      	lsrs	r3, r3, #1
 800ad38:	441a      	add	r2, r3
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad44:	6a3b      	ldr	r3, [r7, #32]
 800ad46:	2b0f      	cmp	r3, #15
 800ad48:	d916      	bls.n	800ad78 <UART_SetConfig+0x508>
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad50:	d212      	bcs.n	800ad78 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad52:	6a3b      	ldr	r3, [r7, #32]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	f023 030f 	bic.w	r3, r3, #15
 800ad5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	085b      	lsrs	r3, r3, #1
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	f003 0307 	and.w	r3, r3, #7
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	8bfb      	ldrh	r3, [r7, #30]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	8bfa      	ldrh	r2, [r7, #30]
 800ad74:	60da      	str	r2, [r3, #12]
 800ad76:	e062      	b.n	800ae3e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ad7e:	e05e      	b.n	800ae3e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad84:	2b08      	cmp	r3, #8
 800ad86:	d828      	bhi.n	800adda <UART_SetConfig+0x56a>
 800ad88:	a201      	add	r2, pc, #4	; (adr r2, 800ad90 <UART_SetConfig+0x520>)
 800ad8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad8e:	bf00      	nop
 800ad90:	0800adb5 	.word	0x0800adb5
 800ad94:	0800adbd 	.word	0x0800adbd
 800ad98:	0800adc5 	.word	0x0800adc5
 800ad9c:	0800addb 	.word	0x0800addb
 800ada0:	0800adcb 	.word	0x0800adcb
 800ada4:	0800addb 	.word	0x0800addb
 800ada8:	0800addb 	.word	0x0800addb
 800adac:	0800addb 	.word	0x0800addb
 800adb0:	0800add3 	.word	0x0800add3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adb4:	f7fe ff08 	bl	8009bc8 <HAL_RCC_GetPCLK1Freq>
 800adb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800adba:	e014      	b.n	800ade6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adbc:	f7fe ff1a 	bl	8009bf4 <HAL_RCC_GetPCLK2Freq>
 800adc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800adc2:	e010      	b.n	800ade6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adc4:	4b1a      	ldr	r3, [pc, #104]	; (800ae30 <UART_SetConfig+0x5c0>)
 800adc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800adc8:	e00d      	b.n	800ade6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adca:	f7fe fe8f 	bl	8009aec <HAL_RCC_GetSysClockFreq>
 800adce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800add0:	e009      	b.n	800ade6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800add2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800add6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800add8:	e005      	b.n	800ade6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ade4:	bf00      	nop
    }

    if (pclk != 0U)
 800ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d028      	beq.n	800ae3e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf0:	4a10      	ldr	r2, [pc, #64]	; (800ae34 <UART_SetConfig+0x5c4>)
 800adf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adf6:	461a      	mov	r2, r3
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	fbb3 f2f2 	udiv	r2, r3, r2
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	085b      	lsrs	r3, r3, #1
 800ae04:	441a      	add	r2, r3
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae10:	6a3b      	ldr	r3, [r7, #32]
 800ae12:	2b0f      	cmp	r3, #15
 800ae14:	d910      	bls.n	800ae38 <UART_SetConfig+0x5c8>
 800ae16:	6a3b      	ldr	r3, [r7, #32]
 800ae18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae1c:	d20c      	bcs.n	800ae38 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae1e:	6a3b      	ldr	r3, [r7, #32]
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	60da      	str	r2, [r3, #12]
 800ae28:	e009      	b.n	800ae3e <UART_SetConfig+0x5ce>
 800ae2a:	bf00      	nop
 800ae2c:	40008000 	.word	0x40008000
 800ae30:	00f42400 	.word	0x00f42400
 800ae34:	080135cc 	.word	0x080135cc
      }
      else
      {
        ret = HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2200      	movs	r2, #0
 800ae52:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	2200      	movs	r2, #0
 800ae58:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ae5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3730      	adds	r7, #48	; 0x30
 800ae62:	46bd      	mov	sp, r7
 800ae64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ae68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae74:	f003 0308 	and.w	r3, r3, #8
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00a      	beq.n	800ae92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae96:	f003 0301 	and.w	r3, r3, #1
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00a      	beq.n	800aeb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	430a      	orrs	r2, r1
 800aeb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb8:	f003 0302 	and.w	r3, r3, #2
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00a      	beq.n	800aed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	430a      	orrs	r2, r1
 800aed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeda:	f003 0304 	and.w	r3, r3, #4
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00a      	beq.n	800aef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	430a      	orrs	r2, r1
 800aef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefc:	f003 0310 	and.w	r3, r3, #16
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00a      	beq.n	800af1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	430a      	orrs	r2, r1
 800af18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1e:	f003 0320 	and.w	r3, r3, #32
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00a      	beq.n	800af3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	430a      	orrs	r2, r1
 800af3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af44:	2b00      	cmp	r3, #0
 800af46:	d01a      	beq.n	800af7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	430a      	orrs	r2, r1
 800af5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af66:	d10a      	bne.n	800af7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	430a      	orrs	r2, r1
 800af7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00a      	beq.n	800afa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	430a      	orrs	r2, r1
 800af9e:	605a      	str	r2, [r3, #4]
  }
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b098      	sub	sp, #96	; 0x60
 800afb0:	af02      	add	r7, sp, #8
 800afb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800afbc:	f7fb f99e 	bl	80062fc <HAL_GetTick>
 800afc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 0308 	and.w	r3, r3, #8
 800afcc:	2b08      	cmp	r3, #8
 800afce:	d12f      	bne.n	800b030 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afd8:	2200      	movs	r2, #0
 800afda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f88e 	bl	800b100 <UART_WaitOnFlagUntilTimeout>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d022      	beq.n	800b030 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	e853 3f00 	ldrex	r3, [r3]
 800aff6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800affe:	653b      	str	r3, [r7, #80]	; 0x50
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	461a      	mov	r2, r3
 800b006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b008:	647b      	str	r3, [r7, #68]	; 0x44
 800b00a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b00e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b010:	e841 2300 	strex	r3, r2, [r1]
 800b014:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1e6      	bne.n	800afea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2220      	movs	r2, #32
 800b020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b02c:	2303      	movs	r3, #3
 800b02e:	e063      	b.n	800b0f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0304 	and.w	r3, r3, #4
 800b03a:	2b04      	cmp	r3, #4
 800b03c:	d149      	bne.n	800b0d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b03e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b046:	2200      	movs	r2, #0
 800b048:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 f857 	bl	800b100 <UART_WaitOnFlagUntilTimeout>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d03c      	beq.n	800b0d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b060:	e853 3f00 	ldrex	r3, [r3]
 800b064:	623b      	str	r3, [r7, #32]
   return(result);
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b06c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	461a      	mov	r2, r3
 800b074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b076:	633b      	str	r3, [r7, #48]	; 0x30
 800b078:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b07c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b07e:	e841 2300 	strex	r3, r2, [r1]
 800b082:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1e6      	bne.n	800b058 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3308      	adds	r3, #8
 800b090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	e853 3f00 	ldrex	r3, [r3]
 800b098:	60fb      	str	r3, [r7, #12]
   return(result);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f023 0301 	bic.w	r3, r3, #1
 800b0a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	3308      	adds	r3, #8
 800b0a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0aa:	61fa      	str	r2, [r7, #28]
 800b0ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ae:	69b9      	ldr	r1, [r7, #24]
 800b0b0:	69fa      	ldr	r2, [r7, #28]
 800b0b2:	e841 2300 	strex	r3, r2, [r1]
 800b0b6:	617b      	str	r3, [r7, #20]
   return(result);
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1e5      	bne.n	800b08a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	e012      	b.n	800b0f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2220      	movs	r2, #32
 800b0d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2220      	movs	r2, #32
 800b0de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3758      	adds	r7, #88	; 0x58
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	603b      	str	r3, [r7, #0]
 800b10c:	4613      	mov	r3, r2
 800b10e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b110:	e04f      	b.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b118:	d04b      	beq.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b11a:	f7fb f8ef 	bl	80062fc <HAL_GetTick>
 800b11e:	4602      	mov	r2, r0
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	429a      	cmp	r2, r3
 800b128:	d302      	bcc.n	800b130 <UART_WaitOnFlagUntilTimeout+0x30>
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b130:	2303      	movs	r3, #3
 800b132:	e04e      	b.n	800b1d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 0304 	and.w	r3, r3, #4
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d037      	beq.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	2b80      	cmp	r3, #128	; 0x80
 800b146:	d034      	beq.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	2b40      	cmp	r3, #64	; 0x40
 800b14c:	d031      	beq.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	69db      	ldr	r3, [r3, #28]
 800b154:	f003 0308 	and.w	r3, r3, #8
 800b158:	2b08      	cmp	r3, #8
 800b15a:	d110      	bne.n	800b17e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2208      	movs	r2, #8
 800b162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f000 f838 	bl	800b1da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2208      	movs	r2, #8
 800b16e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e029      	b.n	800b1d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	69db      	ldr	r3, [r3, #28]
 800b184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b18c:	d111      	bne.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f000 f81e 	bl	800b1da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2220      	movs	r2, #32
 800b1a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	e00f      	b.n	800b1d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	69da      	ldr	r2, [r3, #28]
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	bf0c      	ite	eq
 800b1c2:	2301      	moveq	r3, #1
 800b1c4:	2300      	movne	r3, #0
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d0a0      	beq.n	800b112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b095      	sub	sp, #84	; 0x54
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ea:	e853 3f00 	ldrex	r3, [r3]
 800b1ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b200:	643b      	str	r3, [r7, #64]	; 0x40
 800b202:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b204:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b206:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b208:	e841 2300 	strex	r3, r2, [r1]
 800b20c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1e6      	bne.n	800b1e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3308      	adds	r3, #8
 800b21a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	e853 3f00 	ldrex	r3, [r3]
 800b222:	61fb      	str	r3, [r7, #28]
   return(result);
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b22a:	f023 0301 	bic.w	r3, r3, #1
 800b22e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	3308      	adds	r3, #8
 800b236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b238:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b23a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b23e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b240:	e841 2300 	strex	r3, r2, [r1]
 800b244:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1e3      	bne.n	800b214 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b250:	2b01      	cmp	r3, #1
 800b252:	d118      	bne.n	800b286 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	60bb      	str	r3, [r7, #8]
   return(result);
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	f023 0310 	bic.w	r3, r3, #16
 800b268:	647b      	str	r3, [r7, #68]	; 0x44
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b272:	61bb      	str	r3, [r7, #24]
 800b274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b276:	6979      	ldr	r1, [r7, #20]
 800b278:	69ba      	ldr	r2, [r7, #24]
 800b27a:	e841 2300 	strex	r3, r2, [r1]
 800b27e:	613b      	str	r3, [r7, #16]
   return(result);
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1e6      	bne.n	800b254 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2220      	movs	r2, #32
 800b28a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b29a:	bf00      	nop
 800b29c:	3754      	adds	r7, #84	; 0x54
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b084      	sub	sp, #16
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f7ff fabd 	bl	800a844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ca:	bf00      	nop
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b088      	sub	sp, #32
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	e853 3f00 	ldrex	r3, [r3]
 800b2e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2ee:	61fb      	str	r3, [r7, #28]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	61bb      	str	r3, [r7, #24]
 800b2fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fc:	6979      	ldr	r1, [r7, #20]
 800b2fe:	69ba      	ldr	r2, [r7, #24]
 800b300:	e841 2300 	strex	r3, r2, [r1]
 800b304:	613b      	str	r3, [r7, #16]
   return(result);
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1e6      	bne.n	800b2da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2220      	movs	r2, #32
 800b310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7ff fa88 	bl	800a830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b320:	bf00      	nop
 800b322:	3720      	adds	r7, #32
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b358:	bf00      	nop
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b372:	2b01      	cmp	r3, #1
 800b374:	d101      	bne.n	800b37a <HAL_UARTEx_DisableFifoMode+0x16>
 800b376:	2302      	movs	r3, #2
 800b378:	e027      	b.n	800b3ca <HAL_UARTEx_DisableFifoMode+0x66>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2201      	movs	r2, #1
 800b37e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2224      	movs	r2, #36	; 0x24
 800b386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f022 0201 	bic.w	r2, r2, #1
 800b3a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b3a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2220      	movs	r2, #32
 800b3bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d101      	bne.n	800b3ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3ea:	2302      	movs	r3, #2
 800b3ec:	e02d      	b.n	800b44a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2224      	movs	r2, #36	; 0x24
 800b3fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f022 0201 	bic.w	r2, r2, #1
 800b414:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	683a      	ldr	r2, [r7, #0]
 800b426:	430a      	orrs	r2, r1
 800b428:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f850 	bl	800b4d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2220      	movs	r2, #32
 800b43c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b084      	sub	sp, #16
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b462:	2b01      	cmp	r3, #1
 800b464:	d101      	bne.n	800b46a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b466:	2302      	movs	r3, #2
 800b468:	e02d      	b.n	800b4c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2224      	movs	r2, #36	; 0x24
 800b476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f022 0201 	bic.w	r2, r2, #1
 800b490:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	430a      	orrs	r2, r1
 800b4a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 f812 	bl	800b4d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2220      	movs	r2, #32
 800b4b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
	...

0800b4d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d108      	bne.n	800b4f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4f0:	e031      	b.n	800b556 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4f2:	2308      	movs	r3, #8
 800b4f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4f6:	2308      	movs	r3, #8
 800b4f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	0e5b      	lsrs	r3, r3, #25
 800b502:	b2db      	uxtb	r3, r3
 800b504:	f003 0307 	and.w	r3, r3, #7
 800b508:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	0f5b      	lsrs	r3, r3, #29
 800b512:	b2db      	uxtb	r3, r3
 800b514:	f003 0307 	and.w	r3, r3, #7
 800b518:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b51a:	7bbb      	ldrb	r3, [r7, #14]
 800b51c:	7b3a      	ldrb	r2, [r7, #12]
 800b51e:	4911      	ldr	r1, [pc, #68]	; (800b564 <UARTEx_SetNbDataToProcess+0x94>)
 800b520:	5c8a      	ldrb	r2, [r1, r2]
 800b522:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b526:	7b3a      	ldrb	r2, [r7, #12]
 800b528:	490f      	ldr	r1, [pc, #60]	; (800b568 <UARTEx_SetNbDataToProcess+0x98>)
 800b52a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b52c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b530:	b29a      	uxth	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	7b7a      	ldrb	r2, [r7, #13]
 800b53c:	4909      	ldr	r1, [pc, #36]	; (800b564 <UARTEx_SetNbDataToProcess+0x94>)
 800b53e:	5c8a      	ldrb	r2, [r1, r2]
 800b540:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b544:	7b7a      	ldrb	r2, [r7, #13]
 800b546:	4908      	ldr	r1, [pc, #32]	; (800b568 <UARTEx_SetNbDataToProcess+0x98>)
 800b548:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b54a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b54e:	b29a      	uxth	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b556:	bf00      	nop
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	080135e4 	.word	0x080135e4
 800b568:	080135ec 	.word	0x080135ec

0800b56c <_ZN17AbstractAllocatorD1Ev>:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
    virtual void* allocate(CanardInstance* ins, size_t amount) = 0;
    virtual void free(CanardInstance* ins, void* pointer) = 0;
    virtual ~AbstractAllocator() {}
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	4a04      	ldr	r2, [pc, #16]	; (800b588 <_ZN17AbstractAllocatorD1Ev+0x1c>)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	601a      	str	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4618      	mov	r0, r3
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr
 800b588:	08013578 	.word	0x08013578

0800b58c <_ZN17AbstractAllocatorD0Ev>:
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7ff ffe9 	bl	800b56c <_ZN17AbstractAllocatorD1Ev>
 800b59a:	2108      	movs	r1, #8
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f002 fe54 	bl	800e24a <_ZdlPvj>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
#include "sys_allocator.h"
#include <cstdlib>

void* SystemAllocator::allocate(CanardInstance* const ins, const size_t amount) {
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
    (void)ins;
    void* mem;

    CRITICAL_SECTION({ mem = std::malloc(amount); })
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f002 fe9f 	bl	800e2fc <malloc>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	617b      	str	r3, [r7, #20]
    if (mem == nullptr) {
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d105      	bne.n	800b5d4 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
        utilities.error_handler();
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	3310      	adds	r3, #16
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7f9 fbfe 	bl	8004dd0 <_ZNKSt8functionIFvvEEclEv>
    }
    return mem;
 800b5d4:	697b      	ldr	r3, [r7, #20]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3718      	adds	r7, #24
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <_ZN15SystemAllocator4freeEP14CanardInstancePv>:

void SystemAllocator::free(CanardInstance* const ins, void* const pointer) {
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b084      	sub	sp, #16
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	60f8      	str	r0, [r7, #12]
 800b5e6:	60b9      	str	r1, [r7, #8]
 800b5e8:	607a      	str	r2, [r7, #4]
    (void)ins;
    CRITICAL_SECTION({ std::free(pointer); })
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f002 fe8e 	bl	800e30c <free>
}
 800b5f0:	bf00      	nop
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <_ZN15SystemAllocatorD1Ev>:
class SystemAllocator : public AbstractAllocator {
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	4a05      	ldr	r2, [pc, #20]	; (800b618 <_ZN15SystemAllocatorD1Ev+0x20>)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	601a      	str	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff ffaf 	bl	800b56c <_ZN17AbstractAllocatorD1Ev>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	080135fc 	.word	0x080135fc

0800b61c <_ZN15SystemAllocatorD0Ev>:
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7ff ffe7 	bl	800b5f8 <_ZN15SystemAllocatorD1Ev>
 800b62a:	2108      	movs	r1, #8
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f002 fe0c 	bl	800e24a <_ZdlPvj>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4618      	mov	r0, r3
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
void CyphalInterface::push(
    const CanardMicrosecond tx_deadline_usec,
    const CanardTransferMetadata* const metadata,
    const size_t payload_size,
    const void* const payload
) const {
 800b63c:	b590      	push	{r4, r7, lr}
 800b63e:	b08b      	sub	sp, #44	; 0x2c
 800b640:	af04      	add	r7, sp, #16
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t push_state = canardTxPush(
        &provider->queue,
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	3304      	adds	r3, #4
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 f876 	bl	800b73e <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800b652:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800b654:	f103 040c 	add.w	r4, r3, #12
        &provider->canard,
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	3304      	adds	r3, #4
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 f86e 	bl	800b73e <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800b662:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800b664:	f103 0120 	add.w	r1, r3, #32
 800b668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66a:	9302      	str	r3, [sp, #8]
 800b66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66e:	9301      	str	r3, [sp, #4]
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b678:	4620      	mov	r0, r4
 800b67a:	f002 fb3f 	bl	800dcfc <canardTxPush>
 800b67e:	6178      	str	r0, [r7, #20]
        tx_deadline_usec,
        metadata,
        payload_size,
        payload
    );
    if (push_state == -CANARD_ERROR_OUT_OF_MEMORY) {
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	f113 0f03 	cmn.w	r3, #3
 800b686:	d106      	bne.n	800b696 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
#ifdef __linux__
        std::cerr << "[Error: OOM] Tried to send to port: " << metadata->port_id << ", node: " << +metadata->remote_node_id << std::endl;
#else
        utilities.error_handler();
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	3310      	adds	r3, #16
 800b68e:	4618      	mov	r0, r3
 800b690:	f7f9 fb9e 	bl	8004dd0 <_ZNKSt8functionIFvvEEclEv>
#endif
        return;
 800b694:	e008      	b.n	800b6a8 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
    }
    if (push_state < 0) {
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	da05      	bge.n	800b6a8 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
        utilities.error_handler();
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	3310      	adds	r3, #16
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7f9 fb94 	bl	8004dd0 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800b6a8:	371c      	adds	r7, #28
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd90      	pop	{r4, r7, pc}
	...

0800b6b0 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
void CyphalInterface::subscribe(
    CanardPortID port_id,
    size_t extent,
    CanardTransferKind kind,
    CanardRxSubscription* subscription
) const {
 800b6b0:	b590      	push	{r4, r7, lr}
 800b6b2:	b089      	sub	sp, #36	; 0x24
 800b6b4:	af04      	add	r7, sp, #16
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	607a      	str	r2, [r7, #4]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	460b      	mov	r3, r1
 800b6be:	817b      	strh	r3, [r7, #10]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	727b      	strb	r3, [r7, #9]
    if (canardRxSubscribe(
            (CanardInstance* const)&provider->canard,
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f000 f838 	bl	800b73e <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800b6ce:	4603      	mov	r3, r0
    if (canardRxSubscribe(
 800b6d0:	f103 0020 	add.w	r0, r3, #32
 800b6d4:	897c      	ldrh	r4, [r7, #10]
 800b6d6:	7a79      	ldrb	r1, [r7, #9]
 800b6d8:	6a3b      	ldr	r3, [r7, #32]
 800b6da:	9302      	str	r3, [sp, #8]
 800b6dc:	4a0d      	ldr	r2, [pc, #52]	; (800b714 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 800b6de:	f04f 0300 	mov.w	r3, #0
 800b6e2:	e9cd 2300 	strd	r2, r3, [sp]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	f002 fc57 	bl	800df9c <canardRxSubscribe>
 800b6ee:	4603      	mov	r3, r0
            kind,
            port_id,
            extent,
            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
            subscription
        ) != 1) {
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	bf14      	ite	ne
 800b6f4:	2301      	movne	r3, #1
 800b6f6:	2300      	moveq	r3, #0
 800b6f8:	b2db      	uxtb	r3, r3
    if (canardRxSubscribe(
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d005      	beq.n	800b70a <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
        utilities.error_handler();
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	3310      	adds	r3, #16
 800b704:	4618      	mov	r0, r3
 800b706:	f7f9 fb63 	bl	8004dd0 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800b70a:	bf00      	nop
 800b70c:	3714      	adds	r7, #20
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd90      	pop	{r4, r7, pc}
 800b712:	bf00      	nop
 800b714:	001e8480 	.word	0x001e8480

0800b718 <_ZN15CyphalInterface4loopEv>:

void CyphalInterface::loop() {
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
    provider->can_loop();
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	3304      	adds	r3, #4
 800b724:	4618      	mov	r0, r3
 800b726:	f000 f80a 	bl	800b73e <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800b72a:	4603      	mov	r3, r0
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	3208      	adds	r2, #8
 800b730:	6812      	ldr	r2, [r2, #0]
 800b732:	4618      	mov	r0, r3
 800b734:	4790      	blx	r2
}
 800b736:	bf00      	nop
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800b73e:	b580      	push	{r7, lr}
 800b740:	b082      	sub	sp, #8
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
	return get();
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f805 	bl	800b756 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 800b74c:	4603      	mov	r3, r0
      }
 800b74e:	4618      	mov	r0, r3
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800b756:	b580      	push	{r7, lr}
 800b758:	b082      	sub	sp, #8
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4618      	mov	r0, r3
 800b762:	f000 f805 	bl	800b770 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800b766:	4603      	mov	r3, r0
 800b768:	4618      	mov	r0, r3
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4618      	mov	r0, r3
 800b77c:	f000 f806 	bl	800b78c <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800b780:	4603      	mov	r3, r0
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4618      	mov	r0, r3
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4618      	mov	r0, r3
 800b798:	f000 f805 	bl	800b7a6 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800b79c:	4603      	mov	r3, r0
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f805 	bl	800b7be <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b082      	sub	sp, #8
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f000 f805 	bl	800b7d8 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <_Z16fdcan_dlc_to_lenm>:
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
};

size_t fdcan_dlc_to_len(uint32_t dlc) {
 800b7ee:	b480      	push	{r7}
 800b7f0:	b085      	sub	sp, #20
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
    auto dlc_index = (uint8_t)(dlc / 65536);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	0c1b      	lsrs	r3, r3, #16
 800b7fa:	73fb      	strb	r3, [r7, #15]
    if (dlc_index <= 8) {
 800b7fc:	7bfb      	ldrb	r3, [r7, #15]
 800b7fe:	2b08      	cmp	r3, #8
 800b800:	d801      	bhi.n	800b806 <_Z16fdcan_dlc_to_lenm+0x18>
        return dlc_index;
 800b802:	7bfb      	ldrb	r3, [r7, #15]
 800b804:	e009      	b.n	800b81a <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    if (dlc_index <= 12) {
 800b806:	7bfb      	ldrb	r3, [r7, #15]
 800b808:	2b0c      	cmp	r3, #12
 800b80a:	d803      	bhi.n	800b814 <_Z16fdcan_dlc_to_lenm+0x26>
        return 8 + 4 * (dlc_index - 8);
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
 800b80e:	3b06      	subs	r3, #6
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	e002      	b.n	800b81a <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    return 32 + 16 * (dlc_index - 13);
 800b814:	7bfb      	ldrb	r3, [r7, #15]
 800b816:	3b0b      	subs	r3, #11
 800b818:	011b      	lsls	r3, r3, #4
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3714      	adds	r7, #20
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
	...

0800b828 <_ZL12delay_cyclest>:
       bne     .L3               // 1 + 1-3 такта, в среднем 2(3?)
     *
     * Всего 5 тактов на цикл + 8 в начале.
     */

    uint8_t real_cycles = (cycles - 8) / 5;
 800b828:	f1a0 0308 	sub.w	r3, r0, #8
 800b82c:	4a07      	ldr	r2, [pc, #28]	; (800b84c <_ZL12delay_cyclest+0x24>)
 800b82e:	fb82 1203 	smull	r1, r2, r2, r3
 800b832:	17db      	asrs	r3, r3, #31
 800b834:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    while (real_cycles--) {
 800b838:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800b83c:	d004      	beq.n	800b848 <_ZL12delay_cyclest+0x20>
        __asm__("nop");
 800b83e:	bf00      	nop
    while (real_cycles--) {
 800b840:	3b01      	subs	r3, #1
 800b842:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800b846:	d1fa      	bne.n	800b83e <_ZL12delay_cyclest+0x16>
    }
}
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	66666667 	.word	0x66666667

0800b850 <_ZN5G4CAN10len_to_dlcEj>:
#if (defined(STM32G474xx) || defined(STM32_G)) && defined(HAL_FDCAN_MODULE_ENABLED)
#include <cstring>

#include "FDCAN_generic.h"

uint32_t G4CAN::len_to_dlc(size_t len) {
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
    return CanardFDCANLengthToDLC[len];
 800b85a:	4a05      	ldr	r2, [pc, #20]	; (800b870 <_ZN5G4CAN10len_to_dlcEj+0x20>)
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b862:	4618      	mov	r0, r3
 800b864:	370c      	adds	r7, #12
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	0801360c 	.word	0x0801360c

0800b874 <_ZN5G4CAN10dlc_to_lenEm>:

size_t G4CAN::dlc_to_len(uint32_t dlc) {
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
    return fdcan_dlc_to_len(dlc);
 800b87e:	6838      	ldr	r0, [r7, #0]
 800b880:	f7ff ffb5 	bl	800b7ee <_Z16fdcan_dlc_to_lenm>
 800b884:	4603      	mov	r3, r0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3708      	adds	r7, #8
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <_ZN5G4CAN8can_loopEv>:

void G4CAN::can_loop() {
 800b88e:	b580      	push	{r7, lr}
 800b890:	b086      	sub	sp, #24
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800b896:	e017      	b.n	800b8c8 <_ZN5G4CAN8can_loopEv+0x3a>
        CanardFrame frame;
        bool has_read = read_frame(&frame);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	330c      	adds	r3, #12
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f107 0208 	add.w	r2, r7, #8
 800b8a4:	4611      	mov	r1, r2
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	4798      	blx	r3
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	75fb      	strb	r3, [r7, #23]
        if (!has_read)
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
 800b8b0:	f083 0301 	eor.w	r3, r3, #1
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d115      	bne.n	800b8e6 <_ZN5G4CAN8can_loopEv+0x58>
            break;
        process_canard_rx(&frame);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f107 0208 	add.w	r2, r7, #8
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 f8e2 	bl	800ba8c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8cc:	2140      	movs	r1, #64	; 0x40
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fb fc48 	bl	8007164 <HAL_FDCAN_GetRxFifoFillLevel>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	bf14      	ite	ne
 800b8da:	2301      	movne	r3, #1
 800b8dc:	2300      	moveq	r3, #0
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1d9      	bne.n	800b898 <_ZN5G4CAN8can_loopEv+0xa>
 800b8e4:	e000      	b.n	800b8e8 <_ZN5G4CAN8can_loopEv+0x5a>
            break;
 800b8e6:	bf00      	nop
    }

    process_canard_tx();
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 f92e 	bl	800bb4c <_ZN19AbstractCANProvider17process_canard_txEv>
}
 800b8f0:	bf00      	nop
 800b8f2:	3718      	adds	r7, #24
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <_ZN5G4CAN10read_frameEP11CanardFrame>:

static uint8_t RxData[64] = {};

bool G4CAN::read_frame(CanardFrame* rxf) {
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b08e      	sub	sp, #56	; 0x38
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
    // may want to check 2 FIFOs in the future
    uint32_t rx_fifo = -1;
 800b902:	f04f 33ff 	mov.w	r3, #4294967295
 800b906:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0)) {
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90c:	2140      	movs	r1, #64	; 0x40
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fb fc28 	bl	8007164 <HAL_FDCAN_GetRxFifoFillLevel>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	bf14      	ite	ne
 800b91a:	2301      	movne	r3, #1
 800b91c:	2300      	moveq	r3, #0
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	2b00      	cmp	r3, #0
 800b922:	d002      	beq.n	800b92a <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
        rx_fifo = FDCAN_RX_FIFO0;
 800b924:	2340      	movs	r3, #64	; 0x40
 800b926:	637b      	str	r3, [r7, #52]	; 0x34
 800b928:	e00f      	b.n	800b94a <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
    } else if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO1)) {
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92e:	2141      	movs	r1, #65	; 0x41
 800b930:	4618      	mov	r0, r3
 800b932:	f7fb fc17 	bl	8007164 <HAL_FDCAN_GetRxFifoFillLevel>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	bf14      	ite	ne
 800b93c:	2301      	movne	r3, #1
 800b93e:	2300      	moveq	r3, #0
 800b940:	b2db      	uxtb	r3, r3
 800b942:	2b00      	cmp	r3, #0
 800b944:	d001      	beq.n	800b94a <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
        rx_fifo = FDCAN_RX_FIFO1;
 800b946:	2341      	movs	r3, #65	; 0x41
 800b948:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if (rx_fifo == (uint32_t)-1) {
 800b94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b950:	d101      	bne.n	800b956 <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
        return false;
 800b952:	2300      	movs	r3, #0
 800b954:	e02e      	b.n	800b9b4 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
    }

    FDCAN_RxHeaderTypeDef RxHeader = {};
 800b956:	f107 030c 	add.w	r3, r7, #12
 800b95a:	2228      	movs	r2, #40	; 0x28
 800b95c:	2100      	movs	r1, #0
 800b95e:	4618      	mov	r0, r3
 800b960:	f003 fd4f 	bl	800f402 <memset>
    if (HAL_FDCAN_GetRxMessage(handler, rx_fifo, &RxHeader, RxData) != HAL_OK) {
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b968:	f107 020c 	add.w	r2, r7, #12
 800b96c:	4b13      	ldr	r3, [pc, #76]	; (800b9bc <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800b96e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b970:	f7fb fb1e 	bl	8006fb0 <HAL_FDCAN_GetRxMessage>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	bf14      	ite	ne
 800b97a:	2301      	movne	r3, #1
 800b97c:	2300      	moveq	r3, #0
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	2b00      	cmp	r3, #0
 800b982:	d005      	beq.n	800b990 <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
        utilities.error_handler();
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b988:	3310      	adds	r3, #16
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7f9 fa20 	bl	8004dd0 <_ZNKSt8functionIFvvEEclEv>
    }

    rxf->extended_can_id = RxHeader.Identifier;
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	601a      	str	r2, [r3, #0]
    rxf->payload_size = dlc_to_len(RxHeader.DataLength);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3304      	adds	r3, #4
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	69ba      	ldr	r2, [r7, #24]
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	4798      	blx	r3
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	605a      	str	r2, [r3, #4]
    rxf->payload = (void*)RxData;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	4a03      	ldr	r2, [pc, #12]	; (800b9bc <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800b9b0:	609a      	str	r2, [r3, #8]
    return true;
 800b9b2:	2301      	movs	r3, #1
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3738      	adds	r7, #56	; 0x38
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20000574 	.word	0x20000574

0800b9c0 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:

int G4CAN::write_frame(const CanardTxQueueItem* ti) {
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b08c      	sub	sp, #48	; 0x30
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = ti->frame.extended_can_id;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 800b9d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9d4:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = CanardFDCANLengthToDLC[ti->frame.payload_size];
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9de:	4a2a      	ldr	r2, [pc, #168]	; (800ba88 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 800b9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9e4:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800b9ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b9ee:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 800b9f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b9f4:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 800b9f6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b9fa:	627b      	str	r3, [r7, #36]	; 0x24
    TxHeader.MessageMarker = 0x0;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	62bb      	str	r3, [r7, #40]	; 0x28

    // all mailboxes should be free -
    // https://forum.opencyphal.org/t/uavcan-v0-found-data-transfer-reversal/1476/6
    // "Reduce the number of enqueued frames to 1" - fix to inner priority inversion
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800ba00:	2300      	movs	r3, #0
 800ba02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba04:	e006      	b.n	800ba14 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
        delay_cycles(ONE_FULL_FRAME_CYCLES);
 800ba06:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800ba0a:	f7ff ff0d 	bl	800b828 <_ZL12delay_cyclest>
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800ba0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba10:	3301      	adds	r3, #1
 800ba12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fb fbc1 	bl	80071a0 <HAL_FDCAN_GetTxFifoFreeLevel>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b03      	cmp	r3, #3
 800ba22:	d004      	beq.n	800ba2e <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800ba24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	dc01      	bgt.n	800ba2e <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e000      	b.n	800ba30 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1e8      	bne.n	800ba06 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
    } // wait for message to transmit
    if (HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3) {
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7fb fbb1 	bl	80071a0 <HAL_FDCAN_GetTxFifoFreeLevel>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b03      	cmp	r3, #3
 800ba42:	bf14      	ite	ne
 800ba44:	2301      	movne	r3, #1
 800ba46:	2300      	moveq	r3, #0
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d002      	beq.n	800ba54 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
        return -1;
 800ba4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba52:	e014      	b.n	800ba7e <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }

    if (HAL_FDCAN_AddMessageToTxFifoQ(handler, &TxHeader, (uint8_t *)ti->frame.payload) != HAL_OK) {
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba5c:	f107 0308 	add.w	r3, r7, #8
 800ba60:	4619      	mov	r1, r3
 800ba62:	f7fb fa61 	bl	8006f28 <HAL_FDCAN_AddMessageToTxFifoQ>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	bf14      	ite	ne
 800ba6c:	2301      	movne	r3, #1
 800ba6e:	2300      	moveq	r3, #0
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d002      	beq.n	800ba7c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
        return -1;
 800ba76:	f04f 33ff 	mov.w	r3, #4294967295
 800ba7a:	e000      	b.n	800ba7e <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }
    return TxHeader.DataLength;
 800ba7c:	697b      	ldr	r3, [r7, #20]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3730      	adds	r7, #48	; 0x30
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	0801360c 	.word	0x0801360c

0800ba8c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
CanardInstance canard{};

std::unique_ptr<AbstractAllocator> _alloc_ptr;


void AbstractCANProvider::process_canard_rx(CanardFrame* frame) {
 800ba8c:	b590      	push	{r4, r7, lr}
 800ba8e:	b093      	sub	sp, #76	; 0x4c
 800ba90:	af04      	add	r7, sp, #16
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
    CanardRxTransfer transfer = {.payload = nullptr};
 800ba96:	f107 0310 	add.w	r3, r7, #16
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	605a      	str	r2, [r3, #4]
 800baa0:	609a      	str	r2, [r3, #8]
 800baa2:	60da      	str	r2, [r3, #12]
 800baa4:	611a      	str	r2, [r3, #16]
 800baa6:	615a      	str	r2, [r3, #20]
    CanardRxSubscription* subscription = nullptr;
 800baa8:	2300      	movs	r3, #0
 800baaa:	60fb      	str	r3, [r7, #12]
    void (*processor)(CanardRxTransfer*) = nullptr;
 800baac:	2300      	movs	r3, #0
 800baae:	637b      	str	r3, [r7, #52]	; 0x34
    IListener<CanardRxTransfer*>* listener = nullptr;
 800bab0:	2300      	movs	r3, #0
 800bab2:	633b      	str	r3, [r7, #48]	; 0x30

    const int8_t accept_result = canardRxAccept(
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f103 0420 	add.w	r4, r3, #32
        (CanardInstance* const)&canard,
        utilities.micros_64(),
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    const int8_t accept_result = canardRxAccept(
 800babe:	4618      	mov	r0, r3
 800bac0:	f7f9 f99c 	bl	8004dfc <_ZNKSt8functionIFyvEEclEv>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	f107 010c 	add.w	r1, r7, #12
 800bacc:	9103      	str	r1, [sp, #12]
 800bace:	f107 0110 	add.w	r1, r7, #16
 800bad2:	9102      	str	r1, [sp, #8]
 800bad4:	2100      	movs	r1, #0
 800bad6:	9101      	str	r1, [sp, #4]
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	9100      	str	r1, [sp, #0]
 800badc:	4620      	mov	r0, r4
 800bade:	f002 f9cd 	bl	800de7c <canardRxAccept>
 800bae2:	4603      	mov	r3, r0
 800bae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        frame,
        0,
        &transfer,
        &subscription
    );
    if (accept_result == 0 || accept_result > 1) {
 800bae8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800baec:	2b00      	cmp	r3, #0
 800baee:	d029      	beq.n	800bb44 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xb8>
 800baf0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	dc25      	bgt.n	800bb44 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xb8>
        // The received frame is either invalid or it's a non-last frame of a multi-frame transfer.
        return;
    }
    if (accept_result < 0) goto exit;
 800baf8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	db11      	blt.n	800bb24 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x98>
    if (subscription == nullptr) goto exit;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d010      	beq.n	800bb28 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x9c>

    listener = reinterpret_cast<IListener<CanardRxTransfer*>*>(subscription->user_reference);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6a1b      	ldr	r3, [r3, #32]
 800bb0a:	633b      	str	r3, [r7, #48]	; 0x30
    if (listener == nullptr) goto exit;
 800bb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00c      	beq.n	800bb2c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
    listener->accept(&transfer);
 800bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f107 0210 	add.w	r2, r7, #16
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb20:	4798      	blx	r3
 800bb22:	e004      	b.n	800bb2e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (accept_result < 0) goto exit;
 800bb24:	bf00      	nop
 800bb26:	e002      	b.n	800bb2e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (subscription == nullptr) goto exit;
 800bb28:	bf00      	nop
 800bb2a:	e000      	b.n	800bb2e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (listener == nullptr) goto exit;
 800bb2c:	bf00      	nop

exit:
    if (transfer.payload != nullptr) {
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d008      	beq.n	800bb46 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xba>
        canard.memory_free(&canard, transfer.payload);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	3220      	adds	r2, #32
 800bb3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb3e:	4610      	mov	r0, r2
 800bb40:	4798      	blx	r3
 800bb42:	e000      	b.n	800bb46 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xba>
        return;
 800bb44:	bf00      	nop
    }
}
 800bb46:	373c      	adds	r7, #60	; 0x3c
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd90      	pop	{r4, r7, pc}

0800bb4c <_ZN19AbstractCANProvider17process_canard_txEv>:

void AbstractCANProvider::process_canard_tx() {
 800bb4c:	b5b0      	push	{r4, r5, r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
    // Look at top of the TX queue of individual CAN frames
    while (queue.size != 0) {
 800bb54:	e036      	b.n	800bbc4 <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
        const CanardTxQueueItem* ti = canardTxPeek(&queue);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	330c      	adds	r3, #12
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f002 f958 	bl	800de10 <canardTxPeek>
 800bb60:	60f8      	str	r0, [r7, #12]

        if (0U == ti->tx_deadline_usec || ti->tx_deadline_usec > utilities.micros_64()) {
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	d00c      	beq.n	800bb86 <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7f9 f940 	bl	8004dfc <_ZNKSt8functionIFyvEEclEv>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	42a2      	cmp	r2, r4
 800bb82:	41ab      	sbcs	r3, r5
 800bb84:	d201      	bcs.n	800bb8a <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e000      	b.n	800bb8c <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00a      	beq.n	800bba6 <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
            int written = write_frame(ti);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	3310      	adds	r3, #16
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68f9      	ldr	r1, [r7, #12]
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	4798      	blx	r3
 800bb9e:	60b8      	str	r0, [r7, #8]
            if (written < 0) {
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	db13      	blt.n	800bbce <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
                break;
            }
        }
        // After the frame is transmitted or if it has timed out while waiting,
        // pop it from the queue and deallocate:
        canard.memory_free(&canard, canardTxPop(&queue, ti));
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f103 0520 	add.w	r5, r3, #32
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	330c      	adds	r3, #12
 800bbb4:	68f9      	ldr	r1, [r7, #12]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f002 f93f 	bl	800de3a <canardTxPop>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	47a0      	blx	r4
    while (queue.size != 0) {
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	695b      	ldr	r3, [r3, #20]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1c4      	bne.n	800bb56 <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
    }
}
 800bbcc:	e000      	b.n	800bbd0 <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
                break;
 800bbce:	bf00      	nop
}
 800bbd0:	bf00      	nop
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bdb0      	pop	{r4, r5, r7, pc}

0800bbd8 <_Z41__static_initialization_and_destruction_0ii>:
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d107      	bne.n	800bbf8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d102      	bne.n	800bbf8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800bbf2:	4803      	ldr	r0, [pc, #12]	; (800bc00 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800bbf4:	f000 f806 	bl	800bc04 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 800bbf8:	bf00      	nop
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	200005b4 	.word	0x200005b4

0800bc04 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bc04:	b590      	push	{r4, r7, lr}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7f9 fea2 	bl	8005958 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800bc14:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00c      	beq.n	800bc38 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f7f9 fd17 	bl	8005652 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 800bc24:	4604      	mov	r4, r0
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f7f9 fdc1 	bl	80057ae <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4619      	mov	r1, r3
 800bc32:	4620      	mov	r0, r4
 800bc34:	f7f9 fe9d 	bl	8005972 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	601a      	str	r2, [r3, #0]
      }
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4618      	mov	r0, r3
 800bc42:	3714      	adds	r7, #20
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd90      	pop	{r4, r7, pc}

0800bc48 <_GLOBAL__sub_I_queue>:
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bc50:	2001      	movs	r0, #1
 800bc52:	f7ff ffc1 	bl	800bbd8 <_Z41__static_initialization_and_destruction_0ii>
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <_GLOBAL__sub_D_queue>:
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bc60:	2000      	movs	r0, #0
 800bc62:	f7ff ffb9 	bl	800bbd8 <_Z41__static_initialization_and_destruction_0ii>
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	460b      	mov	r3, r1
 800bc72:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 800bc74:	2300      	movs	r3, #0
 800bc76:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800bc7c:	e007      	b.n	800bc8e <cavlFindExtremum+0x26>
    {
        result = c;
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 800bc82:	78fb      	ldrb	r3, [r7, #3]
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4413      	add	r3, r2
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1f4      	bne.n	800bc7e <cavlFindExtremum+0x16>
    }
    return result;
 800bc94:	68fb      	ldr	r3, [r7, #12]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3714      	adds	r7, #20
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
	...

0800bca4 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d014      	beq.n	800bce0 <cavlPrivateRotate+0x3c>
 800bcb6:	78fb      	ldrb	r3, [r7, #3]
 800bcb8:	f083 0301 	eor.w	r3, r3, #1
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	4413      	add	r3, r2
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00a      	beq.n	800bce0 <cavlPrivateRotate+0x3c>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800bcd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd4:	db04      	blt.n	800bce0 <cavlPrivateRotate+0x3c>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	dd05      	ble.n	800bcec <cavlPrivateRotate+0x48>
 800bce0:	4b2a      	ldr	r3, [pc, #168]	; (800bd8c <cavlPrivateRotate+0xe8>)
 800bce2:	4a2b      	ldr	r2, [pc, #172]	; (800bd90 <cavlPrivateRotate+0xec>)
 800bce4:	2162      	movs	r1, #98	; 0x62
 800bce6:	482b      	ldr	r0, [pc, #172]	; (800bd94 <cavlPrivateRotate+0xf0>)
 800bce8:	f002 fad8 	bl	800e29c <__assert_func>
    Cavl* const z = x->lr[!r];
 800bcec:	78fb      	ldrb	r3, [r7, #3]
 800bcee:	f083 0301 	eor.w	r3, r3, #1
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4413      	add	r3, r2
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00e      	beq.n	800bd24 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	6879      	ldr	r1, [r7, #4]
 800bd12:	4299      	cmp	r1, r3
 800bd14:	bf0c      	ite	eq
 800bd16:	2301      	moveq	r3, #1
 800bd18:	2300      	movne	r3, #0
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	601a      	str	r2, [r3, #0]
    x->up     = z;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 800bd32:	78fb      	ldrb	r3, [r7, #3]
 800bd34:	78fa      	ldrb	r2, [r7, #3]
 800bd36:	f082 0201 	eor.w	r2, r2, #1
 800bd3a:	b2d2      	uxtb	r2, r2
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	685a      	ldr	r2, [r3, #4]
 800bd46:	6879      	ldr	r1, [r7, #4]
 800bd48:	0083      	lsls	r3, r0, #2
 800bd4a:	440b      	add	r3, r1
 800bd4c:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 800bd4e:	78fb      	ldrb	r3, [r7, #3]
 800bd50:	f083 0301 	eor.w	r3, r3, #1
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4413      	add	r3, r2
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d009      	beq.n	800bd76 <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 800bd62:	78fb      	ldrb	r3, [r7, #3]
 800bd64:	f083 0301 	eor.w	r3, r3, #1
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 800bd76:	78fb      	ldrb	r3, [r7, #3]
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4413      	add	r3, r2
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	605a      	str	r2, [r3, #4]
}
 800bd82:	bf00      	nop
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	08012ab0 	.word	0x08012ab0
 800bd90:	08013a98 	.word	0x08013a98
 800bd94:	08012af8 	.word	0x08012af8

0800bd98 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	460b      	mov	r3, r1
 800bda2:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00a      	beq.n	800bdc0 <cavlPrivateAdjustBalance+0x28>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800bdb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb4:	db04      	blt.n	800bdc0 <cavlPrivateAdjustBalance+0x28>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	dd05      	ble.n	800bdcc <cavlPrivateAdjustBalance+0x34>
 800bdc0:	4b61      	ldr	r3, [pc, #388]	; (800bf48 <cavlPrivateAdjustBalance+0x1b0>)
 800bdc2:	4a62      	ldr	r2, [pc, #392]	; (800bf4c <cavlPrivateAdjustBalance+0x1b4>)
 800bdc4:	2177      	movs	r1, #119	; 0x77
 800bdc6:	4862      	ldr	r0, [pc, #392]	; (800bf50 <cavlPrivateAdjustBalance+0x1b8>)
 800bdc8:	f002 fa68 	bl	800e29c <__assert_func>
    Cavl*        out    = x;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	78fa      	ldrb	r2, [r7, #3]
 800bdda:	2a00      	cmp	r2, #0
 800bddc:	d001      	beq.n	800bde2 <cavlPrivateAdjustBalance+0x4a>
 800bdde:	2201      	movs	r2, #1
 800bde0:	e000      	b.n	800bde4 <cavlPrivateAdjustBalance+0x4c>
 800bde2:	22ff      	movs	r2, #255	; 0xff
 800bde4:	4413      	add	r3, r2
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 800bdea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bdee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf2:	db04      	blt.n	800bdfe <cavlPrivateAdjustBalance+0x66>
 800bdf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	f340 809c 	ble.w	800bf36 <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 800bdfe:	7cfb      	ldrb	r3, [r7, #19]
 800be00:	09db      	lsrs	r3, r3, #7
 800be02:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 800be04:	7cbb      	ldrb	r3, [r7, #18]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <cavlPrivateAdjustBalance+0x76>
 800be0a:	2301      	movs	r3, #1
 800be0c:	e001      	b.n	800be12 <cavlPrivateAdjustBalance+0x7a>
 800be0e:	f04f 33ff 	mov.w	r3, #4294967295
 800be12:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 800be14:	7cbb      	ldrb	r3, [r7, #18]
 800be16:	f083 0301 	eor.w	r3, r3, #1
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4413      	add	r3, r2
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d105      	bne.n	800be38 <cavlPrivateAdjustBalance+0xa0>
 800be2c:	4b49      	ldr	r3, [pc, #292]	; (800bf54 <cavlPrivateAdjustBalance+0x1bc>)
 800be2e:	4a47      	ldr	r2, [pc, #284]	; (800bf4c <cavlPrivateAdjustBalance+0x1b4>)
 800be30:	217f      	movs	r1, #127	; 0x7f
 800be32:	4847      	ldr	r0, [pc, #284]	; (800bf50 <cavlPrivateAdjustBalance+0x1b8>)
 800be34:	f002 fa32 	bl	800e29c <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800be3e:	461a      	mov	r2, r3
 800be40:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800be44:	fb02 f303 	mul.w	r3, r2, r3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	dc1c      	bgt.n	800be86 <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 800be50:	7cbb      	ldrb	r3, [r7, #18]
 800be52:	4619      	mov	r1, r3
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7ff ff25 	bl	800bca4 <cavlPrivateRotate>
            if (0 == z->bf)
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d109      	bne.n	800be78 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 800be64:	7c7b      	ldrb	r3, [r7, #17]
 800be66:	425b      	negs	r3, r3
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	b25a      	sxtb	r2, r3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	7c7a      	ldrb	r2, [r7, #17]
 800be74:	731a      	strb	r2, [r3, #12]
    {
 800be76:	e061      	b.n	800bf3c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	731a      	strb	r2, [r3, #12]
    {
 800be84:	e05a      	b.n	800bf3c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 800be86:	7cbb      	ldrb	r3, [r7, #18]
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d105      	bne.n	800bea4 <cavlPrivateAdjustBalance+0x10c>
 800be98:	4b2f      	ldr	r3, [pc, #188]	; (800bf58 <cavlPrivateAdjustBalance+0x1c0>)
 800be9a:	4a2c      	ldr	r2, [pc, #176]	; (800bf4c <cavlPrivateAdjustBalance+0x1b4>)
 800be9c:	2192      	movs	r1, #146	; 0x92
 800be9e:	482c      	ldr	r0, [pc, #176]	; (800bf50 <cavlPrivateAdjustBalance+0x1b8>)
 800bea0:	f002 f9fc 	bl	800e29c <__assert_func>
            out = y;
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 800bea8:	7cbb      	ldrb	r3, [r7, #18]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	bf14      	ite	ne
 800beae:	2301      	movne	r3, #1
 800beb0:	2300      	moveq	r3, #0
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	f083 0301 	eor.w	r3, r3, #1
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	f003 0301 	and.w	r3, r3, #1
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	4619      	mov	r1, r3
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f7ff feee 	bl	800bca4 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 800bec8:	7cbb      	ldrb	r3, [r7, #18]
 800beca:	4619      	mov	r1, r3
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff fee9 	bl	800bca4 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800bed8:	461a      	mov	r2, r3
 800beda:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800bede:	fb02 f303 	mul.w	r3, r2, r3
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	da09      	bge.n	800befa <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	7c7a      	ldrb	r2, [r7, #17]
 800beea:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	2200      	movs	r2, #0
 800bef0:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2200      	movs	r2, #0
 800bef6:	731a      	strb	r2, [r3, #12]
    {
 800bef8:	e020      	b.n	800bf3c <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800bf00:	461a      	mov	r2, r3
 800bf02:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800bf06:	fb02 f303 	mul.w	r3, r2, r3
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	dd0c      	ble.n	800bf28 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	2200      	movs	r2, #0
 800bf18:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 800bf1a:	7c7b      	ldrb	r3, [r7, #17]
 800bf1c:	425b      	negs	r3, r3
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	b25a      	sxtb	r2, r3
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	731a      	strb	r2, [r3, #12]
    {
 800bf26:	e009      	b.n	800bf3c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	731a      	strb	r2, [r3, #12]
    {
 800bf34:	e002      	b.n	800bf3c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	7cfa      	ldrb	r2, [r7, #19]
 800bf3a:	731a      	strb	r2, [r3, #12]
    }
    return out;
 800bf3c:	697b      	ldr	r3, [r7, #20]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3718      	adds	r7, #24
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	08012b24 	.word	0x08012b24
 800bf4c:	08013a7c 	.word	0x08013a7c
 800bf50:	08012af8 	.word	0x08012af8
 800bf54:	08012b54 	.word	0x08012b54
 800bf58:	08012b60 	.word	0x08012b60

0800bf5c <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d004      	beq.n	800bf74 <cavlPrivateRetraceOnGrowth+0x18>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d005      	beq.n	800bf80 <cavlPrivateRetraceOnGrowth+0x24>
 800bf74:	4b23      	ldr	r3, [pc, #140]	; (800c004 <cavlPrivateRetraceOnGrowth+0xa8>)
 800bf76:	4a24      	ldr	r2, [pc, #144]	; (800c008 <cavlPrivateRetraceOnGrowth+0xac>)
 800bf78:	21b5      	movs	r1, #181	; 0xb5
 800bf7a:	4824      	ldr	r0, [pc, #144]	; (800c00c <cavlPrivateRetraceOnGrowth+0xb0>)
 800bf7c:	f002 f98e 	bl	800e29c <__assert_func>
    Cavl* c = added;      // Child
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 800bf8a:	e023      	b.n	800bfd4 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	697a      	ldr	r2, [r7, #20]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	bf0c      	ite	eq
 800bf96:	2301      	moveq	r3, #1
 800bf98:	2300      	movne	r3, #0
 800bf9a:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 800bf9c:	7bfb      	ldrb	r3, [r7, #15]
 800bf9e:	693a      	ldr	r2, [r7, #16]
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4413      	add	r3, r2
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	697a      	ldr	r2, [r7, #20]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d005      	beq.n	800bfb8 <cavlPrivateRetraceOnGrowth+0x5c>
 800bfac:	4b18      	ldr	r3, [pc, #96]	; (800c010 <cavlPrivateRetraceOnGrowth+0xb4>)
 800bfae:	4a16      	ldr	r2, [pc, #88]	; (800c008 <cavlPrivateRetraceOnGrowth+0xac>)
 800bfb0:	21bb      	movs	r1, #187	; 0xbb
 800bfb2:	4816      	ldr	r0, [pc, #88]	; (800c00c <cavlPrivateRetraceOnGrowth+0xb0>)
 800bfb4:	f002 f972 	bl	800e29c <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 800bfb8:	7bfb      	ldrb	r3, [r7, #15]
 800bfba:	4619      	mov	r1, r3
 800bfbc:	6938      	ldr	r0, [r7, #16]
 800bfbe:	f7ff feeb 	bl	800bd98 <cavlPrivateAdjustBalance>
 800bfc2:	6178      	str	r0, [r7, #20]
        p = c->up;
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d003      	beq.n	800bfdc <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d1d8      	bne.n	800bf8c <cavlPrivateRetraceOnGrowth+0x30>
 800bfda:	e000      	b.n	800bfde <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 800bfdc:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d105      	bne.n	800bff0 <cavlPrivateRetraceOnGrowth+0x94>
 800bfe4:	4b0b      	ldr	r3, [pc, #44]	; (800c014 <cavlPrivateRetraceOnGrowth+0xb8>)
 800bfe6:	4a08      	ldr	r2, [pc, #32]	; (800c008 <cavlPrivateRetraceOnGrowth+0xac>)
 800bfe8:	21c3      	movs	r1, #195	; 0xc3
 800bfea:	4808      	ldr	r0, [pc, #32]	; (800c00c <cavlPrivateRetraceOnGrowth+0xb0>)
 800bfec:	f002 f956 	bl	800e29c <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d101      	bne.n	800bffa <cavlPrivateRetraceOnGrowth+0x9e>
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	e000      	b.n	800bffc <cavlPrivateRetraceOnGrowth+0xa0>
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3718      	adds	r7, #24
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	08012b6c 	.word	0x08012b6c
 800c008:	08013a60 	.word	0x08013a60
 800c00c:	08012af8 	.word	0x08012af8
 800c010:	08012b90 	.word	0x08012b90
 800c014:	08012ba0 	.word	0x08012ba0

0800c018 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08a      	sub	sp, #40	; 0x28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
 800c024:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 800c026:	2300      	movs	r3, #0
 800c028:	627b      	str	r3, [r7, #36]	; 0x24
    if ((root != NULL) && (predicate != NULL))
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d065      	beq.n	800c0fc <cavlSearch+0xe4>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d062      	beq.n	800c0fc <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 800c040:	e02f      	b.n	800c0a2 <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4611      	mov	r1, r2
 800c04a:	68b8      	ldr	r0, [r7, #8]
 800c04c:	4798      	blx	r3
 800c04e:	4603      	mov	r3, r0
 800c050:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 800c052:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d103      	bne.n	800c062 <cavlSearch+0x4a>
            {
                out = *n;
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800c060:	e023      	b.n	800c0aa <cavlSearch+0x92>
            }
            up = *n;
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c070:	2b00      	cmp	r3, #0
 800c072:	bfcc      	ite	gt
 800c074:	2301      	movgt	r3, #1
 800c076:	2300      	movle	r3, #0
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	3304      	adds	r3, #4
 800c080:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00b      	beq.n	800c0a2 <cavlSearch+0x8a>
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6a3a      	ldr	r2, [r7, #32]
 800c092:	429a      	cmp	r2, r3
 800c094:	d005      	beq.n	800c0a2 <cavlSearch+0x8a>
 800c096:	4b1c      	ldr	r3, [pc, #112]	; (800c108 <cavlSearch+0xf0>)
 800c098:	4a1c      	ldr	r2, [pc, #112]	; (800c10c <cavlSearch+0xf4>)
 800c09a:	21db      	movs	r1, #219	; 0xdb
 800c09c:	481c      	ldr	r0, [pc, #112]	; (800c110 <cavlSearch+0xf8>)
 800c09e:	f002 f8fd 	bl	800e29c <__assert_func>
        while (*n != NULL)
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d1cb      	bne.n	800c042 <cavlSearch+0x2a>
        }
        if (NULL == out)
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d125      	bne.n	800c0fc <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d004      	beq.n	800c0c0 <cavlSearch+0xa8>
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	68b8      	ldr	r0, [r7, #8]
 800c0ba:	4798      	blx	r3
 800c0bc:	4603      	mov	r3, r0
 800c0be:	e000      	b.n	800c0c2 <cavlSearch+0xaa>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	627b      	str	r3, [r7, #36]	; 0x24
            if (out != NULL)
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d018      	beq.n	800c0fc <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0ce:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d8:	2200      	movs	r2, #0
 800c0da:	609a      	str	r2, [r3, #8]
                out->up        = up;
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0de:	6a3a      	ldr	r2, [r7, #32]
 800c0e0:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 800c0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 800c0e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0ea:	f7ff ff37 	bl	800bf5c <cavlPrivateRetraceOnGrowth>
 800c0ee:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d002      	beq.n	800c0fc <cavlSearch+0xe4>
                {
                    *root = rt;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	697a      	ldr	r2, [r7, #20]
 800c0fa:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3728      	adds	r7, #40	; 0x28
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	08012bac 	.word	0x08012bac
 800c10c:	08013a54 	.word	0x08013a54
 800c110:	08012af8 	.word	0x08012af8

0800c114 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b088      	sub	sp, #32
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	f000 8116 	beq.w	800c352 <cavlRemove+0x23e>
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f000 8112 	beq.w	800c352 <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d105      	bne.n	800c142 <cavlRemove+0x2e>
 800c136:	4b89      	ldr	r3, [pc, #548]	; (800c35c <cavlRemove+0x248>)
 800c138:	4a89      	ldr	r2, [pc, #548]	; (800c360 <cavlRemove+0x24c>)
 800c13a:	21f6      	movs	r1, #246	; 0xf6
 800c13c:	4889      	ldr	r0, [pc, #548]	; (800c364 <cavlRemove+0x250>)
 800c13e:	f002 f8ad 	bl	800e29c <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10a      	bne.n	800c160 <cavlRemove+0x4c>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	429a      	cmp	r2, r3
 800c152:	d005      	beq.n	800c160 <cavlRemove+0x4c>
 800c154:	4b84      	ldr	r3, [pc, #528]	; (800c368 <cavlRemove+0x254>)
 800c156:	4a82      	ldr	r2, [pc, #520]	; (800c360 <cavlRemove+0x24c>)
 800c158:	21f7      	movs	r1, #247	; 0xf7
 800c15a:	4882      	ldr	r0, [pc, #520]	; (800c364 <cavlRemove+0x250>)
 800c15c:	f002 f89e 	bl	800e29c <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 800c160:	2300      	movs	r3, #0
 800c162:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 800c164:	2300      	movs	r3, #0
 800c166:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d073      	beq.n	800c258 <cavlRemove+0x144>
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d06f      	beq.n	800c258 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	2100      	movs	r1, #0
 800c17e:	4618      	mov	r0, r3
 800c180:	f7ff fd72 	bl	800bc68 <cavlFindExtremum>
 800c184:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d007      	beq.n	800c19c <cavlRemove+0x88>
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d103      	bne.n	800c19c <cavlRemove+0x88>
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d105      	bne.n	800c1a8 <cavlRemove+0x94>
 800c19c:	4b73      	ldr	r3, [pc, #460]	; (800c36c <cavlRemove+0x258>)
 800c19e:	4a70      	ldr	r2, [pc, #448]	; (800c360 <cavlRemove+0x24c>)
 800c1a0:	21ff      	movs	r1, #255	; 0xff
 800c1a2:	4870      	ldr	r0, [pc, #448]	; (800c364 <cavlRemove+0x250>)
 800c1a4:	f002 f87a 	bl	800e29c <__assert_func>
            re->bf        = node->bf;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	685a      	ldr	r2, [r3, #4]
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d025      	beq.n	800c218 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	697a      	ldr	r2, [r7, #20]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d006      	beq.n	800c1ea <cavlRemove+0xd6>
 800c1dc:	4b64      	ldr	r3, [pc, #400]	; (800c370 <cavlRemove+0x25c>)
 800c1de:	4a60      	ldr	r2, [pc, #384]	; (800c360 <cavlRemove+0x24c>)
 800c1e0:	f44f 7183 	mov.w	r1, #262	; 0x106
 800c1e4:	485f      	ldr	r0, [pc, #380]	; (800c364 <cavlRemove+0x250>)
 800c1e6:	f002 f859 	bl	800e29c <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	689a      	ldr	r2, [r3, #8]
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d003      	beq.n	800c202 <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	69fa      	ldr	r2, [r7, #28]
 800c200:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	689a      	ldr	r2, [r3, #8]
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	697a      	ldr	r2, [r7, #20]
 800c210:	601a      	str	r2, [r3, #0]
                r             = false;
 800c212:	2300      	movs	r3, #0
 800c214:	76fb      	strb	r3, [r7, #27]
 800c216:	e003      	b.n	800c220 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 800c21c:	2301      	movs	r3, #1
 800c21e:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00f      	beq.n	800c250 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	4299      	cmp	r1, r3
 800c23e:	bf0c      	ite	eq
 800c240:	2301      	moveq	r3, #1
 800c242:	2300      	movne	r3, #0
 800c244:	b2db      	uxtb	r3, r3
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	697a      	ldr	r2, [r7, #20]
 800c24c:	605a      	str	r2, [r3, #4]
        {
 800c24e:	e046      	b.n	800c2de <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	601a      	str	r2, [r3, #0]
        {
 800c256:	e042      	b.n	800c2de <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	2b00      	cmp	r3, #0
 800c264:	bf14      	ite	ne
 800c266:	2301      	movne	r3, #1
 800c268:	2300      	moveq	r3, #0
 800c26a:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 800c26c:	7cfb      	ldrb	r3, [r7, #19]
 800c26e:	683a      	ldr	r2, [r7, #0]
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d006      	beq.n	800c288 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 800c27a:	7cfb      	ldrb	r3, [r7, #19]
 800c27c:	683a      	ldr	r2, [r7, #0]
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	4413      	add	r3, r2
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	69fa      	ldr	r2, [r7, #28]
 800c286:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d020      	beq.n	800c2d0 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	429a      	cmp	r2, r3
 800c296:	bf0c      	ite	eq
 800c298:	2301      	moveq	r3, #1
 800c29a:	2300      	movne	r3, #0
 800c29c:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 800c29e:	7cfb      	ldrb	r3, [r7, #19]
 800c2a0:	7ef8      	ldrb	r0, [r7, #27]
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	4413      	add	r3, r2
 800c2a8:	685a      	ldr	r2, [r3, #4]
 800c2aa:	69f9      	ldr	r1, [r7, #28]
 800c2ac:	0083      	lsls	r3, r0, #2
 800c2ae:	440b      	add	r3, r1
 800c2b0:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 800c2b2:	7efb      	ldrb	r3, [r7, #27]
 800c2b4:	69fa      	ldr	r2, [r7, #28]
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	4413      	add	r3, r2
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00e      	beq.n	800c2de <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 800c2c0:	7efb      	ldrb	r3, [r7, #27]
 800c2c2:	69fa      	ldr	r2, [r7, #28]
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4413      	add	r3, r2
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	69fa      	ldr	r2, [r7, #28]
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	e006      	b.n	800c2de <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 800c2d0:	7cfb      	ldrb	r3, [r7, #19]
 800c2d2:	683a      	ldr	r2, [r7, #0]
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	4413      	add	r3, r2
 800c2d8:	685a      	ldr	r2, [r3, #4]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d036      	beq.n	800c352 <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 800c2e8:	7efb      	ldrb	r3, [r7, #27]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	bf14      	ite	ne
 800c2ee:	2301      	movne	r3, #1
 800c2f0:	2300      	moveq	r3, #0
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	f083 0301 	eor.w	r3, r3, #1
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	4619      	mov	r1, r3
 800c302:	69f8      	ldr	r0, [r7, #28]
 800c304:	f7ff fd48 	bl	800bd98 <cavlPrivateAdjustBalance>
 800c308:	60f8      	str	r0, [r7, #12]
                p = c->up;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d10b      	bne.n	800c332 <cavlRemove+0x21e>
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d008      	beq.n	800c332 <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	429a      	cmp	r2, r3
 800c328:	bf0c      	ite	eq
 800c32a:	2301      	moveq	r3, #1
 800c32c:	2300      	movne	r3, #0
 800c32e:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 800c330:	e7da      	b.n	800c2e8 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10c      	bne.n	800c352 <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d106      	bne.n	800c34c <cavlRemove+0x238>
 800c33e:	4b0d      	ldr	r3, [pc, #52]	; (800c374 <cavlRemove+0x260>)
 800c340:	4a07      	ldr	r2, [pc, #28]	; (800c360 <cavlRemove+0x24c>)
 800c342:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800c346:	4807      	ldr	r0, [pc, #28]	; (800c364 <cavlRemove+0x250>)
 800c348:	f001 ffa8 	bl	800e29c <__assert_func>
                *root = c;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 800c352:	bf00      	nop
 800c354:	3720      	adds	r7, #32
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	08012bd0 	.word	0x08012bd0
 800c360:	08013adc 	.word	0x08013adc
 800c364:	08012af8 	.word	0x08012af8
 800c368:	08012be0 	.word	0x08012be0
 800c36c:	08012c08 	.word	0x08012c08
 800c370:	08012c40 	.word	0x08012c40
 800c374:	08012ba0 	.word	0x08012ba0

0800c378 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 800c380:	687b      	ldr	r3, [r7, #4]
}
 800c382:	4618      	mov	r0, r3
 800c384:	370c      	adds	r7, #12
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
	...

0800c390 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	4603      	mov	r3, r0
 800c398:	460a      	mov	r2, r1
 800c39a:	80fb      	strh	r3, [r7, #6]
 800c39c:	4613      	mov	r3, r2
 800c39e:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800c3a0:	88fb      	ldrh	r3, [r7, #6]
 800c3a2:	021b      	lsls	r3, r3, #8
 800c3a4:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 800c3a6:	88fb      	ldrh	r3, [r7, #6]
 800c3a8:	0a1b      	lsrs	r3, r3, #8
 800c3aa:	b299      	uxth	r1, r3
 800c3ac:	797b      	ldrb	r3, [r7, #5]
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	404b      	eors	r3, r1
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	4905      	ldr	r1, [pc, #20]	; (800c3cc <crcAddByte+0x3c>)
 800c3b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800c3bc:	4053      	eors	r3, r2
 800c3be:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	0801372c 	.word	0x0801372c

0800c3d0 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b088      	sub	sp, #32
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
 800c3dc:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d108      	bne.n	800c3f6 <crcAdd+0x26>
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d005      	beq.n	800c3f6 <crcAdd+0x26>
 800c3ea:	4b12      	ldr	r3, [pc, #72]	; (800c434 <crcAdd+0x64>)
 800c3ec:	4a12      	ldr	r2, [pc, #72]	; (800c438 <crcAdd+0x68>)
 800c3ee:	2185      	movs	r1, #133	; 0x85
 800c3f0:	4812      	ldr	r0, [pc, #72]	; (800c43c <crcAdd+0x6c>)
 800c3f2:	f001 ff53 	bl	800e29c <__assert_func>
    TransferCRC    out = crc;
 800c3f6:	89fb      	ldrh	r3, [r7, #14]
 800c3f8:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800c3fe:	2300      	movs	r3, #0
 800c400:	617b      	str	r3, [r7, #20]
 800c402:	e00e      	b.n	800c422 <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	781a      	ldrb	r2, [r3, #0]
 800c408:	8bfb      	ldrh	r3, [r7, #30]
 800c40a:	4611      	mov	r1, r2
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7ff ffbf 	bl	800c390 <crcAddByte>
 800c412:	4603      	mov	r3, r0
 800c414:	83fb      	strh	r3, [r7, #30]
        ++p;
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	3301      	adds	r3, #1
 800c41a:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	3301      	adds	r3, #1
 800c420:	617b      	str	r3, [r7, #20]
 800c422:	697a      	ldr	r2, [r7, #20]
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	429a      	cmp	r2, r3
 800c428:	d3ec      	bcc.n	800c404 <crcAdd+0x34>
    }
    return out;
 800c42a:	8bfb      	ldrh	r3, [r7, #30]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3720      	adds	r7, #32
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	08012c50 	.word	0x08012c50
 800c438:	080139a8 	.word	0x080139a8
 800c43c:	08012c78 	.word	0x08012c78

0800c440 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	4603      	mov	r3, r0
 800c448:	460a      	mov	r2, r1
 800c44a:	80fb      	strh	r3, [r7, #6]
 800c44c:	4613      	mov	r3, r2
 800c44e:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800c450:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c454:	2b00      	cmp	r3, #0
 800c456:	da05      	bge.n	800c464 <txMakeMessageSessionSpecifier+0x24>
 800c458:	4b0e      	ldr	r3, [pc, #56]	; (800c494 <txMakeMessageSessionSpecifier+0x54>)
 800c45a:	4a0f      	ldr	r2, [pc, #60]	; (800c498 <txMakeMessageSessionSpecifier+0x58>)
 800c45c:	21ac      	movs	r1, #172	; 0xac
 800c45e:	480f      	ldr	r0, [pc, #60]	; (800c49c <txMakeMessageSessionSpecifier+0x5c>)
 800c460:	f001 ff1c 	bl	800e29c <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 800c464:	88fb      	ldrh	r3, [r7, #6]
 800c466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c46a:	d305      	bcc.n	800c478 <txMakeMessageSessionSpecifier+0x38>
 800c46c:	4b0c      	ldr	r3, [pc, #48]	; (800c4a0 <txMakeMessageSessionSpecifier+0x60>)
 800c46e:	4a0a      	ldr	r2, [pc, #40]	; (800c498 <txMakeMessageSessionSpecifier+0x58>)
 800c470:	21ad      	movs	r1, #173	; 0xad
 800c472:	480a      	ldr	r0, [pc, #40]	; (800c49c <txMakeMessageSessionSpecifier+0x5c>)
 800c474:	f001 ff12 	bl	800e29c <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 800c478:	88fb      	ldrh	r3, [r7, #6]
 800c47a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800c47e:	b29b      	uxth	r3, r3
 800c480:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 800c482:	797a      	ldrb	r2, [r7, #5]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	021b      	lsls	r3, r3, #8
 800c488:	4313      	orrs	r3, r2
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	08012ca8 	.word	0x08012ca8
 800c498:	080139b0 	.word	0x080139b0
 800c49c:	08012c78 	.word	0x08012c78
 800c4a0:	08012cbc 	.word	0x08012cbc

0800c4a4 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 800c4a4:	b590      	push	{r4, r7, lr}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	4611      	mov	r1, r2
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	4623      	mov	r3, r4
 800c4b4:	80fb      	strh	r3, [r7, #6]
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	717b      	strb	r3, [r7, #5]
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	713b      	strb	r3, [r7, #4]
 800c4be:	4613      	mov	r3, r2
 800c4c0:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800c4c2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	da05      	bge.n	800c4d6 <txMakeServiceSessionSpecifier+0x32>
 800c4ca:	4b17      	ldr	r3, [pc, #92]	; (800c528 <txMakeServiceSessionSpecifier+0x84>)
 800c4cc:	4a17      	ldr	r2, [pc, #92]	; (800c52c <txMakeServiceSessionSpecifier+0x88>)
 800c4ce:	21b7      	movs	r1, #183	; 0xb7
 800c4d0:	4817      	ldr	r0, [pc, #92]	; (800c530 <txMakeServiceSessionSpecifier+0x8c>)
 800c4d2:	f001 fee3 	bl	800e29c <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 800c4d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	da05      	bge.n	800c4ea <txMakeServiceSessionSpecifier+0x46>
 800c4de:	4b15      	ldr	r3, [pc, #84]	; (800c534 <txMakeServiceSessionSpecifier+0x90>)
 800c4e0:	4a12      	ldr	r2, [pc, #72]	; (800c52c <txMakeServiceSessionSpecifier+0x88>)
 800c4e2:	21b8      	movs	r1, #184	; 0xb8
 800c4e4:	4812      	ldr	r0, [pc, #72]	; (800c530 <txMakeServiceSessionSpecifier+0x8c>)
 800c4e6:	f001 fed9 	bl	800e29c <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 800c4ea:	88fb      	ldrh	r3, [r7, #6]
 800c4ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4f0:	d305      	bcc.n	800c4fe <txMakeServiceSessionSpecifier+0x5a>
 800c4f2:	4b11      	ldr	r3, [pc, #68]	; (800c538 <txMakeServiceSessionSpecifier+0x94>)
 800c4f4:	4a0d      	ldr	r2, [pc, #52]	; (800c52c <txMakeServiceSessionSpecifier+0x88>)
 800c4f6:	21b9      	movs	r1, #185	; 0xb9
 800c4f8:	480d      	ldr	r0, [pc, #52]	; (800c530 <txMakeServiceSessionSpecifier+0x8c>)
 800c4fa:	f001 fecf 	bl	800e29c <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800c4fe:	793a      	ldrb	r2, [r7, #4]
 800c500:	78fb      	ldrb	r3, [r7, #3]
 800c502:	01db      	lsls	r3, r3, #7
 800c504:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800c506:	88fb      	ldrh	r3, [r7, #6]
 800c508:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800c50a:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800c50c:	797a      	ldrb	r2, [r7, #5]
 800c50e:	2a00      	cmp	r2, #0
 800c510:	d002      	beq.n	800c518 <txMakeServiceSessionSpecifier+0x74>
 800c512:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c516:	e000      	b.n	800c51a <txMakeServiceSessionSpecifier+0x76>
 800c518:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800c51a:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800c51c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
}
 800c520:	4618      	mov	r0, r3
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	bd90      	pop	{r4, r7, pc}
 800c528:	08012ca8 	.word	0x08012ca8
 800c52c:	080139d0 	.word	0x080139d0
 800c530:	08012c78 	.word	0x08012c78
 800c534:	08012cd0 	.word	0x08012cd0
 800c538:	08012ce4 	.word	0x08012ce4

0800c53c <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 800c544:	2340      	movs	r3, #64	; 0x40
 800c546:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 800c548:	2300      	movs	r3, #0
 800c54a:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b07      	cmp	r3, #7
 800c550:	d802      	bhi.n	800c558 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 800c552:	2308      	movs	r3, #8
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	e014      	b.n	800c582 <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d808      	bhi.n	800c572 <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 800c560:	4a0c      	ldr	r2, [pc, #48]	; (800c594 <adjustPresentationLayerMTU+0x58>)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4413      	add	r3, r2
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	461a      	mov	r2, r3
 800c56a:	4b0b      	ldr	r3, [pc, #44]	; (800c598 <adjustPresentationLayerMTU+0x5c>)
 800c56c:	5c9b      	ldrb	r3, [r3, r2]
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	e007      	b.n	800c582 <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 800c572:	4a08      	ldr	r2, [pc, #32]	; (800c594 <adjustPresentationLayerMTU+0x58>)
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	4413      	add	r3, r2
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	461a      	mov	r2, r3
 800c57c:	4b06      	ldr	r3, [pc, #24]	; (800c598 <adjustPresentationLayerMTU+0x5c>)
 800c57e:	5c9b      	ldrb	r3, [r3, r2]
 800c580:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	3b01      	subs	r3, #1
}
 800c586:	4618      	mov	r0, r3
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	0801393c 	.word	0x0801393c
 800c598:	0801392c 	.word	0x0801392c

0800c59c <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08a      	sub	sp, #40	; 0x28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
 800c5a8:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d105      	bne.n	800c5bc <txMakeCANID+0x20>
 800c5b0:	4b60      	ldr	r3, [pc, #384]	; (800c734 <txMakeCANID+0x198>)
 800c5b2:	4a61      	ldr	r2, [pc, #388]	; (800c738 <txMakeCANID+0x19c>)
 800c5b4:	21d9      	movs	r1, #217	; 0xd9
 800c5b6:	4861      	ldr	r0, [pc, #388]	; (800c73c <txMakeCANID+0x1a0>)
 800c5b8:	f001 fe70 	bl	800e29c <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d105      	bne.n	800c5ce <txMakeCANID+0x32>
 800c5c2:	4b5f      	ldr	r3, [pc, #380]	; (800c740 <txMakeCANID+0x1a4>)
 800c5c4:	4a5c      	ldr	r2, [pc, #368]	; (800c738 <txMakeCANID+0x19c>)
 800c5c6:	21da      	movs	r1, #218	; 0xda
 800c5c8:	485c      	ldr	r0, [pc, #368]	; (800c73c <txMakeCANID+0x1a0>)
 800c5ca:	f001 fe67 	bl	800e29c <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800c5ce:	f06f 0301 	mvn.w	r3, #1
 800c5d2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	785b      	ldrb	r3, [r3, #1]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d157      	bne.n	800c68c <txMakeCANID+0xf0>
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	791b      	ldrb	r3, [r3, #4]
 800c5e0:	2bff      	cmp	r3, #255	; 0xff
 800c5e2:	d153      	bne.n	800c68c <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800c5e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5ec:	d24e      	bcs.n	800c68c <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800c5ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	db11      	blt.n	800c61a <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	885b      	ldrh	r3, [r3, #2]
 800c5fa:	78fa      	ldrb	r2, [r7, #3]
 800c5fc:	4611      	mov	r1, r2
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7ff ff1e 	bl	800c440 <txMakeMessageSessionSpecifier>
 800c604:	4603      	mov	r3, r0
 800c606:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800c608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	da75      	bge.n	800c6fa <txMakeCANID+0x15e>
 800c60e:	4b4d      	ldr	r3, [pc, #308]	; (800c744 <txMakeCANID+0x1a8>)
 800c610:	4a49      	ldr	r2, [pc, #292]	; (800c738 <txMakeCANID+0x19c>)
 800c612:	21e2      	movs	r1, #226	; 0xe2
 800c614:	4849      	ldr	r0, [pc, #292]	; (800c73c <txMakeCANID+0x1a0>)
 800c616:	f001 fe41 	bl	800e29c <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61e:	429a      	cmp	r2, r3
 800c620:	d830      	bhi.n	800c684 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d108      	bne.n	800c63a <txMakeCANID+0x9e>
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d005      	beq.n	800c63a <txMakeCANID+0x9e>
 800c62e:	4b46      	ldr	r3, [pc, #280]	; (800c748 <txMakeCANID+0x1ac>)
 800c630:	4a41      	ldr	r2, [pc, #260]	; (800c738 <txMakeCANID+0x19c>)
 800c632:	21e6      	movs	r1, #230	; 0xe6
 800c634:	4841      	ldr	r0, [pc, #260]	; (800c73c <txMakeCANID+0x1a0>)
 800c636:	f001 fe31 	bl	800e29c <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	68b9      	ldr	r1, [r7, #8]
 800c63e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c642:	f7ff fec5 	bl	800c3d0 <crcAdd>
 800c646:	4603      	mov	r3, r0
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c64e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	885b      	ldrh	r3, [r3, #2]
 800c656:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800c65a:	4611      	mov	r1, r2
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7ff feef 	bl	800c440 <txMakeMessageSessionSpecifier>
 800c662:	4603      	mov	r3, r0
 800c664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c668:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c670:	d305      	bcc.n	800c67e <txMakeCANID+0xe2>
 800c672:	4b36      	ldr	r3, [pc, #216]	; (800c74c <txMakeCANID+0x1b0>)
 800c674:	4a30      	ldr	r2, [pc, #192]	; (800c738 <txMakeCANID+0x19c>)
 800c676:	21e9      	movs	r1, #233	; 0xe9
 800c678:	4830      	ldr	r0, [pc, #192]	; (800c73c <txMakeCANID+0x1a0>)
 800c67a:	f001 fe0f 	bl	800e29c <__assert_func>
            out = (int32_t) spec;
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800c682:	e03a      	b.n	800c6fa <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 800c684:	f06f 0301 	mvn.w	r3, #1
 800c688:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800c68a:	e036      	b.n	800c6fa <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	785b      	ldrb	r3, [r3, #1]
 800c690:	2b02      	cmp	r3, #2
 800c692:	d003      	beq.n	800c69c <txMakeCANID+0x100>
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	785b      	ldrb	r3, [r3, #1]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d12a      	bne.n	800c6f2 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	791b      	ldrb	r3, [r3, #4]
 800c6a0:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	db25      	blt.n	800c6f2 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	885b      	ldrh	r3, [r3, #2]
 800c6aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6ae:	d220      	bcs.n	800c6f2 <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800c6b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	db18      	blt.n	800c6ea <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	bf0c      	ite	eq
 800c6c4:	2301      	moveq	r3, #1
 800c6c6:	2300      	movne	r3, #0
 800c6c8:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800c6ce:	78fa      	ldrb	r2, [r7, #3]
 800c6d0:	f7ff fee8 	bl	800c4a4 <txMakeServiceSessionSpecifier>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	da0f      	bge.n	800c6fe <txMakeCANID+0x162>
 800c6de:	4b19      	ldr	r3, [pc, #100]	; (800c744 <txMakeCANID+0x1a8>)
 800c6e0:	4a15      	ldr	r2, [pc, #84]	; (800c738 <txMakeCANID+0x19c>)
 800c6e2:	21fa      	movs	r1, #250	; 0xfa
 800c6e4:	4815      	ldr	r0, [pc, #84]	; (800c73c <txMakeCANID+0x1a0>)
 800c6e6:	f001 fdd9 	bl	800e29c <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 800c6ea:	f06f 0301 	mvn.w	r3, #1
 800c6ee:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800c6f0:	e005      	b.n	800c6fe <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 800c6f2:	f06f 0301 	mvn.w	r3, #1
 800c6f6:	627b      	str	r3, [r7, #36]	; 0x24
 800c6f8:	e002      	b.n	800c700 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800c6fa:	bf00      	nop
 800c6fc:	e000      	b.n	800c700 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800c6fe:	bf00      	nop
    }

    if (out >= 0)
 800c700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c702:	2b00      	cmp	r3, #0
 800c704:	db10      	blt.n	800c728 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	2b07      	cmp	r3, #7
 800c710:	d807      	bhi.n	800c722 <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	069a      	lsls	r2, r3, #26
 800c716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c718:	4313      	orrs	r3, r2
 800c71a:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	627b      	str	r3, [r7, #36]	; 0x24
 800c720:	e002      	b.n	800c728 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 800c722:	f06f 0301 	mvn.w	r3, #1
 800c726:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    return out;
 800c728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3728      	adds	r7, #40	; 0x28
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	08012cf8 	.word	0x08012cf8
 800c738:	0801399c 	.word	0x0801399c
 800c73c:	08012c78 	.word	0x08012c78
 800c740:	08012d0c 	.word	0x08012d0c
 800c744:	08012d28 	.word	0x08012d28
 800c748:	08012d34 	.word	0x08012d34
 800c74c:	08012d68 	.word	0x08012d68

0800c750 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 800c750:	b590      	push	{r4, r7, lr}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	4604      	mov	r4, r0
 800c758:	4608      	mov	r0, r1
 800c75a:	4611      	mov	r1, r2
 800c75c:	461a      	mov	r2, r3
 800c75e:	4623      	mov	r3, r4
 800c760:	71fb      	strb	r3, [r7, #7]
 800c762:	4603      	mov	r3, r0
 800c764:	71bb      	strb	r3, [r7, #6]
 800c766:	460b      	mov	r3, r1
 800c768:	717b      	strb	r3, [r7, #5]
 800c76a:	4613      	mov	r3, r2
 800c76c:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 800c76e:	79fb      	ldrb	r3, [r7, #7]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d009      	beq.n	800c788 <txMakeTailByte+0x38>
 800c774:	797b      	ldrb	r3, [r7, #5]
 800c776:	2b01      	cmp	r3, #1
 800c778:	d006      	beq.n	800c788 <txMakeTailByte+0x38>
 800c77a:	4b13      	ldr	r3, [pc, #76]	; (800c7c8 <txMakeTailByte+0x78>)
 800c77c:	4a13      	ldr	r2, [pc, #76]	; (800c7cc <txMakeTailByte+0x7c>)
 800c77e:	f240 111b 	movw	r1, #283	; 0x11b
 800c782:	4813      	ldr	r0, [pc, #76]	; (800c7d0 <txMakeTailByte+0x80>)
 800c784:	f001 fd8a 	bl	800e29c <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800c788:	79fb      	ldrb	r3, [r7, #7]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d001      	beq.n	800c792 <txMakeTailByte+0x42>
 800c78e:	2280      	movs	r2, #128	; 0x80
 800c790:	e000      	b.n	800c794 <txMakeTailByte+0x44>
 800c792:	2200      	movs	r2, #0
 800c794:	79bb      	ldrb	r3, [r7, #6]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d001      	beq.n	800c79e <txMakeTailByte+0x4e>
 800c79a:	2340      	movs	r3, #64	; 0x40
 800c79c:	e000      	b.n	800c7a0 <txMakeTailByte+0x50>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 800c7a4:	797a      	ldrb	r2, [r7, #5]
 800c7a6:	2a00      	cmp	r2, #0
 800c7a8:	d001      	beq.n	800c7ae <txMakeTailByte+0x5e>
 800c7aa:	2220      	movs	r2, #32
 800c7ac:	e000      	b.n	800c7b0 <txMakeTailByte+0x60>
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 800c7b4:	793b      	ldrb	r3, [r7, #4]
 800c7b6:	f003 031f 	and.w	r3, r3, #31
 800c7ba:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	b2db      	uxtb	r3, r3
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd90      	pop	{r4, r7, pc}
 800c7c8:	08012d84 	.word	0x08012d84
 800c7cc:	08013a44 	.word	0x08013a44
 800c7d0:	08012c78 	.word	0x08012c78

0800c7d4 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b40      	cmp	r3, #64	; 0x40
 800c7e0:	d906      	bls.n	800c7f0 <txRoundFramePayloadSizeUp+0x1c>
 800c7e2:	4b0f      	ldr	r3, [pc, #60]	; (800c820 <txRoundFramePayloadSizeUp+0x4c>)
 800c7e4:	4a0f      	ldr	r2, [pc, #60]	; (800c824 <txRoundFramePayloadSizeUp+0x50>)
 800c7e6:	f44f 7192 	mov.w	r1, #292	; 0x124
 800c7ea:	480f      	ldr	r0, [pc, #60]	; (800c828 <txRoundFramePayloadSizeUp+0x54>)
 800c7ec:	f001 fd56 	bl	800e29c <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 800c7f0:	4a0e      	ldr	r2, [pc, #56]	; (800c82c <txRoundFramePayloadSizeUp+0x58>)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2b0f      	cmp	r3, #15
 800c7fe:	d906      	bls.n	800c80e <txRoundFramePayloadSizeUp+0x3a>
 800c800:	4b0b      	ldr	r3, [pc, #44]	; (800c830 <txRoundFramePayloadSizeUp+0x5c>)
 800c802:	4a08      	ldr	r2, [pc, #32]	; (800c824 <txRoundFramePayloadSizeUp+0x50>)
 800c804:	f240 1127 	movw	r1, #295	; 0x127
 800c808:	4807      	ldr	r0, [pc, #28]	; (800c828 <txRoundFramePayloadSizeUp+0x54>)
 800c80a:	f001 fd47 	bl	800e29c <__assert_func>
    return CanardCANDLCToLength[y];
 800c80e:	4a09      	ldr	r2, [pc, #36]	; (800c834 <txRoundFramePayloadSizeUp+0x60>)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	4413      	add	r3, r2
 800c814:	781b      	ldrb	r3, [r3, #0]
}
 800c816:	4618      	mov	r0, r3
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	08012dac 	.word	0x08012dac
 800c824:	08013a14 	.word	0x08013a14
 800c828:	08012c78 	.word	0x08012c78
 800c82c:	0801393c 	.word	0x0801393c
 800c830:	08012df4 	.word	0x08012df4
 800c834:	0801392c 	.word	0x0801392c

0800c838 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b086      	sub	sp, #24
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d106      	bne.n	800c85a <txAllocateQueueItem+0x22>
 800c84c:	4b1f      	ldr	r3, [pc, #124]	; (800c8cc <txAllocateQueueItem+0x94>)
 800c84e:	4a20      	ldr	r2, [pc, #128]	; (800c8d0 <txAllocateQueueItem+0x98>)
 800c850:	f240 1131 	movw	r1, #305	; 0x131
 800c854:	481f      	ldr	r0, [pc, #124]	; (800c8d4 <txAllocateQueueItem+0x9c>)
 800c856:	f001 fd21 	bl	800e29c <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d106      	bne.n	800c86e <txAllocateQueueItem+0x36>
 800c860:	4b1d      	ldr	r3, [pc, #116]	; (800c8d8 <txAllocateQueueItem+0xa0>)
 800c862:	4a1b      	ldr	r2, [pc, #108]	; (800c8d0 <txAllocateQueueItem+0x98>)
 800c864:	f44f 7199 	mov.w	r1, #306	; 0x132
 800c868:	481a      	ldr	r0, [pc, #104]	; (800c8d4 <txAllocateQueueItem+0x9c>)
 800c86a:	f001 fd17 	bl	800e29c <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	6a3a      	ldr	r2, [r7, #32]
 800c874:	3230      	adds	r2, #48	; 0x30
 800c876:	4611      	mov	r1, r2
 800c878:	68f8      	ldr	r0, [r7, #12]
 800c87a:	4798      	blx	r3
 800c87c:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d01e      	beq.n	800c8c2 <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	2200      	movs	r2, #0
 800c888:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	2200      	movs	r2, #0
 800c88e:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	2200      	movs	r2, #0
 800c894:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	2200      	movs	r2, #0
 800c89a:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 800c8a2:	6979      	ldr	r1, [r7, #20]
 800c8a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8a8:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	6a3a      	ldr	r2, [r7, #32]
 800c8b0:	625a      	str	r2, [r3, #36]	; 0x24
        out->base.frame.payload         = out->payload_buffer;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	629a      	str	r2, [r3, #40]	; 0x28
        out->base.frame.extended_can_id = id;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	68ba      	ldr	r2, [r7, #8]
 800c8c0:	621a      	str	r2, [r3, #32]
    }
    return out;
 800c8c2:	697b      	ldr	r3, [r7, #20]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	08012e3c 	.word	0x08012e3c
 800c8d0:	08013a30 	.word	0x08013a30
 800c8d4:	08012c78 	.word	0x08012c78
 800c8d8:	08012e50 	.word	0x08012e50

0800c8dc <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d002      	beq.n	800c8fa <txAVLPredicate+0x1e>
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d106      	bne.n	800c908 <txAVLPredicate+0x2c>
 800c8fa:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <txAVLPredicate+0x48>)
 800c8fc:	4a0a      	ldr	r2, [pc, #40]	; (800c928 <txAVLPredicate+0x4c>)
 800c8fe:	f240 114d 	movw	r1, #333	; 0x14d
 800c902:	480a      	ldr	r0, [pc, #40]	; (800c92c <txAVLPredicate+0x50>)
 800c904:	f001 fcca 	bl	800e29c <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6a1a      	ldr	r2, [r3, #32]
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	6a1b      	ldr	r3, [r3, #32]
 800c910:	429a      	cmp	r2, r3
 800c912:	d301      	bcc.n	800c918 <txAVLPredicate+0x3c>
 800c914:	2301      	movs	r3, #1
 800c916:	e001      	b.n	800c91c <txAVLPredicate+0x40>
 800c918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	08012e64 	.word	0x08012e64
 800c928:	08013a04 	.word	0x08013a04
 800c92c:	08012c78 	.word	0x08012c78

0800c930 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 800c930:	b590      	push	{r4, r7, lr}
 800c932:	b08d      	sub	sp, #52	; 0x34
 800c934:	af02      	add	r7, sp, #8
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d106      	bne.n	800c952 <txPushSingleFrame+0x22>
 800c944:	4b5c      	ldr	r3, [pc, #368]	; (800cab8 <txPushSingleFrame+0x188>)
 800c946:	4a5d      	ldr	r2, [pc, #372]	; (800cabc <txPushSingleFrame+0x18c>)
 800c948:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800c94c:	485c      	ldr	r0, [pc, #368]	; (800cac0 <txPushSingleFrame+0x190>)
 800c94e:	f001 fca5 	bl	800e29c <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 800c952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c954:	2b00      	cmp	r3, #0
 800c956:	d109      	bne.n	800c96c <txPushSingleFrame+0x3c>
 800c958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d006      	beq.n	800c96c <txPushSingleFrame+0x3c>
 800c95e:	4b59      	ldr	r3, [pc, #356]	; (800cac4 <txPushSingleFrame+0x194>)
 800c960:	4a56      	ldr	r2, [pc, #344]	; (800cabc <txPushSingleFrame+0x18c>)
 800c962:	f240 115b 	movw	r1, #347	; 0x15b
 800c966:	4856      	ldr	r0, [pc, #344]	; (800cac0 <txPushSingleFrame+0x190>)
 800c968:	f001 fc98 	bl	800e29c <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 800c96c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c96e:	3301      	adds	r3, #1
 800c970:	4618      	mov	r0, r3
 800c972:	f7ff ff2f 	bl	800c7d4 <txRoundFramePayloadSizeUp>
 800c976:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 800c978:	6a3a      	ldr	r2, [r7, #32]
 800c97a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d806      	bhi.n	800c98e <txPushSingleFrame+0x5e>
 800c980:	4b51      	ldr	r3, [pc, #324]	; (800cac8 <txPushSingleFrame+0x198>)
 800c982:	4a4e      	ldr	r2, [pc, #312]	; (800cabc <txPushSingleFrame+0x18c>)
 800c984:	f240 115d 	movw	r1, #349	; 0x15d
 800c988:	484d      	ldr	r0, [pc, #308]	; (800cac0 <txPushSingleFrame+0x190>)
 800c98a:	f001 fc87 	bl	800e29c <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 800c98e:	6a3a      	ldr	r2, [r7, #32]
 800c990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c992:	1ad3      	subs	r3, r2, r3
 800c994:	3b01      	subs	r3, #1
 800c996:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 800c998:	69fa      	ldr	r2, [r7, #28]
 800c99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c99c:	4413      	add	r3, r2
 800c99e:	3301      	adds	r3, #1
 800c9a0:	6a3a      	ldr	r2, [r7, #32]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d006      	beq.n	800c9b4 <txPushSingleFrame+0x84>
 800c9a6:	4b49      	ldr	r3, [pc, #292]	; (800cacc <txPushSingleFrame+0x19c>)
 800c9a8:	4a44      	ldr	r2, [pc, #272]	; (800cabc <txPushSingleFrame+0x18c>)
 800c9aa:	f240 115f 	movw	r1, #351	; 0x15f
 800c9ae:	4844      	ldr	r0, [pc, #272]	; (800cac0 <txPushSingleFrame+0x190>)
 800c9b0:	f001 fc74 	bl	800e29c <__assert_func>
    int32_t       out = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	627b      	str	r3, [r7, #36]	; 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	689a      	ldr	r2, [r3, #8]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d209      	bcs.n	800c9d8 <txPushSingleFrame+0xa8>
 800c9c4:	6a3b      	ldr	r3, [r7, #32]
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c9ce:	68b8      	ldr	r0, [r7, #8]
 800c9d0:	f7ff ff32 	bl	800c838 <txAllocateQueueItem>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	e000      	b.n	800c9da <txPushSingleFrame+0xaa>
 800c9d8:	2300      	movs	r3, #0
    TxItem* const tqi =
 800c9da:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d054      	beq.n	800ca8c <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 800c9e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d010      	beq.n	800ca0a <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 800c9e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d106      	bne.n	800c9fc <txPushSingleFrame+0xcc>
 800c9ee:	4b38      	ldr	r3, [pc, #224]	; (800cad0 <txPushSingleFrame+0x1a0>)
 800c9f0:	4a32      	ldr	r2, [pc, #200]	; (800cabc <txPushSingleFrame+0x18c>)
 800c9f2:	f240 1167 	movw	r1, #359	; 0x167
 800c9f6:	4832      	ldr	r0, [pc, #200]	; (800cac0 <txPushSingleFrame+0x190>)
 800c9f8:	f001 fc50 	bl	800e29c <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800c9fc:	69bb      	ldr	r3, [r7, #24]
 800c9fe:	3330      	adds	r3, #48	; 0x30
 800ca00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ca04:	4618      	mov	r0, r3
 800ca06:	f002 fde2 	bl	800f5ce <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800ca0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca0c:	3330      	adds	r3, #48	; 0x30
 800ca0e:	69ba      	ldr	r2, [r7, #24]
 800ca10:	4413      	add	r3, r2
 800ca12:	69fa      	ldr	r2, [r7, #28]
 800ca14:	2100      	movs	r1, #0
 800ca16:	4618      	mov	r0, r3
 800ca18:	f002 fcf3 	bl	800f402 <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800ca1c:	6a3b      	ldr	r3, [r7, #32]
 800ca1e:	1e5c      	subs	r4, r3, #1
 800ca20:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ca24:	2201      	movs	r2, #1
 800ca26:	2101      	movs	r1, #1
 800ca28:	2001      	movs	r0, #1
 800ca2a:	f7ff fe91 	bl	800c750 <txMakeTailByte>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	461a      	mov	r2, r3
 800ca32:	69bb      	ldr	r3, [r7, #24]
 800ca34:	4423      	add	r3, r4
 800ca36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f103 000c 	add.w	r0, r3, #12
 800ca40:	69b9      	ldr	r1, [r7, #24]
 800ca42:	4b24      	ldr	r3, [pc, #144]	; (800cad4 <txPushSingleFrame+0x1a4>)
 800ca44:	4a24      	ldr	r2, [pc, #144]	; (800cad8 <txPushSingleFrame+0x1a8>)
 800ca46:	f7ff fae7 	bl	800c018 <cavlSearch>
 800ca4a:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d006      	beq.n	800ca62 <txPushSingleFrame+0x132>
 800ca54:	4b21      	ldr	r3, [pc, #132]	; (800cadc <txPushSingleFrame+0x1ac>)
 800ca56:	4a19      	ldr	r2, [pc, #100]	; (800cabc <txPushSingleFrame+0x18c>)
 800ca58:	f240 1173 	movw	r1, #371	; 0x173
 800ca5c:	4818      	ldr	r0, [pc, #96]	; (800cac0 <txPushSingleFrame+0x190>)
 800ca5e:	f001 fc1d 	bl	800e29c <__assert_func>
        que->size++;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	689b      	ldr	r3, [r3, #8]
 800ca66:	1c5a      	adds	r2, r3, #1
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	689a      	ldr	r2, [r3, #8]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d906      	bls.n	800ca86 <txPushSingleFrame+0x156>
 800ca78:	4b19      	ldr	r3, [pc, #100]	; (800cae0 <txPushSingleFrame+0x1b0>)
 800ca7a:	4a10      	ldr	r2, [pc, #64]	; (800cabc <txPushSingleFrame+0x18c>)
 800ca7c:	f240 1175 	movw	r1, #373	; 0x175
 800ca80:	480f      	ldr	r0, [pc, #60]	; (800cac0 <txPushSingleFrame+0x190>)
 800ca82:	f001 fc0b 	bl	800e29c <__assert_func>
        out = 1;  // One frame enqueued.
 800ca86:	2301      	movs	r3, #1
 800ca88:	627b      	str	r3, [r7, #36]	; 0x24
 800ca8a:	e002      	b.n	800ca92 <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800ca8c:	f06f 0302 	mvn.w	r3, #2
 800ca90:	627b      	str	r3, [r7, #36]	; 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 800ca92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	db09      	blt.n	800caac <txPushSingleFrame+0x17c>
 800ca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d006      	beq.n	800caac <txPushSingleFrame+0x17c>
 800ca9e:	4b11      	ldr	r3, [pc, #68]	; (800cae4 <txPushSingleFrame+0x1b4>)
 800caa0:	4a06      	ldr	r2, [pc, #24]	; (800cabc <txPushSingleFrame+0x18c>)
 800caa2:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800caa6:	4806      	ldr	r0, [pc, #24]	; (800cac0 <txPushSingleFrame+0x190>)
 800caa8:	f001 fbf8 	bl	800e29c <__assert_func>
    return out;
 800caac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800caae:	4618      	mov	r0, r3
 800cab0:	372c      	adds	r7, #44	; 0x2c
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd90      	pop	{r4, r7, pc}
 800cab6:	bf00      	nop
 800cab8:	08012e3c 	.word	0x08012e3c
 800cabc:	080139f0 	.word	0x080139f0
 800cac0:	08012c78 	.word	0x08012c78
 800cac4:	08012e98 	.word	0x08012e98
 800cac8:	08012ec8 	.word	0x08012ec8
 800cacc:	08012eec 	.word	0x08012eec
 800cad0:	08012f28 	.word	0x08012f28
 800cad4:	0800c379 	.word	0x0800c379
 800cad8:	0800c8dd 	.word	0x0800c8dd
 800cadc:	08012f40 	.word	0x08012f40
 800cae0:	08012f58 	.word	0x08012f58
 800cae4:	08012f74 	.word	0x08012f74

0800cae8 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 800cae8:	b590      	push	{r4, r7, lr}
 800caea:	b093      	sub	sp, #76	; 0x4c
 800caec:	af02      	add	r7, sp, #8
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d106      	bne.n	800cb08 <txGenerateMultiFrameChain+0x20>
 800cafa:	4b93      	ldr	r3, [pc, #588]	; (800cd48 <txGenerateMultiFrameChain+0x260>)
 800cafc:	4a93      	ldr	r2, [pc, #588]	; (800cd4c <txGenerateMultiFrameChain+0x264>)
 800cafe:	f240 1189 	movw	r1, #393	; 0x189
 800cb02:	4893      	ldr	r0, [pc, #588]	; (800cd50 <txGenerateMultiFrameChain+0x268>)
 800cb04:	f001 fbca 	bl	800e29c <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d106      	bne.n	800cb1c <txGenerateMultiFrameChain+0x34>
 800cb0e:	4b91      	ldr	r3, [pc, #580]	; (800cd54 <txGenerateMultiFrameChain+0x26c>)
 800cb10:	4a8e      	ldr	r2, [pc, #568]	; (800cd4c <txGenerateMultiFrameChain+0x264>)
 800cb12:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800cb16:	488e      	ldr	r0, [pc, #568]	; (800cd50 <txGenerateMultiFrameChain+0x268>)
 800cb18:	f001 fbc0 	bl	800e29c <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800cb1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d806      	bhi.n	800cb32 <txGenerateMultiFrameChain+0x4a>
 800cb24:	4b8c      	ldr	r3, [pc, #560]	; (800cd58 <txGenerateMultiFrameChain+0x270>)
 800cb26:	4a89      	ldr	r2, [pc, #548]	; (800cd4c <txGenerateMultiFrameChain+0x264>)
 800cb28:	f240 118b 	movw	r1, #395	; 0x18b
 800cb2c:	4888      	ldr	r0, [pc, #544]	; (800cd50 <txGenerateMultiFrameChain+0x268>)
 800cb2e:	f001 fbb5 	bl	800e29c <__assert_func>
    CANARD_ASSERT(payload != NULL);
 800cb32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d106      	bne.n	800cb46 <txGenerateMultiFrameChain+0x5e>
 800cb38:	4b88      	ldr	r3, [pc, #544]	; (800cd5c <txGenerateMultiFrameChain+0x274>)
 800cb3a:	4a84      	ldr	r2, [pc, #528]	; (800cd4c <txGenerateMultiFrameChain+0x264>)
 800cb3c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800cb40:	4883      	ldr	r0, [pc, #524]	; (800cd50 <txGenerateMultiFrameChain+0x268>)
 800cb42:	f001 fbab 	bl	800e29c <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 800cb46:	2300      	movs	r3, #0
 800cb48:	613b      	str	r3, [r7, #16]
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	617b      	str	r3, [r7, #20]
 800cb4e:	2300      	movs	r3, #0
 800cb50:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800cb52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb54:	3302      	adds	r3, #2
 800cb56:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t         offset                = 0U;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 800cb5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cb5e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cb64:	f7ff fc34 	bl	800c3d0 <crcAdd>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	877b      	strh	r3, [r7, #58]	; 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 800cb72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb74:	637b      	str	r3, [r7, #52]	; 0x34
    while (offset < payload_size_with_crc)
 800cb76:	e0d4      	b.n	800cd22 <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 800cb7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb82:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d908      	bls.n	800cb9c <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 800cb8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb8e:	1ad3      	subs	r3, r2, r3
 800cb90:	3301      	adds	r3, #1
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7ff fe1e 	bl	800c7d4 <txRoundFramePayloadSizeUp>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	e001      	b.n	800cba0 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 800cba0:	627b      	str	r3, [r7, #36]	; 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 800cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cbaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cbac:	68b8      	ldr	r0, [r7, #8]
 800cbae:	f7ff fe43 	bl	800c838 <txAllocateQueueItem>
 800cbb2:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d102      	bne.n	800cbc0 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 800cbba:	6a3b      	ldr	r3, [r7, #32]
 800cbbc:	613b      	str	r3, [r7, #16]
 800cbbe:	e002      	b.n	800cbc6 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	6a3a      	ldr	r2, [r7, #32]
 800cbc4:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 800cbc6:	6a3b      	ldr	r3, [r7, #32]
 800cbc8:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f000 80ae 	beq.w	800cd2e <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 800cbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	633b      	str	r3, [r7, #48]	; 0x30
        if (offset < payload_size)
 800cbdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cbde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d21c      	bcs.n	800cc1e <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 800cbe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cbe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe8:	1ad3      	subs	r3, r2, r3
 800cbea:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (move_size > frame_payload_size)
 800cbec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d901      	bls.n	800cbf8 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	3330      	adds	r3, #48	; 0x30
 800cbfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbfe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc00:	4618      	mov	r0, r3
 800cc02:	f002 fce4 	bl	800f5ce <memcpy>
            frame_offset = frame_offset + move_size;
 800cc06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0a:	4413      	add	r3, r2
 800cc0c:	633b      	str	r3, [r7, #48]	; 0x30
            offset += move_size;
 800cc0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc12:	4413      	add	r3, r2
 800cc14:	63fb      	str	r3, [r7, #60]	; 0x3c
            payload_ptr += move_size;
 800cc16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1a:	4413      	add	r3, r2
 800cc1c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 800cc1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d343      	bcc.n	800ccae <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800cc26:	e00f      	b.n	800cc48 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 800cc28:	697a      	ldr	r2, [r7, #20]
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2c:	4413      	add	r3, r2
 800cc2e:	3330      	adds	r3, #48	; 0x30
 800cc30:	2200      	movs	r2, #0
 800cc32:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800cc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc36:	3301      	adds	r3, #1
 800cc38:	633b      	str	r3, [r7, #48]	; 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 800cc3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7ff fba6 	bl	800c390 <crcAddByte>
 800cc44:	4603      	mov	r3, r0
 800cc46:	877b      	strh	r3, [r7, #58]	; 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800cc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc4a:	3302      	adds	r3, #2
 800cc4c:	69fa      	ldr	r2, [r7, #28]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d8ea      	bhi.n	800cc28 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 800cc52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d213      	bcs.n	800cc82 <txGenerateMultiFrameChain+0x19a>
 800cc5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d10f      	bne.n	800cc82 <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 800cc62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc64:	0a1b      	lsrs	r3, r3, #8
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	697a      	ldr	r2, [r7, #20]
 800cc6a:	b2d9      	uxtb	r1, r3
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6e:	4413      	add	r3, r2
 800cc70:	3330      	adds	r3, #48	; 0x30
 800cc72:	460a      	mov	r2, r1
 800cc74:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800cc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc78:	3301      	adds	r3, #1
 800cc7a:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 800cc7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc7e:	3301      	adds	r3, #1
 800cc80:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 800cc82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d211      	bcs.n	800ccae <txGenerateMultiFrameChain+0x1c6>
 800cc8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d90d      	bls.n	800ccae <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 800cc92:	697a      	ldr	r2, [r7, #20]
 800cc94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc96:	b2d9      	uxtb	r1, r3
 800cc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9a:	4413      	add	r3, r2
 800cc9c:	3330      	adds	r3, #48	; 0x30
 800cc9e:	460a      	mov	r2, r1
 800cca0:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	3301      	adds	r3, #1
 800cca6:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 800cca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccaa:	3301      	adds	r3, #1
 800ccac:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	1c5a      	adds	r2, r3, #1
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d006      	beq.n	800ccc8 <txGenerateMultiFrameChain+0x1e0>
 800ccba:	4b29      	ldr	r3, [pc, #164]	; (800cd60 <txGenerateMultiFrameChain+0x278>)
 800ccbc:	4a23      	ldr	r2, [pc, #140]	; (800cd4c <txGenerateMultiFrameChain+0x264>)
 800ccbe:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ccc2:	4823      	ldr	r0, [pc, #140]	; (800cd50 <txGenerateMultiFrameChain+0x268>)
 800ccc4:	f001 faea 	bl	800e29c <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	bf0c      	ite	eq
 800ccd0:	2301      	moveq	r3, #1
 800ccd2:	2300      	movne	r3, #0
 800ccd4:	b2d8      	uxtb	r0, r3
 800ccd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ccd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	bf2c      	ite	cs
 800ccde:	2301      	movcs	r3, #1
 800cce0:	2300      	movcc	r3, #0
 800cce2:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800cce4:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800cce6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800ccea:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800ccee:	f7ff fd2f 	bl	800c750 <txMakeTailByte>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf8:	4423      	add	r3, r4
 800ccfa:	3330      	adds	r3, #48	; 0x30
 800ccfc:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 800ccfe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	bf14      	ite	ne
 800cd06:	2301      	movne	r3, #1
 800cd08:	2300      	moveq	r3, #0
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	f083 0301 	eor.w	r3, r3, #1
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800cd16:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cd1a:	f003 0301 	and.w	r3, r3, #1
 800cd1e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    while (offset < payload_size_with_crc)
 800cd22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	429a      	cmp	r2, r3
 800cd28:	f4ff af26 	bcc.w	800cb78 <txGenerateMultiFrameChain+0x90>
 800cd2c:	e000      	b.n	800cd30 <txGenerateMultiFrameChain+0x248>
            break;
 800cd2e:	bf00      	nop
    }
    return out;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	461c      	mov	r4, r3
 800cd34:	f107 0310 	add.w	r3, r7, #16
 800cd38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cd3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	3744      	adds	r7, #68	; 0x44
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd90      	pop	{r4, r7, pc}
 800cd48:	08012e3c 	.word	0x08012e3c
 800cd4c:	08013ac0 	.word	0x08013ac0
 800cd50:	08012c78 	.word	0x08012c78
 800cd54:	08012f8c 	.word	0x08012f8c
 800cd58:	08012fa8 	.word	0x08012fa8
 800cd5c:	08012f28 	.word	0x08012f28
 800cd60:	08012fd0 	.word	0x08012fd0

0800cd64 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b094      	sub	sp, #80	; 0x50
 800cd68:	af06      	add	r7, sp, #24
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d002      	beq.n	800cd7c <txPushMultiFrame+0x18>
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d106      	bne.n	800cd8a <txPushMultiFrame+0x26>
 800cd7c:	4b65      	ldr	r3, [pc, #404]	; (800cf14 <txPushMultiFrame+0x1b0>)
 800cd7e:	4a66      	ldr	r2, [pc, #408]	; (800cf18 <txPushMultiFrame+0x1b4>)
 800cd80:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800cd84:	4865      	ldr	r0, [pc, #404]	; (800cf1c <txPushMultiFrame+0x1b8>)
 800cd86:	f001 fa89 	bl	800e29c <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d106      	bne.n	800cd9e <txPushMultiFrame+0x3a>
 800cd90:	4b63      	ldr	r3, [pc, #396]	; (800cf20 <txPushMultiFrame+0x1bc>)
 800cd92:	4a61      	ldr	r2, [pc, #388]	; (800cf18 <txPushMultiFrame+0x1b4>)
 800cd94:	f240 11ed 	movw	r1, #493	; 0x1ed
 800cd98:	4860      	ldr	r0, [pc, #384]	; (800cf1c <txPushMultiFrame+0x1b8>)
 800cd9a:	f001 fa7f 	bl	800e29c <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800cd9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d806      	bhi.n	800cdb4 <txPushMultiFrame+0x50>
 800cda6:	4b5f      	ldr	r3, [pc, #380]	; (800cf24 <txPushMultiFrame+0x1c0>)
 800cda8:	4a5b      	ldr	r2, [pc, #364]	; (800cf18 <txPushMultiFrame+0x1b4>)
 800cdaa:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 800cdae:	485b      	ldr	r0, [pc, #364]	; (800cf1c <txPushMultiFrame+0x1b8>)
 800cdb0:	f001 fa74 	bl	800e29c <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	637b      	str	r3, [r7, #52]	; 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800cdb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdba:	3302      	adds	r3, #2
 800cdbc:	62bb      	str	r3, [r7, #40]	; 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 800cdbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	4413      	add	r3, r2
 800cdc4:	1e5a      	subs	r2, r3, #1
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdcc:	627b      	str	r3, [r7, #36]	; 0x24
    CANARD_ASSERT(num_frames >= 2);
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d806      	bhi.n	800cde2 <txPushMultiFrame+0x7e>
 800cdd4:	4b54      	ldr	r3, [pc, #336]	; (800cf28 <txPushMultiFrame+0x1c4>)
 800cdd6:	4a50      	ldr	r2, [pc, #320]	; (800cf18 <txPushMultiFrame+0x1b4>)
 800cdd8:	f240 11f3 	movw	r1, #499	; 0x1f3
 800cddc:	484f      	ldr	r0, [pc, #316]	; (800cf1c <txPushMultiFrame+0x1b8>)
 800cdde:	f001 fa5d 	bl	800e29c <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	689a      	ldr	r2, [r3, #8]
 800cde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde8:	441a      	add	r2, r3
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d87b      	bhi.n	800ceea <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 800cdf2:	f107 0010 	add.w	r0, r7, #16
 800cdf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdf8:	9305      	str	r3, [sp, #20]
 800cdfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdfc:	9304      	str	r3, [sp, #16]
 800cdfe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ce02:	9303      	str	r3, [sp, #12]
 800ce04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce06:	9302      	str	r3, [sp, #8]
 800ce08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ce0c:	e9cd 2300 	strd	r2, r3, [sp]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	68b9      	ldr	r1, [r7, #8]
 800ce14:	f7ff fe68 	bl	800cae8 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d051      	beq.n	800cec2 <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	633b      	str	r3, [r7, #48]	; 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f103 000c 	add.w	r0, r3, #12
 800ce28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce2a:	4b40      	ldr	r3, [pc, #256]	; (800cf2c <txPushMultiFrame+0x1c8>)
 800ce2c:	4a40      	ldr	r2, [pc, #256]	; (800cf30 <txPushMultiFrame+0x1cc>)
 800ce2e:	f7ff f8f3 	bl	800c018 <cavlSearch>
 800ce32:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 800ce34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce36:	69fa      	ldr	r2, [r7, #28]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d006      	beq.n	800ce4a <txPushMultiFrame+0xe6>
 800ce3c:	4b3d      	ldr	r3, [pc, #244]	; (800cf34 <txPushMultiFrame+0x1d0>)
 800ce3e:	4a36      	ldr	r2, [pc, #216]	; (800cf18 <txPushMultiFrame+0x1b4>)
 800ce40:	f240 2105 	movw	r1, #517	; 0x205
 800ce44:	4835      	ldr	r0, [pc, #212]	; (800cf1c <txPushMultiFrame+0x1b8>)
 800ce46:	f001 fa29 	bl	800e29c <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d106      	bne.n	800ce60 <txPushMultiFrame+0xfc>
 800ce52:	4b39      	ldr	r3, [pc, #228]	; (800cf38 <txPushMultiFrame+0x1d4>)
 800ce54:	4a30      	ldr	r2, [pc, #192]	; (800cf18 <txPushMultiFrame+0x1b4>)
 800ce56:	f240 2106 	movw	r1, #518	; 0x206
 800ce5a:	4830      	ldr	r0, [pc, #192]	; (800cf1c <txPushMultiFrame+0x1b8>)
 800ce5c:	f001 fa1e 	bl	800e29c <__assert_func>
                next = next->next_in_transfer;
 800ce60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce62:	691b      	ldr	r3, [r3, #16]
 800ce64:	633b      	str	r3, [r7, #48]	; 0x30
            } while (next != NULL);
 800ce66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1da      	bne.n	800ce22 <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d006      	beq.n	800ce82 <txPushMultiFrame+0x11e>
 800ce74:	4b31      	ldr	r3, [pc, #196]	; (800cf3c <txPushMultiFrame+0x1d8>)
 800ce76:	4a28      	ldr	r2, [pc, #160]	; (800cf18 <txPushMultiFrame+0x1b4>)
 800ce78:	f240 2109 	movw	r1, #521	; 0x209
 800ce7c:	4827      	ldr	r0, [pc, #156]	; (800cf1c <txPushMultiFrame+0x1b8>)
 800ce7e:	f001 fa0d 	bl	800e29c <__assert_func>
            que->size += sq.size;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	689a      	ldr	r2, [r3, #8]
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	441a      	add	r2, r3
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	689a      	ldr	r2, [r3, #8]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d906      	bls.n	800cea8 <txPushMultiFrame+0x144>
 800ce9a:	4b29      	ldr	r3, [pc, #164]	; (800cf40 <txPushMultiFrame+0x1dc>)
 800ce9c:	4a1e      	ldr	r2, [pc, #120]	; (800cf18 <txPushMultiFrame+0x1b4>)
 800ce9e:	f240 210b 	movw	r1, #523	; 0x20b
 800cea2:	481e      	ldr	r0, [pc, #120]	; (800cf1c <txPushMultiFrame+0x1b8>)
 800cea4:	f001 f9fa 	bl	800e29c <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	da06      	bge.n	800cebc <txPushMultiFrame+0x158>
 800ceae:	4b25      	ldr	r3, [pc, #148]	; (800cf44 <txPushMultiFrame+0x1e0>)
 800ceb0:	4a19      	ldr	r2, [pc, #100]	; (800cf18 <txPushMultiFrame+0x1b4>)
 800ceb2:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800ceb6:	4819      	ldr	r0, [pc, #100]	; (800cf1c <txPushMultiFrame+0x1b8>)
 800ceb8:	f001 f9f0 	bl	800e29c <__assert_func>
            out = (int32_t) sq.size;
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	637b      	str	r3, [r7, #52]	; 0x34
 800cec0:	e016      	b.n	800cef0 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 800cec2:	f06f 0302 	mvn.w	r3, #2
 800cec6:	637b      	str	r3, [r7, #52]	; 0x34
            CanardTxQueueItem* head = &sq.head->base;
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 800cecc:	e009      	b.n	800cee2 <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 800cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced0:	691b      	ldr	r3, [r3, #16]
 800ced2:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ceda:	68b8      	ldr	r0, [r7, #8]
 800cedc:	4798      	blx	r3
                head = next;
 800cede:	6a3b      	ldr	r3, [r7, #32]
 800cee0:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 800cee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d1f2      	bne.n	800cece <txPushMultiFrame+0x16a>
 800cee8:	e002      	b.n	800cef0 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800ceea:	f06f 0302 	mvn.w	r3, #2
 800ceee:	637b      	str	r3, [r7, #52]	; 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 800cef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	db09      	blt.n	800cf0a <txPushMultiFrame+0x1a6>
 800cef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	dc06      	bgt.n	800cf0a <txPushMultiFrame+0x1a6>
 800cefc:	4b12      	ldr	r3, [pc, #72]	; (800cf48 <txPushMultiFrame+0x1e4>)
 800cefe:	4a06      	ldr	r2, [pc, #24]	; (800cf18 <txPushMultiFrame+0x1b4>)
 800cf00:	f240 211f 	movw	r1, #543	; 0x21f
 800cf04:	4805      	ldr	r0, [pc, #20]	; (800cf1c <txPushMultiFrame+0x1b8>)
 800cf06:	f001 f9c9 	bl	800e29c <__assert_func>
    return out;
 800cf0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3738      	adds	r7, #56	; 0x38
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	0801300c 	.word	0x0801300c
 800cf18:	08013aac 	.word	0x08013aac
 800cf1c:	08012c78 	.word	0x08012c78
 800cf20:	08012f8c 	.word	0x08012f8c
 800cf24:	08012fa8 	.word	0x08012fa8
 800cf28:	0801303c 	.word	0x0801303c
 800cf2c:	0800c379 	.word	0x0800c379
 800cf30:	0800c8dd 	.word	0x0800c8dd
 800cf34:	0801304c 	.word	0x0801304c
 800cf38:	08013060 	.word	0x08013060
 800cf3c:	0801307c 	.word	0x0801307c
 800cf40:	08012f58 	.word	0x08012f58
 800cf44:	08013094 	.word	0x08013094
 800cf48:	080130b8 	.word	0x080130b8

0800cf4c <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid UAVCAN/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b088      	sub	sp, #32
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d106      	bne.n	800cf6e <rxTryParseFrame+0x22>
 800cf60:	4b96      	ldr	r3, [pc, #600]	; (800d1bc <rxTryParseFrame+0x270>)
 800cf62:	4a97      	ldr	r2, [pc, #604]	; (800d1c0 <rxTryParseFrame+0x274>)
 800cf64:	f240 214e 	movw	r1, #590	; 0x24e
 800cf68:	4896      	ldr	r0, [pc, #600]	; (800d1c4 <rxTryParseFrame+0x278>)
 800cf6a:	f001 f997 	bl	800e29c <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf76:	d306      	bcc.n	800cf86 <rxTryParseFrame+0x3a>
 800cf78:	4b93      	ldr	r3, [pc, #588]	; (800d1c8 <rxTryParseFrame+0x27c>)
 800cf7a:	4a91      	ldr	r2, [pc, #580]	; (800d1c0 <rxTryParseFrame+0x274>)
 800cf7c:	f240 214f 	movw	r1, #591	; 0x24f
 800cf80:	4890      	ldr	r0, [pc, #576]	; (800d1c4 <rxTryParseFrame+0x278>)
 800cf82:	f001 f98b 	bl	800e29c <__assert_func>
    CANARD_ASSERT(out != NULL);
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d106      	bne.n	800cf9a <rxTryParseFrame+0x4e>
 800cf8c:	4b8f      	ldr	r3, [pc, #572]	; (800d1cc <rxTryParseFrame+0x280>)
 800cf8e:	4a8c      	ldr	r2, [pc, #560]	; (800d1c0 <rxTryParseFrame+0x274>)
 800cf90:	f44f 7114 	mov.w	r1, #592	; 0x250
 800cf94:	488b      	ldr	r0, [pc, #556]	; (800d1c4 <rxTryParseFrame+0x278>)
 800cf96:	f001 f981 	bl	800e29c <__assert_func>
    bool valid = false;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f000 8105 	beq.w	800d1b2 <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d106      	bne.n	800cfbe <rxTryParseFrame+0x72>
 800cfb0:	4b87      	ldr	r3, [pc, #540]	; (800d1d0 <rxTryParseFrame+0x284>)
 800cfb2:	4a83      	ldr	r2, [pc, #524]	; (800d1c0 <rxTryParseFrame+0x274>)
 800cfb4:	f44f 7115 	mov.w	r1, #596	; 0x254
 800cfb8:	4882      	ldr	r0, [pc, #520]	; (800d1c4 <rxTryParseFrame+0x278>)
 800cfba:	f001 f96f 	bl	800e29c <__assert_func>
        out->timestamp_usec = timestamp_usec;
 800cfbe:	6839      	ldr	r1, [r7, #0]
 800cfc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cfc4:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	0e9b      	lsrs	r3, r3, #26
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	f003 0307 	and.w	r3, r3, #7
 800cfd8:	b2da      	uxtb	r2, r3
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d128      	bne.n	800d048 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	2200      	movs	r2, #0
 800cffa:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	0a1b      	lsrs	r3, r3, #8
 800d000:	b29b      	uxth	r3, r3
 800d002:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d006:	b29a      	uxth	r2, r3
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d012:	2b00      	cmp	r3, #0
 800d014:	d002      	beq.n	800d01c <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	22ff      	movs	r2, #255	; 0xff
 800d01a:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	22ff      	movs	r2, #255	; 0xff
 800d020:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d106      	bne.n	800d03a <rxTryParseFrame+0xee>
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d032:	2b00      	cmp	r3, #0
 800d034:	d101      	bne.n	800d03a <rxTryParseFrame+0xee>
 800d036:	2301      	movs	r3, #1
 800d038:	e000      	b.n	800d03c <rxTryParseFrame+0xf0>
 800d03a:	2300      	movs	r3, #0
 800d03c:	77fb      	strb	r3, [r7, #31]
 800d03e:	7ffb      	ldrb	r3, [r7, #31]
 800d040:	f003 0301 	and.w	r3, r3, #1
 800d044:	77fb      	strb	r3, [r7, #31]
 800d046:	e02c      	b.n	800d0a2 <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d001      	beq.n	800d056 <rxTryParseFrame+0x10a>
 800d052:	2202      	movs	r2, #2
 800d054:	e000      	b.n	800d058 <rxTryParseFrame+0x10c>
 800d056:	2201      	movs	r2, #1
            out->transfer_kind =
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	0b9b      	lsrs	r3, r3, #14
 800d060:	b29b      	uxth	r3, r3
 800d062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d066:	b29a      	uxth	r2, r3
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	09db      	lsrs	r3, r3, #7
 800d070:	b2db      	uxtb	r3, r3
 800d072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d076:	b2da      	uxtb	r2, r3
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d082:	2b00      	cmp	r3, #0
 800d084:	d107      	bne.n	800d096 <rxTryParseFrame+0x14a>
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	7b1a      	ldrb	r2, [r3, #12]
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	7b5b      	ldrb	r3, [r3, #13]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d001      	beq.n	800d096 <rxTryParseFrame+0x14a>
 800d092:	2301      	movs	r3, #1
 800d094:	e000      	b.n	800d098 <rxTryParseFrame+0x14c>
 800d096:	2300      	movs	r3, #0
 800d098:	77fb      	strb	r3, [r7, #31]
 800d09a:	7ffb      	ldrb	r3, [r7, #31]
 800d09c:	f003 0301 	and.w	r3, r3, #1
 800d0a0:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	1e5a      	subs	r2, r3, #1
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	689a      	ldr	r2, [r3, #8]
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	699a      	ldr	r2, [r3, #24]
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	695b      	ldr	r3, [r3, #20]
 800d0bc:	4413      	add	r3, r2
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 800d0c2:	7dfb      	ldrb	r3, [r7, #23]
 800d0c4:	f003 031f 	and.w	r3, r3, #31
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 800d0ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	09db      	lsrs	r3, r3, #7
 800d0d6:	b2da      	uxtb	r2, r3
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 800d0dc:	7dfb      	ldrb	r3, [r7, #23]
 800d0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	bf14      	ite	ne
 800d0e6:	2301      	movne	r3, #1
 800d0e8:	2300      	moveq	r3, #0
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 800d0f0:	7dfb      	ldrb	r3, [r7, #23]
 800d0f2:	f003 0320 	and.w	r3, r3, #32
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	bf14      	ite	ne
 800d0fa:	2301      	movne	r3, #1
 800d0fc:	2300      	moveq	r3, #0
 800d0fe:	b2da      	uxtb	r2, r3
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 800d104:	7ffb      	ldrb	r3, [r7, #31]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00c      	beq.n	800d124 <rxTryParseFrame+0x1d8>
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	7bdb      	ldrb	r3, [r3, #15]
 800d10e:	f083 0301 	eor.w	r3, r3, #1
 800d112:	b2db      	uxtb	r3, r3
 800d114:	2b00      	cmp	r3, #0
 800d116:	d103      	bne.n	800d120 <rxTryParseFrame+0x1d4>
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	7c5b      	ldrb	r3, [r3, #17]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d001      	beq.n	800d124 <rxTryParseFrame+0x1d8>
 800d120:	2301      	movs	r3, #1
 800d122:	e000      	b.n	800d126 <rxTryParseFrame+0x1da>
 800d124:	2300      	movs	r3, #0
 800d126:	77fb      	strb	r3, [r7, #31]
 800d128:	7ffb      	ldrb	r3, [r7, #31]
 800d12a:	f003 0301 	and.w	r3, r3, #1
 800d12e:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 800d130:	7ffb      	ldrb	r3, [r7, #31]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00d      	beq.n	800d152 <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d003      	beq.n	800d146 <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	7c1b      	ldrb	r3, [r3, #16]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d103      	bne.n	800d14e <rxTryParseFrame+0x202>
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	7b1b      	ldrb	r3, [r3, #12]
 800d14a:	2bff      	cmp	r3, #255	; 0xff
 800d14c:	d001      	beq.n	800d152 <rxTryParseFrame+0x206>
        valid = valid &&
 800d14e:	2301      	movs	r3, #1
 800d150:	e000      	b.n	800d154 <rxTryParseFrame+0x208>
 800d152:	2300      	movs	r3, #0
 800d154:	77fb      	strb	r3, [r7, #31]
 800d156:	7ffb      	ldrb	r3, [r7, #31]
 800d158:	f003 0301 	and.w	r3, r3, #1
 800d15c:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 800d15e:	7ffb      	ldrb	r3, [r7, #31]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d009      	beq.n	800d178 <rxTryParseFrame+0x22c>
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	695b      	ldr	r3, [r3, #20]
 800d168:	2b06      	cmp	r3, #6
 800d16a:	d803      	bhi.n	800d174 <rxTryParseFrame+0x228>
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	7c1b      	ldrb	r3, [r3, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d001      	beq.n	800d178 <rxTryParseFrame+0x22c>
 800d174:	2301      	movs	r3, #1
 800d176:	e000      	b.n	800d17a <rxTryParseFrame+0x22e>
 800d178:	2300      	movs	r3, #0
 800d17a:	77fb      	strb	r3, [r7, #31]
 800d17c:	7ffb      	ldrb	r3, [r7, #31]
 800d17e:	f003 0301 	and.w	r3, r3, #1
 800d182:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 800d184:	7ffb      	ldrb	r3, [r7, #31]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d00d      	beq.n	800d1a6 <rxTryParseFrame+0x25a>
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	695b      	ldr	r3, [r3, #20]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d107      	bne.n	800d1a2 <rxTryParseFrame+0x256>
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	7bdb      	ldrb	r3, [r3, #15]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d005      	beq.n	800d1a6 <rxTryParseFrame+0x25a>
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	7c1b      	ldrb	r3, [r3, #16]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <rxTryParseFrame+0x25a>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e000      	b.n	800d1a8 <rxTryParseFrame+0x25c>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	77fb      	strb	r3, [r7, #31]
 800d1aa:	7ffb      	ldrb	r3, [r7, #31]
 800d1ac:	f003 0301 	and.w	r3, r3, #1
 800d1b0:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 800d1b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3720      	adds	r7, #32
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	080130d0 	.word	0x080130d0
 800d1c0:	08013afc 	.word	0x08013afc
 800d1c4:	08012c78 	.word	0x08012c78
 800d1c8:	080130e8 	.word	0x080130e8
 800d1cc:	08013118 	.word	0x08013118
 800d1d0:	0801312c 	.word	0x0801312c

0800d1d4 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d106      	bne.n	800d1f2 <rxInitTransferMetadataFromFrame+0x1e>
 800d1e4:	4b19      	ldr	r3, [pc, #100]	; (800d24c <rxInitTransferMetadataFromFrame+0x78>)
 800d1e6:	4a1a      	ldr	r2, [pc, #104]	; (800d250 <rxInitTransferMetadataFromFrame+0x7c>)
 800d1e8:	f240 218f 	movw	r1, #655	; 0x28f
 800d1ec:	4819      	ldr	r0, [pc, #100]	; (800d254 <rxInitTransferMetadataFromFrame+0x80>)
 800d1ee:	f001 f855 	bl	800e29c <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	699b      	ldr	r3, [r3, #24]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d106      	bne.n	800d208 <rxInitTransferMetadataFromFrame+0x34>
 800d1fa:	4b17      	ldr	r3, [pc, #92]	; (800d258 <rxInitTransferMetadataFromFrame+0x84>)
 800d1fc:	4a14      	ldr	r2, [pc, #80]	; (800d250 <rxInitTransferMetadataFromFrame+0x7c>)
 800d1fe:	f44f 7124 	mov.w	r1, #656	; 0x290
 800d202:	4814      	ldr	r0, [pc, #80]	; (800d254 <rxInitTransferMetadataFromFrame+0x80>)
 800d204:	f001 f84a 	bl	800e29c <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d106      	bne.n	800d21c <rxInitTransferMetadataFromFrame+0x48>
 800d20e:	4b13      	ldr	r3, [pc, #76]	; (800d25c <rxInitTransferMetadataFromFrame+0x88>)
 800d210:	4a0f      	ldr	r2, [pc, #60]	; (800d250 <rxInitTransferMetadataFromFrame+0x7c>)
 800d212:	f240 2191 	movw	r1, #657	; 0x291
 800d216:	480f      	ldr	r0, [pc, #60]	; (800d254 <rxInitTransferMetadataFromFrame+0x80>)
 800d218:	f001 f840 	bl	800e29c <__assert_func>
    out_transfer->priority       = frame->priority;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	7a1a      	ldrb	r2, [r3, #8]
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	7a5a      	ldrb	r2, [r3, #9]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	895a      	ldrh	r2, [r3, #10]
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	7b1a      	ldrb	r2, [r3, #12]
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	7b9a      	ldrb	r2, [r3, #14]
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	715a      	strb	r2, [r3, #5]
}
 800d244:	bf00      	nop
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	080130d0 	.word	0x080130d0
 800d250:	08013b90 	.word	0x08013b90
 800d254:	08012c78 	.word	0x08012c78
 800d258:	0801312c 	.word	0x0801312c
 800d25c:	0801314c 	.word	0x0801314c

0800d260 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	4603      	mov	r3, r0
 800d268:	460a      	mov	r2, r1
 800d26a:	71fb      	strb	r3, [r7, #7]
 800d26c:	4613      	mov	r3, r2
 800d26e:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 800d270:	79fb      	ldrb	r3, [r7, #7]
 800d272:	2b1f      	cmp	r3, #31
 800d274:	d906      	bls.n	800d284 <rxComputeTransferIDDifference+0x24>
 800d276:	4b15      	ldr	r3, [pc, #84]	; (800d2cc <rxComputeTransferIDDifference+0x6c>)
 800d278:	4a15      	ldr	r2, [pc, #84]	; (800d2d0 <rxComputeTransferIDDifference+0x70>)
 800d27a:	f44f 7127 	mov.w	r1, #668	; 0x29c
 800d27e:	4815      	ldr	r0, [pc, #84]	; (800d2d4 <rxComputeTransferIDDifference+0x74>)
 800d280:	f001 f80c 	bl	800e29c <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 800d284:	79bb      	ldrb	r3, [r7, #6]
 800d286:	2b1f      	cmp	r3, #31
 800d288:	d906      	bls.n	800d298 <rxComputeTransferIDDifference+0x38>
 800d28a:	4b13      	ldr	r3, [pc, #76]	; (800d2d8 <rxComputeTransferIDDifference+0x78>)
 800d28c:	4a10      	ldr	r2, [pc, #64]	; (800d2d0 <rxComputeTransferIDDifference+0x70>)
 800d28e:	f240 219d 	movw	r1, #669	; 0x29d
 800d292:	4810      	ldr	r0, [pc, #64]	; (800d2d4 <rxComputeTransferIDDifference+0x74>)
 800d294:	f001 f802 	bl	800e29c <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 800d298:	79fb      	ldrb	r3, [r7, #7]
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	79bb      	ldrb	r3, [r7, #6]
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 800d2a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	da07      	bge.n	800d2be <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 800d2ae:	2320      	movs	r3, #32
 800d2b0:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 800d2b2:	7b7b      	ldrb	r3, [r7, #13]
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	89fb      	ldrh	r3, [r7, #14]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 800d2be:	89fb      	ldrh	r3, [r7, #14]
 800d2c0:	b2db      	uxtb	r3, r3
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	08013168 	.word	0x08013168
 800d2d0:	08013b2c 	.word	0x08013b2c
 800d2d4:	08012c78 	.word	0x08012c78
 800d2d8:	08013180 	.word	0x08013180

0800d2dc <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b086      	sub	sp, #24
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	60b9      	str	r1, [r7, #8]
 800d2e6:	607a      	str	r2, [r7, #4]
 800d2e8:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d106      	bne.n	800d2fe <rxSessionWritePayload+0x22>
 800d2f0:	4b67      	ldr	r3, [pc, #412]	; (800d490 <rxSessionWritePayload+0x1b4>)
 800d2f2:	4a68      	ldr	r2, [pc, #416]	; (800d494 <rxSessionWritePayload+0x1b8>)
 800d2f4:	f240 21ad 	movw	r1, #685	; 0x2ad
 800d2f8:	4867      	ldr	r0, [pc, #412]	; (800d498 <rxSessionWritePayload+0x1bc>)
 800d2fa:	f000 ffcf 	bl	800e29c <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d106      	bne.n	800d312 <rxSessionWritePayload+0x36>
 800d304:	4b65      	ldr	r3, [pc, #404]	; (800d49c <rxSessionWritePayload+0x1c0>)
 800d306:	4a63      	ldr	r2, [pc, #396]	; (800d494 <rxSessionWritePayload+0x1b8>)
 800d308:	f240 21ae 	movw	r1, #686	; 0x2ae
 800d30c:	4862      	ldr	r0, [pc, #392]	; (800d498 <rxSessionWritePayload+0x1bc>)
 800d30e:	f000 ffc5 	bl	800e29c <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800d312:	6a3b      	ldr	r3, [r7, #32]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d109      	bne.n	800d32c <rxSessionWritePayload+0x50>
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d006      	beq.n	800d32c <rxSessionWritePayload+0x50>
 800d31e:	4b60      	ldr	r3, [pc, #384]	; (800d4a0 <rxSessionWritePayload+0x1c4>)
 800d320:	4a5c      	ldr	r2, [pc, #368]	; (800d494 <rxSessionWritePayload+0x1b8>)
 800d322:	f240 21af 	movw	r1, #687	; 0x2af
 800d326:	485c      	ldr	r0, [pc, #368]	; (800d498 <rxSessionWritePayload+0x1bc>)
 800d328:	f000 ffb8 	bl	800e29c <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	429a      	cmp	r2, r3
 800d334:	d206      	bcs.n	800d344 <rxSessionWritePayload+0x68>
 800d336:	4b5b      	ldr	r3, [pc, #364]	; (800d4a4 <rxSessionWritePayload+0x1c8>)
 800d338:	4a56      	ldr	r2, [pc, #344]	; (800d494 <rxSessionWritePayload+0x1b8>)
 800d33a:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 800d33e:	4856      	ldr	r0, [pc, #344]	; (800d498 <rxSessionWritePayload+0x1bc>)
 800d340:	f000 ffac 	bl	800e29c <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	68da      	ldr	r2, [r3, #12]
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d906      	bls.n	800d35e <rxSessionWritePayload+0x82>
 800d350:	4b55      	ldr	r3, [pc, #340]	; (800d4a8 <rxSessionWritePayload+0x1cc>)
 800d352:	4a50      	ldr	r2, [pc, #320]	; (800d494 <rxSessionWritePayload+0x1b8>)
 800d354:	f240 21b1 	movw	r1, #689	; 0x2b1
 800d358:	484f      	ldr	r0, [pc, #316]	; (800d498 <rxSessionWritePayload+0x1bc>)
 800d35a:	f000 ff9f 	bl	800e29c <__assert_func>

    rxs->total_payload_size += payload_size;
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	689a      	ldr	r2, [r3, #8]
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	441a      	add	r2, r3
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d115      	bne.n	800d39e <rxSessionWritePayload+0xc2>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d012      	beq.n	800d39e <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d006      	beq.n	800d38e <rxSessionWritePayload+0xb2>
 800d380:	4b4a      	ldr	r3, [pc, #296]	; (800d4ac <rxSessionWritePayload+0x1d0>)
 800d382:	4a44      	ldr	r2, [pc, #272]	; (800d494 <rxSessionWritePayload+0x1b8>)
 800d384:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800d388:	4843      	ldr	r0, [pc, #268]	; (800d498 <rxSessionWritePayload+0x1bc>)
 800d38a:	f000 ff87 	bl	800e29c <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	689b      	ldr	r3, [r3, #8]
 800d392:	6879      	ldr	r1, [r7, #4]
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	4798      	blx	r3
 800d398:	4602      	mov	r2, r0
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d04e      	beq.n	800d448 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	68da      	ldr	r2, [r3, #12]
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d229      	bcs.n	800d410 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d206      	bcs.n	800d3d4 <rxSessionWritePayload+0xf8>
 800d3c6:	4b37      	ldr	r3, [pc, #220]	; (800d4a4 <rxSessionWritePayload+0x1c8>)
 800d3c8:	4a32      	ldr	r2, [pc, #200]	; (800d494 <rxSessionWritePayload+0x1b8>)
 800d3ca:	f240 21c3 	movw	r1, #707	; 0x2c3
 800d3ce:	4832      	ldr	r0, [pc, #200]	; (800d498 <rxSessionWritePayload+0x1bc>)
 800d3d0:	f000 ff64 	bl	800e29c <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	1ad3      	subs	r3, r2, r3
 800d3dc:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	68da      	ldr	r2, [r3, #12]
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d006      	beq.n	800d3fa <rxSessionWritePayload+0x11e>
 800d3ec:	4b30      	ldr	r3, [pc, #192]	; (800d4b0 <rxSessionWritePayload+0x1d4>)
 800d3ee:	4a29      	ldr	r2, [pc, #164]	; (800d494 <rxSessionWritePayload+0x1b8>)
 800d3f0:	f240 21c5 	movw	r1, #709	; 0x2c5
 800d3f4:	4828      	ldr	r0, [pc, #160]	; (800d498 <rxSessionWritePayload+0x1bc>)
 800d3f6:	f000 ff51 	bl	800e29c <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 800d3fa:	693a      	ldr	r2, [r7, #16]
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d306      	bcc.n	800d410 <rxSessionWritePayload+0x134>
 800d402:	4b2c      	ldr	r3, [pc, #176]	; (800d4b4 <rxSessionWritePayload+0x1d8>)
 800d404:	4a23      	ldr	r2, [pc, #140]	; (800d494 <rxSessionWritePayload+0x1b8>)
 800d406:	f240 21c6 	movw	r1, #710	; 0x2c6
 800d40a:	4823      	ldr	r0, [pc, #140]	; (800d498 <rxSessionWritePayload+0x1bc>)
 800d40c:	f000 ff46 	bl	800e29c <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	691a      	ldr	r2, [r3, #16]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	4413      	add	r3, r2
 800d41a:	693a      	ldr	r2, [r7, #16]
 800d41c:	6a39      	ldr	r1, [r7, #32]
 800d41e:	4618      	mov	r0, r3
 800d420:	f002 f8d5 	bl	800f5ce <memcpy>
        rxs->payload_size += bytes_to_copy;
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	68da      	ldr	r2, [r3, #12]
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	441a      	add	r2, r3
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	429a      	cmp	r2, r3
 800d438:	d219      	bcs.n	800d46e <rxSessionWritePayload+0x192>
 800d43a:	4b1a      	ldr	r3, [pc, #104]	; (800d4a4 <rxSessionWritePayload+0x1c8>)
 800d43c:	4a15      	ldr	r2, [pc, #84]	; (800d494 <rxSessionWritePayload+0x1b8>)
 800d43e:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800d442:	4815      	ldr	r0, [pc, #84]	; (800d498 <rxSessionWritePayload+0x1bc>)
 800d444:	f000 ff2a 	bl	800e29c <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d006      	beq.n	800d45e <rxSessionWritePayload+0x182>
 800d450:	4b16      	ldr	r3, [pc, #88]	; (800d4ac <rxSessionWritePayload+0x1d0>)
 800d452:	4a10      	ldr	r2, [pc, #64]	; (800d494 <rxSessionWritePayload+0x1b8>)
 800d454:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800d458:	480f      	ldr	r0, [pc, #60]	; (800d498 <rxSessionWritePayload+0x1bc>)
 800d45a:	f000 ff1f 	bl	800e29c <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d002      	beq.n	800d46a <rxSessionWritePayload+0x18e>
 800d464:	f06f 0302 	mvn.w	r3, #2
 800d468:	e000      	b.n	800d46c <rxSessionWritePayload+0x190>
 800d46a:	2300      	movs	r3, #0
 800d46c:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 800d46e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d472:	2b00      	cmp	r3, #0
 800d474:	dd06      	ble.n	800d484 <rxSessionWritePayload+0x1a8>
 800d476:	4b10      	ldr	r3, [pc, #64]	; (800d4b8 <rxSessionWritePayload+0x1dc>)
 800d478:	4a06      	ldr	r2, [pc, #24]	; (800d494 <rxSessionWritePayload+0x1b8>)
 800d47a:	f240 21d7 	movw	r1, #727	; 0x2d7
 800d47e:	4806      	ldr	r0, [pc, #24]	; (800d498 <rxSessionWritePayload+0x1bc>)
 800d480:	f000 ff0c 	bl	800e29c <__assert_func>
    return out;
 800d484:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3718      	adds	r7, #24
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	08012e3c 	.word	0x08012e3c
 800d494:	08013b78 	.word	0x08013b78
 800d498:	08012c78 	.word	0x08012c78
 800d49c:	08013198 	.word	0x08013198
 800d4a0:	08012d34 	.word	0x08012d34
 800d4a4:	080131ac 	.word	0x080131ac
 800d4a8:	080131c8 	.word	0x080131c8
 800d4ac:	080131f8 	.word	0x080131f8
 800d4b0:	08013210 	.word	0x08013210
 800d4b4:	08013240 	.word	0x08013240
 800d4b8:	08013260 	.word	0x08013260

0800d4bc <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d106      	bne.n	800d4da <rxSessionRestart+0x1e>
 800d4cc:	4b1a      	ldr	r3, [pc, #104]	; (800d538 <rxSessionRestart+0x7c>)
 800d4ce:	4a1b      	ldr	r2, [pc, #108]	; (800d53c <rxSessionRestart+0x80>)
 800d4d0:	f240 21dd 	movw	r1, #733	; 0x2dd
 800d4d4:	481a      	ldr	r0, [pc, #104]	; (800d540 <rxSessionRestart+0x84>)
 800d4d6:	f000 fee1 	bl	800e29c <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d106      	bne.n	800d4ee <rxSessionRestart+0x32>
 800d4e0:	4b18      	ldr	r3, [pc, #96]	; (800d544 <rxSessionRestart+0x88>)
 800d4e2:	4a16      	ldr	r2, [pc, #88]	; (800d53c <rxSessionRestart+0x80>)
 800d4e4:	f240 21de 	movw	r1, #734	; 0x2de
 800d4e8:	4815      	ldr	r0, [pc, #84]	; (800d540 <rxSessionRestart+0x84>)
 800d4ea:	f000 fed7 	bl	800e29c <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	683a      	ldr	r2, [r7, #0]
 800d4f4:	6912      	ldr	r2, [r2, #16]
 800d4f6:	4611      	mov	r1, r2
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	2200      	movs	r2, #0
 800d500:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	2200      	movs	r2, #0
 800d506:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2200      	movs	r2, #0
 800d50c:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d514:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	7d9b      	ldrb	r3, [r3, #22]
 800d51a:	3301      	adds	r3, #1
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	f003 031f 	and.w	r3, r3, #31
 800d522:	b2da      	uxtb	r2, r3
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	2201      	movs	r2, #1
 800d52c:	761a      	strb	r2, [r3, #24]
}
 800d52e:	bf00      	nop
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	08012e3c 	.word	0x08012e3c
 800d53c:	08013b4c 	.word	0x08013b4c
 800d540:	08012c78 	.word	0x08012c78
 800d544:	08013198 	.word	0x08013198

0800d548 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b088      	sub	sp, #32
 800d54c:	af02      	add	r7, sp, #8
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	607a      	str	r2, [r7, #4]
 800d554:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d106      	bne.n	800d56a <rxSessionAcceptFrame+0x22>
 800d55c:	4b81      	ldr	r3, [pc, #516]	; (800d764 <rxSessionAcceptFrame+0x21c>)
 800d55e:	4a82      	ldr	r2, [pc, #520]	; (800d768 <rxSessionAcceptFrame+0x220>)
 800d560:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d564:	4881      	ldr	r0, [pc, #516]	; (800d76c <rxSessionAcceptFrame+0x224>)
 800d566:	f000 fe99 	bl	800e29c <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d106      	bne.n	800d57e <rxSessionAcceptFrame+0x36>
 800d570:	4b7f      	ldr	r3, [pc, #508]	; (800d770 <rxSessionAcceptFrame+0x228>)
 800d572:	4a7d      	ldr	r2, [pc, #500]	; (800d768 <rxSessionAcceptFrame+0x220>)
 800d574:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800d578:	487c      	ldr	r0, [pc, #496]	; (800d76c <rxSessionAcceptFrame+0x224>)
 800d57a:	f000 fe8f 	bl	800e29c <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d106      	bne.n	800d592 <rxSessionAcceptFrame+0x4a>
 800d584:	4b7b      	ldr	r3, [pc, #492]	; (800d774 <rxSessionAcceptFrame+0x22c>)
 800d586:	4a78      	ldr	r2, [pc, #480]	; (800d768 <rxSessionAcceptFrame+0x220>)
 800d588:	f240 21f1 	movw	r1, #753	; 0x2f1
 800d58c:	4877      	ldr	r0, [pc, #476]	; (800d76c <rxSessionAcceptFrame+0x224>)
 800d58e:	f000 fe85 	bl	800e29c <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	699b      	ldr	r3, [r3, #24]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d106      	bne.n	800d5a8 <rxSessionAcceptFrame+0x60>
 800d59a:	4b77      	ldr	r3, [pc, #476]	; (800d778 <rxSessionAcceptFrame+0x230>)
 800d59c:	4a72      	ldr	r2, [pc, #456]	; (800d768 <rxSessionAcceptFrame+0x220>)
 800d59e:	f240 21f2 	movw	r1, #754	; 0x2f2
 800d5a2:	4872      	ldr	r0, [pc, #456]	; (800d76c <rxSessionAcceptFrame+0x224>)
 800d5a4:	f000 fe7a 	bl	800e29c <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	7b9b      	ldrb	r3, [r3, #14]
 800d5ac:	2b1f      	cmp	r3, #31
 800d5ae:	d906      	bls.n	800d5be <rxSessionAcceptFrame+0x76>
 800d5b0:	4b72      	ldr	r3, [pc, #456]	; (800d77c <rxSessionAcceptFrame+0x234>)
 800d5b2:	4a6d      	ldr	r2, [pc, #436]	; (800d768 <rxSessionAcceptFrame+0x220>)
 800d5b4:	f240 21f3 	movw	r1, #755	; 0x2f3
 800d5b8:	486c      	ldr	r0, [pc, #432]	; (800d76c <rxSessionAcceptFrame+0x224>)
 800d5ba:	f000 fe6f 	bl	800e29c <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800d5be:	6a3b      	ldr	r3, [r7, #32]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d106      	bne.n	800d5d2 <rxSessionAcceptFrame+0x8a>
 800d5c4:	4b6e      	ldr	r3, [pc, #440]	; (800d780 <rxSessionAcceptFrame+0x238>)
 800d5c6:	4a68      	ldr	r2, [pc, #416]	; (800d768 <rxSessionAcceptFrame+0x220>)
 800d5c8:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800d5cc:	4867      	ldr	r0, [pc, #412]	; (800d76c <rxSessionAcceptFrame+0x224>)
 800d5ce:	f000 fe65 	bl	800e29c <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	7bdb      	ldrb	r3, [r3, #15]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d005      	beq.n	800d5e6 <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	68b9      	ldr	r1, [r7, #8]
 800d5e2:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	7bdb      	ldrb	r3, [r3, #15]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d005      	beq.n	800d5fa <rxSessionAcceptFrame+0xb2>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	7c1b      	ldrb	r3, [r3, #16]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d001      	beq.n	800d5fa <rxSessionAcceptFrame+0xb2>
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e000      	b.n	800d5fc <rxSessionAcceptFrame+0xb4>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	75bb      	strb	r3, [r7, #22]
 800d5fe:	7dbb      	ldrb	r3, [r7, #22]
 800d600:	f003 0301 	and.w	r3, r3, #1
 800d604:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 800d606:	7dbb      	ldrb	r3, [r7, #22]
 800d608:	f083 0301 	eor.w	r3, r3, #1
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d00c      	beq.n	800d62c <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	8a98      	ldrh	r0, [r3, #20]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6959      	ldr	r1, [r3, #20]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	699b      	ldr	r3, [r3, #24]
 800d61e:	461a      	mov	r2, r3
 800d620:	f7fe fed6 	bl	800c3d0 <crcAdd>
 800d624:	4603      	mov	r3, r0
 800d626:	461a      	mov	r2, r3
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	695a      	ldr	r2, [r3, #20]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	699b      	ldr	r3, [r3, #24]
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	4613      	mov	r3, r2
 800d638:	683a      	ldr	r2, [r7, #0]
 800d63a:	68b9      	ldr	r1, [r7, #8]
 800d63c:	68f8      	ldr	r0, [r7, #12]
 800d63e:	f7ff fe4d 	bl	800d2dc <rxSessionWritePayload>
 800d642:	4603      	mov	r3, r0
 800d644:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 800d646:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	da10      	bge.n	800d670 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 800d64e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d652:	f113 0f03 	cmn.w	r3, #3
 800d656:	d006      	beq.n	800d666 <rxSessionAcceptFrame+0x11e>
 800d658:	4b4a      	ldr	r3, [pc, #296]	; (800d784 <rxSessionAcceptFrame+0x23c>)
 800d65a:	4a43      	ldr	r2, [pc, #268]	; (800d768 <rxSessionAcceptFrame+0x220>)
 800d65c:	f240 3106 	movw	r1, #774	; 0x306
 800d660:	4842      	ldr	r0, [pc, #264]	; (800d76c <rxSessionAcceptFrame+0x224>)
 800d662:	f000 fe1b 	bl	800e29c <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 800d666:	68b9      	ldr	r1, [r7, #8]
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f7ff ff27 	bl	800d4bc <rxSessionRestart>
 800d66e:	e072      	b.n	800d756 <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	7c1b      	ldrb	r3, [r3, #16]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d05f      	beq.n	800d738 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 800d678:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d006      	beq.n	800d68e <rxSessionAcceptFrame+0x146>
 800d680:	4b41      	ldr	r3, [pc, #260]	; (800d788 <rxSessionAcceptFrame+0x240>)
 800d682:	4a39      	ldr	r2, [pc, #228]	; (800d768 <rxSessionAcceptFrame+0x220>)
 800d684:	f240 310b 	movw	r1, #779	; 0x30b
 800d688:	4838      	ldr	r0, [pc, #224]	; (800d76c <rxSessionAcceptFrame+0x224>)
 800d68a:	f000 fe07 	bl	800e29c <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 800d68e:	7dbb      	ldrb	r3, [r7, #22]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d103      	bne.n	800d69c <rxSessionAcceptFrame+0x154>
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	8a9b      	ldrh	r3, [r3, #20]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d148      	bne.n	800d72e <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 800d69c:	2301      	movs	r3, #1
 800d69e:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800d6a0:	6a3b      	ldr	r3, [r7, #32]
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f7ff fd95 	bl	800d1d4 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b0:	6a39      	ldr	r1, [r7, #32]
 800d6b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	68da      	ldr	r2, [r3, #12]
 800d6ba:	6a3b      	ldr	r3, [r7, #32]
 800d6bc:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	691a      	ldr	r2, [r3, #16]
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	689a      	ldr	r2, [r3, #8]
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d206      	bcs.n	800d6e0 <rxSessionAcceptFrame+0x198>
 800d6d2:	4b2e      	ldr	r3, [pc, #184]	; (800d78c <rxSessionAcceptFrame+0x244>)
 800d6d4:	4a24      	ldr	r2, [pc, #144]	; (800d768 <rxSessionAcceptFrame+0x220>)
 800d6d6:	f240 3115 	movw	r1, #789	; 0x315
 800d6da:	4824      	ldr	r0, [pc, #144]	; (800d76c <rxSessionAcceptFrame+0x224>)
 800d6dc:	f000 fdde 	bl	800e29c <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	689a      	ldr	r2, [r3, #8]
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 800d6ec:	7dbb      	ldrb	r3, [r7, #22]
 800d6ee:	f083 0301 	eor.w	r3, r3, #1
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d017      	beq.n	800d728 <rxSessionAcceptFrame+0x1e0>
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d814      	bhi.n	800d728 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 800d6fe:	6a3b      	ldr	r3, [r7, #32]
 800d700:	691a      	ldr	r2, [r3, #16]
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	f1c3 0302 	rsb	r3, r3, #2
 800d708:	429a      	cmp	r2, r3
 800d70a:	d206      	bcs.n	800d71a <rxSessionAcceptFrame+0x1d2>
 800d70c:	4b20      	ldr	r3, [pc, #128]	; (800d790 <rxSessionAcceptFrame+0x248>)
 800d70e:	4a16      	ldr	r2, [pc, #88]	; (800d768 <rxSessionAcceptFrame+0x220>)
 800d710:	f240 3119 	movw	r1, #793	; 0x319
 800d714:	4815      	ldr	r0, [pc, #84]	; (800d76c <rxSessionAcceptFrame+0x224>)
 800d716:	f000 fdc1 	bl	800e29c <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 800d71a:	6a3b      	ldr	r3, [r7, #32]
 800d71c:	691a      	ldr	r2, [r3, #16]
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	4413      	add	r3, r2
 800d722:	1e9a      	subs	r2, r3, #2
 800d724:	6a3b      	ldr	r3, [r7, #32]
 800d726:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	2200      	movs	r2, #0
 800d72c:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 800d72e:	68b9      	ldr	r1, [r7, #8]
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f7ff fec3 	bl	800d4bc <rxSessionRestart>
 800d736:	e00e      	b.n	800d756 <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	7e1b      	ldrb	r3, [r3, #24]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	bf14      	ite	ne
 800d740:	2301      	movne	r3, #1
 800d742:	2300      	moveq	r3, #0
 800d744:	b2db      	uxtb	r3, r3
 800d746:	f083 0301 	eor.w	r3, r3, #1
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	f003 0301 	and.w	r3, r3, #1
 800d750:	b2da      	uxtb	r2, r3
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	761a      	strb	r2, [r3, #24]
    }
    return out;
 800d756:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3718      	adds	r7, #24
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	08012e3c 	.word	0x08012e3c
 800d768:	08013b60 	.word	0x08013b60
 800d76c:	08012c78 	.word	0x08012c78
 800d770:	08013198 	.word	0x08013198
 800d774:	080130d0 	.word	0x080130d0
 800d778:	0801312c 	.word	0x0801312c
 800d77c:	0801326c 	.word	0x0801326c
 800d780:	0801314c 	.word	0x0801314c
 800d784:	08013294 	.word	0x08013294
 800d788:	080132a0 	.word	0x080132a0
 800d78c:	080132ac 	.word	0x080132ac
 800d790:	080132dc 	.word	0x080132dc

0800d794 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_transport_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 800d794:	b5b0      	push	{r4, r5, r7, lr}
 800d796:	b088      	sub	sp, #32
 800d798:	af02      	add	r7, sp, #8
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
 800d7a0:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d106      	bne.n	800d7b6 <rxSessionUpdate+0x22>
 800d7a8:	4b6d      	ldr	r3, [pc, #436]	; (800d960 <rxSessionUpdate+0x1cc>)
 800d7aa:	4a6e      	ldr	r2, [pc, #440]	; (800d964 <rxSessionUpdate+0x1d0>)
 800d7ac:	f240 3137 	movw	r1, #823	; 0x337
 800d7b0:	486d      	ldr	r0, [pc, #436]	; (800d968 <rxSessionUpdate+0x1d4>)
 800d7b2:	f000 fd73 	bl	800e29c <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d106      	bne.n	800d7ca <rxSessionUpdate+0x36>
 800d7bc:	4b6b      	ldr	r3, [pc, #428]	; (800d96c <rxSessionUpdate+0x1d8>)
 800d7be:	4a69      	ldr	r2, [pc, #420]	; (800d964 <rxSessionUpdate+0x1d0>)
 800d7c0:	f44f 714e 	mov.w	r1, #824	; 0x338
 800d7c4:	4868      	ldr	r0, [pc, #416]	; (800d968 <rxSessionUpdate+0x1d4>)
 800d7c6:	f000 fd69 	bl	800e29c <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d106      	bne.n	800d7de <rxSessionUpdate+0x4a>
 800d7d0:	4b67      	ldr	r3, [pc, #412]	; (800d970 <rxSessionUpdate+0x1dc>)
 800d7d2:	4a64      	ldr	r2, [pc, #400]	; (800d964 <rxSessionUpdate+0x1d0>)
 800d7d4:	f240 3139 	movw	r1, #825	; 0x339
 800d7d8:	4863      	ldr	r0, [pc, #396]	; (800d968 <rxSessionUpdate+0x1d4>)
 800d7da:	f000 fd5f 	bl	800e29c <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800d7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d106      	bne.n	800d7f2 <rxSessionUpdate+0x5e>
 800d7e4:	4b63      	ldr	r3, [pc, #396]	; (800d974 <rxSessionUpdate+0x1e0>)
 800d7e6:	4a5f      	ldr	r2, [pc, #380]	; (800d964 <rxSessionUpdate+0x1d0>)
 800d7e8:	f240 313a 	movw	r1, #826	; 0x33a
 800d7ec:	485e      	ldr	r0, [pc, #376]	; (800d968 <rxSessionUpdate+0x1d4>)
 800d7ee:	f000 fd55 	bl	800e29c <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	7d9b      	ldrb	r3, [r3, #22]
 800d7f6:	2b1f      	cmp	r3, #31
 800d7f8:	d906      	bls.n	800d808 <rxSessionUpdate+0x74>
 800d7fa:	4b5f      	ldr	r3, [pc, #380]	; (800d978 <rxSessionUpdate+0x1e4>)
 800d7fc:	4a59      	ldr	r2, [pc, #356]	; (800d964 <rxSessionUpdate+0x1d0>)
 800d7fe:	f240 313b 	movw	r1, #827	; 0x33b
 800d802:	4859      	ldr	r0, [pc, #356]	; (800d968 <rxSessionUpdate+0x1d4>)
 800d804:	f000 fd4a 	bl	800e29c <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	7b9b      	ldrb	r3, [r3, #14]
 800d80c:	2b1f      	cmp	r3, #31
 800d80e:	d906      	bls.n	800d81e <rxSessionUpdate+0x8a>
 800d810:	4b5a      	ldr	r3, [pc, #360]	; (800d97c <rxSessionUpdate+0x1e8>)
 800d812:	4a54      	ldr	r2, [pc, #336]	; (800d964 <rxSessionUpdate+0x1d0>)
 800d814:	f44f 714f 	mov.w	r1, #828	; 0x33c
 800d818:	4853      	ldr	r0, [pc, #332]	; (800d968 <rxSessionUpdate+0x1d4>)
 800d81a:	f000 fd3f 	bl	800e29c <__assert_func>

    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d824:	68b9      	ldr	r1, [r7, #8]
 800d826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d82a:	4290      	cmp	r0, r2
 800d82c:	eb71 0303 	sbcs.w	r3, r1, r3
 800d830:	d20f      	bcs.n	800d852 <rxSessionUpdate+0xbe>
                               ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83e:	1a84      	subs	r4, r0, r2
 800d840:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800d844:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d848:	42a2      	cmp	r2, r4
 800d84a:	41ab      	sbcs	r3, r5
 800d84c:	d201      	bcs.n	800d852 <rxSessionUpdate+0xbe>
 800d84e:	2301      	movs	r3, #1
 800d850:	e000      	b.n	800d854 <rxSessionUpdate+0xc0>
 800d852:	2300      	movs	r3, #0
 800d854:	75bb      	strb	r3, [r7, #22]
 800d856:	7dbb      	ldrb	r3, [r7, #22]
 800d858:	f003 0301 	and.w	r3, r3, #1
 800d85c:	75bb      	strb	r3, [r7, #22]

    const bool not_previous_tid = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	7d9a      	ldrb	r2, [r3, #22]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	7b9b      	ldrb	r3, [r3, #14]
 800d866:	4619      	mov	r1, r3
 800d868:	4610      	mov	r0, r2
 800d86a:	f7ff fcf9 	bl	800d260 <rxComputeTransferIDDifference>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b01      	cmp	r3, #1
 800d872:	bf8c      	ite	hi
 800d874:	2301      	movhi	r3, #1
 800d876:	2300      	movls	r3, #0
 800d878:	757b      	strb	r3, [r7, #21]

    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800d87a:	7dbb      	ldrb	r3, [r7, #22]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10b      	bne.n	800d898 <rxSessionUpdate+0x104>
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	7ddb      	ldrb	r3, [r3, #23]
 800d884:	78fa      	ldrb	r2, [r7, #3]
 800d886:	429a      	cmp	r2, r3
 800d888:	d108      	bne.n	800d89c <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	7bdb      	ldrb	r3, [r3, #15]
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d004      	beq.n	800d89c <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 800d892:	7d7b      	ldrb	r3, [r7, #21]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d001      	beq.n	800d89c <rxSessionUpdate+0x108>
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800d898:	2301      	movs	r3, #1
 800d89a:	e000      	b.n	800d89e <rxSessionUpdate+0x10a>
 800d89c:	2300      	movs	r3, #0
 800d89e:	753b      	strb	r3, [r7, #20]
 800d8a0:	7d3b      	ldrb	r3, [r7, #20]
 800d8a2:	f003 0301 	and.w	r3, r3, #1
 800d8a6:	753b      	strb	r3, [r7, #20]

    if (need_restart)
 800d8a8:	7d3b      	ldrb	r3, [r7, #20]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d013      	beq.n	800d8d6 <rxSessionUpdate+0x142>
    {
        rxs->total_payload_size        = 0U;
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	609a      	str	r2, [r3, #8]
        rxs->payload_size              = 0U;
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc            = CRC_INITIAL;
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8c0:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id               = frame->transfer_id;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	7b9a      	ldrb	r2, [r3, #14]
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	759a      	strb	r2, [r3, #22]
        rxs->toggle                    = INITIAL_TOGGLE_STATE;
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	761a      	strb	r2, [r3, #24]
        rxs->redundant_transport_index = redundant_transport_index;
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	78fa      	ldrb	r2, [r7, #3]
 800d8d4:	75da      	strb	r2, [r3, #23]
    }

    int8_t out = 0;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	75fb      	strb	r3, [r7, #23]
    if (need_restart && (!frame->start_of_transfer))
 800d8da:	7d3b      	ldrb	r3, [r7, #20]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00b      	beq.n	800d8f8 <rxSessionUpdate+0x164>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	7bdb      	ldrb	r3, [r3, #15]
 800d8e4:	f083 0301 	eor.w	r3, r3, #1
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d004      	beq.n	800d8f8 <rxSessionUpdate+0x164>
    {
        rxSessionRestart(ins, rxs);  // SOT-miss, no point going further.
 800d8ee:	68b9      	ldr	r1, [r7, #8]
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f7ff fde3 	bl	800d4bc <rxSessionRestart>
 800d8f6:	e02c      	b.n	800d952 <rxSessionUpdate+0x1be>
    }
    else
    {
        const bool correct_transport = (rxs->redundant_transport_index == redundant_transport_index);
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	7ddb      	ldrb	r3, [r3, #23]
 800d8fc:	78fa      	ldrb	r2, [r7, #3]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	bf0c      	ite	eq
 800d902:	2301      	moveq	r3, #1
 800d904:	2300      	movne	r3, #0
 800d906:	74fb      	strb	r3, [r7, #19]
        const bool correct_toggle    = (frame->toggle == rxs->toggle);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	7c5a      	ldrb	r2, [r3, #17]
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	7e1b      	ldrb	r3, [r3, #24]
 800d910:	429a      	cmp	r2, r3
 800d912:	bf0c      	ite	eq
 800d914:	2301      	moveq	r3, #1
 800d916:	2300      	movne	r3, #0
 800d918:	74bb      	strb	r3, [r7, #18]
        const bool correct_tid       = (frame->transfer_id == rxs->transfer_id);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	7b9a      	ldrb	r2, [r3, #14]
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	7d9b      	ldrb	r3, [r3, #22]
 800d922:	429a      	cmp	r2, r3
 800d924:	bf0c      	ite	eq
 800d926:	2301      	moveq	r3, #1
 800d928:	2300      	movne	r3, #0
 800d92a:	747b      	strb	r3, [r7, #17]
        if (correct_transport && correct_toggle && correct_tid)
 800d92c:	7cfb      	ldrb	r3, [r7, #19]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00f      	beq.n	800d952 <rxSessionUpdate+0x1be>
 800d932:	7cbb      	ldrb	r3, [r7, #18]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00c      	beq.n	800d952 <rxSessionUpdate+0x1be>
 800d938:	7c7b      	ldrb	r3, [r7, #17]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d009      	beq.n	800d952 <rxSessionUpdate+0x1be>
        {
            out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 800d93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	68b9      	ldr	r1, [r7, #8]
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f7ff fdfd 	bl	800d548 <rxSessionAcceptFrame>
 800d94e:	4603      	mov	r3, r0
 800d950:	75fb      	strb	r3, [r7, #23]
        }
    }
    return out;
 800d952:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d956:	4618      	mov	r0, r3
 800d958:	3718      	adds	r7, #24
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bdb0      	pop	{r4, r5, r7, pc}
 800d95e:	bf00      	nop
 800d960:	08012e3c 	.word	0x08012e3c
 800d964:	08013b1c 	.word	0x08013b1c
 800d968:	08012c78 	.word	0x08012c78
 800d96c:	08013198 	.word	0x08013198
 800d970:	080130d0 	.word	0x080130d0
 800d974:	0801314c 	.word	0x0801314c
 800d978:	08013314 	.word	0x08013314
 800d97c:	0801326c 	.word	0x0801326c

0800d980 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_transport_index,
                                    CanardRxTransfer* const     out_transfer)
{
 800d980:	b5b0      	push	{r4, r5, r7, lr}
 800d982:	b08c      	sub	sp, #48	; 0x30
 800d984:	af04      	add	r7, sp, #16
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]
 800d98c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d106      	bne.n	800d9a2 <rxAcceptFrame+0x22>
 800d994:	4b85      	ldr	r3, [pc, #532]	; (800dbac <rxAcceptFrame+0x22c>)
 800d996:	4a86      	ldr	r2, [pc, #536]	; (800dbb0 <rxAcceptFrame+0x230>)
 800d998:	f44f 715a 	mov.w	r1, #872	; 0x368
 800d99c:	4885      	ldr	r0, [pc, #532]	; (800dbb4 <rxAcceptFrame+0x234>)
 800d99e:	f000 fc7d 	bl	800e29c <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d106      	bne.n	800d9b6 <rxAcceptFrame+0x36>
 800d9a8:	4b83      	ldr	r3, [pc, #524]	; (800dbb8 <rxAcceptFrame+0x238>)
 800d9aa:	4a81      	ldr	r2, [pc, #516]	; (800dbb0 <rxAcceptFrame+0x230>)
 800d9ac:	f240 3169 	movw	r1, #873	; 0x369
 800d9b0:	4880      	ldr	r0, [pc, #512]	; (800dbb4 <rxAcceptFrame+0x234>)
 800d9b2:	f000 fc73 	bl	800e29c <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	8b9a      	ldrh	r2, [r3, #28]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	895b      	ldrh	r3, [r3, #10]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d006      	beq.n	800d9d0 <rxAcceptFrame+0x50>
 800d9c2:	4b7e      	ldr	r3, [pc, #504]	; (800dbbc <rxAcceptFrame+0x23c>)
 800d9c4:	4a7a      	ldr	r2, [pc, #488]	; (800dbb0 <rxAcceptFrame+0x230>)
 800d9c6:	f240 316a 	movw	r1, #874	; 0x36a
 800d9ca:	487a      	ldr	r0, [pc, #488]	; (800dbb4 <rxAcceptFrame+0x234>)
 800d9cc:	f000 fc66 	bl	800e29c <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d106      	bne.n	800d9e4 <rxAcceptFrame+0x64>
 800d9d6:	4b7a      	ldr	r3, [pc, #488]	; (800dbc0 <rxAcceptFrame+0x240>)
 800d9d8:	4a75      	ldr	r2, [pc, #468]	; (800dbb0 <rxAcceptFrame+0x230>)
 800d9da:	f240 316b 	movw	r1, #875	; 0x36b
 800d9de:	4875      	ldr	r0, [pc, #468]	; (800dbb4 <rxAcceptFrame+0x234>)
 800d9e0:	f000 fc5c 	bl	800e29c <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	699b      	ldr	r3, [r3, #24]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d106      	bne.n	800d9fa <rxAcceptFrame+0x7a>
 800d9ec:	4b75      	ldr	r3, [pc, #468]	; (800dbc4 <rxAcceptFrame+0x244>)
 800d9ee:	4a70      	ldr	r2, [pc, #448]	; (800dbb0 <rxAcceptFrame+0x230>)
 800d9f0:	f44f 715b 	mov.w	r1, #876	; 0x36c
 800d9f4:	486f      	ldr	r0, [pc, #444]	; (800dbb4 <rxAcceptFrame+0x234>)
 800d9f6:	f000 fc51 	bl	800e29c <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	7b9b      	ldrb	r3, [r3, #14]
 800d9fe:	2b1f      	cmp	r3, #31
 800da00:	d906      	bls.n	800da10 <rxAcceptFrame+0x90>
 800da02:	4b71      	ldr	r3, [pc, #452]	; (800dbc8 <rxAcceptFrame+0x248>)
 800da04:	4a6a      	ldr	r2, [pc, #424]	; (800dbb0 <rxAcceptFrame+0x230>)
 800da06:	f240 316d 	movw	r1, #877	; 0x36d
 800da0a:	486a      	ldr	r0, [pc, #424]	; (800dbb4 <rxAcceptFrame+0x234>)
 800da0c:	f000 fc46 	bl	800e29c <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	7b5b      	ldrb	r3, [r3, #13]
 800da14:	2bff      	cmp	r3, #255	; 0xff
 800da16:	d00c      	beq.n	800da32 <rxAcceptFrame+0xb2>
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	791a      	ldrb	r2, [r3, #4]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	7b5b      	ldrb	r3, [r3, #13]
 800da20:	429a      	cmp	r2, r3
 800da22:	d006      	beq.n	800da32 <rxAcceptFrame+0xb2>
 800da24:	4b69      	ldr	r3, [pc, #420]	; (800dbcc <rxAcceptFrame+0x24c>)
 800da26:	4a62      	ldr	r2, [pc, #392]	; (800dbb0 <rxAcceptFrame+0x230>)
 800da28:	f240 316e 	movw	r1, #878	; 0x36e
 800da2c:	4861      	ldr	r0, [pc, #388]	; (800dbb4 <rxAcceptFrame+0x234>)
 800da2e:	f000 fc35 	bl	800e29c <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800da32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da34:	2b00      	cmp	r3, #0
 800da36:	d106      	bne.n	800da46 <rxAcceptFrame+0xc6>
 800da38:	4b65      	ldr	r3, [pc, #404]	; (800dbd0 <rxAcceptFrame+0x250>)
 800da3a:	4a5d      	ldr	r2, [pc, #372]	; (800dbb0 <rxAcceptFrame+0x230>)
 800da3c:	f240 316f 	movw	r1, #879	; 0x36f
 800da40:	485c      	ldr	r0, [pc, #368]	; (800dbb4 <rxAcceptFrame+0x234>)
 800da42:	f000 fc2b 	bl	800e29c <__assert_func>

    int8_t out = 0;
 800da46:	2300      	movs	r3, #0
 800da48:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	7b1b      	ldrb	r3, [r3, #12]
 800da4e:	b25b      	sxtb	r3, r3
 800da50:	2b00      	cmp	r3, #0
 800da52:	db6c      	blt.n	800db2e <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	7b1b      	ldrb	r3, [r3, #12]
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	3308      	adds	r3, #8
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	4413      	add	r3, r2
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d134      	bne.n	800dad0 <rxAcceptFrame+0x150>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	7bdb      	ldrb	r3, [r3, #15]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d030      	beq.n	800dad0 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	2120      	movs	r1, #32
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	4798      	blx	r3
 800da78:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	7b1b      	ldrb	r3, [r3, #12]
 800da7e:	68ba      	ldr	r2, [r7, #8]
 800da80:	3308      	adds	r3, #8
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	4413      	add	r3, r2
 800da86:	693a      	ldr	r2, [r7, #16]
 800da88:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d01d      	beq.n	800dacc <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec   = frame->timestamp_usec;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da96:	6939      	ldr	r1, [r7, #16]
 800da98:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size        = 0U;
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	2200      	movs	r2, #0
 800daa0:	609a      	str	r2, [r3, #8]
                rxs->payload_size              = 0U;
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	2200      	movs	r2, #0
 800daa6:	60da      	str	r2, [r3, #12]
                rxs->payload                   = NULL;
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	2200      	movs	r2, #0
 800daac:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc            = CRC_INITIAL;
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dab4:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id               = frame->transfer_id;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	7b9a      	ldrb	r2, [r3, #14]
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	759a      	strb	r2, [r3, #22]
                rxs->redundant_transport_index = redundant_transport_index;
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	78fa      	ldrb	r2, [r7, #3]
 800dac2:	75da      	strb	r2, [r3, #23]
                rxs->toggle                    = INITIAL_TOGGLE_STATE;
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	2201      	movs	r2, #1
 800dac8:	761a      	strb	r2, [r3, #24]
 800daca:	e001      	b.n	800dad0 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 800dacc:	23fd      	movs	r3, #253	; 0xfd
 800dace:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	7b1b      	ldrb	r3, [r3, #12]
 800dad4:	68ba      	ldr	r2, [r7, #8]
 800dad6:	3308      	adds	r3, #8
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	4413      	add	r3, r2
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d05e      	beq.n	800dba0 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 800dae2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d006      	beq.n	800daf8 <rxAcceptFrame+0x178>
 800daea:	4b3a      	ldr	r3, [pc, #232]	; (800dbd4 <rxAcceptFrame+0x254>)
 800daec:	4a30      	ldr	r2, [pc, #192]	; (800dbb0 <rxAcceptFrame+0x230>)
 800daee:	f240 318e 	movw	r1, #910	; 0x38e
 800daf2:	4830      	ldr	r0, [pc, #192]	; (800dbb4 <rxAcceptFrame+0x234>)
 800daf4:	f000 fbd2 	bl	800e29c <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7b1b      	ldrb	r3, [r3, #12]
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	3308      	adds	r3, #8
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4413      	add	r3, r2
 800db04:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800db0c:	68b9      	ldr	r1, [r7, #8]
 800db0e:	6989      	ldr	r1, [r1, #24]
 800db10:	78fd      	ldrb	r5, [r7, #3]
 800db12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db14:	9003      	str	r0, [sp, #12]
 800db16:	9102      	str	r1, [sp, #8]
 800db18:	e9cd 2300 	strd	r2, r3, [sp]
 800db1c:	462b      	mov	r3, r5
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	4621      	mov	r1, r4
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	f7ff fe36 	bl	800d794 <rxSessionUpdate>
 800db28:	4603      	mov	r3, r0
 800db2a:	77fb      	strb	r3, [r7, #31]
 800db2c:	e038      	b.n	800dba0 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	7b1b      	ldrb	r3, [r3, #12]
 800db32:	2bff      	cmp	r3, #255	; 0xff
 800db34:	d006      	beq.n	800db44 <rxAcceptFrame+0x1c4>
 800db36:	4b28      	ldr	r3, [pc, #160]	; (800dbd8 <rxAcceptFrame+0x258>)
 800db38:	4a1d      	ldr	r2, [pc, #116]	; (800dbb0 <rxAcceptFrame+0x230>)
 800db3a:	f240 319a 	movw	r1, #922	; 0x39a
 800db3e:	481d      	ldr	r0, [pc, #116]	; (800dbb4 <rxAcceptFrame+0x234>)
 800db40:	f000 fbac 	bl	800e29c <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	695a      	ldr	r2, [r3, #20]
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 800db4c:	4293      	cmp	r3, r2
 800db4e:	bf28      	it	cs
 800db50:	4613      	movcs	r3, r2
 800db52:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	689b      	ldr	r3, [r3, #8]
 800db58:	69b9      	ldr	r1, [r7, #24]
 800db5a:	68f8      	ldr	r0, [r7, #12]
 800db5c:	4798      	blx	r3
 800db5e:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d01a      	beq.n	800db9c <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800db66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db68:	4619      	mov	r1, r3
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f7ff fb32 	bl	800d1d4 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db78:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 800db7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7e:	69ba      	ldr	r2, [r7, #24]
 800db80:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 800db82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db84:	697a      	ldr	r2, [r7, #20]
 800db86:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	699b      	ldr	r3, [r3, #24]
 800db8c:	69ba      	ldr	r2, [r7, #24]
 800db8e:	4619      	mov	r1, r3
 800db90:	6978      	ldr	r0, [r7, #20]
 800db92:	f001 fd1c 	bl	800f5ce <memcpy>
            out = 1;
 800db96:	2301      	movs	r3, #1
 800db98:	77fb      	strb	r3, [r7, #31]
 800db9a:	e001      	b.n	800dba0 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 800db9c:	23fd      	movs	r3, #253	; 0xfd
 800db9e:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800dba0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3720      	adds	r7, #32
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bdb0      	pop	{r4, r5, r7, pc}
 800dbac:	08012e3c 	.word	0x08012e3c
 800dbb0:	08013b0c 	.word	0x08013b0c
 800dbb4:	08012c78 	.word	0x08012c78
 800dbb8:	0801333c 	.word	0x0801333c
 800dbbc:	08013358 	.word	0x08013358
 800dbc0:	080130d0 	.word	0x080130d0
 800dbc4:	0801312c 	.word	0x0801312c
 800dbc8:	0801326c 	.word	0x0801326c
 800dbcc:	08013380 	.word	0x08013380
 800dbd0:	0801314c 	.word	0x0801314c
 800dbd4:	080133d8 	.word	0x080133d8
 800dbd8:	080133e4 	.word	0x080133e4

0800dbdc <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b085      	sub	sp, #20
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	881b      	ldrh	r3, [r3, #0]
 800dbea:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) node)->port_id;
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	8b9b      	ldrh	r3, [r3, #28]
 800dbf0:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 800dbf2:	89fa      	ldrh	r2, [r7, #14]
 800dbf4:	89bb      	ldrh	r3, [r7, #12]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d00a      	beq.n	800dc10 <rxSubscriptionPredicateOnPortID+0x34>
 800dbfa:	89fa      	ldrh	r2, [r7, #14]
 800dbfc:	89bb      	ldrh	r3, [r7, #12]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	bf8c      	ite	hi
 800dc02:	2301      	movhi	r3, #1
 800dc04:	2300      	movls	r3, #0
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	461a      	mov	r2, r3
 800dc0a:	4b05      	ldr	r3, [pc, #20]	; (800dc20 <rxSubscriptionPredicateOnPortID+0x44>)
 800dc0c:	569b      	ldrsb	r3, [r3, r2]
 800dc0e:	e000      	b.n	800dc12 <rxSubscriptionPredicateOnPortID+0x36>
 800dc10:	2300      	movs	r3, #0
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3714      	adds	r7, #20
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop
 800dc20:	08013af8 	.word	0x08013af8

0800dc24 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	331c      	adds	r3, #28
 800dc32:	6839      	ldr	r1, [r7, #0]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7ff ffd1 	bl	800dbdc <rxSubscriptionPredicateOnPortID>
 800dc3a:	4603      	mov	r3, r0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 800dc44:	b5b0      	push	{r4, r5, r7, lr}
 800dc46:	b08c      	sub	sp, #48	; 0x30
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d106      	bne.n	800dc64 <canardInit+0x20>
 800dc56:	4b16      	ldr	r3, [pc, #88]	; (800dcb0 <canardInit+0x6c>)
 800dc58:	4a16      	ldr	r2, [pc, #88]	; (800dcb4 <canardInit+0x70>)
 800dc5a:	f240 31d6 	movw	r1, #982	; 0x3d6
 800dc5e:	4816      	ldr	r0, [pc, #88]	; (800dcb8 <canardInit+0x74>)
 800dc60:	f000 fb1c 	bl	800e29c <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d106      	bne.n	800dc78 <canardInit+0x34>
 800dc6a:	4b14      	ldr	r3, [pc, #80]	; (800dcbc <canardInit+0x78>)
 800dc6c:	4a11      	ldr	r2, [pc, #68]	; (800dcb4 <canardInit+0x70>)
 800dc6e:	f240 31d7 	movw	r1, #983	; 0x3d7
 800dc72:	4811      	ldr	r0, [pc, #68]	; (800dcb8 <canardInit+0x74>)
 800dc74:	f000 fb12 	bl	800e29c <__assert_func>
    const CanardInstance out = {
 800dc78:	2300      	movs	r3, #0
 800dc7a:	617b      	str	r3, [r7, #20]
 800dc7c:	23ff      	movs	r3, #255	; 0xff
 800dc7e:	763b      	strb	r3, [r7, #24]
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	61fb      	str	r3, [r7, #28]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	623b      	str	r3, [r7, #32]
 800dc88:	2300      	movs	r3, #0
 800dc8a:	627b      	str	r3, [r7, #36]	; 0x24
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc90:	2300      	movs	r3, #0
 800dc92:	62fb      	str	r3, [r7, #44]	; 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	461d      	mov	r5, r3
 800dc98:	f107 0414 	add.w	r4, r7, #20
 800dc9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dca0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800dca4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	3730      	adds	r7, #48	; 0x30
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bdb0      	pop	{r4, r5, r7, pc}
 800dcb0:	08013404 	.word	0x08013404
 800dcb4:	08013980 	.word	0x08013980
 800dcb8:	08012c78 	.word	0x08012c78
 800dcbc:	08013424 	.word	0x08013424

0800dcc0 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 800dcc0:	b4b0      	push	{r4, r5, r7}
 800dcc2:	b08b      	sub	sp, #44	; 0x2c
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	60b9      	str	r1, [r7, #8]
 800dcca:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	617b      	str	r3, [r7, #20]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	61bb      	str	r3, [r7, #24]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	61fb      	str	r3, [r7, #28]
 800dcd8:	2300      	movs	r3, #0
 800dcda:	623b      	str	r3, [r7, #32]
 800dcdc:	2300      	movs	r3, #0
 800dcde:	627b      	str	r3, [r7, #36]	; 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	461d      	mov	r5, r3
 800dce4:	f107 0414 	add.w	r4, r7, #20
 800dce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dcea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dcec:	6823      	ldr	r3, [r4, #0]
 800dcee:	602b      	str	r3, [r5, #0]
}
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	372c      	adds	r7, #44	; 0x2c
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bcb0      	pop	{r4, r5, r7}
 800dcf8:	4770      	bx	lr
	...

0800dcfc <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b08e      	sub	sp, #56	; 0x38
 800dd00:	af06      	add	r7, sp, #24
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800dd0a:	f06f 0301 	mvn.w	r3, #1
 800dd0e:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d062      	beq.n	800dddc <canardTxPush+0xe0>
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d05f      	beq.n	800dddc <canardTxPush+0xe0>
 800dd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d05c      	beq.n	800dddc <canardTxPush+0xe0>
 800dd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d102      	bne.n	800dd2e <canardTxPush+0x32>
 800dd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d156      	bne.n	800dddc <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fe fc02 	bl	800c53c <adjustPresentationLayerMTU>
 800dd38:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	791a      	ldrb	r2, [r3, #4]
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	4613      	mov	r3, r2
 800dd44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd4a:	f7fe fc27 	bl	800c59c <txMakeCANID>
 800dd4e:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	db40      	blt.n	800ddd8 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 800dd56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d81c      	bhi.n	800dd98 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800dd5e:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 800dd60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd62:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 800dd64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd66:	9103      	str	r1, [sp, #12]
 800dd68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd6a:	9102      	str	r1, [sp, #8]
 800dd6c:	9201      	str	r2, [sp, #4]
 800dd6e:	9300      	str	r3, [sp, #0]
 800dd70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd74:	68b9      	ldr	r1, [r7, #8]
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f7fe fdda 	bl	800c930 <txPushSingleFrame>
 800dd7c:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	db2b      	blt.n	800dddc <canardTxPush+0xe0>
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d028      	beq.n	800dddc <canardTxPush+0xe0>
 800dd8a:	4b1c      	ldr	r3, [pc, #112]	; (800ddfc <canardTxPush+0x100>)
 800dd8c:	4a1c      	ldr	r2, [pc, #112]	; (800de00 <canardTxPush+0x104>)
 800dd8e:	f240 4105 	movw	r1, #1029	; 0x405
 800dd92:	481c      	ldr	r0, [pc, #112]	; (800de04 <canardTxPush+0x108>)
 800dd94:	f000 fa82 	bl	800e29c <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 800dd98:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 800dd9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd9c:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 800dd9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dda0:	9105      	str	r1, [sp, #20]
 800dda2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dda4:	9104      	str	r1, [sp, #16]
 800dda6:	9203      	str	r2, [sp, #12]
 800dda8:	9302      	str	r3, [sp, #8]
 800ddaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddae:	e9cd 2300 	strd	r2, r3, [sp]
 800ddb2:	69ba      	ldr	r2, [r7, #24]
 800ddb4:	68b9      	ldr	r1, [r7, #8]
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f7fe ffd4 	bl	800cd64 <txPushMultiFrame>
 800ddbc:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	db0b      	blt.n	800dddc <canardTxPush+0xe0>
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	dc08      	bgt.n	800dddc <canardTxPush+0xe0>
 800ddca:	4b0f      	ldr	r3, [pc, #60]	; (800de08 <canardTxPush+0x10c>)
 800ddcc:	4a0c      	ldr	r2, [pc, #48]	; (800de00 <canardTxPush+0x104>)
 800ddce:	f240 4111 	movw	r1, #1041	; 0x411
 800ddd2:	480c      	ldr	r0, [pc, #48]	; (800de04 <canardTxPush+0x108>)
 800ddd4:	f000 fa62 	bl	800e29c <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d106      	bne.n	800ddf0 <canardTxPush+0xf4>
 800dde2:	4b0a      	ldr	r3, [pc, #40]	; (800de0c <canardTxPush+0x110>)
 800dde4:	4a06      	ldr	r2, [pc, #24]	; (800de00 <canardTxPush+0x104>)
 800dde6:	f240 4119 	movw	r1, #1049	; 0x419
 800ddea:	4806      	ldr	r0, [pc, #24]	; (800de04 <canardTxPush+0x108>)
 800ddec:	f000 fa56 	bl	800e29c <__assert_func>
    return out;
 800ddf0:	69fb      	ldr	r3, [r7, #28]
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3720      	adds	r7, #32
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	08012f74 	.word	0x08012f74
 800de00:	0801398c 	.word	0x0801398c
 800de04:	08012c78 	.word	0x08012c78
 800de08:	080130b8 	.word	0x080130b8
 800de0c:	08013440 	.word	0x08013440

0800de10 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 800de18:	2300      	movs	r3, #0
 800de1a:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d006      	beq.n	800de30 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) cavlFindExtremum(que->root, false);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	2100      	movs	r1, #0
 800de28:	4618      	mov	r0, r3
 800de2a:	f7fd ff1d 	bl	800bc68 <cavlFindExtremum>
 800de2e:	60f8      	str	r0, [r7, #12]
    }
    return out;
 800de30:	68fb      	ldr	r3, [r7, #12]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b084      	sub	sp, #16
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
 800de42:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 800de44:	2300      	movs	r3, #0
 800de46:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d010      	beq.n	800de70 <canardTxPop+0x36>
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d00d      	beq.n	800de70 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	330c      	adds	r3, #12
 800de5c:	683a      	ldr	r2, [r7, #0]
 800de5e:	4611      	mov	r1, r2
 800de60:	4618      	mov	r0, r3
 800de62:	f7fe f957 	bl	800c114 <cavlRemove>
        que->size--;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	1e5a      	subs	r2, r3, #1
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	609a      	str	r2, [r3, #8]
    }
    return out;
 800de70:	68fb      	ldr	r3, [r7, #12]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
	...

0800de7c <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_transport_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b090      	sub	sp, #64	; 0x40
 800de80:	af02      	add	r7, sp, #8
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800de88:	23fe      	movs	r3, #254	; 0xfe
 800de8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d068      	beq.n	800df66 <canardRxAccept+0xea>
 800de94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de96:	2b00      	cmp	r3, #0
 800de98:	d065      	beq.n	800df66 <canardRxAccept+0xea>
 800de9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d062      	beq.n	800df66 <canardRxAccept+0xea>
 800dea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dea8:	d25d      	bcs.n	800df66 <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800deaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deac:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d103      	bne.n	800deba <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800deb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d155      	bne.n	800df66 <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 800deba:	f107 0310 	add.w	r3, r7, #16
 800debe:	2220      	movs	r2, #32
 800dec0:	2100      	movs	r1, #0
 800dec2:	4618      	mov	r0, r3
 800dec4:	f001 fa9d 	bl	800f402 <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 800dec8:	f107 0310 	add.w	r3, r7, #16
 800decc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dece:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ded2:	f7ff f83b 	bl	800cf4c <rxTryParseFrame>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d041      	beq.n	800df60 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 800dedc:	7f7b      	ldrb	r3, [r7, #29]
 800dede:	2bff      	cmp	r3, #255	; 0xff
 800dee0:	d004      	beq.n	800deec <canardRxAccept+0x70>
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	791a      	ldrb	r2, [r3, #4]
 800dee6:	7f7b      	ldrb	r3, [r7, #29]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d135      	bne.n	800df58 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 800deec:	7e7b      	ldrb	r3, [r7, #25]
 800deee:	3304      	adds	r3, #4
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	68fa      	ldr	r2, [r7, #12]
 800def4:	18d0      	adds	r0, r2, r3
 800def6:	f107 0310 	add.w	r3, r7, #16
 800defa:	f103 010a 	add.w	r1, r3, #10
 800defe:	2300      	movs	r3, #0
 800df00:	4a21      	ldr	r2, [pc, #132]	; (800df88 <canardRxAccept+0x10c>)
 800df02:	f7fe f889 	bl	800c018 <cavlSearch>
 800df06:	6338      	str	r0, [r7, #48]	; 0x30
                                                       &model.port_id,
                                                       &rxSubscriptionPredicateOnPortID,
                                                       NULL);
                if (out_subscription != NULL)
 800df08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d002      	beq.n	800df14 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 800df0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df12:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 800df14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df16:	2b00      	cmp	r3, #0
 800df18:	d01a      	beq.n	800df50 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 800df1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1c:	8b9a      	ldrh	r2, [r3, #28]
 800df1e:	8b7b      	ldrh	r3, [r7, #26]
 800df20:	429a      	cmp	r2, r3
 800df22:	d006      	beq.n	800df32 <canardRxAccept+0xb6>
 800df24:	4b19      	ldr	r3, [pc, #100]	; (800df8c <canardRxAccept+0x110>)
 800df26:	4a1a      	ldr	r2, [pc, #104]	; (800df90 <canardRxAccept+0x114>)
 800df28:	f240 415a 	movw	r1, #1114	; 0x45a
 800df2c:	4819      	ldr	r0, [pc, #100]	; (800df94 <canardRxAccept+0x118>)
 800df2e:	f000 f9b5 	bl	800e29c <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_transport_index, out_transfer);
 800df32:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800df36:	f107 0210 	add.w	r2, r7, #16
 800df3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	460b      	mov	r3, r1
 800df40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f7ff fd1c 	bl	800d980 <rxAcceptFrame>
 800df48:	4603      	mov	r3, r0
 800df4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800df4e:	e00a      	b.n	800df66 <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 800df50:	2300      	movs	r3, #0
 800df52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800df56:	e006      	b.n	800df66 <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 800df58:	2300      	movs	r3, #0
 800df5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800df5e:	e002      	b.n	800df66 <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-UAVCAN/CAN input frame.
 800df60:	2300      	movs	r3, #0
 800df62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 800df66:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	dd06      	ble.n	800df7c <canardRxAccept+0x100>
 800df6e:	4b0a      	ldr	r3, [pc, #40]	; (800df98 <canardRxAccept+0x11c>)
 800df70:	4a07      	ldr	r2, [pc, #28]	; (800df90 <canardRxAccept+0x114>)
 800df72:	f240 416c 	movw	r1, #1132	; 0x46c
 800df76:	4807      	ldr	r0, [pc, #28]	; (800df94 <canardRxAccept+0x118>)
 800df78:	f000 f990 	bl	800e29c <__assert_func>
    return out;
 800df7c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800df80:	4618      	mov	r0, r3
 800df82:	3738      	adds	r7, #56	; 0x38
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	0800dbdd 	.word	0x0800dbdd
 800df8c:	0801344c 	.word	0x0801344c
 800df90:	08013ae8 	.word	0x08013ae8
 800df94:	08012c78 	.word	0x08012c78
 800df98:	0801346c 	.word	0x0801346c

0800df9c <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b088      	sub	sp, #32
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	607b      	str	r3, [r7, #4]
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	72fb      	strb	r3, [r7, #11]
 800dfaa:	4613      	mov	r3, r2
 800dfac:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800dfae:	23fe      	movs	r3, #254	; 0xfe
 800dfb0:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800dfb2:	7afb      	ldrb	r3, [r7, #11]
 800dfb4:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d04a      	beq.n	800e052 <canardRxSubscribe+0xb6>
 800dfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d047      	beq.n	800e052 <canardRxSubscribe+0xb6>
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d844      	bhi.n	800e052 <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 800dfc8:	893a      	ldrh	r2, [r7, #8]
 800dfca:	7afb      	ldrb	r3, [r7, #11]
 800dfcc:	4619      	mov	r1, r3
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f000 f850 	bl	800e074 <canardRxUnsubscribe>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 800dfd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	db38      	blt.n	800e052 <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 800dfe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dfe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dfe6:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 800dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 800dff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff2:	893a      	ldrh	r2, [r7, #8]
 800dff4:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800dff6:	2300      	movs	r3, #0
 800dff8:	61bb      	str	r3, [r7, #24]
 800dffa:	e009      	b.n	800e010 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 800dffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	3308      	adds	r3, #8
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	4413      	add	r3, r2
 800e006:	2200      	movs	r2, #0
 800e008:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	3301      	adds	r3, #1
 800e00e:	61bb      	str	r3, [r7, #24]
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	2b7f      	cmp	r3, #127	; 0x7f
 800e014:	d9f2      	bls.n	800dffc <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	3304      	adds	r3, #4
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	68fa      	ldr	r2, [r7, #12]
 800e01e:	18d0      	adds	r0, r2, r3
 800e020:	4b0f      	ldr	r3, [pc, #60]	; (800e060 <canardRxSubscribe+0xc4>)
 800e022:	4a10      	ldr	r2, [pc, #64]	; (800e064 <canardRxSubscribe+0xc8>)
 800e024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e026:	f7fd fff7 	bl	800c018 <cavlSearch>
 800e02a:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 800e02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02e:	693a      	ldr	r2, [r7, #16]
 800e030:	429a      	cmp	r2, r3
 800e032:	d006      	beq.n	800e042 <canardRxSubscribe+0xa6>
 800e034:	4b0c      	ldr	r3, [pc, #48]	; (800e068 <canardRxSubscribe+0xcc>)
 800e036:	4a0d      	ldr	r2, [pc, #52]	; (800e06c <canardRxSubscribe+0xd0>)
 800e038:	f44f 6192 	mov.w	r1, #1168	; 0x490
 800e03c:	480c      	ldr	r0, [pc, #48]	; (800e070 <canardRxSubscribe+0xd4>)
 800e03e:	f000 f92d 	bl	800e29c <__assert_func>
            out = (out > 0) ? 0 : 1;
 800e042:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e046:	2b00      	cmp	r3, #0
 800e048:	bfd4      	ite	le
 800e04a:	2301      	movle	r3, #1
 800e04c:	2300      	movgt	r3, #0
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800e052:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e056:	4618      	mov	r0, r3
 800e058:	3720      	adds	r7, #32
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	0800c379 	.word	0x0800c379
 800e064:	0800dc25 	.word	0x0800dc25
 800e068:	08013478 	.word	0x08013478
 800e06c:	08013bb0 	.word	0x08013bb0
 800e070:	08012c78 	.word	0x08012c78

0800e074 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b088      	sub	sp, #32
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	460b      	mov	r3, r1
 800e07e:	70fb      	strb	r3, [r7, #3]
 800e080:	4613      	mov	r3, r2
 800e082:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800e084:	23fe      	movs	r3, #254	; 0xfe
 800e086:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800e088:	78fb      	ldrb	r3, [r7, #3]
 800e08a:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d05f      	beq.n	800e152 <canardRxUnsubscribe+0xde>
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	2b02      	cmp	r3, #2
 800e096:	d85c      	bhi.n	800e152 <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 800e098:	883b      	ldrh	r3, [r7, #0]
 800e09a:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	18d0      	adds	r0, r2, r3
 800e0a6:	f107 010e 	add.w	r1, r7, #14
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	4a2c      	ldr	r2, [pc, #176]	; (800e160 <canardRxUnsubscribe+0xec>)
 800e0ae:	f7fd ffb3 	bl	800c018 <cavlSearch>
 800e0b2:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d049      	beq.n	800e14e <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	3304      	adds	r3, #4
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	693a      	ldr	r2, [r7, #16]
 800e0c6:	4611      	mov	r1, r2
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7fe f823 	bl	800c114 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	8b9b      	ldrh	r3, [r3, #28]
 800e0d2:	883a      	ldrh	r2, [r7, #0]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d006      	beq.n	800e0e6 <canardRxUnsubscribe+0x72>
 800e0d8:	4b22      	ldr	r3, [pc, #136]	; (800e164 <canardRxUnsubscribe+0xf0>)
 800e0da:	4a23      	ldr	r2, [pc, #140]	; (800e168 <canardRxUnsubscribe+0xf4>)
 800e0dc:	f240 41a5 	movw	r1, #1189	; 0x4a5
 800e0e0:	4822      	ldr	r0, [pc, #136]	; (800e16c <canardRxUnsubscribe+0xf8>)
 800e0e2:	f000 f8db 	bl	800e29c <__assert_func>
            out = 1;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	61bb      	str	r3, [r7, #24]
 800e0ee:	e02a      	b.n	800e146 <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	68da      	ldr	r2, [r3, #12]
 800e0f4:	6939      	ldr	r1, [r7, #16]
 800e0f6:	69bb      	ldr	r3, [r7, #24]
 800e0f8:	3308      	adds	r3, #8
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	440b      	add	r3, r1
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d007      	beq.n	800e114 <canardRxUnsubscribe+0xa0>
 800e104:	6939      	ldr	r1, [r7, #16]
 800e106:	69bb      	ldr	r3, [r7, #24]
 800e108:	3308      	adds	r3, #8
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	440b      	add	r3, r1
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	e000      	b.n	800e116 <canardRxUnsubscribe+0xa2>
 800e114:	2300      	movs	r3, #0
 800e116:	4619      	mov	r1, r3
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	68da      	ldr	r2, [r3, #12]
 800e120:	6939      	ldr	r1, [r7, #16]
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	3308      	adds	r3, #8
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	440b      	add	r3, r1
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	4619      	mov	r1, r3
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	4790      	blx	r2
                sub->sessions[i] = NULL;
 800e132:	693a      	ldr	r2, [r7, #16]
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	3308      	adds	r3, #8
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	4413      	add	r3, r2
 800e13c:	2200      	movs	r2, #0
 800e13e:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	3301      	adds	r3, #1
 800e144:	61bb      	str	r3, [r7, #24]
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	2b7f      	cmp	r3, #127	; 0x7f
 800e14a:	d9d1      	bls.n	800e0f0 <canardRxUnsubscribe+0x7c>
 800e14c:	e001      	b.n	800e152 <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 800e14e:	2300      	movs	r3, #0
 800e150:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800e152:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e156:	4618      	mov	r0, r3
 800e158:	3720      	adds	r7, #32
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	bf00      	nop
 800e160:	0800dbdd 	.word	0x0800dbdd
 800e164:	08013498 	.word	0x08013498
 800e168:	08013bc4 	.word	0x08013bc4
 800e16c:	08012c78 	.word	0x08012c78

0800e170 <canardMakeFilterForSubject>:

CanardFilter canardMakeFilterForSubject(const CanardPortID subject_id)
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	460b      	mov	r3, r1
 800e17a:	807b      	strh	r3, [r7, #2]
    CanardFilter out = {0};
 800e17c:	f107 0308 	add.w	r3, r7, #8
 800e180:	2200      	movs	r2, #0
 800e182:	601a      	str	r2, [r3, #0]
 800e184:	605a      	str	r2, [r3, #4]

    out.extended_can_id = ((uint32_t) subject_id) << OFFSET_SUBJECT_ID;
 800e186:	887b      	ldrh	r3, [r7, #2]
 800e188:	021b      	lsls	r3, r3, #8
 800e18a:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_07 | (CANARD_SUBJECT_ID_MAX << OFFSET_SUBJECT_ID);
 800e18c:	4b07      	ldr	r3, [pc, #28]	; (800e1ac <canardMakeFilterForSubject+0x3c>)
 800e18e:	60fb      	str	r3, [r7, #12]

    return out;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	461a      	mov	r2, r3
 800e194:	f107 0308 	add.w	r3, r7, #8
 800e198:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e19c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	3714      	adds	r7, #20
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr
 800e1ac:	021fff80 	.word	0x021fff80

0800e1b0 <canardMakeFilterForServices>:

    return out;
}

CanardFilter canardMakeFilterForServices(const CanardNodeID local_node_id)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b085      	sub	sp, #20
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	70fb      	strb	r3, [r7, #3]
    CanardFilter out = {0};
 800e1bc:	f107 0308 	add.w	r3, r7, #8
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	601a      	str	r2, [r3, #0]
 800e1c4:	605a      	str	r2, [r3, #4]

    out.extended_can_id = FLAG_SERVICE_NOT_MESSAGE | (((uint32_t) local_node_id) << OFFSET_DST_NODE_ID);
 800e1c6:	78fb      	ldrb	r3, [r7, #3]
 800e1c8:	01db      	lsls	r3, r3, #7
 800e1ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e1ce:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_23 | (CANARD_NODE_ID_MAX << OFFSET_DST_NODE_ID);
 800e1d0:	4b07      	ldr	r3, [pc, #28]	; (800e1f0 <canardMakeFilterForServices+0x40>)
 800e1d2:	60fb      	str	r3, [r7, #12]

    return out;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	f107 0308 	add.w	r3, r7, #8
 800e1dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e1e0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	3714      	adds	r7, #20
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr
 800e1f0:	02803f80 	.word	0x02803f80

0800e1f4 <canardConsolidateFilters>:

CanardFilter canardConsolidateFilters(const CanardFilter* a, const CanardFilter* b)
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b087      	sub	sp, #28
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	607a      	str	r2, [r7, #4]
    CanardFilter out = {0};
 800e200:	f107 0310 	add.w	r3, r7, #16
 800e204:	2200      	movs	r2, #0
 800e206:	601a      	str	r2, [r3, #0]
 800e208:	605a      	str	r2, [r3, #4]

    out.extended_mask   = a->extended_mask & b->extended_mask & ~(a->extended_can_id ^ b->extended_can_id);
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	401a      	ands	r2, r3
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	6819      	ldr	r1, [r3, #0]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	404b      	eors	r3, r1
 800e21e:	43db      	mvns	r3, r3
 800e220:	4013      	ands	r3, r2
 800e222:	617b      	str	r3, [r7, #20]
    out.extended_can_id = a->extended_can_id & out.extended_mask;
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	4013      	ands	r3, r2
 800e22c:	613b      	str	r3, [r7, #16]

    return out;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	461a      	mov	r2, r3
 800e232:	f107 0310 	add.w	r3, r7, #16
 800e236:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e23a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	371c      	adds	r7, #28
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr

0800e24a <_ZdlPvj>:
 800e24a:	f000 b814 	b.w	800e276 <_ZdlPv>

0800e24e <_Znwj>:
 800e24e:	2801      	cmp	r0, #1
 800e250:	bf38      	it	cc
 800e252:	2001      	movcc	r0, #1
 800e254:	b510      	push	{r4, lr}
 800e256:	4604      	mov	r4, r0
 800e258:	4620      	mov	r0, r4
 800e25a:	f000 f84f 	bl	800e2fc <malloc>
 800e25e:	b100      	cbz	r0, 800e262 <_Znwj+0x14>
 800e260:	bd10      	pop	{r4, pc}
 800e262:	f000 f80b 	bl	800e27c <_ZSt15get_new_handlerv>
 800e266:	b908      	cbnz	r0, 800e26c <_Znwj+0x1e>
 800e268:	f000 f810 	bl	800e28c <abort>
 800e26c:	4780      	blx	r0
 800e26e:	e7f3      	b.n	800e258 <_Znwj+0xa>

0800e270 <_ZSt25__throw_bad_function_callv>:
 800e270:	b508      	push	{r3, lr}
 800e272:	f000 f80b 	bl	800e28c <abort>

0800e276 <_ZdlPv>:
 800e276:	f000 b849 	b.w	800e30c <free>
	...

0800e27c <_ZSt15get_new_handlerv>:
 800e27c:	4b02      	ldr	r3, [pc, #8]	; (800e288 <_ZSt15get_new_handlerv+0xc>)
 800e27e:	6818      	ldr	r0, [r3, #0]
 800e280:	f3bf 8f5b 	dmb	ish
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop
 800e288:	200005b8 	.word	0x200005b8

0800e28c <abort>:
 800e28c:	b508      	push	{r3, lr}
 800e28e:	2006      	movs	r0, #6
 800e290:	f001 f8fa 	bl	800f488 <raise>
 800e294:	2001      	movs	r0, #1
 800e296:	f7f7 fe37 	bl	8005f08 <_exit>
	...

0800e29c <__assert_func>:
 800e29c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e29e:	4614      	mov	r4, r2
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	4b09      	ldr	r3, [pc, #36]	; (800e2c8 <__assert_func+0x2c>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4605      	mov	r5, r0
 800e2a8:	68d8      	ldr	r0, [r3, #12]
 800e2aa:	b14c      	cbz	r4, 800e2c0 <__assert_func+0x24>
 800e2ac:	4b07      	ldr	r3, [pc, #28]	; (800e2cc <__assert_func+0x30>)
 800e2ae:	9100      	str	r1, [sp, #0]
 800e2b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2b4:	4906      	ldr	r1, [pc, #24]	; (800e2d0 <__assert_func+0x34>)
 800e2b6:	462b      	mov	r3, r5
 800e2b8:	f000 fff6 	bl	800f2a8 <fiprintf>
 800e2bc:	f7ff ffe6 	bl	800e28c <abort>
 800e2c0:	4b04      	ldr	r3, [pc, #16]	; (800e2d4 <__assert_func+0x38>)
 800e2c2:	461c      	mov	r4, r3
 800e2c4:	e7f3      	b.n	800e2ae <__assert_func+0x12>
 800e2c6:	bf00      	nop
 800e2c8:	20000064 	.word	0x20000064
 800e2cc:	08013bd8 	.word	0x08013bd8
 800e2d0:	08013be5 	.word	0x08013be5
 800e2d4:	08013c13 	.word	0x08013c13

0800e2d8 <exit>:
 800e2d8:	b508      	push	{r3, lr}
 800e2da:	4b06      	ldr	r3, [pc, #24]	; (800e2f4 <exit+0x1c>)
 800e2dc:	4604      	mov	r4, r0
 800e2de:	b113      	cbz	r3, 800e2e6 <exit+0xe>
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	f3af 8000 	nop.w
 800e2e6:	4b04      	ldr	r3, [pc, #16]	; (800e2f8 <exit+0x20>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	b103      	cbz	r3, 800e2ee <exit+0x16>
 800e2ec:	4798      	blx	r3
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f7f7 fe0a 	bl	8005f08 <_exit>
 800e2f4:	00000000 	.word	0x00000000
 800e2f8:	200006fc 	.word	0x200006fc

0800e2fc <malloc>:
 800e2fc:	4b02      	ldr	r3, [pc, #8]	; (800e308 <malloc+0xc>)
 800e2fe:	4601      	mov	r1, r0
 800e300:	6818      	ldr	r0, [r3, #0]
 800e302:	f000 b82b 	b.w	800e35c <_malloc_r>
 800e306:	bf00      	nop
 800e308:	20000064 	.word	0x20000064

0800e30c <free>:
 800e30c:	4b02      	ldr	r3, [pc, #8]	; (800e318 <free+0xc>)
 800e30e:	4601      	mov	r1, r0
 800e310:	6818      	ldr	r0, [r3, #0]
 800e312:	f001 bfeb 	b.w	80102ec <_free_r>
 800e316:	bf00      	nop
 800e318:	20000064 	.word	0x20000064

0800e31c <sbrk_aligned>:
 800e31c:	b570      	push	{r4, r5, r6, lr}
 800e31e:	4e0e      	ldr	r6, [pc, #56]	; (800e358 <sbrk_aligned+0x3c>)
 800e320:	460c      	mov	r4, r1
 800e322:	6831      	ldr	r1, [r6, #0]
 800e324:	4605      	mov	r5, r0
 800e326:	b911      	cbnz	r1, 800e32e <sbrk_aligned+0x12>
 800e328:	f001 f902 	bl	800f530 <_sbrk_r>
 800e32c:	6030      	str	r0, [r6, #0]
 800e32e:	4621      	mov	r1, r4
 800e330:	4628      	mov	r0, r5
 800e332:	f001 f8fd 	bl	800f530 <_sbrk_r>
 800e336:	1c43      	adds	r3, r0, #1
 800e338:	d00a      	beq.n	800e350 <sbrk_aligned+0x34>
 800e33a:	1cc4      	adds	r4, r0, #3
 800e33c:	f024 0403 	bic.w	r4, r4, #3
 800e340:	42a0      	cmp	r0, r4
 800e342:	d007      	beq.n	800e354 <sbrk_aligned+0x38>
 800e344:	1a21      	subs	r1, r4, r0
 800e346:	4628      	mov	r0, r5
 800e348:	f001 f8f2 	bl	800f530 <_sbrk_r>
 800e34c:	3001      	adds	r0, #1
 800e34e:	d101      	bne.n	800e354 <sbrk_aligned+0x38>
 800e350:	f04f 34ff 	mov.w	r4, #4294967295
 800e354:	4620      	mov	r0, r4
 800e356:	bd70      	pop	{r4, r5, r6, pc}
 800e358:	200005c0 	.word	0x200005c0

0800e35c <_malloc_r>:
 800e35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e360:	1ccd      	adds	r5, r1, #3
 800e362:	f025 0503 	bic.w	r5, r5, #3
 800e366:	3508      	adds	r5, #8
 800e368:	2d0c      	cmp	r5, #12
 800e36a:	bf38      	it	cc
 800e36c:	250c      	movcc	r5, #12
 800e36e:	2d00      	cmp	r5, #0
 800e370:	4607      	mov	r7, r0
 800e372:	db01      	blt.n	800e378 <_malloc_r+0x1c>
 800e374:	42a9      	cmp	r1, r5
 800e376:	d905      	bls.n	800e384 <_malloc_r+0x28>
 800e378:	230c      	movs	r3, #12
 800e37a:	603b      	str	r3, [r7, #0]
 800e37c:	2600      	movs	r6, #0
 800e37e:	4630      	mov	r0, r6
 800e380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e384:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e458 <_malloc_r+0xfc>
 800e388:	f000 f868 	bl	800e45c <__malloc_lock>
 800e38c:	f8d8 3000 	ldr.w	r3, [r8]
 800e390:	461c      	mov	r4, r3
 800e392:	bb5c      	cbnz	r4, 800e3ec <_malloc_r+0x90>
 800e394:	4629      	mov	r1, r5
 800e396:	4638      	mov	r0, r7
 800e398:	f7ff ffc0 	bl	800e31c <sbrk_aligned>
 800e39c:	1c43      	adds	r3, r0, #1
 800e39e:	4604      	mov	r4, r0
 800e3a0:	d155      	bne.n	800e44e <_malloc_r+0xf2>
 800e3a2:	f8d8 4000 	ldr.w	r4, [r8]
 800e3a6:	4626      	mov	r6, r4
 800e3a8:	2e00      	cmp	r6, #0
 800e3aa:	d145      	bne.n	800e438 <_malloc_r+0xdc>
 800e3ac:	2c00      	cmp	r4, #0
 800e3ae:	d048      	beq.n	800e442 <_malloc_r+0xe6>
 800e3b0:	6823      	ldr	r3, [r4, #0]
 800e3b2:	4631      	mov	r1, r6
 800e3b4:	4638      	mov	r0, r7
 800e3b6:	eb04 0903 	add.w	r9, r4, r3
 800e3ba:	f001 f8b9 	bl	800f530 <_sbrk_r>
 800e3be:	4581      	cmp	r9, r0
 800e3c0:	d13f      	bne.n	800e442 <_malloc_r+0xe6>
 800e3c2:	6821      	ldr	r1, [r4, #0]
 800e3c4:	1a6d      	subs	r5, r5, r1
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	f7ff ffa7 	bl	800e31c <sbrk_aligned>
 800e3ce:	3001      	adds	r0, #1
 800e3d0:	d037      	beq.n	800e442 <_malloc_r+0xe6>
 800e3d2:	6823      	ldr	r3, [r4, #0]
 800e3d4:	442b      	add	r3, r5
 800e3d6:	6023      	str	r3, [r4, #0]
 800e3d8:	f8d8 3000 	ldr.w	r3, [r8]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d038      	beq.n	800e452 <_malloc_r+0xf6>
 800e3e0:	685a      	ldr	r2, [r3, #4]
 800e3e2:	42a2      	cmp	r2, r4
 800e3e4:	d12b      	bne.n	800e43e <_malloc_r+0xe2>
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	605a      	str	r2, [r3, #4]
 800e3ea:	e00f      	b.n	800e40c <_malloc_r+0xb0>
 800e3ec:	6822      	ldr	r2, [r4, #0]
 800e3ee:	1b52      	subs	r2, r2, r5
 800e3f0:	d41f      	bmi.n	800e432 <_malloc_r+0xd6>
 800e3f2:	2a0b      	cmp	r2, #11
 800e3f4:	d917      	bls.n	800e426 <_malloc_r+0xca>
 800e3f6:	1961      	adds	r1, r4, r5
 800e3f8:	42a3      	cmp	r3, r4
 800e3fa:	6025      	str	r5, [r4, #0]
 800e3fc:	bf18      	it	ne
 800e3fe:	6059      	strne	r1, [r3, #4]
 800e400:	6863      	ldr	r3, [r4, #4]
 800e402:	bf08      	it	eq
 800e404:	f8c8 1000 	streq.w	r1, [r8]
 800e408:	5162      	str	r2, [r4, r5]
 800e40a:	604b      	str	r3, [r1, #4]
 800e40c:	4638      	mov	r0, r7
 800e40e:	f104 060b 	add.w	r6, r4, #11
 800e412:	f000 f829 	bl	800e468 <__malloc_unlock>
 800e416:	f026 0607 	bic.w	r6, r6, #7
 800e41a:	1d23      	adds	r3, r4, #4
 800e41c:	1af2      	subs	r2, r6, r3
 800e41e:	d0ae      	beq.n	800e37e <_malloc_r+0x22>
 800e420:	1b9b      	subs	r3, r3, r6
 800e422:	50a3      	str	r3, [r4, r2]
 800e424:	e7ab      	b.n	800e37e <_malloc_r+0x22>
 800e426:	42a3      	cmp	r3, r4
 800e428:	6862      	ldr	r2, [r4, #4]
 800e42a:	d1dd      	bne.n	800e3e8 <_malloc_r+0x8c>
 800e42c:	f8c8 2000 	str.w	r2, [r8]
 800e430:	e7ec      	b.n	800e40c <_malloc_r+0xb0>
 800e432:	4623      	mov	r3, r4
 800e434:	6864      	ldr	r4, [r4, #4]
 800e436:	e7ac      	b.n	800e392 <_malloc_r+0x36>
 800e438:	4634      	mov	r4, r6
 800e43a:	6876      	ldr	r6, [r6, #4]
 800e43c:	e7b4      	b.n	800e3a8 <_malloc_r+0x4c>
 800e43e:	4613      	mov	r3, r2
 800e440:	e7cc      	b.n	800e3dc <_malloc_r+0x80>
 800e442:	230c      	movs	r3, #12
 800e444:	603b      	str	r3, [r7, #0]
 800e446:	4638      	mov	r0, r7
 800e448:	f000 f80e 	bl	800e468 <__malloc_unlock>
 800e44c:	e797      	b.n	800e37e <_malloc_r+0x22>
 800e44e:	6025      	str	r5, [r4, #0]
 800e450:	e7dc      	b.n	800e40c <_malloc_r+0xb0>
 800e452:	605b      	str	r3, [r3, #4]
 800e454:	deff      	udf	#255	; 0xff
 800e456:	bf00      	nop
 800e458:	200005bc 	.word	0x200005bc

0800e45c <__malloc_lock>:
 800e45c:	4801      	ldr	r0, [pc, #4]	; (800e464 <__malloc_lock+0x8>)
 800e45e:	f001 b8b4 	b.w	800f5ca <__retarget_lock_acquire_recursive>
 800e462:	bf00      	nop
 800e464:	20000704 	.word	0x20000704

0800e468 <__malloc_unlock>:
 800e468:	4801      	ldr	r0, [pc, #4]	; (800e470 <__malloc_unlock+0x8>)
 800e46a:	f001 b8af 	b.w	800f5cc <__retarget_lock_release_recursive>
 800e46e:	bf00      	nop
 800e470:	20000704 	.word	0x20000704

0800e474 <__cvt>:
 800e474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e478:	ec55 4b10 	vmov	r4, r5, d0
 800e47c:	2d00      	cmp	r5, #0
 800e47e:	460e      	mov	r6, r1
 800e480:	4619      	mov	r1, r3
 800e482:	462b      	mov	r3, r5
 800e484:	bfbb      	ittet	lt
 800e486:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e48a:	461d      	movlt	r5, r3
 800e48c:	2300      	movge	r3, #0
 800e48e:	232d      	movlt	r3, #45	; 0x2d
 800e490:	700b      	strb	r3, [r1, #0]
 800e492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e494:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e498:	4691      	mov	r9, r2
 800e49a:	f023 0820 	bic.w	r8, r3, #32
 800e49e:	bfbc      	itt	lt
 800e4a0:	4622      	movlt	r2, r4
 800e4a2:	4614      	movlt	r4, r2
 800e4a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e4a8:	d005      	beq.n	800e4b6 <__cvt+0x42>
 800e4aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e4ae:	d100      	bne.n	800e4b2 <__cvt+0x3e>
 800e4b0:	3601      	adds	r6, #1
 800e4b2:	2102      	movs	r1, #2
 800e4b4:	e000      	b.n	800e4b8 <__cvt+0x44>
 800e4b6:	2103      	movs	r1, #3
 800e4b8:	ab03      	add	r3, sp, #12
 800e4ba:	9301      	str	r3, [sp, #4]
 800e4bc:	ab02      	add	r3, sp, #8
 800e4be:	9300      	str	r3, [sp, #0]
 800e4c0:	ec45 4b10 	vmov	d0, r4, r5
 800e4c4:	4653      	mov	r3, sl
 800e4c6:	4632      	mov	r2, r6
 800e4c8:	f001 f91e 	bl	800f708 <_dtoa_r>
 800e4cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e4d0:	4607      	mov	r7, r0
 800e4d2:	d102      	bne.n	800e4da <__cvt+0x66>
 800e4d4:	f019 0f01 	tst.w	r9, #1
 800e4d8:	d022      	beq.n	800e520 <__cvt+0xac>
 800e4da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e4de:	eb07 0906 	add.w	r9, r7, r6
 800e4e2:	d110      	bne.n	800e506 <__cvt+0x92>
 800e4e4:	783b      	ldrb	r3, [r7, #0]
 800e4e6:	2b30      	cmp	r3, #48	; 0x30
 800e4e8:	d10a      	bne.n	800e500 <__cvt+0x8c>
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	4629      	mov	r1, r5
 800e4f2:	f7f2 fb11 	bl	8000b18 <__aeabi_dcmpeq>
 800e4f6:	b918      	cbnz	r0, 800e500 <__cvt+0x8c>
 800e4f8:	f1c6 0601 	rsb	r6, r6, #1
 800e4fc:	f8ca 6000 	str.w	r6, [sl]
 800e500:	f8da 3000 	ldr.w	r3, [sl]
 800e504:	4499      	add	r9, r3
 800e506:	2200      	movs	r2, #0
 800e508:	2300      	movs	r3, #0
 800e50a:	4620      	mov	r0, r4
 800e50c:	4629      	mov	r1, r5
 800e50e:	f7f2 fb03 	bl	8000b18 <__aeabi_dcmpeq>
 800e512:	b108      	cbz	r0, 800e518 <__cvt+0xa4>
 800e514:	f8cd 900c 	str.w	r9, [sp, #12]
 800e518:	2230      	movs	r2, #48	; 0x30
 800e51a:	9b03      	ldr	r3, [sp, #12]
 800e51c:	454b      	cmp	r3, r9
 800e51e:	d307      	bcc.n	800e530 <__cvt+0xbc>
 800e520:	9b03      	ldr	r3, [sp, #12]
 800e522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e524:	1bdb      	subs	r3, r3, r7
 800e526:	4638      	mov	r0, r7
 800e528:	6013      	str	r3, [r2, #0]
 800e52a:	b004      	add	sp, #16
 800e52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e530:	1c59      	adds	r1, r3, #1
 800e532:	9103      	str	r1, [sp, #12]
 800e534:	701a      	strb	r2, [r3, #0]
 800e536:	e7f0      	b.n	800e51a <__cvt+0xa6>

0800e538 <__exponent>:
 800e538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e53a:	4603      	mov	r3, r0
 800e53c:	2900      	cmp	r1, #0
 800e53e:	bfb8      	it	lt
 800e540:	4249      	neglt	r1, r1
 800e542:	f803 2b02 	strb.w	r2, [r3], #2
 800e546:	bfb4      	ite	lt
 800e548:	222d      	movlt	r2, #45	; 0x2d
 800e54a:	222b      	movge	r2, #43	; 0x2b
 800e54c:	2909      	cmp	r1, #9
 800e54e:	7042      	strb	r2, [r0, #1]
 800e550:	dd2a      	ble.n	800e5a8 <__exponent+0x70>
 800e552:	f10d 0207 	add.w	r2, sp, #7
 800e556:	4617      	mov	r7, r2
 800e558:	260a      	movs	r6, #10
 800e55a:	4694      	mov	ip, r2
 800e55c:	fb91 f5f6 	sdiv	r5, r1, r6
 800e560:	fb06 1415 	mls	r4, r6, r5, r1
 800e564:	3430      	adds	r4, #48	; 0x30
 800e566:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e56a:	460c      	mov	r4, r1
 800e56c:	2c63      	cmp	r4, #99	; 0x63
 800e56e:	f102 32ff 	add.w	r2, r2, #4294967295
 800e572:	4629      	mov	r1, r5
 800e574:	dcf1      	bgt.n	800e55a <__exponent+0x22>
 800e576:	3130      	adds	r1, #48	; 0x30
 800e578:	f1ac 0402 	sub.w	r4, ip, #2
 800e57c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e580:	1c41      	adds	r1, r0, #1
 800e582:	4622      	mov	r2, r4
 800e584:	42ba      	cmp	r2, r7
 800e586:	d30a      	bcc.n	800e59e <__exponent+0x66>
 800e588:	f10d 0209 	add.w	r2, sp, #9
 800e58c:	eba2 020c 	sub.w	r2, r2, ip
 800e590:	42bc      	cmp	r4, r7
 800e592:	bf88      	it	hi
 800e594:	2200      	movhi	r2, #0
 800e596:	4413      	add	r3, r2
 800e598:	1a18      	subs	r0, r3, r0
 800e59a:	b003      	add	sp, #12
 800e59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e59e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e5a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e5a6:	e7ed      	b.n	800e584 <__exponent+0x4c>
 800e5a8:	2330      	movs	r3, #48	; 0x30
 800e5aa:	3130      	adds	r1, #48	; 0x30
 800e5ac:	7083      	strb	r3, [r0, #2]
 800e5ae:	70c1      	strb	r1, [r0, #3]
 800e5b0:	1d03      	adds	r3, r0, #4
 800e5b2:	e7f1      	b.n	800e598 <__exponent+0x60>

0800e5b4 <_printf_float>:
 800e5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b8:	ed2d 8b02 	vpush	{d8}
 800e5bc:	b08d      	sub	sp, #52	; 0x34
 800e5be:	460c      	mov	r4, r1
 800e5c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e5c4:	4616      	mov	r6, r2
 800e5c6:	461f      	mov	r7, r3
 800e5c8:	4605      	mov	r5, r0
 800e5ca:	f000 ff65 	bl	800f498 <_localeconv_r>
 800e5ce:	f8d0 a000 	ldr.w	sl, [r0]
 800e5d2:	4650      	mov	r0, sl
 800e5d4:	f7f1 fe74 	bl	80002c0 <strlen>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	930a      	str	r3, [sp, #40]	; 0x28
 800e5dc:	6823      	ldr	r3, [r4, #0]
 800e5de:	9305      	str	r3, [sp, #20]
 800e5e0:	f8d8 3000 	ldr.w	r3, [r8]
 800e5e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e5e8:	3307      	adds	r3, #7
 800e5ea:	f023 0307 	bic.w	r3, r3, #7
 800e5ee:	f103 0208 	add.w	r2, r3, #8
 800e5f2:	f8c8 2000 	str.w	r2, [r8]
 800e5f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e5fe:	9307      	str	r3, [sp, #28]
 800e600:	f8cd 8018 	str.w	r8, [sp, #24]
 800e604:	ee08 0a10 	vmov	s16, r0
 800e608:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e60c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e610:	4b9e      	ldr	r3, [pc, #632]	; (800e88c <_printf_float+0x2d8>)
 800e612:	f04f 32ff 	mov.w	r2, #4294967295
 800e616:	f7f2 fab1 	bl	8000b7c <__aeabi_dcmpun>
 800e61a:	bb88      	cbnz	r0, 800e680 <_printf_float+0xcc>
 800e61c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e620:	4b9a      	ldr	r3, [pc, #616]	; (800e88c <_printf_float+0x2d8>)
 800e622:	f04f 32ff 	mov.w	r2, #4294967295
 800e626:	f7f2 fa8b 	bl	8000b40 <__aeabi_dcmple>
 800e62a:	bb48      	cbnz	r0, 800e680 <_printf_float+0xcc>
 800e62c:	2200      	movs	r2, #0
 800e62e:	2300      	movs	r3, #0
 800e630:	4640      	mov	r0, r8
 800e632:	4649      	mov	r1, r9
 800e634:	f7f2 fa7a 	bl	8000b2c <__aeabi_dcmplt>
 800e638:	b110      	cbz	r0, 800e640 <_printf_float+0x8c>
 800e63a:	232d      	movs	r3, #45	; 0x2d
 800e63c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e640:	4a93      	ldr	r2, [pc, #588]	; (800e890 <_printf_float+0x2dc>)
 800e642:	4b94      	ldr	r3, [pc, #592]	; (800e894 <_printf_float+0x2e0>)
 800e644:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e648:	bf94      	ite	ls
 800e64a:	4690      	movls	r8, r2
 800e64c:	4698      	movhi	r8, r3
 800e64e:	2303      	movs	r3, #3
 800e650:	6123      	str	r3, [r4, #16]
 800e652:	9b05      	ldr	r3, [sp, #20]
 800e654:	f023 0304 	bic.w	r3, r3, #4
 800e658:	6023      	str	r3, [r4, #0]
 800e65a:	f04f 0900 	mov.w	r9, #0
 800e65e:	9700      	str	r7, [sp, #0]
 800e660:	4633      	mov	r3, r6
 800e662:	aa0b      	add	r2, sp, #44	; 0x2c
 800e664:	4621      	mov	r1, r4
 800e666:	4628      	mov	r0, r5
 800e668:	f000 f9da 	bl	800ea20 <_printf_common>
 800e66c:	3001      	adds	r0, #1
 800e66e:	f040 8090 	bne.w	800e792 <_printf_float+0x1de>
 800e672:	f04f 30ff 	mov.w	r0, #4294967295
 800e676:	b00d      	add	sp, #52	; 0x34
 800e678:	ecbd 8b02 	vpop	{d8}
 800e67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e680:	4642      	mov	r2, r8
 800e682:	464b      	mov	r3, r9
 800e684:	4640      	mov	r0, r8
 800e686:	4649      	mov	r1, r9
 800e688:	f7f2 fa78 	bl	8000b7c <__aeabi_dcmpun>
 800e68c:	b140      	cbz	r0, 800e6a0 <_printf_float+0xec>
 800e68e:	464b      	mov	r3, r9
 800e690:	2b00      	cmp	r3, #0
 800e692:	bfbc      	itt	lt
 800e694:	232d      	movlt	r3, #45	; 0x2d
 800e696:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e69a:	4a7f      	ldr	r2, [pc, #508]	; (800e898 <_printf_float+0x2e4>)
 800e69c:	4b7f      	ldr	r3, [pc, #508]	; (800e89c <_printf_float+0x2e8>)
 800e69e:	e7d1      	b.n	800e644 <_printf_float+0x90>
 800e6a0:	6863      	ldr	r3, [r4, #4]
 800e6a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e6a6:	9206      	str	r2, [sp, #24]
 800e6a8:	1c5a      	adds	r2, r3, #1
 800e6aa:	d13f      	bne.n	800e72c <_printf_float+0x178>
 800e6ac:	2306      	movs	r3, #6
 800e6ae:	6063      	str	r3, [r4, #4]
 800e6b0:	9b05      	ldr	r3, [sp, #20]
 800e6b2:	6861      	ldr	r1, [r4, #4]
 800e6b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	9303      	str	r3, [sp, #12]
 800e6bc:	ab0a      	add	r3, sp, #40	; 0x28
 800e6be:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e6c2:	ab09      	add	r3, sp, #36	; 0x24
 800e6c4:	ec49 8b10 	vmov	d0, r8, r9
 800e6c8:	9300      	str	r3, [sp, #0]
 800e6ca:	6022      	str	r2, [r4, #0]
 800e6cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	f7ff fecf 	bl	800e474 <__cvt>
 800e6d6:	9b06      	ldr	r3, [sp, #24]
 800e6d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6da:	2b47      	cmp	r3, #71	; 0x47
 800e6dc:	4680      	mov	r8, r0
 800e6de:	d108      	bne.n	800e6f2 <_printf_float+0x13e>
 800e6e0:	1cc8      	adds	r0, r1, #3
 800e6e2:	db02      	blt.n	800e6ea <_printf_float+0x136>
 800e6e4:	6863      	ldr	r3, [r4, #4]
 800e6e6:	4299      	cmp	r1, r3
 800e6e8:	dd41      	ble.n	800e76e <_printf_float+0x1ba>
 800e6ea:	f1ab 0302 	sub.w	r3, fp, #2
 800e6ee:	fa5f fb83 	uxtb.w	fp, r3
 800e6f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e6f6:	d820      	bhi.n	800e73a <_printf_float+0x186>
 800e6f8:	3901      	subs	r1, #1
 800e6fa:	465a      	mov	r2, fp
 800e6fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e700:	9109      	str	r1, [sp, #36]	; 0x24
 800e702:	f7ff ff19 	bl	800e538 <__exponent>
 800e706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e708:	1813      	adds	r3, r2, r0
 800e70a:	2a01      	cmp	r2, #1
 800e70c:	4681      	mov	r9, r0
 800e70e:	6123      	str	r3, [r4, #16]
 800e710:	dc02      	bgt.n	800e718 <_printf_float+0x164>
 800e712:	6822      	ldr	r2, [r4, #0]
 800e714:	07d2      	lsls	r2, r2, #31
 800e716:	d501      	bpl.n	800e71c <_printf_float+0x168>
 800e718:	3301      	adds	r3, #1
 800e71a:	6123      	str	r3, [r4, #16]
 800e71c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e720:	2b00      	cmp	r3, #0
 800e722:	d09c      	beq.n	800e65e <_printf_float+0xaa>
 800e724:	232d      	movs	r3, #45	; 0x2d
 800e726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e72a:	e798      	b.n	800e65e <_printf_float+0xaa>
 800e72c:	9a06      	ldr	r2, [sp, #24]
 800e72e:	2a47      	cmp	r2, #71	; 0x47
 800e730:	d1be      	bne.n	800e6b0 <_printf_float+0xfc>
 800e732:	2b00      	cmp	r3, #0
 800e734:	d1bc      	bne.n	800e6b0 <_printf_float+0xfc>
 800e736:	2301      	movs	r3, #1
 800e738:	e7b9      	b.n	800e6ae <_printf_float+0xfa>
 800e73a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e73e:	d118      	bne.n	800e772 <_printf_float+0x1be>
 800e740:	2900      	cmp	r1, #0
 800e742:	6863      	ldr	r3, [r4, #4]
 800e744:	dd0b      	ble.n	800e75e <_printf_float+0x1aa>
 800e746:	6121      	str	r1, [r4, #16]
 800e748:	b913      	cbnz	r3, 800e750 <_printf_float+0x19c>
 800e74a:	6822      	ldr	r2, [r4, #0]
 800e74c:	07d0      	lsls	r0, r2, #31
 800e74e:	d502      	bpl.n	800e756 <_printf_float+0x1a2>
 800e750:	3301      	adds	r3, #1
 800e752:	440b      	add	r3, r1
 800e754:	6123      	str	r3, [r4, #16]
 800e756:	65a1      	str	r1, [r4, #88]	; 0x58
 800e758:	f04f 0900 	mov.w	r9, #0
 800e75c:	e7de      	b.n	800e71c <_printf_float+0x168>
 800e75e:	b913      	cbnz	r3, 800e766 <_printf_float+0x1b2>
 800e760:	6822      	ldr	r2, [r4, #0]
 800e762:	07d2      	lsls	r2, r2, #31
 800e764:	d501      	bpl.n	800e76a <_printf_float+0x1b6>
 800e766:	3302      	adds	r3, #2
 800e768:	e7f4      	b.n	800e754 <_printf_float+0x1a0>
 800e76a:	2301      	movs	r3, #1
 800e76c:	e7f2      	b.n	800e754 <_printf_float+0x1a0>
 800e76e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e774:	4299      	cmp	r1, r3
 800e776:	db05      	blt.n	800e784 <_printf_float+0x1d0>
 800e778:	6823      	ldr	r3, [r4, #0]
 800e77a:	6121      	str	r1, [r4, #16]
 800e77c:	07d8      	lsls	r0, r3, #31
 800e77e:	d5ea      	bpl.n	800e756 <_printf_float+0x1a2>
 800e780:	1c4b      	adds	r3, r1, #1
 800e782:	e7e7      	b.n	800e754 <_printf_float+0x1a0>
 800e784:	2900      	cmp	r1, #0
 800e786:	bfd4      	ite	le
 800e788:	f1c1 0202 	rsble	r2, r1, #2
 800e78c:	2201      	movgt	r2, #1
 800e78e:	4413      	add	r3, r2
 800e790:	e7e0      	b.n	800e754 <_printf_float+0x1a0>
 800e792:	6823      	ldr	r3, [r4, #0]
 800e794:	055a      	lsls	r2, r3, #21
 800e796:	d407      	bmi.n	800e7a8 <_printf_float+0x1f4>
 800e798:	6923      	ldr	r3, [r4, #16]
 800e79a:	4642      	mov	r2, r8
 800e79c:	4631      	mov	r1, r6
 800e79e:	4628      	mov	r0, r5
 800e7a0:	47b8      	blx	r7
 800e7a2:	3001      	adds	r0, #1
 800e7a4:	d12c      	bne.n	800e800 <_printf_float+0x24c>
 800e7a6:	e764      	b.n	800e672 <_printf_float+0xbe>
 800e7a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e7ac:	f240 80e0 	bls.w	800e970 <_printf_float+0x3bc>
 800e7b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	f7f2 f9ae 	bl	8000b18 <__aeabi_dcmpeq>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	d034      	beq.n	800e82a <_printf_float+0x276>
 800e7c0:	4a37      	ldr	r2, [pc, #220]	; (800e8a0 <_printf_float+0x2ec>)
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	4631      	mov	r1, r6
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	47b8      	blx	r7
 800e7ca:	3001      	adds	r0, #1
 800e7cc:	f43f af51 	beq.w	800e672 <_printf_float+0xbe>
 800e7d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	db02      	blt.n	800e7de <_printf_float+0x22a>
 800e7d8:	6823      	ldr	r3, [r4, #0]
 800e7da:	07d8      	lsls	r0, r3, #31
 800e7dc:	d510      	bpl.n	800e800 <_printf_float+0x24c>
 800e7de:	ee18 3a10 	vmov	r3, s16
 800e7e2:	4652      	mov	r2, sl
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	47b8      	blx	r7
 800e7ea:	3001      	adds	r0, #1
 800e7ec:	f43f af41 	beq.w	800e672 <_printf_float+0xbe>
 800e7f0:	f04f 0800 	mov.w	r8, #0
 800e7f4:	f104 091a 	add.w	r9, r4, #26
 800e7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7fa:	3b01      	subs	r3, #1
 800e7fc:	4543      	cmp	r3, r8
 800e7fe:	dc09      	bgt.n	800e814 <_printf_float+0x260>
 800e800:	6823      	ldr	r3, [r4, #0]
 800e802:	079b      	lsls	r3, r3, #30
 800e804:	f100 8107 	bmi.w	800ea16 <_printf_float+0x462>
 800e808:	68e0      	ldr	r0, [r4, #12]
 800e80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e80c:	4298      	cmp	r0, r3
 800e80e:	bfb8      	it	lt
 800e810:	4618      	movlt	r0, r3
 800e812:	e730      	b.n	800e676 <_printf_float+0xc2>
 800e814:	2301      	movs	r3, #1
 800e816:	464a      	mov	r2, r9
 800e818:	4631      	mov	r1, r6
 800e81a:	4628      	mov	r0, r5
 800e81c:	47b8      	blx	r7
 800e81e:	3001      	adds	r0, #1
 800e820:	f43f af27 	beq.w	800e672 <_printf_float+0xbe>
 800e824:	f108 0801 	add.w	r8, r8, #1
 800e828:	e7e6      	b.n	800e7f8 <_printf_float+0x244>
 800e82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	dc39      	bgt.n	800e8a4 <_printf_float+0x2f0>
 800e830:	4a1b      	ldr	r2, [pc, #108]	; (800e8a0 <_printf_float+0x2ec>)
 800e832:	2301      	movs	r3, #1
 800e834:	4631      	mov	r1, r6
 800e836:	4628      	mov	r0, r5
 800e838:	47b8      	blx	r7
 800e83a:	3001      	adds	r0, #1
 800e83c:	f43f af19 	beq.w	800e672 <_printf_float+0xbe>
 800e840:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e844:	4313      	orrs	r3, r2
 800e846:	d102      	bne.n	800e84e <_printf_float+0x29a>
 800e848:	6823      	ldr	r3, [r4, #0]
 800e84a:	07d9      	lsls	r1, r3, #31
 800e84c:	d5d8      	bpl.n	800e800 <_printf_float+0x24c>
 800e84e:	ee18 3a10 	vmov	r3, s16
 800e852:	4652      	mov	r2, sl
 800e854:	4631      	mov	r1, r6
 800e856:	4628      	mov	r0, r5
 800e858:	47b8      	blx	r7
 800e85a:	3001      	adds	r0, #1
 800e85c:	f43f af09 	beq.w	800e672 <_printf_float+0xbe>
 800e860:	f04f 0900 	mov.w	r9, #0
 800e864:	f104 0a1a 	add.w	sl, r4, #26
 800e868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e86a:	425b      	negs	r3, r3
 800e86c:	454b      	cmp	r3, r9
 800e86e:	dc01      	bgt.n	800e874 <_printf_float+0x2c0>
 800e870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e872:	e792      	b.n	800e79a <_printf_float+0x1e6>
 800e874:	2301      	movs	r3, #1
 800e876:	4652      	mov	r2, sl
 800e878:	4631      	mov	r1, r6
 800e87a:	4628      	mov	r0, r5
 800e87c:	47b8      	blx	r7
 800e87e:	3001      	adds	r0, #1
 800e880:	f43f aef7 	beq.w	800e672 <_printf_float+0xbe>
 800e884:	f109 0901 	add.w	r9, r9, #1
 800e888:	e7ee      	b.n	800e868 <_printf_float+0x2b4>
 800e88a:	bf00      	nop
 800e88c:	7fefffff 	.word	0x7fefffff
 800e890:	08013c14 	.word	0x08013c14
 800e894:	08013c18 	.word	0x08013c18
 800e898:	08013c1c 	.word	0x08013c1c
 800e89c:	08013c20 	.word	0x08013c20
 800e8a0:	08013c24 	.word	0x08013c24
 800e8a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	bfa8      	it	ge
 800e8ac:	461a      	movge	r2, r3
 800e8ae:	2a00      	cmp	r2, #0
 800e8b0:	4691      	mov	r9, r2
 800e8b2:	dc37      	bgt.n	800e924 <_printf_float+0x370>
 800e8b4:	f04f 0b00 	mov.w	fp, #0
 800e8b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e8bc:	f104 021a 	add.w	r2, r4, #26
 800e8c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e8c2:	9305      	str	r3, [sp, #20]
 800e8c4:	eba3 0309 	sub.w	r3, r3, r9
 800e8c8:	455b      	cmp	r3, fp
 800e8ca:	dc33      	bgt.n	800e934 <_printf_float+0x380>
 800e8cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	db3b      	blt.n	800e94c <_printf_float+0x398>
 800e8d4:	6823      	ldr	r3, [r4, #0]
 800e8d6:	07da      	lsls	r2, r3, #31
 800e8d8:	d438      	bmi.n	800e94c <_printf_float+0x398>
 800e8da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e8de:	eba2 0903 	sub.w	r9, r2, r3
 800e8e2:	9b05      	ldr	r3, [sp, #20]
 800e8e4:	1ad2      	subs	r2, r2, r3
 800e8e6:	4591      	cmp	r9, r2
 800e8e8:	bfa8      	it	ge
 800e8ea:	4691      	movge	r9, r2
 800e8ec:	f1b9 0f00 	cmp.w	r9, #0
 800e8f0:	dc35      	bgt.n	800e95e <_printf_float+0x3aa>
 800e8f2:	f04f 0800 	mov.w	r8, #0
 800e8f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e8fa:	f104 0a1a 	add.w	sl, r4, #26
 800e8fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e902:	1a9b      	subs	r3, r3, r2
 800e904:	eba3 0309 	sub.w	r3, r3, r9
 800e908:	4543      	cmp	r3, r8
 800e90a:	f77f af79 	ble.w	800e800 <_printf_float+0x24c>
 800e90e:	2301      	movs	r3, #1
 800e910:	4652      	mov	r2, sl
 800e912:	4631      	mov	r1, r6
 800e914:	4628      	mov	r0, r5
 800e916:	47b8      	blx	r7
 800e918:	3001      	adds	r0, #1
 800e91a:	f43f aeaa 	beq.w	800e672 <_printf_float+0xbe>
 800e91e:	f108 0801 	add.w	r8, r8, #1
 800e922:	e7ec      	b.n	800e8fe <_printf_float+0x34a>
 800e924:	4613      	mov	r3, r2
 800e926:	4631      	mov	r1, r6
 800e928:	4642      	mov	r2, r8
 800e92a:	4628      	mov	r0, r5
 800e92c:	47b8      	blx	r7
 800e92e:	3001      	adds	r0, #1
 800e930:	d1c0      	bne.n	800e8b4 <_printf_float+0x300>
 800e932:	e69e      	b.n	800e672 <_printf_float+0xbe>
 800e934:	2301      	movs	r3, #1
 800e936:	4631      	mov	r1, r6
 800e938:	4628      	mov	r0, r5
 800e93a:	9205      	str	r2, [sp, #20]
 800e93c:	47b8      	blx	r7
 800e93e:	3001      	adds	r0, #1
 800e940:	f43f ae97 	beq.w	800e672 <_printf_float+0xbe>
 800e944:	9a05      	ldr	r2, [sp, #20]
 800e946:	f10b 0b01 	add.w	fp, fp, #1
 800e94a:	e7b9      	b.n	800e8c0 <_printf_float+0x30c>
 800e94c:	ee18 3a10 	vmov	r3, s16
 800e950:	4652      	mov	r2, sl
 800e952:	4631      	mov	r1, r6
 800e954:	4628      	mov	r0, r5
 800e956:	47b8      	blx	r7
 800e958:	3001      	adds	r0, #1
 800e95a:	d1be      	bne.n	800e8da <_printf_float+0x326>
 800e95c:	e689      	b.n	800e672 <_printf_float+0xbe>
 800e95e:	9a05      	ldr	r2, [sp, #20]
 800e960:	464b      	mov	r3, r9
 800e962:	4442      	add	r2, r8
 800e964:	4631      	mov	r1, r6
 800e966:	4628      	mov	r0, r5
 800e968:	47b8      	blx	r7
 800e96a:	3001      	adds	r0, #1
 800e96c:	d1c1      	bne.n	800e8f2 <_printf_float+0x33e>
 800e96e:	e680      	b.n	800e672 <_printf_float+0xbe>
 800e970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e972:	2a01      	cmp	r2, #1
 800e974:	dc01      	bgt.n	800e97a <_printf_float+0x3c6>
 800e976:	07db      	lsls	r3, r3, #31
 800e978:	d53a      	bpl.n	800e9f0 <_printf_float+0x43c>
 800e97a:	2301      	movs	r3, #1
 800e97c:	4642      	mov	r2, r8
 800e97e:	4631      	mov	r1, r6
 800e980:	4628      	mov	r0, r5
 800e982:	47b8      	blx	r7
 800e984:	3001      	adds	r0, #1
 800e986:	f43f ae74 	beq.w	800e672 <_printf_float+0xbe>
 800e98a:	ee18 3a10 	vmov	r3, s16
 800e98e:	4652      	mov	r2, sl
 800e990:	4631      	mov	r1, r6
 800e992:	4628      	mov	r0, r5
 800e994:	47b8      	blx	r7
 800e996:	3001      	adds	r0, #1
 800e998:	f43f ae6b 	beq.w	800e672 <_printf_float+0xbe>
 800e99c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e9a8:	f7f2 f8b6 	bl	8000b18 <__aeabi_dcmpeq>
 800e9ac:	b9d8      	cbnz	r0, 800e9e6 <_printf_float+0x432>
 800e9ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e9b2:	f108 0201 	add.w	r2, r8, #1
 800e9b6:	4631      	mov	r1, r6
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	47b8      	blx	r7
 800e9bc:	3001      	adds	r0, #1
 800e9be:	d10e      	bne.n	800e9de <_printf_float+0x42a>
 800e9c0:	e657      	b.n	800e672 <_printf_float+0xbe>
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	4652      	mov	r2, sl
 800e9c6:	4631      	mov	r1, r6
 800e9c8:	4628      	mov	r0, r5
 800e9ca:	47b8      	blx	r7
 800e9cc:	3001      	adds	r0, #1
 800e9ce:	f43f ae50 	beq.w	800e672 <_printf_float+0xbe>
 800e9d2:	f108 0801 	add.w	r8, r8, #1
 800e9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9d8:	3b01      	subs	r3, #1
 800e9da:	4543      	cmp	r3, r8
 800e9dc:	dcf1      	bgt.n	800e9c2 <_printf_float+0x40e>
 800e9de:	464b      	mov	r3, r9
 800e9e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e9e4:	e6da      	b.n	800e79c <_printf_float+0x1e8>
 800e9e6:	f04f 0800 	mov.w	r8, #0
 800e9ea:	f104 0a1a 	add.w	sl, r4, #26
 800e9ee:	e7f2      	b.n	800e9d6 <_printf_float+0x422>
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	4642      	mov	r2, r8
 800e9f4:	e7df      	b.n	800e9b6 <_printf_float+0x402>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	464a      	mov	r2, r9
 800e9fa:	4631      	mov	r1, r6
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	47b8      	blx	r7
 800ea00:	3001      	adds	r0, #1
 800ea02:	f43f ae36 	beq.w	800e672 <_printf_float+0xbe>
 800ea06:	f108 0801 	add.w	r8, r8, #1
 800ea0a:	68e3      	ldr	r3, [r4, #12]
 800ea0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea0e:	1a5b      	subs	r3, r3, r1
 800ea10:	4543      	cmp	r3, r8
 800ea12:	dcf0      	bgt.n	800e9f6 <_printf_float+0x442>
 800ea14:	e6f8      	b.n	800e808 <_printf_float+0x254>
 800ea16:	f04f 0800 	mov.w	r8, #0
 800ea1a:	f104 0919 	add.w	r9, r4, #25
 800ea1e:	e7f4      	b.n	800ea0a <_printf_float+0x456>

0800ea20 <_printf_common>:
 800ea20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea24:	4616      	mov	r6, r2
 800ea26:	4699      	mov	r9, r3
 800ea28:	688a      	ldr	r2, [r1, #8]
 800ea2a:	690b      	ldr	r3, [r1, #16]
 800ea2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea30:	4293      	cmp	r3, r2
 800ea32:	bfb8      	it	lt
 800ea34:	4613      	movlt	r3, r2
 800ea36:	6033      	str	r3, [r6, #0]
 800ea38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea3c:	4607      	mov	r7, r0
 800ea3e:	460c      	mov	r4, r1
 800ea40:	b10a      	cbz	r2, 800ea46 <_printf_common+0x26>
 800ea42:	3301      	adds	r3, #1
 800ea44:	6033      	str	r3, [r6, #0]
 800ea46:	6823      	ldr	r3, [r4, #0]
 800ea48:	0699      	lsls	r1, r3, #26
 800ea4a:	bf42      	ittt	mi
 800ea4c:	6833      	ldrmi	r3, [r6, #0]
 800ea4e:	3302      	addmi	r3, #2
 800ea50:	6033      	strmi	r3, [r6, #0]
 800ea52:	6825      	ldr	r5, [r4, #0]
 800ea54:	f015 0506 	ands.w	r5, r5, #6
 800ea58:	d106      	bne.n	800ea68 <_printf_common+0x48>
 800ea5a:	f104 0a19 	add.w	sl, r4, #25
 800ea5e:	68e3      	ldr	r3, [r4, #12]
 800ea60:	6832      	ldr	r2, [r6, #0]
 800ea62:	1a9b      	subs	r3, r3, r2
 800ea64:	42ab      	cmp	r3, r5
 800ea66:	dc26      	bgt.n	800eab6 <_printf_common+0x96>
 800ea68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea6c:	1e13      	subs	r3, r2, #0
 800ea6e:	6822      	ldr	r2, [r4, #0]
 800ea70:	bf18      	it	ne
 800ea72:	2301      	movne	r3, #1
 800ea74:	0692      	lsls	r2, r2, #26
 800ea76:	d42b      	bmi.n	800ead0 <_printf_common+0xb0>
 800ea78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea7c:	4649      	mov	r1, r9
 800ea7e:	4638      	mov	r0, r7
 800ea80:	47c0      	blx	r8
 800ea82:	3001      	adds	r0, #1
 800ea84:	d01e      	beq.n	800eac4 <_printf_common+0xa4>
 800ea86:	6823      	ldr	r3, [r4, #0]
 800ea88:	6922      	ldr	r2, [r4, #16]
 800ea8a:	f003 0306 	and.w	r3, r3, #6
 800ea8e:	2b04      	cmp	r3, #4
 800ea90:	bf02      	ittt	eq
 800ea92:	68e5      	ldreq	r5, [r4, #12]
 800ea94:	6833      	ldreq	r3, [r6, #0]
 800ea96:	1aed      	subeq	r5, r5, r3
 800ea98:	68a3      	ldr	r3, [r4, #8]
 800ea9a:	bf0c      	ite	eq
 800ea9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eaa0:	2500      	movne	r5, #0
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	bfc4      	itt	gt
 800eaa6:	1a9b      	subgt	r3, r3, r2
 800eaa8:	18ed      	addgt	r5, r5, r3
 800eaaa:	2600      	movs	r6, #0
 800eaac:	341a      	adds	r4, #26
 800eaae:	42b5      	cmp	r5, r6
 800eab0:	d11a      	bne.n	800eae8 <_printf_common+0xc8>
 800eab2:	2000      	movs	r0, #0
 800eab4:	e008      	b.n	800eac8 <_printf_common+0xa8>
 800eab6:	2301      	movs	r3, #1
 800eab8:	4652      	mov	r2, sl
 800eaba:	4649      	mov	r1, r9
 800eabc:	4638      	mov	r0, r7
 800eabe:	47c0      	blx	r8
 800eac0:	3001      	adds	r0, #1
 800eac2:	d103      	bne.n	800eacc <_printf_common+0xac>
 800eac4:	f04f 30ff 	mov.w	r0, #4294967295
 800eac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eacc:	3501      	adds	r5, #1
 800eace:	e7c6      	b.n	800ea5e <_printf_common+0x3e>
 800ead0:	18e1      	adds	r1, r4, r3
 800ead2:	1c5a      	adds	r2, r3, #1
 800ead4:	2030      	movs	r0, #48	; 0x30
 800ead6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eada:	4422      	add	r2, r4
 800eadc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eae4:	3302      	adds	r3, #2
 800eae6:	e7c7      	b.n	800ea78 <_printf_common+0x58>
 800eae8:	2301      	movs	r3, #1
 800eaea:	4622      	mov	r2, r4
 800eaec:	4649      	mov	r1, r9
 800eaee:	4638      	mov	r0, r7
 800eaf0:	47c0      	blx	r8
 800eaf2:	3001      	adds	r0, #1
 800eaf4:	d0e6      	beq.n	800eac4 <_printf_common+0xa4>
 800eaf6:	3601      	adds	r6, #1
 800eaf8:	e7d9      	b.n	800eaae <_printf_common+0x8e>
	...

0800eafc <_printf_i>:
 800eafc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb00:	7e0f      	ldrb	r7, [r1, #24]
 800eb02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb04:	2f78      	cmp	r7, #120	; 0x78
 800eb06:	4691      	mov	r9, r2
 800eb08:	4680      	mov	r8, r0
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	469a      	mov	sl, r3
 800eb0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eb12:	d807      	bhi.n	800eb24 <_printf_i+0x28>
 800eb14:	2f62      	cmp	r7, #98	; 0x62
 800eb16:	d80a      	bhi.n	800eb2e <_printf_i+0x32>
 800eb18:	2f00      	cmp	r7, #0
 800eb1a:	f000 80d4 	beq.w	800ecc6 <_printf_i+0x1ca>
 800eb1e:	2f58      	cmp	r7, #88	; 0x58
 800eb20:	f000 80c0 	beq.w	800eca4 <_printf_i+0x1a8>
 800eb24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb2c:	e03a      	b.n	800eba4 <_printf_i+0xa8>
 800eb2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb32:	2b15      	cmp	r3, #21
 800eb34:	d8f6      	bhi.n	800eb24 <_printf_i+0x28>
 800eb36:	a101      	add	r1, pc, #4	; (adr r1, 800eb3c <_printf_i+0x40>)
 800eb38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb3c:	0800eb95 	.word	0x0800eb95
 800eb40:	0800eba9 	.word	0x0800eba9
 800eb44:	0800eb25 	.word	0x0800eb25
 800eb48:	0800eb25 	.word	0x0800eb25
 800eb4c:	0800eb25 	.word	0x0800eb25
 800eb50:	0800eb25 	.word	0x0800eb25
 800eb54:	0800eba9 	.word	0x0800eba9
 800eb58:	0800eb25 	.word	0x0800eb25
 800eb5c:	0800eb25 	.word	0x0800eb25
 800eb60:	0800eb25 	.word	0x0800eb25
 800eb64:	0800eb25 	.word	0x0800eb25
 800eb68:	0800ecad 	.word	0x0800ecad
 800eb6c:	0800ebd5 	.word	0x0800ebd5
 800eb70:	0800ec67 	.word	0x0800ec67
 800eb74:	0800eb25 	.word	0x0800eb25
 800eb78:	0800eb25 	.word	0x0800eb25
 800eb7c:	0800eccf 	.word	0x0800eccf
 800eb80:	0800eb25 	.word	0x0800eb25
 800eb84:	0800ebd5 	.word	0x0800ebd5
 800eb88:	0800eb25 	.word	0x0800eb25
 800eb8c:	0800eb25 	.word	0x0800eb25
 800eb90:	0800ec6f 	.word	0x0800ec6f
 800eb94:	682b      	ldr	r3, [r5, #0]
 800eb96:	1d1a      	adds	r2, r3, #4
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	602a      	str	r2, [r5, #0]
 800eb9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eba4:	2301      	movs	r3, #1
 800eba6:	e09f      	b.n	800ece8 <_printf_i+0x1ec>
 800eba8:	6820      	ldr	r0, [r4, #0]
 800ebaa:	682b      	ldr	r3, [r5, #0]
 800ebac:	0607      	lsls	r7, r0, #24
 800ebae:	f103 0104 	add.w	r1, r3, #4
 800ebb2:	6029      	str	r1, [r5, #0]
 800ebb4:	d501      	bpl.n	800ebba <_printf_i+0xbe>
 800ebb6:	681e      	ldr	r6, [r3, #0]
 800ebb8:	e003      	b.n	800ebc2 <_printf_i+0xc6>
 800ebba:	0646      	lsls	r6, r0, #25
 800ebbc:	d5fb      	bpl.n	800ebb6 <_printf_i+0xba>
 800ebbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ebc2:	2e00      	cmp	r6, #0
 800ebc4:	da03      	bge.n	800ebce <_printf_i+0xd2>
 800ebc6:	232d      	movs	r3, #45	; 0x2d
 800ebc8:	4276      	negs	r6, r6
 800ebca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebce:	485a      	ldr	r0, [pc, #360]	; (800ed38 <_printf_i+0x23c>)
 800ebd0:	230a      	movs	r3, #10
 800ebd2:	e012      	b.n	800ebfa <_printf_i+0xfe>
 800ebd4:	682b      	ldr	r3, [r5, #0]
 800ebd6:	6820      	ldr	r0, [r4, #0]
 800ebd8:	1d19      	adds	r1, r3, #4
 800ebda:	6029      	str	r1, [r5, #0]
 800ebdc:	0605      	lsls	r5, r0, #24
 800ebde:	d501      	bpl.n	800ebe4 <_printf_i+0xe8>
 800ebe0:	681e      	ldr	r6, [r3, #0]
 800ebe2:	e002      	b.n	800ebea <_printf_i+0xee>
 800ebe4:	0641      	lsls	r1, r0, #25
 800ebe6:	d5fb      	bpl.n	800ebe0 <_printf_i+0xe4>
 800ebe8:	881e      	ldrh	r6, [r3, #0]
 800ebea:	4853      	ldr	r0, [pc, #332]	; (800ed38 <_printf_i+0x23c>)
 800ebec:	2f6f      	cmp	r7, #111	; 0x6f
 800ebee:	bf0c      	ite	eq
 800ebf0:	2308      	moveq	r3, #8
 800ebf2:	230a      	movne	r3, #10
 800ebf4:	2100      	movs	r1, #0
 800ebf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ebfa:	6865      	ldr	r5, [r4, #4]
 800ebfc:	60a5      	str	r5, [r4, #8]
 800ebfe:	2d00      	cmp	r5, #0
 800ec00:	bfa2      	ittt	ge
 800ec02:	6821      	ldrge	r1, [r4, #0]
 800ec04:	f021 0104 	bicge.w	r1, r1, #4
 800ec08:	6021      	strge	r1, [r4, #0]
 800ec0a:	b90e      	cbnz	r6, 800ec10 <_printf_i+0x114>
 800ec0c:	2d00      	cmp	r5, #0
 800ec0e:	d04b      	beq.n	800eca8 <_printf_i+0x1ac>
 800ec10:	4615      	mov	r5, r2
 800ec12:	fbb6 f1f3 	udiv	r1, r6, r3
 800ec16:	fb03 6711 	mls	r7, r3, r1, r6
 800ec1a:	5dc7      	ldrb	r7, [r0, r7]
 800ec1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ec20:	4637      	mov	r7, r6
 800ec22:	42bb      	cmp	r3, r7
 800ec24:	460e      	mov	r6, r1
 800ec26:	d9f4      	bls.n	800ec12 <_printf_i+0x116>
 800ec28:	2b08      	cmp	r3, #8
 800ec2a:	d10b      	bne.n	800ec44 <_printf_i+0x148>
 800ec2c:	6823      	ldr	r3, [r4, #0]
 800ec2e:	07de      	lsls	r6, r3, #31
 800ec30:	d508      	bpl.n	800ec44 <_printf_i+0x148>
 800ec32:	6923      	ldr	r3, [r4, #16]
 800ec34:	6861      	ldr	r1, [r4, #4]
 800ec36:	4299      	cmp	r1, r3
 800ec38:	bfde      	ittt	le
 800ec3a:	2330      	movle	r3, #48	; 0x30
 800ec3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ec40:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ec44:	1b52      	subs	r2, r2, r5
 800ec46:	6122      	str	r2, [r4, #16]
 800ec48:	f8cd a000 	str.w	sl, [sp]
 800ec4c:	464b      	mov	r3, r9
 800ec4e:	aa03      	add	r2, sp, #12
 800ec50:	4621      	mov	r1, r4
 800ec52:	4640      	mov	r0, r8
 800ec54:	f7ff fee4 	bl	800ea20 <_printf_common>
 800ec58:	3001      	adds	r0, #1
 800ec5a:	d14a      	bne.n	800ecf2 <_printf_i+0x1f6>
 800ec5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec60:	b004      	add	sp, #16
 800ec62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	f043 0320 	orr.w	r3, r3, #32
 800ec6c:	6023      	str	r3, [r4, #0]
 800ec6e:	4833      	ldr	r0, [pc, #204]	; (800ed3c <_printf_i+0x240>)
 800ec70:	2778      	movs	r7, #120	; 0x78
 800ec72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ec76:	6823      	ldr	r3, [r4, #0]
 800ec78:	6829      	ldr	r1, [r5, #0]
 800ec7a:	061f      	lsls	r7, r3, #24
 800ec7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ec80:	d402      	bmi.n	800ec88 <_printf_i+0x18c>
 800ec82:	065f      	lsls	r7, r3, #25
 800ec84:	bf48      	it	mi
 800ec86:	b2b6      	uxthmi	r6, r6
 800ec88:	07df      	lsls	r7, r3, #31
 800ec8a:	bf48      	it	mi
 800ec8c:	f043 0320 	orrmi.w	r3, r3, #32
 800ec90:	6029      	str	r1, [r5, #0]
 800ec92:	bf48      	it	mi
 800ec94:	6023      	strmi	r3, [r4, #0]
 800ec96:	b91e      	cbnz	r6, 800eca0 <_printf_i+0x1a4>
 800ec98:	6823      	ldr	r3, [r4, #0]
 800ec9a:	f023 0320 	bic.w	r3, r3, #32
 800ec9e:	6023      	str	r3, [r4, #0]
 800eca0:	2310      	movs	r3, #16
 800eca2:	e7a7      	b.n	800ebf4 <_printf_i+0xf8>
 800eca4:	4824      	ldr	r0, [pc, #144]	; (800ed38 <_printf_i+0x23c>)
 800eca6:	e7e4      	b.n	800ec72 <_printf_i+0x176>
 800eca8:	4615      	mov	r5, r2
 800ecaa:	e7bd      	b.n	800ec28 <_printf_i+0x12c>
 800ecac:	682b      	ldr	r3, [r5, #0]
 800ecae:	6826      	ldr	r6, [r4, #0]
 800ecb0:	6961      	ldr	r1, [r4, #20]
 800ecb2:	1d18      	adds	r0, r3, #4
 800ecb4:	6028      	str	r0, [r5, #0]
 800ecb6:	0635      	lsls	r5, r6, #24
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	d501      	bpl.n	800ecc0 <_printf_i+0x1c4>
 800ecbc:	6019      	str	r1, [r3, #0]
 800ecbe:	e002      	b.n	800ecc6 <_printf_i+0x1ca>
 800ecc0:	0670      	lsls	r0, r6, #25
 800ecc2:	d5fb      	bpl.n	800ecbc <_printf_i+0x1c0>
 800ecc4:	8019      	strh	r1, [r3, #0]
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	6123      	str	r3, [r4, #16]
 800ecca:	4615      	mov	r5, r2
 800eccc:	e7bc      	b.n	800ec48 <_printf_i+0x14c>
 800ecce:	682b      	ldr	r3, [r5, #0]
 800ecd0:	1d1a      	adds	r2, r3, #4
 800ecd2:	602a      	str	r2, [r5, #0]
 800ecd4:	681d      	ldr	r5, [r3, #0]
 800ecd6:	6862      	ldr	r2, [r4, #4]
 800ecd8:	2100      	movs	r1, #0
 800ecda:	4628      	mov	r0, r5
 800ecdc:	f7f1 faa0 	bl	8000220 <memchr>
 800ece0:	b108      	cbz	r0, 800ece6 <_printf_i+0x1ea>
 800ece2:	1b40      	subs	r0, r0, r5
 800ece4:	6060      	str	r0, [r4, #4]
 800ece6:	6863      	ldr	r3, [r4, #4]
 800ece8:	6123      	str	r3, [r4, #16]
 800ecea:	2300      	movs	r3, #0
 800ecec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecf0:	e7aa      	b.n	800ec48 <_printf_i+0x14c>
 800ecf2:	6923      	ldr	r3, [r4, #16]
 800ecf4:	462a      	mov	r2, r5
 800ecf6:	4649      	mov	r1, r9
 800ecf8:	4640      	mov	r0, r8
 800ecfa:	47d0      	blx	sl
 800ecfc:	3001      	adds	r0, #1
 800ecfe:	d0ad      	beq.n	800ec5c <_printf_i+0x160>
 800ed00:	6823      	ldr	r3, [r4, #0]
 800ed02:	079b      	lsls	r3, r3, #30
 800ed04:	d413      	bmi.n	800ed2e <_printf_i+0x232>
 800ed06:	68e0      	ldr	r0, [r4, #12]
 800ed08:	9b03      	ldr	r3, [sp, #12]
 800ed0a:	4298      	cmp	r0, r3
 800ed0c:	bfb8      	it	lt
 800ed0e:	4618      	movlt	r0, r3
 800ed10:	e7a6      	b.n	800ec60 <_printf_i+0x164>
 800ed12:	2301      	movs	r3, #1
 800ed14:	4632      	mov	r2, r6
 800ed16:	4649      	mov	r1, r9
 800ed18:	4640      	mov	r0, r8
 800ed1a:	47d0      	blx	sl
 800ed1c:	3001      	adds	r0, #1
 800ed1e:	d09d      	beq.n	800ec5c <_printf_i+0x160>
 800ed20:	3501      	adds	r5, #1
 800ed22:	68e3      	ldr	r3, [r4, #12]
 800ed24:	9903      	ldr	r1, [sp, #12]
 800ed26:	1a5b      	subs	r3, r3, r1
 800ed28:	42ab      	cmp	r3, r5
 800ed2a:	dcf2      	bgt.n	800ed12 <_printf_i+0x216>
 800ed2c:	e7eb      	b.n	800ed06 <_printf_i+0x20a>
 800ed2e:	2500      	movs	r5, #0
 800ed30:	f104 0619 	add.w	r6, r4, #25
 800ed34:	e7f5      	b.n	800ed22 <_printf_i+0x226>
 800ed36:	bf00      	nop
 800ed38:	08013c26 	.word	0x08013c26
 800ed3c:	08013c37 	.word	0x08013c37

0800ed40 <_scanf_float>:
 800ed40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed44:	b087      	sub	sp, #28
 800ed46:	4617      	mov	r7, r2
 800ed48:	9303      	str	r3, [sp, #12]
 800ed4a:	688b      	ldr	r3, [r1, #8]
 800ed4c:	1e5a      	subs	r2, r3, #1
 800ed4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ed52:	bf83      	ittte	hi
 800ed54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ed58:	195b      	addhi	r3, r3, r5
 800ed5a:	9302      	strhi	r3, [sp, #8]
 800ed5c:	2300      	movls	r3, #0
 800ed5e:	bf86      	itte	hi
 800ed60:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ed64:	608b      	strhi	r3, [r1, #8]
 800ed66:	9302      	strls	r3, [sp, #8]
 800ed68:	680b      	ldr	r3, [r1, #0]
 800ed6a:	468b      	mov	fp, r1
 800ed6c:	2500      	movs	r5, #0
 800ed6e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ed72:	f84b 3b1c 	str.w	r3, [fp], #28
 800ed76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ed7a:	4680      	mov	r8, r0
 800ed7c:	460c      	mov	r4, r1
 800ed7e:	465e      	mov	r6, fp
 800ed80:	46aa      	mov	sl, r5
 800ed82:	46a9      	mov	r9, r5
 800ed84:	9501      	str	r5, [sp, #4]
 800ed86:	68a2      	ldr	r2, [r4, #8]
 800ed88:	b152      	cbz	r2, 800eda0 <_scanf_float+0x60>
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	2b4e      	cmp	r3, #78	; 0x4e
 800ed90:	d864      	bhi.n	800ee5c <_scanf_float+0x11c>
 800ed92:	2b40      	cmp	r3, #64	; 0x40
 800ed94:	d83c      	bhi.n	800ee10 <_scanf_float+0xd0>
 800ed96:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ed9a:	b2c8      	uxtb	r0, r1
 800ed9c:	280e      	cmp	r0, #14
 800ed9e:	d93a      	bls.n	800ee16 <_scanf_float+0xd6>
 800eda0:	f1b9 0f00 	cmp.w	r9, #0
 800eda4:	d003      	beq.n	800edae <_scanf_float+0x6e>
 800eda6:	6823      	ldr	r3, [r4, #0]
 800eda8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800edac:	6023      	str	r3, [r4, #0]
 800edae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800edb2:	f1ba 0f01 	cmp.w	sl, #1
 800edb6:	f200 8113 	bhi.w	800efe0 <_scanf_float+0x2a0>
 800edba:	455e      	cmp	r6, fp
 800edbc:	f200 8105 	bhi.w	800efca <_scanf_float+0x28a>
 800edc0:	2501      	movs	r5, #1
 800edc2:	4628      	mov	r0, r5
 800edc4:	b007      	add	sp, #28
 800edc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800edce:	2a0d      	cmp	r2, #13
 800edd0:	d8e6      	bhi.n	800eda0 <_scanf_float+0x60>
 800edd2:	a101      	add	r1, pc, #4	; (adr r1, 800edd8 <_scanf_float+0x98>)
 800edd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800edd8:	0800ef17 	.word	0x0800ef17
 800eddc:	0800eda1 	.word	0x0800eda1
 800ede0:	0800eda1 	.word	0x0800eda1
 800ede4:	0800eda1 	.word	0x0800eda1
 800ede8:	0800ef77 	.word	0x0800ef77
 800edec:	0800ef4f 	.word	0x0800ef4f
 800edf0:	0800eda1 	.word	0x0800eda1
 800edf4:	0800eda1 	.word	0x0800eda1
 800edf8:	0800ef25 	.word	0x0800ef25
 800edfc:	0800eda1 	.word	0x0800eda1
 800ee00:	0800eda1 	.word	0x0800eda1
 800ee04:	0800eda1 	.word	0x0800eda1
 800ee08:	0800eda1 	.word	0x0800eda1
 800ee0c:	0800eedd 	.word	0x0800eedd
 800ee10:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ee14:	e7db      	b.n	800edce <_scanf_float+0x8e>
 800ee16:	290e      	cmp	r1, #14
 800ee18:	d8c2      	bhi.n	800eda0 <_scanf_float+0x60>
 800ee1a:	a001      	add	r0, pc, #4	; (adr r0, 800ee20 <_scanf_float+0xe0>)
 800ee1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ee20:	0800eecf 	.word	0x0800eecf
 800ee24:	0800eda1 	.word	0x0800eda1
 800ee28:	0800eecf 	.word	0x0800eecf
 800ee2c:	0800ef63 	.word	0x0800ef63
 800ee30:	0800eda1 	.word	0x0800eda1
 800ee34:	0800ee7d 	.word	0x0800ee7d
 800ee38:	0800eeb9 	.word	0x0800eeb9
 800ee3c:	0800eeb9 	.word	0x0800eeb9
 800ee40:	0800eeb9 	.word	0x0800eeb9
 800ee44:	0800eeb9 	.word	0x0800eeb9
 800ee48:	0800eeb9 	.word	0x0800eeb9
 800ee4c:	0800eeb9 	.word	0x0800eeb9
 800ee50:	0800eeb9 	.word	0x0800eeb9
 800ee54:	0800eeb9 	.word	0x0800eeb9
 800ee58:	0800eeb9 	.word	0x0800eeb9
 800ee5c:	2b6e      	cmp	r3, #110	; 0x6e
 800ee5e:	d809      	bhi.n	800ee74 <_scanf_float+0x134>
 800ee60:	2b60      	cmp	r3, #96	; 0x60
 800ee62:	d8b2      	bhi.n	800edca <_scanf_float+0x8a>
 800ee64:	2b54      	cmp	r3, #84	; 0x54
 800ee66:	d077      	beq.n	800ef58 <_scanf_float+0x218>
 800ee68:	2b59      	cmp	r3, #89	; 0x59
 800ee6a:	d199      	bne.n	800eda0 <_scanf_float+0x60>
 800ee6c:	2d07      	cmp	r5, #7
 800ee6e:	d197      	bne.n	800eda0 <_scanf_float+0x60>
 800ee70:	2508      	movs	r5, #8
 800ee72:	e029      	b.n	800eec8 <_scanf_float+0x188>
 800ee74:	2b74      	cmp	r3, #116	; 0x74
 800ee76:	d06f      	beq.n	800ef58 <_scanf_float+0x218>
 800ee78:	2b79      	cmp	r3, #121	; 0x79
 800ee7a:	e7f6      	b.n	800ee6a <_scanf_float+0x12a>
 800ee7c:	6821      	ldr	r1, [r4, #0]
 800ee7e:	05c8      	lsls	r0, r1, #23
 800ee80:	d51a      	bpl.n	800eeb8 <_scanf_float+0x178>
 800ee82:	9b02      	ldr	r3, [sp, #8]
 800ee84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ee88:	6021      	str	r1, [r4, #0]
 800ee8a:	f109 0901 	add.w	r9, r9, #1
 800ee8e:	b11b      	cbz	r3, 800ee98 <_scanf_float+0x158>
 800ee90:	3b01      	subs	r3, #1
 800ee92:	3201      	adds	r2, #1
 800ee94:	9302      	str	r3, [sp, #8]
 800ee96:	60a2      	str	r2, [r4, #8]
 800ee98:	68a3      	ldr	r3, [r4, #8]
 800ee9a:	3b01      	subs	r3, #1
 800ee9c:	60a3      	str	r3, [r4, #8]
 800ee9e:	6923      	ldr	r3, [r4, #16]
 800eea0:	3301      	adds	r3, #1
 800eea2:	6123      	str	r3, [r4, #16]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	3b01      	subs	r3, #1
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	607b      	str	r3, [r7, #4]
 800eeac:	f340 8084 	ble.w	800efb8 <_scanf_float+0x278>
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	603b      	str	r3, [r7, #0]
 800eeb6:	e766      	b.n	800ed86 <_scanf_float+0x46>
 800eeb8:	eb1a 0f05 	cmn.w	sl, r5
 800eebc:	f47f af70 	bne.w	800eda0 <_scanf_float+0x60>
 800eec0:	6822      	ldr	r2, [r4, #0]
 800eec2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800eec6:	6022      	str	r2, [r4, #0]
 800eec8:	f806 3b01 	strb.w	r3, [r6], #1
 800eecc:	e7e4      	b.n	800ee98 <_scanf_float+0x158>
 800eece:	6822      	ldr	r2, [r4, #0]
 800eed0:	0610      	lsls	r0, r2, #24
 800eed2:	f57f af65 	bpl.w	800eda0 <_scanf_float+0x60>
 800eed6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eeda:	e7f4      	b.n	800eec6 <_scanf_float+0x186>
 800eedc:	f1ba 0f00 	cmp.w	sl, #0
 800eee0:	d10e      	bne.n	800ef00 <_scanf_float+0x1c0>
 800eee2:	f1b9 0f00 	cmp.w	r9, #0
 800eee6:	d10e      	bne.n	800ef06 <_scanf_float+0x1c6>
 800eee8:	6822      	ldr	r2, [r4, #0]
 800eeea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800eeee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800eef2:	d108      	bne.n	800ef06 <_scanf_float+0x1c6>
 800eef4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eef8:	6022      	str	r2, [r4, #0]
 800eefa:	f04f 0a01 	mov.w	sl, #1
 800eefe:	e7e3      	b.n	800eec8 <_scanf_float+0x188>
 800ef00:	f1ba 0f02 	cmp.w	sl, #2
 800ef04:	d055      	beq.n	800efb2 <_scanf_float+0x272>
 800ef06:	2d01      	cmp	r5, #1
 800ef08:	d002      	beq.n	800ef10 <_scanf_float+0x1d0>
 800ef0a:	2d04      	cmp	r5, #4
 800ef0c:	f47f af48 	bne.w	800eda0 <_scanf_float+0x60>
 800ef10:	3501      	adds	r5, #1
 800ef12:	b2ed      	uxtb	r5, r5
 800ef14:	e7d8      	b.n	800eec8 <_scanf_float+0x188>
 800ef16:	f1ba 0f01 	cmp.w	sl, #1
 800ef1a:	f47f af41 	bne.w	800eda0 <_scanf_float+0x60>
 800ef1e:	f04f 0a02 	mov.w	sl, #2
 800ef22:	e7d1      	b.n	800eec8 <_scanf_float+0x188>
 800ef24:	b97d      	cbnz	r5, 800ef46 <_scanf_float+0x206>
 800ef26:	f1b9 0f00 	cmp.w	r9, #0
 800ef2a:	f47f af3c 	bne.w	800eda6 <_scanf_float+0x66>
 800ef2e:	6822      	ldr	r2, [r4, #0]
 800ef30:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ef34:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ef38:	f47f af39 	bne.w	800edae <_scanf_float+0x6e>
 800ef3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ef40:	6022      	str	r2, [r4, #0]
 800ef42:	2501      	movs	r5, #1
 800ef44:	e7c0      	b.n	800eec8 <_scanf_float+0x188>
 800ef46:	2d03      	cmp	r5, #3
 800ef48:	d0e2      	beq.n	800ef10 <_scanf_float+0x1d0>
 800ef4a:	2d05      	cmp	r5, #5
 800ef4c:	e7de      	b.n	800ef0c <_scanf_float+0x1cc>
 800ef4e:	2d02      	cmp	r5, #2
 800ef50:	f47f af26 	bne.w	800eda0 <_scanf_float+0x60>
 800ef54:	2503      	movs	r5, #3
 800ef56:	e7b7      	b.n	800eec8 <_scanf_float+0x188>
 800ef58:	2d06      	cmp	r5, #6
 800ef5a:	f47f af21 	bne.w	800eda0 <_scanf_float+0x60>
 800ef5e:	2507      	movs	r5, #7
 800ef60:	e7b2      	b.n	800eec8 <_scanf_float+0x188>
 800ef62:	6822      	ldr	r2, [r4, #0]
 800ef64:	0591      	lsls	r1, r2, #22
 800ef66:	f57f af1b 	bpl.w	800eda0 <_scanf_float+0x60>
 800ef6a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ef6e:	6022      	str	r2, [r4, #0]
 800ef70:	f8cd 9004 	str.w	r9, [sp, #4]
 800ef74:	e7a8      	b.n	800eec8 <_scanf_float+0x188>
 800ef76:	6822      	ldr	r2, [r4, #0]
 800ef78:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ef7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ef80:	d006      	beq.n	800ef90 <_scanf_float+0x250>
 800ef82:	0550      	lsls	r0, r2, #21
 800ef84:	f57f af0c 	bpl.w	800eda0 <_scanf_float+0x60>
 800ef88:	f1b9 0f00 	cmp.w	r9, #0
 800ef8c:	f43f af0f 	beq.w	800edae <_scanf_float+0x6e>
 800ef90:	0591      	lsls	r1, r2, #22
 800ef92:	bf58      	it	pl
 800ef94:	9901      	ldrpl	r1, [sp, #4]
 800ef96:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ef9a:	bf58      	it	pl
 800ef9c:	eba9 0101 	subpl.w	r1, r9, r1
 800efa0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800efa4:	bf58      	it	pl
 800efa6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800efaa:	6022      	str	r2, [r4, #0]
 800efac:	f04f 0900 	mov.w	r9, #0
 800efb0:	e78a      	b.n	800eec8 <_scanf_float+0x188>
 800efb2:	f04f 0a03 	mov.w	sl, #3
 800efb6:	e787      	b.n	800eec8 <_scanf_float+0x188>
 800efb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800efbc:	4639      	mov	r1, r7
 800efbe:	4640      	mov	r0, r8
 800efc0:	4798      	blx	r3
 800efc2:	2800      	cmp	r0, #0
 800efc4:	f43f aedf 	beq.w	800ed86 <_scanf_float+0x46>
 800efc8:	e6ea      	b.n	800eda0 <_scanf_float+0x60>
 800efca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800efce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800efd2:	463a      	mov	r2, r7
 800efd4:	4640      	mov	r0, r8
 800efd6:	4798      	blx	r3
 800efd8:	6923      	ldr	r3, [r4, #16]
 800efda:	3b01      	subs	r3, #1
 800efdc:	6123      	str	r3, [r4, #16]
 800efde:	e6ec      	b.n	800edba <_scanf_float+0x7a>
 800efe0:	1e6b      	subs	r3, r5, #1
 800efe2:	2b06      	cmp	r3, #6
 800efe4:	d825      	bhi.n	800f032 <_scanf_float+0x2f2>
 800efe6:	2d02      	cmp	r5, #2
 800efe8:	d836      	bhi.n	800f058 <_scanf_float+0x318>
 800efea:	455e      	cmp	r6, fp
 800efec:	f67f aee8 	bls.w	800edc0 <_scanf_float+0x80>
 800eff0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eff4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eff8:	463a      	mov	r2, r7
 800effa:	4640      	mov	r0, r8
 800effc:	4798      	blx	r3
 800effe:	6923      	ldr	r3, [r4, #16]
 800f000:	3b01      	subs	r3, #1
 800f002:	6123      	str	r3, [r4, #16]
 800f004:	e7f1      	b.n	800efea <_scanf_float+0x2aa>
 800f006:	9802      	ldr	r0, [sp, #8]
 800f008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f00c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f010:	9002      	str	r0, [sp, #8]
 800f012:	463a      	mov	r2, r7
 800f014:	4640      	mov	r0, r8
 800f016:	4798      	blx	r3
 800f018:	6923      	ldr	r3, [r4, #16]
 800f01a:	3b01      	subs	r3, #1
 800f01c:	6123      	str	r3, [r4, #16]
 800f01e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f022:	fa5f fa8a 	uxtb.w	sl, sl
 800f026:	f1ba 0f02 	cmp.w	sl, #2
 800f02a:	d1ec      	bne.n	800f006 <_scanf_float+0x2c6>
 800f02c:	3d03      	subs	r5, #3
 800f02e:	b2ed      	uxtb	r5, r5
 800f030:	1b76      	subs	r6, r6, r5
 800f032:	6823      	ldr	r3, [r4, #0]
 800f034:	05da      	lsls	r2, r3, #23
 800f036:	d52f      	bpl.n	800f098 <_scanf_float+0x358>
 800f038:	055b      	lsls	r3, r3, #21
 800f03a:	d510      	bpl.n	800f05e <_scanf_float+0x31e>
 800f03c:	455e      	cmp	r6, fp
 800f03e:	f67f aebf 	bls.w	800edc0 <_scanf_float+0x80>
 800f042:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f046:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f04a:	463a      	mov	r2, r7
 800f04c:	4640      	mov	r0, r8
 800f04e:	4798      	blx	r3
 800f050:	6923      	ldr	r3, [r4, #16]
 800f052:	3b01      	subs	r3, #1
 800f054:	6123      	str	r3, [r4, #16]
 800f056:	e7f1      	b.n	800f03c <_scanf_float+0x2fc>
 800f058:	46aa      	mov	sl, r5
 800f05a:	9602      	str	r6, [sp, #8]
 800f05c:	e7df      	b.n	800f01e <_scanf_float+0x2de>
 800f05e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f062:	6923      	ldr	r3, [r4, #16]
 800f064:	2965      	cmp	r1, #101	; 0x65
 800f066:	f103 33ff 	add.w	r3, r3, #4294967295
 800f06a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f06e:	6123      	str	r3, [r4, #16]
 800f070:	d00c      	beq.n	800f08c <_scanf_float+0x34c>
 800f072:	2945      	cmp	r1, #69	; 0x45
 800f074:	d00a      	beq.n	800f08c <_scanf_float+0x34c>
 800f076:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f07a:	463a      	mov	r2, r7
 800f07c:	4640      	mov	r0, r8
 800f07e:	4798      	blx	r3
 800f080:	6923      	ldr	r3, [r4, #16]
 800f082:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f086:	3b01      	subs	r3, #1
 800f088:	1eb5      	subs	r5, r6, #2
 800f08a:	6123      	str	r3, [r4, #16]
 800f08c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f090:	463a      	mov	r2, r7
 800f092:	4640      	mov	r0, r8
 800f094:	4798      	blx	r3
 800f096:	462e      	mov	r6, r5
 800f098:	6825      	ldr	r5, [r4, #0]
 800f09a:	f015 0510 	ands.w	r5, r5, #16
 800f09e:	d158      	bne.n	800f152 <_scanf_float+0x412>
 800f0a0:	7035      	strb	r5, [r6, #0]
 800f0a2:	6823      	ldr	r3, [r4, #0]
 800f0a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f0a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0ac:	d11c      	bne.n	800f0e8 <_scanf_float+0x3a8>
 800f0ae:	9b01      	ldr	r3, [sp, #4]
 800f0b0:	454b      	cmp	r3, r9
 800f0b2:	eba3 0209 	sub.w	r2, r3, r9
 800f0b6:	d124      	bne.n	800f102 <_scanf_float+0x3c2>
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	4659      	mov	r1, fp
 800f0bc:	4640      	mov	r0, r8
 800f0be:	f002 fc1b 	bl	80118f8 <_strtod_r>
 800f0c2:	9b03      	ldr	r3, [sp, #12]
 800f0c4:	6821      	ldr	r1, [r4, #0]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f011 0f02 	tst.w	r1, #2
 800f0cc:	ec57 6b10 	vmov	r6, r7, d0
 800f0d0:	f103 0204 	add.w	r2, r3, #4
 800f0d4:	d020      	beq.n	800f118 <_scanf_float+0x3d8>
 800f0d6:	9903      	ldr	r1, [sp, #12]
 800f0d8:	600a      	str	r2, [r1, #0]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	e9c3 6700 	strd	r6, r7, [r3]
 800f0e0:	68e3      	ldr	r3, [r4, #12]
 800f0e2:	3301      	adds	r3, #1
 800f0e4:	60e3      	str	r3, [r4, #12]
 800f0e6:	e66c      	b.n	800edc2 <_scanf_float+0x82>
 800f0e8:	9b04      	ldr	r3, [sp, #16]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d0e4      	beq.n	800f0b8 <_scanf_float+0x378>
 800f0ee:	9905      	ldr	r1, [sp, #20]
 800f0f0:	230a      	movs	r3, #10
 800f0f2:	462a      	mov	r2, r5
 800f0f4:	3101      	adds	r1, #1
 800f0f6:	4640      	mov	r0, r8
 800f0f8:	f002 fc86 	bl	8011a08 <_strtol_r>
 800f0fc:	9b04      	ldr	r3, [sp, #16]
 800f0fe:	9e05      	ldr	r6, [sp, #20]
 800f100:	1ac2      	subs	r2, r0, r3
 800f102:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f106:	429e      	cmp	r6, r3
 800f108:	bf28      	it	cs
 800f10a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f10e:	4912      	ldr	r1, [pc, #72]	; (800f158 <_scanf_float+0x418>)
 800f110:	4630      	mov	r0, r6
 800f112:	f000 f8f9 	bl	800f308 <siprintf>
 800f116:	e7cf      	b.n	800f0b8 <_scanf_float+0x378>
 800f118:	f011 0f04 	tst.w	r1, #4
 800f11c:	9903      	ldr	r1, [sp, #12]
 800f11e:	600a      	str	r2, [r1, #0]
 800f120:	d1db      	bne.n	800f0da <_scanf_float+0x39a>
 800f122:	f8d3 8000 	ldr.w	r8, [r3]
 800f126:	ee10 2a10 	vmov	r2, s0
 800f12a:	ee10 0a10 	vmov	r0, s0
 800f12e:	463b      	mov	r3, r7
 800f130:	4639      	mov	r1, r7
 800f132:	f7f1 fd23 	bl	8000b7c <__aeabi_dcmpun>
 800f136:	b128      	cbz	r0, 800f144 <_scanf_float+0x404>
 800f138:	4808      	ldr	r0, [pc, #32]	; (800f15c <_scanf_float+0x41c>)
 800f13a:	f000 fa57 	bl	800f5ec <nanf>
 800f13e:	ed88 0a00 	vstr	s0, [r8]
 800f142:	e7cd      	b.n	800f0e0 <_scanf_float+0x3a0>
 800f144:	4630      	mov	r0, r6
 800f146:	4639      	mov	r1, r7
 800f148:	f7f1 fd76 	bl	8000c38 <__aeabi_d2f>
 800f14c:	f8c8 0000 	str.w	r0, [r8]
 800f150:	e7c6      	b.n	800f0e0 <_scanf_float+0x3a0>
 800f152:	2500      	movs	r5, #0
 800f154:	e635      	b.n	800edc2 <_scanf_float+0x82>
 800f156:	bf00      	nop
 800f158:	08013c48 	.word	0x08013c48
 800f15c:	08013c13 	.word	0x08013c13

0800f160 <std>:
 800f160:	2300      	movs	r3, #0
 800f162:	b510      	push	{r4, lr}
 800f164:	4604      	mov	r4, r0
 800f166:	e9c0 3300 	strd	r3, r3, [r0]
 800f16a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f16e:	6083      	str	r3, [r0, #8]
 800f170:	8181      	strh	r1, [r0, #12]
 800f172:	6643      	str	r3, [r0, #100]	; 0x64
 800f174:	81c2      	strh	r2, [r0, #14]
 800f176:	6183      	str	r3, [r0, #24]
 800f178:	4619      	mov	r1, r3
 800f17a:	2208      	movs	r2, #8
 800f17c:	305c      	adds	r0, #92	; 0x5c
 800f17e:	f000 f940 	bl	800f402 <memset>
 800f182:	4b0d      	ldr	r3, [pc, #52]	; (800f1b8 <std+0x58>)
 800f184:	6263      	str	r3, [r4, #36]	; 0x24
 800f186:	4b0d      	ldr	r3, [pc, #52]	; (800f1bc <std+0x5c>)
 800f188:	62a3      	str	r3, [r4, #40]	; 0x28
 800f18a:	4b0d      	ldr	r3, [pc, #52]	; (800f1c0 <std+0x60>)
 800f18c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f18e:	4b0d      	ldr	r3, [pc, #52]	; (800f1c4 <std+0x64>)
 800f190:	6323      	str	r3, [r4, #48]	; 0x30
 800f192:	4b0d      	ldr	r3, [pc, #52]	; (800f1c8 <std+0x68>)
 800f194:	6224      	str	r4, [r4, #32]
 800f196:	429c      	cmp	r4, r3
 800f198:	d006      	beq.n	800f1a8 <std+0x48>
 800f19a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f19e:	4294      	cmp	r4, r2
 800f1a0:	d002      	beq.n	800f1a8 <std+0x48>
 800f1a2:	33d0      	adds	r3, #208	; 0xd0
 800f1a4:	429c      	cmp	r4, r3
 800f1a6:	d105      	bne.n	800f1b4 <std+0x54>
 800f1a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1b0:	f000 ba0a 	b.w	800f5c8 <__retarget_lock_init_recursive>
 800f1b4:	bd10      	pop	{r4, pc}
 800f1b6:	bf00      	nop
 800f1b8:	0800f349 	.word	0x0800f349
 800f1bc:	0800f36b 	.word	0x0800f36b
 800f1c0:	0800f3a3 	.word	0x0800f3a3
 800f1c4:	0800f3c7 	.word	0x0800f3c7
 800f1c8:	200005c4 	.word	0x200005c4

0800f1cc <stdio_exit_handler>:
 800f1cc:	4a02      	ldr	r2, [pc, #8]	; (800f1d8 <stdio_exit_handler+0xc>)
 800f1ce:	4903      	ldr	r1, [pc, #12]	; (800f1dc <stdio_exit_handler+0x10>)
 800f1d0:	4803      	ldr	r0, [pc, #12]	; (800f1e0 <stdio_exit_handler+0x14>)
 800f1d2:	f000 b87b 	b.w	800f2cc <_fwalk_sglue>
 800f1d6:	bf00      	nop
 800f1d8:	2000000c 	.word	0x2000000c
 800f1dc:	08012051 	.word	0x08012051
 800f1e0:	20000018 	.word	0x20000018

0800f1e4 <cleanup_stdio>:
 800f1e4:	6841      	ldr	r1, [r0, #4]
 800f1e6:	4b0c      	ldr	r3, [pc, #48]	; (800f218 <cleanup_stdio+0x34>)
 800f1e8:	4299      	cmp	r1, r3
 800f1ea:	b510      	push	{r4, lr}
 800f1ec:	4604      	mov	r4, r0
 800f1ee:	d001      	beq.n	800f1f4 <cleanup_stdio+0x10>
 800f1f0:	f002 ff2e 	bl	8012050 <_fflush_r>
 800f1f4:	68a1      	ldr	r1, [r4, #8]
 800f1f6:	4b09      	ldr	r3, [pc, #36]	; (800f21c <cleanup_stdio+0x38>)
 800f1f8:	4299      	cmp	r1, r3
 800f1fa:	d002      	beq.n	800f202 <cleanup_stdio+0x1e>
 800f1fc:	4620      	mov	r0, r4
 800f1fe:	f002 ff27 	bl	8012050 <_fflush_r>
 800f202:	68e1      	ldr	r1, [r4, #12]
 800f204:	4b06      	ldr	r3, [pc, #24]	; (800f220 <cleanup_stdio+0x3c>)
 800f206:	4299      	cmp	r1, r3
 800f208:	d004      	beq.n	800f214 <cleanup_stdio+0x30>
 800f20a:	4620      	mov	r0, r4
 800f20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f210:	f002 bf1e 	b.w	8012050 <_fflush_r>
 800f214:	bd10      	pop	{r4, pc}
 800f216:	bf00      	nop
 800f218:	200005c4 	.word	0x200005c4
 800f21c:	2000062c 	.word	0x2000062c
 800f220:	20000694 	.word	0x20000694

0800f224 <global_stdio_init.part.0>:
 800f224:	b510      	push	{r4, lr}
 800f226:	4b0b      	ldr	r3, [pc, #44]	; (800f254 <global_stdio_init.part.0+0x30>)
 800f228:	4c0b      	ldr	r4, [pc, #44]	; (800f258 <global_stdio_init.part.0+0x34>)
 800f22a:	4a0c      	ldr	r2, [pc, #48]	; (800f25c <global_stdio_init.part.0+0x38>)
 800f22c:	601a      	str	r2, [r3, #0]
 800f22e:	4620      	mov	r0, r4
 800f230:	2200      	movs	r2, #0
 800f232:	2104      	movs	r1, #4
 800f234:	f7ff ff94 	bl	800f160 <std>
 800f238:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f23c:	2201      	movs	r2, #1
 800f23e:	2109      	movs	r1, #9
 800f240:	f7ff ff8e 	bl	800f160 <std>
 800f244:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f248:	2202      	movs	r2, #2
 800f24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f24e:	2112      	movs	r1, #18
 800f250:	f7ff bf86 	b.w	800f160 <std>
 800f254:	200006fc 	.word	0x200006fc
 800f258:	200005c4 	.word	0x200005c4
 800f25c:	0800f1cd 	.word	0x0800f1cd

0800f260 <__sfp_lock_acquire>:
 800f260:	4801      	ldr	r0, [pc, #4]	; (800f268 <__sfp_lock_acquire+0x8>)
 800f262:	f000 b9b2 	b.w	800f5ca <__retarget_lock_acquire_recursive>
 800f266:	bf00      	nop
 800f268:	20000705 	.word	0x20000705

0800f26c <__sfp_lock_release>:
 800f26c:	4801      	ldr	r0, [pc, #4]	; (800f274 <__sfp_lock_release+0x8>)
 800f26e:	f000 b9ad 	b.w	800f5cc <__retarget_lock_release_recursive>
 800f272:	bf00      	nop
 800f274:	20000705 	.word	0x20000705

0800f278 <__sinit>:
 800f278:	b510      	push	{r4, lr}
 800f27a:	4604      	mov	r4, r0
 800f27c:	f7ff fff0 	bl	800f260 <__sfp_lock_acquire>
 800f280:	6a23      	ldr	r3, [r4, #32]
 800f282:	b11b      	cbz	r3, 800f28c <__sinit+0x14>
 800f284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f288:	f7ff bff0 	b.w	800f26c <__sfp_lock_release>
 800f28c:	4b04      	ldr	r3, [pc, #16]	; (800f2a0 <__sinit+0x28>)
 800f28e:	6223      	str	r3, [r4, #32]
 800f290:	4b04      	ldr	r3, [pc, #16]	; (800f2a4 <__sinit+0x2c>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d1f5      	bne.n	800f284 <__sinit+0xc>
 800f298:	f7ff ffc4 	bl	800f224 <global_stdio_init.part.0>
 800f29c:	e7f2      	b.n	800f284 <__sinit+0xc>
 800f29e:	bf00      	nop
 800f2a0:	0800f1e5 	.word	0x0800f1e5
 800f2a4:	200006fc 	.word	0x200006fc

0800f2a8 <fiprintf>:
 800f2a8:	b40e      	push	{r1, r2, r3}
 800f2aa:	b503      	push	{r0, r1, lr}
 800f2ac:	4601      	mov	r1, r0
 800f2ae:	ab03      	add	r3, sp, #12
 800f2b0:	4805      	ldr	r0, [pc, #20]	; (800f2c8 <fiprintf+0x20>)
 800f2b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2b6:	6800      	ldr	r0, [r0, #0]
 800f2b8:	9301      	str	r3, [sp, #4]
 800f2ba:	f002 fd29 	bl	8011d10 <_vfiprintf_r>
 800f2be:	b002      	add	sp, #8
 800f2c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2c4:	b003      	add	sp, #12
 800f2c6:	4770      	bx	lr
 800f2c8:	20000064 	.word	0x20000064

0800f2cc <_fwalk_sglue>:
 800f2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2d0:	4607      	mov	r7, r0
 800f2d2:	4688      	mov	r8, r1
 800f2d4:	4614      	mov	r4, r2
 800f2d6:	2600      	movs	r6, #0
 800f2d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2dc:	f1b9 0901 	subs.w	r9, r9, #1
 800f2e0:	d505      	bpl.n	800f2ee <_fwalk_sglue+0x22>
 800f2e2:	6824      	ldr	r4, [r4, #0]
 800f2e4:	2c00      	cmp	r4, #0
 800f2e6:	d1f7      	bne.n	800f2d8 <_fwalk_sglue+0xc>
 800f2e8:	4630      	mov	r0, r6
 800f2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2ee:	89ab      	ldrh	r3, [r5, #12]
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d907      	bls.n	800f304 <_fwalk_sglue+0x38>
 800f2f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	d003      	beq.n	800f304 <_fwalk_sglue+0x38>
 800f2fc:	4629      	mov	r1, r5
 800f2fe:	4638      	mov	r0, r7
 800f300:	47c0      	blx	r8
 800f302:	4306      	orrs	r6, r0
 800f304:	3568      	adds	r5, #104	; 0x68
 800f306:	e7e9      	b.n	800f2dc <_fwalk_sglue+0x10>

0800f308 <siprintf>:
 800f308:	b40e      	push	{r1, r2, r3}
 800f30a:	b500      	push	{lr}
 800f30c:	b09c      	sub	sp, #112	; 0x70
 800f30e:	ab1d      	add	r3, sp, #116	; 0x74
 800f310:	9002      	str	r0, [sp, #8]
 800f312:	9006      	str	r0, [sp, #24]
 800f314:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f318:	4809      	ldr	r0, [pc, #36]	; (800f340 <siprintf+0x38>)
 800f31a:	9107      	str	r1, [sp, #28]
 800f31c:	9104      	str	r1, [sp, #16]
 800f31e:	4909      	ldr	r1, [pc, #36]	; (800f344 <siprintf+0x3c>)
 800f320:	f853 2b04 	ldr.w	r2, [r3], #4
 800f324:	9105      	str	r1, [sp, #20]
 800f326:	6800      	ldr	r0, [r0, #0]
 800f328:	9301      	str	r3, [sp, #4]
 800f32a:	a902      	add	r1, sp, #8
 800f32c:	f002 fbc8 	bl	8011ac0 <_svfiprintf_r>
 800f330:	9b02      	ldr	r3, [sp, #8]
 800f332:	2200      	movs	r2, #0
 800f334:	701a      	strb	r2, [r3, #0]
 800f336:	b01c      	add	sp, #112	; 0x70
 800f338:	f85d eb04 	ldr.w	lr, [sp], #4
 800f33c:	b003      	add	sp, #12
 800f33e:	4770      	bx	lr
 800f340:	20000064 	.word	0x20000064
 800f344:	ffff0208 	.word	0xffff0208

0800f348 <__sread>:
 800f348:	b510      	push	{r4, lr}
 800f34a:	460c      	mov	r4, r1
 800f34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f350:	f000 f8c8 	bl	800f4e4 <_read_r>
 800f354:	2800      	cmp	r0, #0
 800f356:	bfab      	itete	ge
 800f358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f35a:	89a3      	ldrhlt	r3, [r4, #12]
 800f35c:	181b      	addge	r3, r3, r0
 800f35e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f362:	bfac      	ite	ge
 800f364:	6563      	strge	r3, [r4, #84]	; 0x54
 800f366:	81a3      	strhlt	r3, [r4, #12]
 800f368:	bd10      	pop	{r4, pc}

0800f36a <__swrite>:
 800f36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f36e:	461f      	mov	r7, r3
 800f370:	898b      	ldrh	r3, [r1, #12]
 800f372:	05db      	lsls	r3, r3, #23
 800f374:	4605      	mov	r5, r0
 800f376:	460c      	mov	r4, r1
 800f378:	4616      	mov	r6, r2
 800f37a:	d505      	bpl.n	800f388 <__swrite+0x1e>
 800f37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f380:	2302      	movs	r3, #2
 800f382:	2200      	movs	r2, #0
 800f384:	f000 f89c 	bl	800f4c0 <_lseek_r>
 800f388:	89a3      	ldrh	r3, [r4, #12]
 800f38a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f38e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f392:	81a3      	strh	r3, [r4, #12]
 800f394:	4632      	mov	r2, r6
 800f396:	463b      	mov	r3, r7
 800f398:	4628      	mov	r0, r5
 800f39a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f39e:	f000 b8d7 	b.w	800f550 <_write_r>

0800f3a2 <__sseek>:
 800f3a2:	b510      	push	{r4, lr}
 800f3a4:	460c      	mov	r4, r1
 800f3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3aa:	f000 f889 	bl	800f4c0 <_lseek_r>
 800f3ae:	1c43      	adds	r3, r0, #1
 800f3b0:	89a3      	ldrh	r3, [r4, #12]
 800f3b2:	bf15      	itete	ne
 800f3b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f3b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f3ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f3be:	81a3      	strheq	r3, [r4, #12]
 800f3c0:	bf18      	it	ne
 800f3c2:	81a3      	strhne	r3, [r4, #12]
 800f3c4:	bd10      	pop	{r4, pc}

0800f3c6 <__sclose>:
 800f3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3ca:	f000 b869 	b.w	800f4a0 <_close_r>

0800f3ce <memmove>:
 800f3ce:	4288      	cmp	r0, r1
 800f3d0:	b510      	push	{r4, lr}
 800f3d2:	eb01 0402 	add.w	r4, r1, r2
 800f3d6:	d902      	bls.n	800f3de <memmove+0x10>
 800f3d8:	4284      	cmp	r4, r0
 800f3da:	4623      	mov	r3, r4
 800f3dc:	d807      	bhi.n	800f3ee <memmove+0x20>
 800f3de:	1e43      	subs	r3, r0, #1
 800f3e0:	42a1      	cmp	r1, r4
 800f3e2:	d008      	beq.n	800f3f6 <memmove+0x28>
 800f3e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3ec:	e7f8      	b.n	800f3e0 <memmove+0x12>
 800f3ee:	4402      	add	r2, r0
 800f3f0:	4601      	mov	r1, r0
 800f3f2:	428a      	cmp	r2, r1
 800f3f4:	d100      	bne.n	800f3f8 <memmove+0x2a>
 800f3f6:	bd10      	pop	{r4, pc}
 800f3f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f400:	e7f7      	b.n	800f3f2 <memmove+0x24>

0800f402 <memset>:
 800f402:	4402      	add	r2, r0
 800f404:	4603      	mov	r3, r0
 800f406:	4293      	cmp	r3, r2
 800f408:	d100      	bne.n	800f40c <memset+0xa>
 800f40a:	4770      	bx	lr
 800f40c:	f803 1b01 	strb.w	r1, [r3], #1
 800f410:	e7f9      	b.n	800f406 <memset+0x4>

0800f412 <strncpy>:
 800f412:	b510      	push	{r4, lr}
 800f414:	3901      	subs	r1, #1
 800f416:	4603      	mov	r3, r0
 800f418:	b132      	cbz	r2, 800f428 <strncpy+0x16>
 800f41a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f41e:	f803 4b01 	strb.w	r4, [r3], #1
 800f422:	3a01      	subs	r2, #1
 800f424:	2c00      	cmp	r4, #0
 800f426:	d1f7      	bne.n	800f418 <strncpy+0x6>
 800f428:	441a      	add	r2, r3
 800f42a:	2100      	movs	r1, #0
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d100      	bne.n	800f432 <strncpy+0x20>
 800f430:	bd10      	pop	{r4, pc}
 800f432:	f803 1b01 	strb.w	r1, [r3], #1
 800f436:	e7f9      	b.n	800f42c <strncpy+0x1a>

0800f438 <_raise_r>:
 800f438:	291f      	cmp	r1, #31
 800f43a:	b538      	push	{r3, r4, r5, lr}
 800f43c:	4604      	mov	r4, r0
 800f43e:	460d      	mov	r5, r1
 800f440:	d904      	bls.n	800f44c <_raise_r+0x14>
 800f442:	2316      	movs	r3, #22
 800f444:	6003      	str	r3, [r0, #0]
 800f446:	f04f 30ff 	mov.w	r0, #4294967295
 800f44a:	bd38      	pop	{r3, r4, r5, pc}
 800f44c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f44e:	b112      	cbz	r2, 800f456 <_raise_r+0x1e>
 800f450:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f454:	b94b      	cbnz	r3, 800f46a <_raise_r+0x32>
 800f456:	4620      	mov	r0, r4
 800f458:	f000 f868 	bl	800f52c <_getpid_r>
 800f45c:	462a      	mov	r2, r5
 800f45e:	4601      	mov	r1, r0
 800f460:	4620      	mov	r0, r4
 800f462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f466:	f000 b84f 	b.w	800f508 <_kill_r>
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d00a      	beq.n	800f484 <_raise_r+0x4c>
 800f46e:	1c59      	adds	r1, r3, #1
 800f470:	d103      	bne.n	800f47a <_raise_r+0x42>
 800f472:	2316      	movs	r3, #22
 800f474:	6003      	str	r3, [r0, #0]
 800f476:	2001      	movs	r0, #1
 800f478:	e7e7      	b.n	800f44a <_raise_r+0x12>
 800f47a:	2400      	movs	r4, #0
 800f47c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f480:	4628      	mov	r0, r5
 800f482:	4798      	blx	r3
 800f484:	2000      	movs	r0, #0
 800f486:	e7e0      	b.n	800f44a <_raise_r+0x12>

0800f488 <raise>:
 800f488:	4b02      	ldr	r3, [pc, #8]	; (800f494 <raise+0xc>)
 800f48a:	4601      	mov	r1, r0
 800f48c:	6818      	ldr	r0, [r3, #0]
 800f48e:	f7ff bfd3 	b.w	800f438 <_raise_r>
 800f492:	bf00      	nop
 800f494:	20000064 	.word	0x20000064

0800f498 <_localeconv_r>:
 800f498:	4800      	ldr	r0, [pc, #0]	; (800f49c <_localeconv_r+0x4>)
 800f49a:	4770      	bx	lr
 800f49c:	20000158 	.word	0x20000158

0800f4a0 <_close_r>:
 800f4a0:	b538      	push	{r3, r4, r5, lr}
 800f4a2:	4d06      	ldr	r5, [pc, #24]	; (800f4bc <_close_r+0x1c>)
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	4604      	mov	r4, r0
 800f4a8:	4608      	mov	r0, r1
 800f4aa:	602b      	str	r3, [r5, #0]
 800f4ac:	f7f6 fd6f 	bl	8005f8e <_close>
 800f4b0:	1c43      	adds	r3, r0, #1
 800f4b2:	d102      	bne.n	800f4ba <_close_r+0x1a>
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	b103      	cbz	r3, 800f4ba <_close_r+0x1a>
 800f4b8:	6023      	str	r3, [r4, #0]
 800f4ba:	bd38      	pop	{r3, r4, r5, pc}
 800f4bc:	20000700 	.word	0x20000700

0800f4c0 <_lseek_r>:
 800f4c0:	b538      	push	{r3, r4, r5, lr}
 800f4c2:	4d07      	ldr	r5, [pc, #28]	; (800f4e0 <_lseek_r+0x20>)
 800f4c4:	4604      	mov	r4, r0
 800f4c6:	4608      	mov	r0, r1
 800f4c8:	4611      	mov	r1, r2
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	602a      	str	r2, [r5, #0]
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	f7f6 fd84 	bl	8005fdc <_lseek>
 800f4d4:	1c43      	adds	r3, r0, #1
 800f4d6:	d102      	bne.n	800f4de <_lseek_r+0x1e>
 800f4d8:	682b      	ldr	r3, [r5, #0]
 800f4da:	b103      	cbz	r3, 800f4de <_lseek_r+0x1e>
 800f4dc:	6023      	str	r3, [r4, #0]
 800f4de:	bd38      	pop	{r3, r4, r5, pc}
 800f4e0:	20000700 	.word	0x20000700

0800f4e4 <_read_r>:
 800f4e4:	b538      	push	{r3, r4, r5, lr}
 800f4e6:	4d07      	ldr	r5, [pc, #28]	; (800f504 <_read_r+0x20>)
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	4608      	mov	r0, r1
 800f4ec:	4611      	mov	r1, r2
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	602a      	str	r2, [r5, #0]
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	f7f6 fd12 	bl	8005f1c <_read>
 800f4f8:	1c43      	adds	r3, r0, #1
 800f4fa:	d102      	bne.n	800f502 <_read_r+0x1e>
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	b103      	cbz	r3, 800f502 <_read_r+0x1e>
 800f500:	6023      	str	r3, [r4, #0]
 800f502:	bd38      	pop	{r3, r4, r5, pc}
 800f504:	20000700 	.word	0x20000700

0800f508 <_kill_r>:
 800f508:	b538      	push	{r3, r4, r5, lr}
 800f50a:	4d07      	ldr	r5, [pc, #28]	; (800f528 <_kill_r+0x20>)
 800f50c:	2300      	movs	r3, #0
 800f50e:	4604      	mov	r4, r0
 800f510:	4608      	mov	r0, r1
 800f512:	4611      	mov	r1, r2
 800f514:	602b      	str	r3, [r5, #0]
 800f516:	f7f6 fce7 	bl	8005ee8 <_kill>
 800f51a:	1c43      	adds	r3, r0, #1
 800f51c:	d102      	bne.n	800f524 <_kill_r+0x1c>
 800f51e:	682b      	ldr	r3, [r5, #0]
 800f520:	b103      	cbz	r3, 800f524 <_kill_r+0x1c>
 800f522:	6023      	str	r3, [r4, #0]
 800f524:	bd38      	pop	{r3, r4, r5, pc}
 800f526:	bf00      	nop
 800f528:	20000700 	.word	0x20000700

0800f52c <_getpid_r>:
 800f52c:	f7f6 bcd4 	b.w	8005ed8 <_getpid>

0800f530 <_sbrk_r>:
 800f530:	b538      	push	{r3, r4, r5, lr}
 800f532:	4d06      	ldr	r5, [pc, #24]	; (800f54c <_sbrk_r+0x1c>)
 800f534:	2300      	movs	r3, #0
 800f536:	4604      	mov	r4, r0
 800f538:	4608      	mov	r0, r1
 800f53a:	602b      	str	r3, [r5, #0]
 800f53c:	f7f6 fd5c 	bl	8005ff8 <_sbrk>
 800f540:	1c43      	adds	r3, r0, #1
 800f542:	d102      	bne.n	800f54a <_sbrk_r+0x1a>
 800f544:	682b      	ldr	r3, [r5, #0]
 800f546:	b103      	cbz	r3, 800f54a <_sbrk_r+0x1a>
 800f548:	6023      	str	r3, [r4, #0]
 800f54a:	bd38      	pop	{r3, r4, r5, pc}
 800f54c:	20000700 	.word	0x20000700

0800f550 <_write_r>:
 800f550:	b538      	push	{r3, r4, r5, lr}
 800f552:	4d07      	ldr	r5, [pc, #28]	; (800f570 <_write_r+0x20>)
 800f554:	4604      	mov	r4, r0
 800f556:	4608      	mov	r0, r1
 800f558:	4611      	mov	r1, r2
 800f55a:	2200      	movs	r2, #0
 800f55c:	602a      	str	r2, [r5, #0]
 800f55e:	461a      	mov	r2, r3
 800f560:	f7f6 fcf9 	bl	8005f56 <_write>
 800f564:	1c43      	adds	r3, r0, #1
 800f566:	d102      	bne.n	800f56e <_write_r+0x1e>
 800f568:	682b      	ldr	r3, [r5, #0]
 800f56a:	b103      	cbz	r3, 800f56e <_write_r+0x1e>
 800f56c:	6023      	str	r3, [r4, #0]
 800f56e:	bd38      	pop	{r3, r4, r5, pc}
 800f570:	20000700 	.word	0x20000700

0800f574 <__errno>:
 800f574:	4b01      	ldr	r3, [pc, #4]	; (800f57c <__errno+0x8>)
 800f576:	6818      	ldr	r0, [r3, #0]
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop
 800f57c:	20000064 	.word	0x20000064

0800f580 <__libc_init_array>:
 800f580:	b570      	push	{r4, r5, r6, lr}
 800f582:	4d0d      	ldr	r5, [pc, #52]	; (800f5b8 <__libc_init_array+0x38>)
 800f584:	4c0d      	ldr	r4, [pc, #52]	; (800f5bc <__libc_init_array+0x3c>)
 800f586:	1b64      	subs	r4, r4, r5
 800f588:	10a4      	asrs	r4, r4, #2
 800f58a:	2600      	movs	r6, #0
 800f58c:	42a6      	cmp	r6, r4
 800f58e:	d109      	bne.n	800f5a4 <__libc_init_array+0x24>
 800f590:	4d0b      	ldr	r5, [pc, #44]	; (800f5c0 <__libc_init_array+0x40>)
 800f592:	4c0c      	ldr	r4, [pc, #48]	; (800f5c4 <__libc_init_array+0x44>)
 800f594:	f003 fa7c 	bl	8012a90 <_init>
 800f598:	1b64      	subs	r4, r4, r5
 800f59a:	10a4      	asrs	r4, r4, #2
 800f59c:	2600      	movs	r6, #0
 800f59e:	42a6      	cmp	r6, r4
 800f5a0:	d105      	bne.n	800f5ae <__libc_init_array+0x2e>
 800f5a2:	bd70      	pop	{r4, r5, r6, pc}
 800f5a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5a8:	4798      	blx	r3
 800f5aa:	3601      	adds	r6, #1
 800f5ac:	e7ee      	b.n	800f58c <__libc_init_array+0xc>
 800f5ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5b2:	4798      	blx	r3
 800f5b4:	3601      	adds	r6, #1
 800f5b6:	e7f2      	b.n	800f59e <__libc_init_array+0x1e>
 800f5b8:	0801400c 	.word	0x0801400c
 800f5bc:	0801400c 	.word	0x0801400c
 800f5c0:	0801400c 	.word	0x0801400c
 800f5c4:	0801401c 	.word	0x0801401c

0800f5c8 <__retarget_lock_init_recursive>:
 800f5c8:	4770      	bx	lr

0800f5ca <__retarget_lock_acquire_recursive>:
 800f5ca:	4770      	bx	lr

0800f5cc <__retarget_lock_release_recursive>:
 800f5cc:	4770      	bx	lr

0800f5ce <memcpy>:
 800f5ce:	440a      	add	r2, r1
 800f5d0:	4291      	cmp	r1, r2
 800f5d2:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5d6:	d100      	bne.n	800f5da <memcpy+0xc>
 800f5d8:	4770      	bx	lr
 800f5da:	b510      	push	{r4, lr}
 800f5dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5e4:	4291      	cmp	r1, r2
 800f5e6:	d1f9      	bne.n	800f5dc <memcpy+0xe>
 800f5e8:	bd10      	pop	{r4, pc}
	...

0800f5ec <nanf>:
 800f5ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f5f4 <nanf+0x8>
 800f5f0:	4770      	bx	lr
 800f5f2:	bf00      	nop
 800f5f4:	7fc00000 	.word	0x7fc00000

0800f5f8 <quorem>:
 800f5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5fc:	6903      	ldr	r3, [r0, #16]
 800f5fe:	690c      	ldr	r4, [r1, #16]
 800f600:	42a3      	cmp	r3, r4
 800f602:	4607      	mov	r7, r0
 800f604:	db7e      	blt.n	800f704 <quorem+0x10c>
 800f606:	3c01      	subs	r4, #1
 800f608:	f101 0814 	add.w	r8, r1, #20
 800f60c:	f100 0514 	add.w	r5, r0, #20
 800f610:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f614:	9301      	str	r3, [sp, #4]
 800f616:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f61a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f61e:	3301      	adds	r3, #1
 800f620:	429a      	cmp	r2, r3
 800f622:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f626:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f62a:	fbb2 f6f3 	udiv	r6, r2, r3
 800f62e:	d331      	bcc.n	800f694 <quorem+0x9c>
 800f630:	f04f 0e00 	mov.w	lr, #0
 800f634:	4640      	mov	r0, r8
 800f636:	46ac      	mov	ip, r5
 800f638:	46f2      	mov	sl, lr
 800f63a:	f850 2b04 	ldr.w	r2, [r0], #4
 800f63e:	b293      	uxth	r3, r2
 800f640:	fb06 e303 	mla	r3, r6, r3, lr
 800f644:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f648:	0c1a      	lsrs	r2, r3, #16
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	ebaa 0303 	sub.w	r3, sl, r3
 800f650:	f8dc a000 	ldr.w	sl, [ip]
 800f654:	fa13 f38a 	uxtah	r3, r3, sl
 800f658:	fb06 220e 	mla	r2, r6, lr, r2
 800f65c:	9300      	str	r3, [sp, #0]
 800f65e:	9b00      	ldr	r3, [sp, #0]
 800f660:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f664:	b292      	uxth	r2, r2
 800f666:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f66a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f66e:	f8bd 3000 	ldrh.w	r3, [sp]
 800f672:	4581      	cmp	r9, r0
 800f674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f678:	f84c 3b04 	str.w	r3, [ip], #4
 800f67c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f680:	d2db      	bcs.n	800f63a <quorem+0x42>
 800f682:	f855 300b 	ldr.w	r3, [r5, fp]
 800f686:	b92b      	cbnz	r3, 800f694 <quorem+0x9c>
 800f688:	9b01      	ldr	r3, [sp, #4]
 800f68a:	3b04      	subs	r3, #4
 800f68c:	429d      	cmp	r5, r3
 800f68e:	461a      	mov	r2, r3
 800f690:	d32c      	bcc.n	800f6ec <quorem+0xf4>
 800f692:	613c      	str	r4, [r7, #16]
 800f694:	4638      	mov	r0, r7
 800f696:	f001 f93b 	bl	8010910 <__mcmp>
 800f69a:	2800      	cmp	r0, #0
 800f69c:	db22      	blt.n	800f6e4 <quorem+0xec>
 800f69e:	3601      	adds	r6, #1
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	2000      	movs	r0, #0
 800f6a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800f6a8:	f8d1 c000 	ldr.w	ip, [r1]
 800f6ac:	b293      	uxth	r3, r2
 800f6ae:	1ac3      	subs	r3, r0, r3
 800f6b0:	0c12      	lsrs	r2, r2, #16
 800f6b2:	fa13 f38c 	uxtah	r3, r3, ip
 800f6b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f6ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6c4:	45c1      	cmp	r9, r8
 800f6c6:	f841 3b04 	str.w	r3, [r1], #4
 800f6ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f6ce:	d2e9      	bcs.n	800f6a4 <quorem+0xac>
 800f6d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f6d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f6d8:	b922      	cbnz	r2, 800f6e4 <quorem+0xec>
 800f6da:	3b04      	subs	r3, #4
 800f6dc:	429d      	cmp	r5, r3
 800f6de:	461a      	mov	r2, r3
 800f6e0:	d30a      	bcc.n	800f6f8 <quorem+0x100>
 800f6e2:	613c      	str	r4, [r7, #16]
 800f6e4:	4630      	mov	r0, r6
 800f6e6:	b003      	add	sp, #12
 800f6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ec:	6812      	ldr	r2, [r2, #0]
 800f6ee:	3b04      	subs	r3, #4
 800f6f0:	2a00      	cmp	r2, #0
 800f6f2:	d1ce      	bne.n	800f692 <quorem+0x9a>
 800f6f4:	3c01      	subs	r4, #1
 800f6f6:	e7c9      	b.n	800f68c <quorem+0x94>
 800f6f8:	6812      	ldr	r2, [r2, #0]
 800f6fa:	3b04      	subs	r3, #4
 800f6fc:	2a00      	cmp	r2, #0
 800f6fe:	d1f0      	bne.n	800f6e2 <quorem+0xea>
 800f700:	3c01      	subs	r4, #1
 800f702:	e7eb      	b.n	800f6dc <quorem+0xe4>
 800f704:	2000      	movs	r0, #0
 800f706:	e7ee      	b.n	800f6e6 <quorem+0xee>

0800f708 <_dtoa_r>:
 800f708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f70c:	ed2d 8b04 	vpush	{d8-d9}
 800f710:	69c5      	ldr	r5, [r0, #28]
 800f712:	b093      	sub	sp, #76	; 0x4c
 800f714:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f718:	ec57 6b10 	vmov	r6, r7, d0
 800f71c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f720:	9107      	str	r1, [sp, #28]
 800f722:	4604      	mov	r4, r0
 800f724:	920a      	str	r2, [sp, #40]	; 0x28
 800f726:	930d      	str	r3, [sp, #52]	; 0x34
 800f728:	b975      	cbnz	r5, 800f748 <_dtoa_r+0x40>
 800f72a:	2010      	movs	r0, #16
 800f72c:	f7fe fde6 	bl	800e2fc <malloc>
 800f730:	4602      	mov	r2, r0
 800f732:	61e0      	str	r0, [r4, #28]
 800f734:	b920      	cbnz	r0, 800f740 <_dtoa_r+0x38>
 800f736:	4bae      	ldr	r3, [pc, #696]	; (800f9f0 <_dtoa_r+0x2e8>)
 800f738:	21ef      	movs	r1, #239	; 0xef
 800f73a:	48ae      	ldr	r0, [pc, #696]	; (800f9f4 <_dtoa_r+0x2ec>)
 800f73c:	f7fe fdae 	bl	800e29c <__assert_func>
 800f740:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f744:	6005      	str	r5, [r0, #0]
 800f746:	60c5      	str	r5, [r0, #12]
 800f748:	69e3      	ldr	r3, [r4, #28]
 800f74a:	6819      	ldr	r1, [r3, #0]
 800f74c:	b151      	cbz	r1, 800f764 <_dtoa_r+0x5c>
 800f74e:	685a      	ldr	r2, [r3, #4]
 800f750:	604a      	str	r2, [r1, #4]
 800f752:	2301      	movs	r3, #1
 800f754:	4093      	lsls	r3, r2
 800f756:	608b      	str	r3, [r1, #8]
 800f758:	4620      	mov	r0, r4
 800f75a:	f000 fe53 	bl	8010404 <_Bfree>
 800f75e:	69e3      	ldr	r3, [r4, #28]
 800f760:	2200      	movs	r2, #0
 800f762:	601a      	str	r2, [r3, #0]
 800f764:	1e3b      	subs	r3, r7, #0
 800f766:	bfbb      	ittet	lt
 800f768:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f76c:	9303      	strlt	r3, [sp, #12]
 800f76e:	2300      	movge	r3, #0
 800f770:	2201      	movlt	r2, #1
 800f772:	bfac      	ite	ge
 800f774:	f8c8 3000 	strge.w	r3, [r8]
 800f778:	f8c8 2000 	strlt.w	r2, [r8]
 800f77c:	4b9e      	ldr	r3, [pc, #632]	; (800f9f8 <_dtoa_r+0x2f0>)
 800f77e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f782:	ea33 0308 	bics.w	r3, r3, r8
 800f786:	d11b      	bne.n	800f7c0 <_dtoa_r+0xb8>
 800f788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f78a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f78e:	6013      	str	r3, [r2, #0]
 800f790:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f794:	4333      	orrs	r3, r6
 800f796:	f000 8593 	beq.w	80102c0 <_dtoa_r+0xbb8>
 800f79a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f79c:	b963      	cbnz	r3, 800f7b8 <_dtoa_r+0xb0>
 800f79e:	4b97      	ldr	r3, [pc, #604]	; (800f9fc <_dtoa_r+0x2f4>)
 800f7a0:	e027      	b.n	800f7f2 <_dtoa_r+0xea>
 800f7a2:	4b97      	ldr	r3, [pc, #604]	; (800fa00 <_dtoa_r+0x2f8>)
 800f7a4:	9300      	str	r3, [sp, #0]
 800f7a6:	3308      	adds	r3, #8
 800f7a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f7aa:	6013      	str	r3, [r2, #0]
 800f7ac:	9800      	ldr	r0, [sp, #0]
 800f7ae:	b013      	add	sp, #76	; 0x4c
 800f7b0:	ecbd 8b04 	vpop	{d8-d9}
 800f7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b8:	4b90      	ldr	r3, [pc, #576]	; (800f9fc <_dtoa_r+0x2f4>)
 800f7ba:	9300      	str	r3, [sp, #0]
 800f7bc:	3303      	adds	r3, #3
 800f7be:	e7f3      	b.n	800f7a8 <_dtoa_r+0xa0>
 800f7c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	ec51 0b17 	vmov	r0, r1, d7
 800f7ca:	eeb0 8a47 	vmov.f32	s16, s14
 800f7ce:	eef0 8a67 	vmov.f32	s17, s15
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	f7f1 f9a0 	bl	8000b18 <__aeabi_dcmpeq>
 800f7d8:	4681      	mov	r9, r0
 800f7da:	b160      	cbz	r0, 800f7f6 <_dtoa_r+0xee>
 800f7dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7de:	2301      	movs	r3, #1
 800f7e0:	6013      	str	r3, [r2, #0]
 800f7e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f000 8568 	beq.w	80102ba <_dtoa_r+0xbb2>
 800f7ea:	4b86      	ldr	r3, [pc, #536]	; (800fa04 <_dtoa_r+0x2fc>)
 800f7ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f7ee:	6013      	str	r3, [r2, #0]
 800f7f0:	3b01      	subs	r3, #1
 800f7f2:	9300      	str	r3, [sp, #0]
 800f7f4:	e7da      	b.n	800f7ac <_dtoa_r+0xa4>
 800f7f6:	aa10      	add	r2, sp, #64	; 0x40
 800f7f8:	a911      	add	r1, sp, #68	; 0x44
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	eeb0 0a48 	vmov.f32	s0, s16
 800f800:	eef0 0a68 	vmov.f32	s1, s17
 800f804:	f001 f99a 	bl	8010b3c <__d2b>
 800f808:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f80c:	4682      	mov	sl, r0
 800f80e:	2d00      	cmp	r5, #0
 800f810:	d07f      	beq.n	800f912 <_dtoa_r+0x20a>
 800f812:	ee18 3a90 	vmov	r3, s17
 800f816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f81a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f81e:	ec51 0b18 	vmov	r0, r1, d8
 800f822:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f82a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f82e:	4619      	mov	r1, r3
 800f830:	2200      	movs	r2, #0
 800f832:	4b75      	ldr	r3, [pc, #468]	; (800fa08 <_dtoa_r+0x300>)
 800f834:	f7f0 fd50 	bl	80002d8 <__aeabi_dsub>
 800f838:	a367      	add	r3, pc, #412	; (adr r3, 800f9d8 <_dtoa_r+0x2d0>)
 800f83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83e:	f7f0 ff03 	bl	8000648 <__aeabi_dmul>
 800f842:	a367      	add	r3, pc, #412	; (adr r3, 800f9e0 <_dtoa_r+0x2d8>)
 800f844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f848:	f7f0 fd48 	bl	80002dc <__adddf3>
 800f84c:	4606      	mov	r6, r0
 800f84e:	4628      	mov	r0, r5
 800f850:	460f      	mov	r7, r1
 800f852:	f7f0 fe8f 	bl	8000574 <__aeabi_i2d>
 800f856:	a364      	add	r3, pc, #400	; (adr r3, 800f9e8 <_dtoa_r+0x2e0>)
 800f858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85c:	f7f0 fef4 	bl	8000648 <__aeabi_dmul>
 800f860:	4602      	mov	r2, r0
 800f862:	460b      	mov	r3, r1
 800f864:	4630      	mov	r0, r6
 800f866:	4639      	mov	r1, r7
 800f868:	f7f0 fd38 	bl	80002dc <__adddf3>
 800f86c:	4606      	mov	r6, r0
 800f86e:	460f      	mov	r7, r1
 800f870:	f7f1 f99a 	bl	8000ba8 <__aeabi_d2iz>
 800f874:	2200      	movs	r2, #0
 800f876:	4683      	mov	fp, r0
 800f878:	2300      	movs	r3, #0
 800f87a:	4630      	mov	r0, r6
 800f87c:	4639      	mov	r1, r7
 800f87e:	f7f1 f955 	bl	8000b2c <__aeabi_dcmplt>
 800f882:	b148      	cbz	r0, 800f898 <_dtoa_r+0x190>
 800f884:	4658      	mov	r0, fp
 800f886:	f7f0 fe75 	bl	8000574 <__aeabi_i2d>
 800f88a:	4632      	mov	r2, r6
 800f88c:	463b      	mov	r3, r7
 800f88e:	f7f1 f943 	bl	8000b18 <__aeabi_dcmpeq>
 800f892:	b908      	cbnz	r0, 800f898 <_dtoa_r+0x190>
 800f894:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f898:	f1bb 0f16 	cmp.w	fp, #22
 800f89c:	d857      	bhi.n	800f94e <_dtoa_r+0x246>
 800f89e:	4b5b      	ldr	r3, [pc, #364]	; (800fa0c <_dtoa_r+0x304>)
 800f8a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a8:	ec51 0b18 	vmov	r0, r1, d8
 800f8ac:	f7f1 f93e 	bl	8000b2c <__aeabi_dcmplt>
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	d04e      	beq.n	800f952 <_dtoa_r+0x24a>
 800f8b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	930c      	str	r3, [sp, #48]	; 0x30
 800f8bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f8be:	1b5b      	subs	r3, r3, r5
 800f8c0:	1e5a      	subs	r2, r3, #1
 800f8c2:	bf45      	ittet	mi
 800f8c4:	f1c3 0301 	rsbmi	r3, r3, #1
 800f8c8:	9305      	strmi	r3, [sp, #20]
 800f8ca:	2300      	movpl	r3, #0
 800f8cc:	2300      	movmi	r3, #0
 800f8ce:	9206      	str	r2, [sp, #24]
 800f8d0:	bf54      	ite	pl
 800f8d2:	9305      	strpl	r3, [sp, #20]
 800f8d4:	9306      	strmi	r3, [sp, #24]
 800f8d6:	f1bb 0f00 	cmp.w	fp, #0
 800f8da:	db3c      	blt.n	800f956 <_dtoa_r+0x24e>
 800f8dc:	9b06      	ldr	r3, [sp, #24]
 800f8de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f8e2:	445b      	add	r3, fp
 800f8e4:	9306      	str	r3, [sp, #24]
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	9308      	str	r3, [sp, #32]
 800f8ea:	9b07      	ldr	r3, [sp, #28]
 800f8ec:	2b09      	cmp	r3, #9
 800f8ee:	d868      	bhi.n	800f9c2 <_dtoa_r+0x2ba>
 800f8f0:	2b05      	cmp	r3, #5
 800f8f2:	bfc4      	itt	gt
 800f8f4:	3b04      	subgt	r3, #4
 800f8f6:	9307      	strgt	r3, [sp, #28]
 800f8f8:	9b07      	ldr	r3, [sp, #28]
 800f8fa:	f1a3 0302 	sub.w	r3, r3, #2
 800f8fe:	bfcc      	ite	gt
 800f900:	2500      	movgt	r5, #0
 800f902:	2501      	movle	r5, #1
 800f904:	2b03      	cmp	r3, #3
 800f906:	f200 8085 	bhi.w	800fa14 <_dtoa_r+0x30c>
 800f90a:	e8df f003 	tbb	[pc, r3]
 800f90e:	3b2e      	.short	0x3b2e
 800f910:	5839      	.short	0x5839
 800f912:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f916:	441d      	add	r5, r3
 800f918:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f91c:	2b20      	cmp	r3, #32
 800f91e:	bfc1      	itttt	gt
 800f920:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f924:	fa08 f803 	lslgt.w	r8, r8, r3
 800f928:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f92c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f930:	bfd6      	itet	le
 800f932:	f1c3 0320 	rsble	r3, r3, #32
 800f936:	ea48 0003 	orrgt.w	r0, r8, r3
 800f93a:	fa06 f003 	lslle.w	r0, r6, r3
 800f93e:	f7f0 fe09 	bl	8000554 <__aeabi_ui2d>
 800f942:	2201      	movs	r2, #1
 800f944:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f948:	3d01      	subs	r5, #1
 800f94a:	920e      	str	r2, [sp, #56]	; 0x38
 800f94c:	e76f      	b.n	800f82e <_dtoa_r+0x126>
 800f94e:	2301      	movs	r3, #1
 800f950:	e7b3      	b.n	800f8ba <_dtoa_r+0x1b2>
 800f952:	900c      	str	r0, [sp, #48]	; 0x30
 800f954:	e7b2      	b.n	800f8bc <_dtoa_r+0x1b4>
 800f956:	9b05      	ldr	r3, [sp, #20]
 800f958:	eba3 030b 	sub.w	r3, r3, fp
 800f95c:	9305      	str	r3, [sp, #20]
 800f95e:	f1cb 0300 	rsb	r3, fp, #0
 800f962:	9308      	str	r3, [sp, #32]
 800f964:	2300      	movs	r3, #0
 800f966:	930b      	str	r3, [sp, #44]	; 0x2c
 800f968:	e7bf      	b.n	800f8ea <_dtoa_r+0x1e2>
 800f96a:	2300      	movs	r3, #0
 800f96c:	9309      	str	r3, [sp, #36]	; 0x24
 800f96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f970:	2b00      	cmp	r3, #0
 800f972:	dc52      	bgt.n	800fa1a <_dtoa_r+0x312>
 800f974:	2301      	movs	r3, #1
 800f976:	9301      	str	r3, [sp, #4]
 800f978:	9304      	str	r3, [sp, #16]
 800f97a:	461a      	mov	r2, r3
 800f97c:	920a      	str	r2, [sp, #40]	; 0x28
 800f97e:	e00b      	b.n	800f998 <_dtoa_r+0x290>
 800f980:	2301      	movs	r3, #1
 800f982:	e7f3      	b.n	800f96c <_dtoa_r+0x264>
 800f984:	2300      	movs	r3, #0
 800f986:	9309      	str	r3, [sp, #36]	; 0x24
 800f988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f98a:	445b      	add	r3, fp
 800f98c:	9301      	str	r3, [sp, #4]
 800f98e:	3301      	adds	r3, #1
 800f990:	2b01      	cmp	r3, #1
 800f992:	9304      	str	r3, [sp, #16]
 800f994:	bfb8      	it	lt
 800f996:	2301      	movlt	r3, #1
 800f998:	69e0      	ldr	r0, [r4, #28]
 800f99a:	2100      	movs	r1, #0
 800f99c:	2204      	movs	r2, #4
 800f99e:	f102 0614 	add.w	r6, r2, #20
 800f9a2:	429e      	cmp	r6, r3
 800f9a4:	d93d      	bls.n	800fa22 <_dtoa_r+0x31a>
 800f9a6:	6041      	str	r1, [r0, #4]
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	f000 fceb 	bl	8010384 <_Balloc>
 800f9ae:	9000      	str	r0, [sp, #0]
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	d139      	bne.n	800fa28 <_dtoa_r+0x320>
 800f9b4:	4b16      	ldr	r3, [pc, #88]	; (800fa10 <_dtoa_r+0x308>)
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	f240 11af 	movw	r1, #431	; 0x1af
 800f9bc:	e6bd      	b.n	800f73a <_dtoa_r+0x32>
 800f9be:	2301      	movs	r3, #1
 800f9c0:	e7e1      	b.n	800f986 <_dtoa_r+0x27e>
 800f9c2:	2501      	movs	r5, #1
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	9307      	str	r3, [sp, #28]
 800f9c8:	9509      	str	r5, [sp, #36]	; 0x24
 800f9ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ce:	9301      	str	r3, [sp, #4]
 800f9d0:	9304      	str	r3, [sp, #16]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	2312      	movs	r3, #18
 800f9d6:	e7d1      	b.n	800f97c <_dtoa_r+0x274>
 800f9d8:	636f4361 	.word	0x636f4361
 800f9dc:	3fd287a7 	.word	0x3fd287a7
 800f9e0:	8b60c8b3 	.word	0x8b60c8b3
 800f9e4:	3fc68a28 	.word	0x3fc68a28
 800f9e8:	509f79fb 	.word	0x509f79fb
 800f9ec:	3fd34413 	.word	0x3fd34413
 800f9f0:	08013c5a 	.word	0x08013c5a
 800f9f4:	08013c71 	.word	0x08013c71
 800f9f8:	7ff00000 	.word	0x7ff00000
 800f9fc:	08013c56 	.word	0x08013c56
 800fa00:	08013c4d 	.word	0x08013c4d
 800fa04:	08013c25 	.word	0x08013c25
 800fa08:	3ff80000 	.word	0x3ff80000
 800fa0c:	08013d60 	.word	0x08013d60
 800fa10:	08013cc9 	.word	0x08013cc9
 800fa14:	2301      	movs	r3, #1
 800fa16:	9309      	str	r3, [sp, #36]	; 0x24
 800fa18:	e7d7      	b.n	800f9ca <_dtoa_r+0x2c2>
 800fa1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa1c:	9301      	str	r3, [sp, #4]
 800fa1e:	9304      	str	r3, [sp, #16]
 800fa20:	e7ba      	b.n	800f998 <_dtoa_r+0x290>
 800fa22:	3101      	adds	r1, #1
 800fa24:	0052      	lsls	r2, r2, #1
 800fa26:	e7ba      	b.n	800f99e <_dtoa_r+0x296>
 800fa28:	69e3      	ldr	r3, [r4, #28]
 800fa2a:	9a00      	ldr	r2, [sp, #0]
 800fa2c:	601a      	str	r2, [r3, #0]
 800fa2e:	9b04      	ldr	r3, [sp, #16]
 800fa30:	2b0e      	cmp	r3, #14
 800fa32:	f200 80a8 	bhi.w	800fb86 <_dtoa_r+0x47e>
 800fa36:	2d00      	cmp	r5, #0
 800fa38:	f000 80a5 	beq.w	800fb86 <_dtoa_r+0x47e>
 800fa3c:	f1bb 0f00 	cmp.w	fp, #0
 800fa40:	dd38      	ble.n	800fab4 <_dtoa_r+0x3ac>
 800fa42:	4bc0      	ldr	r3, [pc, #768]	; (800fd44 <_dtoa_r+0x63c>)
 800fa44:	f00b 020f 	and.w	r2, fp, #15
 800fa48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fa50:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fa54:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fa58:	d019      	beq.n	800fa8e <_dtoa_r+0x386>
 800fa5a:	4bbb      	ldr	r3, [pc, #748]	; (800fd48 <_dtoa_r+0x640>)
 800fa5c:	ec51 0b18 	vmov	r0, r1, d8
 800fa60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fa64:	f7f0 ff1a 	bl	800089c <__aeabi_ddiv>
 800fa68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa6c:	f008 080f 	and.w	r8, r8, #15
 800fa70:	2503      	movs	r5, #3
 800fa72:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800fd48 <_dtoa_r+0x640>
 800fa76:	f1b8 0f00 	cmp.w	r8, #0
 800fa7a:	d10a      	bne.n	800fa92 <_dtoa_r+0x38a>
 800fa7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa80:	4632      	mov	r2, r6
 800fa82:	463b      	mov	r3, r7
 800fa84:	f7f0 ff0a 	bl	800089c <__aeabi_ddiv>
 800fa88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa8c:	e02b      	b.n	800fae6 <_dtoa_r+0x3de>
 800fa8e:	2502      	movs	r5, #2
 800fa90:	e7ef      	b.n	800fa72 <_dtoa_r+0x36a>
 800fa92:	f018 0f01 	tst.w	r8, #1
 800fa96:	d008      	beq.n	800faaa <_dtoa_r+0x3a2>
 800fa98:	4630      	mov	r0, r6
 800fa9a:	4639      	mov	r1, r7
 800fa9c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800faa0:	f7f0 fdd2 	bl	8000648 <__aeabi_dmul>
 800faa4:	3501      	adds	r5, #1
 800faa6:	4606      	mov	r6, r0
 800faa8:	460f      	mov	r7, r1
 800faaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800faae:	f109 0908 	add.w	r9, r9, #8
 800fab2:	e7e0      	b.n	800fa76 <_dtoa_r+0x36e>
 800fab4:	f000 809f 	beq.w	800fbf6 <_dtoa_r+0x4ee>
 800fab8:	f1cb 0600 	rsb	r6, fp, #0
 800fabc:	4ba1      	ldr	r3, [pc, #644]	; (800fd44 <_dtoa_r+0x63c>)
 800fabe:	4fa2      	ldr	r7, [pc, #648]	; (800fd48 <_dtoa_r+0x640>)
 800fac0:	f006 020f 	and.w	r2, r6, #15
 800fac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800facc:	ec51 0b18 	vmov	r0, r1, d8
 800fad0:	f7f0 fdba 	bl	8000648 <__aeabi_dmul>
 800fad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fad8:	1136      	asrs	r6, r6, #4
 800fada:	2300      	movs	r3, #0
 800fadc:	2502      	movs	r5, #2
 800fade:	2e00      	cmp	r6, #0
 800fae0:	d17e      	bne.n	800fbe0 <_dtoa_r+0x4d8>
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d1d0      	bne.n	800fa88 <_dtoa_r+0x380>
 800fae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fae8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800faec:	2b00      	cmp	r3, #0
 800faee:	f000 8084 	beq.w	800fbfa <_dtoa_r+0x4f2>
 800faf2:	4b96      	ldr	r3, [pc, #600]	; (800fd4c <_dtoa_r+0x644>)
 800faf4:	2200      	movs	r2, #0
 800faf6:	4640      	mov	r0, r8
 800faf8:	4649      	mov	r1, r9
 800fafa:	f7f1 f817 	bl	8000b2c <__aeabi_dcmplt>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	d07b      	beq.n	800fbfa <_dtoa_r+0x4f2>
 800fb02:	9b04      	ldr	r3, [sp, #16]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d078      	beq.n	800fbfa <_dtoa_r+0x4f2>
 800fb08:	9b01      	ldr	r3, [sp, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	dd39      	ble.n	800fb82 <_dtoa_r+0x47a>
 800fb0e:	4b90      	ldr	r3, [pc, #576]	; (800fd50 <_dtoa_r+0x648>)
 800fb10:	2200      	movs	r2, #0
 800fb12:	4640      	mov	r0, r8
 800fb14:	4649      	mov	r1, r9
 800fb16:	f7f0 fd97 	bl	8000648 <__aeabi_dmul>
 800fb1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb1e:	9e01      	ldr	r6, [sp, #4]
 800fb20:	f10b 37ff 	add.w	r7, fp, #4294967295
 800fb24:	3501      	adds	r5, #1
 800fb26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	f7f0 fd22 	bl	8000574 <__aeabi_i2d>
 800fb30:	4642      	mov	r2, r8
 800fb32:	464b      	mov	r3, r9
 800fb34:	f7f0 fd88 	bl	8000648 <__aeabi_dmul>
 800fb38:	4b86      	ldr	r3, [pc, #536]	; (800fd54 <_dtoa_r+0x64c>)
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	f7f0 fbce 	bl	80002dc <__adddf3>
 800fb40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fb44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb48:	9303      	str	r3, [sp, #12]
 800fb4a:	2e00      	cmp	r6, #0
 800fb4c:	d158      	bne.n	800fc00 <_dtoa_r+0x4f8>
 800fb4e:	4b82      	ldr	r3, [pc, #520]	; (800fd58 <_dtoa_r+0x650>)
 800fb50:	2200      	movs	r2, #0
 800fb52:	4640      	mov	r0, r8
 800fb54:	4649      	mov	r1, r9
 800fb56:	f7f0 fbbf 	bl	80002d8 <__aeabi_dsub>
 800fb5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb5e:	4680      	mov	r8, r0
 800fb60:	4689      	mov	r9, r1
 800fb62:	f7f1 f801 	bl	8000b68 <__aeabi_dcmpgt>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	f040 8296 	bne.w	8010098 <_dtoa_r+0x990>
 800fb6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fb70:	4640      	mov	r0, r8
 800fb72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb76:	4649      	mov	r1, r9
 800fb78:	f7f0 ffd8 	bl	8000b2c <__aeabi_dcmplt>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	f040 8289 	bne.w	8010094 <_dtoa_r+0x98c>
 800fb82:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fb86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	f2c0 814e 	blt.w	800fe2a <_dtoa_r+0x722>
 800fb8e:	f1bb 0f0e 	cmp.w	fp, #14
 800fb92:	f300 814a 	bgt.w	800fe2a <_dtoa_r+0x722>
 800fb96:	4b6b      	ldr	r3, [pc, #428]	; (800fd44 <_dtoa_r+0x63c>)
 800fb98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fb9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	f280 80dc 	bge.w	800fd60 <_dtoa_r+0x658>
 800fba8:	9b04      	ldr	r3, [sp, #16]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	f300 80d8 	bgt.w	800fd60 <_dtoa_r+0x658>
 800fbb0:	f040 826f 	bne.w	8010092 <_dtoa_r+0x98a>
 800fbb4:	4b68      	ldr	r3, [pc, #416]	; (800fd58 <_dtoa_r+0x650>)
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	4640      	mov	r0, r8
 800fbba:	4649      	mov	r1, r9
 800fbbc:	f7f0 fd44 	bl	8000648 <__aeabi_dmul>
 800fbc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fbc4:	f7f0 ffc6 	bl	8000b54 <__aeabi_dcmpge>
 800fbc8:	9e04      	ldr	r6, [sp, #16]
 800fbca:	4637      	mov	r7, r6
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	f040 8245 	bne.w	801005c <_dtoa_r+0x954>
 800fbd2:	9d00      	ldr	r5, [sp, #0]
 800fbd4:	2331      	movs	r3, #49	; 0x31
 800fbd6:	f805 3b01 	strb.w	r3, [r5], #1
 800fbda:	f10b 0b01 	add.w	fp, fp, #1
 800fbde:	e241      	b.n	8010064 <_dtoa_r+0x95c>
 800fbe0:	07f2      	lsls	r2, r6, #31
 800fbe2:	d505      	bpl.n	800fbf0 <_dtoa_r+0x4e8>
 800fbe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbe8:	f7f0 fd2e 	bl	8000648 <__aeabi_dmul>
 800fbec:	3501      	adds	r5, #1
 800fbee:	2301      	movs	r3, #1
 800fbf0:	1076      	asrs	r6, r6, #1
 800fbf2:	3708      	adds	r7, #8
 800fbf4:	e773      	b.n	800fade <_dtoa_r+0x3d6>
 800fbf6:	2502      	movs	r5, #2
 800fbf8:	e775      	b.n	800fae6 <_dtoa_r+0x3de>
 800fbfa:	9e04      	ldr	r6, [sp, #16]
 800fbfc:	465f      	mov	r7, fp
 800fbfe:	e792      	b.n	800fb26 <_dtoa_r+0x41e>
 800fc00:	9900      	ldr	r1, [sp, #0]
 800fc02:	4b50      	ldr	r3, [pc, #320]	; (800fd44 <_dtoa_r+0x63c>)
 800fc04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc08:	4431      	add	r1, r6
 800fc0a:	9102      	str	r1, [sp, #8]
 800fc0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc0e:	eeb0 9a47 	vmov.f32	s18, s14
 800fc12:	eef0 9a67 	vmov.f32	s19, s15
 800fc16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fc1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fc1e:	2900      	cmp	r1, #0
 800fc20:	d044      	beq.n	800fcac <_dtoa_r+0x5a4>
 800fc22:	494e      	ldr	r1, [pc, #312]	; (800fd5c <_dtoa_r+0x654>)
 800fc24:	2000      	movs	r0, #0
 800fc26:	f7f0 fe39 	bl	800089c <__aeabi_ddiv>
 800fc2a:	ec53 2b19 	vmov	r2, r3, d9
 800fc2e:	f7f0 fb53 	bl	80002d8 <__aeabi_dsub>
 800fc32:	9d00      	ldr	r5, [sp, #0]
 800fc34:	ec41 0b19 	vmov	d9, r0, r1
 800fc38:	4649      	mov	r1, r9
 800fc3a:	4640      	mov	r0, r8
 800fc3c:	f7f0 ffb4 	bl	8000ba8 <__aeabi_d2iz>
 800fc40:	4606      	mov	r6, r0
 800fc42:	f7f0 fc97 	bl	8000574 <__aeabi_i2d>
 800fc46:	4602      	mov	r2, r0
 800fc48:	460b      	mov	r3, r1
 800fc4a:	4640      	mov	r0, r8
 800fc4c:	4649      	mov	r1, r9
 800fc4e:	f7f0 fb43 	bl	80002d8 <__aeabi_dsub>
 800fc52:	3630      	adds	r6, #48	; 0x30
 800fc54:	f805 6b01 	strb.w	r6, [r5], #1
 800fc58:	ec53 2b19 	vmov	r2, r3, d9
 800fc5c:	4680      	mov	r8, r0
 800fc5e:	4689      	mov	r9, r1
 800fc60:	f7f0 ff64 	bl	8000b2c <__aeabi_dcmplt>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	d164      	bne.n	800fd32 <_dtoa_r+0x62a>
 800fc68:	4642      	mov	r2, r8
 800fc6a:	464b      	mov	r3, r9
 800fc6c:	4937      	ldr	r1, [pc, #220]	; (800fd4c <_dtoa_r+0x644>)
 800fc6e:	2000      	movs	r0, #0
 800fc70:	f7f0 fb32 	bl	80002d8 <__aeabi_dsub>
 800fc74:	ec53 2b19 	vmov	r2, r3, d9
 800fc78:	f7f0 ff58 	bl	8000b2c <__aeabi_dcmplt>
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	f040 80b6 	bne.w	800fdee <_dtoa_r+0x6e6>
 800fc82:	9b02      	ldr	r3, [sp, #8]
 800fc84:	429d      	cmp	r5, r3
 800fc86:	f43f af7c 	beq.w	800fb82 <_dtoa_r+0x47a>
 800fc8a:	4b31      	ldr	r3, [pc, #196]	; (800fd50 <_dtoa_r+0x648>)
 800fc8c:	ec51 0b19 	vmov	r0, r1, d9
 800fc90:	2200      	movs	r2, #0
 800fc92:	f7f0 fcd9 	bl	8000648 <__aeabi_dmul>
 800fc96:	4b2e      	ldr	r3, [pc, #184]	; (800fd50 <_dtoa_r+0x648>)
 800fc98:	ec41 0b19 	vmov	d9, r0, r1
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	4640      	mov	r0, r8
 800fca0:	4649      	mov	r1, r9
 800fca2:	f7f0 fcd1 	bl	8000648 <__aeabi_dmul>
 800fca6:	4680      	mov	r8, r0
 800fca8:	4689      	mov	r9, r1
 800fcaa:	e7c5      	b.n	800fc38 <_dtoa_r+0x530>
 800fcac:	ec51 0b17 	vmov	r0, r1, d7
 800fcb0:	f7f0 fcca 	bl	8000648 <__aeabi_dmul>
 800fcb4:	9b02      	ldr	r3, [sp, #8]
 800fcb6:	9d00      	ldr	r5, [sp, #0]
 800fcb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800fcba:	ec41 0b19 	vmov	d9, r0, r1
 800fcbe:	4649      	mov	r1, r9
 800fcc0:	4640      	mov	r0, r8
 800fcc2:	f7f0 ff71 	bl	8000ba8 <__aeabi_d2iz>
 800fcc6:	4606      	mov	r6, r0
 800fcc8:	f7f0 fc54 	bl	8000574 <__aeabi_i2d>
 800fccc:	3630      	adds	r6, #48	; 0x30
 800fcce:	4602      	mov	r2, r0
 800fcd0:	460b      	mov	r3, r1
 800fcd2:	4640      	mov	r0, r8
 800fcd4:	4649      	mov	r1, r9
 800fcd6:	f7f0 faff 	bl	80002d8 <__aeabi_dsub>
 800fcda:	f805 6b01 	strb.w	r6, [r5], #1
 800fcde:	9b02      	ldr	r3, [sp, #8]
 800fce0:	429d      	cmp	r5, r3
 800fce2:	4680      	mov	r8, r0
 800fce4:	4689      	mov	r9, r1
 800fce6:	f04f 0200 	mov.w	r2, #0
 800fcea:	d124      	bne.n	800fd36 <_dtoa_r+0x62e>
 800fcec:	4b1b      	ldr	r3, [pc, #108]	; (800fd5c <_dtoa_r+0x654>)
 800fcee:	ec51 0b19 	vmov	r0, r1, d9
 800fcf2:	f7f0 faf3 	bl	80002dc <__adddf3>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	4640      	mov	r0, r8
 800fcfc:	4649      	mov	r1, r9
 800fcfe:	f7f0 ff33 	bl	8000b68 <__aeabi_dcmpgt>
 800fd02:	2800      	cmp	r0, #0
 800fd04:	d173      	bne.n	800fdee <_dtoa_r+0x6e6>
 800fd06:	ec53 2b19 	vmov	r2, r3, d9
 800fd0a:	4914      	ldr	r1, [pc, #80]	; (800fd5c <_dtoa_r+0x654>)
 800fd0c:	2000      	movs	r0, #0
 800fd0e:	f7f0 fae3 	bl	80002d8 <__aeabi_dsub>
 800fd12:	4602      	mov	r2, r0
 800fd14:	460b      	mov	r3, r1
 800fd16:	4640      	mov	r0, r8
 800fd18:	4649      	mov	r1, r9
 800fd1a:	f7f0 ff07 	bl	8000b2c <__aeabi_dcmplt>
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	f43f af2f 	beq.w	800fb82 <_dtoa_r+0x47a>
 800fd24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fd26:	1e6b      	subs	r3, r5, #1
 800fd28:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fd2e:	2b30      	cmp	r3, #48	; 0x30
 800fd30:	d0f8      	beq.n	800fd24 <_dtoa_r+0x61c>
 800fd32:	46bb      	mov	fp, r7
 800fd34:	e04a      	b.n	800fdcc <_dtoa_r+0x6c4>
 800fd36:	4b06      	ldr	r3, [pc, #24]	; (800fd50 <_dtoa_r+0x648>)
 800fd38:	f7f0 fc86 	bl	8000648 <__aeabi_dmul>
 800fd3c:	4680      	mov	r8, r0
 800fd3e:	4689      	mov	r9, r1
 800fd40:	e7bd      	b.n	800fcbe <_dtoa_r+0x5b6>
 800fd42:	bf00      	nop
 800fd44:	08013d60 	.word	0x08013d60
 800fd48:	08013d38 	.word	0x08013d38
 800fd4c:	3ff00000 	.word	0x3ff00000
 800fd50:	40240000 	.word	0x40240000
 800fd54:	401c0000 	.word	0x401c0000
 800fd58:	40140000 	.word	0x40140000
 800fd5c:	3fe00000 	.word	0x3fe00000
 800fd60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fd64:	9d00      	ldr	r5, [sp, #0]
 800fd66:	4642      	mov	r2, r8
 800fd68:	464b      	mov	r3, r9
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	4639      	mov	r1, r7
 800fd6e:	f7f0 fd95 	bl	800089c <__aeabi_ddiv>
 800fd72:	f7f0 ff19 	bl	8000ba8 <__aeabi_d2iz>
 800fd76:	9001      	str	r0, [sp, #4]
 800fd78:	f7f0 fbfc 	bl	8000574 <__aeabi_i2d>
 800fd7c:	4642      	mov	r2, r8
 800fd7e:	464b      	mov	r3, r9
 800fd80:	f7f0 fc62 	bl	8000648 <__aeabi_dmul>
 800fd84:	4602      	mov	r2, r0
 800fd86:	460b      	mov	r3, r1
 800fd88:	4630      	mov	r0, r6
 800fd8a:	4639      	mov	r1, r7
 800fd8c:	f7f0 faa4 	bl	80002d8 <__aeabi_dsub>
 800fd90:	9e01      	ldr	r6, [sp, #4]
 800fd92:	9f04      	ldr	r7, [sp, #16]
 800fd94:	3630      	adds	r6, #48	; 0x30
 800fd96:	f805 6b01 	strb.w	r6, [r5], #1
 800fd9a:	9e00      	ldr	r6, [sp, #0]
 800fd9c:	1bae      	subs	r6, r5, r6
 800fd9e:	42b7      	cmp	r7, r6
 800fda0:	4602      	mov	r2, r0
 800fda2:	460b      	mov	r3, r1
 800fda4:	d134      	bne.n	800fe10 <_dtoa_r+0x708>
 800fda6:	f7f0 fa99 	bl	80002dc <__adddf3>
 800fdaa:	4642      	mov	r2, r8
 800fdac:	464b      	mov	r3, r9
 800fdae:	4606      	mov	r6, r0
 800fdb0:	460f      	mov	r7, r1
 800fdb2:	f7f0 fed9 	bl	8000b68 <__aeabi_dcmpgt>
 800fdb6:	b9c8      	cbnz	r0, 800fdec <_dtoa_r+0x6e4>
 800fdb8:	4642      	mov	r2, r8
 800fdba:	464b      	mov	r3, r9
 800fdbc:	4630      	mov	r0, r6
 800fdbe:	4639      	mov	r1, r7
 800fdc0:	f7f0 feaa 	bl	8000b18 <__aeabi_dcmpeq>
 800fdc4:	b110      	cbz	r0, 800fdcc <_dtoa_r+0x6c4>
 800fdc6:	9b01      	ldr	r3, [sp, #4]
 800fdc8:	07db      	lsls	r3, r3, #31
 800fdca:	d40f      	bmi.n	800fdec <_dtoa_r+0x6e4>
 800fdcc:	4651      	mov	r1, sl
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f000 fb18 	bl	8010404 <_Bfree>
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fdd8:	702b      	strb	r3, [r5, #0]
 800fdda:	f10b 0301 	add.w	r3, fp, #1
 800fdde:	6013      	str	r3, [r2, #0]
 800fde0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	f43f ace2 	beq.w	800f7ac <_dtoa_r+0xa4>
 800fde8:	601d      	str	r5, [r3, #0]
 800fdea:	e4df      	b.n	800f7ac <_dtoa_r+0xa4>
 800fdec:	465f      	mov	r7, fp
 800fdee:	462b      	mov	r3, r5
 800fdf0:	461d      	mov	r5, r3
 800fdf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fdf6:	2a39      	cmp	r2, #57	; 0x39
 800fdf8:	d106      	bne.n	800fe08 <_dtoa_r+0x700>
 800fdfa:	9a00      	ldr	r2, [sp, #0]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d1f7      	bne.n	800fdf0 <_dtoa_r+0x6e8>
 800fe00:	9900      	ldr	r1, [sp, #0]
 800fe02:	2230      	movs	r2, #48	; 0x30
 800fe04:	3701      	adds	r7, #1
 800fe06:	700a      	strb	r2, [r1, #0]
 800fe08:	781a      	ldrb	r2, [r3, #0]
 800fe0a:	3201      	adds	r2, #1
 800fe0c:	701a      	strb	r2, [r3, #0]
 800fe0e:	e790      	b.n	800fd32 <_dtoa_r+0x62a>
 800fe10:	4ba3      	ldr	r3, [pc, #652]	; (80100a0 <_dtoa_r+0x998>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	f7f0 fc18 	bl	8000648 <__aeabi_dmul>
 800fe18:	2200      	movs	r2, #0
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	4606      	mov	r6, r0
 800fe1e:	460f      	mov	r7, r1
 800fe20:	f7f0 fe7a 	bl	8000b18 <__aeabi_dcmpeq>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d09e      	beq.n	800fd66 <_dtoa_r+0x65e>
 800fe28:	e7d0      	b.n	800fdcc <_dtoa_r+0x6c4>
 800fe2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe2c:	2a00      	cmp	r2, #0
 800fe2e:	f000 80ca 	beq.w	800ffc6 <_dtoa_r+0x8be>
 800fe32:	9a07      	ldr	r2, [sp, #28]
 800fe34:	2a01      	cmp	r2, #1
 800fe36:	f300 80ad 	bgt.w	800ff94 <_dtoa_r+0x88c>
 800fe3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe3c:	2a00      	cmp	r2, #0
 800fe3e:	f000 80a5 	beq.w	800ff8c <_dtoa_r+0x884>
 800fe42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fe46:	9e08      	ldr	r6, [sp, #32]
 800fe48:	9d05      	ldr	r5, [sp, #20]
 800fe4a:	9a05      	ldr	r2, [sp, #20]
 800fe4c:	441a      	add	r2, r3
 800fe4e:	9205      	str	r2, [sp, #20]
 800fe50:	9a06      	ldr	r2, [sp, #24]
 800fe52:	2101      	movs	r1, #1
 800fe54:	441a      	add	r2, r3
 800fe56:	4620      	mov	r0, r4
 800fe58:	9206      	str	r2, [sp, #24]
 800fe5a:	f000 fbd3 	bl	8010604 <__i2b>
 800fe5e:	4607      	mov	r7, r0
 800fe60:	b165      	cbz	r5, 800fe7c <_dtoa_r+0x774>
 800fe62:	9b06      	ldr	r3, [sp, #24]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	dd09      	ble.n	800fe7c <_dtoa_r+0x774>
 800fe68:	42ab      	cmp	r3, r5
 800fe6a:	9a05      	ldr	r2, [sp, #20]
 800fe6c:	bfa8      	it	ge
 800fe6e:	462b      	movge	r3, r5
 800fe70:	1ad2      	subs	r2, r2, r3
 800fe72:	9205      	str	r2, [sp, #20]
 800fe74:	9a06      	ldr	r2, [sp, #24]
 800fe76:	1aed      	subs	r5, r5, r3
 800fe78:	1ad3      	subs	r3, r2, r3
 800fe7a:	9306      	str	r3, [sp, #24]
 800fe7c:	9b08      	ldr	r3, [sp, #32]
 800fe7e:	b1f3      	cbz	r3, 800febe <_dtoa_r+0x7b6>
 800fe80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	f000 80a3 	beq.w	800ffce <_dtoa_r+0x8c6>
 800fe88:	2e00      	cmp	r6, #0
 800fe8a:	dd10      	ble.n	800feae <_dtoa_r+0x7a6>
 800fe8c:	4639      	mov	r1, r7
 800fe8e:	4632      	mov	r2, r6
 800fe90:	4620      	mov	r0, r4
 800fe92:	f000 fc77 	bl	8010784 <__pow5mult>
 800fe96:	4652      	mov	r2, sl
 800fe98:	4601      	mov	r1, r0
 800fe9a:	4607      	mov	r7, r0
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	f000 fbc7 	bl	8010630 <__multiply>
 800fea2:	4651      	mov	r1, sl
 800fea4:	4680      	mov	r8, r0
 800fea6:	4620      	mov	r0, r4
 800fea8:	f000 faac 	bl	8010404 <_Bfree>
 800feac:	46c2      	mov	sl, r8
 800feae:	9b08      	ldr	r3, [sp, #32]
 800feb0:	1b9a      	subs	r2, r3, r6
 800feb2:	d004      	beq.n	800febe <_dtoa_r+0x7b6>
 800feb4:	4651      	mov	r1, sl
 800feb6:	4620      	mov	r0, r4
 800feb8:	f000 fc64 	bl	8010784 <__pow5mult>
 800febc:	4682      	mov	sl, r0
 800febe:	2101      	movs	r1, #1
 800fec0:	4620      	mov	r0, r4
 800fec2:	f000 fb9f 	bl	8010604 <__i2b>
 800fec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fec8:	2b00      	cmp	r3, #0
 800feca:	4606      	mov	r6, r0
 800fecc:	f340 8081 	ble.w	800ffd2 <_dtoa_r+0x8ca>
 800fed0:	461a      	mov	r2, r3
 800fed2:	4601      	mov	r1, r0
 800fed4:	4620      	mov	r0, r4
 800fed6:	f000 fc55 	bl	8010784 <__pow5mult>
 800feda:	9b07      	ldr	r3, [sp, #28]
 800fedc:	2b01      	cmp	r3, #1
 800fede:	4606      	mov	r6, r0
 800fee0:	dd7a      	ble.n	800ffd8 <_dtoa_r+0x8d0>
 800fee2:	f04f 0800 	mov.w	r8, #0
 800fee6:	6933      	ldr	r3, [r6, #16]
 800fee8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800feec:	6918      	ldr	r0, [r3, #16]
 800feee:	f000 fb3b 	bl	8010568 <__hi0bits>
 800fef2:	f1c0 0020 	rsb	r0, r0, #32
 800fef6:	9b06      	ldr	r3, [sp, #24]
 800fef8:	4418      	add	r0, r3
 800fefa:	f010 001f 	ands.w	r0, r0, #31
 800fefe:	f000 8094 	beq.w	801002a <_dtoa_r+0x922>
 800ff02:	f1c0 0320 	rsb	r3, r0, #32
 800ff06:	2b04      	cmp	r3, #4
 800ff08:	f340 8085 	ble.w	8010016 <_dtoa_r+0x90e>
 800ff0c:	9b05      	ldr	r3, [sp, #20]
 800ff0e:	f1c0 001c 	rsb	r0, r0, #28
 800ff12:	4403      	add	r3, r0
 800ff14:	9305      	str	r3, [sp, #20]
 800ff16:	9b06      	ldr	r3, [sp, #24]
 800ff18:	4403      	add	r3, r0
 800ff1a:	4405      	add	r5, r0
 800ff1c:	9306      	str	r3, [sp, #24]
 800ff1e:	9b05      	ldr	r3, [sp, #20]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	dd05      	ble.n	800ff30 <_dtoa_r+0x828>
 800ff24:	4651      	mov	r1, sl
 800ff26:	461a      	mov	r2, r3
 800ff28:	4620      	mov	r0, r4
 800ff2a:	f000 fc85 	bl	8010838 <__lshift>
 800ff2e:	4682      	mov	sl, r0
 800ff30:	9b06      	ldr	r3, [sp, #24]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	dd05      	ble.n	800ff42 <_dtoa_r+0x83a>
 800ff36:	4631      	mov	r1, r6
 800ff38:	461a      	mov	r2, r3
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	f000 fc7c 	bl	8010838 <__lshift>
 800ff40:	4606      	mov	r6, r0
 800ff42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d072      	beq.n	801002e <_dtoa_r+0x926>
 800ff48:	4631      	mov	r1, r6
 800ff4a:	4650      	mov	r0, sl
 800ff4c:	f000 fce0 	bl	8010910 <__mcmp>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	da6c      	bge.n	801002e <_dtoa_r+0x926>
 800ff54:	2300      	movs	r3, #0
 800ff56:	4651      	mov	r1, sl
 800ff58:	220a      	movs	r2, #10
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	f000 fa74 	bl	8010448 <__multadd>
 800ff60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff62:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ff66:	4682      	mov	sl, r0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	f000 81b0 	beq.w	80102ce <_dtoa_r+0xbc6>
 800ff6e:	2300      	movs	r3, #0
 800ff70:	4639      	mov	r1, r7
 800ff72:	220a      	movs	r2, #10
 800ff74:	4620      	mov	r0, r4
 800ff76:	f000 fa67 	bl	8010448 <__multadd>
 800ff7a:	9b01      	ldr	r3, [sp, #4]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	4607      	mov	r7, r0
 800ff80:	f300 8096 	bgt.w	80100b0 <_dtoa_r+0x9a8>
 800ff84:	9b07      	ldr	r3, [sp, #28]
 800ff86:	2b02      	cmp	r3, #2
 800ff88:	dc59      	bgt.n	801003e <_dtoa_r+0x936>
 800ff8a:	e091      	b.n	80100b0 <_dtoa_r+0x9a8>
 800ff8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ff92:	e758      	b.n	800fe46 <_dtoa_r+0x73e>
 800ff94:	9b04      	ldr	r3, [sp, #16]
 800ff96:	1e5e      	subs	r6, r3, #1
 800ff98:	9b08      	ldr	r3, [sp, #32]
 800ff9a:	42b3      	cmp	r3, r6
 800ff9c:	bfbf      	itttt	lt
 800ff9e:	9b08      	ldrlt	r3, [sp, #32]
 800ffa0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ffa2:	9608      	strlt	r6, [sp, #32]
 800ffa4:	1af3      	sublt	r3, r6, r3
 800ffa6:	bfb4      	ite	lt
 800ffa8:	18d2      	addlt	r2, r2, r3
 800ffaa:	1b9e      	subge	r6, r3, r6
 800ffac:	9b04      	ldr	r3, [sp, #16]
 800ffae:	bfbc      	itt	lt
 800ffb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ffb2:	2600      	movlt	r6, #0
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	bfb7      	itett	lt
 800ffb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ffbc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ffc0:	1a9d      	sublt	r5, r3, r2
 800ffc2:	2300      	movlt	r3, #0
 800ffc4:	e741      	b.n	800fe4a <_dtoa_r+0x742>
 800ffc6:	9e08      	ldr	r6, [sp, #32]
 800ffc8:	9d05      	ldr	r5, [sp, #20]
 800ffca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ffcc:	e748      	b.n	800fe60 <_dtoa_r+0x758>
 800ffce:	9a08      	ldr	r2, [sp, #32]
 800ffd0:	e770      	b.n	800feb4 <_dtoa_r+0x7ac>
 800ffd2:	9b07      	ldr	r3, [sp, #28]
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	dc19      	bgt.n	801000c <_dtoa_r+0x904>
 800ffd8:	9b02      	ldr	r3, [sp, #8]
 800ffda:	b9bb      	cbnz	r3, 801000c <_dtoa_r+0x904>
 800ffdc:	9b03      	ldr	r3, [sp, #12]
 800ffde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffe2:	b99b      	cbnz	r3, 801000c <_dtoa_r+0x904>
 800ffe4:	9b03      	ldr	r3, [sp, #12]
 800ffe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ffea:	0d1b      	lsrs	r3, r3, #20
 800ffec:	051b      	lsls	r3, r3, #20
 800ffee:	b183      	cbz	r3, 8010012 <_dtoa_r+0x90a>
 800fff0:	9b05      	ldr	r3, [sp, #20]
 800fff2:	3301      	adds	r3, #1
 800fff4:	9305      	str	r3, [sp, #20]
 800fff6:	9b06      	ldr	r3, [sp, #24]
 800fff8:	3301      	adds	r3, #1
 800fffa:	9306      	str	r3, [sp, #24]
 800fffc:	f04f 0801 	mov.w	r8, #1
 8010000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010002:	2b00      	cmp	r3, #0
 8010004:	f47f af6f 	bne.w	800fee6 <_dtoa_r+0x7de>
 8010008:	2001      	movs	r0, #1
 801000a:	e774      	b.n	800fef6 <_dtoa_r+0x7ee>
 801000c:	f04f 0800 	mov.w	r8, #0
 8010010:	e7f6      	b.n	8010000 <_dtoa_r+0x8f8>
 8010012:	4698      	mov	r8, r3
 8010014:	e7f4      	b.n	8010000 <_dtoa_r+0x8f8>
 8010016:	d082      	beq.n	800ff1e <_dtoa_r+0x816>
 8010018:	9a05      	ldr	r2, [sp, #20]
 801001a:	331c      	adds	r3, #28
 801001c:	441a      	add	r2, r3
 801001e:	9205      	str	r2, [sp, #20]
 8010020:	9a06      	ldr	r2, [sp, #24]
 8010022:	441a      	add	r2, r3
 8010024:	441d      	add	r5, r3
 8010026:	9206      	str	r2, [sp, #24]
 8010028:	e779      	b.n	800ff1e <_dtoa_r+0x816>
 801002a:	4603      	mov	r3, r0
 801002c:	e7f4      	b.n	8010018 <_dtoa_r+0x910>
 801002e:	9b04      	ldr	r3, [sp, #16]
 8010030:	2b00      	cmp	r3, #0
 8010032:	dc37      	bgt.n	80100a4 <_dtoa_r+0x99c>
 8010034:	9b07      	ldr	r3, [sp, #28]
 8010036:	2b02      	cmp	r3, #2
 8010038:	dd34      	ble.n	80100a4 <_dtoa_r+0x99c>
 801003a:	9b04      	ldr	r3, [sp, #16]
 801003c:	9301      	str	r3, [sp, #4]
 801003e:	9b01      	ldr	r3, [sp, #4]
 8010040:	b963      	cbnz	r3, 801005c <_dtoa_r+0x954>
 8010042:	4631      	mov	r1, r6
 8010044:	2205      	movs	r2, #5
 8010046:	4620      	mov	r0, r4
 8010048:	f000 f9fe 	bl	8010448 <__multadd>
 801004c:	4601      	mov	r1, r0
 801004e:	4606      	mov	r6, r0
 8010050:	4650      	mov	r0, sl
 8010052:	f000 fc5d 	bl	8010910 <__mcmp>
 8010056:	2800      	cmp	r0, #0
 8010058:	f73f adbb 	bgt.w	800fbd2 <_dtoa_r+0x4ca>
 801005c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801005e:	9d00      	ldr	r5, [sp, #0]
 8010060:	ea6f 0b03 	mvn.w	fp, r3
 8010064:	f04f 0800 	mov.w	r8, #0
 8010068:	4631      	mov	r1, r6
 801006a:	4620      	mov	r0, r4
 801006c:	f000 f9ca 	bl	8010404 <_Bfree>
 8010070:	2f00      	cmp	r7, #0
 8010072:	f43f aeab 	beq.w	800fdcc <_dtoa_r+0x6c4>
 8010076:	f1b8 0f00 	cmp.w	r8, #0
 801007a:	d005      	beq.n	8010088 <_dtoa_r+0x980>
 801007c:	45b8      	cmp	r8, r7
 801007e:	d003      	beq.n	8010088 <_dtoa_r+0x980>
 8010080:	4641      	mov	r1, r8
 8010082:	4620      	mov	r0, r4
 8010084:	f000 f9be 	bl	8010404 <_Bfree>
 8010088:	4639      	mov	r1, r7
 801008a:	4620      	mov	r0, r4
 801008c:	f000 f9ba 	bl	8010404 <_Bfree>
 8010090:	e69c      	b.n	800fdcc <_dtoa_r+0x6c4>
 8010092:	2600      	movs	r6, #0
 8010094:	4637      	mov	r7, r6
 8010096:	e7e1      	b.n	801005c <_dtoa_r+0x954>
 8010098:	46bb      	mov	fp, r7
 801009a:	4637      	mov	r7, r6
 801009c:	e599      	b.n	800fbd2 <_dtoa_r+0x4ca>
 801009e:	bf00      	nop
 80100a0:	40240000 	.word	0x40240000
 80100a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	f000 80c8 	beq.w	801023c <_dtoa_r+0xb34>
 80100ac:	9b04      	ldr	r3, [sp, #16]
 80100ae:	9301      	str	r3, [sp, #4]
 80100b0:	2d00      	cmp	r5, #0
 80100b2:	dd05      	ble.n	80100c0 <_dtoa_r+0x9b8>
 80100b4:	4639      	mov	r1, r7
 80100b6:	462a      	mov	r2, r5
 80100b8:	4620      	mov	r0, r4
 80100ba:	f000 fbbd 	bl	8010838 <__lshift>
 80100be:	4607      	mov	r7, r0
 80100c0:	f1b8 0f00 	cmp.w	r8, #0
 80100c4:	d05b      	beq.n	801017e <_dtoa_r+0xa76>
 80100c6:	6879      	ldr	r1, [r7, #4]
 80100c8:	4620      	mov	r0, r4
 80100ca:	f000 f95b 	bl	8010384 <_Balloc>
 80100ce:	4605      	mov	r5, r0
 80100d0:	b928      	cbnz	r0, 80100de <_dtoa_r+0x9d6>
 80100d2:	4b83      	ldr	r3, [pc, #524]	; (80102e0 <_dtoa_r+0xbd8>)
 80100d4:	4602      	mov	r2, r0
 80100d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80100da:	f7ff bb2e 	b.w	800f73a <_dtoa_r+0x32>
 80100de:	693a      	ldr	r2, [r7, #16]
 80100e0:	3202      	adds	r2, #2
 80100e2:	0092      	lsls	r2, r2, #2
 80100e4:	f107 010c 	add.w	r1, r7, #12
 80100e8:	300c      	adds	r0, #12
 80100ea:	f7ff fa70 	bl	800f5ce <memcpy>
 80100ee:	2201      	movs	r2, #1
 80100f0:	4629      	mov	r1, r5
 80100f2:	4620      	mov	r0, r4
 80100f4:	f000 fba0 	bl	8010838 <__lshift>
 80100f8:	9b00      	ldr	r3, [sp, #0]
 80100fa:	3301      	adds	r3, #1
 80100fc:	9304      	str	r3, [sp, #16]
 80100fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010102:	4413      	add	r3, r2
 8010104:	9308      	str	r3, [sp, #32]
 8010106:	9b02      	ldr	r3, [sp, #8]
 8010108:	f003 0301 	and.w	r3, r3, #1
 801010c:	46b8      	mov	r8, r7
 801010e:	9306      	str	r3, [sp, #24]
 8010110:	4607      	mov	r7, r0
 8010112:	9b04      	ldr	r3, [sp, #16]
 8010114:	4631      	mov	r1, r6
 8010116:	3b01      	subs	r3, #1
 8010118:	4650      	mov	r0, sl
 801011a:	9301      	str	r3, [sp, #4]
 801011c:	f7ff fa6c 	bl	800f5f8 <quorem>
 8010120:	4641      	mov	r1, r8
 8010122:	9002      	str	r0, [sp, #8]
 8010124:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010128:	4650      	mov	r0, sl
 801012a:	f000 fbf1 	bl	8010910 <__mcmp>
 801012e:	463a      	mov	r2, r7
 8010130:	9005      	str	r0, [sp, #20]
 8010132:	4631      	mov	r1, r6
 8010134:	4620      	mov	r0, r4
 8010136:	f000 fc07 	bl	8010948 <__mdiff>
 801013a:	68c2      	ldr	r2, [r0, #12]
 801013c:	4605      	mov	r5, r0
 801013e:	bb02      	cbnz	r2, 8010182 <_dtoa_r+0xa7a>
 8010140:	4601      	mov	r1, r0
 8010142:	4650      	mov	r0, sl
 8010144:	f000 fbe4 	bl	8010910 <__mcmp>
 8010148:	4602      	mov	r2, r0
 801014a:	4629      	mov	r1, r5
 801014c:	4620      	mov	r0, r4
 801014e:	9209      	str	r2, [sp, #36]	; 0x24
 8010150:	f000 f958 	bl	8010404 <_Bfree>
 8010154:	9b07      	ldr	r3, [sp, #28]
 8010156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010158:	9d04      	ldr	r5, [sp, #16]
 801015a:	ea43 0102 	orr.w	r1, r3, r2
 801015e:	9b06      	ldr	r3, [sp, #24]
 8010160:	4319      	orrs	r1, r3
 8010162:	d110      	bne.n	8010186 <_dtoa_r+0xa7e>
 8010164:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010168:	d029      	beq.n	80101be <_dtoa_r+0xab6>
 801016a:	9b05      	ldr	r3, [sp, #20]
 801016c:	2b00      	cmp	r3, #0
 801016e:	dd02      	ble.n	8010176 <_dtoa_r+0xa6e>
 8010170:	9b02      	ldr	r3, [sp, #8]
 8010172:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010176:	9b01      	ldr	r3, [sp, #4]
 8010178:	f883 9000 	strb.w	r9, [r3]
 801017c:	e774      	b.n	8010068 <_dtoa_r+0x960>
 801017e:	4638      	mov	r0, r7
 8010180:	e7ba      	b.n	80100f8 <_dtoa_r+0x9f0>
 8010182:	2201      	movs	r2, #1
 8010184:	e7e1      	b.n	801014a <_dtoa_r+0xa42>
 8010186:	9b05      	ldr	r3, [sp, #20]
 8010188:	2b00      	cmp	r3, #0
 801018a:	db04      	blt.n	8010196 <_dtoa_r+0xa8e>
 801018c:	9907      	ldr	r1, [sp, #28]
 801018e:	430b      	orrs	r3, r1
 8010190:	9906      	ldr	r1, [sp, #24]
 8010192:	430b      	orrs	r3, r1
 8010194:	d120      	bne.n	80101d8 <_dtoa_r+0xad0>
 8010196:	2a00      	cmp	r2, #0
 8010198:	dded      	ble.n	8010176 <_dtoa_r+0xa6e>
 801019a:	4651      	mov	r1, sl
 801019c:	2201      	movs	r2, #1
 801019e:	4620      	mov	r0, r4
 80101a0:	f000 fb4a 	bl	8010838 <__lshift>
 80101a4:	4631      	mov	r1, r6
 80101a6:	4682      	mov	sl, r0
 80101a8:	f000 fbb2 	bl	8010910 <__mcmp>
 80101ac:	2800      	cmp	r0, #0
 80101ae:	dc03      	bgt.n	80101b8 <_dtoa_r+0xab0>
 80101b0:	d1e1      	bne.n	8010176 <_dtoa_r+0xa6e>
 80101b2:	f019 0f01 	tst.w	r9, #1
 80101b6:	d0de      	beq.n	8010176 <_dtoa_r+0xa6e>
 80101b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80101bc:	d1d8      	bne.n	8010170 <_dtoa_r+0xa68>
 80101be:	9a01      	ldr	r2, [sp, #4]
 80101c0:	2339      	movs	r3, #57	; 0x39
 80101c2:	7013      	strb	r3, [r2, #0]
 80101c4:	462b      	mov	r3, r5
 80101c6:	461d      	mov	r5, r3
 80101c8:	3b01      	subs	r3, #1
 80101ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80101ce:	2a39      	cmp	r2, #57	; 0x39
 80101d0:	d06c      	beq.n	80102ac <_dtoa_r+0xba4>
 80101d2:	3201      	adds	r2, #1
 80101d4:	701a      	strb	r2, [r3, #0]
 80101d6:	e747      	b.n	8010068 <_dtoa_r+0x960>
 80101d8:	2a00      	cmp	r2, #0
 80101da:	dd07      	ble.n	80101ec <_dtoa_r+0xae4>
 80101dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80101e0:	d0ed      	beq.n	80101be <_dtoa_r+0xab6>
 80101e2:	9a01      	ldr	r2, [sp, #4]
 80101e4:	f109 0301 	add.w	r3, r9, #1
 80101e8:	7013      	strb	r3, [r2, #0]
 80101ea:	e73d      	b.n	8010068 <_dtoa_r+0x960>
 80101ec:	9b04      	ldr	r3, [sp, #16]
 80101ee:	9a08      	ldr	r2, [sp, #32]
 80101f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d043      	beq.n	8010280 <_dtoa_r+0xb78>
 80101f8:	4651      	mov	r1, sl
 80101fa:	2300      	movs	r3, #0
 80101fc:	220a      	movs	r2, #10
 80101fe:	4620      	mov	r0, r4
 8010200:	f000 f922 	bl	8010448 <__multadd>
 8010204:	45b8      	cmp	r8, r7
 8010206:	4682      	mov	sl, r0
 8010208:	f04f 0300 	mov.w	r3, #0
 801020c:	f04f 020a 	mov.w	r2, #10
 8010210:	4641      	mov	r1, r8
 8010212:	4620      	mov	r0, r4
 8010214:	d107      	bne.n	8010226 <_dtoa_r+0xb1e>
 8010216:	f000 f917 	bl	8010448 <__multadd>
 801021a:	4680      	mov	r8, r0
 801021c:	4607      	mov	r7, r0
 801021e:	9b04      	ldr	r3, [sp, #16]
 8010220:	3301      	adds	r3, #1
 8010222:	9304      	str	r3, [sp, #16]
 8010224:	e775      	b.n	8010112 <_dtoa_r+0xa0a>
 8010226:	f000 f90f 	bl	8010448 <__multadd>
 801022a:	4639      	mov	r1, r7
 801022c:	4680      	mov	r8, r0
 801022e:	2300      	movs	r3, #0
 8010230:	220a      	movs	r2, #10
 8010232:	4620      	mov	r0, r4
 8010234:	f000 f908 	bl	8010448 <__multadd>
 8010238:	4607      	mov	r7, r0
 801023a:	e7f0      	b.n	801021e <_dtoa_r+0xb16>
 801023c:	9b04      	ldr	r3, [sp, #16]
 801023e:	9301      	str	r3, [sp, #4]
 8010240:	9d00      	ldr	r5, [sp, #0]
 8010242:	4631      	mov	r1, r6
 8010244:	4650      	mov	r0, sl
 8010246:	f7ff f9d7 	bl	800f5f8 <quorem>
 801024a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801024e:	9b00      	ldr	r3, [sp, #0]
 8010250:	f805 9b01 	strb.w	r9, [r5], #1
 8010254:	1aea      	subs	r2, r5, r3
 8010256:	9b01      	ldr	r3, [sp, #4]
 8010258:	4293      	cmp	r3, r2
 801025a:	dd07      	ble.n	801026c <_dtoa_r+0xb64>
 801025c:	4651      	mov	r1, sl
 801025e:	2300      	movs	r3, #0
 8010260:	220a      	movs	r2, #10
 8010262:	4620      	mov	r0, r4
 8010264:	f000 f8f0 	bl	8010448 <__multadd>
 8010268:	4682      	mov	sl, r0
 801026a:	e7ea      	b.n	8010242 <_dtoa_r+0xb3a>
 801026c:	9b01      	ldr	r3, [sp, #4]
 801026e:	2b00      	cmp	r3, #0
 8010270:	bfc8      	it	gt
 8010272:	461d      	movgt	r5, r3
 8010274:	9b00      	ldr	r3, [sp, #0]
 8010276:	bfd8      	it	le
 8010278:	2501      	movle	r5, #1
 801027a:	441d      	add	r5, r3
 801027c:	f04f 0800 	mov.w	r8, #0
 8010280:	4651      	mov	r1, sl
 8010282:	2201      	movs	r2, #1
 8010284:	4620      	mov	r0, r4
 8010286:	f000 fad7 	bl	8010838 <__lshift>
 801028a:	4631      	mov	r1, r6
 801028c:	4682      	mov	sl, r0
 801028e:	f000 fb3f 	bl	8010910 <__mcmp>
 8010292:	2800      	cmp	r0, #0
 8010294:	dc96      	bgt.n	80101c4 <_dtoa_r+0xabc>
 8010296:	d102      	bne.n	801029e <_dtoa_r+0xb96>
 8010298:	f019 0f01 	tst.w	r9, #1
 801029c:	d192      	bne.n	80101c4 <_dtoa_r+0xabc>
 801029e:	462b      	mov	r3, r5
 80102a0:	461d      	mov	r5, r3
 80102a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102a6:	2a30      	cmp	r2, #48	; 0x30
 80102a8:	d0fa      	beq.n	80102a0 <_dtoa_r+0xb98>
 80102aa:	e6dd      	b.n	8010068 <_dtoa_r+0x960>
 80102ac:	9a00      	ldr	r2, [sp, #0]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d189      	bne.n	80101c6 <_dtoa_r+0xabe>
 80102b2:	f10b 0b01 	add.w	fp, fp, #1
 80102b6:	2331      	movs	r3, #49	; 0x31
 80102b8:	e796      	b.n	80101e8 <_dtoa_r+0xae0>
 80102ba:	4b0a      	ldr	r3, [pc, #40]	; (80102e4 <_dtoa_r+0xbdc>)
 80102bc:	f7ff ba99 	b.w	800f7f2 <_dtoa_r+0xea>
 80102c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	f47f aa6d 	bne.w	800f7a2 <_dtoa_r+0x9a>
 80102c8:	4b07      	ldr	r3, [pc, #28]	; (80102e8 <_dtoa_r+0xbe0>)
 80102ca:	f7ff ba92 	b.w	800f7f2 <_dtoa_r+0xea>
 80102ce:	9b01      	ldr	r3, [sp, #4]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	dcb5      	bgt.n	8010240 <_dtoa_r+0xb38>
 80102d4:	9b07      	ldr	r3, [sp, #28]
 80102d6:	2b02      	cmp	r3, #2
 80102d8:	f73f aeb1 	bgt.w	801003e <_dtoa_r+0x936>
 80102dc:	e7b0      	b.n	8010240 <_dtoa_r+0xb38>
 80102de:	bf00      	nop
 80102e0:	08013cc9 	.word	0x08013cc9
 80102e4:	08013c24 	.word	0x08013c24
 80102e8:	08013c4d 	.word	0x08013c4d

080102ec <_free_r>:
 80102ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102ee:	2900      	cmp	r1, #0
 80102f0:	d044      	beq.n	801037c <_free_r+0x90>
 80102f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102f6:	9001      	str	r0, [sp, #4]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f1a1 0404 	sub.w	r4, r1, #4
 80102fe:	bfb8      	it	lt
 8010300:	18e4      	addlt	r4, r4, r3
 8010302:	f7fe f8ab 	bl	800e45c <__malloc_lock>
 8010306:	4a1e      	ldr	r2, [pc, #120]	; (8010380 <_free_r+0x94>)
 8010308:	9801      	ldr	r0, [sp, #4]
 801030a:	6813      	ldr	r3, [r2, #0]
 801030c:	b933      	cbnz	r3, 801031c <_free_r+0x30>
 801030e:	6063      	str	r3, [r4, #4]
 8010310:	6014      	str	r4, [r2, #0]
 8010312:	b003      	add	sp, #12
 8010314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010318:	f7fe b8a6 	b.w	800e468 <__malloc_unlock>
 801031c:	42a3      	cmp	r3, r4
 801031e:	d908      	bls.n	8010332 <_free_r+0x46>
 8010320:	6825      	ldr	r5, [r4, #0]
 8010322:	1961      	adds	r1, r4, r5
 8010324:	428b      	cmp	r3, r1
 8010326:	bf01      	itttt	eq
 8010328:	6819      	ldreq	r1, [r3, #0]
 801032a:	685b      	ldreq	r3, [r3, #4]
 801032c:	1949      	addeq	r1, r1, r5
 801032e:	6021      	streq	r1, [r4, #0]
 8010330:	e7ed      	b.n	801030e <_free_r+0x22>
 8010332:	461a      	mov	r2, r3
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	b10b      	cbz	r3, 801033c <_free_r+0x50>
 8010338:	42a3      	cmp	r3, r4
 801033a:	d9fa      	bls.n	8010332 <_free_r+0x46>
 801033c:	6811      	ldr	r1, [r2, #0]
 801033e:	1855      	adds	r5, r2, r1
 8010340:	42a5      	cmp	r5, r4
 8010342:	d10b      	bne.n	801035c <_free_r+0x70>
 8010344:	6824      	ldr	r4, [r4, #0]
 8010346:	4421      	add	r1, r4
 8010348:	1854      	adds	r4, r2, r1
 801034a:	42a3      	cmp	r3, r4
 801034c:	6011      	str	r1, [r2, #0]
 801034e:	d1e0      	bne.n	8010312 <_free_r+0x26>
 8010350:	681c      	ldr	r4, [r3, #0]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	6053      	str	r3, [r2, #4]
 8010356:	440c      	add	r4, r1
 8010358:	6014      	str	r4, [r2, #0]
 801035a:	e7da      	b.n	8010312 <_free_r+0x26>
 801035c:	d902      	bls.n	8010364 <_free_r+0x78>
 801035e:	230c      	movs	r3, #12
 8010360:	6003      	str	r3, [r0, #0]
 8010362:	e7d6      	b.n	8010312 <_free_r+0x26>
 8010364:	6825      	ldr	r5, [r4, #0]
 8010366:	1961      	adds	r1, r4, r5
 8010368:	428b      	cmp	r3, r1
 801036a:	bf04      	itt	eq
 801036c:	6819      	ldreq	r1, [r3, #0]
 801036e:	685b      	ldreq	r3, [r3, #4]
 8010370:	6063      	str	r3, [r4, #4]
 8010372:	bf04      	itt	eq
 8010374:	1949      	addeq	r1, r1, r5
 8010376:	6021      	streq	r1, [r4, #0]
 8010378:	6054      	str	r4, [r2, #4]
 801037a:	e7ca      	b.n	8010312 <_free_r+0x26>
 801037c:	b003      	add	sp, #12
 801037e:	bd30      	pop	{r4, r5, pc}
 8010380:	200005bc 	.word	0x200005bc

08010384 <_Balloc>:
 8010384:	b570      	push	{r4, r5, r6, lr}
 8010386:	69c6      	ldr	r6, [r0, #28]
 8010388:	4604      	mov	r4, r0
 801038a:	460d      	mov	r5, r1
 801038c:	b976      	cbnz	r6, 80103ac <_Balloc+0x28>
 801038e:	2010      	movs	r0, #16
 8010390:	f7fd ffb4 	bl	800e2fc <malloc>
 8010394:	4602      	mov	r2, r0
 8010396:	61e0      	str	r0, [r4, #28]
 8010398:	b920      	cbnz	r0, 80103a4 <_Balloc+0x20>
 801039a:	4b18      	ldr	r3, [pc, #96]	; (80103fc <_Balloc+0x78>)
 801039c:	4818      	ldr	r0, [pc, #96]	; (8010400 <_Balloc+0x7c>)
 801039e:	216b      	movs	r1, #107	; 0x6b
 80103a0:	f7fd ff7c 	bl	800e29c <__assert_func>
 80103a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103a8:	6006      	str	r6, [r0, #0]
 80103aa:	60c6      	str	r6, [r0, #12]
 80103ac:	69e6      	ldr	r6, [r4, #28]
 80103ae:	68f3      	ldr	r3, [r6, #12]
 80103b0:	b183      	cbz	r3, 80103d4 <_Balloc+0x50>
 80103b2:	69e3      	ldr	r3, [r4, #28]
 80103b4:	68db      	ldr	r3, [r3, #12]
 80103b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80103ba:	b9b8      	cbnz	r0, 80103ec <_Balloc+0x68>
 80103bc:	2101      	movs	r1, #1
 80103be:	fa01 f605 	lsl.w	r6, r1, r5
 80103c2:	1d72      	adds	r2, r6, #5
 80103c4:	0092      	lsls	r2, r2, #2
 80103c6:	4620      	mov	r0, r4
 80103c8:	f001 ff1a 	bl	8012200 <_calloc_r>
 80103cc:	b160      	cbz	r0, 80103e8 <_Balloc+0x64>
 80103ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80103d2:	e00e      	b.n	80103f2 <_Balloc+0x6e>
 80103d4:	2221      	movs	r2, #33	; 0x21
 80103d6:	2104      	movs	r1, #4
 80103d8:	4620      	mov	r0, r4
 80103da:	f001 ff11 	bl	8012200 <_calloc_r>
 80103de:	69e3      	ldr	r3, [r4, #28]
 80103e0:	60f0      	str	r0, [r6, #12]
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d1e4      	bne.n	80103b2 <_Balloc+0x2e>
 80103e8:	2000      	movs	r0, #0
 80103ea:	bd70      	pop	{r4, r5, r6, pc}
 80103ec:	6802      	ldr	r2, [r0, #0]
 80103ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80103f2:	2300      	movs	r3, #0
 80103f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80103f8:	e7f7      	b.n	80103ea <_Balloc+0x66>
 80103fa:	bf00      	nop
 80103fc:	08013c5a 	.word	0x08013c5a
 8010400:	08013cda 	.word	0x08013cda

08010404 <_Bfree>:
 8010404:	b570      	push	{r4, r5, r6, lr}
 8010406:	69c6      	ldr	r6, [r0, #28]
 8010408:	4605      	mov	r5, r0
 801040a:	460c      	mov	r4, r1
 801040c:	b976      	cbnz	r6, 801042c <_Bfree+0x28>
 801040e:	2010      	movs	r0, #16
 8010410:	f7fd ff74 	bl	800e2fc <malloc>
 8010414:	4602      	mov	r2, r0
 8010416:	61e8      	str	r0, [r5, #28]
 8010418:	b920      	cbnz	r0, 8010424 <_Bfree+0x20>
 801041a:	4b09      	ldr	r3, [pc, #36]	; (8010440 <_Bfree+0x3c>)
 801041c:	4809      	ldr	r0, [pc, #36]	; (8010444 <_Bfree+0x40>)
 801041e:	218f      	movs	r1, #143	; 0x8f
 8010420:	f7fd ff3c 	bl	800e29c <__assert_func>
 8010424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010428:	6006      	str	r6, [r0, #0]
 801042a:	60c6      	str	r6, [r0, #12]
 801042c:	b13c      	cbz	r4, 801043e <_Bfree+0x3a>
 801042e:	69eb      	ldr	r3, [r5, #28]
 8010430:	6862      	ldr	r2, [r4, #4]
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010438:	6021      	str	r1, [r4, #0]
 801043a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801043e:	bd70      	pop	{r4, r5, r6, pc}
 8010440:	08013c5a 	.word	0x08013c5a
 8010444:	08013cda 	.word	0x08013cda

08010448 <__multadd>:
 8010448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801044c:	690d      	ldr	r5, [r1, #16]
 801044e:	4607      	mov	r7, r0
 8010450:	460c      	mov	r4, r1
 8010452:	461e      	mov	r6, r3
 8010454:	f101 0c14 	add.w	ip, r1, #20
 8010458:	2000      	movs	r0, #0
 801045a:	f8dc 3000 	ldr.w	r3, [ip]
 801045e:	b299      	uxth	r1, r3
 8010460:	fb02 6101 	mla	r1, r2, r1, r6
 8010464:	0c1e      	lsrs	r6, r3, #16
 8010466:	0c0b      	lsrs	r3, r1, #16
 8010468:	fb02 3306 	mla	r3, r2, r6, r3
 801046c:	b289      	uxth	r1, r1
 801046e:	3001      	adds	r0, #1
 8010470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010474:	4285      	cmp	r5, r0
 8010476:	f84c 1b04 	str.w	r1, [ip], #4
 801047a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801047e:	dcec      	bgt.n	801045a <__multadd+0x12>
 8010480:	b30e      	cbz	r6, 80104c6 <__multadd+0x7e>
 8010482:	68a3      	ldr	r3, [r4, #8]
 8010484:	42ab      	cmp	r3, r5
 8010486:	dc19      	bgt.n	80104bc <__multadd+0x74>
 8010488:	6861      	ldr	r1, [r4, #4]
 801048a:	4638      	mov	r0, r7
 801048c:	3101      	adds	r1, #1
 801048e:	f7ff ff79 	bl	8010384 <_Balloc>
 8010492:	4680      	mov	r8, r0
 8010494:	b928      	cbnz	r0, 80104a2 <__multadd+0x5a>
 8010496:	4602      	mov	r2, r0
 8010498:	4b0c      	ldr	r3, [pc, #48]	; (80104cc <__multadd+0x84>)
 801049a:	480d      	ldr	r0, [pc, #52]	; (80104d0 <__multadd+0x88>)
 801049c:	21ba      	movs	r1, #186	; 0xba
 801049e:	f7fd fefd 	bl	800e29c <__assert_func>
 80104a2:	6922      	ldr	r2, [r4, #16]
 80104a4:	3202      	adds	r2, #2
 80104a6:	f104 010c 	add.w	r1, r4, #12
 80104aa:	0092      	lsls	r2, r2, #2
 80104ac:	300c      	adds	r0, #12
 80104ae:	f7ff f88e 	bl	800f5ce <memcpy>
 80104b2:	4621      	mov	r1, r4
 80104b4:	4638      	mov	r0, r7
 80104b6:	f7ff ffa5 	bl	8010404 <_Bfree>
 80104ba:	4644      	mov	r4, r8
 80104bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80104c0:	3501      	adds	r5, #1
 80104c2:	615e      	str	r6, [r3, #20]
 80104c4:	6125      	str	r5, [r4, #16]
 80104c6:	4620      	mov	r0, r4
 80104c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104cc:	08013cc9 	.word	0x08013cc9
 80104d0:	08013cda 	.word	0x08013cda

080104d4 <__s2b>:
 80104d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104d8:	460c      	mov	r4, r1
 80104da:	4615      	mov	r5, r2
 80104dc:	461f      	mov	r7, r3
 80104de:	2209      	movs	r2, #9
 80104e0:	3308      	adds	r3, #8
 80104e2:	4606      	mov	r6, r0
 80104e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80104e8:	2100      	movs	r1, #0
 80104ea:	2201      	movs	r2, #1
 80104ec:	429a      	cmp	r2, r3
 80104ee:	db09      	blt.n	8010504 <__s2b+0x30>
 80104f0:	4630      	mov	r0, r6
 80104f2:	f7ff ff47 	bl	8010384 <_Balloc>
 80104f6:	b940      	cbnz	r0, 801050a <__s2b+0x36>
 80104f8:	4602      	mov	r2, r0
 80104fa:	4b19      	ldr	r3, [pc, #100]	; (8010560 <__s2b+0x8c>)
 80104fc:	4819      	ldr	r0, [pc, #100]	; (8010564 <__s2b+0x90>)
 80104fe:	21d3      	movs	r1, #211	; 0xd3
 8010500:	f7fd fecc 	bl	800e29c <__assert_func>
 8010504:	0052      	lsls	r2, r2, #1
 8010506:	3101      	adds	r1, #1
 8010508:	e7f0      	b.n	80104ec <__s2b+0x18>
 801050a:	9b08      	ldr	r3, [sp, #32]
 801050c:	6143      	str	r3, [r0, #20]
 801050e:	2d09      	cmp	r5, #9
 8010510:	f04f 0301 	mov.w	r3, #1
 8010514:	6103      	str	r3, [r0, #16]
 8010516:	dd16      	ble.n	8010546 <__s2b+0x72>
 8010518:	f104 0909 	add.w	r9, r4, #9
 801051c:	46c8      	mov	r8, r9
 801051e:	442c      	add	r4, r5
 8010520:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010524:	4601      	mov	r1, r0
 8010526:	3b30      	subs	r3, #48	; 0x30
 8010528:	220a      	movs	r2, #10
 801052a:	4630      	mov	r0, r6
 801052c:	f7ff ff8c 	bl	8010448 <__multadd>
 8010530:	45a0      	cmp	r8, r4
 8010532:	d1f5      	bne.n	8010520 <__s2b+0x4c>
 8010534:	f1a5 0408 	sub.w	r4, r5, #8
 8010538:	444c      	add	r4, r9
 801053a:	1b2d      	subs	r5, r5, r4
 801053c:	1963      	adds	r3, r4, r5
 801053e:	42bb      	cmp	r3, r7
 8010540:	db04      	blt.n	801054c <__s2b+0x78>
 8010542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010546:	340a      	adds	r4, #10
 8010548:	2509      	movs	r5, #9
 801054a:	e7f6      	b.n	801053a <__s2b+0x66>
 801054c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010550:	4601      	mov	r1, r0
 8010552:	3b30      	subs	r3, #48	; 0x30
 8010554:	220a      	movs	r2, #10
 8010556:	4630      	mov	r0, r6
 8010558:	f7ff ff76 	bl	8010448 <__multadd>
 801055c:	e7ee      	b.n	801053c <__s2b+0x68>
 801055e:	bf00      	nop
 8010560:	08013cc9 	.word	0x08013cc9
 8010564:	08013cda 	.word	0x08013cda

08010568 <__hi0bits>:
 8010568:	0c03      	lsrs	r3, r0, #16
 801056a:	041b      	lsls	r3, r3, #16
 801056c:	b9d3      	cbnz	r3, 80105a4 <__hi0bits+0x3c>
 801056e:	0400      	lsls	r0, r0, #16
 8010570:	2310      	movs	r3, #16
 8010572:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010576:	bf04      	itt	eq
 8010578:	0200      	lsleq	r0, r0, #8
 801057a:	3308      	addeq	r3, #8
 801057c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010580:	bf04      	itt	eq
 8010582:	0100      	lsleq	r0, r0, #4
 8010584:	3304      	addeq	r3, #4
 8010586:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801058a:	bf04      	itt	eq
 801058c:	0080      	lsleq	r0, r0, #2
 801058e:	3302      	addeq	r3, #2
 8010590:	2800      	cmp	r0, #0
 8010592:	db05      	blt.n	80105a0 <__hi0bits+0x38>
 8010594:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010598:	f103 0301 	add.w	r3, r3, #1
 801059c:	bf08      	it	eq
 801059e:	2320      	moveq	r3, #32
 80105a0:	4618      	mov	r0, r3
 80105a2:	4770      	bx	lr
 80105a4:	2300      	movs	r3, #0
 80105a6:	e7e4      	b.n	8010572 <__hi0bits+0xa>

080105a8 <__lo0bits>:
 80105a8:	6803      	ldr	r3, [r0, #0]
 80105aa:	f013 0207 	ands.w	r2, r3, #7
 80105ae:	d00c      	beq.n	80105ca <__lo0bits+0x22>
 80105b0:	07d9      	lsls	r1, r3, #31
 80105b2:	d422      	bmi.n	80105fa <__lo0bits+0x52>
 80105b4:	079a      	lsls	r2, r3, #30
 80105b6:	bf49      	itett	mi
 80105b8:	085b      	lsrmi	r3, r3, #1
 80105ba:	089b      	lsrpl	r3, r3, #2
 80105bc:	6003      	strmi	r3, [r0, #0]
 80105be:	2201      	movmi	r2, #1
 80105c0:	bf5c      	itt	pl
 80105c2:	6003      	strpl	r3, [r0, #0]
 80105c4:	2202      	movpl	r2, #2
 80105c6:	4610      	mov	r0, r2
 80105c8:	4770      	bx	lr
 80105ca:	b299      	uxth	r1, r3
 80105cc:	b909      	cbnz	r1, 80105d2 <__lo0bits+0x2a>
 80105ce:	0c1b      	lsrs	r3, r3, #16
 80105d0:	2210      	movs	r2, #16
 80105d2:	b2d9      	uxtb	r1, r3
 80105d4:	b909      	cbnz	r1, 80105da <__lo0bits+0x32>
 80105d6:	3208      	adds	r2, #8
 80105d8:	0a1b      	lsrs	r3, r3, #8
 80105da:	0719      	lsls	r1, r3, #28
 80105dc:	bf04      	itt	eq
 80105de:	091b      	lsreq	r3, r3, #4
 80105e0:	3204      	addeq	r2, #4
 80105e2:	0799      	lsls	r1, r3, #30
 80105e4:	bf04      	itt	eq
 80105e6:	089b      	lsreq	r3, r3, #2
 80105e8:	3202      	addeq	r2, #2
 80105ea:	07d9      	lsls	r1, r3, #31
 80105ec:	d403      	bmi.n	80105f6 <__lo0bits+0x4e>
 80105ee:	085b      	lsrs	r3, r3, #1
 80105f0:	f102 0201 	add.w	r2, r2, #1
 80105f4:	d003      	beq.n	80105fe <__lo0bits+0x56>
 80105f6:	6003      	str	r3, [r0, #0]
 80105f8:	e7e5      	b.n	80105c6 <__lo0bits+0x1e>
 80105fa:	2200      	movs	r2, #0
 80105fc:	e7e3      	b.n	80105c6 <__lo0bits+0x1e>
 80105fe:	2220      	movs	r2, #32
 8010600:	e7e1      	b.n	80105c6 <__lo0bits+0x1e>
	...

08010604 <__i2b>:
 8010604:	b510      	push	{r4, lr}
 8010606:	460c      	mov	r4, r1
 8010608:	2101      	movs	r1, #1
 801060a:	f7ff febb 	bl	8010384 <_Balloc>
 801060e:	4602      	mov	r2, r0
 8010610:	b928      	cbnz	r0, 801061e <__i2b+0x1a>
 8010612:	4b05      	ldr	r3, [pc, #20]	; (8010628 <__i2b+0x24>)
 8010614:	4805      	ldr	r0, [pc, #20]	; (801062c <__i2b+0x28>)
 8010616:	f240 1145 	movw	r1, #325	; 0x145
 801061a:	f7fd fe3f 	bl	800e29c <__assert_func>
 801061e:	2301      	movs	r3, #1
 8010620:	6144      	str	r4, [r0, #20]
 8010622:	6103      	str	r3, [r0, #16]
 8010624:	bd10      	pop	{r4, pc}
 8010626:	bf00      	nop
 8010628:	08013cc9 	.word	0x08013cc9
 801062c:	08013cda 	.word	0x08013cda

08010630 <__multiply>:
 8010630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010634:	4691      	mov	r9, r2
 8010636:	690a      	ldr	r2, [r1, #16]
 8010638:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801063c:	429a      	cmp	r2, r3
 801063e:	bfb8      	it	lt
 8010640:	460b      	movlt	r3, r1
 8010642:	460c      	mov	r4, r1
 8010644:	bfbc      	itt	lt
 8010646:	464c      	movlt	r4, r9
 8010648:	4699      	movlt	r9, r3
 801064a:	6927      	ldr	r7, [r4, #16]
 801064c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010650:	68a3      	ldr	r3, [r4, #8]
 8010652:	6861      	ldr	r1, [r4, #4]
 8010654:	eb07 060a 	add.w	r6, r7, sl
 8010658:	42b3      	cmp	r3, r6
 801065a:	b085      	sub	sp, #20
 801065c:	bfb8      	it	lt
 801065e:	3101      	addlt	r1, #1
 8010660:	f7ff fe90 	bl	8010384 <_Balloc>
 8010664:	b930      	cbnz	r0, 8010674 <__multiply+0x44>
 8010666:	4602      	mov	r2, r0
 8010668:	4b44      	ldr	r3, [pc, #272]	; (801077c <__multiply+0x14c>)
 801066a:	4845      	ldr	r0, [pc, #276]	; (8010780 <__multiply+0x150>)
 801066c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010670:	f7fd fe14 	bl	800e29c <__assert_func>
 8010674:	f100 0514 	add.w	r5, r0, #20
 8010678:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801067c:	462b      	mov	r3, r5
 801067e:	2200      	movs	r2, #0
 8010680:	4543      	cmp	r3, r8
 8010682:	d321      	bcc.n	80106c8 <__multiply+0x98>
 8010684:	f104 0314 	add.w	r3, r4, #20
 8010688:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801068c:	f109 0314 	add.w	r3, r9, #20
 8010690:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010694:	9202      	str	r2, [sp, #8]
 8010696:	1b3a      	subs	r2, r7, r4
 8010698:	3a15      	subs	r2, #21
 801069a:	f022 0203 	bic.w	r2, r2, #3
 801069e:	3204      	adds	r2, #4
 80106a0:	f104 0115 	add.w	r1, r4, #21
 80106a4:	428f      	cmp	r7, r1
 80106a6:	bf38      	it	cc
 80106a8:	2204      	movcc	r2, #4
 80106aa:	9201      	str	r2, [sp, #4]
 80106ac:	9a02      	ldr	r2, [sp, #8]
 80106ae:	9303      	str	r3, [sp, #12]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d80c      	bhi.n	80106ce <__multiply+0x9e>
 80106b4:	2e00      	cmp	r6, #0
 80106b6:	dd03      	ble.n	80106c0 <__multiply+0x90>
 80106b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d05b      	beq.n	8010778 <__multiply+0x148>
 80106c0:	6106      	str	r6, [r0, #16]
 80106c2:	b005      	add	sp, #20
 80106c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c8:	f843 2b04 	str.w	r2, [r3], #4
 80106cc:	e7d8      	b.n	8010680 <__multiply+0x50>
 80106ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80106d2:	f1ba 0f00 	cmp.w	sl, #0
 80106d6:	d024      	beq.n	8010722 <__multiply+0xf2>
 80106d8:	f104 0e14 	add.w	lr, r4, #20
 80106dc:	46a9      	mov	r9, r5
 80106de:	f04f 0c00 	mov.w	ip, #0
 80106e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80106e6:	f8d9 1000 	ldr.w	r1, [r9]
 80106ea:	fa1f fb82 	uxth.w	fp, r2
 80106ee:	b289      	uxth	r1, r1
 80106f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80106f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80106f8:	f8d9 2000 	ldr.w	r2, [r9]
 80106fc:	4461      	add	r1, ip
 80106fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010702:	fb0a c20b 	mla	r2, sl, fp, ip
 8010706:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801070a:	b289      	uxth	r1, r1
 801070c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010710:	4577      	cmp	r7, lr
 8010712:	f849 1b04 	str.w	r1, [r9], #4
 8010716:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801071a:	d8e2      	bhi.n	80106e2 <__multiply+0xb2>
 801071c:	9a01      	ldr	r2, [sp, #4]
 801071e:	f845 c002 	str.w	ip, [r5, r2]
 8010722:	9a03      	ldr	r2, [sp, #12]
 8010724:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010728:	3304      	adds	r3, #4
 801072a:	f1b9 0f00 	cmp.w	r9, #0
 801072e:	d021      	beq.n	8010774 <__multiply+0x144>
 8010730:	6829      	ldr	r1, [r5, #0]
 8010732:	f104 0c14 	add.w	ip, r4, #20
 8010736:	46ae      	mov	lr, r5
 8010738:	f04f 0a00 	mov.w	sl, #0
 801073c:	f8bc b000 	ldrh.w	fp, [ip]
 8010740:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010744:	fb09 220b 	mla	r2, r9, fp, r2
 8010748:	4452      	add	r2, sl
 801074a:	b289      	uxth	r1, r1
 801074c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010750:	f84e 1b04 	str.w	r1, [lr], #4
 8010754:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010758:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801075c:	f8be 1000 	ldrh.w	r1, [lr]
 8010760:	fb09 110a 	mla	r1, r9, sl, r1
 8010764:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010768:	4567      	cmp	r7, ip
 801076a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801076e:	d8e5      	bhi.n	801073c <__multiply+0x10c>
 8010770:	9a01      	ldr	r2, [sp, #4]
 8010772:	50a9      	str	r1, [r5, r2]
 8010774:	3504      	adds	r5, #4
 8010776:	e799      	b.n	80106ac <__multiply+0x7c>
 8010778:	3e01      	subs	r6, #1
 801077a:	e79b      	b.n	80106b4 <__multiply+0x84>
 801077c:	08013cc9 	.word	0x08013cc9
 8010780:	08013cda 	.word	0x08013cda

08010784 <__pow5mult>:
 8010784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010788:	4615      	mov	r5, r2
 801078a:	f012 0203 	ands.w	r2, r2, #3
 801078e:	4606      	mov	r6, r0
 8010790:	460f      	mov	r7, r1
 8010792:	d007      	beq.n	80107a4 <__pow5mult+0x20>
 8010794:	4c25      	ldr	r4, [pc, #148]	; (801082c <__pow5mult+0xa8>)
 8010796:	3a01      	subs	r2, #1
 8010798:	2300      	movs	r3, #0
 801079a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801079e:	f7ff fe53 	bl	8010448 <__multadd>
 80107a2:	4607      	mov	r7, r0
 80107a4:	10ad      	asrs	r5, r5, #2
 80107a6:	d03d      	beq.n	8010824 <__pow5mult+0xa0>
 80107a8:	69f4      	ldr	r4, [r6, #28]
 80107aa:	b97c      	cbnz	r4, 80107cc <__pow5mult+0x48>
 80107ac:	2010      	movs	r0, #16
 80107ae:	f7fd fda5 	bl	800e2fc <malloc>
 80107b2:	4602      	mov	r2, r0
 80107b4:	61f0      	str	r0, [r6, #28]
 80107b6:	b928      	cbnz	r0, 80107c4 <__pow5mult+0x40>
 80107b8:	4b1d      	ldr	r3, [pc, #116]	; (8010830 <__pow5mult+0xac>)
 80107ba:	481e      	ldr	r0, [pc, #120]	; (8010834 <__pow5mult+0xb0>)
 80107bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80107c0:	f7fd fd6c 	bl	800e29c <__assert_func>
 80107c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80107c8:	6004      	str	r4, [r0, #0]
 80107ca:	60c4      	str	r4, [r0, #12]
 80107cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80107d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80107d4:	b94c      	cbnz	r4, 80107ea <__pow5mult+0x66>
 80107d6:	f240 2171 	movw	r1, #625	; 0x271
 80107da:	4630      	mov	r0, r6
 80107dc:	f7ff ff12 	bl	8010604 <__i2b>
 80107e0:	2300      	movs	r3, #0
 80107e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80107e6:	4604      	mov	r4, r0
 80107e8:	6003      	str	r3, [r0, #0]
 80107ea:	f04f 0900 	mov.w	r9, #0
 80107ee:	07eb      	lsls	r3, r5, #31
 80107f0:	d50a      	bpl.n	8010808 <__pow5mult+0x84>
 80107f2:	4639      	mov	r1, r7
 80107f4:	4622      	mov	r2, r4
 80107f6:	4630      	mov	r0, r6
 80107f8:	f7ff ff1a 	bl	8010630 <__multiply>
 80107fc:	4639      	mov	r1, r7
 80107fe:	4680      	mov	r8, r0
 8010800:	4630      	mov	r0, r6
 8010802:	f7ff fdff 	bl	8010404 <_Bfree>
 8010806:	4647      	mov	r7, r8
 8010808:	106d      	asrs	r5, r5, #1
 801080a:	d00b      	beq.n	8010824 <__pow5mult+0xa0>
 801080c:	6820      	ldr	r0, [r4, #0]
 801080e:	b938      	cbnz	r0, 8010820 <__pow5mult+0x9c>
 8010810:	4622      	mov	r2, r4
 8010812:	4621      	mov	r1, r4
 8010814:	4630      	mov	r0, r6
 8010816:	f7ff ff0b 	bl	8010630 <__multiply>
 801081a:	6020      	str	r0, [r4, #0]
 801081c:	f8c0 9000 	str.w	r9, [r0]
 8010820:	4604      	mov	r4, r0
 8010822:	e7e4      	b.n	80107ee <__pow5mult+0x6a>
 8010824:	4638      	mov	r0, r7
 8010826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801082a:	bf00      	nop
 801082c:	08013e28 	.word	0x08013e28
 8010830:	08013c5a 	.word	0x08013c5a
 8010834:	08013cda 	.word	0x08013cda

08010838 <__lshift>:
 8010838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801083c:	460c      	mov	r4, r1
 801083e:	6849      	ldr	r1, [r1, #4]
 8010840:	6923      	ldr	r3, [r4, #16]
 8010842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010846:	68a3      	ldr	r3, [r4, #8]
 8010848:	4607      	mov	r7, r0
 801084a:	4691      	mov	r9, r2
 801084c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010850:	f108 0601 	add.w	r6, r8, #1
 8010854:	42b3      	cmp	r3, r6
 8010856:	db0b      	blt.n	8010870 <__lshift+0x38>
 8010858:	4638      	mov	r0, r7
 801085a:	f7ff fd93 	bl	8010384 <_Balloc>
 801085e:	4605      	mov	r5, r0
 8010860:	b948      	cbnz	r0, 8010876 <__lshift+0x3e>
 8010862:	4602      	mov	r2, r0
 8010864:	4b28      	ldr	r3, [pc, #160]	; (8010908 <__lshift+0xd0>)
 8010866:	4829      	ldr	r0, [pc, #164]	; (801090c <__lshift+0xd4>)
 8010868:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801086c:	f7fd fd16 	bl	800e29c <__assert_func>
 8010870:	3101      	adds	r1, #1
 8010872:	005b      	lsls	r3, r3, #1
 8010874:	e7ee      	b.n	8010854 <__lshift+0x1c>
 8010876:	2300      	movs	r3, #0
 8010878:	f100 0114 	add.w	r1, r0, #20
 801087c:	f100 0210 	add.w	r2, r0, #16
 8010880:	4618      	mov	r0, r3
 8010882:	4553      	cmp	r3, sl
 8010884:	db33      	blt.n	80108ee <__lshift+0xb6>
 8010886:	6920      	ldr	r0, [r4, #16]
 8010888:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801088c:	f104 0314 	add.w	r3, r4, #20
 8010890:	f019 091f 	ands.w	r9, r9, #31
 8010894:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010898:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801089c:	d02b      	beq.n	80108f6 <__lshift+0xbe>
 801089e:	f1c9 0e20 	rsb	lr, r9, #32
 80108a2:	468a      	mov	sl, r1
 80108a4:	2200      	movs	r2, #0
 80108a6:	6818      	ldr	r0, [r3, #0]
 80108a8:	fa00 f009 	lsl.w	r0, r0, r9
 80108ac:	4310      	orrs	r0, r2
 80108ae:	f84a 0b04 	str.w	r0, [sl], #4
 80108b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80108b6:	459c      	cmp	ip, r3
 80108b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80108bc:	d8f3      	bhi.n	80108a6 <__lshift+0x6e>
 80108be:	ebac 0304 	sub.w	r3, ip, r4
 80108c2:	3b15      	subs	r3, #21
 80108c4:	f023 0303 	bic.w	r3, r3, #3
 80108c8:	3304      	adds	r3, #4
 80108ca:	f104 0015 	add.w	r0, r4, #21
 80108ce:	4584      	cmp	ip, r0
 80108d0:	bf38      	it	cc
 80108d2:	2304      	movcc	r3, #4
 80108d4:	50ca      	str	r2, [r1, r3]
 80108d6:	b10a      	cbz	r2, 80108dc <__lshift+0xa4>
 80108d8:	f108 0602 	add.w	r6, r8, #2
 80108dc:	3e01      	subs	r6, #1
 80108de:	4638      	mov	r0, r7
 80108e0:	612e      	str	r6, [r5, #16]
 80108e2:	4621      	mov	r1, r4
 80108e4:	f7ff fd8e 	bl	8010404 <_Bfree>
 80108e8:	4628      	mov	r0, r5
 80108ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80108f2:	3301      	adds	r3, #1
 80108f4:	e7c5      	b.n	8010882 <__lshift+0x4a>
 80108f6:	3904      	subs	r1, #4
 80108f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80108fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010900:	459c      	cmp	ip, r3
 8010902:	d8f9      	bhi.n	80108f8 <__lshift+0xc0>
 8010904:	e7ea      	b.n	80108dc <__lshift+0xa4>
 8010906:	bf00      	nop
 8010908:	08013cc9 	.word	0x08013cc9
 801090c:	08013cda 	.word	0x08013cda

08010910 <__mcmp>:
 8010910:	b530      	push	{r4, r5, lr}
 8010912:	6902      	ldr	r2, [r0, #16]
 8010914:	690c      	ldr	r4, [r1, #16]
 8010916:	1b12      	subs	r2, r2, r4
 8010918:	d10e      	bne.n	8010938 <__mcmp+0x28>
 801091a:	f100 0314 	add.w	r3, r0, #20
 801091e:	3114      	adds	r1, #20
 8010920:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010924:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010928:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801092c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010930:	42a5      	cmp	r5, r4
 8010932:	d003      	beq.n	801093c <__mcmp+0x2c>
 8010934:	d305      	bcc.n	8010942 <__mcmp+0x32>
 8010936:	2201      	movs	r2, #1
 8010938:	4610      	mov	r0, r2
 801093a:	bd30      	pop	{r4, r5, pc}
 801093c:	4283      	cmp	r3, r0
 801093e:	d3f3      	bcc.n	8010928 <__mcmp+0x18>
 8010940:	e7fa      	b.n	8010938 <__mcmp+0x28>
 8010942:	f04f 32ff 	mov.w	r2, #4294967295
 8010946:	e7f7      	b.n	8010938 <__mcmp+0x28>

08010948 <__mdiff>:
 8010948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801094c:	460c      	mov	r4, r1
 801094e:	4606      	mov	r6, r0
 8010950:	4611      	mov	r1, r2
 8010952:	4620      	mov	r0, r4
 8010954:	4690      	mov	r8, r2
 8010956:	f7ff ffdb 	bl	8010910 <__mcmp>
 801095a:	1e05      	subs	r5, r0, #0
 801095c:	d110      	bne.n	8010980 <__mdiff+0x38>
 801095e:	4629      	mov	r1, r5
 8010960:	4630      	mov	r0, r6
 8010962:	f7ff fd0f 	bl	8010384 <_Balloc>
 8010966:	b930      	cbnz	r0, 8010976 <__mdiff+0x2e>
 8010968:	4b3a      	ldr	r3, [pc, #232]	; (8010a54 <__mdiff+0x10c>)
 801096a:	4602      	mov	r2, r0
 801096c:	f240 2137 	movw	r1, #567	; 0x237
 8010970:	4839      	ldr	r0, [pc, #228]	; (8010a58 <__mdiff+0x110>)
 8010972:	f7fd fc93 	bl	800e29c <__assert_func>
 8010976:	2301      	movs	r3, #1
 8010978:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801097c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010980:	bfa4      	itt	ge
 8010982:	4643      	movge	r3, r8
 8010984:	46a0      	movge	r8, r4
 8010986:	4630      	mov	r0, r6
 8010988:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801098c:	bfa6      	itte	ge
 801098e:	461c      	movge	r4, r3
 8010990:	2500      	movge	r5, #0
 8010992:	2501      	movlt	r5, #1
 8010994:	f7ff fcf6 	bl	8010384 <_Balloc>
 8010998:	b920      	cbnz	r0, 80109a4 <__mdiff+0x5c>
 801099a:	4b2e      	ldr	r3, [pc, #184]	; (8010a54 <__mdiff+0x10c>)
 801099c:	4602      	mov	r2, r0
 801099e:	f240 2145 	movw	r1, #581	; 0x245
 80109a2:	e7e5      	b.n	8010970 <__mdiff+0x28>
 80109a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80109a8:	6926      	ldr	r6, [r4, #16]
 80109aa:	60c5      	str	r5, [r0, #12]
 80109ac:	f104 0914 	add.w	r9, r4, #20
 80109b0:	f108 0514 	add.w	r5, r8, #20
 80109b4:	f100 0e14 	add.w	lr, r0, #20
 80109b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80109bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80109c0:	f108 0210 	add.w	r2, r8, #16
 80109c4:	46f2      	mov	sl, lr
 80109c6:	2100      	movs	r1, #0
 80109c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80109cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80109d0:	fa11 f88b 	uxtah	r8, r1, fp
 80109d4:	b299      	uxth	r1, r3
 80109d6:	0c1b      	lsrs	r3, r3, #16
 80109d8:	eba8 0801 	sub.w	r8, r8, r1
 80109dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80109e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80109e4:	fa1f f888 	uxth.w	r8, r8
 80109e8:	1419      	asrs	r1, r3, #16
 80109ea:	454e      	cmp	r6, r9
 80109ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80109f0:	f84a 3b04 	str.w	r3, [sl], #4
 80109f4:	d8e8      	bhi.n	80109c8 <__mdiff+0x80>
 80109f6:	1b33      	subs	r3, r6, r4
 80109f8:	3b15      	subs	r3, #21
 80109fa:	f023 0303 	bic.w	r3, r3, #3
 80109fe:	3304      	adds	r3, #4
 8010a00:	3415      	adds	r4, #21
 8010a02:	42a6      	cmp	r6, r4
 8010a04:	bf38      	it	cc
 8010a06:	2304      	movcc	r3, #4
 8010a08:	441d      	add	r5, r3
 8010a0a:	4473      	add	r3, lr
 8010a0c:	469e      	mov	lr, r3
 8010a0e:	462e      	mov	r6, r5
 8010a10:	4566      	cmp	r6, ip
 8010a12:	d30e      	bcc.n	8010a32 <__mdiff+0xea>
 8010a14:	f10c 0203 	add.w	r2, ip, #3
 8010a18:	1b52      	subs	r2, r2, r5
 8010a1a:	f022 0203 	bic.w	r2, r2, #3
 8010a1e:	3d03      	subs	r5, #3
 8010a20:	45ac      	cmp	ip, r5
 8010a22:	bf38      	it	cc
 8010a24:	2200      	movcc	r2, #0
 8010a26:	4413      	add	r3, r2
 8010a28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010a2c:	b17a      	cbz	r2, 8010a4e <__mdiff+0x106>
 8010a2e:	6107      	str	r7, [r0, #16]
 8010a30:	e7a4      	b.n	801097c <__mdiff+0x34>
 8010a32:	f856 8b04 	ldr.w	r8, [r6], #4
 8010a36:	fa11 f288 	uxtah	r2, r1, r8
 8010a3a:	1414      	asrs	r4, r2, #16
 8010a3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010a40:	b292      	uxth	r2, r2
 8010a42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010a46:	f84e 2b04 	str.w	r2, [lr], #4
 8010a4a:	1421      	asrs	r1, r4, #16
 8010a4c:	e7e0      	b.n	8010a10 <__mdiff+0xc8>
 8010a4e:	3f01      	subs	r7, #1
 8010a50:	e7ea      	b.n	8010a28 <__mdiff+0xe0>
 8010a52:	bf00      	nop
 8010a54:	08013cc9 	.word	0x08013cc9
 8010a58:	08013cda 	.word	0x08013cda

08010a5c <__ulp>:
 8010a5c:	b082      	sub	sp, #8
 8010a5e:	ed8d 0b00 	vstr	d0, [sp]
 8010a62:	9a01      	ldr	r2, [sp, #4]
 8010a64:	4b0f      	ldr	r3, [pc, #60]	; (8010aa4 <__ulp+0x48>)
 8010a66:	4013      	ands	r3, r2
 8010a68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	dc08      	bgt.n	8010a82 <__ulp+0x26>
 8010a70:	425b      	negs	r3, r3
 8010a72:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8010a76:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010a7a:	da04      	bge.n	8010a86 <__ulp+0x2a>
 8010a7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010a80:	4113      	asrs	r3, r2
 8010a82:	2200      	movs	r2, #0
 8010a84:	e008      	b.n	8010a98 <__ulp+0x3c>
 8010a86:	f1a2 0314 	sub.w	r3, r2, #20
 8010a8a:	2b1e      	cmp	r3, #30
 8010a8c:	bfda      	itte	le
 8010a8e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010a92:	40da      	lsrle	r2, r3
 8010a94:	2201      	movgt	r2, #1
 8010a96:	2300      	movs	r3, #0
 8010a98:	4619      	mov	r1, r3
 8010a9a:	4610      	mov	r0, r2
 8010a9c:	ec41 0b10 	vmov	d0, r0, r1
 8010aa0:	b002      	add	sp, #8
 8010aa2:	4770      	bx	lr
 8010aa4:	7ff00000 	.word	0x7ff00000

08010aa8 <__b2d>:
 8010aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aac:	6906      	ldr	r6, [r0, #16]
 8010aae:	f100 0814 	add.w	r8, r0, #20
 8010ab2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010ab6:	1f37      	subs	r7, r6, #4
 8010ab8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010abc:	4610      	mov	r0, r2
 8010abe:	f7ff fd53 	bl	8010568 <__hi0bits>
 8010ac2:	f1c0 0320 	rsb	r3, r0, #32
 8010ac6:	280a      	cmp	r0, #10
 8010ac8:	600b      	str	r3, [r1, #0]
 8010aca:	491b      	ldr	r1, [pc, #108]	; (8010b38 <__b2d+0x90>)
 8010acc:	dc15      	bgt.n	8010afa <__b2d+0x52>
 8010ace:	f1c0 0c0b 	rsb	ip, r0, #11
 8010ad2:	fa22 f30c 	lsr.w	r3, r2, ip
 8010ad6:	45b8      	cmp	r8, r7
 8010ad8:	ea43 0501 	orr.w	r5, r3, r1
 8010adc:	bf34      	ite	cc
 8010ade:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010ae2:	2300      	movcs	r3, #0
 8010ae4:	3015      	adds	r0, #21
 8010ae6:	fa02 f000 	lsl.w	r0, r2, r0
 8010aea:	fa23 f30c 	lsr.w	r3, r3, ip
 8010aee:	4303      	orrs	r3, r0
 8010af0:	461c      	mov	r4, r3
 8010af2:	ec45 4b10 	vmov	d0, r4, r5
 8010af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010afa:	45b8      	cmp	r8, r7
 8010afc:	bf3a      	itte	cc
 8010afe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010b02:	f1a6 0708 	subcc.w	r7, r6, #8
 8010b06:	2300      	movcs	r3, #0
 8010b08:	380b      	subs	r0, #11
 8010b0a:	d012      	beq.n	8010b32 <__b2d+0x8a>
 8010b0c:	f1c0 0120 	rsb	r1, r0, #32
 8010b10:	fa23 f401 	lsr.w	r4, r3, r1
 8010b14:	4082      	lsls	r2, r0
 8010b16:	4322      	orrs	r2, r4
 8010b18:	4547      	cmp	r7, r8
 8010b1a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8010b1e:	bf8c      	ite	hi
 8010b20:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010b24:	2200      	movls	r2, #0
 8010b26:	4083      	lsls	r3, r0
 8010b28:	40ca      	lsrs	r2, r1
 8010b2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	e7de      	b.n	8010af0 <__b2d+0x48>
 8010b32:	ea42 0501 	orr.w	r5, r2, r1
 8010b36:	e7db      	b.n	8010af0 <__b2d+0x48>
 8010b38:	3ff00000 	.word	0x3ff00000

08010b3c <__d2b>:
 8010b3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b40:	460f      	mov	r7, r1
 8010b42:	2101      	movs	r1, #1
 8010b44:	ec59 8b10 	vmov	r8, r9, d0
 8010b48:	4616      	mov	r6, r2
 8010b4a:	f7ff fc1b 	bl	8010384 <_Balloc>
 8010b4e:	4604      	mov	r4, r0
 8010b50:	b930      	cbnz	r0, 8010b60 <__d2b+0x24>
 8010b52:	4602      	mov	r2, r0
 8010b54:	4b24      	ldr	r3, [pc, #144]	; (8010be8 <__d2b+0xac>)
 8010b56:	4825      	ldr	r0, [pc, #148]	; (8010bec <__d2b+0xb0>)
 8010b58:	f240 310f 	movw	r1, #783	; 0x30f
 8010b5c:	f7fd fb9e 	bl	800e29c <__assert_func>
 8010b60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010b64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b68:	bb2d      	cbnz	r5, 8010bb6 <__d2b+0x7a>
 8010b6a:	9301      	str	r3, [sp, #4]
 8010b6c:	f1b8 0300 	subs.w	r3, r8, #0
 8010b70:	d026      	beq.n	8010bc0 <__d2b+0x84>
 8010b72:	4668      	mov	r0, sp
 8010b74:	9300      	str	r3, [sp, #0]
 8010b76:	f7ff fd17 	bl	80105a8 <__lo0bits>
 8010b7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010b7e:	b1e8      	cbz	r0, 8010bbc <__d2b+0x80>
 8010b80:	f1c0 0320 	rsb	r3, r0, #32
 8010b84:	fa02 f303 	lsl.w	r3, r2, r3
 8010b88:	430b      	orrs	r3, r1
 8010b8a:	40c2      	lsrs	r2, r0
 8010b8c:	6163      	str	r3, [r4, #20]
 8010b8e:	9201      	str	r2, [sp, #4]
 8010b90:	9b01      	ldr	r3, [sp, #4]
 8010b92:	61a3      	str	r3, [r4, #24]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	bf14      	ite	ne
 8010b98:	2202      	movne	r2, #2
 8010b9a:	2201      	moveq	r2, #1
 8010b9c:	6122      	str	r2, [r4, #16]
 8010b9e:	b1bd      	cbz	r5, 8010bd0 <__d2b+0x94>
 8010ba0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010ba4:	4405      	add	r5, r0
 8010ba6:	603d      	str	r5, [r7, #0]
 8010ba8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010bac:	6030      	str	r0, [r6, #0]
 8010bae:	4620      	mov	r0, r4
 8010bb0:	b003      	add	sp, #12
 8010bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010bba:	e7d6      	b.n	8010b6a <__d2b+0x2e>
 8010bbc:	6161      	str	r1, [r4, #20]
 8010bbe:	e7e7      	b.n	8010b90 <__d2b+0x54>
 8010bc0:	a801      	add	r0, sp, #4
 8010bc2:	f7ff fcf1 	bl	80105a8 <__lo0bits>
 8010bc6:	9b01      	ldr	r3, [sp, #4]
 8010bc8:	6163      	str	r3, [r4, #20]
 8010bca:	3020      	adds	r0, #32
 8010bcc:	2201      	movs	r2, #1
 8010bce:	e7e5      	b.n	8010b9c <__d2b+0x60>
 8010bd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010bd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010bd8:	6038      	str	r0, [r7, #0]
 8010bda:	6918      	ldr	r0, [r3, #16]
 8010bdc:	f7ff fcc4 	bl	8010568 <__hi0bits>
 8010be0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010be4:	e7e2      	b.n	8010bac <__d2b+0x70>
 8010be6:	bf00      	nop
 8010be8:	08013cc9 	.word	0x08013cc9
 8010bec:	08013cda 	.word	0x08013cda

08010bf0 <__ratio>:
 8010bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf4:	4688      	mov	r8, r1
 8010bf6:	4669      	mov	r1, sp
 8010bf8:	4681      	mov	r9, r0
 8010bfa:	f7ff ff55 	bl	8010aa8 <__b2d>
 8010bfe:	a901      	add	r1, sp, #4
 8010c00:	4640      	mov	r0, r8
 8010c02:	ec55 4b10 	vmov	r4, r5, d0
 8010c06:	f7ff ff4f 	bl	8010aa8 <__b2d>
 8010c0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010c12:	eba3 0c02 	sub.w	ip, r3, r2
 8010c16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010c1a:	1a9b      	subs	r3, r3, r2
 8010c1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010c20:	ec51 0b10 	vmov	r0, r1, d0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	bfd6      	itet	le
 8010c28:	460a      	movle	r2, r1
 8010c2a:	462a      	movgt	r2, r5
 8010c2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010c30:	468b      	mov	fp, r1
 8010c32:	462f      	mov	r7, r5
 8010c34:	bfd4      	ite	le
 8010c36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010c3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010c3e:	4620      	mov	r0, r4
 8010c40:	ee10 2a10 	vmov	r2, s0
 8010c44:	465b      	mov	r3, fp
 8010c46:	4639      	mov	r1, r7
 8010c48:	f7ef fe28 	bl	800089c <__aeabi_ddiv>
 8010c4c:	ec41 0b10 	vmov	d0, r0, r1
 8010c50:	b003      	add	sp, #12
 8010c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c56 <__copybits>:
 8010c56:	3901      	subs	r1, #1
 8010c58:	b570      	push	{r4, r5, r6, lr}
 8010c5a:	1149      	asrs	r1, r1, #5
 8010c5c:	6914      	ldr	r4, [r2, #16]
 8010c5e:	3101      	adds	r1, #1
 8010c60:	f102 0314 	add.w	r3, r2, #20
 8010c64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010c68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010c6c:	1f05      	subs	r5, r0, #4
 8010c6e:	42a3      	cmp	r3, r4
 8010c70:	d30c      	bcc.n	8010c8c <__copybits+0x36>
 8010c72:	1aa3      	subs	r3, r4, r2
 8010c74:	3b11      	subs	r3, #17
 8010c76:	f023 0303 	bic.w	r3, r3, #3
 8010c7a:	3211      	adds	r2, #17
 8010c7c:	42a2      	cmp	r2, r4
 8010c7e:	bf88      	it	hi
 8010c80:	2300      	movhi	r3, #0
 8010c82:	4418      	add	r0, r3
 8010c84:	2300      	movs	r3, #0
 8010c86:	4288      	cmp	r0, r1
 8010c88:	d305      	bcc.n	8010c96 <__copybits+0x40>
 8010c8a:	bd70      	pop	{r4, r5, r6, pc}
 8010c8c:	f853 6b04 	ldr.w	r6, [r3], #4
 8010c90:	f845 6f04 	str.w	r6, [r5, #4]!
 8010c94:	e7eb      	b.n	8010c6e <__copybits+0x18>
 8010c96:	f840 3b04 	str.w	r3, [r0], #4
 8010c9a:	e7f4      	b.n	8010c86 <__copybits+0x30>

08010c9c <__any_on>:
 8010c9c:	f100 0214 	add.w	r2, r0, #20
 8010ca0:	6900      	ldr	r0, [r0, #16]
 8010ca2:	114b      	asrs	r3, r1, #5
 8010ca4:	4298      	cmp	r0, r3
 8010ca6:	b510      	push	{r4, lr}
 8010ca8:	db11      	blt.n	8010cce <__any_on+0x32>
 8010caa:	dd0a      	ble.n	8010cc2 <__any_on+0x26>
 8010cac:	f011 011f 	ands.w	r1, r1, #31
 8010cb0:	d007      	beq.n	8010cc2 <__any_on+0x26>
 8010cb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010cb6:	fa24 f001 	lsr.w	r0, r4, r1
 8010cba:	fa00 f101 	lsl.w	r1, r0, r1
 8010cbe:	428c      	cmp	r4, r1
 8010cc0:	d10b      	bne.n	8010cda <__any_on+0x3e>
 8010cc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d803      	bhi.n	8010cd2 <__any_on+0x36>
 8010cca:	2000      	movs	r0, #0
 8010ccc:	bd10      	pop	{r4, pc}
 8010cce:	4603      	mov	r3, r0
 8010cd0:	e7f7      	b.n	8010cc2 <__any_on+0x26>
 8010cd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010cd6:	2900      	cmp	r1, #0
 8010cd8:	d0f5      	beq.n	8010cc6 <__any_on+0x2a>
 8010cda:	2001      	movs	r0, #1
 8010cdc:	e7f6      	b.n	8010ccc <__any_on+0x30>

08010cde <sulp>:
 8010cde:	b570      	push	{r4, r5, r6, lr}
 8010ce0:	4604      	mov	r4, r0
 8010ce2:	460d      	mov	r5, r1
 8010ce4:	ec45 4b10 	vmov	d0, r4, r5
 8010ce8:	4616      	mov	r6, r2
 8010cea:	f7ff feb7 	bl	8010a5c <__ulp>
 8010cee:	ec51 0b10 	vmov	r0, r1, d0
 8010cf2:	b17e      	cbz	r6, 8010d14 <sulp+0x36>
 8010cf4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010cf8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	dd09      	ble.n	8010d14 <sulp+0x36>
 8010d00:	051b      	lsls	r3, r3, #20
 8010d02:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010d06:	2400      	movs	r4, #0
 8010d08:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010d0c:	4622      	mov	r2, r4
 8010d0e:	462b      	mov	r3, r5
 8010d10:	f7ef fc9a 	bl	8000648 <__aeabi_dmul>
 8010d14:	bd70      	pop	{r4, r5, r6, pc}
	...

08010d18 <_strtod_l>:
 8010d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d1c:	ed2d 8b02 	vpush	{d8}
 8010d20:	b09b      	sub	sp, #108	; 0x6c
 8010d22:	4604      	mov	r4, r0
 8010d24:	9213      	str	r2, [sp, #76]	; 0x4c
 8010d26:	2200      	movs	r2, #0
 8010d28:	9216      	str	r2, [sp, #88]	; 0x58
 8010d2a:	460d      	mov	r5, r1
 8010d2c:	f04f 0800 	mov.w	r8, #0
 8010d30:	f04f 0900 	mov.w	r9, #0
 8010d34:	460a      	mov	r2, r1
 8010d36:	9215      	str	r2, [sp, #84]	; 0x54
 8010d38:	7811      	ldrb	r1, [r2, #0]
 8010d3a:	292b      	cmp	r1, #43	; 0x2b
 8010d3c:	d04c      	beq.n	8010dd8 <_strtod_l+0xc0>
 8010d3e:	d83a      	bhi.n	8010db6 <_strtod_l+0x9e>
 8010d40:	290d      	cmp	r1, #13
 8010d42:	d834      	bhi.n	8010dae <_strtod_l+0x96>
 8010d44:	2908      	cmp	r1, #8
 8010d46:	d834      	bhi.n	8010db2 <_strtod_l+0x9a>
 8010d48:	2900      	cmp	r1, #0
 8010d4a:	d03d      	beq.n	8010dc8 <_strtod_l+0xb0>
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	920a      	str	r2, [sp, #40]	; 0x28
 8010d50:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8010d52:	7832      	ldrb	r2, [r6, #0]
 8010d54:	2a30      	cmp	r2, #48	; 0x30
 8010d56:	f040 80b4 	bne.w	8010ec2 <_strtod_l+0x1aa>
 8010d5a:	7872      	ldrb	r2, [r6, #1]
 8010d5c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010d60:	2a58      	cmp	r2, #88	; 0x58
 8010d62:	d170      	bne.n	8010e46 <_strtod_l+0x12e>
 8010d64:	9302      	str	r3, [sp, #8]
 8010d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d68:	9301      	str	r3, [sp, #4]
 8010d6a:	ab16      	add	r3, sp, #88	; 0x58
 8010d6c:	9300      	str	r3, [sp, #0]
 8010d6e:	4a8e      	ldr	r2, [pc, #568]	; (8010fa8 <_strtod_l+0x290>)
 8010d70:	ab17      	add	r3, sp, #92	; 0x5c
 8010d72:	a915      	add	r1, sp, #84	; 0x54
 8010d74:	4620      	mov	r0, r4
 8010d76:	f001 fac1 	bl	80122fc <__gethex>
 8010d7a:	f010 070f 	ands.w	r7, r0, #15
 8010d7e:	4605      	mov	r5, r0
 8010d80:	d005      	beq.n	8010d8e <_strtod_l+0x76>
 8010d82:	2f06      	cmp	r7, #6
 8010d84:	d12a      	bne.n	8010ddc <_strtod_l+0xc4>
 8010d86:	3601      	adds	r6, #1
 8010d88:	2300      	movs	r3, #0
 8010d8a:	9615      	str	r6, [sp, #84]	; 0x54
 8010d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8010d8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	f040 857f 	bne.w	8011894 <_strtod_l+0xb7c>
 8010d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d98:	b1db      	cbz	r3, 8010dd2 <_strtod_l+0xba>
 8010d9a:	4642      	mov	r2, r8
 8010d9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010da0:	ec43 2b10 	vmov	d0, r2, r3
 8010da4:	b01b      	add	sp, #108	; 0x6c
 8010da6:	ecbd 8b02 	vpop	{d8}
 8010daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dae:	2920      	cmp	r1, #32
 8010db0:	d1cc      	bne.n	8010d4c <_strtod_l+0x34>
 8010db2:	3201      	adds	r2, #1
 8010db4:	e7bf      	b.n	8010d36 <_strtod_l+0x1e>
 8010db6:	292d      	cmp	r1, #45	; 0x2d
 8010db8:	d1c8      	bne.n	8010d4c <_strtod_l+0x34>
 8010dba:	2101      	movs	r1, #1
 8010dbc:	910a      	str	r1, [sp, #40]	; 0x28
 8010dbe:	1c51      	adds	r1, r2, #1
 8010dc0:	9115      	str	r1, [sp, #84]	; 0x54
 8010dc2:	7852      	ldrb	r2, [r2, #1]
 8010dc4:	2a00      	cmp	r2, #0
 8010dc6:	d1c3      	bne.n	8010d50 <_strtod_l+0x38>
 8010dc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010dca:	9515      	str	r5, [sp, #84]	; 0x54
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	f040 855f 	bne.w	8011890 <_strtod_l+0xb78>
 8010dd2:	4642      	mov	r2, r8
 8010dd4:	464b      	mov	r3, r9
 8010dd6:	e7e3      	b.n	8010da0 <_strtod_l+0x88>
 8010dd8:	2100      	movs	r1, #0
 8010dda:	e7ef      	b.n	8010dbc <_strtod_l+0xa4>
 8010ddc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010dde:	b13a      	cbz	r2, 8010df0 <_strtod_l+0xd8>
 8010de0:	2135      	movs	r1, #53	; 0x35
 8010de2:	a818      	add	r0, sp, #96	; 0x60
 8010de4:	f7ff ff37 	bl	8010c56 <__copybits>
 8010de8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010dea:	4620      	mov	r0, r4
 8010dec:	f7ff fb0a 	bl	8010404 <_Bfree>
 8010df0:	3f01      	subs	r7, #1
 8010df2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010df4:	2f04      	cmp	r7, #4
 8010df6:	d806      	bhi.n	8010e06 <_strtod_l+0xee>
 8010df8:	e8df f007 	tbb	[pc, r7]
 8010dfc:	201d0314 	.word	0x201d0314
 8010e00:	14          	.byte	0x14
 8010e01:	00          	.byte	0x00
 8010e02:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8010e06:	05e9      	lsls	r1, r5, #23
 8010e08:	bf48      	it	mi
 8010e0a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010e0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010e12:	0d1b      	lsrs	r3, r3, #20
 8010e14:	051b      	lsls	r3, r3, #20
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d1b9      	bne.n	8010d8e <_strtod_l+0x76>
 8010e1a:	f7fe fbab 	bl	800f574 <__errno>
 8010e1e:	2322      	movs	r3, #34	; 0x22
 8010e20:	6003      	str	r3, [r0, #0]
 8010e22:	e7b4      	b.n	8010d8e <_strtod_l+0x76>
 8010e24:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8010e28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010e2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010e30:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8010e34:	e7e7      	b.n	8010e06 <_strtod_l+0xee>
 8010e36:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010fb0 <_strtod_l+0x298>
 8010e3a:	e7e4      	b.n	8010e06 <_strtod_l+0xee>
 8010e3c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010e40:	f04f 38ff 	mov.w	r8, #4294967295
 8010e44:	e7df      	b.n	8010e06 <_strtod_l+0xee>
 8010e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e48:	1c5a      	adds	r2, r3, #1
 8010e4a:	9215      	str	r2, [sp, #84]	; 0x54
 8010e4c:	785b      	ldrb	r3, [r3, #1]
 8010e4e:	2b30      	cmp	r3, #48	; 0x30
 8010e50:	d0f9      	beq.n	8010e46 <_strtod_l+0x12e>
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d09b      	beq.n	8010d8e <_strtod_l+0x76>
 8010e56:	2301      	movs	r3, #1
 8010e58:	f04f 0a00 	mov.w	sl, #0
 8010e5c:	9304      	str	r3, [sp, #16]
 8010e5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e62:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010e66:	46d3      	mov	fp, sl
 8010e68:	220a      	movs	r2, #10
 8010e6a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010e6c:	7806      	ldrb	r6, [r0, #0]
 8010e6e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010e72:	b2d9      	uxtb	r1, r3
 8010e74:	2909      	cmp	r1, #9
 8010e76:	d926      	bls.n	8010ec6 <_strtod_l+0x1ae>
 8010e78:	494c      	ldr	r1, [pc, #304]	; (8010fac <_strtod_l+0x294>)
 8010e7a:	2201      	movs	r2, #1
 8010e7c:	f001 f9a6 	bl	80121cc <strncmp>
 8010e80:	2800      	cmp	r0, #0
 8010e82:	d030      	beq.n	8010ee6 <_strtod_l+0x1ce>
 8010e84:	2000      	movs	r0, #0
 8010e86:	4632      	mov	r2, r6
 8010e88:	9005      	str	r0, [sp, #20]
 8010e8a:	465e      	mov	r6, fp
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	2a65      	cmp	r2, #101	; 0x65
 8010e90:	d001      	beq.n	8010e96 <_strtod_l+0x17e>
 8010e92:	2a45      	cmp	r2, #69	; 0x45
 8010e94:	d113      	bne.n	8010ebe <_strtod_l+0x1a6>
 8010e96:	b91e      	cbnz	r6, 8010ea0 <_strtod_l+0x188>
 8010e98:	9a04      	ldr	r2, [sp, #16]
 8010e9a:	4302      	orrs	r2, r0
 8010e9c:	d094      	beq.n	8010dc8 <_strtod_l+0xb0>
 8010e9e:	2600      	movs	r6, #0
 8010ea0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8010ea2:	1c6a      	adds	r2, r5, #1
 8010ea4:	9215      	str	r2, [sp, #84]	; 0x54
 8010ea6:	786a      	ldrb	r2, [r5, #1]
 8010ea8:	2a2b      	cmp	r2, #43	; 0x2b
 8010eaa:	d074      	beq.n	8010f96 <_strtod_l+0x27e>
 8010eac:	2a2d      	cmp	r2, #45	; 0x2d
 8010eae:	d078      	beq.n	8010fa2 <_strtod_l+0x28a>
 8010eb0:	f04f 0c00 	mov.w	ip, #0
 8010eb4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010eb8:	2909      	cmp	r1, #9
 8010eba:	d97f      	bls.n	8010fbc <_strtod_l+0x2a4>
 8010ebc:	9515      	str	r5, [sp, #84]	; 0x54
 8010ebe:	2700      	movs	r7, #0
 8010ec0:	e09e      	b.n	8011000 <_strtod_l+0x2e8>
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	e7c8      	b.n	8010e58 <_strtod_l+0x140>
 8010ec6:	f1bb 0f08 	cmp.w	fp, #8
 8010eca:	bfd8      	it	le
 8010ecc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010ece:	f100 0001 	add.w	r0, r0, #1
 8010ed2:	bfda      	itte	le
 8010ed4:	fb02 3301 	mlale	r3, r2, r1, r3
 8010ed8:	9309      	strle	r3, [sp, #36]	; 0x24
 8010eda:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010ede:	f10b 0b01 	add.w	fp, fp, #1
 8010ee2:	9015      	str	r0, [sp, #84]	; 0x54
 8010ee4:	e7c1      	b.n	8010e6a <_strtod_l+0x152>
 8010ee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ee8:	1c5a      	adds	r2, r3, #1
 8010eea:	9215      	str	r2, [sp, #84]	; 0x54
 8010eec:	785a      	ldrb	r2, [r3, #1]
 8010eee:	f1bb 0f00 	cmp.w	fp, #0
 8010ef2:	d037      	beq.n	8010f64 <_strtod_l+0x24c>
 8010ef4:	9005      	str	r0, [sp, #20]
 8010ef6:	465e      	mov	r6, fp
 8010ef8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010efc:	2b09      	cmp	r3, #9
 8010efe:	d912      	bls.n	8010f26 <_strtod_l+0x20e>
 8010f00:	2301      	movs	r3, #1
 8010f02:	e7c4      	b.n	8010e8e <_strtod_l+0x176>
 8010f04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f06:	1c5a      	adds	r2, r3, #1
 8010f08:	9215      	str	r2, [sp, #84]	; 0x54
 8010f0a:	785a      	ldrb	r2, [r3, #1]
 8010f0c:	3001      	adds	r0, #1
 8010f0e:	2a30      	cmp	r2, #48	; 0x30
 8010f10:	d0f8      	beq.n	8010f04 <_strtod_l+0x1ec>
 8010f12:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010f16:	2b08      	cmp	r3, #8
 8010f18:	f200 84c1 	bhi.w	801189e <_strtod_l+0xb86>
 8010f1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f1e:	9005      	str	r0, [sp, #20]
 8010f20:	2000      	movs	r0, #0
 8010f22:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f24:	4606      	mov	r6, r0
 8010f26:	3a30      	subs	r2, #48	; 0x30
 8010f28:	f100 0301 	add.w	r3, r0, #1
 8010f2c:	d014      	beq.n	8010f58 <_strtod_l+0x240>
 8010f2e:	9905      	ldr	r1, [sp, #20]
 8010f30:	4419      	add	r1, r3
 8010f32:	9105      	str	r1, [sp, #20]
 8010f34:	4633      	mov	r3, r6
 8010f36:	eb00 0c06 	add.w	ip, r0, r6
 8010f3a:	210a      	movs	r1, #10
 8010f3c:	4563      	cmp	r3, ip
 8010f3e:	d113      	bne.n	8010f68 <_strtod_l+0x250>
 8010f40:	1833      	adds	r3, r6, r0
 8010f42:	2b08      	cmp	r3, #8
 8010f44:	f106 0601 	add.w	r6, r6, #1
 8010f48:	4406      	add	r6, r0
 8010f4a:	dc1a      	bgt.n	8010f82 <_strtod_l+0x26a>
 8010f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f4e:	230a      	movs	r3, #10
 8010f50:	fb03 2301 	mla	r3, r3, r1, r2
 8010f54:	9309      	str	r3, [sp, #36]	; 0x24
 8010f56:	2300      	movs	r3, #0
 8010f58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010f5a:	1c51      	adds	r1, r2, #1
 8010f5c:	9115      	str	r1, [sp, #84]	; 0x54
 8010f5e:	7852      	ldrb	r2, [r2, #1]
 8010f60:	4618      	mov	r0, r3
 8010f62:	e7c9      	b.n	8010ef8 <_strtod_l+0x1e0>
 8010f64:	4658      	mov	r0, fp
 8010f66:	e7d2      	b.n	8010f0e <_strtod_l+0x1f6>
 8010f68:	2b08      	cmp	r3, #8
 8010f6a:	f103 0301 	add.w	r3, r3, #1
 8010f6e:	dc03      	bgt.n	8010f78 <_strtod_l+0x260>
 8010f70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010f72:	434f      	muls	r7, r1
 8010f74:	9709      	str	r7, [sp, #36]	; 0x24
 8010f76:	e7e1      	b.n	8010f3c <_strtod_l+0x224>
 8010f78:	2b10      	cmp	r3, #16
 8010f7a:	bfd8      	it	le
 8010f7c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8010f80:	e7dc      	b.n	8010f3c <_strtod_l+0x224>
 8010f82:	2e10      	cmp	r6, #16
 8010f84:	bfdc      	itt	le
 8010f86:	230a      	movle	r3, #10
 8010f88:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8010f8c:	e7e3      	b.n	8010f56 <_strtod_l+0x23e>
 8010f8e:	2300      	movs	r3, #0
 8010f90:	9305      	str	r3, [sp, #20]
 8010f92:	2301      	movs	r3, #1
 8010f94:	e780      	b.n	8010e98 <_strtod_l+0x180>
 8010f96:	f04f 0c00 	mov.w	ip, #0
 8010f9a:	1caa      	adds	r2, r5, #2
 8010f9c:	9215      	str	r2, [sp, #84]	; 0x54
 8010f9e:	78aa      	ldrb	r2, [r5, #2]
 8010fa0:	e788      	b.n	8010eb4 <_strtod_l+0x19c>
 8010fa2:	f04f 0c01 	mov.w	ip, #1
 8010fa6:	e7f8      	b.n	8010f9a <_strtod_l+0x282>
 8010fa8:	08013e38 	.word	0x08013e38
 8010fac:	08013e34 	.word	0x08013e34
 8010fb0:	7ff00000 	.word	0x7ff00000
 8010fb4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010fb6:	1c51      	adds	r1, r2, #1
 8010fb8:	9115      	str	r1, [sp, #84]	; 0x54
 8010fba:	7852      	ldrb	r2, [r2, #1]
 8010fbc:	2a30      	cmp	r2, #48	; 0x30
 8010fbe:	d0f9      	beq.n	8010fb4 <_strtod_l+0x29c>
 8010fc0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010fc4:	2908      	cmp	r1, #8
 8010fc6:	f63f af7a 	bhi.w	8010ebe <_strtod_l+0x1a6>
 8010fca:	3a30      	subs	r2, #48	; 0x30
 8010fcc:	9208      	str	r2, [sp, #32]
 8010fce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010fd0:	920c      	str	r2, [sp, #48]	; 0x30
 8010fd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010fd4:	1c57      	adds	r7, r2, #1
 8010fd6:	9715      	str	r7, [sp, #84]	; 0x54
 8010fd8:	7852      	ldrb	r2, [r2, #1]
 8010fda:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010fde:	f1be 0f09 	cmp.w	lr, #9
 8010fe2:	d938      	bls.n	8011056 <_strtod_l+0x33e>
 8010fe4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010fe6:	1a7f      	subs	r7, r7, r1
 8010fe8:	2f08      	cmp	r7, #8
 8010fea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010fee:	dc03      	bgt.n	8010ff8 <_strtod_l+0x2e0>
 8010ff0:	9908      	ldr	r1, [sp, #32]
 8010ff2:	428f      	cmp	r7, r1
 8010ff4:	bfa8      	it	ge
 8010ff6:	460f      	movge	r7, r1
 8010ff8:	f1bc 0f00 	cmp.w	ip, #0
 8010ffc:	d000      	beq.n	8011000 <_strtod_l+0x2e8>
 8010ffe:	427f      	negs	r7, r7
 8011000:	2e00      	cmp	r6, #0
 8011002:	d14f      	bne.n	80110a4 <_strtod_l+0x38c>
 8011004:	9904      	ldr	r1, [sp, #16]
 8011006:	4301      	orrs	r1, r0
 8011008:	f47f aec1 	bne.w	8010d8e <_strtod_l+0x76>
 801100c:	2b00      	cmp	r3, #0
 801100e:	f47f aedb 	bne.w	8010dc8 <_strtod_l+0xb0>
 8011012:	2a69      	cmp	r2, #105	; 0x69
 8011014:	d029      	beq.n	801106a <_strtod_l+0x352>
 8011016:	dc26      	bgt.n	8011066 <_strtod_l+0x34e>
 8011018:	2a49      	cmp	r2, #73	; 0x49
 801101a:	d026      	beq.n	801106a <_strtod_l+0x352>
 801101c:	2a4e      	cmp	r2, #78	; 0x4e
 801101e:	f47f aed3 	bne.w	8010dc8 <_strtod_l+0xb0>
 8011022:	499b      	ldr	r1, [pc, #620]	; (8011290 <_strtod_l+0x578>)
 8011024:	a815      	add	r0, sp, #84	; 0x54
 8011026:	f001 fba9 	bl	801277c <__match>
 801102a:	2800      	cmp	r0, #0
 801102c:	f43f aecc 	beq.w	8010dc8 <_strtod_l+0xb0>
 8011030:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011032:	781b      	ldrb	r3, [r3, #0]
 8011034:	2b28      	cmp	r3, #40	; 0x28
 8011036:	d12f      	bne.n	8011098 <_strtod_l+0x380>
 8011038:	4996      	ldr	r1, [pc, #600]	; (8011294 <_strtod_l+0x57c>)
 801103a:	aa18      	add	r2, sp, #96	; 0x60
 801103c:	a815      	add	r0, sp, #84	; 0x54
 801103e:	f001 fbb1 	bl	80127a4 <__hexnan>
 8011042:	2805      	cmp	r0, #5
 8011044:	d128      	bne.n	8011098 <_strtod_l+0x380>
 8011046:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011048:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801104c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011050:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011054:	e69b      	b.n	8010d8e <_strtod_l+0x76>
 8011056:	9f08      	ldr	r7, [sp, #32]
 8011058:	210a      	movs	r1, #10
 801105a:	fb01 2107 	mla	r1, r1, r7, r2
 801105e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8011062:	9208      	str	r2, [sp, #32]
 8011064:	e7b5      	b.n	8010fd2 <_strtod_l+0x2ba>
 8011066:	2a6e      	cmp	r2, #110	; 0x6e
 8011068:	e7d9      	b.n	801101e <_strtod_l+0x306>
 801106a:	498b      	ldr	r1, [pc, #556]	; (8011298 <_strtod_l+0x580>)
 801106c:	a815      	add	r0, sp, #84	; 0x54
 801106e:	f001 fb85 	bl	801277c <__match>
 8011072:	2800      	cmp	r0, #0
 8011074:	f43f aea8 	beq.w	8010dc8 <_strtod_l+0xb0>
 8011078:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801107a:	4988      	ldr	r1, [pc, #544]	; (801129c <_strtod_l+0x584>)
 801107c:	3b01      	subs	r3, #1
 801107e:	a815      	add	r0, sp, #84	; 0x54
 8011080:	9315      	str	r3, [sp, #84]	; 0x54
 8011082:	f001 fb7b 	bl	801277c <__match>
 8011086:	b910      	cbnz	r0, 801108e <_strtod_l+0x376>
 8011088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801108a:	3301      	adds	r3, #1
 801108c:	9315      	str	r3, [sp, #84]	; 0x54
 801108e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80112ac <_strtod_l+0x594>
 8011092:	f04f 0800 	mov.w	r8, #0
 8011096:	e67a      	b.n	8010d8e <_strtod_l+0x76>
 8011098:	4881      	ldr	r0, [pc, #516]	; (80112a0 <_strtod_l+0x588>)
 801109a:	f001 f8a9 	bl	80121f0 <nan>
 801109e:	ec59 8b10 	vmov	r8, r9, d0
 80110a2:	e674      	b.n	8010d8e <_strtod_l+0x76>
 80110a4:	9b05      	ldr	r3, [sp, #20]
 80110a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110a8:	1afb      	subs	r3, r7, r3
 80110aa:	f1bb 0f00 	cmp.w	fp, #0
 80110ae:	bf08      	it	eq
 80110b0:	46b3      	moveq	fp, r6
 80110b2:	2e10      	cmp	r6, #16
 80110b4:	9308      	str	r3, [sp, #32]
 80110b6:	4635      	mov	r5, r6
 80110b8:	bfa8      	it	ge
 80110ba:	2510      	movge	r5, #16
 80110bc:	f7ef fa4a 	bl	8000554 <__aeabi_ui2d>
 80110c0:	2e09      	cmp	r6, #9
 80110c2:	4680      	mov	r8, r0
 80110c4:	4689      	mov	r9, r1
 80110c6:	dd13      	ble.n	80110f0 <_strtod_l+0x3d8>
 80110c8:	4b76      	ldr	r3, [pc, #472]	; (80112a4 <_strtod_l+0x58c>)
 80110ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80110ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80110d2:	f7ef fab9 	bl	8000648 <__aeabi_dmul>
 80110d6:	4680      	mov	r8, r0
 80110d8:	4650      	mov	r0, sl
 80110da:	4689      	mov	r9, r1
 80110dc:	f7ef fa3a 	bl	8000554 <__aeabi_ui2d>
 80110e0:	4602      	mov	r2, r0
 80110e2:	460b      	mov	r3, r1
 80110e4:	4640      	mov	r0, r8
 80110e6:	4649      	mov	r1, r9
 80110e8:	f7ef f8f8 	bl	80002dc <__adddf3>
 80110ec:	4680      	mov	r8, r0
 80110ee:	4689      	mov	r9, r1
 80110f0:	2e0f      	cmp	r6, #15
 80110f2:	dc38      	bgt.n	8011166 <_strtod_l+0x44e>
 80110f4:	9b08      	ldr	r3, [sp, #32]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	f43f ae49 	beq.w	8010d8e <_strtod_l+0x76>
 80110fc:	dd24      	ble.n	8011148 <_strtod_l+0x430>
 80110fe:	2b16      	cmp	r3, #22
 8011100:	dc0b      	bgt.n	801111a <_strtod_l+0x402>
 8011102:	4968      	ldr	r1, [pc, #416]	; (80112a4 <_strtod_l+0x58c>)
 8011104:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801110c:	4642      	mov	r2, r8
 801110e:	464b      	mov	r3, r9
 8011110:	f7ef fa9a 	bl	8000648 <__aeabi_dmul>
 8011114:	4680      	mov	r8, r0
 8011116:	4689      	mov	r9, r1
 8011118:	e639      	b.n	8010d8e <_strtod_l+0x76>
 801111a:	9a08      	ldr	r2, [sp, #32]
 801111c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8011120:	4293      	cmp	r3, r2
 8011122:	db20      	blt.n	8011166 <_strtod_l+0x44e>
 8011124:	4c5f      	ldr	r4, [pc, #380]	; (80112a4 <_strtod_l+0x58c>)
 8011126:	f1c6 060f 	rsb	r6, r6, #15
 801112a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801112e:	4642      	mov	r2, r8
 8011130:	464b      	mov	r3, r9
 8011132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011136:	f7ef fa87 	bl	8000648 <__aeabi_dmul>
 801113a:	9b08      	ldr	r3, [sp, #32]
 801113c:	1b9e      	subs	r6, r3, r6
 801113e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8011142:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011146:	e7e3      	b.n	8011110 <_strtod_l+0x3f8>
 8011148:	9b08      	ldr	r3, [sp, #32]
 801114a:	3316      	adds	r3, #22
 801114c:	db0b      	blt.n	8011166 <_strtod_l+0x44e>
 801114e:	9b05      	ldr	r3, [sp, #20]
 8011150:	1bdf      	subs	r7, r3, r7
 8011152:	4b54      	ldr	r3, [pc, #336]	; (80112a4 <_strtod_l+0x58c>)
 8011154:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011158:	e9d7 2300 	ldrd	r2, r3, [r7]
 801115c:	4640      	mov	r0, r8
 801115e:	4649      	mov	r1, r9
 8011160:	f7ef fb9c 	bl	800089c <__aeabi_ddiv>
 8011164:	e7d6      	b.n	8011114 <_strtod_l+0x3fc>
 8011166:	9b08      	ldr	r3, [sp, #32]
 8011168:	1b75      	subs	r5, r6, r5
 801116a:	441d      	add	r5, r3
 801116c:	2d00      	cmp	r5, #0
 801116e:	dd70      	ble.n	8011252 <_strtod_l+0x53a>
 8011170:	f015 030f 	ands.w	r3, r5, #15
 8011174:	d00a      	beq.n	801118c <_strtod_l+0x474>
 8011176:	494b      	ldr	r1, [pc, #300]	; (80112a4 <_strtod_l+0x58c>)
 8011178:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801117c:	4642      	mov	r2, r8
 801117e:	464b      	mov	r3, r9
 8011180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011184:	f7ef fa60 	bl	8000648 <__aeabi_dmul>
 8011188:	4680      	mov	r8, r0
 801118a:	4689      	mov	r9, r1
 801118c:	f035 050f 	bics.w	r5, r5, #15
 8011190:	d04d      	beq.n	801122e <_strtod_l+0x516>
 8011192:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8011196:	dd22      	ble.n	80111de <_strtod_l+0x4c6>
 8011198:	2500      	movs	r5, #0
 801119a:	46ab      	mov	fp, r5
 801119c:	9509      	str	r5, [sp, #36]	; 0x24
 801119e:	9505      	str	r5, [sp, #20]
 80111a0:	2322      	movs	r3, #34	; 0x22
 80111a2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80112ac <_strtod_l+0x594>
 80111a6:	6023      	str	r3, [r4, #0]
 80111a8:	f04f 0800 	mov.w	r8, #0
 80111ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	f43f aded 	beq.w	8010d8e <_strtod_l+0x76>
 80111b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80111b6:	4620      	mov	r0, r4
 80111b8:	f7ff f924 	bl	8010404 <_Bfree>
 80111bc:	9905      	ldr	r1, [sp, #20]
 80111be:	4620      	mov	r0, r4
 80111c0:	f7ff f920 	bl	8010404 <_Bfree>
 80111c4:	4659      	mov	r1, fp
 80111c6:	4620      	mov	r0, r4
 80111c8:	f7ff f91c 	bl	8010404 <_Bfree>
 80111cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80111ce:	4620      	mov	r0, r4
 80111d0:	f7ff f918 	bl	8010404 <_Bfree>
 80111d4:	4629      	mov	r1, r5
 80111d6:	4620      	mov	r0, r4
 80111d8:	f7ff f914 	bl	8010404 <_Bfree>
 80111dc:	e5d7      	b.n	8010d8e <_strtod_l+0x76>
 80111de:	4b32      	ldr	r3, [pc, #200]	; (80112a8 <_strtod_l+0x590>)
 80111e0:	9304      	str	r3, [sp, #16]
 80111e2:	2300      	movs	r3, #0
 80111e4:	112d      	asrs	r5, r5, #4
 80111e6:	4640      	mov	r0, r8
 80111e8:	4649      	mov	r1, r9
 80111ea:	469a      	mov	sl, r3
 80111ec:	2d01      	cmp	r5, #1
 80111ee:	dc21      	bgt.n	8011234 <_strtod_l+0x51c>
 80111f0:	b10b      	cbz	r3, 80111f6 <_strtod_l+0x4de>
 80111f2:	4680      	mov	r8, r0
 80111f4:	4689      	mov	r9, r1
 80111f6:	492c      	ldr	r1, [pc, #176]	; (80112a8 <_strtod_l+0x590>)
 80111f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80111fc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011200:	4642      	mov	r2, r8
 8011202:	464b      	mov	r3, r9
 8011204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011208:	f7ef fa1e 	bl	8000648 <__aeabi_dmul>
 801120c:	4b27      	ldr	r3, [pc, #156]	; (80112ac <_strtod_l+0x594>)
 801120e:	460a      	mov	r2, r1
 8011210:	400b      	ands	r3, r1
 8011212:	4927      	ldr	r1, [pc, #156]	; (80112b0 <_strtod_l+0x598>)
 8011214:	428b      	cmp	r3, r1
 8011216:	4680      	mov	r8, r0
 8011218:	d8be      	bhi.n	8011198 <_strtod_l+0x480>
 801121a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801121e:	428b      	cmp	r3, r1
 8011220:	bf86      	itte	hi
 8011222:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80112b4 <_strtod_l+0x59c>
 8011226:	f04f 38ff 	movhi.w	r8, #4294967295
 801122a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801122e:	2300      	movs	r3, #0
 8011230:	9304      	str	r3, [sp, #16]
 8011232:	e07b      	b.n	801132c <_strtod_l+0x614>
 8011234:	07ea      	lsls	r2, r5, #31
 8011236:	d505      	bpl.n	8011244 <_strtod_l+0x52c>
 8011238:	9b04      	ldr	r3, [sp, #16]
 801123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123e:	f7ef fa03 	bl	8000648 <__aeabi_dmul>
 8011242:	2301      	movs	r3, #1
 8011244:	9a04      	ldr	r2, [sp, #16]
 8011246:	3208      	adds	r2, #8
 8011248:	f10a 0a01 	add.w	sl, sl, #1
 801124c:	106d      	asrs	r5, r5, #1
 801124e:	9204      	str	r2, [sp, #16]
 8011250:	e7cc      	b.n	80111ec <_strtod_l+0x4d4>
 8011252:	d0ec      	beq.n	801122e <_strtod_l+0x516>
 8011254:	426d      	negs	r5, r5
 8011256:	f015 020f 	ands.w	r2, r5, #15
 801125a:	d00a      	beq.n	8011272 <_strtod_l+0x55a>
 801125c:	4b11      	ldr	r3, [pc, #68]	; (80112a4 <_strtod_l+0x58c>)
 801125e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011262:	4640      	mov	r0, r8
 8011264:	4649      	mov	r1, r9
 8011266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126a:	f7ef fb17 	bl	800089c <__aeabi_ddiv>
 801126e:	4680      	mov	r8, r0
 8011270:	4689      	mov	r9, r1
 8011272:	112d      	asrs	r5, r5, #4
 8011274:	d0db      	beq.n	801122e <_strtod_l+0x516>
 8011276:	2d1f      	cmp	r5, #31
 8011278:	dd1e      	ble.n	80112b8 <_strtod_l+0x5a0>
 801127a:	2500      	movs	r5, #0
 801127c:	46ab      	mov	fp, r5
 801127e:	9509      	str	r5, [sp, #36]	; 0x24
 8011280:	9505      	str	r5, [sp, #20]
 8011282:	2322      	movs	r3, #34	; 0x22
 8011284:	f04f 0800 	mov.w	r8, #0
 8011288:	f04f 0900 	mov.w	r9, #0
 801128c:	6023      	str	r3, [r4, #0]
 801128e:	e78d      	b.n	80111ac <_strtod_l+0x494>
 8011290:	08013c21 	.word	0x08013c21
 8011294:	08013e4c 	.word	0x08013e4c
 8011298:	08013c19 	.word	0x08013c19
 801129c:	08013c50 	.word	0x08013c50
 80112a0:	08013c13 	.word	0x08013c13
 80112a4:	08013d60 	.word	0x08013d60
 80112a8:	08013d38 	.word	0x08013d38
 80112ac:	7ff00000 	.word	0x7ff00000
 80112b0:	7ca00000 	.word	0x7ca00000
 80112b4:	7fefffff 	.word	0x7fefffff
 80112b8:	f015 0310 	ands.w	r3, r5, #16
 80112bc:	bf18      	it	ne
 80112be:	236a      	movne	r3, #106	; 0x6a
 80112c0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8011664 <_strtod_l+0x94c>
 80112c4:	9304      	str	r3, [sp, #16]
 80112c6:	4640      	mov	r0, r8
 80112c8:	4649      	mov	r1, r9
 80112ca:	2300      	movs	r3, #0
 80112cc:	07ea      	lsls	r2, r5, #31
 80112ce:	d504      	bpl.n	80112da <_strtod_l+0x5c2>
 80112d0:	e9da 2300 	ldrd	r2, r3, [sl]
 80112d4:	f7ef f9b8 	bl	8000648 <__aeabi_dmul>
 80112d8:	2301      	movs	r3, #1
 80112da:	106d      	asrs	r5, r5, #1
 80112dc:	f10a 0a08 	add.w	sl, sl, #8
 80112e0:	d1f4      	bne.n	80112cc <_strtod_l+0x5b4>
 80112e2:	b10b      	cbz	r3, 80112e8 <_strtod_l+0x5d0>
 80112e4:	4680      	mov	r8, r0
 80112e6:	4689      	mov	r9, r1
 80112e8:	9b04      	ldr	r3, [sp, #16]
 80112ea:	b1bb      	cbz	r3, 801131c <_strtod_l+0x604>
 80112ec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80112f0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	4649      	mov	r1, r9
 80112f8:	dd10      	ble.n	801131c <_strtod_l+0x604>
 80112fa:	2b1f      	cmp	r3, #31
 80112fc:	f340 811e 	ble.w	801153c <_strtod_l+0x824>
 8011300:	2b34      	cmp	r3, #52	; 0x34
 8011302:	bfde      	ittt	le
 8011304:	f04f 33ff 	movle.w	r3, #4294967295
 8011308:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801130c:	4093      	lslle	r3, r2
 801130e:	f04f 0800 	mov.w	r8, #0
 8011312:	bfcc      	ite	gt
 8011314:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011318:	ea03 0901 	andle.w	r9, r3, r1
 801131c:	2200      	movs	r2, #0
 801131e:	2300      	movs	r3, #0
 8011320:	4640      	mov	r0, r8
 8011322:	4649      	mov	r1, r9
 8011324:	f7ef fbf8 	bl	8000b18 <__aeabi_dcmpeq>
 8011328:	2800      	cmp	r0, #0
 801132a:	d1a6      	bne.n	801127a <_strtod_l+0x562>
 801132c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801132e:	9300      	str	r3, [sp, #0]
 8011330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011332:	4633      	mov	r3, r6
 8011334:	465a      	mov	r2, fp
 8011336:	4620      	mov	r0, r4
 8011338:	f7ff f8cc 	bl	80104d4 <__s2b>
 801133c:	9009      	str	r0, [sp, #36]	; 0x24
 801133e:	2800      	cmp	r0, #0
 8011340:	f43f af2a 	beq.w	8011198 <_strtod_l+0x480>
 8011344:	9a08      	ldr	r2, [sp, #32]
 8011346:	9b05      	ldr	r3, [sp, #20]
 8011348:	2a00      	cmp	r2, #0
 801134a:	eba3 0307 	sub.w	r3, r3, r7
 801134e:	bfa8      	it	ge
 8011350:	2300      	movge	r3, #0
 8011352:	930c      	str	r3, [sp, #48]	; 0x30
 8011354:	2500      	movs	r5, #0
 8011356:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801135a:	9312      	str	r3, [sp, #72]	; 0x48
 801135c:	46ab      	mov	fp, r5
 801135e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011360:	4620      	mov	r0, r4
 8011362:	6859      	ldr	r1, [r3, #4]
 8011364:	f7ff f80e 	bl	8010384 <_Balloc>
 8011368:	9005      	str	r0, [sp, #20]
 801136a:	2800      	cmp	r0, #0
 801136c:	f43f af18 	beq.w	80111a0 <_strtod_l+0x488>
 8011370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011372:	691a      	ldr	r2, [r3, #16]
 8011374:	3202      	adds	r2, #2
 8011376:	f103 010c 	add.w	r1, r3, #12
 801137a:	0092      	lsls	r2, r2, #2
 801137c:	300c      	adds	r0, #12
 801137e:	f7fe f926 	bl	800f5ce <memcpy>
 8011382:	ec49 8b10 	vmov	d0, r8, r9
 8011386:	aa18      	add	r2, sp, #96	; 0x60
 8011388:	a917      	add	r1, sp, #92	; 0x5c
 801138a:	4620      	mov	r0, r4
 801138c:	f7ff fbd6 	bl	8010b3c <__d2b>
 8011390:	ec49 8b18 	vmov	d8, r8, r9
 8011394:	9016      	str	r0, [sp, #88]	; 0x58
 8011396:	2800      	cmp	r0, #0
 8011398:	f43f af02 	beq.w	80111a0 <_strtod_l+0x488>
 801139c:	2101      	movs	r1, #1
 801139e:	4620      	mov	r0, r4
 80113a0:	f7ff f930 	bl	8010604 <__i2b>
 80113a4:	4683      	mov	fp, r0
 80113a6:	2800      	cmp	r0, #0
 80113a8:	f43f aefa 	beq.w	80111a0 <_strtod_l+0x488>
 80113ac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80113ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80113b0:	2e00      	cmp	r6, #0
 80113b2:	bfab      	itete	ge
 80113b4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80113b6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80113b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80113ba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80113be:	bfac      	ite	ge
 80113c0:	eb06 0a03 	addge.w	sl, r6, r3
 80113c4:	1b9f      	sublt	r7, r3, r6
 80113c6:	9b04      	ldr	r3, [sp, #16]
 80113c8:	1af6      	subs	r6, r6, r3
 80113ca:	4416      	add	r6, r2
 80113cc:	4ba0      	ldr	r3, [pc, #640]	; (8011650 <_strtod_l+0x938>)
 80113ce:	3e01      	subs	r6, #1
 80113d0:	429e      	cmp	r6, r3
 80113d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80113d6:	f280 80c4 	bge.w	8011562 <_strtod_l+0x84a>
 80113da:	1b9b      	subs	r3, r3, r6
 80113dc:	2b1f      	cmp	r3, #31
 80113de:	eba2 0203 	sub.w	r2, r2, r3
 80113e2:	f04f 0101 	mov.w	r1, #1
 80113e6:	f300 80b0 	bgt.w	801154a <_strtod_l+0x832>
 80113ea:	fa01 f303 	lsl.w	r3, r1, r3
 80113ee:	930e      	str	r3, [sp, #56]	; 0x38
 80113f0:	2300      	movs	r3, #0
 80113f2:	930d      	str	r3, [sp, #52]	; 0x34
 80113f4:	eb0a 0602 	add.w	r6, sl, r2
 80113f8:	9b04      	ldr	r3, [sp, #16]
 80113fa:	45b2      	cmp	sl, r6
 80113fc:	4417      	add	r7, r2
 80113fe:	441f      	add	r7, r3
 8011400:	4653      	mov	r3, sl
 8011402:	bfa8      	it	ge
 8011404:	4633      	movge	r3, r6
 8011406:	42bb      	cmp	r3, r7
 8011408:	bfa8      	it	ge
 801140a:	463b      	movge	r3, r7
 801140c:	2b00      	cmp	r3, #0
 801140e:	bfc2      	ittt	gt
 8011410:	1af6      	subgt	r6, r6, r3
 8011412:	1aff      	subgt	r7, r7, r3
 8011414:	ebaa 0a03 	subgt.w	sl, sl, r3
 8011418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801141a:	2b00      	cmp	r3, #0
 801141c:	dd17      	ble.n	801144e <_strtod_l+0x736>
 801141e:	4659      	mov	r1, fp
 8011420:	461a      	mov	r2, r3
 8011422:	4620      	mov	r0, r4
 8011424:	f7ff f9ae 	bl	8010784 <__pow5mult>
 8011428:	4683      	mov	fp, r0
 801142a:	2800      	cmp	r0, #0
 801142c:	f43f aeb8 	beq.w	80111a0 <_strtod_l+0x488>
 8011430:	4601      	mov	r1, r0
 8011432:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011434:	4620      	mov	r0, r4
 8011436:	f7ff f8fb 	bl	8010630 <__multiply>
 801143a:	900b      	str	r0, [sp, #44]	; 0x2c
 801143c:	2800      	cmp	r0, #0
 801143e:	f43f aeaf 	beq.w	80111a0 <_strtod_l+0x488>
 8011442:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011444:	4620      	mov	r0, r4
 8011446:	f7fe ffdd 	bl	8010404 <_Bfree>
 801144a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801144c:	9316      	str	r3, [sp, #88]	; 0x58
 801144e:	2e00      	cmp	r6, #0
 8011450:	f300 808c 	bgt.w	801156c <_strtod_l+0x854>
 8011454:	9b08      	ldr	r3, [sp, #32]
 8011456:	2b00      	cmp	r3, #0
 8011458:	dd08      	ble.n	801146c <_strtod_l+0x754>
 801145a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801145c:	9905      	ldr	r1, [sp, #20]
 801145e:	4620      	mov	r0, r4
 8011460:	f7ff f990 	bl	8010784 <__pow5mult>
 8011464:	9005      	str	r0, [sp, #20]
 8011466:	2800      	cmp	r0, #0
 8011468:	f43f ae9a 	beq.w	80111a0 <_strtod_l+0x488>
 801146c:	2f00      	cmp	r7, #0
 801146e:	dd08      	ble.n	8011482 <_strtod_l+0x76a>
 8011470:	9905      	ldr	r1, [sp, #20]
 8011472:	463a      	mov	r2, r7
 8011474:	4620      	mov	r0, r4
 8011476:	f7ff f9df 	bl	8010838 <__lshift>
 801147a:	9005      	str	r0, [sp, #20]
 801147c:	2800      	cmp	r0, #0
 801147e:	f43f ae8f 	beq.w	80111a0 <_strtod_l+0x488>
 8011482:	f1ba 0f00 	cmp.w	sl, #0
 8011486:	dd08      	ble.n	801149a <_strtod_l+0x782>
 8011488:	4659      	mov	r1, fp
 801148a:	4652      	mov	r2, sl
 801148c:	4620      	mov	r0, r4
 801148e:	f7ff f9d3 	bl	8010838 <__lshift>
 8011492:	4683      	mov	fp, r0
 8011494:	2800      	cmp	r0, #0
 8011496:	f43f ae83 	beq.w	80111a0 <_strtod_l+0x488>
 801149a:	9a05      	ldr	r2, [sp, #20]
 801149c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801149e:	4620      	mov	r0, r4
 80114a0:	f7ff fa52 	bl	8010948 <__mdiff>
 80114a4:	4605      	mov	r5, r0
 80114a6:	2800      	cmp	r0, #0
 80114a8:	f43f ae7a 	beq.w	80111a0 <_strtod_l+0x488>
 80114ac:	68c3      	ldr	r3, [r0, #12]
 80114ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80114b0:	2300      	movs	r3, #0
 80114b2:	60c3      	str	r3, [r0, #12]
 80114b4:	4659      	mov	r1, fp
 80114b6:	f7ff fa2b 	bl	8010910 <__mcmp>
 80114ba:	2800      	cmp	r0, #0
 80114bc:	da60      	bge.n	8011580 <_strtod_l+0x868>
 80114be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114c0:	ea53 0308 	orrs.w	r3, r3, r8
 80114c4:	f040 8084 	bne.w	80115d0 <_strtod_l+0x8b8>
 80114c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d17f      	bne.n	80115d0 <_strtod_l+0x8b8>
 80114d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80114d4:	0d1b      	lsrs	r3, r3, #20
 80114d6:	051b      	lsls	r3, r3, #20
 80114d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80114dc:	d978      	bls.n	80115d0 <_strtod_l+0x8b8>
 80114de:	696b      	ldr	r3, [r5, #20]
 80114e0:	b913      	cbnz	r3, 80114e8 <_strtod_l+0x7d0>
 80114e2:	692b      	ldr	r3, [r5, #16]
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	dd73      	ble.n	80115d0 <_strtod_l+0x8b8>
 80114e8:	4629      	mov	r1, r5
 80114ea:	2201      	movs	r2, #1
 80114ec:	4620      	mov	r0, r4
 80114ee:	f7ff f9a3 	bl	8010838 <__lshift>
 80114f2:	4659      	mov	r1, fp
 80114f4:	4605      	mov	r5, r0
 80114f6:	f7ff fa0b 	bl	8010910 <__mcmp>
 80114fa:	2800      	cmp	r0, #0
 80114fc:	dd68      	ble.n	80115d0 <_strtod_l+0x8b8>
 80114fe:	9904      	ldr	r1, [sp, #16]
 8011500:	4a54      	ldr	r2, [pc, #336]	; (8011654 <_strtod_l+0x93c>)
 8011502:	464b      	mov	r3, r9
 8011504:	2900      	cmp	r1, #0
 8011506:	f000 8084 	beq.w	8011612 <_strtod_l+0x8fa>
 801150a:	ea02 0109 	and.w	r1, r2, r9
 801150e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011512:	dc7e      	bgt.n	8011612 <_strtod_l+0x8fa>
 8011514:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011518:	f77f aeb3 	ble.w	8011282 <_strtod_l+0x56a>
 801151c:	4b4e      	ldr	r3, [pc, #312]	; (8011658 <_strtod_l+0x940>)
 801151e:	4640      	mov	r0, r8
 8011520:	4649      	mov	r1, r9
 8011522:	2200      	movs	r2, #0
 8011524:	f7ef f890 	bl	8000648 <__aeabi_dmul>
 8011528:	4b4a      	ldr	r3, [pc, #296]	; (8011654 <_strtod_l+0x93c>)
 801152a:	400b      	ands	r3, r1
 801152c:	4680      	mov	r8, r0
 801152e:	4689      	mov	r9, r1
 8011530:	2b00      	cmp	r3, #0
 8011532:	f47f ae3f 	bne.w	80111b4 <_strtod_l+0x49c>
 8011536:	2322      	movs	r3, #34	; 0x22
 8011538:	6023      	str	r3, [r4, #0]
 801153a:	e63b      	b.n	80111b4 <_strtod_l+0x49c>
 801153c:	f04f 32ff 	mov.w	r2, #4294967295
 8011540:	fa02 f303 	lsl.w	r3, r2, r3
 8011544:	ea03 0808 	and.w	r8, r3, r8
 8011548:	e6e8      	b.n	801131c <_strtod_l+0x604>
 801154a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801154e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011552:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011556:	36e2      	adds	r6, #226	; 0xe2
 8011558:	fa01 f306 	lsl.w	r3, r1, r6
 801155c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8011560:	e748      	b.n	80113f4 <_strtod_l+0x6dc>
 8011562:	2100      	movs	r1, #0
 8011564:	2301      	movs	r3, #1
 8011566:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801156a:	e743      	b.n	80113f4 <_strtod_l+0x6dc>
 801156c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801156e:	4632      	mov	r2, r6
 8011570:	4620      	mov	r0, r4
 8011572:	f7ff f961 	bl	8010838 <__lshift>
 8011576:	9016      	str	r0, [sp, #88]	; 0x58
 8011578:	2800      	cmp	r0, #0
 801157a:	f47f af6b 	bne.w	8011454 <_strtod_l+0x73c>
 801157e:	e60f      	b.n	80111a0 <_strtod_l+0x488>
 8011580:	46ca      	mov	sl, r9
 8011582:	d171      	bne.n	8011668 <_strtod_l+0x950>
 8011584:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011586:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801158a:	b352      	cbz	r2, 80115e2 <_strtod_l+0x8ca>
 801158c:	4a33      	ldr	r2, [pc, #204]	; (801165c <_strtod_l+0x944>)
 801158e:	4293      	cmp	r3, r2
 8011590:	d12a      	bne.n	80115e8 <_strtod_l+0x8d0>
 8011592:	9b04      	ldr	r3, [sp, #16]
 8011594:	4641      	mov	r1, r8
 8011596:	b1fb      	cbz	r3, 80115d8 <_strtod_l+0x8c0>
 8011598:	4b2e      	ldr	r3, [pc, #184]	; (8011654 <_strtod_l+0x93c>)
 801159a:	ea09 0303 	and.w	r3, r9, r3
 801159e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80115a2:	f04f 32ff 	mov.w	r2, #4294967295
 80115a6:	d81a      	bhi.n	80115de <_strtod_l+0x8c6>
 80115a8:	0d1b      	lsrs	r3, r3, #20
 80115aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80115ae:	fa02 f303 	lsl.w	r3, r2, r3
 80115b2:	4299      	cmp	r1, r3
 80115b4:	d118      	bne.n	80115e8 <_strtod_l+0x8d0>
 80115b6:	4b2a      	ldr	r3, [pc, #168]	; (8011660 <_strtod_l+0x948>)
 80115b8:	459a      	cmp	sl, r3
 80115ba:	d102      	bne.n	80115c2 <_strtod_l+0x8aa>
 80115bc:	3101      	adds	r1, #1
 80115be:	f43f adef 	beq.w	80111a0 <_strtod_l+0x488>
 80115c2:	4b24      	ldr	r3, [pc, #144]	; (8011654 <_strtod_l+0x93c>)
 80115c4:	ea0a 0303 	and.w	r3, sl, r3
 80115c8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80115cc:	f04f 0800 	mov.w	r8, #0
 80115d0:	9b04      	ldr	r3, [sp, #16]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d1a2      	bne.n	801151c <_strtod_l+0x804>
 80115d6:	e5ed      	b.n	80111b4 <_strtod_l+0x49c>
 80115d8:	f04f 33ff 	mov.w	r3, #4294967295
 80115dc:	e7e9      	b.n	80115b2 <_strtod_l+0x89a>
 80115de:	4613      	mov	r3, r2
 80115e0:	e7e7      	b.n	80115b2 <_strtod_l+0x89a>
 80115e2:	ea53 0308 	orrs.w	r3, r3, r8
 80115e6:	d08a      	beq.n	80114fe <_strtod_l+0x7e6>
 80115e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115ea:	b1e3      	cbz	r3, 8011626 <_strtod_l+0x90e>
 80115ec:	ea13 0f0a 	tst.w	r3, sl
 80115f0:	d0ee      	beq.n	80115d0 <_strtod_l+0x8b8>
 80115f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115f4:	9a04      	ldr	r2, [sp, #16]
 80115f6:	4640      	mov	r0, r8
 80115f8:	4649      	mov	r1, r9
 80115fa:	b1c3      	cbz	r3, 801162e <_strtod_l+0x916>
 80115fc:	f7ff fb6f 	bl	8010cde <sulp>
 8011600:	4602      	mov	r2, r0
 8011602:	460b      	mov	r3, r1
 8011604:	ec51 0b18 	vmov	r0, r1, d8
 8011608:	f7ee fe68 	bl	80002dc <__adddf3>
 801160c:	4680      	mov	r8, r0
 801160e:	4689      	mov	r9, r1
 8011610:	e7de      	b.n	80115d0 <_strtod_l+0x8b8>
 8011612:	4013      	ands	r3, r2
 8011614:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011618:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801161c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011620:	f04f 38ff 	mov.w	r8, #4294967295
 8011624:	e7d4      	b.n	80115d0 <_strtod_l+0x8b8>
 8011626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011628:	ea13 0f08 	tst.w	r3, r8
 801162c:	e7e0      	b.n	80115f0 <_strtod_l+0x8d8>
 801162e:	f7ff fb56 	bl	8010cde <sulp>
 8011632:	4602      	mov	r2, r0
 8011634:	460b      	mov	r3, r1
 8011636:	ec51 0b18 	vmov	r0, r1, d8
 801163a:	f7ee fe4d 	bl	80002d8 <__aeabi_dsub>
 801163e:	2200      	movs	r2, #0
 8011640:	2300      	movs	r3, #0
 8011642:	4680      	mov	r8, r0
 8011644:	4689      	mov	r9, r1
 8011646:	f7ef fa67 	bl	8000b18 <__aeabi_dcmpeq>
 801164a:	2800      	cmp	r0, #0
 801164c:	d0c0      	beq.n	80115d0 <_strtod_l+0x8b8>
 801164e:	e618      	b.n	8011282 <_strtod_l+0x56a>
 8011650:	fffffc02 	.word	0xfffffc02
 8011654:	7ff00000 	.word	0x7ff00000
 8011658:	39500000 	.word	0x39500000
 801165c:	000fffff 	.word	0x000fffff
 8011660:	7fefffff 	.word	0x7fefffff
 8011664:	08013e60 	.word	0x08013e60
 8011668:	4659      	mov	r1, fp
 801166a:	4628      	mov	r0, r5
 801166c:	f7ff fac0 	bl	8010bf0 <__ratio>
 8011670:	ec57 6b10 	vmov	r6, r7, d0
 8011674:	ee10 0a10 	vmov	r0, s0
 8011678:	2200      	movs	r2, #0
 801167a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801167e:	4639      	mov	r1, r7
 8011680:	f7ef fa5e 	bl	8000b40 <__aeabi_dcmple>
 8011684:	2800      	cmp	r0, #0
 8011686:	d071      	beq.n	801176c <_strtod_l+0xa54>
 8011688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801168a:	2b00      	cmp	r3, #0
 801168c:	d17c      	bne.n	8011788 <_strtod_l+0xa70>
 801168e:	f1b8 0f00 	cmp.w	r8, #0
 8011692:	d15a      	bne.n	801174a <_strtod_l+0xa32>
 8011694:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011698:	2b00      	cmp	r3, #0
 801169a:	d15d      	bne.n	8011758 <_strtod_l+0xa40>
 801169c:	4b90      	ldr	r3, [pc, #576]	; (80118e0 <_strtod_l+0xbc8>)
 801169e:	2200      	movs	r2, #0
 80116a0:	4630      	mov	r0, r6
 80116a2:	4639      	mov	r1, r7
 80116a4:	f7ef fa42 	bl	8000b2c <__aeabi_dcmplt>
 80116a8:	2800      	cmp	r0, #0
 80116aa:	d15c      	bne.n	8011766 <_strtod_l+0xa4e>
 80116ac:	4630      	mov	r0, r6
 80116ae:	4639      	mov	r1, r7
 80116b0:	4b8c      	ldr	r3, [pc, #560]	; (80118e4 <_strtod_l+0xbcc>)
 80116b2:	2200      	movs	r2, #0
 80116b4:	f7ee ffc8 	bl	8000648 <__aeabi_dmul>
 80116b8:	4606      	mov	r6, r0
 80116ba:	460f      	mov	r7, r1
 80116bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80116c0:	9606      	str	r6, [sp, #24]
 80116c2:	9307      	str	r3, [sp, #28]
 80116c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80116c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80116cc:	4b86      	ldr	r3, [pc, #536]	; (80118e8 <_strtod_l+0xbd0>)
 80116ce:	ea0a 0303 	and.w	r3, sl, r3
 80116d2:	930d      	str	r3, [sp, #52]	; 0x34
 80116d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80116d6:	4b85      	ldr	r3, [pc, #532]	; (80118ec <_strtod_l+0xbd4>)
 80116d8:	429a      	cmp	r2, r3
 80116da:	f040 8090 	bne.w	80117fe <_strtod_l+0xae6>
 80116de:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80116e2:	ec49 8b10 	vmov	d0, r8, r9
 80116e6:	f7ff f9b9 	bl	8010a5c <__ulp>
 80116ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80116ee:	ec51 0b10 	vmov	r0, r1, d0
 80116f2:	f7ee ffa9 	bl	8000648 <__aeabi_dmul>
 80116f6:	4642      	mov	r2, r8
 80116f8:	464b      	mov	r3, r9
 80116fa:	f7ee fdef 	bl	80002dc <__adddf3>
 80116fe:	460b      	mov	r3, r1
 8011700:	4979      	ldr	r1, [pc, #484]	; (80118e8 <_strtod_l+0xbd0>)
 8011702:	4a7b      	ldr	r2, [pc, #492]	; (80118f0 <_strtod_l+0xbd8>)
 8011704:	4019      	ands	r1, r3
 8011706:	4291      	cmp	r1, r2
 8011708:	4680      	mov	r8, r0
 801170a:	d944      	bls.n	8011796 <_strtod_l+0xa7e>
 801170c:	ee18 2a90 	vmov	r2, s17
 8011710:	4b78      	ldr	r3, [pc, #480]	; (80118f4 <_strtod_l+0xbdc>)
 8011712:	429a      	cmp	r2, r3
 8011714:	d104      	bne.n	8011720 <_strtod_l+0xa08>
 8011716:	ee18 3a10 	vmov	r3, s16
 801171a:	3301      	adds	r3, #1
 801171c:	f43f ad40 	beq.w	80111a0 <_strtod_l+0x488>
 8011720:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80118f4 <_strtod_l+0xbdc>
 8011724:	f04f 38ff 	mov.w	r8, #4294967295
 8011728:	9916      	ldr	r1, [sp, #88]	; 0x58
 801172a:	4620      	mov	r0, r4
 801172c:	f7fe fe6a 	bl	8010404 <_Bfree>
 8011730:	9905      	ldr	r1, [sp, #20]
 8011732:	4620      	mov	r0, r4
 8011734:	f7fe fe66 	bl	8010404 <_Bfree>
 8011738:	4659      	mov	r1, fp
 801173a:	4620      	mov	r0, r4
 801173c:	f7fe fe62 	bl	8010404 <_Bfree>
 8011740:	4629      	mov	r1, r5
 8011742:	4620      	mov	r0, r4
 8011744:	f7fe fe5e 	bl	8010404 <_Bfree>
 8011748:	e609      	b.n	801135e <_strtod_l+0x646>
 801174a:	f1b8 0f01 	cmp.w	r8, #1
 801174e:	d103      	bne.n	8011758 <_strtod_l+0xa40>
 8011750:	f1b9 0f00 	cmp.w	r9, #0
 8011754:	f43f ad95 	beq.w	8011282 <_strtod_l+0x56a>
 8011758:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80118b0 <_strtod_l+0xb98>
 801175c:	4f60      	ldr	r7, [pc, #384]	; (80118e0 <_strtod_l+0xbc8>)
 801175e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011762:	2600      	movs	r6, #0
 8011764:	e7ae      	b.n	80116c4 <_strtod_l+0x9ac>
 8011766:	4f5f      	ldr	r7, [pc, #380]	; (80118e4 <_strtod_l+0xbcc>)
 8011768:	2600      	movs	r6, #0
 801176a:	e7a7      	b.n	80116bc <_strtod_l+0x9a4>
 801176c:	4b5d      	ldr	r3, [pc, #372]	; (80118e4 <_strtod_l+0xbcc>)
 801176e:	4630      	mov	r0, r6
 8011770:	4639      	mov	r1, r7
 8011772:	2200      	movs	r2, #0
 8011774:	f7ee ff68 	bl	8000648 <__aeabi_dmul>
 8011778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801177a:	4606      	mov	r6, r0
 801177c:	460f      	mov	r7, r1
 801177e:	2b00      	cmp	r3, #0
 8011780:	d09c      	beq.n	80116bc <_strtod_l+0x9a4>
 8011782:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011786:	e79d      	b.n	80116c4 <_strtod_l+0x9ac>
 8011788:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80118b8 <_strtod_l+0xba0>
 801178c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011790:	ec57 6b17 	vmov	r6, r7, d7
 8011794:	e796      	b.n	80116c4 <_strtod_l+0x9ac>
 8011796:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801179a:	9b04      	ldr	r3, [sp, #16]
 801179c:	46ca      	mov	sl, r9
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d1c2      	bne.n	8011728 <_strtod_l+0xa10>
 80117a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80117a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117a8:	0d1b      	lsrs	r3, r3, #20
 80117aa:	051b      	lsls	r3, r3, #20
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d1bb      	bne.n	8011728 <_strtod_l+0xa10>
 80117b0:	4630      	mov	r0, r6
 80117b2:	4639      	mov	r1, r7
 80117b4:	f7ef faa8 	bl	8000d08 <__aeabi_d2lz>
 80117b8:	f7ee ff18 	bl	80005ec <__aeabi_l2d>
 80117bc:	4602      	mov	r2, r0
 80117be:	460b      	mov	r3, r1
 80117c0:	4630      	mov	r0, r6
 80117c2:	4639      	mov	r1, r7
 80117c4:	f7ee fd88 	bl	80002d8 <__aeabi_dsub>
 80117c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80117ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117ce:	ea43 0308 	orr.w	r3, r3, r8
 80117d2:	4313      	orrs	r3, r2
 80117d4:	4606      	mov	r6, r0
 80117d6:	460f      	mov	r7, r1
 80117d8:	d054      	beq.n	8011884 <_strtod_l+0xb6c>
 80117da:	a339      	add	r3, pc, #228	; (adr r3, 80118c0 <_strtod_l+0xba8>)
 80117dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e0:	f7ef f9a4 	bl	8000b2c <__aeabi_dcmplt>
 80117e4:	2800      	cmp	r0, #0
 80117e6:	f47f ace5 	bne.w	80111b4 <_strtod_l+0x49c>
 80117ea:	a337      	add	r3, pc, #220	; (adr r3, 80118c8 <_strtod_l+0xbb0>)
 80117ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f0:	4630      	mov	r0, r6
 80117f2:	4639      	mov	r1, r7
 80117f4:	f7ef f9b8 	bl	8000b68 <__aeabi_dcmpgt>
 80117f8:	2800      	cmp	r0, #0
 80117fa:	d095      	beq.n	8011728 <_strtod_l+0xa10>
 80117fc:	e4da      	b.n	80111b4 <_strtod_l+0x49c>
 80117fe:	9b04      	ldr	r3, [sp, #16]
 8011800:	b333      	cbz	r3, 8011850 <_strtod_l+0xb38>
 8011802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011804:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011808:	d822      	bhi.n	8011850 <_strtod_l+0xb38>
 801180a:	a331      	add	r3, pc, #196	; (adr r3, 80118d0 <_strtod_l+0xbb8>)
 801180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011810:	4630      	mov	r0, r6
 8011812:	4639      	mov	r1, r7
 8011814:	f7ef f994 	bl	8000b40 <__aeabi_dcmple>
 8011818:	b1a0      	cbz	r0, 8011844 <_strtod_l+0xb2c>
 801181a:	4639      	mov	r1, r7
 801181c:	4630      	mov	r0, r6
 801181e:	f7ef f9eb 	bl	8000bf8 <__aeabi_d2uiz>
 8011822:	2801      	cmp	r0, #1
 8011824:	bf38      	it	cc
 8011826:	2001      	movcc	r0, #1
 8011828:	f7ee fe94 	bl	8000554 <__aeabi_ui2d>
 801182c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801182e:	4606      	mov	r6, r0
 8011830:	460f      	mov	r7, r1
 8011832:	bb23      	cbnz	r3, 801187e <_strtod_l+0xb66>
 8011834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011838:	9010      	str	r0, [sp, #64]	; 0x40
 801183a:	9311      	str	r3, [sp, #68]	; 0x44
 801183c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011840:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8011844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011846:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011848:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801184c:	1a9b      	subs	r3, r3, r2
 801184e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011850:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011854:	eeb0 0a48 	vmov.f32	s0, s16
 8011858:	eef0 0a68 	vmov.f32	s1, s17
 801185c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011860:	f7ff f8fc 	bl	8010a5c <__ulp>
 8011864:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011868:	ec53 2b10 	vmov	r2, r3, d0
 801186c:	f7ee feec 	bl	8000648 <__aeabi_dmul>
 8011870:	ec53 2b18 	vmov	r2, r3, d8
 8011874:	f7ee fd32 	bl	80002dc <__adddf3>
 8011878:	4680      	mov	r8, r0
 801187a:	4689      	mov	r9, r1
 801187c:	e78d      	b.n	801179a <_strtod_l+0xa82>
 801187e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8011882:	e7db      	b.n	801183c <_strtod_l+0xb24>
 8011884:	a314      	add	r3, pc, #80	; (adr r3, 80118d8 <_strtod_l+0xbc0>)
 8011886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188a:	f7ef f94f 	bl	8000b2c <__aeabi_dcmplt>
 801188e:	e7b3      	b.n	80117f8 <_strtod_l+0xae0>
 8011890:	2300      	movs	r3, #0
 8011892:	930a      	str	r3, [sp, #40]	; 0x28
 8011894:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011898:	6013      	str	r3, [r2, #0]
 801189a:	f7ff ba7c 	b.w	8010d96 <_strtod_l+0x7e>
 801189e:	2a65      	cmp	r2, #101	; 0x65
 80118a0:	f43f ab75 	beq.w	8010f8e <_strtod_l+0x276>
 80118a4:	2a45      	cmp	r2, #69	; 0x45
 80118a6:	f43f ab72 	beq.w	8010f8e <_strtod_l+0x276>
 80118aa:	2301      	movs	r3, #1
 80118ac:	f7ff bbaa 	b.w	8011004 <_strtod_l+0x2ec>
 80118b0:	00000000 	.word	0x00000000
 80118b4:	bff00000 	.word	0xbff00000
 80118b8:	00000000 	.word	0x00000000
 80118bc:	3ff00000 	.word	0x3ff00000
 80118c0:	94a03595 	.word	0x94a03595
 80118c4:	3fdfffff 	.word	0x3fdfffff
 80118c8:	35afe535 	.word	0x35afe535
 80118cc:	3fe00000 	.word	0x3fe00000
 80118d0:	ffc00000 	.word	0xffc00000
 80118d4:	41dfffff 	.word	0x41dfffff
 80118d8:	94a03595 	.word	0x94a03595
 80118dc:	3fcfffff 	.word	0x3fcfffff
 80118e0:	3ff00000 	.word	0x3ff00000
 80118e4:	3fe00000 	.word	0x3fe00000
 80118e8:	7ff00000 	.word	0x7ff00000
 80118ec:	7fe00000 	.word	0x7fe00000
 80118f0:	7c9fffff 	.word	0x7c9fffff
 80118f4:	7fefffff 	.word	0x7fefffff

080118f8 <_strtod_r>:
 80118f8:	4b01      	ldr	r3, [pc, #4]	; (8011900 <_strtod_r+0x8>)
 80118fa:	f7ff ba0d 	b.w	8010d18 <_strtod_l>
 80118fe:	bf00      	nop
 8011900:	20000068 	.word	0x20000068

08011904 <_strtol_l.constprop.0>:
 8011904:	2b01      	cmp	r3, #1
 8011906:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801190a:	d001      	beq.n	8011910 <_strtol_l.constprop.0+0xc>
 801190c:	2b24      	cmp	r3, #36	; 0x24
 801190e:	d906      	bls.n	801191e <_strtol_l.constprop.0+0x1a>
 8011910:	f7fd fe30 	bl	800f574 <__errno>
 8011914:	2316      	movs	r3, #22
 8011916:	6003      	str	r3, [r0, #0]
 8011918:	2000      	movs	r0, #0
 801191a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801191e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011a04 <_strtol_l.constprop.0+0x100>
 8011922:	460d      	mov	r5, r1
 8011924:	462e      	mov	r6, r5
 8011926:	f815 4b01 	ldrb.w	r4, [r5], #1
 801192a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801192e:	f017 0708 	ands.w	r7, r7, #8
 8011932:	d1f7      	bne.n	8011924 <_strtol_l.constprop.0+0x20>
 8011934:	2c2d      	cmp	r4, #45	; 0x2d
 8011936:	d132      	bne.n	801199e <_strtol_l.constprop.0+0x9a>
 8011938:	782c      	ldrb	r4, [r5, #0]
 801193a:	2701      	movs	r7, #1
 801193c:	1cb5      	adds	r5, r6, #2
 801193e:	2b00      	cmp	r3, #0
 8011940:	d05b      	beq.n	80119fa <_strtol_l.constprop.0+0xf6>
 8011942:	2b10      	cmp	r3, #16
 8011944:	d109      	bne.n	801195a <_strtol_l.constprop.0+0x56>
 8011946:	2c30      	cmp	r4, #48	; 0x30
 8011948:	d107      	bne.n	801195a <_strtol_l.constprop.0+0x56>
 801194a:	782c      	ldrb	r4, [r5, #0]
 801194c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011950:	2c58      	cmp	r4, #88	; 0x58
 8011952:	d14d      	bne.n	80119f0 <_strtol_l.constprop.0+0xec>
 8011954:	786c      	ldrb	r4, [r5, #1]
 8011956:	2310      	movs	r3, #16
 8011958:	3502      	adds	r5, #2
 801195a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801195e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011962:	f04f 0e00 	mov.w	lr, #0
 8011966:	fbb8 f9f3 	udiv	r9, r8, r3
 801196a:	4676      	mov	r6, lr
 801196c:	fb03 8a19 	mls	sl, r3, r9, r8
 8011970:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011974:	f1bc 0f09 	cmp.w	ip, #9
 8011978:	d816      	bhi.n	80119a8 <_strtol_l.constprop.0+0xa4>
 801197a:	4664      	mov	r4, ip
 801197c:	42a3      	cmp	r3, r4
 801197e:	dd24      	ble.n	80119ca <_strtol_l.constprop.0+0xc6>
 8011980:	f1be 3fff 	cmp.w	lr, #4294967295
 8011984:	d008      	beq.n	8011998 <_strtol_l.constprop.0+0x94>
 8011986:	45b1      	cmp	r9, r6
 8011988:	d31c      	bcc.n	80119c4 <_strtol_l.constprop.0+0xc0>
 801198a:	d101      	bne.n	8011990 <_strtol_l.constprop.0+0x8c>
 801198c:	45a2      	cmp	sl, r4
 801198e:	db19      	blt.n	80119c4 <_strtol_l.constprop.0+0xc0>
 8011990:	fb06 4603 	mla	r6, r6, r3, r4
 8011994:	f04f 0e01 	mov.w	lr, #1
 8011998:	f815 4b01 	ldrb.w	r4, [r5], #1
 801199c:	e7e8      	b.n	8011970 <_strtol_l.constprop.0+0x6c>
 801199e:	2c2b      	cmp	r4, #43	; 0x2b
 80119a0:	bf04      	itt	eq
 80119a2:	782c      	ldrbeq	r4, [r5, #0]
 80119a4:	1cb5      	addeq	r5, r6, #2
 80119a6:	e7ca      	b.n	801193e <_strtol_l.constprop.0+0x3a>
 80119a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80119ac:	f1bc 0f19 	cmp.w	ip, #25
 80119b0:	d801      	bhi.n	80119b6 <_strtol_l.constprop.0+0xb2>
 80119b2:	3c37      	subs	r4, #55	; 0x37
 80119b4:	e7e2      	b.n	801197c <_strtol_l.constprop.0+0x78>
 80119b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80119ba:	f1bc 0f19 	cmp.w	ip, #25
 80119be:	d804      	bhi.n	80119ca <_strtol_l.constprop.0+0xc6>
 80119c0:	3c57      	subs	r4, #87	; 0x57
 80119c2:	e7db      	b.n	801197c <_strtol_l.constprop.0+0x78>
 80119c4:	f04f 3eff 	mov.w	lr, #4294967295
 80119c8:	e7e6      	b.n	8011998 <_strtol_l.constprop.0+0x94>
 80119ca:	f1be 3fff 	cmp.w	lr, #4294967295
 80119ce:	d105      	bne.n	80119dc <_strtol_l.constprop.0+0xd8>
 80119d0:	2322      	movs	r3, #34	; 0x22
 80119d2:	6003      	str	r3, [r0, #0]
 80119d4:	4646      	mov	r6, r8
 80119d6:	b942      	cbnz	r2, 80119ea <_strtol_l.constprop.0+0xe6>
 80119d8:	4630      	mov	r0, r6
 80119da:	e79e      	b.n	801191a <_strtol_l.constprop.0+0x16>
 80119dc:	b107      	cbz	r7, 80119e0 <_strtol_l.constprop.0+0xdc>
 80119de:	4276      	negs	r6, r6
 80119e0:	2a00      	cmp	r2, #0
 80119e2:	d0f9      	beq.n	80119d8 <_strtol_l.constprop.0+0xd4>
 80119e4:	f1be 0f00 	cmp.w	lr, #0
 80119e8:	d000      	beq.n	80119ec <_strtol_l.constprop.0+0xe8>
 80119ea:	1e69      	subs	r1, r5, #1
 80119ec:	6011      	str	r1, [r2, #0]
 80119ee:	e7f3      	b.n	80119d8 <_strtol_l.constprop.0+0xd4>
 80119f0:	2430      	movs	r4, #48	; 0x30
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d1b1      	bne.n	801195a <_strtol_l.constprop.0+0x56>
 80119f6:	2308      	movs	r3, #8
 80119f8:	e7af      	b.n	801195a <_strtol_l.constprop.0+0x56>
 80119fa:	2c30      	cmp	r4, #48	; 0x30
 80119fc:	d0a5      	beq.n	801194a <_strtol_l.constprop.0+0x46>
 80119fe:	230a      	movs	r3, #10
 8011a00:	e7ab      	b.n	801195a <_strtol_l.constprop.0+0x56>
 8011a02:	bf00      	nop
 8011a04:	08013e89 	.word	0x08013e89

08011a08 <_strtol_r>:
 8011a08:	f7ff bf7c 	b.w	8011904 <_strtol_l.constprop.0>

08011a0c <__ssputs_r>:
 8011a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a10:	688e      	ldr	r6, [r1, #8]
 8011a12:	461f      	mov	r7, r3
 8011a14:	42be      	cmp	r6, r7
 8011a16:	680b      	ldr	r3, [r1, #0]
 8011a18:	4682      	mov	sl, r0
 8011a1a:	460c      	mov	r4, r1
 8011a1c:	4690      	mov	r8, r2
 8011a1e:	d82c      	bhi.n	8011a7a <__ssputs_r+0x6e>
 8011a20:	898a      	ldrh	r2, [r1, #12]
 8011a22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011a26:	d026      	beq.n	8011a76 <__ssputs_r+0x6a>
 8011a28:	6965      	ldr	r5, [r4, #20]
 8011a2a:	6909      	ldr	r1, [r1, #16]
 8011a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a30:	eba3 0901 	sub.w	r9, r3, r1
 8011a34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a38:	1c7b      	adds	r3, r7, #1
 8011a3a:	444b      	add	r3, r9
 8011a3c:	106d      	asrs	r5, r5, #1
 8011a3e:	429d      	cmp	r5, r3
 8011a40:	bf38      	it	cc
 8011a42:	461d      	movcc	r5, r3
 8011a44:	0553      	lsls	r3, r2, #21
 8011a46:	d527      	bpl.n	8011a98 <__ssputs_r+0x8c>
 8011a48:	4629      	mov	r1, r5
 8011a4a:	f7fc fc87 	bl	800e35c <_malloc_r>
 8011a4e:	4606      	mov	r6, r0
 8011a50:	b360      	cbz	r0, 8011aac <__ssputs_r+0xa0>
 8011a52:	6921      	ldr	r1, [r4, #16]
 8011a54:	464a      	mov	r2, r9
 8011a56:	f7fd fdba 	bl	800f5ce <memcpy>
 8011a5a:	89a3      	ldrh	r3, [r4, #12]
 8011a5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a64:	81a3      	strh	r3, [r4, #12]
 8011a66:	6126      	str	r6, [r4, #16]
 8011a68:	6165      	str	r5, [r4, #20]
 8011a6a:	444e      	add	r6, r9
 8011a6c:	eba5 0509 	sub.w	r5, r5, r9
 8011a70:	6026      	str	r6, [r4, #0]
 8011a72:	60a5      	str	r5, [r4, #8]
 8011a74:	463e      	mov	r6, r7
 8011a76:	42be      	cmp	r6, r7
 8011a78:	d900      	bls.n	8011a7c <__ssputs_r+0x70>
 8011a7a:	463e      	mov	r6, r7
 8011a7c:	6820      	ldr	r0, [r4, #0]
 8011a7e:	4632      	mov	r2, r6
 8011a80:	4641      	mov	r1, r8
 8011a82:	f7fd fca4 	bl	800f3ce <memmove>
 8011a86:	68a3      	ldr	r3, [r4, #8]
 8011a88:	1b9b      	subs	r3, r3, r6
 8011a8a:	60a3      	str	r3, [r4, #8]
 8011a8c:	6823      	ldr	r3, [r4, #0]
 8011a8e:	4433      	add	r3, r6
 8011a90:	6023      	str	r3, [r4, #0]
 8011a92:	2000      	movs	r0, #0
 8011a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a98:	462a      	mov	r2, r5
 8011a9a:	f000 ff30 	bl	80128fe <_realloc_r>
 8011a9e:	4606      	mov	r6, r0
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d1e0      	bne.n	8011a66 <__ssputs_r+0x5a>
 8011aa4:	6921      	ldr	r1, [r4, #16]
 8011aa6:	4650      	mov	r0, sl
 8011aa8:	f7fe fc20 	bl	80102ec <_free_r>
 8011aac:	230c      	movs	r3, #12
 8011aae:	f8ca 3000 	str.w	r3, [sl]
 8011ab2:	89a3      	ldrh	r3, [r4, #12]
 8011ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ab8:	81a3      	strh	r3, [r4, #12]
 8011aba:	f04f 30ff 	mov.w	r0, #4294967295
 8011abe:	e7e9      	b.n	8011a94 <__ssputs_r+0x88>

08011ac0 <_svfiprintf_r>:
 8011ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ac4:	4698      	mov	r8, r3
 8011ac6:	898b      	ldrh	r3, [r1, #12]
 8011ac8:	061b      	lsls	r3, r3, #24
 8011aca:	b09d      	sub	sp, #116	; 0x74
 8011acc:	4607      	mov	r7, r0
 8011ace:	460d      	mov	r5, r1
 8011ad0:	4614      	mov	r4, r2
 8011ad2:	d50e      	bpl.n	8011af2 <_svfiprintf_r+0x32>
 8011ad4:	690b      	ldr	r3, [r1, #16]
 8011ad6:	b963      	cbnz	r3, 8011af2 <_svfiprintf_r+0x32>
 8011ad8:	2140      	movs	r1, #64	; 0x40
 8011ada:	f7fc fc3f 	bl	800e35c <_malloc_r>
 8011ade:	6028      	str	r0, [r5, #0]
 8011ae0:	6128      	str	r0, [r5, #16]
 8011ae2:	b920      	cbnz	r0, 8011aee <_svfiprintf_r+0x2e>
 8011ae4:	230c      	movs	r3, #12
 8011ae6:	603b      	str	r3, [r7, #0]
 8011ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8011aec:	e0d0      	b.n	8011c90 <_svfiprintf_r+0x1d0>
 8011aee:	2340      	movs	r3, #64	; 0x40
 8011af0:	616b      	str	r3, [r5, #20]
 8011af2:	2300      	movs	r3, #0
 8011af4:	9309      	str	r3, [sp, #36]	; 0x24
 8011af6:	2320      	movs	r3, #32
 8011af8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011afc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b00:	2330      	movs	r3, #48	; 0x30
 8011b02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011ca8 <_svfiprintf_r+0x1e8>
 8011b06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b0a:	f04f 0901 	mov.w	r9, #1
 8011b0e:	4623      	mov	r3, r4
 8011b10:	469a      	mov	sl, r3
 8011b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b16:	b10a      	cbz	r2, 8011b1c <_svfiprintf_r+0x5c>
 8011b18:	2a25      	cmp	r2, #37	; 0x25
 8011b1a:	d1f9      	bne.n	8011b10 <_svfiprintf_r+0x50>
 8011b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8011b20:	d00b      	beq.n	8011b3a <_svfiprintf_r+0x7a>
 8011b22:	465b      	mov	r3, fp
 8011b24:	4622      	mov	r2, r4
 8011b26:	4629      	mov	r1, r5
 8011b28:	4638      	mov	r0, r7
 8011b2a:	f7ff ff6f 	bl	8011a0c <__ssputs_r>
 8011b2e:	3001      	adds	r0, #1
 8011b30:	f000 80a9 	beq.w	8011c86 <_svfiprintf_r+0x1c6>
 8011b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b36:	445a      	add	r2, fp
 8011b38:	9209      	str	r2, [sp, #36]	; 0x24
 8011b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	f000 80a1 	beq.w	8011c86 <_svfiprintf_r+0x1c6>
 8011b44:	2300      	movs	r3, #0
 8011b46:	f04f 32ff 	mov.w	r2, #4294967295
 8011b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b4e:	f10a 0a01 	add.w	sl, sl, #1
 8011b52:	9304      	str	r3, [sp, #16]
 8011b54:	9307      	str	r3, [sp, #28]
 8011b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8011b5c:	4654      	mov	r4, sl
 8011b5e:	2205      	movs	r2, #5
 8011b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b64:	4850      	ldr	r0, [pc, #320]	; (8011ca8 <_svfiprintf_r+0x1e8>)
 8011b66:	f7ee fb5b 	bl	8000220 <memchr>
 8011b6a:	9a04      	ldr	r2, [sp, #16]
 8011b6c:	b9d8      	cbnz	r0, 8011ba6 <_svfiprintf_r+0xe6>
 8011b6e:	06d0      	lsls	r0, r2, #27
 8011b70:	bf44      	itt	mi
 8011b72:	2320      	movmi	r3, #32
 8011b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b78:	0711      	lsls	r1, r2, #28
 8011b7a:	bf44      	itt	mi
 8011b7c:	232b      	movmi	r3, #43	; 0x2b
 8011b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b82:	f89a 3000 	ldrb.w	r3, [sl]
 8011b86:	2b2a      	cmp	r3, #42	; 0x2a
 8011b88:	d015      	beq.n	8011bb6 <_svfiprintf_r+0xf6>
 8011b8a:	9a07      	ldr	r2, [sp, #28]
 8011b8c:	4654      	mov	r4, sl
 8011b8e:	2000      	movs	r0, #0
 8011b90:	f04f 0c0a 	mov.w	ip, #10
 8011b94:	4621      	mov	r1, r4
 8011b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b9a:	3b30      	subs	r3, #48	; 0x30
 8011b9c:	2b09      	cmp	r3, #9
 8011b9e:	d94d      	bls.n	8011c3c <_svfiprintf_r+0x17c>
 8011ba0:	b1b0      	cbz	r0, 8011bd0 <_svfiprintf_r+0x110>
 8011ba2:	9207      	str	r2, [sp, #28]
 8011ba4:	e014      	b.n	8011bd0 <_svfiprintf_r+0x110>
 8011ba6:	eba0 0308 	sub.w	r3, r0, r8
 8011baa:	fa09 f303 	lsl.w	r3, r9, r3
 8011bae:	4313      	orrs	r3, r2
 8011bb0:	9304      	str	r3, [sp, #16]
 8011bb2:	46a2      	mov	sl, r4
 8011bb4:	e7d2      	b.n	8011b5c <_svfiprintf_r+0x9c>
 8011bb6:	9b03      	ldr	r3, [sp, #12]
 8011bb8:	1d19      	adds	r1, r3, #4
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	9103      	str	r1, [sp, #12]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	bfbb      	ittet	lt
 8011bc2:	425b      	neglt	r3, r3
 8011bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8011bc8:	9307      	strge	r3, [sp, #28]
 8011bca:	9307      	strlt	r3, [sp, #28]
 8011bcc:	bfb8      	it	lt
 8011bce:	9204      	strlt	r2, [sp, #16]
 8011bd0:	7823      	ldrb	r3, [r4, #0]
 8011bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8011bd4:	d10c      	bne.n	8011bf0 <_svfiprintf_r+0x130>
 8011bd6:	7863      	ldrb	r3, [r4, #1]
 8011bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8011bda:	d134      	bne.n	8011c46 <_svfiprintf_r+0x186>
 8011bdc:	9b03      	ldr	r3, [sp, #12]
 8011bde:	1d1a      	adds	r2, r3, #4
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	9203      	str	r2, [sp, #12]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	bfb8      	it	lt
 8011be8:	f04f 33ff 	movlt.w	r3, #4294967295
 8011bec:	3402      	adds	r4, #2
 8011bee:	9305      	str	r3, [sp, #20]
 8011bf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011cb8 <_svfiprintf_r+0x1f8>
 8011bf4:	7821      	ldrb	r1, [r4, #0]
 8011bf6:	2203      	movs	r2, #3
 8011bf8:	4650      	mov	r0, sl
 8011bfa:	f7ee fb11 	bl	8000220 <memchr>
 8011bfe:	b138      	cbz	r0, 8011c10 <_svfiprintf_r+0x150>
 8011c00:	9b04      	ldr	r3, [sp, #16]
 8011c02:	eba0 000a 	sub.w	r0, r0, sl
 8011c06:	2240      	movs	r2, #64	; 0x40
 8011c08:	4082      	lsls	r2, r0
 8011c0a:	4313      	orrs	r3, r2
 8011c0c:	3401      	adds	r4, #1
 8011c0e:	9304      	str	r3, [sp, #16]
 8011c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c14:	4825      	ldr	r0, [pc, #148]	; (8011cac <_svfiprintf_r+0x1ec>)
 8011c16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c1a:	2206      	movs	r2, #6
 8011c1c:	f7ee fb00 	bl	8000220 <memchr>
 8011c20:	2800      	cmp	r0, #0
 8011c22:	d038      	beq.n	8011c96 <_svfiprintf_r+0x1d6>
 8011c24:	4b22      	ldr	r3, [pc, #136]	; (8011cb0 <_svfiprintf_r+0x1f0>)
 8011c26:	bb1b      	cbnz	r3, 8011c70 <_svfiprintf_r+0x1b0>
 8011c28:	9b03      	ldr	r3, [sp, #12]
 8011c2a:	3307      	adds	r3, #7
 8011c2c:	f023 0307 	bic.w	r3, r3, #7
 8011c30:	3308      	adds	r3, #8
 8011c32:	9303      	str	r3, [sp, #12]
 8011c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c36:	4433      	add	r3, r6
 8011c38:	9309      	str	r3, [sp, #36]	; 0x24
 8011c3a:	e768      	b.n	8011b0e <_svfiprintf_r+0x4e>
 8011c3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c40:	460c      	mov	r4, r1
 8011c42:	2001      	movs	r0, #1
 8011c44:	e7a6      	b.n	8011b94 <_svfiprintf_r+0xd4>
 8011c46:	2300      	movs	r3, #0
 8011c48:	3401      	adds	r4, #1
 8011c4a:	9305      	str	r3, [sp, #20]
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	f04f 0c0a 	mov.w	ip, #10
 8011c52:	4620      	mov	r0, r4
 8011c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c58:	3a30      	subs	r2, #48	; 0x30
 8011c5a:	2a09      	cmp	r2, #9
 8011c5c:	d903      	bls.n	8011c66 <_svfiprintf_r+0x1a6>
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d0c6      	beq.n	8011bf0 <_svfiprintf_r+0x130>
 8011c62:	9105      	str	r1, [sp, #20]
 8011c64:	e7c4      	b.n	8011bf0 <_svfiprintf_r+0x130>
 8011c66:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	e7f0      	b.n	8011c52 <_svfiprintf_r+0x192>
 8011c70:	ab03      	add	r3, sp, #12
 8011c72:	9300      	str	r3, [sp, #0]
 8011c74:	462a      	mov	r2, r5
 8011c76:	4b0f      	ldr	r3, [pc, #60]	; (8011cb4 <_svfiprintf_r+0x1f4>)
 8011c78:	a904      	add	r1, sp, #16
 8011c7a:	4638      	mov	r0, r7
 8011c7c:	f7fc fc9a 	bl	800e5b4 <_printf_float>
 8011c80:	1c42      	adds	r2, r0, #1
 8011c82:	4606      	mov	r6, r0
 8011c84:	d1d6      	bne.n	8011c34 <_svfiprintf_r+0x174>
 8011c86:	89ab      	ldrh	r3, [r5, #12]
 8011c88:	065b      	lsls	r3, r3, #25
 8011c8a:	f53f af2d 	bmi.w	8011ae8 <_svfiprintf_r+0x28>
 8011c8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c90:	b01d      	add	sp, #116	; 0x74
 8011c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c96:	ab03      	add	r3, sp, #12
 8011c98:	9300      	str	r3, [sp, #0]
 8011c9a:	462a      	mov	r2, r5
 8011c9c:	4b05      	ldr	r3, [pc, #20]	; (8011cb4 <_svfiprintf_r+0x1f4>)
 8011c9e:	a904      	add	r1, sp, #16
 8011ca0:	4638      	mov	r0, r7
 8011ca2:	f7fc ff2b 	bl	800eafc <_printf_i>
 8011ca6:	e7eb      	b.n	8011c80 <_svfiprintf_r+0x1c0>
 8011ca8:	08013f89 	.word	0x08013f89
 8011cac:	08013f93 	.word	0x08013f93
 8011cb0:	0800e5b5 	.word	0x0800e5b5
 8011cb4:	08011a0d 	.word	0x08011a0d
 8011cb8:	08013f8f 	.word	0x08013f8f

08011cbc <__sfputc_r>:
 8011cbc:	6893      	ldr	r3, [r2, #8]
 8011cbe:	3b01      	subs	r3, #1
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	b410      	push	{r4}
 8011cc4:	6093      	str	r3, [r2, #8]
 8011cc6:	da08      	bge.n	8011cda <__sfputc_r+0x1e>
 8011cc8:	6994      	ldr	r4, [r2, #24]
 8011cca:	42a3      	cmp	r3, r4
 8011ccc:	db01      	blt.n	8011cd2 <__sfputc_r+0x16>
 8011cce:	290a      	cmp	r1, #10
 8011cd0:	d103      	bne.n	8011cda <__sfputc_r+0x1e>
 8011cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cd6:	f000 b9e3 	b.w	80120a0 <__swbuf_r>
 8011cda:	6813      	ldr	r3, [r2, #0]
 8011cdc:	1c58      	adds	r0, r3, #1
 8011cde:	6010      	str	r0, [r2, #0]
 8011ce0:	7019      	strb	r1, [r3, #0]
 8011ce2:	4608      	mov	r0, r1
 8011ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ce8:	4770      	bx	lr

08011cea <__sfputs_r>:
 8011cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cec:	4606      	mov	r6, r0
 8011cee:	460f      	mov	r7, r1
 8011cf0:	4614      	mov	r4, r2
 8011cf2:	18d5      	adds	r5, r2, r3
 8011cf4:	42ac      	cmp	r4, r5
 8011cf6:	d101      	bne.n	8011cfc <__sfputs_r+0x12>
 8011cf8:	2000      	movs	r0, #0
 8011cfa:	e007      	b.n	8011d0c <__sfputs_r+0x22>
 8011cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d00:	463a      	mov	r2, r7
 8011d02:	4630      	mov	r0, r6
 8011d04:	f7ff ffda 	bl	8011cbc <__sfputc_r>
 8011d08:	1c43      	adds	r3, r0, #1
 8011d0a:	d1f3      	bne.n	8011cf4 <__sfputs_r+0xa>
 8011d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d10 <_vfiprintf_r>:
 8011d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d14:	460d      	mov	r5, r1
 8011d16:	b09d      	sub	sp, #116	; 0x74
 8011d18:	4614      	mov	r4, r2
 8011d1a:	4698      	mov	r8, r3
 8011d1c:	4606      	mov	r6, r0
 8011d1e:	b118      	cbz	r0, 8011d28 <_vfiprintf_r+0x18>
 8011d20:	6a03      	ldr	r3, [r0, #32]
 8011d22:	b90b      	cbnz	r3, 8011d28 <_vfiprintf_r+0x18>
 8011d24:	f7fd faa8 	bl	800f278 <__sinit>
 8011d28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d2a:	07d9      	lsls	r1, r3, #31
 8011d2c:	d405      	bmi.n	8011d3a <_vfiprintf_r+0x2a>
 8011d2e:	89ab      	ldrh	r3, [r5, #12]
 8011d30:	059a      	lsls	r2, r3, #22
 8011d32:	d402      	bmi.n	8011d3a <_vfiprintf_r+0x2a>
 8011d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d36:	f7fd fc48 	bl	800f5ca <__retarget_lock_acquire_recursive>
 8011d3a:	89ab      	ldrh	r3, [r5, #12]
 8011d3c:	071b      	lsls	r3, r3, #28
 8011d3e:	d501      	bpl.n	8011d44 <_vfiprintf_r+0x34>
 8011d40:	692b      	ldr	r3, [r5, #16]
 8011d42:	b99b      	cbnz	r3, 8011d6c <_vfiprintf_r+0x5c>
 8011d44:	4629      	mov	r1, r5
 8011d46:	4630      	mov	r0, r6
 8011d48:	f000 f9e8 	bl	801211c <__swsetup_r>
 8011d4c:	b170      	cbz	r0, 8011d6c <_vfiprintf_r+0x5c>
 8011d4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d50:	07dc      	lsls	r4, r3, #31
 8011d52:	d504      	bpl.n	8011d5e <_vfiprintf_r+0x4e>
 8011d54:	f04f 30ff 	mov.w	r0, #4294967295
 8011d58:	b01d      	add	sp, #116	; 0x74
 8011d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d5e:	89ab      	ldrh	r3, [r5, #12]
 8011d60:	0598      	lsls	r0, r3, #22
 8011d62:	d4f7      	bmi.n	8011d54 <_vfiprintf_r+0x44>
 8011d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d66:	f7fd fc31 	bl	800f5cc <__retarget_lock_release_recursive>
 8011d6a:	e7f3      	b.n	8011d54 <_vfiprintf_r+0x44>
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d70:	2320      	movs	r3, #32
 8011d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d7a:	2330      	movs	r3, #48	; 0x30
 8011d7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011f30 <_vfiprintf_r+0x220>
 8011d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d84:	f04f 0901 	mov.w	r9, #1
 8011d88:	4623      	mov	r3, r4
 8011d8a:	469a      	mov	sl, r3
 8011d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d90:	b10a      	cbz	r2, 8011d96 <_vfiprintf_r+0x86>
 8011d92:	2a25      	cmp	r2, #37	; 0x25
 8011d94:	d1f9      	bne.n	8011d8a <_vfiprintf_r+0x7a>
 8011d96:	ebba 0b04 	subs.w	fp, sl, r4
 8011d9a:	d00b      	beq.n	8011db4 <_vfiprintf_r+0xa4>
 8011d9c:	465b      	mov	r3, fp
 8011d9e:	4622      	mov	r2, r4
 8011da0:	4629      	mov	r1, r5
 8011da2:	4630      	mov	r0, r6
 8011da4:	f7ff ffa1 	bl	8011cea <__sfputs_r>
 8011da8:	3001      	adds	r0, #1
 8011daa:	f000 80a9 	beq.w	8011f00 <_vfiprintf_r+0x1f0>
 8011dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011db0:	445a      	add	r2, fp
 8011db2:	9209      	str	r2, [sp, #36]	; 0x24
 8011db4:	f89a 3000 	ldrb.w	r3, [sl]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	f000 80a1 	beq.w	8011f00 <_vfiprintf_r+0x1f0>
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8011dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dc8:	f10a 0a01 	add.w	sl, sl, #1
 8011dcc:	9304      	str	r3, [sp, #16]
 8011dce:	9307      	str	r3, [sp, #28]
 8011dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8011dd6:	4654      	mov	r4, sl
 8011dd8:	2205      	movs	r2, #5
 8011dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dde:	4854      	ldr	r0, [pc, #336]	; (8011f30 <_vfiprintf_r+0x220>)
 8011de0:	f7ee fa1e 	bl	8000220 <memchr>
 8011de4:	9a04      	ldr	r2, [sp, #16]
 8011de6:	b9d8      	cbnz	r0, 8011e20 <_vfiprintf_r+0x110>
 8011de8:	06d1      	lsls	r1, r2, #27
 8011dea:	bf44      	itt	mi
 8011dec:	2320      	movmi	r3, #32
 8011dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011df2:	0713      	lsls	r3, r2, #28
 8011df4:	bf44      	itt	mi
 8011df6:	232b      	movmi	r3, #43	; 0x2b
 8011df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8011e00:	2b2a      	cmp	r3, #42	; 0x2a
 8011e02:	d015      	beq.n	8011e30 <_vfiprintf_r+0x120>
 8011e04:	9a07      	ldr	r2, [sp, #28]
 8011e06:	4654      	mov	r4, sl
 8011e08:	2000      	movs	r0, #0
 8011e0a:	f04f 0c0a 	mov.w	ip, #10
 8011e0e:	4621      	mov	r1, r4
 8011e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e14:	3b30      	subs	r3, #48	; 0x30
 8011e16:	2b09      	cmp	r3, #9
 8011e18:	d94d      	bls.n	8011eb6 <_vfiprintf_r+0x1a6>
 8011e1a:	b1b0      	cbz	r0, 8011e4a <_vfiprintf_r+0x13a>
 8011e1c:	9207      	str	r2, [sp, #28]
 8011e1e:	e014      	b.n	8011e4a <_vfiprintf_r+0x13a>
 8011e20:	eba0 0308 	sub.w	r3, r0, r8
 8011e24:	fa09 f303 	lsl.w	r3, r9, r3
 8011e28:	4313      	orrs	r3, r2
 8011e2a:	9304      	str	r3, [sp, #16]
 8011e2c:	46a2      	mov	sl, r4
 8011e2e:	e7d2      	b.n	8011dd6 <_vfiprintf_r+0xc6>
 8011e30:	9b03      	ldr	r3, [sp, #12]
 8011e32:	1d19      	adds	r1, r3, #4
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	9103      	str	r1, [sp, #12]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	bfbb      	ittet	lt
 8011e3c:	425b      	neglt	r3, r3
 8011e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8011e42:	9307      	strge	r3, [sp, #28]
 8011e44:	9307      	strlt	r3, [sp, #28]
 8011e46:	bfb8      	it	lt
 8011e48:	9204      	strlt	r2, [sp, #16]
 8011e4a:	7823      	ldrb	r3, [r4, #0]
 8011e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8011e4e:	d10c      	bne.n	8011e6a <_vfiprintf_r+0x15a>
 8011e50:	7863      	ldrb	r3, [r4, #1]
 8011e52:	2b2a      	cmp	r3, #42	; 0x2a
 8011e54:	d134      	bne.n	8011ec0 <_vfiprintf_r+0x1b0>
 8011e56:	9b03      	ldr	r3, [sp, #12]
 8011e58:	1d1a      	adds	r2, r3, #4
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	9203      	str	r2, [sp, #12]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	bfb8      	it	lt
 8011e62:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e66:	3402      	adds	r4, #2
 8011e68:	9305      	str	r3, [sp, #20]
 8011e6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011f40 <_vfiprintf_r+0x230>
 8011e6e:	7821      	ldrb	r1, [r4, #0]
 8011e70:	2203      	movs	r2, #3
 8011e72:	4650      	mov	r0, sl
 8011e74:	f7ee f9d4 	bl	8000220 <memchr>
 8011e78:	b138      	cbz	r0, 8011e8a <_vfiprintf_r+0x17a>
 8011e7a:	9b04      	ldr	r3, [sp, #16]
 8011e7c:	eba0 000a 	sub.w	r0, r0, sl
 8011e80:	2240      	movs	r2, #64	; 0x40
 8011e82:	4082      	lsls	r2, r0
 8011e84:	4313      	orrs	r3, r2
 8011e86:	3401      	adds	r4, #1
 8011e88:	9304      	str	r3, [sp, #16]
 8011e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e8e:	4829      	ldr	r0, [pc, #164]	; (8011f34 <_vfiprintf_r+0x224>)
 8011e90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e94:	2206      	movs	r2, #6
 8011e96:	f7ee f9c3 	bl	8000220 <memchr>
 8011e9a:	2800      	cmp	r0, #0
 8011e9c:	d03f      	beq.n	8011f1e <_vfiprintf_r+0x20e>
 8011e9e:	4b26      	ldr	r3, [pc, #152]	; (8011f38 <_vfiprintf_r+0x228>)
 8011ea0:	bb1b      	cbnz	r3, 8011eea <_vfiprintf_r+0x1da>
 8011ea2:	9b03      	ldr	r3, [sp, #12]
 8011ea4:	3307      	adds	r3, #7
 8011ea6:	f023 0307 	bic.w	r3, r3, #7
 8011eaa:	3308      	adds	r3, #8
 8011eac:	9303      	str	r3, [sp, #12]
 8011eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eb0:	443b      	add	r3, r7
 8011eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8011eb4:	e768      	b.n	8011d88 <_vfiprintf_r+0x78>
 8011eb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8011eba:	460c      	mov	r4, r1
 8011ebc:	2001      	movs	r0, #1
 8011ebe:	e7a6      	b.n	8011e0e <_vfiprintf_r+0xfe>
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	3401      	adds	r4, #1
 8011ec4:	9305      	str	r3, [sp, #20]
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	f04f 0c0a 	mov.w	ip, #10
 8011ecc:	4620      	mov	r0, r4
 8011ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ed2:	3a30      	subs	r2, #48	; 0x30
 8011ed4:	2a09      	cmp	r2, #9
 8011ed6:	d903      	bls.n	8011ee0 <_vfiprintf_r+0x1d0>
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d0c6      	beq.n	8011e6a <_vfiprintf_r+0x15a>
 8011edc:	9105      	str	r1, [sp, #20]
 8011ede:	e7c4      	b.n	8011e6a <_vfiprintf_r+0x15a>
 8011ee0:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ee4:	4604      	mov	r4, r0
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	e7f0      	b.n	8011ecc <_vfiprintf_r+0x1bc>
 8011eea:	ab03      	add	r3, sp, #12
 8011eec:	9300      	str	r3, [sp, #0]
 8011eee:	462a      	mov	r2, r5
 8011ef0:	4b12      	ldr	r3, [pc, #72]	; (8011f3c <_vfiprintf_r+0x22c>)
 8011ef2:	a904      	add	r1, sp, #16
 8011ef4:	4630      	mov	r0, r6
 8011ef6:	f7fc fb5d 	bl	800e5b4 <_printf_float>
 8011efa:	4607      	mov	r7, r0
 8011efc:	1c78      	adds	r0, r7, #1
 8011efe:	d1d6      	bne.n	8011eae <_vfiprintf_r+0x19e>
 8011f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f02:	07d9      	lsls	r1, r3, #31
 8011f04:	d405      	bmi.n	8011f12 <_vfiprintf_r+0x202>
 8011f06:	89ab      	ldrh	r3, [r5, #12]
 8011f08:	059a      	lsls	r2, r3, #22
 8011f0a:	d402      	bmi.n	8011f12 <_vfiprintf_r+0x202>
 8011f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f0e:	f7fd fb5d 	bl	800f5cc <__retarget_lock_release_recursive>
 8011f12:	89ab      	ldrh	r3, [r5, #12]
 8011f14:	065b      	lsls	r3, r3, #25
 8011f16:	f53f af1d 	bmi.w	8011d54 <_vfiprintf_r+0x44>
 8011f1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f1c:	e71c      	b.n	8011d58 <_vfiprintf_r+0x48>
 8011f1e:	ab03      	add	r3, sp, #12
 8011f20:	9300      	str	r3, [sp, #0]
 8011f22:	462a      	mov	r2, r5
 8011f24:	4b05      	ldr	r3, [pc, #20]	; (8011f3c <_vfiprintf_r+0x22c>)
 8011f26:	a904      	add	r1, sp, #16
 8011f28:	4630      	mov	r0, r6
 8011f2a:	f7fc fde7 	bl	800eafc <_printf_i>
 8011f2e:	e7e4      	b.n	8011efa <_vfiprintf_r+0x1ea>
 8011f30:	08013f89 	.word	0x08013f89
 8011f34:	08013f93 	.word	0x08013f93
 8011f38:	0800e5b5 	.word	0x0800e5b5
 8011f3c:	08011ceb 	.word	0x08011ceb
 8011f40:	08013f8f 	.word	0x08013f8f

08011f44 <__sflush_r>:
 8011f44:	898a      	ldrh	r2, [r1, #12]
 8011f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f4a:	4605      	mov	r5, r0
 8011f4c:	0710      	lsls	r0, r2, #28
 8011f4e:	460c      	mov	r4, r1
 8011f50:	d458      	bmi.n	8012004 <__sflush_r+0xc0>
 8011f52:	684b      	ldr	r3, [r1, #4]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	dc05      	bgt.n	8011f64 <__sflush_r+0x20>
 8011f58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	dc02      	bgt.n	8011f64 <__sflush_r+0x20>
 8011f5e:	2000      	movs	r0, #0
 8011f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f66:	2e00      	cmp	r6, #0
 8011f68:	d0f9      	beq.n	8011f5e <__sflush_r+0x1a>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011f70:	682f      	ldr	r7, [r5, #0]
 8011f72:	6a21      	ldr	r1, [r4, #32]
 8011f74:	602b      	str	r3, [r5, #0]
 8011f76:	d032      	beq.n	8011fde <__sflush_r+0x9a>
 8011f78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011f7a:	89a3      	ldrh	r3, [r4, #12]
 8011f7c:	075a      	lsls	r2, r3, #29
 8011f7e:	d505      	bpl.n	8011f8c <__sflush_r+0x48>
 8011f80:	6863      	ldr	r3, [r4, #4]
 8011f82:	1ac0      	subs	r0, r0, r3
 8011f84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011f86:	b10b      	cbz	r3, 8011f8c <__sflush_r+0x48>
 8011f88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011f8a:	1ac0      	subs	r0, r0, r3
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	4602      	mov	r2, r0
 8011f90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f92:	6a21      	ldr	r1, [r4, #32]
 8011f94:	4628      	mov	r0, r5
 8011f96:	47b0      	blx	r6
 8011f98:	1c43      	adds	r3, r0, #1
 8011f9a:	89a3      	ldrh	r3, [r4, #12]
 8011f9c:	d106      	bne.n	8011fac <__sflush_r+0x68>
 8011f9e:	6829      	ldr	r1, [r5, #0]
 8011fa0:	291d      	cmp	r1, #29
 8011fa2:	d82b      	bhi.n	8011ffc <__sflush_r+0xb8>
 8011fa4:	4a29      	ldr	r2, [pc, #164]	; (801204c <__sflush_r+0x108>)
 8011fa6:	410a      	asrs	r2, r1
 8011fa8:	07d6      	lsls	r6, r2, #31
 8011faa:	d427      	bmi.n	8011ffc <__sflush_r+0xb8>
 8011fac:	2200      	movs	r2, #0
 8011fae:	6062      	str	r2, [r4, #4]
 8011fb0:	04d9      	lsls	r1, r3, #19
 8011fb2:	6922      	ldr	r2, [r4, #16]
 8011fb4:	6022      	str	r2, [r4, #0]
 8011fb6:	d504      	bpl.n	8011fc2 <__sflush_r+0x7e>
 8011fb8:	1c42      	adds	r2, r0, #1
 8011fba:	d101      	bne.n	8011fc0 <__sflush_r+0x7c>
 8011fbc:	682b      	ldr	r3, [r5, #0]
 8011fbe:	b903      	cbnz	r3, 8011fc2 <__sflush_r+0x7e>
 8011fc0:	6560      	str	r0, [r4, #84]	; 0x54
 8011fc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011fc4:	602f      	str	r7, [r5, #0]
 8011fc6:	2900      	cmp	r1, #0
 8011fc8:	d0c9      	beq.n	8011f5e <__sflush_r+0x1a>
 8011fca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011fce:	4299      	cmp	r1, r3
 8011fd0:	d002      	beq.n	8011fd8 <__sflush_r+0x94>
 8011fd2:	4628      	mov	r0, r5
 8011fd4:	f7fe f98a 	bl	80102ec <_free_r>
 8011fd8:	2000      	movs	r0, #0
 8011fda:	6360      	str	r0, [r4, #52]	; 0x34
 8011fdc:	e7c0      	b.n	8011f60 <__sflush_r+0x1c>
 8011fde:	2301      	movs	r3, #1
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	47b0      	blx	r6
 8011fe4:	1c41      	adds	r1, r0, #1
 8011fe6:	d1c8      	bne.n	8011f7a <__sflush_r+0x36>
 8011fe8:	682b      	ldr	r3, [r5, #0]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d0c5      	beq.n	8011f7a <__sflush_r+0x36>
 8011fee:	2b1d      	cmp	r3, #29
 8011ff0:	d001      	beq.n	8011ff6 <__sflush_r+0xb2>
 8011ff2:	2b16      	cmp	r3, #22
 8011ff4:	d101      	bne.n	8011ffa <__sflush_r+0xb6>
 8011ff6:	602f      	str	r7, [r5, #0]
 8011ff8:	e7b1      	b.n	8011f5e <__sflush_r+0x1a>
 8011ffa:	89a3      	ldrh	r3, [r4, #12]
 8011ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012000:	81a3      	strh	r3, [r4, #12]
 8012002:	e7ad      	b.n	8011f60 <__sflush_r+0x1c>
 8012004:	690f      	ldr	r7, [r1, #16]
 8012006:	2f00      	cmp	r7, #0
 8012008:	d0a9      	beq.n	8011f5e <__sflush_r+0x1a>
 801200a:	0793      	lsls	r3, r2, #30
 801200c:	680e      	ldr	r6, [r1, #0]
 801200e:	bf08      	it	eq
 8012010:	694b      	ldreq	r3, [r1, #20]
 8012012:	600f      	str	r7, [r1, #0]
 8012014:	bf18      	it	ne
 8012016:	2300      	movne	r3, #0
 8012018:	eba6 0807 	sub.w	r8, r6, r7
 801201c:	608b      	str	r3, [r1, #8]
 801201e:	f1b8 0f00 	cmp.w	r8, #0
 8012022:	dd9c      	ble.n	8011f5e <__sflush_r+0x1a>
 8012024:	6a21      	ldr	r1, [r4, #32]
 8012026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012028:	4643      	mov	r3, r8
 801202a:	463a      	mov	r2, r7
 801202c:	4628      	mov	r0, r5
 801202e:	47b0      	blx	r6
 8012030:	2800      	cmp	r0, #0
 8012032:	dc06      	bgt.n	8012042 <__sflush_r+0xfe>
 8012034:	89a3      	ldrh	r3, [r4, #12]
 8012036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801203a:	81a3      	strh	r3, [r4, #12]
 801203c:	f04f 30ff 	mov.w	r0, #4294967295
 8012040:	e78e      	b.n	8011f60 <__sflush_r+0x1c>
 8012042:	4407      	add	r7, r0
 8012044:	eba8 0800 	sub.w	r8, r8, r0
 8012048:	e7e9      	b.n	801201e <__sflush_r+0xda>
 801204a:	bf00      	nop
 801204c:	dfbffffe 	.word	0xdfbffffe

08012050 <_fflush_r>:
 8012050:	b538      	push	{r3, r4, r5, lr}
 8012052:	690b      	ldr	r3, [r1, #16]
 8012054:	4605      	mov	r5, r0
 8012056:	460c      	mov	r4, r1
 8012058:	b913      	cbnz	r3, 8012060 <_fflush_r+0x10>
 801205a:	2500      	movs	r5, #0
 801205c:	4628      	mov	r0, r5
 801205e:	bd38      	pop	{r3, r4, r5, pc}
 8012060:	b118      	cbz	r0, 801206a <_fflush_r+0x1a>
 8012062:	6a03      	ldr	r3, [r0, #32]
 8012064:	b90b      	cbnz	r3, 801206a <_fflush_r+0x1a>
 8012066:	f7fd f907 	bl	800f278 <__sinit>
 801206a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d0f3      	beq.n	801205a <_fflush_r+0xa>
 8012072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012074:	07d0      	lsls	r0, r2, #31
 8012076:	d404      	bmi.n	8012082 <_fflush_r+0x32>
 8012078:	0599      	lsls	r1, r3, #22
 801207a:	d402      	bmi.n	8012082 <_fflush_r+0x32>
 801207c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801207e:	f7fd faa4 	bl	800f5ca <__retarget_lock_acquire_recursive>
 8012082:	4628      	mov	r0, r5
 8012084:	4621      	mov	r1, r4
 8012086:	f7ff ff5d 	bl	8011f44 <__sflush_r>
 801208a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801208c:	07da      	lsls	r2, r3, #31
 801208e:	4605      	mov	r5, r0
 8012090:	d4e4      	bmi.n	801205c <_fflush_r+0xc>
 8012092:	89a3      	ldrh	r3, [r4, #12]
 8012094:	059b      	lsls	r3, r3, #22
 8012096:	d4e1      	bmi.n	801205c <_fflush_r+0xc>
 8012098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801209a:	f7fd fa97 	bl	800f5cc <__retarget_lock_release_recursive>
 801209e:	e7dd      	b.n	801205c <_fflush_r+0xc>

080120a0 <__swbuf_r>:
 80120a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120a2:	460e      	mov	r6, r1
 80120a4:	4614      	mov	r4, r2
 80120a6:	4605      	mov	r5, r0
 80120a8:	b118      	cbz	r0, 80120b2 <__swbuf_r+0x12>
 80120aa:	6a03      	ldr	r3, [r0, #32]
 80120ac:	b90b      	cbnz	r3, 80120b2 <__swbuf_r+0x12>
 80120ae:	f7fd f8e3 	bl	800f278 <__sinit>
 80120b2:	69a3      	ldr	r3, [r4, #24]
 80120b4:	60a3      	str	r3, [r4, #8]
 80120b6:	89a3      	ldrh	r3, [r4, #12]
 80120b8:	071a      	lsls	r2, r3, #28
 80120ba:	d525      	bpl.n	8012108 <__swbuf_r+0x68>
 80120bc:	6923      	ldr	r3, [r4, #16]
 80120be:	b31b      	cbz	r3, 8012108 <__swbuf_r+0x68>
 80120c0:	6823      	ldr	r3, [r4, #0]
 80120c2:	6922      	ldr	r2, [r4, #16]
 80120c4:	1a98      	subs	r0, r3, r2
 80120c6:	6963      	ldr	r3, [r4, #20]
 80120c8:	b2f6      	uxtb	r6, r6
 80120ca:	4283      	cmp	r3, r0
 80120cc:	4637      	mov	r7, r6
 80120ce:	dc04      	bgt.n	80120da <__swbuf_r+0x3a>
 80120d0:	4621      	mov	r1, r4
 80120d2:	4628      	mov	r0, r5
 80120d4:	f7ff ffbc 	bl	8012050 <_fflush_r>
 80120d8:	b9e0      	cbnz	r0, 8012114 <__swbuf_r+0x74>
 80120da:	68a3      	ldr	r3, [r4, #8]
 80120dc:	3b01      	subs	r3, #1
 80120de:	60a3      	str	r3, [r4, #8]
 80120e0:	6823      	ldr	r3, [r4, #0]
 80120e2:	1c5a      	adds	r2, r3, #1
 80120e4:	6022      	str	r2, [r4, #0]
 80120e6:	701e      	strb	r6, [r3, #0]
 80120e8:	6962      	ldr	r2, [r4, #20]
 80120ea:	1c43      	adds	r3, r0, #1
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d004      	beq.n	80120fa <__swbuf_r+0x5a>
 80120f0:	89a3      	ldrh	r3, [r4, #12]
 80120f2:	07db      	lsls	r3, r3, #31
 80120f4:	d506      	bpl.n	8012104 <__swbuf_r+0x64>
 80120f6:	2e0a      	cmp	r6, #10
 80120f8:	d104      	bne.n	8012104 <__swbuf_r+0x64>
 80120fa:	4621      	mov	r1, r4
 80120fc:	4628      	mov	r0, r5
 80120fe:	f7ff ffa7 	bl	8012050 <_fflush_r>
 8012102:	b938      	cbnz	r0, 8012114 <__swbuf_r+0x74>
 8012104:	4638      	mov	r0, r7
 8012106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012108:	4621      	mov	r1, r4
 801210a:	4628      	mov	r0, r5
 801210c:	f000 f806 	bl	801211c <__swsetup_r>
 8012110:	2800      	cmp	r0, #0
 8012112:	d0d5      	beq.n	80120c0 <__swbuf_r+0x20>
 8012114:	f04f 37ff 	mov.w	r7, #4294967295
 8012118:	e7f4      	b.n	8012104 <__swbuf_r+0x64>
	...

0801211c <__swsetup_r>:
 801211c:	b538      	push	{r3, r4, r5, lr}
 801211e:	4b2a      	ldr	r3, [pc, #168]	; (80121c8 <__swsetup_r+0xac>)
 8012120:	4605      	mov	r5, r0
 8012122:	6818      	ldr	r0, [r3, #0]
 8012124:	460c      	mov	r4, r1
 8012126:	b118      	cbz	r0, 8012130 <__swsetup_r+0x14>
 8012128:	6a03      	ldr	r3, [r0, #32]
 801212a:	b90b      	cbnz	r3, 8012130 <__swsetup_r+0x14>
 801212c:	f7fd f8a4 	bl	800f278 <__sinit>
 8012130:	89a3      	ldrh	r3, [r4, #12]
 8012132:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012136:	0718      	lsls	r0, r3, #28
 8012138:	d422      	bmi.n	8012180 <__swsetup_r+0x64>
 801213a:	06d9      	lsls	r1, r3, #27
 801213c:	d407      	bmi.n	801214e <__swsetup_r+0x32>
 801213e:	2309      	movs	r3, #9
 8012140:	602b      	str	r3, [r5, #0]
 8012142:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012146:	81a3      	strh	r3, [r4, #12]
 8012148:	f04f 30ff 	mov.w	r0, #4294967295
 801214c:	e034      	b.n	80121b8 <__swsetup_r+0x9c>
 801214e:	0758      	lsls	r0, r3, #29
 8012150:	d512      	bpl.n	8012178 <__swsetup_r+0x5c>
 8012152:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012154:	b141      	cbz	r1, 8012168 <__swsetup_r+0x4c>
 8012156:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801215a:	4299      	cmp	r1, r3
 801215c:	d002      	beq.n	8012164 <__swsetup_r+0x48>
 801215e:	4628      	mov	r0, r5
 8012160:	f7fe f8c4 	bl	80102ec <_free_r>
 8012164:	2300      	movs	r3, #0
 8012166:	6363      	str	r3, [r4, #52]	; 0x34
 8012168:	89a3      	ldrh	r3, [r4, #12]
 801216a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801216e:	81a3      	strh	r3, [r4, #12]
 8012170:	2300      	movs	r3, #0
 8012172:	6063      	str	r3, [r4, #4]
 8012174:	6923      	ldr	r3, [r4, #16]
 8012176:	6023      	str	r3, [r4, #0]
 8012178:	89a3      	ldrh	r3, [r4, #12]
 801217a:	f043 0308 	orr.w	r3, r3, #8
 801217e:	81a3      	strh	r3, [r4, #12]
 8012180:	6923      	ldr	r3, [r4, #16]
 8012182:	b94b      	cbnz	r3, 8012198 <__swsetup_r+0x7c>
 8012184:	89a3      	ldrh	r3, [r4, #12]
 8012186:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801218a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801218e:	d003      	beq.n	8012198 <__swsetup_r+0x7c>
 8012190:	4621      	mov	r1, r4
 8012192:	4628      	mov	r0, r5
 8012194:	f000 fc15 	bl	80129c2 <__smakebuf_r>
 8012198:	89a0      	ldrh	r0, [r4, #12]
 801219a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801219e:	f010 0301 	ands.w	r3, r0, #1
 80121a2:	d00a      	beq.n	80121ba <__swsetup_r+0x9e>
 80121a4:	2300      	movs	r3, #0
 80121a6:	60a3      	str	r3, [r4, #8]
 80121a8:	6963      	ldr	r3, [r4, #20]
 80121aa:	425b      	negs	r3, r3
 80121ac:	61a3      	str	r3, [r4, #24]
 80121ae:	6923      	ldr	r3, [r4, #16]
 80121b0:	b943      	cbnz	r3, 80121c4 <__swsetup_r+0xa8>
 80121b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80121b6:	d1c4      	bne.n	8012142 <__swsetup_r+0x26>
 80121b8:	bd38      	pop	{r3, r4, r5, pc}
 80121ba:	0781      	lsls	r1, r0, #30
 80121bc:	bf58      	it	pl
 80121be:	6963      	ldrpl	r3, [r4, #20]
 80121c0:	60a3      	str	r3, [r4, #8]
 80121c2:	e7f4      	b.n	80121ae <__swsetup_r+0x92>
 80121c4:	2000      	movs	r0, #0
 80121c6:	e7f7      	b.n	80121b8 <__swsetup_r+0x9c>
 80121c8:	20000064 	.word	0x20000064

080121cc <strncmp>:
 80121cc:	b510      	push	{r4, lr}
 80121ce:	b16a      	cbz	r2, 80121ec <strncmp+0x20>
 80121d0:	3901      	subs	r1, #1
 80121d2:	1884      	adds	r4, r0, r2
 80121d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80121dc:	429a      	cmp	r2, r3
 80121de:	d103      	bne.n	80121e8 <strncmp+0x1c>
 80121e0:	42a0      	cmp	r0, r4
 80121e2:	d001      	beq.n	80121e8 <strncmp+0x1c>
 80121e4:	2a00      	cmp	r2, #0
 80121e6:	d1f5      	bne.n	80121d4 <strncmp+0x8>
 80121e8:	1ad0      	subs	r0, r2, r3
 80121ea:	bd10      	pop	{r4, pc}
 80121ec:	4610      	mov	r0, r2
 80121ee:	e7fc      	b.n	80121ea <strncmp+0x1e>

080121f0 <nan>:
 80121f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80121f8 <nan+0x8>
 80121f4:	4770      	bx	lr
 80121f6:	bf00      	nop
 80121f8:	00000000 	.word	0x00000000
 80121fc:	7ff80000 	.word	0x7ff80000

08012200 <_calloc_r>:
 8012200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012202:	fba1 2402 	umull	r2, r4, r1, r2
 8012206:	b94c      	cbnz	r4, 801221c <_calloc_r+0x1c>
 8012208:	4611      	mov	r1, r2
 801220a:	9201      	str	r2, [sp, #4]
 801220c:	f7fc f8a6 	bl	800e35c <_malloc_r>
 8012210:	9a01      	ldr	r2, [sp, #4]
 8012212:	4605      	mov	r5, r0
 8012214:	b930      	cbnz	r0, 8012224 <_calloc_r+0x24>
 8012216:	4628      	mov	r0, r5
 8012218:	b003      	add	sp, #12
 801221a:	bd30      	pop	{r4, r5, pc}
 801221c:	220c      	movs	r2, #12
 801221e:	6002      	str	r2, [r0, #0]
 8012220:	2500      	movs	r5, #0
 8012222:	e7f8      	b.n	8012216 <_calloc_r+0x16>
 8012224:	4621      	mov	r1, r4
 8012226:	f7fd f8ec 	bl	800f402 <memset>
 801222a:	e7f4      	b.n	8012216 <_calloc_r+0x16>

0801222c <rshift>:
 801222c:	6903      	ldr	r3, [r0, #16]
 801222e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012232:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012236:	ea4f 1261 	mov.w	r2, r1, asr #5
 801223a:	f100 0414 	add.w	r4, r0, #20
 801223e:	dd45      	ble.n	80122cc <rshift+0xa0>
 8012240:	f011 011f 	ands.w	r1, r1, #31
 8012244:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012248:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801224c:	d10c      	bne.n	8012268 <rshift+0x3c>
 801224e:	f100 0710 	add.w	r7, r0, #16
 8012252:	4629      	mov	r1, r5
 8012254:	42b1      	cmp	r1, r6
 8012256:	d334      	bcc.n	80122c2 <rshift+0x96>
 8012258:	1a9b      	subs	r3, r3, r2
 801225a:	009b      	lsls	r3, r3, #2
 801225c:	1eea      	subs	r2, r5, #3
 801225e:	4296      	cmp	r6, r2
 8012260:	bf38      	it	cc
 8012262:	2300      	movcc	r3, #0
 8012264:	4423      	add	r3, r4
 8012266:	e015      	b.n	8012294 <rshift+0x68>
 8012268:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801226c:	f1c1 0820 	rsb	r8, r1, #32
 8012270:	40cf      	lsrs	r7, r1
 8012272:	f105 0e04 	add.w	lr, r5, #4
 8012276:	46a1      	mov	r9, r4
 8012278:	4576      	cmp	r6, lr
 801227a:	46f4      	mov	ip, lr
 801227c:	d815      	bhi.n	80122aa <rshift+0x7e>
 801227e:	1a9a      	subs	r2, r3, r2
 8012280:	0092      	lsls	r2, r2, #2
 8012282:	3a04      	subs	r2, #4
 8012284:	3501      	adds	r5, #1
 8012286:	42ae      	cmp	r6, r5
 8012288:	bf38      	it	cc
 801228a:	2200      	movcc	r2, #0
 801228c:	18a3      	adds	r3, r4, r2
 801228e:	50a7      	str	r7, [r4, r2]
 8012290:	b107      	cbz	r7, 8012294 <rshift+0x68>
 8012292:	3304      	adds	r3, #4
 8012294:	1b1a      	subs	r2, r3, r4
 8012296:	42a3      	cmp	r3, r4
 8012298:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801229c:	bf08      	it	eq
 801229e:	2300      	moveq	r3, #0
 80122a0:	6102      	str	r2, [r0, #16]
 80122a2:	bf08      	it	eq
 80122a4:	6143      	streq	r3, [r0, #20]
 80122a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122aa:	f8dc c000 	ldr.w	ip, [ip]
 80122ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80122b2:	ea4c 0707 	orr.w	r7, ip, r7
 80122b6:	f849 7b04 	str.w	r7, [r9], #4
 80122ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80122be:	40cf      	lsrs	r7, r1
 80122c0:	e7da      	b.n	8012278 <rshift+0x4c>
 80122c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80122c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80122ca:	e7c3      	b.n	8012254 <rshift+0x28>
 80122cc:	4623      	mov	r3, r4
 80122ce:	e7e1      	b.n	8012294 <rshift+0x68>

080122d0 <__hexdig_fun>:
 80122d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80122d4:	2b09      	cmp	r3, #9
 80122d6:	d802      	bhi.n	80122de <__hexdig_fun+0xe>
 80122d8:	3820      	subs	r0, #32
 80122da:	b2c0      	uxtb	r0, r0
 80122dc:	4770      	bx	lr
 80122de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80122e2:	2b05      	cmp	r3, #5
 80122e4:	d801      	bhi.n	80122ea <__hexdig_fun+0x1a>
 80122e6:	3847      	subs	r0, #71	; 0x47
 80122e8:	e7f7      	b.n	80122da <__hexdig_fun+0xa>
 80122ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80122ee:	2b05      	cmp	r3, #5
 80122f0:	d801      	bhi.n	80122f6 <__hexdig_fun+0x26>
 80122f2:	3827      	subs	r0, #39	; 0x27
 80122f4:	e7f1      	b.n	80122da <__hexdig_fun+0xa>
 80122f6:	2000      	movs	r0, #0
 80122f8:	4770      	bx	lr
	...

080122fc <__gethex>:
 80122fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012300:	4617      	mov	r7, r2
 8012302:	680a      	ldr	r2, [r1, #0]
 8012304:	b085      	sub	sp, #20
 8012306:	f102 0b02 	add.w	fp, r2, #2
 801230a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801230e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012312:	4681      	mov	r9, r0
 8012314:	468a      	mov	sl, r1
 8012316:	9302      	str	r3, [sp, #8]
 8012318:	32fe      	adds	r2, #254	; 0xfe
 801231a:	eb02 030b 	add.w	r3, r2, fp
 801231e:	46d8      	mov	r8, fp
 8012320:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8012324:	9301      	str	r3, [sp, #4]
 8012326:	2830      	cmp	r0, #48	; 0x30
 8012328:	d0f7      	beq.n	801231a <__gethex+0x1e>
 801232a:	f7ff ffd1 	bl	80122d0 <__hexdig_fun>
 801232e:	4604      	mov	r4, r0
 8012330:	2800      	cmp	r0, #0
 8012332:	d138      	bne.n	80123a6 <__gethex+0xaa>
 8012334:	49a7      	ldr	r1, [pc, #668]	; (80125d4 <__gethex+0x2d8>)
 8012336:	2201      	movs	r2, #1
 8012338:	4640      	mov	r0, r8
 801233a:	f7ff ff47 	bl	80121cc <strncmp>
 801233e:	4606      	mov	r6, r0
 8012340:	2800      	cmp	r0, #0
 8012342:	d169      	bne.n	8012418 <__gethex+0x11c>
 8012344:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012348:	465d      	mov	r5, fp
 801234a:	f7ff ffc1 	bl	80122d0 <__hexdig_fun>
 801234e:	2800      	cmp	r0, #0
 8012350:	d064      	beq.n	801241c <__gethex+0x120>
 8012352:	465a      	mov	r2, fp
 8012354:	7810      	ldrb	r0, [r2, #0]
 8012356:	2830      	cmp	r0, #48	; 0x30
 8012358:	4690      	mov	r8, r2
 801235a:	f102 0201 	add.w	r2, r2, #1
 801235e:	d0f9      	beq.n	8012354 <__gethex+0x58>
 8012360:	f7ff ffb6 	bl	80122d0 <__hexdig_fun>
 8012364:	2301      	movs	r3, #1
 8012366:	fab0 f480 	clz	r4, r0
 801236a:	0964      	lsrs	r4, r4, #5
 801236c:	465e      	mov	r6, fp
 801236e:	9301      	str	r3, [sp, #4]
 8012370:	4642      	mov	r2, r8
 8012372:	4615      	mov	r5, r2
 8012374:	3201      	adds	r2, #1
 8012376:	7828      	ldrb	r0, [r5, #0]
 8012378:	f7ff ffaa 	bl	80122d0 <__hexdig_fun>
 801237c:	2800      	cmp	r0, #0
 801237e:	d1f8      	bne.n	8012372 <__gethex+0x76>
 8012380:	4994      	ldr	r1, [pc, #592]	; (80125d4 <__gethex+0x2d8>)
 8012382:	2201      	movs	r2, #1
 8012384:	4628      	mov	r0, r5
 8012386:	f7ff ff21 	bl	80121cc <strncmp>
 801238a:	b978      	cbnz	r0, 80123ac <__gethex+0xb0>
 801238c:	b946      	cbnz	r6, 80123a0 <__gethex+0xa4>
 801238e:	1c6e      	adds	r6, r5, #1
 8012390:	4632      	mov	r2, r6
 8012392:	4615      	mov	r5, r2
 8012394:	3201      	adds	r2, #1
 8012396:	7828      	ldrb	r0, [r5, #0]
 8012398:	f7ff ff9a 	bl	80122d0 <__hexdig_fun>
 801239c:	2800      	cmp	r0, #0
 801239e:	d1f8      	bne.n	8012392 <__gethex+0x96>
 80123a0:	1b73      	subs	r3, r6, r5
 80123a2:	009e      	lsls	r6, r3, #2
 80123a4:	e004      	b.n	80123b0 <__gethex+0xb4>
 80123a6:	2400      	movs	r4, #0
 80123a8:	4626      	mov	r6, r4
 80123aa:	e7e1      	b.n	8012370 <__gethex+0x74>
 80123ac:	2e00      	cmp	r6, #0
 80123ae:	d1f7      	bne.n	80123a0 <__gethex+0xa4>
 80123b0:	782b      	ldrb	r3, [r5, #0]
 80123b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80123b6:	2b50      	cmp	r3, #80	; 0x50
 80123b8:	d13d      	bne.n	8012436 <__gethex+0x13a>
 80123ba:	786b      	ldrb	r3, [r5, #1]
 80123bc:	2b2b      	cmp	r3, #43	; 0x2b
 80123be:	d02f      	beq.n	8012420 <__gethex+0x124>
 80123c0:	2b2d      	cmp	r3, #45	; 0x2d
 80123c2:	d031      	beq.n	8012428 <__gethex+0x12c>
 80123c4:	1c69      	adds	r1, r5, #1
 80123c6:	f04f 0b00 	mov.w	fp, #0
 80123ca:	7808      	ldrb	r0, [r1, #0]
 80123cc:	f7ff ff80 	bl	80122d0 <__hexdig_fun>
 80123d0:	1e42      	subs	r2, r0, #1
 80123d2:	b2d2      	uxtb	r2, r2
 80123d4:	2a18      	cmp	r2, #24
 80123d6:	d82e      	bhi.n	8012436 <__gethex+0x13a>
 80123d8:	f1a0 0210 	sub.w	r2, r0, #16
 80123dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80123e0:	f7ff ff76 	bl	80122d0 <__hexdig_fun>
 80123e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80123e8:	fa5f fc8c 	uxtb.w	ip, ip
 80123ec:	f1bc 0f18 	cmp.w	ip, #24
 80123f0:	d91d      	bls.n	801242e <__gethex+0x132>
 80123f2:	f1bb 0f00 	cmp.w	fp, #0
 80123f6:	d000      	beq.n	80123fa <__gethex+0xfe>
 80123f8:	4252      	negs	r2, r2
 80123fa:	4416      	add	r6, r2
 80123fc:	f8ca 1000 	str.w	r1, [sl]
 8012400:	b1dc      	cbz	r4, 801243a <__gethex+0x13e>
 8012402:	9b01      	ldr	r3, [sp, #4]
 8012404:	2b00      	cmp	r3, #0
 8012406:	bf14      	ite	ne
 8012408:	f04f 0800 	movne.w	r8, #0
 801240c:	f04f 0806 	moveq.w	r8, #6
 8012410:	4640      	mov	r0, r8
 8012412:	b005      	add	sp, #20
 8012414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012418:	4645      	mov	r5, r8
 801241a:	4626      	mov	r6, r4
 801241c:	2401      	movs	r4, #1
 801241e:	e7c7      	b.n	80123b0 <__gethex+0xb4>
 8012420:	f04f 0b00 	mov.w	fp, #0
 8012424:	1ca9      	adds	r1, r5, #2
 8012426:	e7d0      	b.n	80123ca <__gethex+0xce>
 8012428:	f04f 0b01 	mov.w	fp, #1
 801242c:	e7fa      	b.n	8012424 <__gethex+0x128>
 801242e:	230a      	movs	r3, #10
 8012430:	fb03 0002 	mla	r0, r3, r2, r0
 8012434:	e7d0      	b.n	80123d8 <__gethex+0xdc>
 8012436:	4629      	mov	r1, r5
 8012438:	e7e0      	b.n	80123fc <__gethex+0x100>
 801243a:	eba5 0308 	sub.w	r3, r5, r8
 801243e:	3b01      	subs	r3, #1
 8012440:	4621      	mov	r1, r4
 8012442:	2b07      	cmp	r3, #7
 8012444:	dc0a      	bgt.n	801245c <__gethex+0x160>
 8012446:	4648      	mov	r0, r9
 8012448:	f7fd ff9c 	bl	8010384 <_Balloc>
 801244c:	4604      	mov	r4, r0
 801244e:	b940      	cbnz	r0, 8012462 <__gethex+0x166>
 8012450:	4b61      	ldr	r3, [pc, #388]	; (80125d8 <__gethex+0x2dc>)
 8012452:	4602      	mov	r2, r0
 8012454:	21e4      	movs	r1, #228	; 0xe4
 8012456:	4861      	ldr	r0, [pc, #388]	; (80125dc <__gethex+0x2e0>)
 8012458:	f7fb ff20 	bl	800e29c <__assert_func>
 801245c:	3101      	adds	r1, #1
 801245e:	105b      	asrs	r3, r3, #1
 8012460:	e7ef      	b.n	8012442 <__gethex+0x146>
 8012462:	f100 0a14 	add.w	sl, r0, #20
 8012466:	2300      	movs	r3, #0
 8012468:	495a      	ldr	r1, [pc, #360]	; (80125d4 <__gethex+0x2d8>)
 801246a:	f8cd a004 	str.w	sl, [sp, #4]
 801246e:	469b      	mov	fp, r3
 8012470:	45a8      	cmp	r8, r5
 8012472:	d342      	bcc.n	80124fa <__gethex+0x1fe>
 8012474:	9801      	ldr	r0, [sp, #4]
 8012476:	f840 bb04 	str.w	fp, [r0], #4
 801247a:	eba0 000a 	sub.w	r0, r0, sl
 801247e:	1080      	asrs	r0, r0, #2
 8012480:	6120      	str	r0, [r4, #16]
 8012482:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012486:	4658      	mov	r0, fp
 8012488:	f7fe f86e 	bl	8010568 <__hi0bits>
 801248c:	683d      	ldr	r5, [r7, #0]
 801248e:	eba8 0000 	sub.w	r0, r8, r0
 8012492:	42a8      	cmp	r0, r5
 8012494:	dd59      	ble.n	801254a <__gethex+0x24e>
 8012496:	eba0 0805 	sub.w	r8, r0, r5
 801249a:	4641      	mov	r1, r8
 801249c:	4620      	mov	r0, r4
 801249e:	f7fe fbfd 	bl	8010c9c <__any_on>
 80124a2:	4683      	mov	fp, r0
 80124a4:	b1b8      	cbz	r0, 80124d6 <__gethex+0x1da>
 80124a6:	f108 33ff 	add.w	r3, r8, #4294967295
 80124aa:	1159      	asrs	r1, r3, #5
 80124ac:	f003 021f 	and.w	r2, r3, #31
 80124b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80124b4:	f04f 0b01 	mov.w	fp, #1
 80124b8:	fa0b f202 	lsl.w	r2, fp, r2
 80124bc:	420a      	tst	r2, r1
 80124be:	d00a      	beq.n	80124d6 <__gethex+0x1da>
 80124c0:	455b      	cmp	r3, fp
 80124c2:	dd06      	ble.n	80124d2 <__gethex+0x1d6>
 80124c4:	f1a8 0102 	sub.w	r1, r8, #2
 80124c8:	4620      	mov	r0, r4
 80124ca:	f7fe fbe7 	bl	8010c9c <__any_on>
 80124ce:	2800      	cmp	r0, #0
 80124d0:	d138      	bne.n	8012544 <__gethex+0x248>
 80124d2:	f04f 0b02 	mov.w	fp, #2
 80124d6:	4641      	mov	r1, r8
 80124d8:	4620      	mov	r0, r4
 80124da:	f7ff fea7 	bl	801222c <rshift>
 80124de:	4446      	add	r6, r8
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	42b3      	cmp	r3, r6
 80124e4:	da41      	bge.n	801256a <__gethex+0x26e>
 80124e6:	4621      	mov	r1, r4
 80124e8:	4648      	mov	r0, r9
 80124ea:	f7fd ff8b 	bl	8010404 <_Bfree>
 80124ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80124f0:	2300      	movs	r3, #0
 80124f2:	6013      	str	r3, [r2, #0]
 80124f4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80124f8:	e78a      	b.n	8012410 <__gethex+0x114>
 80124fa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80124fe:	2a2e      	cmp	r2, #46	; 0x2e
 8012500:	d014      	beq.n	801252c <__gethex+0x230>
 8012502:	2b20      	cmp	r3, #32
 8012504:	d106      	bne.n	8012514 <__gethex+0x218>
 8012506:	9b01      	ldr	r3, [sp, #4]
 8012508:	f843 bb04 	str.w	fp, [r3], #4
 801250c:	f04f 0b00 	mov.w	fp, #0
 8012510:	9301      	str	r3, [sp, #4]
 8012512:	465b      	mov	r3, fp
 8012514:	7828      	ldrb	r0, [r5, #0]
 8012516:	9303      	str	r3, [sp, #12]
 8012518:	f7ff feda 	bl	80122d0 <__hexdig_fun>
 801251c:	9b03      	ldr	r3, [sp, #12]
 801251e:	f000 000f 	and.w	r0, r0, #15
 8012522:	4098      	lsls	r0, r3
 8012524:	ea4b 0b00 	orr.w	fp, fp, r0
 8012528:	3304      	adds	r3, #4
 801252a:	e7a1      	b.n	8012470 <__gethex+0x174>
 801252c:	45a8      	cmp	r8, r5
 801252e:	d8e8      	bhi.n	8012502 <__gethex+0x206>
 8012530:	2201      	movs	r2, #1
 8012532:	4628      	mov	r0, r5
 8012534:	9303      	str	r3, [sp, #12]
 8012536:	f7ff fe49 	bl	80121cc <strncmp>
 801253a:	4926      	ldr	r1, [pc, #152]	; (80125d4 <__gethex+0x2d8>)
 801253c:	9b03      	ldr	r3, [sp, #12]
 801253e:	2800      	cmp	r0, #0
 8012540:	d1df      	bne.n	8012502 <__gethex+0x206>
 8012542:	e795      	b.n	8012470 <__gethex+0x174>
 8012544:	f04f 0b03 	mov.w	fp, #3
 8012548:	e7c5      	b.n	80124d6 <__gethex+0x1da>
 801254a:	da0b      	bge.n	8012564 <__gethex+0x268>
 801254c:	eba5 0800 	sub.w	r8, r5, r0
 8012550:	4621      	mov	r1, r4
 8012552:	4642      	mov	r2, r8
 8012554:	4648      	mov	r0, r9
 8012556:	f7fe f96f 	bl	8010838 <__lshift>
 801255a:	eba6 0608 	sub.w	r6, r6, r8
 801255e:	4604      	mov	r4, r0
 8012560:	f100 0a14 	add.w	sl, r0, #20
 8012564:	f04f 0b00 	mov.w	fp, #0
 8012568:	e7ba      	b.n	80124e0 <__gethex+0x1e4>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	42b3      	cmp	r3, r6
 801256e:	dd73      	ble.n	8012658 <__gethex+0x35c>
 8012570:	1b9e      	subs	r6, r3, r6
 8012572:	42b5      	cmp	r5, r6
 8012574:	dc34      	bgt.n	80125e0 <__gethex+0x2e4>
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	2b02      	cmp	r3, #2
 801257a:	d023      	beq.n	80125c4 <__gethex+0x2c8>
 801257c:	2b03      	cmp	r3, #3
 801257e:	d025      	beq.n	80125cc <__gethex+0x2d0>
 8012580:	2b01      	cmp	r3, #1
 8012582:	d115      	bne.n	80125b0 <__gethex+0x2b4>
 8012584:	42b5      	cmp	r5, r6
 8012586:	d113      	bne.n	80125b0 <__gethex+0x2b4>
 8012588:	2d01      	cmp	r5, #1
 801258a:	d10b      	bne.n	80125a4 <__gethex+0x2a8>
 801258c:	9a02      	ldr	r2, [sp, #8]
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6013      	str	r3, [r2, #0]
 8012592:	2301      	movs	r3, #1
 8012594:	6123      	str	r3, [r4, #16]
 8012596:	f8ca 3000 	str.w	r3, [sl]
 801259a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801259c:	f04f 0862 	mov.w	r8, #98	; 0x62
 80125a0:	601c      	str	r4, [r3, #0]
 80125a2:	e735      	b.n	8012410 <__gethex+0x114>
 80125a4:	1e69      	subs	r1, r5, #1
 80125a6:	4620      	mov	r0, r4
 80125a8:	f7fe fb78 	bl	8010c9c <__any_on>
 80125ac:	2800      	cmp	r0, #0
 80125ae:	d1ed      	bne.n	801258c <__gethex+0x290>
 80125b0:	4621      	mov	r1, r4
 80125b2:	4648      	mov	r0, r9
 80125b4:	f7fd ff26 	bl	8010404 <_Bfree>
 80125b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80125ba:	2300      	movs	r3, #0
 80125bc:	6013      	str	r3, [r2, #0]
 80125be:	f04f 0850 	mov.w	r8, #80	; 0x50
 80125c2:	e725      	b.n	8012410 <__gethex+0x114>
 80125c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d1f2      	bne.n	80125b0 <__gethex+0x2b4>
 80125ca:	e7df      	b.n	801258c <__gethex+0x290>
 80125cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d1dc      	bne.n	801258c <__gethex+0x290>
 80125d2:	e7ed      	b.n	80125b0 <__gethex+0x2b4>
 80125d4:	08013e34 	.word	0x08013e34
 80125d8:	08013cc9 	.word	0x08013cc9
 80125dc:	08013fa2 	.word	0x08013fa2
 80125e0:	f106 38ff 	add.w	r8, r6, #4294967295
 80125e4:	f1bb 0f00 	cmp.w	fp, #0
 80125e8:	d133      	bne.n	8012652 <__gethex+0x356>
 80125ea:	f1b8 0f00 	cmp.w	r8, #0
 80125ee:	d004      	beq.n	80125fa <__gethex+0x2fe>
 80125f0:	4641      	mov	r1, r8
 80125f2:	4620      	mov	r0, r4
 80125f4:	f7fe fb52 	bl	8010c9c <__any_on>
 80125f8:	4683      	mov	fp, r0
 80125fa:	ea4f 1268 	mov.w	r2, r8, asr #5
 80125fe:	2301      	movs	r3, #1
 8012600:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012604:	f008 081f 	and.w	r8, r8, #31
 8012608:	fa03 f308 	lsl.w	r3, r3, r8
 801260c:	4213      	tst	r3, r2
 801260e:	4631      	mov	r1, r6
 8012610:	4620      	mov	r0, r4
 8012612:	bf18      	it	ne
 8012614:	f04b 0b02 	orrne.w	fp, fp, #2
 8012618:	1bad      	subs	r5, r5, r6
 801261a:	f7ff fe07 	bl	801222c <rshift>
 801261e:	687e      	ldr	r6, [r7, #4]
 8012620:	f04f 0802 	mov.w	r8, #2
 8012624:	f1bb 0f00 	cmp.w	fp, #0
 8012628:	d04a      	beq.n	80126c0 <__gethex+0x3c4>
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	2b02      	cmp	r3, #2
 801262e:	d016      	beq.n	801265e <__gethex+0x362>
 8012630:	2b03      	cmp	r3, #3
 8012632:	d018      	beq.n	8012666 <__gethex+0x36a>
 8012634:	2b01      	cmp	r3, #1
 8012636:	d109      	bne.n	801264c <__gethex+0x350>
 8012638:	f01b 0f02 	tst.w	fp, #2
 801263c:	d006      	beq.n	801264c <__gethex+0x350>
 801263e:	f8da 3000 	ldr.w	r3, [sl]
 8012642:	ea4b 0b03 	orr.w	fp, fp, r3
 8012646:	f01b 0f01 	tst.w	fp, #1
 801264a:	d10f      	bne.n	801266c <__gethex+0x370>
 801264c:	f048 0810 	orr.w	r8, r8, #16
 8012650:	e036      	b.n	80126c0 <__gethex+0x3c4>
 8012652:	f04f 0b01 	mov.w	fp, #1
 8012656:	e7d0      	b.n	80125fa <__gethex+0x2fe>
 8012658:	f04f 0801 	mov.w	r8, #1
 801265c:	e7e2      	b.n	8012624 <__gethex+0x328>
 801265e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012660:	f1c3 0301 	rsb	r3, r3, #1
 8012664:	930f      	str	r3, [sp, #60]	; 0x3c
 8012666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012668:	2b00      	cmp	r3, #0
 801266a:	d0ef      	beq.n	801264c <__gethex+0x350>
 801266c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012670:	f104 0214 	add.w	r2, r4, #20
 8012674:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8012678:	9301      	str	r3, [sp, #4]
 801267a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801267e:	2300      	movs	r3, #0
 8012680:	4694      	mov	ip, r2
 8012682:	f852 1b04 	ldr.w	r1, [r2], #4
 8012686:	f1b1 3fff 	cmp.w	r1, #4294967295
 801268a:	d01e      	beq.n	80126ca <__gethex+0x3ce>
 801268c:	3101      	adds	r1, #1
 801268e:	f8cc 1000 	str.w	r1, [ip]
 8012692:	f1b8 0f02 	cmp.w	r8, #2
 8012696:	f104 0214 	add.w	r2, r4, #20
 801269a:	d13d      	bne.n	8012718 <__gethex+0x41c>
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	3b01      	subs	r3, #1
 80126a0:	42ab      	cmp	r3, r5
 80126a2:	d10b      	bne.n	80126bc <__gethex+0x3c0>
 80126a4:	1169      	asrs	r1, r5, #5
 80126a6:	2301      	movs	r3, #1
 80126a8:	f005 051f 	and.w	r5, r5, #31
 80126ac:	fa03 f505 	lsl.w	r5, r3, r5
 80126b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80126b4:	421d      	tst	r5, r3
 80126b6:	bf18      	it	ne
 80126b8:	f04f 0801 	movne.w	r8, #1
 80126bc:	f048 0820 	orr.w	r8, r8, #32
 80126c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80126c2:	601c      	str	r4, [r3, #0]
 80126c4:	9b02      	ldr	r3, [sp, #8]
 80126c6:	601e      	str	r6, [r3, #0]
 80126c8:	e6a2      	b.n	8012410 <__gethex+0x114>
 80126ca:	4290      	cmp	r0, r2
 80126cc:	f842 3c04 	str.w	r3, [r2, #-4]
 80126d0:	d8d6      	bhi.n	8012680 <__gethex+0x384>
 80126d2:	68a2      	ldr	r2, [r4, #8]
 80126d4:	4593      	cmp	fp, r2
 80126d6:	db17      	blt.n	8012708 <__gethex+0x40c>
 80126d8:	6861      	ldr	r1, [r4, #4]
 80126da:	4648      	mov	r0, r9
 80126dc:	3101      	adds	r1, #1
 80126de:	f7fd fe51 	bl	8010384 <_Balloc>
 80126e2:	4682      	mov	sl, r0
 80126e4:	b918      	cbnz	r0, 80126ee <__gethex+0x3f2>
 80126e6:	4b1b      	ldr	r3, [pc, #108]	; (8012754 <__gethex+0x458>)
 80126e8:	4602      	mov	r2, r0
 80126ea:	2184      	movs	r1, #132	; 0x84
 80126ec:	e6b3      	b.n	8012456 <__gethex+0x15a>
 80126ee:	6922      	ldr	r2, [r4, #16]
 80126f0:	3202      	adds	r2, #2
 80126f2:	f104 010c 	add.w	r1, r4, #12
 80126f6:	0092      	lsls	r2, r2, #2
 80126f8:	300c      	adds	r0, #12
 80126fa:	f7fc ff68 	bl	800f5ce <memcpy>
 80126fe:	4621      	mov	r1, r4
 8012700:	4648      	mov	r0, r9
 8012702:	f7fd fe7f 	bl	8010404 <_Bfree>
 8012706:	4654      	mov	r4, sl
 8012708:	6922      	ldr	r2, [r4, #16]
 801270a:	1c51      	adds	r1, r2, #1
 801270c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012710:	6121      	str	r1, [r4, #16]
 8012712:	2101      	movs	r1, #1
 8012714:	6151      	str	r1, [r2, #20]
 8012716:	e7bc      	b.n	8012692 <__gethex+0x396>
 8012718:	6921      	ldr	r1, [r4, #16]
 801271a:	4559      	cmp	r1, fp
 801271c:	dd0b      	ble.n	8012736 <__gethex+0x43a>
 801271e:	2101      	movs	r1, #1
 8012720:	4620      	mov	r0, r4
 8012722:	f7ff fd83 	bl	801222c <rshift>
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	3601      	adds	r6, #1
 801272a:	42b3      	cmp	r3, r6
 801272c:	f6ff aedb 	blt.w	80124e6 <__gethex+0x1ea>
 8012730:	f04f 0801 	mov.w	r8, #1
 8012734:	e7c2      	b.n	80126bc <__gethex+0x3c0>
 8012736:	f015 051f 	ands.w	r5, r5, #31
 801273a:	d0f9      	beq.n	8012730 <__gethex+0x434>
 801273c:	9b01      	ldr	r3, [sp, #4]
 801273e:	441a      	add	r2, r3
 8012740:	f1c5 0520 	rsb	r5, r5, #32
 8012744:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012748:	f7fd ff0e 	bl	8010568 <__hi0bits>
 801274c:	42a8      	cmp	r0, r5
 801274e:	dbe6      	blt.n	801271e <__gethex+0x422>
 8012750:	e7ee      	b.n	8012730 <__gethex+0x434>
 8012752:	bf00      	nop
 8012754:	08013cc9 	.word	0x08013cc9

08012758 <L_shift>:
 8012758:	f1c2 0208 	rsb	r2, r2, #8
 801275c:	0092      	lsls	r2, r2, #2
 801275e:	b570      	push	{r4, r5, r6, lr}
 8012760:	f1c2 0620 	rsb	r6, r2, #32
 8012764:	6843      	ldr	r3, [r0, #4]
 8012766:	6804      	ldr	r4, [r0, #0]
 8012768:	fa03 f506 	lsl.w	r5, r3, r6
 801276c:	432c      	orrs	r4, r5
 801276e:	40d3      	lsrs	r3, r2
 8012770:	6004      	str	r4, [r0, #0]
 8012772:	f840 3f04 	str.w	r3, [r0, #4]!
 8012776:	4288      	cmp	r0, r1
 8012778:	d3f4      	bcc.n	8012764 <L_shift+0xc>
 801277a:	bd70      	pop	{r4, r5, r6, pc}

0801277c <__match>:
 801277c:	b530      	push	{r4, r5, lr}
 801277e:	6803      	ldr	r3, [r0, #0]
 8012780:	3301      	adds	r3, #1
 8012782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012786:	b914      	cbnz	r4, 801278e <__match+0x12>
 8012788:	6003      	str	r3, [r0, #0]
 801278a:	2001      	movs	r0, #1
 801278c:	bd30      	pop	{r4, r5, pc}
 801278e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012792:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012796:	2d19      	cmp	r5, #25
 8012798:	bf98      	it	ls
 801279a:	3220      	addls	r2, #32
 801279c:	42a2      	cmp	r2, r4
 801279e:	d0f0      	beq.n	8012782 <__match+0x6>
 80127a0:	2000      	movs	r0, #0
 80127a2:	e7f3      	b.n	801278c <__match+0x10>

080127a4 <__hexnan>:
 80127a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a8:	680b      	ldr	r3, [r1, #0]
 80127aa:	6801      	ldr	r1, [r0, #0]
 80127ac:	115e      	asrs	r6, r3, #5
 80127ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80127b2:	f013 031f 	ands.w	r3, r3, #31
 80127b6:	b087      	sub	sp, #28
 80127b8:	bf18      	it	ne
 80127ba:	3604      	addne	r6, #4
 80127bc:	2500      	movs	r5, #0
 80127be:	1f37      	subs	r7, r6, #4
 80127c0:	4682      	mov	sl, r0
 80127c2:	4690      	mov	r8, r2
 80127c4:	9301      	str	r3, [sp, #4]
 80127c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80127ca:	46b9      	mov	r9, r7
 80127cc:	463c      	mov	r4, r7
 80127ce:	9502      	str	r5, [sp, #8]
 80127d0:	46ab      	mov	fp, r5
 80127d2:	784a      	ldrb	r2, [r1, #1]
 80127d4:	1c4b      	adds	r3, r1, #1
 80127d6:	9303      	str	r3, [sp, #12]
 80127d8:	b342      	cbz	r2, 801282c <__hexnan+0x88>
 80127da:	4610      	mov	r0, r2
 80127dc:	9105      	str	r1, [sp, #20]
 80127de:	9204      	str	r2, [sp, #16]
 80127e0:	f7ff fd76 	bl	80122d0 <__hexdig_fun>
 80127e4:	2800      	cmp	r0, #0
 80127e6:	d14f      	bne.n	8012888 <__hexnan+0xe4>
 80127e8:	9a04      	ldr	r2, [sp, #16]
 80127ea:	9905      	ldr	r1, [sp, #20]
 80127ec:	2a20      	cmp	r2, #32
 80127ee:	d818      	bhi.n	8012822 <__hexnan+0x7e>
 80127f0:	9b02      	ldr	r3, [sp, #8]
 80127f2:	459b      	cmp	fp, r3
 80127f4:	dd13      	ble.n	801281e <__hexnan+0x7a>
 80127f6:	454c      	cmp	r4, r9
 80127f8:	d206      	bcs.n	8012808 <__hexnan+0x64>
 80127fa:	2d07      	cmp	r5, #7
 80127fc:	dc04      	bgt.n	8012808 <__hexnan+0x64>
 80127fe:	462a      	mov	r2, r5
 8012800:	4649      	mov	r1, r9
 8012802:	4620      	mov	r0, r4
 8012804:	f7ff ffa8 	bl	8012758 <L_shift>
 8012808:	4544      	cmp	r4, r8
 801280a:	d950      	bls.n	80128ae <__hexnan+0x10a>
 801280c:	2300      	movs	r3, #0
 801280e:	f1a4 0904 	sub.w	r9, r4, #4
 8012812:	f844 3c04 	str.w	r3, [r4, #-4]
 8012816:	f8cd b008 	str.w	fp, [sp, #8]
 801281a:	464c      	mov	r4, r9
 801281c:	461d      	mov	r5, r3
 801281e:	9903      	ldr	r1, [sp, #12]
 8012820:	e7d7      	b.n	80127d2 <__hexnan+0x2e>
 8012822:	2a29      	cmp	r2, #41	; 0x29
 8012824:	d155      	bne.n	80128d2 <__hexnan+0x12e>
 8012826:	3102      	adds	r1, #2
 8012828:	f8ca 1000 	str.w	r1, [sl]
 801282c:	f1bb 0f00 	cmp.w	fp, #0
 8012830:	d04f      	beq.n	80128d2 <__hexnan+0x12e>
 8012832:	454c      	cmp	r4, r9
 8012834:	d206      	bcs.n	8012844 <__hexnan+0xa0>
 8012836:	2d07      	cmp	r5, #7
 8012838:	dc04      	bgt.n	8012844 <__hexnan+0xa0>
 801283a:	462a      	mov	r2, r5
 801283c:	4649      	mov	r1, r9
 801283e:	4620      	mov	r0, r4
 8012840:	f7ff ff8a 	bl	8012758 <L_shift>
 8012844:	4544      	cmp	r4, r8
 8012846:	d934      	bls.n	80128b2 <__hexnan+0x10e>
 8012848:	f1a8 0204 	sub.w	r2, r8, #4
 801284c:	4623      	mov	r3, r4
 801284e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012852:	f842 1f04 	str.w	r1, [r2, #4]!
 8012856:	429f      	cmp	r7, r3
 8012858:	d2f9      	bcs.n	801284e <__hexnan+0xaa>
 801285a:	1b3b      	subs	r3, r7, r4
 801285c:	f023 0303 	bic.w	r3, r3, #3
 8012860:	3304      	adds	r3, #4
 8012862:	3e03      	subs	r6, #3
 8012864:	3401      	adds	r4, #1
 8012866:	42a6      	cmp	r6, r4
 8012868:	bf38      	it	cc
 801286a:	2304      	movcc	r3, #4
 801286c:	4443      	add	r3, r8
 801286e:	2200      	movs	r2, #0
 8012870:	f843 2b04 	str.w	r2, [r3], #4
 8012874:	429f      	cmp	r7, r3
 8012876:	d2fb      	bcs.n	8012870 <__hexnan+0xcc>
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	b91b      	cbnz	r3, 8012884 <__hexnan+0xe0>
 801287c:	4547      	cmp	r7, r8
 801287e:	d126      	bne.n	80128ce <__hexnan+0x12a>
 8012880:	2301      	movs	r3, #1
 8012882:	603b      	str	r3, [r7, #0]
 8012884:	2005      	movs	r0, #5
 8012886:	e025      	b.n	80128d4 <__hexnan+0x130>
 8012888:	3501      	adds	r5, #1
 801288a:	2d08      	cmp	r5, #8
 801288c:	f10b 0b01 	add.w	fp, fp, #1
 8012890:	dd06      	ble.n	80128a0 <__hexnan+0xfc>
 8012892:	4544      	cmp	r4, r8
 8012894:	d9c3      	bls.n	801281e <__hexnan+0x7a>
 8012896:	2300      	movs	r3, #0
 8012898:	f844 3c04 	str.w	r3, [r4, #-4]
 801289c:	2501      	movs	r5, #1
 801289e:	3c04      	subs	r4, #4
 80128a0:	6822      	ldr	r2, [r4, #0]
 80128a2:	f000 000f 	and.w	r0, r0, #15
 80128a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80128aa:	6020      	str	r0, [r4, #0]
 80128ac:	e7b7      	b.n	801281e <__hexnan+0x7a>
 80128ae:	2508      	movs	r5, #8
 80128b0:	e7b5      	b.n	801281e <__hexnan+0x7a>
 80128b2:	9b01      	ldr	r3, [sp, #4]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d0df      	beq.n	8012878 <__hexnan+0xd4>
 80128b8:	f1c3 0320 	rsb	r3, r3, #32
 80128bc:	f04f 32ff 	mov.w	r2, #4294967295
 80128c0:	40da      	lsrs	r2, r3
 80128c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80128c6:	4013      	ands	r3, r2
 80128c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80128cc:	e7d4      	b.n	8012878 <__hexnan+0xd4>
 80128ce:	3f04      	subs	r7, #4
 80128d0:	e7d2      	b.n	8012878 <__hexnan+0xd4>
 80128d2:	2004      	movs	r0, #4
 80128d4:	b007      	add	sp, #28
 80128d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080128da <__ascii_mbtowc>:
 80128da:	b082      	sub	sp, #8
 80128dc:	b901      	cbnz	r1, 80128e0 <__ascii_mbtowc+0x6>
 80128de:	a901      	add	r1, sp, #4
 80128e0:	b142      	cbz	r2, 80128f4 <__ascii_mbtowc+0x1a>
 80128e2:	b14b      	cbz	r3, 80128f8 <__ascii_mbtowc+0x1e>
 80128e4:	7813      	ldrb	r3, [r2, #0]
 80128e6:	600b      	str	r3, [r1, #0]
 80128e8:	7812      	ldrb	r2, [r2, #0]
 80128ea:	1e10      	subs	r0, r2, #0
 80128ec:	bf18      	it	ne
 80128ee:	2001      	movne	r0, #1
 80128f0:	b002      	add	sp, #8
 80128f2:	4770      	bx	lr
 80128f4:	4610      	mov	r0, r2
 80128f6:	e7fb      	b.n	80128f0 <__ascii_mbtowc+0x16>
 80128f8:	f06f 0001 	mvn.w	r0, #1
 80128fc:	e7f8      	b.n	80128f0 <__ascii_mbtowc+0x16>

080128fe <_realloc_r>:
 80128fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012902:	4680      	mov	r8, r0
 8012904:	4614      	mov	r4, r2
 8012906:	460e      	mov	r6, r1
 8012908:	b921      	cbnz	r1, 8012914 <_realloc_r+0x16>
 801290a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801290e:	4611      	mov	r1, r2
 8012910:	f7fb bd24 	b.w	800e35c <_malloc_r>
 8012914:	b92a      	cbnz	r2, 8012922 <_realloc_r+0x24>
 8012916:	f7fd fce9 	bl	80102ec <_free_r>
 801291a:	4625      	mov	r5, r4
 801291c:	4628      	mov	r0, r5
 801291e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012922:	f000 f8ad 	bl	8012a80 <_malloc_usable_size_r>
 8012926:	4284      	cmp	r4, r0
 8012928:	4607      	mov	r7, r0
 801292a:	d802      	bhi.n	8012932 <_realloc_r+0x34>
 801292c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012930:	d812      	bhi.n	8012958 <_realloc_r+0x5a>
 8012932:	4621      	mov	r1, r4
 8012934:	4640      	mov	r0, r8
 8012936:	f7fb fd11 	bl	800e35c <_malloc_r>
 801293a:	4605      	mov	r5, r0
 801293c:	2800      	cmp	r0, #0
 801293e:	d0ed      	beq.n	801291c <_realloc_r+0x1e>
 8012940:	42bc      	cmp	r4, r7
 8012942:	4622      	mov	r2, r4
 8012944:	4631      	mov	r1, r6
 8012946:	bf28      	it	cs
 8012948:	463a      	movcs	r2, r7
 801294a:	f7fc fe40 	bl	800f5ce <memcpy>
 801294e:	4631      	mov	r1, r6
 8012950:	4640      	mov	r0, r8
 8012952:	f7fd fccb 	bl	80102ec <_free_r>
 8012956:	e7e1      	b.n	801291c <_realloc_r+0x1e>
 8012958:	4635      	mov	r5, r6
 801295a:	e7df      	b.n	801291c <_realloc_r+0x1e>

0801295c <__ascii_wctomb>:
 801295c:	b149      	cbz	r1, 8012972 <__ascii_wctomb+0x16>
 801295e:	2aff      	cmp	r2, #255	; 0xff
 8012960:	bf85      	ittet	hi
 8012962:	238a      	movhi	r3, #138	; 0x8a
 8012964:	6003      	strhi	r3, [r0, #0]
 8012966:	700a      	strbls	r2, [r1, #0]
 8012968:	f04f 30ff 	movhi.w	r0, #4294967295
 801296c:	bf98      	it	ls
 801296e:	2001      	movls	r0, #1
 8012970:	4770      	bx	lr
 8012972:	4608      	mov	r0, r1
 8012974:	4770      	bx	lr

08012976 <__swhatbuf_r>:
 8012976:	b570      	push	{r4, r5, r6, lr}
 8012978:	460c      	mov	r4, r1
 801297a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801297e:	2900      	cmp	r1, #0
 8012980:	b096      	sub	sp, #88	; 0x58
 8012982:	4615      	mov	r5, r2
 8012984:	461e      	mov	r6, r3
 8012986:	da0d      	bge.n	80129a4 <__swhatbuf_r+0x2e>
 8012988:	89a3      	ldrh	r3, [r4, #12]
 801298a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801298e:	f04f 0100 	mov.w	r1, #0
 8012992:	bf0c      	ite	eq
 8012994:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012998:	2340      	movne	r3, #64	; 0x40
 801299a:	2000      	movs	r0, #0
 801299c:	6031      	str	r1, [r6, #0]
 801299e:	602b      	str	r3, [r5, #0]
 80129a0:	b016      	add	sp, #88	; 0x58
 80129a2:	bd70      	pop	{r4, r5, r6, pc}
 80129a4:	466a      	mov	r2, sp
 80129a6:	f000 f849 	bl	8012a3c <_fstat_r>
 80129aa:	2800      	cmp	r0, #0
 80129ac:	dbec      	blt.n	8012988 <__swhatbuf_r+0x12>
 80129ae:	9901      	ldr	r1, [sp, #4]
 80129b0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80129b4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80129b8:	4259      	negs	r1, r3
 80129ba:	4159      	adcs	r1, r3
 80129bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80129c0:	e7eb      	b.n	801299a <__swhatbuf_r+0x24>

080129c2 <__smakebuf_r>:
 80129c2:	898b      	ldrh	r3, [r1, #12]
 80129c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80129c6:	079d      	lsls	r5, r3, #30
 80129c8:	4606      	mov	r6, r0
 80129ca:	460c      	mov	r4, r1
 80129cc:	d507      	bpl.n	80129de <__smakebuf_r+0x1c>
 80129ce:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80129d2:	6023      	str	r3, [r4, #0]
 80129d4:	6123      	str	r3, [r4, #16]
 80129d6:	2301      	movs	r3, #1
 80129d8:	6163      	str	r3, [r4, #20]
 80129da:	b002      	add	sp, #8
 80129dc:	bd70      	pop	{r4, r5, r6, pc}
 80129de:	ab01      	add	r3, sp, #4
 80129e0:	466a      	mov	r2, sp
 80129e2:	f7ff ffc8 	bl	8012976 <__swhatbuf_r>
 80129e6:	9900      	ldr	r1, [sp, #0]
 80129e8:	4605      	mov	r5, r0
 80129ea:	4630      	mov	r0, r6
 80129ec:	f7fb fcb6 	bl	800e35c <_malloc_r>
 80129f0:	b948      	cbnz	r0, 8012a06 <__smakebuf_r+0x44>
 80129f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129f6:	059a      	lsls	r2, r3, #22
 80129f8:	d4ef      	bmi.n	80129da <__smakebuf_r+0x18>
 80129fa:	f023 0303 	bic.w	r3, r3, #3
 80129fe:	f043 0302 	orr.w	r3, r3, #2
 8012a02:	81a3      	strh	r3, [r4, #12]
 8012a04:	e7e3      	b.n	80129ce <__smakebuf_r+0xc>
 8012a06:	89a3      	ldrh	r3, [r4, #12]
 8012a08:	6020      	str	r0, [r4, #0]
 8012a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a0e:	81a3      	strh	r3, [r4, #12]
 8012a10:	9b00      	ldr	r3, [sp, #0]
 8012a12:	6163      	str	r3, [r4, #20]
 8012a14:	9b01      	ldr	r3, [sp, #4]
 8012a16:	6120      	str	r0, [r4, #16]
 8012a18:	b15b      	cbz	r3, 8012a32 <__smakebuf_r+0x70>
 8012a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a1e:	4630      	mov	r0, r6
 8012a20:	f000 f81e 	bl	8012a60 <_isatty_r>
 8012a24:	b128      	cbz	r0, 8012a32 <__smakebuf_r+0x70>
 8012a26:	89a3      	ldrh	r3, [r4, #12]
 8012a28:	f023 0303 	bic.w	r3, r3, #3
 8012a2c:	f043 0301 	orr.w	r3, r3, #1
 8012a30:	81a3      	strh	r3, [r4, #12]
 8012a32:	89a3      	ldrh	r3, [r4, #12]
 8012a34:	431d      	orrs	r5, r3
 8012a36:	81a5      	strh	r5, [r4, #12]
 8012a38:	e7cf      	b.n	80129da <__smakebuf_r+0x18>
	...

08012a3c <_fstat_r>:
 8012a3c:	b538      	push	{r3, r4, r5, lr}
 8012a3e:	4d07      	ldr	r5, [pc, #28]	; (8012a5c <_fstat_r+0x20>)
 8012a40:	2300      	movs	r3, #0
 8012a42:	4604      	mov	r4, r0
 8012a44:	4608      	mov	r0, r1
 8012a46:	4611      	mov	r1, r2
 8012a48:	602b      	str	r3, [r5, #0]
 8012a4a:	f7f3 faac 	bl	8005fa6 <_fstat>
 8012a4e:	1c43      	adds	r3, r0, #1
 8012a50:	d102      	bne.n	8012a58 <_fstat_r+0x1c>
 8012a52:	682b      	ldr	r3, [r5, #0]
 8012a54:	b103      	cbz	r3, 8012a58 <_fstat_r+0x1c>
 8012a56:	6023      	str	r3, [r4, #0]
 8012a58:	bd38      	pop	{r3, r4, r5, pc}
 8012a5a:	bf00      	nop
 8012a5c:	20000700 	.word	0x20000700

08012a60 <_isatty_r>:
 8012a60:	b538      	push	{r3, r4, r5, lr}
 8012a62:	4d06      	ldr	r5, [pc, #24]	; (8012a7c <_isatty_r+0x1c>)
 8012a64:	2300      	movs	r3, #0
 8012a66:	4604      	mov	r4, r0
 8012a68:	4608      	mov	r0, r1
 8012a6a:	602b      	str	r3, [r5, #0]
 8012a6c:	f7f3 faab 	bl	8005fc6 <_isatty>
 8012a70:	1c43      	adds	r3, r0, #1
 8012a72:	d102      	bne.n	8012a7a <_isatty_r+0x1a>
 8012a74:	682b      	ldr	r3, [r5, #0]
 8012a76:	b103      	cbz	r3, 8012a7a <_isatty_r+0x1a>
 8012a78:	6023      	str	r3, [r4, #0]
 8012a7a:	bd38      	pop	{r3, r4, r5, pc}
 8012a7c:	20000700 	.word	0x20000700

08012a80 <_malloc_usable_size_r>:
 8012a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a84:	1f18      	subs	r0, r3, #4
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	bfbc      	itt	lt
 8012a8a:	580b      	ldrlt	r3, [r1, r0]
 8012a8c:	18c0      	addlt	r0, r0, r3
 8012a8e:	4770      	bx	lr

08012a90 <_init>:
 8012a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a92:	bf00      	nop
 8012a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a96:	bc08      	pop	{r3}
 8012a98:	469e      	mov	lr, r3
 8012a9a:	4770      	bx	lr

08012a9c <_fini>:
 8012a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a9e:	bf00      	nop
 8012aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012aa2:	bc08      	pop	{r3}
 8012aa4:	469e      	mov	lr, r3
 8012aa6:	4770      	bx	lr
