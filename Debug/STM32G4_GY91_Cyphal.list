
STM32G4_GY91_Cyphal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012150  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000152c  08012330  08012330  00022330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801385c  0801385c  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801385c  0801385c  0002385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013864  08013864  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08013864  08013864  00023864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08013870  08013870  00023870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0801387c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200001d4  08013a50  000301d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08013a50  000305b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000356a1  00000000  00000000  00030247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a8b  00000000  00000000  000658e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d68  00000000  00000000  0006c378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016e9  00000000  00000000  0006e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f0cb  00000000  00000000  0006f7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026dd7  00000000  00000000  0009e894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f04d  00000000  00000000  000c566b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009394  00000000  00000000  001d46b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001dda4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012318 	.word	0x08012318

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08012318 	.word	0x08012318

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MPU6050_Init>:

uint8_t bufAG[14] = {0};
uint16_t sAx,sAy,sAz,sGx,sGy,sGz; //axel-gyro components
int16_t xx;

int MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af04      	add	r7, sp, #16
 8001046:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rv;
    uint8_t check = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	73bb      	strb	r3, [r7, #14]
    uint8_t Data = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	737b      	strb	r3, [r7, #13]

    // check device ID WHO_AM_I

    rv = HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 100);
 8001050:	2364      	movs	r3, #100	; 0x64
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2301      	movs	r3, #1
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	f107 030e 	add.w	r3, r7, #14
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	2275      	movs	r2, #117	; 0x75
 8001062:	21d0      	movs	r1, #208	; 0xd0
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f005 f8a3 	bl	80061b0 <HAL_I2C_Mem_Read>
 800106a:	4603      	mov	r3, r0
 800106c:	73fb      	strb	r3, [r7, #15]

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	2b68      	cmp	r3, #104	; 0x68
 8001072:	d13d      	bne.n	80010f0 <MPU6050_Init+0xb0>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	737b      	strb	r3, [r7, #13]
        rv = HAL_I2C_Mem_Write_IT(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1);
 8001078:	2301      	movs	r3, #1
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	f107 030d 	add.w	r3, r7, #13
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	226b      	movs	r2, #107	; 0x6b
 8001086:	21d0      	movs	r1, #208	; 0xd0
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f005 f9ab 	bl	80063e4 <HAL_I2C_Mem_Write_IT>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001092:	2307      	movs	r3, #7
 8001094:	737b      	strb	r3, [r7, #13]
        rv = HAL_I2C_Mem_Write_IT(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1);
 8001096:	2301      	movs	r3, #1
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	f107 030d 	add.w	r3, r7, #13
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	2219      	movs	r2, #25
 80010a4:	21d0      	movs	r1, #208	; 0xd0
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f005 f99c 	bl	80063e4 <HAL_I2C_Mem_Write_IT>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80010b0:	2300      	movs	r3, #0
 80010b2:	737b      	strb	r3, [r7, #13]
        rv = HAL_I2C_Mem_Write_IT(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1);
 80010b4:	2301      	movs	r3, #1
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	f107 030d 	add.w	r3, r7, #13
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	221c      	movs	r2, #28
 80010c2:	21d0      	movs	r1, #208	; 0xd0
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f005 f98d 	bl	80063e4 <HAL_I2C_Mem_Write_IT>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	737b      	strb	r3, [r7, #13]
        rv = HAL_I2C_Mem_Write_IT(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1);
 80010d2:	2301      	movs	r3, #1
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	f107 030d 	add.w	r3, r7, #13
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	221b      	movs	r2, #27
 80010e0:	21d0      	movs	r1, #208	; 0xd0
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f005 f97e 	bl	80063e4 <HAL_I2C_Mem_Write_IT>
 80010e8:	4603      	mov	r3, r0
 80010ea:	73fb      	strb	r3, [r7, #15]
        return 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	e000      	b.n	80010f2 <MPU6050_Init+0xb2>
    }
    return 1;
 80010f0:	2301      	movs	r3, #1
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <MPU6050_isReady>:

HAL_StatusTypeDef MPU6050_isReady(I2C_HandleTypeDef *I2Cx)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	 return HAL_I2C_IsDeviceReady(I2Cx, 0xD0, 2, 5);
 8001102:	2305      	movs	r3, #5
 8001104:	2202      	movs	r2, #2
 8001106:	21d0      	movs	r1, #208	; 0xd0
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f005 f9f5 	bl	80064f8 <HAL_I2C_IsDeviceReady>
 800110e:	4603      	mov	r3, r0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800111c:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 800111e:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <MX_FDCAN1_Init+0x8c>)
 8001120:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 800112a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800112e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 8001138:	2201      	movs	r2, #1
 800113a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 800113e:	2201      	movs	r2, #1
 8001140:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 8001144:	2200      	movs	r2, #0
 8001146:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 800114a:	2204      	movs	r2, #4
 800114c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 8001150:	2201      	movs	r2, #1
 8001152:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 8001156:	221d      	movs	r2, #29
 8001158:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 800115c:	220a      	movs	r2, #10
 800115e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 8001162:	2204      	movs	r2, #4
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 8001168:	2201      	movs	r2, #1
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 800116e:	2202      	movs	r2, #2
 8001170:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 8001174:	2202      	movs	r2, #2
 8001176:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 800117a:	2200      	movs	r2, #0
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 2;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 8001180:	2202      	movs	r2, #2
 8001182:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 8001186:	2200      	movs	r2, #0
 8001188:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_FDCAN1_Init+0x88>)
 800118c:	f003 ff2c 	bl	8004fe8 <HAL_FDCAN_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001196:	f000 fab4 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001f0 	.word	0x200001f0
 80011a4:	40006400 	.word	0x40006400

080011a8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b09e      	sub	sp, #120	; 0x78
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	2254      	movs	r2, #84	; 0x54
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00d fd70 	bl	800ecae <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a20      	ldr	r2, [pc, #128]	; (8001254 <HAL_FDCAN_MspInit+0xac>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d138      	bne.n	800124a <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80011de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4618      	mov	r0, r3
 80011ea:	f007 ff7f 	bl	80090ec <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80011f4:	f000 fa85 	bl	8001702 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_FDCAN_MspInit+0xb0>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fc:	4a16      	ldr	r2, [pc, #88]	; (8001258 <HAL_FDCAN_MspInit+0xb0>)
 80011fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001202:	6593      	str	r3, [r2, #88]	; 0x58
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_FDCAN_MspInit+0xb0>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_FDCAN_MspInit+0xb0>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001214:	4a10      	ldr	r2, [pc, #64]	; (8001258 <HAL_FDCAN_MspInit+0xb0>)
 8001216:	f043 0302 	orr.w	r3, r3, #2
 800121a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_FDCAN_MspInit+0xb0>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001228:	f44f 7340 	mov.w	r3, #768	; 0x300
 800122c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800123a:	2309      	movs	r3, #9
 800123c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <HAL_FDCAN_MspInit+0xb4>)
 8001246:	f004 fb55 	bl	80058f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800124a:	bf00      	nop
 800124c:	3778      	adds	r7, #120	; 0x78
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40006400 	.word	0x40006400
 8001258:	40021000 	.word	0x40021000
 800125c:	48000400 	.word	0x48000400

08001260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <MX_GPIO_Init+0xe8>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a33      	ldr	r2, [pc, #204]	; (8001348 <MX_GPIO_Init+0xe8>)
 800127c:	f043 0320 	orr.w	r3, r3, #32
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <MX_GPIO_Init+0xe8>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <MX_GPIO_Init+0xe8>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a2d      	ldr	r2, [pc, #180]	; (8001348 <MX_GPIO_Init+0xe8>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <MX_GPIO_Init+0xe8>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a27      	ldr	r2, [pc, #156]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a21      	ldr	r2, [pc, #132]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_GPIO_Init+0xe8>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2120      	movs	r1, #32
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f004 fc7f 	bl	8005bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2104      	movs	r1, #4
 80012fe:	4813      	ldr	r0, [pc, #76]	; (800134c <MX_GPIO_Init+0xec>)
 8001300:	f004 fc7a 	bl	8005bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001304:	2320      	movs	r3, #32
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131e:	f004 fae9 	bl	80058f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001322:	2304      	movs	r3, #4
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_GPIO_Init+0xec>)
 800133a:	f004 fadb 	bl	80058f4 <HAL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	48000c00 	.word	0x48000c00

08001350 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_I2C4_Init+0x74>)
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <MX_I2C4_Init+0x78>)
 8001358:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_I2C4_Init+0x74>)
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <MX_I2C4_Init+0x7c>)
 800135e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_I2C4_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_I2C4_Init+0x74>)
 8001368:	2201      	movs	r2, #1
 800136a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_I2C4_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_I2C4_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_I2C4_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_I2C4_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_I2C4_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800138a:	480e      	ldr	r0, [pc, #56]	; (80013c4 <MX_I2C4_Init+0x74>)
 800138c:	f004 fc66 	bl	8005c5c <HAL_I2C_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001396:	f000 f9b4 	bl	8001702 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800139a:	2100      	movs	r1, #0
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <MX_I2C4_Init+0x74>)
 800139e:	f007 f82b 	bl	80083f8 <HAL_I2CEx_ConfigAnalogFilter>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80013a8:	f000 f9ab 	bl	8001702 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80013ac:	2100      	movs	r1, #0
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_I2C4_Init+0x74>)
 80013b0:	f007 f86d 	bl	800848e <HAL_I2CEx_ConfigDigitalFilter>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80013ba:	f000 f9a2 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000254 	.word	0x20000254
 80013c8:	40008400 	.word	0x40008400
 80013cc:	00702991 	.word	0x00702991

080013d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0a0      	sub	sp, #128	; 0x80
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e8:	f107 0318 	add.w	r3, r7, #24
 80013ec:	2254      	movs	r2, #84	; 0x54
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00d fc5c 	bl	800ecae <memset>
  if(i2cHandle->Instance==I2C4)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a35      	ldr	r2, [pc, #212]	; (80014d0 <HAL_I2C_MspInit+0x100>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d162      	bne.n	80014c6 <HAL_I2C_MspInit+0xf6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001404:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001406:	2300      	movs	r3, #0
 8001408:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	4618      	mov	r0, r3
 8001410:	f007 fe6c 	bl	80090ec <HAL_RCCEx_PeriphCLKConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800141a:	f000 f972 	bl	8001702 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <HAL_I2C_MspInit+0x104>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a2c      	ldr	r2, [pc, #176]	; (80014d4 <HAL_I2C_MspInit+0x104>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <HAL_I2C_MspInit+0x104>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <HAL_I2C_MspInit+0x104>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <HAL_I2C_MspInit+0x104>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_I2C_MspInit+0x104>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800144e:	2340      	movs	r3, #64	; 0x40
 8001450:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001452:	2312      	movs	r3, #18
 8001454:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 800145e:	2308      	movs	r3, #8
 8001460:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001462:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001466:	4619      	mov	r1, r3
 8001468:	481b      	ldr	r0, [pc, #108]	; (80014d8 <HAL_I2C_MspInit+0x108>)
 800146a:	f004 fa43 	bl	80058f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001472:	2312      	movs	r3, #18
 8001474:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 800147e:	2303      	movs	r3, #3
 8001480:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001486:	4619      	mov	r1, r3
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <HAL_I2C_MspInit+0x10c>)
 800148a:	f004 fa33 	bl	80058f4 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_I2C_MspInit+0x104>)
 8001490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <HAL_I2C_MspInit+0x104>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	65d3      	str	r3, [r2, #92]	; 0x5c
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_I2C_MspInit+0x104>)
 800149c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2052      	movs	r0, #82	; 0x52
 80014ac:	f003 fc99 	bl	8004de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80014b0:	2052      	movs	r0, #82	; 0x52
 80014b2:	f003 fcb0 	bl	8004e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2053      	movs	r0, #83	; 0x53
 80014bc:	f003 fc91 	bl	8004de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80014c0:	2053      	movs	r0, #83	; 0x53
 80014c2:	f003 fca8 	bl	8004e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3780      	adds	r7, #128	; 0x80
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40008400 	.word	0x40008400
 80014d4:	40021000 	.word	0x40021000
 80014d8:	48000800 	.word	0x48000800
 80014dc:	48000400 	.word	0x48000400

080014e0 <readBytes>:
    //i2c.read(address, data, 1, 0);
    return data[0]; 
}

    void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{     
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	460b      	mov	r3, r1
 80014ee:	71bb      	strb	r3, [r7, #6]
 80014f0:	4613      	mov	r3, r2
 80014f2:	717b      	strb	r3, [r7, #5]
    char data[14];
    char data_write[1];
    data_write[0] = subAddress;
 80014f4:	79bb      	ldrb	r3, [r7, #6]
 80014f6:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&hi2c4, address, data_write, 1, 100);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	b299      	uxth	r1, r3
 80014fc:	f107 0208 	add.w	r2, r7, #8
 8001500:	2364      	movs	r3, #100	; 0x64
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	4813      	ldr	r0, [pc, #76]	; (8001554 <readBytes+0x74>)
 8001508:	f004 fc44 	bl	8005d94 <HAL_I2C_Master_Transmit>
    //i2c.write(address, data_write, 1, 1); // no stop
    HAL_I2C_Master_Receive(&hi2c4, address, data, count, 100);
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	b299      	uxth	r1, r3
 8001510:	797b      	ldrb	r3, [r7, #5]
 8001512:	b29b      	uxth	r3, r3
 8001514:	f107 020c 	add.w	r2, r7, #12
 8001518:	2064      	movs	r0, #100	; 0x64
 800151a:	9000      	str	r0, [sp, #0]
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <readBytes+0x74>)
 800151e:	f004 fd51 	bl	8005fc4 <HAL_I2C_Master_Receive>
    //i2c.read(address, data, count, 0);
    for(int ii = 0; ii < count; ii++) {
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	e00b      	b.n	8001540 <readBytes+0x60>
     dest[ii] = data[ii];
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	4413      	add	r3, r2
 800152e:	f107 010c 	add.w	r1, r7, #12
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	440a      	add	r2, r1
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	701a      	strb	r2, [r3, #0]
    for(int ii = 0; ii < count; ii++) {
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	797b      	ldrb	r3, [r7, #5]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbef      	blt.n	8001528 <readBytes+0x48>
    }
} 
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000254 	.word	0x20000254

08001558 <readAccelData>:
  }
}


void readAccelData(int16_t * destination)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint8_t rawData[6];  // x/y/z accel register data stored here
  readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	2206      	movs	r2, #6
 8001566:	213b      	movs	r1, #59	; 0x3b
 8001568:	20d0      	movs	r0, #208	; 0xd0
 800156a:	f7ff ffb9 	bl	80014e0 <readBytes>
  destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800156e:	7a3b      	ldrb	r3, [r7, #8]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	7a7b      	ldrb	r3, [r7, #9]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b21a      	sxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	801a      	strh	r2, [r3, #0]
  destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
 8001580:	7abb      	ldrb	r3, [r7, #10]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b219      	sxth	r1, r3
 8001586:	7afb      	ldrb	r3, [r7, #11]
 8001588:	b21a      	sxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3302      	adds	r3, #2
 800158e:	430a      	orrs	r2, r1
 8001590:	b212      	sxth	r2, r2
 8001592:	801a      	strh	r2, [r3, #0]
  destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
 8001594:	7b3b      	ldrb	r3, [r7, #12]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b219      	sxth	r1, r3
 800159a:	7b7b      	ldrb	r3, [r7, #13]
 800159c:	b21a      	sxth	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3304      	adds	r3, #4
 80015a2:	430a      	orrs	r2, r1
 80015a4:	b212      	sxth	r2, r2
 80015a6:	801a      	strh	r2, [r3, #0]
}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	; 0x30
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b6:	f003 fac8 	bl	8004b4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ba:	f000 f857 	bl	800166c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015be:	f7ff fe4f 	bl	8001260 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80015c2:	f7ff fda9 	bl	8001118 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 80015c6:	f7ff fec3 	bl	8001350 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 80015ca:	f003 f9e9 	bl	80049a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  cyphal_can_starter(&hfdcan1);
 80015ce:	4822      	ldr	r0, [pc, #136]	; (8001658 <main+0xa8>)
 80015d0:	f001 f924 	bl	800281c <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 80015d4:	4820      	ldr	r0, [pc, #128]	; (8001658 <main+0xa8>)
 80015d6:	f001 f8b3 	bl	8002740 <setup_cyphal>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t msg[10];
  int i = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  //uint16_t addr9250=0xD0; //0x68<<1

  HAL_StatusTypeDef rv;


  uint32_t last_hbeat = HAL_GetTick();
 80015de:	f003 fb19 	bl	8004c14 <HAL_GetTick>
 80015e2:	62f8      	str	r0, [r7, #44]	; 0x2c
  float pos = JOINT_N;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <main+0xac>)
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  float vel = JOINT_N;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <main+0xac>)
 80015ea:	623b      	str	r3, [r7, #32]
  float eff = JOINT_N;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <main+0xac>)
 80015ee:	61fb      	str	r3, [r7, #28]

  float x,y,z,vx,vy,vz = 0;
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]


  MPU6050_Init(&hi2c4);
 80015f6:	481a      	ldr	r0, [pc, #104]	; (8001660 <main+0xb0>)
 80015f8:	f7ff fd22 	bl	8001040 <MPU6050_Init>
  int16_t destination[3] = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	809a      	strh	r2, [r3, #4]

	  //sprintf(msg,"%f \n\0", x);
	  //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));


      uint32_t now = HAL_GetTick();
 8001604:	f003 fb06 	bl	8004c14 <HAL_GetTick>
 8001608:	6178      	str	r0, [r7, #20]
      if ( (now - last_hbeat) >= 100) {
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b63      	cmp	r3, #99	; 0x63
 8001612:	d91d      	bls.n	8001650 <main+0xa0>
    	  if (MPU6050_isReady(&hi2c4) == HAL_OK)
 8001614:	4812      	ldr	r0, [pc, #72]	; (8001660 <main+0xb0>)
 8001616:	f7ff fd70 	bl	80010fa <MPU6050_isReady>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <main+0x78>
    	  {
    		  //MPU6050_read(&x, &y, &z, &vx, &vy, &vz);
    		  readAccelData(&destination);
 8001620:	463b      	mov	r3, r7
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff98 	bl	8001558 <readAccelData>
    	  }

          last_hbeat = now;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
          heartbeat();
 800162c:	f001 f862 	bl	80026f4 <heartbeat>
          sprintf(msg,"%d \n\0", destination[0]);
 8001630:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001634:	461a      	mov	r2, r3
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	490a      	ldr	r1, [pc, #40]	; (8001664 <main+0xb4>)
 800163c:	4618      	mov	r0, r3
 800163e:	f00d fab9 	bl	800ebb4 <siprintf>
          HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	220a      	movs	r2, #10
 8001648:	4619      	mov	r1, r3
 800164a:	4807      	ldr	r0, [pc, #28]	; (8001668 <main+0xb8>)
 800164c:	f007 ffec 	bl	8009628 <HAL_UART_Transmit_IT>
          //send_IMU(&x, &y, &z, &vx, &vy, &vz);
      }
          cyphal_loop();
 8001650:	f001 f8d6 	bl	8002800 <cyphal_loop>
  {
 8001654:	e7d6      	b.n	8001604 <main+0x54>
 8001656:	bf00      	nop
 8001658:	200001f0 	.word	0x200001f0
 800165c:	40a00000 	.word	0x40a00000
 8001660:	20000254 	.word	0x20000254
 8001664:	0801233c 	.word	0x0801233c
 8001668:	20000388 	.word	0x20000388

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b094      	sub	sp, #80	; 0x50
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0318 	add.w	r3, r7, #24
 8001676:	2238      	movs	r2, #56	; 0x38
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f00d fb17 	bl	800ecae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800168e:	2000      	movs	r0, #0
 8001690:	f006 ff4a 	bl	8008528 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001694:	2301      	movs	r3, #1
 8001696:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169e:	2302      	movs	r3, #2
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a2:	2303      	movs	r3, #3
 80016a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016aa:	2328      	movs	r3, #40	; 0x28
 80016ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016b6:	2302      	movs	r3, #2
 80016b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ba:	f107 0318 	add.w	r3, r7, #24
 80016be:	4618      	mov	r0, r3
 80016c0:	f006 ffe6 	bl	8008690 <HAL_RCC_OscConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0x62>
  {
    Error_Handler();
 80016ca:	f000 f81a 	bl	8001702 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ce:	230f      	movs	r3, #15
 80016d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d2:	2303      	movs	r3, #3
 80016d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2104      	movs	r1, #4
 80016ea:	4618      	mov	r0, r3
 80016ec:	f007 fae2 	bl	8008cb4 <HAL_RCC_ClockConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80016f6:	f000 f804 	bl	8001702 <Error_Handler>
  }
}
 80016fa:	bf00      	nop
 80016fc:	3750      	adds	r7, #80	; 0x50
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001706:	b672      	cpsid	i
}
 8001708:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170a:	e7fe      	b.n	800170a <Error_Handler+0x8>

0800170c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	1e5a      	subs	r2, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf0c      	ite	eq
 800175c:	2301      	moveq	r3, #1
 800175e:	2300      	movne	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d019      	beq.n	800179a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	3308      	adds	r3, #8
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	1e5a      	subs	r2, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	330c      	adds	r3, #12
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	4798      	blx	r3
        }
    }
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	2203      	movs	r2, #3
 80017e8:	4798      	blx	r3
    }
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ffd4 	bl	80017ce <_ZNSt14_Function_baseD1Ev>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_ZNSt8functionIFvvEED1Ev>:
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ffc7 	bl	80017ce <_ZNSt14_Function_baseD1Ev>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	4618      	mov	r0, r3
 800185c:	f001 f8b4 	bl	80029c8 <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3310      	adds	r3, #16
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4618      	mov	r0, r3
 8001868:	f001 f8d9 	bl	8002a1e <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	08012dd4 	.word	0x08012dd4

080018a4 <_Z7alloc_fP14CanardInstancej>:
#include "cyphal/definitions.h"
#include "libcanard/canard.h"

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 80018ae:	480d      	ldr	r0, [pc, #52]	; (80018e4 <_Z7alloc_fP14CanardInstancej+0x40>)
 80018b0:	f001 f8e0 	bl	8002a74 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f083 0301 	eor.w	r3, r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 80018c0:	2001      	movs	r0, #1
 80018c2:	f00c f95f 	bl	800db84 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <_Z7alloc_fP14CanardInstancej+0x40>)
 80018c8:	f001 f8e5 	bl	8002a96 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 80018cc:	4603      	mov	r3, r0
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	6814      	ldr	r4, [r2, #0]
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4618      	mov	r0, r3
 80018d8:	47a0      	blx	r4
 80018da:	4603      	mov	r3, r0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd90      	pop	{r4, r7, pc}
 80018e4:	20000460 	.word	0x20000460

080018e8 <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <_Z6free_fP14CanardInstancePv+0x40>)
 80018f4:	f001 f8be 	bl	8002a74 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8001904:	2001      	movs	r0, #1
 8001906:	f00c f93d 	bl	800db84 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 800190a:	4807      	ldr	r0, [pc, #28]	; (8001928 <_Z6free_fP14CanardInstancePv+0x40>)
 800190c:	f001 f8c3 	bl	8002a96 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8001910:	4603      	mov	r3, r0
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	3204      	adds	r2, #4
 8001916:	6814      	ldr	r4, [r2, #0]
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	47a0      	blx	r4
 8001920:	bf00      	nop
}
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bd90      	pop	{r4, r7, pc}
 8001928:	20000460 	.word	0x20000460

0800192c <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;

    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
        WIRE_MTU(wire_mtu),
        CANARD_MTU(canard_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 800193a:	4a0c      	ldr	r2, [pc, #48]	; (800196c <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	330c      	adds	r3, #12
 8001954:	6839      	ldr	r1, [r7, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f00b fe08 	bl	800d56c <canardTxInit>
        utilities(utilities)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	63da      	str	r2, [r3, #60]	; 0x3c
    {};
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	08012db8 	.word	0x08012db8

08001970 <_ZN15CyphalInterfaceC1EhR13UtilityConfig>:

class CyphalInterface {
private:
    const CanardNodeID node_id;
    std::unique_ptr<AbstractCANProvider> provider;
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config) : node_id(node_id), utilities(config) {};
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	460b      	mov	r3, r1
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	72fb      	strb	r3, [r7, #11]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	7afa      	ldrb	r2, [r7, #11]
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3304      	adds	r3, #4
 8001988:	4618      	mov	r0, r3
 800198a:	f001 f8b7 	bl	8002afc <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEv>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2248      	movs	r2, #72	; 0x48
 80019b8:	2140      	movs	r1, #64	; 0x40
 80019ba:	f7ff ffb7 	bl	800192c <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	08012f74 	.word	0x08012f74

080019d8 <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include "../allocator.h"

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ff44 	bl	8001878 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 80019f0:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	08012e58 	.word	0x08012e58

08001a04 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d201      	bcs.n	8001a1a <nunavutChooseMin+0x16>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	e000      	b.n	8001a1c <nunavutChooseMin+0x18>
 8001a1a:	683b      	ldr	r3, [r7, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	6978      	ldr	r0, [r7, #20]
 8001a3e:	f7ff ffe1 	bl	8001a04 <nunavutChooseMin>
 8001a42:	4602      	mov	r2, r0
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 8001a4a:	6939      	ldr	r1, [r7, #16]
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ffd9 	bl	8001a04 <nunavutChooseMin>
 8001a52:	4603      	mov	r3, r0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b092      	sub	sp, #72	; 0x48
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 8001a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d145      	bne.n	8001b00 <nunavutCopyBits+0xa4>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d140      	bne.n	8001b00 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	08db      	lsrs	r3, r3, #3
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8001a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a86:	08db      	lsrs	r3, r3, #3
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	08db      	lsrs	r3, r3, #3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8001a98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a9e:	f00d f8ec 	bl	800ec7a <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8001aae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 808a 	beq.w	8001bcc <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8001ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001abc:	4413      	add	r3, r2
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8001ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac4:	4413      	add	r3, r2
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8001ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001acc:	2201      	movs	r2, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8001ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	7819      	ldrb	r1, [r3, #0]
 8001aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001af2:	400b      	ands	r3, r1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	4313      	orrs	r3, r2
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afc:	701a      	strb	r2, [r3, #0]
        }
    }
 8001afe:	e065      	b.n	8001bcc <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8001b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b0a:	647b      	str	r3, [r7, #68]	; 0x44
        size_t       dst_off  = dst_offset_bits;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t last_bit = src_off + length_bits;
 8001b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 8001b18:	e053      	b.n	8001bc2 <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 8001b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 8001b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 8001b2e:	7dfa      	ldrb	r2, [r7, #23]
 8001b30:	7dbb      	ldrb	r3, [r7, #22]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d901      	bls.n	8001b3a <nunavutCopyBits+0xde>
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
 8001b38:	e000      	b.n	8001b3c <nunavutCopyBits+0xe0>
 8001b3a:	7dbb      	ldrb	r3, [r7, #22]
 8001b3c:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 8001b3e:	7d7b      	ldrb	r3, [r7, #21]
 8001b40:	f1c3 0008 	rsb	r0, r3, #8
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff ff5a 	bl	8001a04 <nunavutChooseMin>
 8001b50:	4603      	mov	r3, r0
 8001b52:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 8001b54:	7d3b      	ldrb	r3, [r7, #20]
 8001b56:	2201      	movs	r2, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	7dbb      	ldrb	r3, [r7, #22]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 8001b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	6a3a      	ldr	r2, [r7, #32]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	fa42 f303 	asr.w	r3, r2, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	7dbb      	ldrb	r3, [r7, #22]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8001b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b86:	08db      	lsrs	r3, r3, #3
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	7cfb      	ldrb	r3, [r7, #19]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4013      	ands	r3, r2
 8001b96:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8001b98:	7cba      	ldrb	r2, [r7, #18]
 8001b9a:	7cfb      	ldrb	r3, [r7, #19]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8001ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba2:	08db      	lsrs	r3, r3, #3
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	7c79      	ldrb	r1, [r7, #17]
 8001baa:	7c3a      	ldrb	r2, [r7, #16]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]
            src_off += size;
 8001bb2:	7d3b      	ldrb	r3, [r7, #20]
 8001bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bb6:	4413      	add	r3, r2
 8001bb8:	647b      	str	r3, [r7, #68]	; 0x44
            dst_off += size;
 8001bba:	7d3b      	ldrb	r3, [r7, #20]
 8001bbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bbe:	4413      	add	r3, r2
 8001bc0:	643b      	str	r3, [r7, #64]	; 0x40
        while (last_bit > src_off)
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d8a7      	bhi.n	8001b1a <nunavutCopyBits+0xbe>
        }

    }
}
 8001bca:	e000      	b.n	8001bce <nunavutCopyBits+0x172>
    }
 8001bcc:	bf00      	nop
}
 8001bce:	bf00      	nop
 8001bd0:	3748      	adds	r7, #72	; 0x48
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b088      	sub	sp, #32
 8001bda:	af02      	add	r7, sp, #8
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	00da      	lsls	r2, r3, #3
 8001be6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	440b      	add	r3, r1
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d202      	bcs.n	8001bf8 <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001bf2:	f06f 0302 	mvn.w	r3, #2
 8001bf6:	e010      	b.n	8001c1a <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8001bf8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bfc:	2140      	movs	r1, #64	; 0x40
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff00 	bl	8001a04 <nunavutChooseMin>
 8001c04:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 8001c06:	2300      	movs	r3, #0
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	f107 0320 	add.w	r3, r7, #32
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7ff ff22 	bl	8001a5c <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b088      	sub	sp, #32
 8001c26:	af02      	add	r7, sp, #8
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	2120      	movs	r1, #32
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fee5 	bl	8001a04 <nunavutChooseMin>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	68b8      	ldr	r0, [r7, #8]
 8001c42:	f7ff fef1 	bl	8001a28 <nunavutSaturateBufferFragmentBitLength>
 8001c46:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8001c4c:	f107 0010 	add.w	r0, r7, #16
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	2100      	movs	r1, #0
 8001c5a:	f7ff feff 	bl	8001a5c <nunavutCopyBits>
    return val;
 8001c5e:	693b      	ldr	r3, [r7, #16]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 8001c74:	2320      	movs	r3, #32
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f7ff ffd1 	bl	8001c22 <nunavutGetU32>
 8001c80:	4603      	mov	r3, r0
 8001c82:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	ee07 3a90 	vmov	s15, r3
}
 8001c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af04      	add	r7, sp, #16
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <uavcan_node_Health_1_0_serialize_+0x1e>
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <uavcan_node_Health_1_0_serialize_+0x1e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001cb2:	f06f 0301 	mvn.w	r3, #1
 8001cb6:	e048      	b.n	8001d4a <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	2b07      	cmp	r3, #7
 8001cc4:	d802      	bhi.n	8001ccc <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001cc6:	f06f 0302 	mvn.w	r3, #2
 8001cca:	e03e      	b.n	8001d4a <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8001cd6:	7efb      	ldrb	r3, [r7, #27]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d901      	bls.n	8001ce0 <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	08db      	lsrs	r3, r3, #3
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	7efa      	ldrb	r2, [r7, #27]
 8001cea:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	3302      	adds	r3, #2
 8001cf0:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d021      	beq.n	8001d40 <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f1c3 0308 	rsb	r3, r3, #8
 8001d0a:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001d0c:	7cfb      	ldrb	r3, [r7, #19]
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	e9cd 2300 	strd	r2, r3, [sp]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	6979      	ldr	r1, [r7, #20]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff58 	bl	8001bd6 <nunavutSetUxx>
 8001d26:	4603      	mov	r3, r0
 8001d28:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8001d2a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	da02      	bge.n	8001d38 <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 8001d32:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001d36:	e008      	b.n	8001d4a <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <uavcan_node_Health_1_0_deserialize_+0x26>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <uavcan_node_Health_1_0_deserialize_+0x26>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <uavcan_node_Health_1_0_deserialize_+0x2c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001d7a:	f06f 0301 	mvn.w	r3, #1
 8001d7e:	e030      	b.n	8001de2 <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <uavcan_node_Health_1_0_deserialize_+0x98>)
 8001d88:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d30a      	bcc.n	8001dba <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	08db      	lsrs	r3, r3, #3
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	4413      	add	r3, r2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e002      	b.n	8001dc0 <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3307      	adds	r3, #7
 8001dca:	f023 0307 	bic.w	r3, r3, #7
 8001dce:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8001dd0:	69b9      	ldr	r1, [r7, #24]
 8001dd2:	6978      	ldr	r0, [r7, #20]
 8001dd4:	f7ff fe16 	bl	8001a04 <nunavutChooseMin>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	08012d44 	.word	0x08012d44

08001df0 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08c      	sub	sp, #48	; 0x30
 8001df4:	af04      	add	r7, sp, #16
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <uavcan_node_Mode_1_0_serialize_+0x1e>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <uavcan_node_Mode_1_0_serialize_+0x1e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001e0e:	f06f 0301 	mvn.w	r3, #1
 8001e12:	e048      	b.n	8001ea6 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	2b07      	cmp	r3, #7
 8001e20:	d802      	bhi.n	8001e28 <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001e22:	f06f 0302 	mvn.w	r3, #2
 8001e26:	e03e      	b.n	8001ea6 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8001e32:	7efb      	ldrb	r3, [r7, #27]
 8001e34:	2b07      	cmp	r3, #7
 8001e36:	d901      	bls.n	8001e3c <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 8001e38:	2307      	movs	r3, #7
 8001e3a:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	08db      	lsrs	r3, r3, #3
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	4413      	add	r3, r2
 8001e44:	7efa      	ldrb	r2, [r7, #27]
 8001e46:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	3303      	adds	r3, #3
 8001e4c:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d021      	beq.n	8001e9c <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f1c3 0308 	rsb	r3, r3, #8
 8001e66:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001e68:	7cfb      	ldrb	r3, [r7, #19]
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9cd 2300 	strd	r2, r3, [sp]
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	6979      	ldr	r1, [r7, #20]
 8001e7c:	68b8      	ldr	r0, [r7, #8]
 8001e7e:	f7ff feaa 	bl	8001bd6 <nunavutSetUxx>
 8001e82:	4603      	mov	r3, r0
 8001e84:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8001e86:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	da02      	bge.n	8001e94 <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 8001e8e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001e92:	e008      	b.n	8001ea6 <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8001e94:	7cfb      	ldrb	r3, [r7, #19]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	4413      	add	r3, r2
 8001e9a:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	08da      	lsrs	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <uavcan_node_Mode_1_0_deserialize_+0x26>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <uavcan_node_Mode_1_0_deserialize_+0x26>
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <uavcan_node_Mode_1_0_deserialize_+0x2c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001ed6:	f06f 0301 	mvn.w	r3, #1
 8001eda:	e030      	b.n	8001f3e <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <uavcan_node_Mode_1_0_deserialize_+0x98>)
 8001ee4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3303      	adds	r3, #3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d30a      	bcc.n	8001f16 <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	08db      	lsrs	r3, r3, #3
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	4413      	add	r3, r2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	e002      	b.n	8001f1c <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3303      	adds	r3, #3
 8001f20:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3307      	adds	r3, #7
 8001f26:	f023 0307 	bic.w	r3, r3, #7
 8001f2a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8001f2c:	69b9      	ldr	r1, [r7, #24]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff fd68 	bl	8001a04 <nunavutChooseMin>
 8001f34:	4603      	mov	r3, r0
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3720      	adds	r7, #32
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	08012d44 	.word	0x08012d44

08001f4c <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08e      	sub	sp, #56	; 0x38
 8001f50:	af04      	add	r7, sp, #16
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001f6a:	f06f 0301 	mvn.w	r3, #1
 8001f6e:	e0cf      	b.n	8002110 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	2b37      	cmp	r3, #55	; 0x37
 8001f7c:	d802      	bhi.n	8001f84 <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001f7e:	f06f 0302 	mvn.w	r3, #2
 8001f82:	e0c5      	b.n	8002110 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	08db      	lsrs	r3, r3, #3
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	4413      	add	r3, r2
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	3320      	adds	r3, #32
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d021      	beq.n	8001fea <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	f1c3 0308 	rsb	r3, r3, #8
 8001fb4:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001fb6:	7ffb      	ldrb	r3, [r7, #31]
 8001fb8:	9302      	str	r3, [sp, #8]
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	e9cd 2300 	strd	r2, r3, [sp]
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc8:	6a39      	ldr	r1, [r7, #32]
 8001fca:	68b8      	ldr	r0, [r7, #8]
 8001fcc:	f7ff fe03 	bl	8001bd6 <nunavutSetUxx>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 8001fd4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	da02      	bge.n	8001fe2 <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 8001fdc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001fe0:	e096      	b.n	8002110 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 8001fe2:	7ffb      	ldrb	r3, [r7, #31]
 8001fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe6:	4413      	add	r3, r2
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8001fea:	2301      	movs	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f107 0214 	add.w	r2, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7ff fe48 	bl	8001c94 <uavcan_node_Health_1_0_serialize_>
 8002004:	4603      	mov	r3, r0
 8002006:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8002008:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da02      	bge.n	8002016 <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 8002010:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002014:	e07c      	b.n	8002110 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201c:	4413      	add	r3, r2
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	2b00      	cmp	r3, #0
 8002028:	d021      	beq.n	800206e <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	b2db      	uxtb	r3, r3
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f1c3 0308 	rsb	r3, r3, #8
 8002038:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 800203a:	7f3b      	ldrb	r3, [r7, #28]
 800203c:	9302      	str	r3, [sp, #8]
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9cd 2300 	strd	r2, r3, [sp]
 800204a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204c:	6a39      	ldr	r1, [r7, #32]
 800204e:	68b8      	ldr	r0, [r7, #8]
 8002050:	f7ff fdc1 	bl	8001bd6 <nunavutSetUxx>
 8002054:	4603      	mov	r3, r0
 8002056:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 8002058:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800205c:	2b00      	cmp	r3, #0
 800205e:	da02      	bge.n	8002066 <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 8002060:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002064:	e054      	b.n	8002110 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 8002066:	7f3b      	ldrb	r3, [r7, #28]
 8002068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206a:	4413      	add	r3, r2
 800206c:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 800206e:	2301      	movs	r3, #1
 8002070:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	4413      	add	r3, r2
 800207e:	f107 0210 	add.w	r2, r7, #16
 8002082:	4619      	mov	r1, r3
 8002084:	f7ff feb4 	bl	8001df0 <uavcan_node_Mode_1_0_serialize_>
 8002088:	4603      	mov	r3, r0
 800208a:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 800208c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002090:	2b00      	cmp	r3, #0
 8002092:	da02      	bge.n	800209a <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 8002094:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002098:	e03a      	b.n	8002110 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a0:	4413      	add	r3, r2
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	08db      	lsrs	r3, r3, #3
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	4413      	add	r3, r2
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	7992      	ldrb	r2, [r2, #6]
 80020b0:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	3308      	adds	r3, #8
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d021      	beq.n	8002106 <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f1c3 0308 	rsb	r3, r3, #8
 80020d0:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 80020d2:	7e7b      	ldrb	r3, [r7, #25]
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	e9cd 2300 	strd	r2, r3, [sp]
 80020e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	68b8      	ldr	r0, [r7, #8]
 80020e8:	f7ff fd75 	bl	8001bd6 <nunavutSetUxx>
 80020ec:	4603      	mov	r3, r0
 80020ee:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 80020f0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	da02      	bge.n	80020fe <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 80020f8:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80020fc:	e008      	b.n	8002110 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 80020fe:	7e7b      	ldrb	r3, [r7, #25]
 8002100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002102:	4413      	add	r3, r2
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	08da      	lsrs	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3728      	adds	r7, #40	; 0x28
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d006      	beq.n	800213e <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800213e:	f06f 0301 	mvn.w	r3, #1
 8002142:	e089      	b.n	8002258 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800214a:	4b45      	ldr	r3, [pc, #276]	; (8002260 <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 800214c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 800215e:	2320      	movs	r3, #32
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002164:	68b8      	ldr	r0, [r7, #8]
 8002166:	f7ff fd5c 	bl	8001c22 <nunavutGetU32>
 800216a:	4602      	mov	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	3320      	adds	r3, #32
 8002174:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3307      	adds	r3, #7
 800217a:	f023 0307 	bic.w	r3, r3, #7
 800217e:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	08db      	lsrs	r3, r3, #3
 8002184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fc3c 	bl	8001a04 <nunavutChooseMin>
 800218c:	4602      	mov	r2, r0
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	4413      	add	r3, r2
 80021a0:	f107 0214 	add.w	r2, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7ff fdd5 	bl	8001d54 <uavcan_node_Health_1_0_deserialize_>
 80021aa:	4603      	mov	r3, r0
 80021ac:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 80021ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	da02      	bge.n	80021bc <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 80021b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80021ba:	e04d      	b.n	8002258 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	4413      	add	r3, r2
 80021c4:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3307      	adds	r3, #7
 80021ca:	f023 0307 	bic.w	r3, r3, #7
 80021ce:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	08db      	lsrs	r3, r3, #3
 80021d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fc14 	bl	8001a04 <nunavutChooseMin>
 80021dc:	4602      	mov	r2, r0
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	4413      	add	r3, r2
 80021f0:	f107 0210 	add.w	r2, r7, #16
 80021f4:	4619      	mov	r1, r3
 80021f6:	f7ff fe5b 	bl	8001eb0 <uavcan_node_Mode_1_0_deserialize_>
 80021fa:	4603      	mov	r3, r0
 80021fc:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 80021fe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002202:	2b00      	cmp	r3, #0
 8002204:	da02      	bge.n	800220c <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8002206:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800220a:	e025      	b.n	8002258 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	4413      	add	r3, r2
 8002214:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3308      	adds	r3, #8
 800221a:	6a3a      	ldr	r2, [r7, #32]
 800221c:	429a      	cmp	r2, r3
 800221e:	d307      	bcc.n	8002230 <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	08db      	lsrs	r3, r3, #3
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	4413      	add	r3, r2
 8002228:	781a      	ldrb	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	719a      	strb	r2, [r3, #6]
 800222e:	e002      	b.n	8002236 <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3308      	adds	r3, #8
 800223a:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	3307      	adds	r3, #7
 8002240:	f023 0307 	bic.w	r3, r3, #7
 8002244:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002246:	6a39      	ldr	r1, [r7, #32]
 8002248:	69f8      	ldr	r0, [r7, #28]
 800224a:	f7ff fbdb 	bl	8001a04 <nunavutChooseMin>
 800224e:	4603      	mov	r3, r0
 8002250:	08da      	lsrs	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3728      	adds	r7, #40	; 0x28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	08012d44 	.word	0x08012d44

08002264 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800228a:	f06f 0301 	mvn.w	r3, #1
 800228e:	e027      	b.n	80022e0 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 8002298:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	69f9      	ldr	r1, [r7, #28]
 80022ae:	68b8      	ldr	r0, [r7, #8]
 80022b0:	f7ff fcda 	bl	8001c68 <nunavutGetF32>
 80022b4:	eef0 7a40 	vmov.f32	s15, s0
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3320      	adds	r3, #32
 80022c2:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3307      	adds	r3, #7
 80022c8:	f023 0307 	bic.w	r3, r3, #7
 80022cc:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80022ce:	69b9      	ldr	r1, [r7, #24]
 80022d0:	6978      	ldr	r0, [r7, #20]
 80022d2:	f7ff fb97 	bl	8001a04 <nunavutChooseMin>
 80022d6:	4603      	mov	r3, r0
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3720      	adds	r7, #32
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	08012d44 	.word	0x08012d44

080022ec <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002312:	f06f 0301 	mvn.w	r3, #1
 8002316:	e027      	b.n	8002368 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 8002320:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	69f9      	ldr	r1, [r7, #28]
 8002336:	68b8      	ldr	r0, [r7, #8]
 8002338:	f7ff fc96 	bl	8001c68 <nunavutGetF32>
 800233c:	eef0 7a40 	vmov.f32	s15, s0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3320      	adds	r3, #32
 800234a:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3307      	adds	r3, #7
 8002350:	f023 0307 	bic.w	r3, r3, #7
 8002354:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	6978      	ldr	r0, [r7, #20]
 800235a:	f7ff fb53 	bl	8001a04 <nunavutChooseMin>
 800235e:	4603      	mov	r3, r0
 8002360:	08da      	lsrs	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3720      	adds	r7, #32
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	08012d44 	.word	0x08012d44

08002374 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800239a:	f06f 0301 	mvn.w	r3, #1
 800239e:	e027      	b.n	80023f0 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 80023a8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	69f9      	ldr	r1, [r7, #28]
 80023be:	68b8      	ldr	r0, [r7, #8]
 80023c0:	f7ff fc52 	bl	8001c68 <nunavutGetF32>
 80023c4:	eef0 7a40 	vmov.f32	s15, s0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3320      	adds	r3, #32
 80023d2:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3307      	adds	r3, #7
 80023d8:	f023 0307 	bic.w	r3, r3, #7
 80023dc:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80023de:	69b9      	ldr	r1, [r7, #24]
 80023e0:	6978      	ldr	r0, [r7, #20]
 80023e2:	f7ff fb0f 	bl	8001a04 <nunavutChooseMin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	08012d44 	.word	0x08012d44

080023fc <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08c      	sub	sp, #48	; 0x30
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d009      	beq.n	8002422 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002422:	f06f 0301 	mvn.w	r3, #1
 8002426:	e090      	b.n	800254a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800242e:	4b49      	ldr	r3, [pc, #292]	; (8002554 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 8002430:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t offset_bits = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	08db      	lsrs	r3, r3, #3
 8002446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fadb 	bl	8001a04 <nunavutChooseMin>
 800244e:	4602      	mov	r2, r0
 8002450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8002456:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	4413      	add	r3, r2
 8002460:	f107 021c 	add.w	r2, r7, #28
 8002464:	4619      	mov	r1, r3
 8002466:	f7ff fefd 	bl	8002264 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 800246a:	4603      	mov	r3, r0
 800246c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (_err6_ < 0)
 8002470:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002474:	2b00      	cmp	r3, #0
 8002476:	da02      	bge.n	800247e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 8002478:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800247c:	e065      	b.n	800254a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002484:	4413      	add	r3, r2
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	3307      	adds	r3, #7
 800248c:	f023 0307 	bic.w	r3, r3, #7
 8002490:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	08db      	lsrs	r3, r3, #3
 8002496:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fab3 	bl	8001a04 <nunavutChooseMin>
 800249e:	4602      	mov	r2, r0
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	4413      	add	r3, r2
 80024b2:	f107 0218 	add.w	r2, r7, #24
 80024b6:	4619      	mov	r1, r3
 80024b8:	f7ff ff5c 	bl	8002374 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 80024bc:	4603      	mov	r3, r0
 80024be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err7_ < 0)
 80024c2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	da02      	bge.n	80024d0 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 80024ca:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80024ce:	e03c      	b.n	800254a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d6:	4413      	add	r3, r2
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3307      	adds	r3, #7
 80024de:	f023 0307 	bic.w	r3, r3, #7
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	08db      	lsrs	r3, r3, #3
 80024e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fa8a 	bl	8001a04 <nunavutChooseMin>
 80024f0:	4602      	mov	r2, r0
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	4413      	add	r3, r2
 8002506:	f107 0214 	add.w	r2, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	f7ff feee 	bl	80022ec <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 8002510:	4603      	mov	r3, r0
 8002512:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err8_ < 0)
 8002516:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800251a:	2b00      	cmp	r3, #0
 800251c:	da02      	bge.n	8002524 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 800251e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8002522:	e012      	b.n	800254a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	4413      	add	r3, r2
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	3307      	adds	r3, #7
 8002532:	f023 0307 	bic.w	r3, r3, #7
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800253a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800253c:	f7ff fa62 	bl	8001a04 <nunavutChooseMin>
 8002540:	4603      	mov	r3, r0
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3730      	adds	r7, #48	; 0x30
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	08012d44 	.word	0x08012d44

08002558 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fafb 	bl	8002b60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
      { }
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_Z13error_handlerv>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
 8002594:	f7ff f8b5 	bl	8001702 <Error_Handler>
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}

0800259c <_Z9micros_64v>:
// Тут не нужен точный таймер, поэтому так
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 800259c:	b5b0      	push	{r4, r5, r7, lr}
 800259e:	af00      	add	r7, sp, #0
 80025a0:	f002 fb38 	bl	8004c14 <HAL_GetTick>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	2200      	movs	r2, #0
 80025b0:	461c      	mov	r4, r3
 80025b2:	4615      	mov	r5, r2
 80025b4:	4622      	mov	r2, r4
 80025b6:	462b      	mov	r3, r5
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	bdb0      	pop	{r4, r5, r7, pc}

080025be <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	1d1a      	adds	r2, r3, #4
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	3304      	adds	r3, #4
 80025d8:	4619      	mov	r1, r3
 80025da:	4610      	mov	r0, r2
 80025dc:	f000 fb32 	bl	8002c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ffdf 	bl	80025be <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff9f 	bl	8002558 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 800262e:	687c      	ldr	r4, [r7, #4]
 8002630:	f107 0308 	add.w	r3, r7, #8
 8002634:	6839      	ldr	r1, [r7, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ffd7 	bl	80025ea <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 800263c:	f107 0308 	add.w	r3, r7, #8
 8002640:	f641 5255 	movw	r2, #7509	; 0x1d55
 8002644:	4619      	mov	r1, r3
 8002646:	4620      	mov	r0, r4
 8002648:	f000 fb13 	bl	8002c72 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 800264c:	f107 0308 	add.w	r3, r7, #8
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ffda 	bl	800260a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	bd90      	pop	{r4, r7, pc}
 8002666:	bf00      	nop
 8002668:	08012d8c 	.word	0x08012d8c

0800266c <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002678:	2120      	movs	r1, #32
 800267a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267e:	f003 fad3 	bl	8005c28 <HAL_GPIO_TogglePin>
    }
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

HBeatReader* h_reader;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 8002696:	687c      	ldr	r4, [r7, #4]
 8002698:	f107 0308 	add.w	r3, r7, #8
 800269c:	6839      	ldr	r1, [r7, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ffa3 	bl	80025ea <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	f240 4265 	movw	r2, #1125	; 0x465
 80026ac:	4619      	mov	r1, r3
 80026ae:	4620      	mov	r0, r4
 80026b0:	f000 fafd 	bl	8002cae <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 80026b4:	f107 0308 	add.w	r3, r7, #8
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ffa6 	bl	800260a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80026be:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd90      	pop	{r4, r7, pc}
 80026ce:	bf00      	nop
 80026d0:	08012d6c 	.word	0x08012d6c

080026d4 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80026e0:	2104      	movs	r1, #4
 80026e2:	4803      	ldr	r0, [pc, #12]	; (80026f0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x1c>)
 80026e4:	f003 faa0 	bl	8005c28 <HAL_GPIO_TogglePin>
    }
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	48000c00 	.word	0x48000c00

080026f4 <heartbeat>:
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}

void heartbeat() {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af02      	add	r7, sp, #8
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 80026fa:	463b      	mov	r3, r7
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <heartbeat+0x3c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	603b      	str	r3, [r7, #0]
    interface->send_cyphal_default_msg<HBeat>(
 8002708:	480a      	ldr	r0, [pc, #40]	; (8002734 <heartbeat+0x40>)
 800270a:	f000 faee 	bl	8002cea <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800270e:	4639      	mov	r1, r7
 8002710:	4b09      	ldr	r3, [pc, #36]	; (8002738 <heartbeat+0x44>)
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	f641 5355 	movw	r3, #7509	; 0x1d55
 8002718:	4a08      	ldr	r2, [pc, #32]	; (800273c <heartbeat+0x48>)
 800271a:	f000 faf2 	bl	8002d02 <_ZNK15CyphalInterface23send_cyphal_default_msgI5HBeatEEvPNT_4TypeEPhtS5_>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <heartbeat+0x3c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	4a02      	ldr	r2, [pc, #8]	; (8002730 <heartbeat+0x3c>)
 8002726:	6013      	str	r3, [r2, #0]

}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000338 	.word	0x20000338
 8002734:	20000300 	.word	0x20000300
 8002738:	20000337 	.word	0x20000337
 800273c:	20000330 	.word	0x20000330

08002740 <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 8002740:	b5b0      	push	{r4, r5, r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af02      	add	r7, sp, #8
 8002746:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 8002748:	4b28      	ldr	r3, [pc, #160]	; (80027ec <setup_cyphal+0xac>)
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	2105      	movs	r1, #5
 8002754:	4826      	ldr	r0, [pc, #152]	; (80027f0 <setup_cyphal+0xb0>)
 8002756:	f000 faee 	bl	8002d36 <_ZN15CyphalInterface6createI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 800275a:	4602      	mov	r2, r0
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fb28 	bl	8002db8 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 8002768:	f107 0308 	add.w	r3, r7, #8
 800276c:	4619      	mov	r1, r3
 800276e:	4821      	ldr	r0, [pc, #132]	; (80027f4 <setup_cyphal+0xb4>)
 8002770:	f000 fb31 	bl	8002dd6 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 8002774:	f107 0308 	add.w	r3, r7, #8
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff46 	bl	800260a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 800277e:	f107 0310 	add.w	r3, r7, #16
 8002782:	491c      	ldr	r1, [pc, #112]	; (80027f4 <setup_cyphal+0xb4>)
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff30 	bl	80025ea <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 800278a:	f107 0510 	add.w	r5, r7, #16
 800278e:	f44f 700e 	mov.w	r0, #568	; 0x238
 8002792:	f00b f9b2 	bl	800dafa <_Znwj>
 8002796:	4603      	mov	r3, r0
 8002798:	461c      	mov	r4, r3
 800279a:	4629      	mov	r1, r5
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff ff41 	bl	8002624 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <setup_cyphal+0xb8>)
 80027a4:	601c      	str	r4, [r3, #0]
 80027a6:	f107 0310 	add.w	r3, r7, #16
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff2d 	bl	800260a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 80027b0:	f107 0318 	add.w	r3, r7, #24
 80027b4:	490f      	ldr	r1, [pc, #60]	; (80027f4 <setup_cyphal+0xb4>)
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff17 	bl	80025ea <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80027bc:	f107 0518 	add.w	r5, r7, #24
 80027c0:	f44f 700e 	mov.w	r0, #568	; 0x238
 80027c4:	f00b f999 	bl	800dafa <_Znwj>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461c      	mov	r4, r3
 80027cc:	4629      	mov	r1, r5
 80027ce:	4620      	mov	r0, r4
 80027d0:	f7ff ff5c 	bl	800268c <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <setup_cyphal+0xbc>)
 80027d6:	601c      	str	r4, [r3, #0]
 80027d8:	f107 0318 	add.w	r3, r7, #24
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff14 	bl	800260a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 80027e2:	bf00      	nop
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bdb0      	pop	{r4, r5, r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000308 	.word	0x20000308
 80027f0:	200002a8 	.word	0x200002a8
 80027f4:	20000300 	.word	0x20000300
 80027f8:	20000328 	.word	0x20000328
 80027fc:	2000032c 	.word	0x2000032c

08002800 <cyphal_loop>:

void cyphal_loop() {
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
    interface->loop();
 8002804:	4804      	ldr	r0, [pc, #16]	; (8002818 <cyphal_loop+0x18>)
 8002806:	f000 fa70 	bl	8002cea <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800280a:	4603      	mov	r3, r0
 800280c:	4618      	mov	r0, r3
 800280e:	f008 fbd9 	bl	800afc4 <_ZN15CyphalInterface4loopEv>
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000300 	.word	0x20000300

0800281c <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08c      	sub	sp, #48	; 0x30
 8002820:	af02      	add	r7, sp, #8
 8002822:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 8002824:	f107 0320 	add.w	r3, r7, #32
 8002828:	2105      	movs	r1, #5
 800282a:	4618      	mov	r0, r3
 800282c:	f00b f916 	bl	800da5c <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(1125);//JS_SUB_PORT_ID
 8002830:	f107 0318 	add.w	r3, r7, #24
 8002834:	f240 4165 	movw	r1, #1125	; 0x465
 8002838:	4618      	mov	r0, r3
 800283a:	f00b f8ef 	bl	800da1c <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 800283e:	f107 0310 	add.w	r3, r7, #16
 8002842:	f641 5155 	movw	r1, #7509	; 0x1d55
 8002846:	4618      	mov	r0, r3
 8002848:	f00b f8e8 	bl	800da1c <canardMakeFilterForSubject>
	CanardFilter cyphal_filter = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 800284c:	f107 0308 	add.w	r3, r7, #8
 8002850:	f107 0218 	add.w	r2, r7, #24
 8002854:	f107 0120 	add.w	r1, r7, #32
 8002858:	4618      	mov	r0, r3
 800285a:	f00b f921 	bl	800daa0 <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800285e:	4b45      	ldr	r3, [pc, #276]	; (8002974 <cyphal_can_starter+0x158>)
 8002860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002864:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 8002866:	4b43      	ldr	r3, [pc, #268]	; (8002974 <cyphal_can_starter+0x158>)
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800286c:	4b41      	ldr	r3, [pc, #260]	; (8002974 <cyphal_can_starter+0x158>)
 800286e:	2202      	movs	r2, #2
 8002870:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002872:	4b40      	ldr	r3, [pc, #256]	; (8002974 <cyphal_can_starter+0x158>)
 8002874:	2201      	movs	r2, #1
 8002876:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	4a3e      	ldr	r2, [pc, #248]	; (8002974 <cyphal_can_starter+0x158>)
 800287c:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	4a3c      	ldr	r2, [pc, #240]	; (8002974 <cyphal_can_starter+0x158>)
 8002882:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8002884:	4b3c      	ldr	r3, [pc, #240]	; (8002978 <cyphal_can_starter+0x15c>)
 8002886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800288a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 800288c:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <cyphal_can_starter+0x15c>)
 800288e:	2200      	movs	r2, #0
 8002890:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002892:	4b39      	ldr	r3, [pc, #228]	; (8002978 <cyphal_can_starter+0x15c>)
 8002894:	2202      	movs	r2, #2
 8002896:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002898:	4b37      	ldr	r3, [pc, #220]	; (8002978 <cyphal_can_starter+0x15c>)
 800289a:	2201      	movs	r2, #1
 800289c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4a35      	ldr	r2, [pc, #212]	; (8002978 <cyphal_can_starter+0x15c>)
 80028a2:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4a34      	ldr	r2, [pc, #208]	; (8002978 <cyphal_can_starter+0x15c>)
 80028a8:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80028aa:	4b34      	ldr	r3, [pc, #208]	; (800297c <cyphal_can_starter+0x160>)
 80028ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028b0:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 1;
 80028b2:	4b32      	ldr	r3, [pc, #200]	; (800297c <cyphal_can_starter+0x160>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80028b8:	4b30      	ldr	r3, [pc, #192]	; (800297c <cyphal_can_starter+0x160>)
 80028ba:	2202      	movs	r2, #2
 80028bc:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80028be:	4b2f      	ldr	r3, [pc, #188]	; (800297c <cyphal_can_starter+0x160>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4a2d      	ldr	r2, [pc, #180]	; (800297c <cyphal_can_starter+0x160>)
 80028c8:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	4a2b      	ldr	r2, [pc, #172]	; (800297c <cyphal_can_starter+0x160>)
 80028ce:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80028d0:	2300      	movs	r3, #0
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2300      	movs	r3, #0
 80028d6:	2202      	movs	r2, #2
 80028d8:	2102      	movs	r1, #2
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f002 fd38 	bl	8005350 <HAL_FDCAN_ConfigGlobalFilter>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bf14      	ite	ne
 80028e6:	2301      	movne	r3, #1
 80028e8:	2300      	moveq	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 80028f0:	f7fe ff07 	bl	8001702 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 80028f4:	491f      	ldr	r1, [pc, #124]	; (8002974 <cyphal_can_starter+0x158>)
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f002 fcd0 	bl	800529c <HAL_FDCAN_ConfigFilter>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <cyphal_can_starter+0xf4>
	  Error_Handler();
 800290c:	f7fe fef9 	bl	8001702 <Error_Handler>
	}
//	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
//	  Error_Handler();
//	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 8002910:	491a      	ldr	r1, [pc, #104]	; (800297c <cyphal_can_starter+0x160>)
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f002 fcc2 	bl	800529c <HAL_FDCAN_ConfigFilter>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf14      	ite	ne
 800291e:	2301      	movne	r3, #1
 8002920:	2300      	moveq	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <cyphal_can_starter+0x110>
	  Error_Handler();
 8002928:	f7fe feeb 	bl	8001702 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 800292c:	2200      	movs	r2, #0
 800292e:	2105      	movs	r1, #5
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f002 fd3e 	bl	80053b2 <HAL_FDCAN_ConfigTxDelayCompensation>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <cyphal_can_starter+0x12e>
	  Error_Handler();
 8002946:	f7fe fedc 	bl	8001702 <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f002 fd53 	bl	80053f6 <HAL_FDCAN_EnableTxDelayCompensation>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <cyphal_can_starter+0x148>
	  Error_Handler();
 8002960:	f7fe fecf 	bl	8001702 <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f002 fd67 	bl	8005438 <HAL_FDCAN_Start>
}
 800296a:	bf00      	nop
 800296c:	3728      	adds	r7, #40	; 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000036c 	.word	0x2000036c
 8002978:	2000033c 	.word	0x2000033c
 800297c:	20000354 	.word	0x20000354

08002980 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
      { delete this; }
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3304      	adds	r3, #4
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	4798      	blx	r3
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	461a      	mov	r2, r3
 80029ae:	2300      	movs	r3, #0
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	6053      	str	r3, [r2, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	461a      	mov	r2, r3
 80029d6:	2300      	movs	r3, #0
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	6053      	str	r3, [r2, #4]
 80029dc:	6093      	str	r3, [r2, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ffde 	bl	80029a2 <_ZNSt14_Function_baseC1Ev>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 80029ec:	6838      	ldr	r0, [r7, #0]
 80029ee:	f000 fa25 	bl	8002e3c <_ZNKSt8functionIFyvEEcvbEv>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00d      	beq.n	8002a14 <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	6839      	ldr	r1, [r7, #0]
 8002a00:	2202      	movs	r2, #2
 8002a02:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	609a      	str	r2, [r3, #8]
	  }
      }
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	6053      	str	r3, [r2, #4]
 8002a32:	6093      	str	r3, [r2, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff ffb3 	bl	80029a2 <_ZNSt14_Function_baseC1Ev>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8002a42:	6838      	ldr	r0, [r7, #0]
 8002a44:	f000 fa0a 	bl	8002e5c <_ZNKSt8functionIFvvEEcvbEv>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	6839      	ldr	r1, [r7, #0]
 8002a56:	2202      	movs	r2, #2
 8002a58:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	609a      	str	r2, [r3, #8]
      }
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      explicit operator bool() const noexcept
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f9fd 	bl	8002e7c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
	return get();
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f9ec 	bl	8002e7c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8002aa4:	4603      	mov	r3, r0
      }
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 f9ec 	bl	8002e96 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ffeb 	bl	8002aae <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ffeb 	bl	8002ac8 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1Ev>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
	: _M_t()
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ffe8 	bl	8002ae2 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f9c5 	bl	8002eb6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8002b2c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00c      	beq.n	8002b50 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f9ca 	bl	8002ed0 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f9d3 	bl	8002eea <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8002b44:	4603      	mov	r3, r0
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f000 f9d8 	bl	8002f00 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
      }
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd90      	pop	{r4, r7, pc}

08002b60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe fde4 	bl	8001742 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	461a      	mov	r2, r3
 8002b92:	2300      	movs	r3, #0
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	6053      	str	r3, [r2, #4]
 8002b98:	6093      	str	r3, [r2, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff00 	bl	80029a2 <_ZNSt14_Function_baseC1Ev>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8002ba8:	6838      	ldr	r0, [r7, #0]
 8002baa:	f000 f9b9 	bl	8002f20 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00e      	beq.n	8002bd2 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8002bb4:	687c      	ldr	r4, [r7, #4]
 8002bb6:	6838      	ldr	r0, [r7, #0]
 8002bb8:	f000 f9c2 	bl	8002f40 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f000 f9c8 	bl	8002f56 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 8002bca:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 8002bd0:	609a      	str	r2, [r3, #8]
	    }
	}
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd90      	pop	{r4, r7, pc}
 8002bdc:	08002f7b 	.word	0x08002f7b
 8002be0:	08002f9f 	.word	0x08002f9f

08002be4 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	6053      	str	r3, [r2, #4]
 8002bf8:	6093      	str	r3, [r2, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fed0 	bl	80029a2 <_ZNSt14_Function_baseC1Ev>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8002c08:	6838      	ldr	r0, [r7, #0]
 8002c0a:	f000 f9e7 	bl	8002fdc <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00e      	beq.n	8002c32 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8002c14:	687c      	ldr	r4, [r7, #4]
 8002c16:	6838      	ldr	r0, [r7, #0]
 8002c18:	f000 f9f0 	bl	8002ffc <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4620      	mov	r0, r4
 8002c22:	f000 f9f6 	bl	8003012 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 8002c2a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 8002c30:	609a      	str	r2, [r3, #8]
	}
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd90      	pop	{r4, r7, pc}
 8002c3c:	08003037 	.word	0x08003037
 8002c40:	08003055 	.word	0x08003055

08002c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d004      	beq.n	8002c68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fd5e 	bl	8001724 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b086      	sub	sp, #24
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8002c80:	f107 0310 	add.w	r3, r7, #16
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fcaf 	bl	80025ea <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8002c8c:	88fa      	ldrh	r2, [r7, #6]
 8002c8e:	f107 0110 	add.w	r1, r7, #16
 8002c92:	2300      	movs	r3, #0
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fa0d 	bl	80030b4 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8002c9a:	f107 0310 	add.w	r3, r7, #16
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fcb3 	bl	800260a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8002cbc:	f107 0310 	add.w	r3, r7, #16
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fc91 	bl	80025ea <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	f107 0110 	add.w	r1, r7, #16
 8002cce:	2300      	movs	r3, #0
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fa1d 	bl	8003110 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8002cd6:	f107 0310 	add.w	r3, r7, #16
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fc95 	bl	800260a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
	return _M_get();
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fa3a 	bl	800316c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8002cf8:	4603      	mov	r3, r0
      }
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <_ZNK15CyphalInterface23send_cyphal_default_msgI5HBeatEEvPNT_4TypeEPhtS5_>:
    );
    (*transfer_id)++;
}

template <typename TypeAlias>
inline void CyphalInterface::send_cyphal_default_msg(
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b088      	sub	sp, #32
 8002d06:	af04      	add	r7, sp, #16
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	807b      	strh	r3, [r7, #2]
    typename TypeAlias::Type *obj,
    uint8_t buffer[],
    CanardPortID port,
    CanardTransferID *transfer_id
) const {
    send_cyphal<TypeAlias>(
 8002d10:	887a      	ldrh	r2, [r7, #2]
 8002d12:	23ff      	movs	r3, #255	; 0xff
 8002d14:	9303      	str	r3, [sp, #12]
 8002d16:	2300      	movs	r3, #0
 8002d18:	9302      	str	r3, [sp, #8]
 8002d1a:	2304      	movs	r3, #4
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	4613      	mov	r3, r2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fa2b 	bl	8003184 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>
        transfer_id,
        CanardPriorityNominal,
        CanardTransferKindMessage,
        CANARD_NODE_ID_UNSET
    );
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <_ZN15CyphalInterface6createI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    UtilityConfig& utilities;
public:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create(
 8002d36:	b590      	push	{r4, r7, lr}
 8002d38:	b08b      	sub	sp, #44	; 0x2c
 8002d3a:	af02      	add	r7, sp, #8
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	460b      	mov	r3, r1
 8002d44:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 8002d46:	f107 030c 	add.w	r3, r7, #12
 8002d4a:	61fb      	str	r3, [r7, #28]
        auto provider  = std::unique_ptr<Provider>(Provider::template create<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config));
 8002d4c:	7afa      	ldrb	r2, [r7, #11]
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	69f8      	ldr	r0, [r7, #28]
 8002d58:	f000 fa62 	bl	8003220 <_ZN5G4CAN6createI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f107 0310 	add.w	r3, r7, #16
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 faa8 	bl	80032ba <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EEC1IS2_vEEPS0_>
    
        std::byte* interface_ptr = *inout_buffer;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	61bb      	str	r3, [r7, #24]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config);
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	4619      	mov	r1, r3
 8002d74:	200c      	movs	r0, #12
 8002d76:	f7fe fcc9 	bl	800170c <_ZnwjPv>
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	7afb      	ldrb	r3, [r7, #11]
 8002d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d80:	4619      	mov	r1, r3
 8002d82:	4620      	mov	r0, r4
 8002d84:	f7fe fdf4 	bl	8001970 <_ZN15CyphalInterfaceC1EhR13UtilityConfig>
 8002d88:	617c      	str	r4, [r7, #20]

        interface->provider = std::move(provider);
 8002d8a:	f107 0310 	add.w	r3, r7, #16
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fac4 	bl	800331c <_ZSt4moveIRSt10unique_ptrI5G4CANSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8002d94:	4602      	mov	r2, r0
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fac8 	bl	8003332 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEaSI5G4CANS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
        return interface;
 8002da2:	697c      	ldr	r4, [r7, #20]
    }
 8002da4:	f107 0310 	add.w	r3, r7, #16
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fa95 	bl	80032d8 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev>
        return interface;
 8002dae:	4623      	mov	r3, r4
    }
 8002db0:	4618      	mov	r0, r3
 8002db2:	3724      	adds	r7, #36	; 0x24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd90      	pop	{r4, r7, pc}

08002db8 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6839      	ldr	r1, [r7, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fad6 	bl	8003378 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 8002dd6:	b590      	push	{r4, r7, lr}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8002de0:	687c      	ldr	r4, [r7, #4]
 8002de2:	6838      	ldr	r0, [r7, #0]
 8002de4:	f000 fae0 	bl	80033a8 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4619      	mov	r1, r3
 8002dec:	4620      	mov	r0, r4
 8002dee:	f000 fae6 	bl	80033be <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8002df2:	687b      	ldr	r3, [r7, #4]
      }
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd90      	pop	{r4, r7, pc}

08002dfc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
      { }
 8002e04:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	08012dec 	.word	0x08012dec

08002e1c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
      { }
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ffe9 	bl	8002dfc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002e2a:	210c      	movs	r1, #12
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f00a fe62 	bl	800daf6 <_ZdlPvj>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fcd4 	bl	80017f4 <_ZNKSt14_Function_base8_M_emptyEv>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fcc4 	bl	80017f4 <_ZNKSt14_Function_base8_M_emptyEv>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f083 0301 	eor.w	r3, r3, #1
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fab8 	bl	80033fc <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 faba 	bl	8003418 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fac2 	bl	8003430 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fac3 	bl	800344c <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fac3 	bl	8003466 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x18>
 8002f10:	2140      	movs	r1, #64	; 0x40
 8002f12:	4618      	mov	r0, r3
 8002f14:	f00a fdef 	bl	800daf6 <_ZdlPvj>
      }
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002f56:	b590      	push	{r4, r7, lr}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002f60:	6838      	ldr	r0, [r7, #0]
 8002f62:	f7ff ffed 	bl	8002f40 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4622      	mov	r2, r4
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fa87 	bl	8003480 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd90      	pop	{r4, r7, pc}

08002f7a <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fa94 	bl	80034b0 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 faa0 	bl	80034d0 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
      }
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002f9e:	b590      	push	{r4, r7, lr}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d109      	bne.n	8002fc6 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002fb2:	68b8      	ldr	r0, [r7, #8]
 8002fb4:	f000 fa7c 	bl	80034b0 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8002fb8:	4604      	mov	r4, r0
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fa9b 	bl	80034f6 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	601c      	str	r4, [r3, #0]
	    break;
 8002fc4:	e005      	b.n	8002fd2 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 fa9f 	bl	8003510 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8002fd2:	2300      	movs	r3, #0
      }
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd90      	pop	{r4, r7, pc}

08002fdc <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bf14      	ite	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	2300      	moveq	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003012:	b590      	push	{r4, r7, lr}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800301c:	6838      	ldr	r0, [r7, #0]
 800301e:	f7ff ffed 	bl	8002ffc <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003022:	4603      	mov	r3, r0
 8003024:	4622      	mov	r2, r4
 8003026:	4619      	mov	r1, r3
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 faab 	bl	8003584 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bd90      	pop	{r4, r7, pc}

08003036 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fab8 	bl	80035b4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8003044:	4603      	mov	r3, r0
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fac4 	bl	80035d4 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 800304c:	bf00      	nop
      }
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d109      	bne.n	800307c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003068:	68b8      	ldr	r0, [r7, #8]
 800306a:	f000 faa3 	bl	80035b4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800306e:	4604      	mov	r4, r0
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 fabf 	bl	80035f4 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8003076:	4603      	mov	r3, r0
 8003078:	601c      	str	r4, [r3, #0]
	    break;
 800307a:	e005      	b.n	8003088 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	461a      	mov	r2, r3
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fac2 	bl	800360c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8003088:	2300      	movs	r3, #0
      }
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bd90      	pop	{r4, r7, pc}
	...

08003094 <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	08012dac 	.word	0x08012dac

080030b4 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	4611      	mov	r1, r2
 80030c0:	461a      	mov	r2, r3
 80030c2:	460b      	mov	r3, r1
 80030c4:	80fb      	strh	r3, [r7, #6]
 80030c6:	4613      	mov	r3, r2
 80030c8:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface) {
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ffe1 	bl	8003094 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x58>)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3308      	adds	r3, #8
 80030dc:	f44f 720a 	mov.w	r2, #552	; 0x228
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f00b fde3 	bl	800ecae <memset>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fa7a 	bl	80025ea <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80030f6:	797a      	ldrb	r2, [r7, #5]
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	4619      	mov	r1, r3
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fabf 	bl	8003680 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	08012d9c 	.word	0x08012d9c

08003110 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	4611      	mov	r1, r2
 800311c:	461a      	mov	r2, r3
 800311e:	460b      	mov	r3, r1
 8003120:	80fb      	strh	r3, [r7, #6]
 8003122:	4613      	mov	r3, r2
 8003124:	717b      	strb	r3, [r7, #5]
    ): interface(interface) {
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ffb3 	bl	8003094 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x58>)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3308      	adds	r3, #8
 8003138:	f44f 720a 	mov.w	r2, #552	; 0x228
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f00b fdb5 	bl	800ecae <memset>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fa4c 	bl	80025ea <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8003152:	797a      	ldrb	r2, [r7, #5]
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	4619      	mov	r1, r3
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 faaf 	bl	80036bc <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	08012d7c 	.word	0x08012d7c

0800316c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fabf 	bl	80036f8 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800317a:	4603      	mov	r3, r0
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>:
inline void CyphalInterface::send_cyphal(
 8003184:	b5b0      	push	{r4, r5, r7, lr}
 8003186:	b08c      	sub	sp, #48	; 0x30
 8003188:	af04      	add	r7, sp, #16
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8003192:	2307      	movs	r3, #7
 8003194:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8003196:	f107 031c 	add.w	r3, r7, #28
 800319a:	461a      	mov	r2, r3
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	68b8      	ldr	r0, [r7, #8]
 80031a0:	f7fe fed4 	bl	8001f4c <uavcan_node_Heartbeat_1_0_serialize_>
 80031a4:	4603      	mov	r3, r0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	09db      	lsrs	r3, r3, #7
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x38>
        utilities.error_handler();
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	3310      	adds	r3, #16
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 faaa 	bl	8003710 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80031bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80031c0:	753b      	strb	r3, [r7, #20]
 80031c2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80031c6:	757b      	strb	r3, [r7, #21]
 80031c8:	887b      	ldrh	r3, [r7, #2]
 80031ca:	82fb      	strh	r3, [r7, #22]
 80031cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80031d0:	763b      	strb	r3, [r7, #24]
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + DEFAULT_TIMEOUT_MICROS,
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 faad 	bl	800373c <_ZNKSt8functionIFyvEEclEv>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
    push(
 80031e6:	490d      	ldr	r1, [pc, #52]	; (800321c <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x98>)
 80031e8:	1854      	adds	r4, r2, r1
 80031ea:	f143 0500 	adc.w	r5, r3, #0
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	9202      	str	r2, [sp, #8]
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	f107 0314 	add.w	r3, r7, #20
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	4622      	mov	r2, r4
 80031fe:	462b      	mov	r3, r5
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f007 fe71 	bl	800aee8 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	3301      	adds	r3, #1
 800320c:	b2da      	uxtb	r2, r3
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	701a      	strb	r2, [r3, #0]
}
 8003212:	bf00      	nop
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bdb0      	pop	{r4, r5, r7, pc}
 800321a:	bf00      	nop
 800321c:	000f4240 	.word	0x000f4240

08003220 <_ZN5G4CAN6createI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create(
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b089      	sub	sp, #36	; 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem), args..., utilities);
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4619      	mov	r1, r3
 800323a:	2008      	movs	r0, #8
 800323c:	f7fe fa66 	bl	800170c <_ZnwjPv>
 8003240:	4604      	mov	r4, r0
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	4613      	mov	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4413      	add	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324e:	4619      	mov	r1, r3
 8003250:	4620      	mov	r0, r4
 8003252:	f7fe fbc1 	bl	80019d8 <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 8003256:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	3308      	adds	r3, #8
 800325c:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len / 2, utilities);
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	4619      	mov	r1, r3
 8003262:	2044      	movs	r0, #68	; 0x44
 8003264:	f7fe fa52 	bl	800170c <_ZnwjPv>
 8003268:	4604      	mov	r4, r0
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	085a      	lsrs	r2, r3, #1
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	4620      	mov	r0, r4
 8003274:	f7fe fb94 	bl	80019a0 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 8003278:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	79fa      	ldrb	r2, [r7, #7]
 800327e:	69b9      	ldr	r1, [r7, #24]
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fa75 	bl	8003770 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	601a      	str	r2, [r3, #0]
        return ptr;
 8003290:	693b      	ldr	r3, [r7, #16]
    }
 8003292:	4618      	mov	r0, r3
 8003294:	3724      	adds	r7, #36	; 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd90      	pop	{r4, r7, pc}

0800329a <_ZNSt15__uniq_ptr_dataI5G4CANSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	4611      	mov	r1, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 faa4 	bl	80037f8 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EEC1EPS0_>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6839      	ldr	r1, [r7, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ffe6 	bl	800329a <_ZNSt15__uniq_ptr_dataI5G4CANSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fa9c 	bl	8003820 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 80032e8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00c      	beq.n	800330c <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 faa1 	bl	800383a <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>
 80032f8:	4604      	mov	r4, r0
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 faaa 	bl	8003854 <_ZSt4moveIRP5G4CANEONSt16remove_referenceIT_E4typeEOS4_>
 8003300:	4603      	mov	r3, r0
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
 8003306:	4620      	mov	r0, r4
 8003308:	f000 faaf 	bl	800386a <_ZNKSt14default_deleteI5G4CANEclEPS0_>
	__ptr = pointer();
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
      }
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bd90      	pop	{r4, r7, pc}

0800331c <_ZSt4moveIRSt10unique_ptrI5G4CANSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEaSI5G4CANS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 800333c:	6838      	ldr	r0, [r7, #0]
 800333e:	f000 fab8 	bl	80038b2 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE7releaseEv>
 8003342:	4603      	mov	r3, r0
 8003344:	4619      	mov	r1, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fa9f 	bl	800388a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 800334c:	6838      	ldr	r0, [r7, #0]
 800334e:	f000 fa74 	bl	800383a <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>
 8003352:	4603      	mov	r3, r0
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fab9 	bl	80038cc <_ZSt7forwardISt14default_deleteI5G4CANEEOT_RNSt16remove_referenceIS3_E4typeE>
 800335a:	4602      	mov	r2, r0
 800335c:	f107 030c 	add.w	r3, r7, #12
 8003360:	4611      	mov	r1, r2
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fabd 	bl	80038e2 <_ZNSt14default_deleteI19AbstractCANProviderEC1I5G4CANvEERKS_IT_E>
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff fdb1 	bl	8002ed0 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 800336e:	687b      	ldr	r3, [r7, #4]
	}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	4622      	mov	r2, r4
 800338e:	6839      	ldr	r1, [r7, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fab2 	bl	80038fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8003396:	6839      	ldr	r1, [r7, #0]
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fabd 	bl	8003918 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd90      	pop	{r4, r7, pc}

080033a8 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 80033c8:	6838      	ldr	r0, [r7, #0]
 80033ca:	f000 fab0 	bl	800392e <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 80033ce:	4602      	mov	r2, r0
 80033d0:	f107 0308 	add.w	r3, r7, #8
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fab4 	bl	8003944 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 80033dc:	f107 0308 	add.w	r3, r7, #8
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 facc 	bl	8003980 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 80033e8:	f107 0308 	add.w	r3, r7, #8
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff f8b3 	bl	8002558 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 80033f2:	687b      	ldr	r3, [r7, #4]
      }
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fad1 	bl	80039ae <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800340c:	4603      	mov	r3, r0
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fad1 	bl	80039c8 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fac1 	bl	80039de <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800345c:	4603      	mov	r3, r0
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fac0 	bl	80039f6 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003476:	4603      	mov	r3, r0
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800348c:	68b8      	ldr	r0, [r7, #8]
 800348e:	f7ff fd57 	bl	8002f40 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003492:	4604      	mov	r4, r0
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7fe f984 	bl	80017a2 <_ZNSt9_Any_data9_M_accessEv>
 800349a:	4603      	mov	r3, r0
 800349c:	4619      	mov	r1, r3
 800349e:	2004      	movs	r0, #4
 80034a0:	f7fe f934 	bl	800170c <_ZnwjPv>
 80034a4:	4603      	mov	r3, r0
 80034a6:	601c      	str	r4, [r3, #0]
	  }
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd90      	pop	{r4, r7, pc}

080034b0 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 faa8 	bl	8003a0e <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 80034be:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fab0 	bl	8003a26 <_ZSt11__addressofIKPFyvEEPT_RS3_>
 80034c6:	4603      	mov	r3, r0
	}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 faaf 	bl	8003a3c <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80034de:	4603      	mov	r3, r0
 80034e0:	4619      	mov	r1, r3
 80034e2:	4620      	mov	r0, r4
 80034e4:	f000 fab5 	bl	8003a52 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd90      	pop	{r4, r7, pc}

080034f6 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access()
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fe f94f 	bl	80017a2 <_ZNSt9_Any_data9_M_accessEv>
 8003504:	4603      	mov	r3, r0
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d82a      	bhi.n	800357a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8003524:	a201      	add	r2, pc, #4	; (adr r2, 800352c <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	0800353d 	.word	0x0800353d
 8003530:	0800354b 	.word	0x0800354b
 8003534:	0800355f 	.word	0x0800355f
 8003538:	08003571 	.word	0x08003571
	      __dest._M_access<const type_info*>() = nullptr;
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 fa9a 	bl	8003a76 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8003542:	4603      	mov	r3, r0
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
	      break;
 8003548:	e017      	b.n	800357a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800354a:	68b8      	ldr	r0, [r7, #8]
 800354c:	f7ff ffb0 	bl	80034b0 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8003550:	4604      	mov	r4, r0
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7ff ffcf 	bl	80034f6 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8003558:	4603      	mov	r3, r0
 800355a:	601c      	str	r4, [r3, #0]
	      break;
 800355c:	e00d      	b.n	800357a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800355e:	68b8      	ldr	r0, [r7, #8]
 8003560:	f7ff ffa6 	bl	80034b0 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8003564:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8003566:	4619      	mov	r1, r3
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fa90 	bl	8003a8e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800356e:	e004      	b.n	800357a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8003570:	4621      	mov	r1, r4
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fa9d 	bl	8003ab2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8003578:	bf00      	nop
	  return false;
 800357a:	2300      	movs	r3, #0
	}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bd90      	pop	{r4, r7, pc}

08003584 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8003590:	68b8      	ldr	r0, [r7, #8]
 8003592:	f7ff fd33 	bl	8002ffc <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003596:	4604      	mov	r4, r0
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f7fe f902 	bl	80017a2 <_ZNSt9_Any_data9_M_accessEv>
 800359e:	4603      	mov	r3, r0
 80035a0:	4619      	mov	r1, r3
 80035a2:	2004      	movs	r0, #4
 80035a4:	f7fe f8b2 	bl	800170c <_ZnwjPv>
 80035a8:	4603      	mov	r3, r0
 80035aa:	601c      	str	r4, [r3, #0]
	  }
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd90      	pop	{r4, r7, pc}

080035b4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fa84 	bl	8003aca <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 80035c2:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fa8c 	bl	8003ae2 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 80035ca:	4603      	mov	r3, r0
	}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fa8b 	bl	8003af8 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4619      	mov	r1, r3
 80035e6:	4620      	mov	r0, r4
 80035e8:	f000 fa91 	bl	8003b0e <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd90      	pop	{r4, r7, pc}

080035f4 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7fe f8d0 	bl	80017a2 <_ZNSt9_Any_data9_M_accessEv>
 8003602:	4603      	mov	r3, r0
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800360c:	b590      	push	{r4, r7, lr}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d82a      	bhi.n	8003676 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8003620:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	08003639 	.word	0x08003639
 800362c:	08003647 	.word	0x08003647
 8003630:	0800365b 	.word	0x0800365b
 8003634:	0800366d 	.word	0x0800366d
	      __dest._M_access<const type_info*>() = nullptr;
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fa1c 	bl	8003a76 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800363e:	4603      	mov	r3, r0
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
	      break;
 8003644:	e017      	b.n	8003676 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003646:	68b8      	ldr	r0, [r7, #8]
 8003648:	f7ff ffb4 	bl	80035b4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800364c:	4604      	mov	r4, r0
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7ff ffd0 	bl	80035f4 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8003654:	4603      	mov	r3, r0
 8003656:	601c      	str	r4, [r3, #0]
	      break;
 8003658:	e00d      	b.n	8003676 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800365a:	68b8      	ldr	r0, [r7, #8]
 800365c:	f7ff ffaa 	bl	80035b4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8003660:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8003662:	4619      	mov	r1, r3
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 fa61 	bl	8003b2c <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800366a:	e004      	b.n	8003676 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800366c:	4621      	mov	r1, r4
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fa6e 	bl	8003b50 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8003674:	bf00      	nop
	  return false;
 8003676:	2300      	movs	r3, #0
	}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	bd90      	pop	{r4, r7, pc}

08003680 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af02      	add	r7, sp, #8
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
 800368c:	4613      	mov	r3, r2
 800368e:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fb24 	bl	8002cea <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3308      	adds	r3, #8
 80036a6:	787a      	ldrb	r2, [r7, #1]
 80036a8:	8879      	ldrh	r1, [r7, #2]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	220c      	movs	r2, #12
 80036b0:	f007 fc54 	bl	800af5c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
 80036c8:	4613      	mov	r3, r2
 80036ca:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fb06 	bl	8002cea <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3308      	adds	r3, #8
 80036e2:	787a      	ldrb	r2, [r7, #1]
 80036e4:	8879      	ldrh	r1, [r7, #2]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	220c      	movs	r2, #12
 80036ec:	f007 fc36 	bl	800af5c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe f86a 	bl	80017f4 <_ZNKSt14_Function_base8_M_emptyEv>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 8003726:	f00a f9f9 	bl	800db1c <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4610      	mov	r0, r2
 8003732:	4798      	blx	r3
 8003734:	bf00      	nop
      }
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe f854 	bl	80017f4 <_ZNKSt14_Function_base8_M_emptyEv>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 8003752:	f00a f9e3 	bl	800db1c <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4610      	mov	r0, r2
 800375e:	4798      	blx	r3
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
      }
 8003764:	4610      	mov	r0, r2
 8003766:	4619      	mov	r1, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8003770:	b5b0      	push	{r4, r5, r7, lr}
 8003772:	b08e      	sub	sp, #56	; 0x38
 8003774:	af00      	add	r7, sp, #0
 8003776:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003778:	62b9      	str	r1, [r7, #40]	; 0x28
 800377a:	4613      	mov	r3, r2
 800377c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8003780:	481a      	ldr	r0, [pc, #104]	; (80037ec <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8003782:	f7ff f977 	bl	8002a74 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	3310      	adds	r3, #16
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff ffbc 	bl	8003710 <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 8003798:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800379c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f9f2 	bl	8003b88 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80037a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037a8:	4619      	mov	r1, r3
 80037aa:	4810      	ldr	r0, [pc, #64]	; (80037ec <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 80037ac:	f000 fa1d 	bl	8003bea <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 80037b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 f9f6 	bl	8003ba6 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 80037ba:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80037bc:	463b      	mov	r3, r7
 80037be:	4a0c      	ldr	r2, [pc, #48]	; (80037f0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 80037c0:	490c      	ldr	r1, [pc, #48]	; (80037f4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 80037c2:	4618      	mov	r0, r3
 80037c4:	f009 fe94 	bl	800d4f0 <canardInit>
 80037c8:	3420      	adds	r4, #32
 80037ca:	463d      	mov	r5, r7
 80037cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80037e2:	bf00      	nop
 80037e4:	3738      	adds	r7, #56	; 0x38
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bdb0      	pop	{r4, r5, r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000460 	.word	0x20000460
 80037f0:	080018e9 	.word	0x080018e9
 80037f4:	080018a5 	.word	0x080018a5

080037f8 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fa13 	bl	8003c30 <_ZNSt5tupleIJP5G4CANSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800380a:	683c      	ldr	r4, [r7, #0]
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f807 	bl	8003820 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8003812:	4603      	mov	r3, r0
 8003814:	601c      	str	r4, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	bd90      	pop	{r4, r7, pc}

08003820 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fa0d 	bl	8003c4a <_ZSt3getILj0EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003830:	4603      	mov	r3, r0
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fa0d 	bl	8003c64 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE10_M_deleterEv>
 800384a:	4603      	mov	r3, r0
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <_ZSt4moveIRP5G4CANEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <_ZNKSt14default_deleteI5G4CANEclEPS0_>:
      operator()(_Tp* __ptr) const
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <_ZNKSt14default_deleteI5G4CANEclEPS0_+0x18>
 800387a:	2144      	movs	r1, #68	; 0x44
 800387c:	4618      	mov	r0, r3
 800387e:	f00a f93a 	bl	800daf6 <_ZdlPvj>
      }
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 800388a:	b590      	push	{r4, r7, lr}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8003894:	687c      	ldr	r4, [r7, #4]
 8003896:	463b      	mov	r3, r7
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fb26 	bl	8002eea <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 800389e:	4603      	mov	r3, r0
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4619      	mov	r1, r3
 80038a4:	4620      	mov	r0, r4
 80038a6:	f000 f9ea 	bl	8003c7e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>
      }
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd90      	pop	{r4, r7, pc}

080038b2 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f9fe 	bl	8003cbe <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE7releaseEv>
 80038c2:	4603      	mov	r3, r0
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_ZSt7forwardISt14default_deleteI5G4CANEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <_ZNSt14default_deleteI19AbstractCANProviderEC1I5G4CANvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f9fb 	bl	8003d04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
	{ }
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3304      	adds	r3, #4
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fe0a 	bl	8002574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	1d1a      	adds	r2, r3, #4
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	3304      	adds	r3, #4
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f000 f9e2 	bl	8003d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
      }
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	4611      	mov	r1, r2
 8003990:	4618      	mov	r0, r3
 8003992:	f000 f9ef 	bl	8003d74 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	1d1a      	adds	r2, r3, #4
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	3304      	adds	r3, #4
 800399e:	4619      	mov	r1, r3
 80039a0:	4610      	mov	r0, r2
 80039a2:	f000 f9c7 	bl	8003d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 f9fa 	bl	8003db2 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80039be:	4603      	mov	r3, r0
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f9ef 	bl	8003dca <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 80039ec:	4603      	mov	r3, r0
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f9f0 	bl	8003de4 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fd fece 	bl	80017b8 <_ZNKSt9_Any_data9_M_accessEv>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	7138      	strb	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003a5c:	6838      	ldr	r0, [r7, #0]
 8003a5e:	f7ff ffed 	bl	8003a3c <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003a62:	4603      	mov	r3, r0
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4798      	blx	r3
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd fe8f 	bl	80017a2 <_ZNSt9_Any_data9_M_accessEv>
 8003a84:	4603      	mov	r3, r0
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003a8e:	b590      	push	{r4, r7, lr}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003a98:	6838      	ldr	r0, [r7, #0]
 8003a9a:	f000 f9af 	bl	8003dfc <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f9b4 	bl	8003e12 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd90      	pop	{r4, r7, pc}

08003ab2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f9c1 	bl	8003e44 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fd fe70 	bl	80017b8 <_ZNKSt9_Any_data9_M_accessEv>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	7138      	strb	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003b18:	6838      	ldr	r0, [r7, #0]
 8003b1a:	f7ff ffed 	bl	8003af8 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4798      	blx	r3
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003b2c:	b590      	push	{r4, r7, lr}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003b36:	6838      	ldr	r0, [r7, #0]
 8003b38:	f000 f990 	bl	8003e5c <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4622      	mov	r2, r4
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f995 	bl	8003e72 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd90      	pop	{r4, r7, pc}

08003b50 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f9a2 	bl	8003ea4 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	4611      	mov	r1, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f99f 	bl	8003ebc <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff ffe6 	bl	8003b68 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8003ba6:	b590      	push	{r4, r7, lr}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 f997 	bl	8003ee4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8003bb6:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00c      	beq.n	8003bda <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f99c 	bl	8003efe <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f9a5 	bl	8003f18 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f000 f9aa 	bl	8003f2e <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
      }
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd90      	pop	{r4, r7, pc}

08003bea <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 8003bf4:	6838      	ldr	r0, [r7, #0]
 8003bf6:	f000 f9bf 	bl	8003f78 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9a6 	bl	8003f50 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8003c04:	6838      	ldr	r0, [r7, #0]
 8003c06:	f000 f97a 	bl	8003efe <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 f9cd 	bl	8003fac <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003c12:	4602      	mov	r2, r0
 8003c14:	f107 030c 	add.w	r3, r7, #12
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f9d1 	bl	8003fc2 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f9b6 	bl	8003f92 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8003c26:	687b      	ldr	r3, [r7, #4]
	}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_ZNSt5tupleIJP5G4CANSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 f9cd 	bl	8003fda <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEEC1Ev>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_ZSt3getILj0EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 f9d0 	bl	8003ffa <_ZSt12__get_helperILj0EP5G4CANJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f9cf 	bl	8004012 <_ZSt3getILj1EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003c74:	4603      	mov	r3, r0
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8003c7e:	b590      	push	{r4, r7, lr}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff f914 	bl	8002eb6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8003c94:	683c      	ldr	r4, [r7, #0]
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff f90d 	bl	8002eb6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff fbdd 	bl	8003466 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8003cac:	4603      	mov	r3, r0
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff f925 	bl	8002f00 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
      }
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd90      	pop	{r4, r7, pc}

08003cbe <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff fdaa 	bl	8003820 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff fda4 	bl	8003820 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
	return __p;
 8003cde:	68fb      	ldr	r3, [r7, #12]
      }
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe ff11 	bl	8002b1c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8003d14:	2010      	movs	r0, #16
 8003d16:	f009 fef0 	bl	800dafa <_Znwj>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461c      	mov	r4, r3
 8003d1e:	6839      	ldr	r1, [r7, #0]
 8003d20:	4620      	mov	r0, r4
 8003d22:	f000 f983 	bl	800402c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	601c      	str	r4, [r3, #0]
	}
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd90      	pop	{r4, r7, pc}

08003d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	601a      	str	r2, [r3, #0]
      }
 8003d52:	bf00      	nop
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ffed 	bl	8003d5e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8003d84:	4603      	mov	r3, r0
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003d8a:	6838      	ldr	r0, [r7, #0]
 8003d8c:	f7ff ffe7 	bl	8003d5e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8003d90:	4603      	mov	r3, r0
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003d98:	f107 030c 	add.w	r3, r7, #12
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ffde 	bl	8003d5e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8003da2:	4603      	mov	r3, r0
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	601a      	str	r2, [r3, #0]
    }
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f94c 	bl	8004058 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 f94c 	bl	8004072 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f94b 	bl	8004088 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 8003df2:	4603      	mov	r3, r0
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8003e12:	b590      	push	{r4, r7, lr}
 8003e14:	b085      	sub	sp, #20
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8003e1e:	68b8      	ldr	r0, [r7, #8]
 8003e20:	f7ff ffec 	bl	8003dfc <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003e24:	4603      	mov	r3, r0
 8003e26:	681c      	ldr	r4, [r3, #0]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f7fd fcba 	bl	80017a2 <_ZNSt9_Any_data9_M_accessEv>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4619      	mov	r1, r3
 8003e32:	2004      	movs	r0, #4
 8003e34:	f7fd fc6a 	bl	800170c <_ZnwjPv>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	601c      	str	r4, [r3, #0]
	  }
 8003e3c:	bf00      	nop
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd90      	pop	{r4, r7, pc}

08003e44 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access()
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fd fca8 	bl	80017a2 <_ZNSt9_Any_data9_M_accessEv>
 8003e52:	4603      	mov	r3, r0
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4618      	mov	r0, r3
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8003e72:	b590      	push	{r4, r7, lr}
 8003e74:	b085      	sub	sp, #20
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8003e7e:	68b8      	ldr	r0, [r7, #8]
 8003e80:	f7ff ffec 	bl	8003e5c <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003e84:	4603      	mov	r3, r0
 8003e86:	681c      	ldr	r4, [r3, #0]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7fd fc8a 	bl	80017a2 <_ZNSt9_Any_data9_M_accessEv>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4619      	mov	r1, r3
 8003e92:	2004      	movs	r0, #4
 8003e94:	f7fd fc3a 	bl	800170c <_ZnwjPv>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	601c      	str	r4, [r3, #0]
	  }
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd90      	pop	{r4, r7, pc}

08003ea4 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7fd fc78 	bl	80017a2 <_ZNSt9_Any_data9_M_accessEv>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8003ebc:	b590      	push	{r4, r7, lr}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 f8e9 	bl	80040a0 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8003ece:	683c      	ldr	r4, [r7, #0]
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f807 	bl	8003ee4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	601c      	str	r4, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd90      	pop	{r4, r7, pc}

08003ee4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f8e3 	bl	80040ba <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 f8e3 	bl	80040d4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d004      	beq.n	8003f48 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	320c      	adds	r2, #12
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	4790      	blx	r2
      }
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      reset(pointer __p = pointer()) noexcept
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
	_M_t.reset(std::move(__p));
 8003f5a:	687c      	ldr	r4, [r7, #4]
 8003f5c:	463b      	mov	r3, r7
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f8c5 	bl	80040ee <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8003f64:	4603      	mov	r3, r0
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f000 f8ca 	bl	8004104 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd90      	pop	{r4, r7, pc}

08003f78 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f8de 	bl	8004144 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 f8e6 	bl	800416e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8d0 	bl	8004188 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEEC1Ev>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f8d8 	bl	80041a0 <_ZNSt10_Head_baseILj0EP5G4CANLb0EEC1Ev>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <_ZSt12__get_helperILj0EP5G4CANJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f8da 	bl	80041bc <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEE7_M_headERS4_>
 8004008:	4603      	mov	r3, r0
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <_ZSt3getILj1EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f8db 	bl	80041d6 <_ZSt12__get_helperILj1ESt14default_deleteI5G4CANEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004020:	4603      	mov	r3, r0
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f8d9 	bl	80041f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800403e:	4a05      	ldr	r2, [pc, #20]	; (8004054 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	08012d50 	.word	0x08012d50

08004058 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f8da 	bl	800421c <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 8004068:	4603      	mov	r3, r0
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f8ce 	bl	8004232 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 8004096:	4603      	mov	r3, r0
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f8cc 	bl	8004248 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 f8cf 	bl	8004268 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80040ca:	4603      	mov	r3, r0
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f8ce 	bl	8004280 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80040e4:	4603      	mov	r3, r0
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8004104:	b590      	push	{r4, r7, lr}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f8c2 	bl	8004298 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8004114:	4603      	mov	r3, r0
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800411a:	683c      	ldr	r4, [r7, #0]
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f8bb 	bl	8004298 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8004122:	4603      	mov	r3, r0
 8004124:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f81e 	bl	800416e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8004132:	4603      	mov	r3, r0
 8004134:	68f9      	ldr	r1, [r7, #12]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f8bb 	bl	80042b2 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bd90      	pop	{r4, r7, pc}

08004144 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fec9 	bl	8003ee4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8004152:	4603      	mov	r3, r0
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff fec3 	bl	8003ee4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800415e:	4603      	mov	r3, r0
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
	return __p;
 8004164:	68fb      	ldr	r3, [r7, #12]
      }
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4618      	mov	r0, r3
 800417a:	f000 f8ab 	bl	80042d4 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800417e:	4603      	mov	r3, r0
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEEC1Ev>:
      _Tuple_impl()
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f8ab 	bl	80042ec <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EEC1Ev>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <_ZNSt10_Head_baseILj0EP5G4CANLb0EEC1Ev>:
      constexpr _Head_base()
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 f89b 	bl	8004302 <_ZNSt10_Head_baseILj0EP5G4CANLb0EE7_M_headERS2_>
 80041cc:	4603      	mov	r3, r0
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <_ZSt12__get_helperILj1ESt14default_deleteI5G4CANEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f89a 	bl	8004318 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEE7_M_headERS3_>
 80041e4:	4603      	mov	r3, r0
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 80041f8:	4a07      	ldr	r2, [pc, #28]	; (8004218 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	08012dec 	.word	0x08012dec

0800421c <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f86d 	bl	8004330 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4618      	mov	r0, r3
 800425a:	f000 f875 	bl	8004348 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f877 	bl	8004364 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8004276:	4603      	mov	r3, r0
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f878 	bl	800437e <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800428e:	4603      	mov	r3, r0
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f877 	bl	8004396 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80042a8:	4603      	mov	r3, r0
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d004      	beq.n	80042cc <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	320c      	adds	r2, #12
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	4790      	blx	r2
      }
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f867 	bl	80043b0 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80042e2:	4603      	mov	r3, r0
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EEC1Ev>:
      constexpr _Head_base()
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <_ZNSt10_Head_baseILj0EP5G4CANLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4618      	mov	r0, r3
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f851 	bl	80043c8 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EE7_M_headERS3_>
 8004326:	4603      	mov	r3, r0
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f850 	bl	80043de <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4618      	mov	r0, r3
 8004370:	f000 f840 	bl	80043f4 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 8004374:	4603      	mov	r3, r0
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f83f 	bl	800440a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 800438c:	4603      	mov	r3, r0
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f83e 	bl	8004422 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80043a6:	4603      	mov	r3, r0
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f83e 	bl	800443a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 80043be:	4603      	mov	r3, r0
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f81d 	bl	8004452 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 8004418:	4603      	mov	r3, r0
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f81c 	bl	8004468 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8004430:	4603      	mov	r3, r0
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f81d 	bl	8004482 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 8004448:	4603      	mov	r3, r0
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f810 	bl	8004498 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 8004478:	4603      	mov	r3, r0
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	4a05      	ldr	r2, [pc, #20]	; (80044d0 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe fc9b 	bl	8002dfc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	08012d50 	.word	0x08012d50

080044d4 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ffe7 	bl	80044b0 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80044e2:	2110      	movs	r1, #16
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f009 fb06 	bl	800daf6 <_ZdlPvj>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3310      	adds	r3, #16
 8004500:	4618      	mov	r0, r3
 8004502:	f7fd f995 	bl	8001830 <_ZNSt8functionIFvvEED1Ev>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4618      	mov	r0, r3
 800450a:	f7fd f984 	bl	8001816 <_ZNSt8functionIFyvEED1Ev>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <_Z41__static_initialization_and_destruction_0ii>:

}
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	; 0x28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d122      	bne.n	800456e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800452e:	4293      	cmp	r3, r2
 8004530:	d11d      	bne.n	800456e <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 8004532:	f107 0308 	add.w	r3, r7, #8
 8004536:	4917      	ldr	r1, [pc, #92]	; (8004594 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe fb23 	bl	8002b84 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 800453e:	f107 0318 	add.w	r3, r7, #24
 8004542:	4915      	ldr	r1, [pc, #84]	; (8004598 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004544:	4618      	mov	r0, r3
 8004546:	f7fe fb4d 	bl	8002be4 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 800454a:	f107 0218 	add.w	r2, r7, #24
 800454e:	f107 0308 	add.w	r3, r7, #8
 8004552:	4619      	mov	r1, r3
 8004554:	4811      	ldr	r0, [pc, #68]	; (800459c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004556:	f7fd f978 	bl	800184a <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 800455a:	f107 0318 	add.w	r3, r7, #24
 800455e:	4618      	mov	r0, r3
 8004560:	f7fd f966 	bl	8001830 <_ZNSt8functionIFvvEED1Ev>
 8004564:	f107 0308 	add.w	r3, r7, #8
 8004568:	4618      	mov	r0, r3
 800456a:	f7fd f954 	bl	8001816 <_ZNSt8functionIFyvEED1Ev>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800457a:	4293      	cmp	r3, r2
 800457c:	d105      	bne.n	800458a <_Z41__static_initialization_and_destruction_0ii+0x72>
 800457e:	4807      	ldr	r0, [pc, #28]	; (800459c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004580:	f7ff ffb8 	bl	80044f4 <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 8004584:	4806      	ldr	r0, [pc, #24]	; (80045a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004586:	f7fe f840 	bl	800260a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 800458a:	bf00      	nop
 800458c:	3728      	adds	r7, #40	; 0x28
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	0800259d 	.word	0x0800259d
 8004598:	08002591 	.word	0x08002591
 800459c:	20000308 	.word	0x20000308
 80045a0:	20000300 	.word	0x20000300

080045a4 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68dc      	ldr	r4, [r3, #12]
 80045b0:	2c00      	cmp	r4, #0
 80045b2:	d006      	beq.n	80045c2 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 80045b4:	4620      	mov	r0, r4
 80045b6:	f7ff fb97 	bl	8003ce8 <_ZN15CyphalInterfaceD1Ev>
 80045ba:	210c      	movs	r1, #12
 80045bc:	4620      	mov	r0, r4
 80045be:	f009 fa9a 	bl	800daf6 <_ZdlPvj>
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd90      	pop	{r4, r7, pc}

080045ca <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
      { delete this; }
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff7b 	bl	80044d4 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80045de:	bf00      	nop
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 80045f0:	2300      	movs	r3, #0
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:

    void accept(CanardRxTransfer* transfer) {
 80045fe:	b580      	push	{r7, lr}
 8004600:	b086      	sub	sp, #24
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
        Type object;
        interface->cyphal_deserialize_transfer<T>(&object, transfer);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe fb6b 	bl	8002cea <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004614:	f107 030c 	add.w	r3, r7, #12
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	4619      	mov	r1, r3
 800461c:	f000 f82b 	bl	8004676 <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3304      	adds	r3, #4
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f107 010c 	add.w	r1, r7, #12
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
    }
 8004632:	bf00      	nop
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
        interface->cyphal_deserialize_transfer<T>(&object, transfer);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fb4d 	bl	8002cea <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004650:	f107 0308 	add.w	r3, r7, #8
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	4619      	mov	r1, r3
 8004658:	f000 f82d 	bl	80046b6 <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3304      	adds	r3, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f107 0108 	add.w	r1, r7, #8
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4798      	blx	r3
    }
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
        buffer
    );
}

template <typename TypeAlias>
inline void CyphalInterface::cyphal_deserialize_transfer(
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 8004682:	230c      	movs	r3, #12
 8004684:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj,(uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f107 0214 	add.w	r2, r7, #20
 800468e:	4619      	mov	r1, r3
 8004690:	68b8      	ldr	r0, [r7, #8]
 8004692:	f7fd feb3 	bl	80023fc <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 8004696:	4603      	mov	r3, r0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	09db      	lsrs	r3, r3, #7
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	3310      	adds	r3, #16
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff f831 	bl	8003710 <_ZNKSt8functionIFvvEEclEv>
    }
}
 80046ae:	bf00      	nop
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::cyphal_deserialize_transfer(
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b086      	sub	sp, #24
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 80046c2:	230c      	movs	r3, #12
 80046c4:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj,(uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f107 0214 	add.w	r2, r7, #20
 80046ce:	4619      	mov	r1, r3
 80046d0:	68b8      	ldr	r0, [r7, #8]
 80046d2:	f7fd fd21 	bl	8002118 <uavcan_node_Heartbeat_1_0_deserialize_>
 80046d6:	4603      	mov	r3, r0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	09db      	lsrs	r3, r3, #7
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	3310      	adds	r3, #16
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff f811 	bl	8003710 <_ZNKSt8functionIFvvEEclEv>
}
 80046ee:	bf00      	nop
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <_GLOBAL__sub_I_buffer>:
 80046f6:	b580      	push	{r7, lr}
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046fe:	2001      	movs	r0, #1
 8004700:	f7ff ff0a 	bl	8004518 <_Z41__static_initialization_and_destruction_0ii>
 8004704:	bd80      	pop	{r7, pc}

08004706 <_GLOBAL__sub_D_buffer>:
 8004706:	b580      	push	{r7, lr}
 8004708:	af00      	add	r7, sp, #0
 800470a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800470e:	2000      	movs	r0, #0
 8004710:	f7ff ff02 	bl	8004518 <_Z41__static_initialization_and_destruction_0ii>
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800471e:	4b0f      	ldr	r3, [pc, #60]	; (800475c <HAL_MspInit+0x44>)
 8004720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004722:	4a0e      	ldr	r2, [pc, #56]	; (800475c <HAL_MspInit+0x44>)
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	6613      	str	r3, [r2, #96]	; 0x60
 800472a:	4b0c      	ldr	r3, [pc, #48]	; (800475c <HAL_MspInit+0x44>)
 800472c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	607b      	str	r3, [r7, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004736:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_MspInit+0x44>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	4a08      	ldr	r2, [pc, #32]	; (800475c <HAL_MspInit+0x44>)
 800473c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004740:	6593      	str	r3, [r2, #88]	; 0x58
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_MspInit+0x44>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800474e:	f003 ff8f 	bl	8008670 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000

08004760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004764:	e7fe      	b.n	8004764 <NMI_Handler+0x4>

08004766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004766:	b480      	push	{r7}
 8004768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800476a:	e7fe      	b.n	800476a <HardFault_Handler+0x4>

0800476c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004770:	e7fe      	b.n	8004770 <MemManage_Handler+0x4>

08004772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004772:	b480      	push	{r7}
 8004774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004776:	e7fe      	b.n	8004776 <BusFault_Handler+0x4>

08004778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800477c:	e7fe      	b.n	800477c <UsageFault_Handler+0x4>

0800477e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800477e:	b480      	push	{r7}
 8004780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004790:	bf00      	nop
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800479a:	b480      	push	{r7}
 800479c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800479e:	bf00      	nop
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047ac:	f000 fa20 	bl	8004bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047b0:	bf00      	nop
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80047b8:	4802      	ldr	r0, [pc, #8]	; (80047c4 <USART2_IRQHandler+0x10>)
 80047ba:	f004 ffc9 	bl	8009750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000388 	.word	0x20000388

080047c8 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80047cc:	4802      	ldr	r0, [pc, #8]	; (80047d8 <I2C4_EV_IRQHandler+0x10>)
 80047ce:	f001 ff7f 	bl	80066d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20000254 	.word	0x20000254

080047dc <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80047e0:	4802      	ldr	r0, [pc, #8]	; (80047ec <I2C4_ER_IRQHandler+0x10>)
 80047e2:	f001 ff8f 	bl	8006704 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000254 	.word	0x20000254

080047f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  return 1;
 80047f4:	2301      	movs	r3, #1
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <_kill>:

int _kill(int pid, int sig)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800480a:	f00a faf7 	bl	800edfc <__errno>
 800480e:	4603      	mov	r3, r0
 8004810:	2216      	movs	r2, #22
 8004812:	601a      	str	r2, [r3, #0]
  return -1;
 8004814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <_exit>:

void _exit (int status)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004828:	f04f 31ff 	mov.w	r1, #4294967295
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff ffe7 	bl	8004800 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004832:	e7fe      	b.n	8004832 <_exit+0x12>

08004834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	e00a      	b.n	800485c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004846:	f3af 8000 	nop.w
 800484a:	4601      	mov	r1, r0
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	60ba      	str	r2, [r7, #8]
 8004852:	b2ca      	uxtb	r2, r1
 8004854:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	3301      	adds	r3, #1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	429a      	cmp	r2, r3
 8004862:	dbf0      	blt.n	8004846 <_read+0x12>
  }

  return len;
 8004864:	687b      	ldr	r3, [r7, #4]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b086      	sub	sp, #24
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e009      	b.n	8004894 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	60ba      	str	r2, [r7, #8]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	3301      	adds	r3, #1
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	dbf1      	blt.n	8004880 <_write+0x12>
  }
  return len;
 800489c:	687b      	ldr	r3, [r7, #4]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <_close>:

int _close(int file)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80048ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048ce:	605a      	str	r2, [r3, #4]
  return 0;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <_isatty>:

int _isatty(int file)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80048e6:	2301      	movs	r3, #1
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
	...

08004910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004918:	4a14      	ldr	r2, [pc, #80]	; (800496c <_sbrk+0x5c>)
 800491a:	4b15      	ldr	r3, [pc, #84]	; (8004970 <_sbrk+0x60>)
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004924:	4b13      	ldr	r3, [pc, #76]	; (8004974 <_sbrk+0x64>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800492c:	4b11      	ldr	r3, [pc, #68]	; (8004974 <_sbrk+0x64>)
 800492e:	4a12      	ldr	r2, [pc, #72]	; (8004978 <_sbrk+0x68>)
 8004930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <_sbrk+0x64>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4413      	add	r3, r2
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	429a      	cmp	r2, r3
 800493e:	d207      	bcs.n	8004950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004940:	f00a fa5c 	bl	800edfc <__errno>
 8004944:	4603      	mov	r3, r0
 8004946:	220c      	movs	r2, #12
 8004948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800494a:	f04f 33ff 	mov.w	r3, #4294967295
 800494e:	e009      	b.n	8004964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004950:	4b08      	ldr	r3, [pc, #32]	; (8004974 <_sbrk+0x64>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004956:	4b07      	ldr	r3, [pc, #28]	; (8004974 <_sbrk+0x64>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4413      	add	r3, r2
 800495e:	4a05      	ldr	r2, [pc, #20]	; (8004974 <_sbrk+0x64>)
 8004960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004962:	68fb      	ldr	r3, [r7, #12]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20020000 	.word	0x20020000
 8004970:	00000400 	.word	0x00000400
 8004974:	20000384 	.word	0x20000384
 8004978:	200005b8 	.word	0x200005b8

0800497c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <SystemInit+0x20>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004986:	4a05      	ldr	r2, [pc, #20]	; (800499c <SystemInit+0x20>)
 8004988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800498c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004990:	bf00      	nop
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80049a4:	4b22      	ldr	r3, [pc, #136]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 80049a6:	4a23      	ldr	r2, [pc, #140]	; (8004a34 <MX_USART2_UART_Init+0x94>)
 80049a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80049aa:	4b21      	ldr	r3, [pc, #132]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 80049ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80049b2:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80049b8:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80049be:	4b1c      	ldr	r3, [pc, #112]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80049c4:	4b1a      	ldr	r3, [pc, #104]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 80049c6:	220c      	movs	r2, #12
 80049c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049ca:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80049d0:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049d6:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 80049d8:	2200      	movs	r2, #0
 80049da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80049dc:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 80049de:	2200      	movs	r2, #0
 80049e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049e2:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80049e8:	4811      	ldr	r0, [pc, #68]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 80049ea:	f004 fdcd 	bl	8009588 <HAL_UART_Init>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80049f4:	f7fc fe85 	bl	8001702 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049f8:	2100      	movs	r1, #0
 80049fa:	480d      	ldr	r0, [pc, #52]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 80049fc:	f006 f941 	bl	800ac82 <HAL_UARTEx_SetTxFifoThreshold>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004a06:	f7fc fe7c 	bl	8001702 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4808      	ldr	r0, [pc, #32]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 8004a0e:	f006 f976 	bl	800acfe <HAL_UARTEx_SetRxFifoThreshold>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004a18:	f7fc fe73 	bl	8001702 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004a1c:	4804      	ldr	r0, [pc, #16]	; (8004a30 <MX_USART2_UART_Init+0x90>)
 8004a1e:	f006 f8f7 	bl	800ac10 <HAL_UARTEx_DisableFifoMode>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004a28:	f7fc fe6b 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a2c:	bf00      	nop
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	20000388 	.word	0x20000388
 8004a34:	40004400 	.word	0x40004400

08004a38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b09e      	sub	sp, #120	; 0x78
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a50:	f107 0310 	add.w	r3, r7, #16
 8004a54:	2254      	movs	r2, #84	; 0x54
 8004a56:	2100      	movs	r1, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f00a f928 	bl	800ecae <memset>
  if(uartHandle->Instance==USART2)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a23      	ldr	r2, [pc, #140]	; (8004af0 <HAL_UART_MspInit+0xb8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d13e      	bne.n	8004ae6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a70:	f107 0310 	add.w	r3, r7, #16
 8004a74:	4618      	mov	r0, r3
 8004a76:	f004 fb39 	bl	80090ec <HAL_RCCEx_PeriphCLKConfig>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004a80:	f7fc fe3f 	bl	8001702 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a84:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <HAL_UART_MspInit+0xbc>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	4a1a      	ldr	r2, [pc, #104]	; (8004af4 <HAL_UART_MspInit+0xbc>)
 8004a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a90:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <HAL_UART_MspInit+0xbc>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a9c:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <HAL_UART_MspInit+0xbc>)
 8004a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa0:	4a14      	ldr	r2, [pc, #80]	; (8004af4 <HAL_UART_MspInit+0xbc>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aa8:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <HAL_UART_MspInit+0xbc>)
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004ab4:	230c      	movs	r3, #12
 8004ab6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ac4:	2307      	movs	r3, #7
 8004ac6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004acc:	4619      	mov	r1, r3
 8004ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ad2:	f000 ff0f 	bl	80058f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2100      	movs	r1, #0
 8004ada:	2026      	movs	r0, #38	; 0x26
 8004adc:	f000 f981 	bl	8004de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004ae0:	2026      	movs	r0, #38	; 0x26
 8004ae2:	f000 f998 	bl	8004e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	3778      	adds	r7, #120	; 0x78
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40004400 	.word	0x40004400
 8004af4:	40021000 	.word	0x40021000

08004af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004af8:	480d      	ldr	r0, [pc, #52]	; (8004b30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004afa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004afc:	f7ff ff3e 	bl	800497c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b00:	480c      	ldr	r0, [pc, #48]	; (8004b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b02:	490d      	ldr	r1, [pc, #52]	; (8004b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b04:	4a0d      	ldr	r2, [pc, #52]	; (8004b3c <LoopForever+0xe>)
  movs r3, #0
 8004b06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004b08:	e002      	b.n	8004b10 <LoopCopyDataInit>

08004b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b0e:	3304      	adds	r3, #4

08004b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b14:	d3f9      	bcc.n	8004b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b16:	4a0a      	ldr	r2, [pc, #40]	; (8004b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b18:	4c0a      	ldr	r4, [pc, #40]	; (8004b44 <LoopForever+0x16>)
  movs r3, #0
 8004b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b1c:	e001      	b.n	8004b22 <LoopFillZerobss>

08004b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b20:	3204      	adds	r2, #4

08004b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b24:	d3fb      	bcc.n	8004b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b26:	f00a f96f 	bl	800ee08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b2a:	f7fc fd41 	bl	80015b0 <main>

08004b2e <LoopForever>:

LoopForever:
    b LoopForever
 8004b2e:	e7fe      	b.n	8004b2e <LoopForever>
  ldr   r0, =_estack
 8004b30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b38:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004b3c:	0801387c 	.word	0x0801387c
  ldr r2, =_sbss
 8004b40:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004b44:	200005b4 	.word	0x200005b4

08004b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b48:	e7fe      	b.n	8004b48 <ADC1_2_IRQHandler>

08004b4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b54:	2003      	movs	r0, #3
 8004b56:	f000 f939 	bl	8004dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b5a:	200f      	movs	r0, #15
 8004b5c:	f000 f80e 	bl	8004b7c <HAL_InitTick>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	71fb      	strb	r3, [r7, #7]
 8004b6a:	e001      	b.n	8004b70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b6c:	f7ff fdd4 	bl	8004718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b70:	79fb      	ldrb	r3, [r7, #7]

}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004b88:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <HAL_InitTick+0x68>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d022      	beq.n	8004bd6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004b90:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <HAL_InitTick+0x6c>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <HAL_InitTick+0x68>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 f944 	bl	8004e32 <HAL_SYSTICK_Config>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10f      	bne.n	8004bd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b0f      	cmp	r3, #15
 8004bb4:	d809      	bhi.n	8004bca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbe:	f000 f910 	bl	8004de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004bc2:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <HAL_InitTick+0x70>)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	e007      	b.n	8004bda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
 8004bce:	e004      	b.n	8004bda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
 8004bd4:	e001      	b.n	8004bda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20000008 	.word	0x20000008
 8004be8:	20000000 	.word	0x20000000
 8004bec:	20000004 	.word	0x20000004

08004bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HAL_IncTick+0x1c>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HAL_IncTick+0x20>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	4a03      	ldr	r2, [pc, #12]	; (8004c0c <HAL_IncTick+0x1c>)
 8004c00:	6013      	str	r3, [r2, #0]
}
 8004c02:	bf00      	nop
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	2000041c 	.word	0x2000041c
 8004c10:	20000008 	.word	0x20000008

08004c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  return uwTick;
 8004c18:	4b03      	ldr	r3, [pc, #12]	; (8004c28 <HAL_GetTick+0x14>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	2000041c 	.word	0x2000041c

08004c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <__NVIC_SetPriorityGrouping+0x44>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c5e:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <__NVIC_SetPriorityGrouping+0x44>)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	60d3      	str	r3, [r2, #12]
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	e000ed00 	.word	0xe000ed00

08004c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c78:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <__NVIC_GetPriorityGrouping+0x18>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	f003 0307 	and.w	r3, r3, #7
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	e000ed00 	.word	0xe000ed00

08004c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	db0b      	blt.n	8004cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	f003 021f 	and.w	r2, r3, #31
 8004ca8:	4907      	ldr	r1, [pc, #28]	; (8004cc8 <__NVIC_EnableIRQ+0x38>)
 8004caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	e000e100 	.word	0xe000e100

08004ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	6039      	str	r1, [r7, #0]
 8004cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	db0a      	blt.n	8004cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	490c      	ldr	r1, [pc, #48]	; (8004d18 <__NVIC_SetPriority+0x4c>)
 8004ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cea:	0112      	lsls	r2, r2, #4
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	440b      	add	r3, r1
 8004cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cf4:	e00a      	b.n	8004d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	4908      	ldr	r1, [pc, #32]	; (8004d1c <__NVIC_SetPriority+0x50>)
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	3b04      	subs	r3, #4
 8004d04:	0112      	lsls	r2, r2, #4
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	440b      	add	r3, r1
 8004d0a:	761a      	strb	r2, [r3, #24]
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	e000e100 	.word	0xe000e100
 8004d1c:	e000ed00 	.word	0xe000ed00

08004d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	; 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f1c3 0307 	rsb	r3, r3, #7
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	bf28      	it	cs
 8004d3e:	2304      	movcs	r3, #4
 8004d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	3304      	adds	r3, #4
 8004d46:	2b06      	cmp	r3, #6
 8004d48:	d902      	bls.n	8004d50 <NVIC_EncodePriority+0x30>
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	3b03      	subs	r3, #3
 8004d4e:	e000      	b.n	8004d52 <NVIC_EncodePriority+0x32>
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d54:	f04f 32ff 	mov.w	r2, #4294967295
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43da      	mvns	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	401a      	ands	r2, r3
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d68:	f04f 31ff 	mov.w	r1, #4294967295
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	43d9      	mvns	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d78:	4313      	orrs	r3, r2
         );
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3724      	adds	r7, #36	; 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d98:	d301      	bcc.n	8004d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e00f      	b.n	8004dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <SysTick_Config+0x40>)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004da6:	210f      	movs	r1, #15
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	f7ff ff8e 	bl	8004ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <SysTick_Config+0x40>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004db6:	4b04      	ldr	r3, [pc, #16]	; (8004dc8 <SysTick_Config+0x40>)
 8004db8:	2207      	movs	r2, #7
 8004dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	e000e010 	.word	0xe000e010

08004dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff ff29 	bl	8004c2c <__NVIC_SetPriorityGrouping>
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b086      	sub	sp, #24
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	4603      	mov	r3, r0
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
 8004dee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004df0:	f7ff ff40 	bl	8004c74 <__NVIC_GetPriorityGrouping>
 8004df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	6978      	ldr	r0, [r7, #20]
 8004dfc:	f7ff ff90 	bl	8004d20 <NVIC_EncodePriority>
 8004e00:	4602      	mov	r2, r0
 8004e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e06:	4611      	mov	r1, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff ff5f 	bl	8004ccc <__NVIC_SetPriority>
}
 8004e0e:	bf00      	nop
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff ff33 	bl	8004c90 <__NVIC_EnableIRQ>
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff ffa4 	bl	8004d88 <SysTick_Config>
 8004e40:	4603      	mov	r3, r0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d005      	beq.n	8004e6e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2204      	movs	r2, #4
 8004e66:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
 8004e6c:	e037      	b.n	8004ede <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 020e 	bic.w	r2, r2, #14
 8004e7c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e8c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	f003 021f 	and.w	r2, r3, #31
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	2101      	movs	r1, #1
 8004eac:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004eba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00c      	beq.n	8004ede <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ed2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004edc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d00d      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2204      	movs	r2, #4
 8004f18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
 8004f2e:	e047      	b.n	8004fc0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 020e 	bic.w	r2, r2, #14
 8004f3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	f003 021f 	and.w	r2, r3, #31
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f72:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f7c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00c      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f9e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
    }
  }
  return status;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fd8:	b2db      	uxtb	r3, r3
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e147      	b.n	800528a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fc f8ca 	bl	80011a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0210 	bic.w	r2, r2, #16
 8005022:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005024:	f7ff fdf6 	bl	8004c14 <HAL_GetTick>
 8005028:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800502a:	e012      	b.n	8005052 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800502c:	f7ff fdf2 	bl	8004c14 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b0a      	cmp	r3, #10
 8005038:	d90b      	bls.n	8005052 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503e:	f043 0201 	orr.w	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2203      	movs	r2, #3
 800504a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e11b      	b.n	800528a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b08      	cmp	r3, #8
 800505e:	d0e5      	beq.n	800502c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005070:	f7ff fdd0 	bl	8004c14 <HAL_GetTick>
 8005074:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005076:	e012      	b.n	800509e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005078:	f7ff fdcc 	bl	8004c14 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b0a      	cmp	r3, #10
 8005084:	d90b      	bls.n	800509e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508a:	f043 0201 	orr.w	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2203      	movs	r2, #3
 8005096:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e0f5      	b.n	800528a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0e5      	beq.n	8005078 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0202 	orr.w	r2, r2, #2
 80050ba:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a74      	ldr	r2, [pc, #464]	; (8005294 <HAL_FDCAN_Init+0x2ac>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d103      	bne.n	80050ce <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80050c6:	4a74      	ldr	r2, [pc, #464]	; (8005298 <HAL_FDCAN_Init+0x2b0>)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	7c1b      	ldrb	r3, [r3, #16]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d108      	bne.n	80050e8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e4:	619a      	str	r2, [r3, #24]
 80050e6:	e007      	b.n	80050f8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	7c5b      	ldrb	r3, [r3, #17]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d108      	bne.n	8005112 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800510e:	619a      	str	r2, [r3, #24]
 8005110:	e007      	b.n	8005122 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	699a      	ldr	r2, [r3, #24]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005120:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	7c9b      	ldrb	r3, [r3, #18]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d108      	bne.n	800513c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699a      	ldr	r2, [r3, #24]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005138:	619a      	str	r2, [r3, #24]
 800513a:	e007      	b.n	800514c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800514a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699a      	ldr	r2, [r3, #24]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005170:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0210 	bic.w	r2, r2, #16
 8005180:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d108      	bne.n	800519c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0204 	orr.w	r2, r2, #4
 8005198:	619a      	str	r2, [r3, #24]
 800519a:	e02c      	b.n	80051f6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d028      	beq.n	80051f6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d01c      	beq.n	80051e6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051ba:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0210 	orr.w	r2, r2, #16
 80051ca:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d110      	bne.n	80051f6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0220 	orr.w	r2, r2, #32
 80051e2:	619a      	str	r2, [r3, #24]
 80051e4:	e007      	b.n	80051f6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0220 	orr.w	r2, r2, #32
 80051f4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	3b01      	subs	r3, #1
 8005204:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005206:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800520e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	3b01      	subs	r3, #1
 8005218:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800521e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005220:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800522a:	d115      	bne.n	8005258 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005230:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	3b01      	subs	r3, #1
 8005238:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800523a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	3b01      	subs	r3, #1
 8005242:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005244:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	3b01      	subs	r3, #1
 800524e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005254:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005256:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa58 	bl	8005724 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40006400 	.word	0x40006400
 8005298:	40006500 	.word	0x40006500

0800529c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052ac:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d002      	beq.n	80052ba <HAL_FDCAN_ConfigFilter+0x1e>
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d13d      	bne.n	8005336 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d119      	bne.n	80052f6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80052ce:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80052d6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e01d      	b.n	8005332 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	075a      	lsls	r2, r3, #29
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	079a      	lsls	r2, r3, #30
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	4413      	add	r3, r2
 800531e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	3304      	adds	r3, #4
 800532a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e006      	b.n	8005344 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800533a:	f043 0202 	orr.w	r2, r3, #2
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
  }
}
 8005344:	4618      	mov	r0, r3
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b01      	cmp	r3, #1
 8005368:	d116      	bne.n	8005398 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005372:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	011a      	lsls	r2, r3, #4
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	431a      	orrs	r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	431a      	orrs	r2, r3
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	e006      	b.n	80053a6 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800539c:	f043 0204 	orr.w	r2, r3, #4
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
  }
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d108      	bne.n	80053dc <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	0219      	lsls	r1, r3, #8
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	e006      	b.n	80053ea <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e0:	f043 0204 	orr.w	r2, r3, #4
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
  }
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b01      	cmp	r3, #1
 8005408:	d109      	bne.n	800541e <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005418:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e006      	b.n	800542c <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005422:	f043 0204 	orr.w	r2, r3, #4
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
  }
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	d110      	bne.n	800546e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0201 	bic.w	r2, r2, #1
 8005462:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	e006      	b.n	800547c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005472:	f043 0204 	orr.w	r2, r3, #4
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
  }
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d12c      	bne.n	80054fa <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80054a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d007      	beq.n	80054c0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e023      	b.n	8005508 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f990 	bl	80057fc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2101      	movs	r1, #1
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	fa01 f202 	lsl.w	r2, r1, r2
 80054e8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80054ec:	2201      	movs	r2, #1
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	409a      	lsls	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	e006      	b.n	8005508 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054fe:	f043 0208 	orr.w	r2, r3, #8
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005510:	b480      	push	{r7}
 8005512:	b08b      	sub	sp, #44	; 0x2c
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005524:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005526:	7efb      	ldrb	r3, [r7, #27]
 8005528:	2b02      	cmp	r3, #2
 800552a:	f040 80bc 	bne.w	80056a6 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d121      	bne.n	8005578 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	2b00      	cmp	r3, #0
 8005542:	d107      	bne.n	8005554 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e0af      	b.n	80056b4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555c:	0a1b      	lsrs	r3, r3, #8
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	4613      	mov	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4413      	add	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	440b      	add	r3, r1
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
 8005576:	e020      	b.n	80055ba <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	2b00      	cmp	r3, #0
 8005586:	d107      	bne.n	8005598 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e08d      	b.n	80056b4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055a0:	0a1b      	lsrs	r3, r3, #8
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	4613      	mov	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4413      	add	r3, r2
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	440b      	add	r3, r1
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d107      	bne.n	80055de <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	0c9b      	lsrs	r3, r3, #18
 80055d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	e005      	b.n	80055ea <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	3304      	adds	r3, #4
 8005606:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	b29a      	uxth	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	0e1b      	lsrs	r3, r3, #24
 800563c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	0fda      	lsrs	r2, r3, #31
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	3304      	adds	r3, #4
 8005652:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005658:	2300      	movs	r3, #0
 800565a:	623b      	str	r3, [r7, #32]
 800565c:	e00a      	b.n	8005674 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	441a      	add	r2, r3
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	440b      	add	r3, r1
 800566a:	7812      	ldrb	r2, [r2, #0]
 800566c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	3301      	adds	r3, #1
 8005672:	623b      	str	r3, [r7, #32]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	4a11      	ldr	r2, [pc, #68]	; (80056c0 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800567c:	5cd3      	ldrb	r3, [r2, r3]
 800567e:	461a      	mov	r2, r3
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	4293      	cmp	r3, r2
 8005684:	d3eb      	bcc.n	800565e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	d105      	bne.n	8005698 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005696:	e004      	b.n	80056a2 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	e006      	b.n	80056b4 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056aa:	f043 0208 	orr.w	r2, r3, #8
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
  }
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	372c      	adds	r7, #44	; 0x2c
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	08012e18 	.word	0x08012e18

080056c4 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b40      	cmp	r3, #64	; 0x40
 80056d2:	d107      	bne.n	80056e4 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	e006      	b.n	80056f2 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 80056f2:	68fb      	ldr	r3, [r7, #12]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005716:	68fb      	ldr	r3, [r7, #12]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800572c:	4b30      	ldr	r3, [pc, #192]	; (80057f0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800572e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2f      	ldr	r2, [pc, #188]	; (80057f4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d103      	bne.n	8005742 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005740:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a2c      	ldr	r2, [pc, #176]	; (80057f8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d103      	bne.n	8005754 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005752:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005762:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	041a      	lsls	r2, r3, #16
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005788:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	061a      	lsls	r2, r3, #24
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e005      	b.n	80057d6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3304      	adds	r3, #4
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d3f3      	bcc.n	80057ca <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	4000a400 	.word	0x4000a400
 80057f4:	40006800 	.word	0x40006800
 80057f8:	40006c00 	.word	0x40006c00

080057fc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b089      	sub	sp, #36	; 0x24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800581a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005822:	4313      	orrs	r3, r2
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	e00a      	b.n	800583e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005830:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005836:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800583c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005848:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800584e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005854:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4413      	add	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	440b      	add	r3, r1
 800586e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	3304      	adds	r3, #4
 800587a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	3304      	adds	r3, #4
 8005886:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	e020      	b.n	80058d0 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	3303      	adds	r3, #3
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	4413      	add	r3, r2
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	3302      	adds	r3, #2
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	440b      	add	r3, r1
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80058a6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	3301      	adds	r3, #1
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	440b      	add	r3, r1
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80058b4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	440a      	add	r2, r1
 80058bc:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80058be:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	3304      	adds	r3, #4
 80058c8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	3304      	adds	r3, #4
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	0c1b      	lsrs	r3, r3, #16
 80058d6:	4a06      	ldr	r2, [pc, #24]	; (80058f0 <FDCAN_CopyMessageToRAM+0xf4>)
 80058d8:	5cd3      	ldrb	r3, [r2, r3]
 80058da:	461a      	mov	r2, r3
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	4293      	cmp	r3, r2
 80058e0:	d3d5      	bcc.n	800588e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	3724      	adds	r7, #36	; 0x24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	08012e18 	.word	0x08012e18

080058f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005902:	e15a      	b.n	8005bba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	2101      	movs	r1, #1
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	fa01 f303 	lsl.w	r3, r1, r3
 8005910:	4013      	ands	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 814c 	beq.w	8005bb4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	2b01      	cmp	r3, #1
 8005926:	d005      	beq.n	8005934 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005930:	2b02      	cmp	r3, #2
 8005932:	d130      	bne.n	8005996 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	2203      	movs	r2, #3
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	43db      	mvns	r3, r3
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4013      	ands	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800596a:	2201      	movs	r2, #1
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	43db      	mvns	r3, r3
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4013      	ands	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	091b      	lsrs	r3, r3, #4
 8005980:	f003 0201 	and.w	r2, r3, #1
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d017      	beq.n	80059d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	2203      	movs	r2, #3
 80059ae:	fa02 f303 	lsl.w	r3, r2, r3
 80059b2:	43db      	mvns	r3, r3
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4013      	ands	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d123      	bne.n	8005a26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	08da      	lsrs	r2, r3, #3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3208      	adds	r2, #8
 80059e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	220f      	movs	r2, #15
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	43db      	mvns	r3, r3
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4013      	ands	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	08da      	lsrs	r2, r3, #3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3208      	adds	r2, #8
 8005a20:	6939      	ldr	r1, [r7, #16]
 8005a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	2203      	movs	r2, #3
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	43db      	mvns	r3, r3
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f003 0203 	and.w	r2, r3, #3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 80a6 	beq.w	8005bb4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a68:	4b5b      	ldr	r3, [pc, #364]	; (8005bd8 <HAL_GPIO_Init+0x2e4>)
 8005a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6c:	4a5a      	ldr	r2, [pc, #360]	; (8005bd8 <HAL_GPIO_Init+0x2e4>)
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	6613      	str	r3, [r2, #96]	; 0x60
 8005a74:	4b58      	ldr	r3, [pc, #352]	; (8005bd8 <HAL_GPIO_Init+0x2e4>)
 8005a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	60bb      	str	r3, [r7, #8]
 8005a7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a80:	4a56      	ldr	r2, [pc, #344]	; (8005bdc <HAL_GPIO_Init+0x2e8>)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	089b      	lsrs	r3, r3, #2
 8005a86:	3302      	adds	r3, #2
 8005a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f003 0303 	and.w	r3, r3, #3
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	220f      	movs	r2, #15
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005aaa:	d01f      	beq.n	8005aec <HAL_GPIO_Init+0x1f8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a4c      	ldr	r2, [pc, #304]	; (8005be0 <HAL_GPIO_Init+0x2ec>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d019      	beq.n	8005ae8 <HAL_GPIO_Init+0x1f4>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a4b      	ldr	r2, [pc, #300]	; (8005be4 <HAL_GPIO_Init+0x2f0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d013      	beq.n	8005ae4 <HAL_GPIO_Init+0x1f0>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a4a      	ldr	r2, [pc, #296]	; (8005be8 <HAL_GPIO_Init+0x2f4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00d      	beq.n	8005ae0 <HAL_GPIO_Init+0x1ec>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a49      	ldr	r2, [pc, #292]	; (8005bec <HAL_GPIO_Init+0x2f8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d007      	beq.n	8005adc <HAL_GPIO_Init+0x1e8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a48      	ldr	r2, [pc, #288]	; (8005bf0 <HAL_GPIO_Init+0x2fc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d101      	bne.n	8005ad8 <HAL_GPIO_Init+0x1e4>
 8005ad4:	2305      	movs	r3, #5
 8005ad6:	e00a      	b.n	8005aee <HAL_GPIO_Init+0x1fa>
 8005ad8:	2306      	movs	r3, #6
 8005ada:	e008      	b.n	8005aee <HAL_GPIO_Init+0x1fa>
 8005adc:	2304      	movs	r3, #4
 8005ade:	e006      	b.n	8005aee <HAL_GPIO_Init+0x1fa>
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e004      	b.n	8005aee <HAL_GPIO_Init+0x1fa>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e002      	b.n	8005aee <HAL_GPIO_Init+0x1fa>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <HAL_GPIO_Init+0x1fa>
 8005aec:	2300      	movs	r3, #0
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	f002 0203 	and.w	r2, r2, #3
 8005af4:	0092      	lsls	r2, r2, #2
 8005af6:	4093      	lsls	r3, r2
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005afe:	4937      	ldr	r1, [pc, #220]	; (8005bdc <HAL_GPIO_Init+0x2e8>)
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	089b      	lsrs	r3, r3, #2
 8005b04:	3302      	adds	r3, #2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b0c:	4b39      	ldr	r3, [pc, #228]	; (8005bf4 <HAL_GPIO_Init+0x300>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b30:	4a30      	ldr	r2, [pc, #192]	; (8005bf4 <HAL_GPIO_Init+0x300>)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b36:	4b2f      	ldr	r3, [pc, #188]	; (8005bf4 <HAL_GPIO_Init+0x300>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4013      	ands	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b5a:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <HAL_GPIO_Init+0x300>)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005b60:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <HAL_GPIO_Init+0x300>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b84:	4a1b      	ldr	r2, [pc, #108]	; (8005bf4 <HAL_GPIO_Init+0x300>)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005b8a:	4b1a      	ldr	r3, [pc, #104]	; (8005bf4 <HAL_GPIO_Init+0x300>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	43db      	mvns	r3, r3
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4013      	ands	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005bae:	4a11      	ldr	r2, [pc, #68]	; (8005bf4 <HAL_GPIO_Init+0x300>)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f47f ae9d 	bne.w	8005904 <HAL_GPIO_Init+0x10>
  }
}
 8005bca:	bf00      	nop
 8005bcc:	bf00      	nop
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	40010000 	.word	0x40010000
 8005be0:	48000400 	.word	0x48000400
 8005be4:	48000800 	.word	0x48000800
 8005be8:	48000c00 	.word	0x48000c00
 8005bec:	48001000 	.word	0x48001000
 8005bf0:	48001400 	.word	0x48001400
 8005bf4:	40010400 	.word	0x40010400

08005bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	807b      	strh	r3, [r7, #2]
 8005c04:	4613      	mov	r3, r2
 8005c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c08:	787b      	ldrb	r3, [r7, #1]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c0e:	887a      	ldrh	r2, [r7, #2]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c14:	e002      	b.n	8005c1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c16:	887a      	ldrh	r2, [r7, #2]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c3a:	887a      	ldrh	r2, [r7, #2]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	041a      	lsls	r2, r3, #16
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	43d9      	mvns	r1, r3
 8005c46:	887b      	ldrh	r3, [r7, #2]
 8005c48:	400b      	ands	r3, r1
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	619a      	str	r2, [r3, #24]
}
 8005c50:	bf00      	nop
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e08d      	b.n	8005d8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fb fba4 	bl	80013d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2224      	movs	r2, #36	; 0x24
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d107      	bne.n	8005cd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cd2:	609a      	str	r2, [r3, #8]
 8005cd4:	e006      	b.n	8005ce4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ce2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d108      	bne.n	8005cfe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cfa:	605a      	str	r2, [r3, #4]
 8005cfc:	e007      	b.n	8005d0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691a      	ldr	r2, [r3, #16]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69d9      	ldr	r1, [r3, #28]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1a      	ldr	r2, [r3, #32]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	460b      	mov	r3, r1
 8005da2:	817b      	strh	r3, [r7, #10]
 8005da4:	4613      	mov	r3, r2
 8005da6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	f040 80fd 	bne.w	8005fb0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_I2C_Master_Transmit+0x30>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e0f6      	b.n	8005fb2 <HAL_I2C_Master_Transmit+0x21e>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dcc:	f7fe ff22 	bl	8004c14 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	2319      	movs	r3, #25
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f001 ffa7 	bl	8007d32 <I2C_WaitOnFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e0e1      	b.n	8005fb2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2221      	movs	r2, #33	; 0x21
 8005df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2210      	movs	r2, #16
 8005dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	893a      	ldrh	r2, [r7, #8]
 8005e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2bff      	cmp	r3, #255	; 0xff
 8005e1e:	d906      	bls.n	8005e2e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	22ff      	movs	r2, #255	; 0xff
 8005e24:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005e26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	e007      	b.n	8005e3e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e3c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d024      	beq.n	8005e90 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	781a      	ldrb	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	8979      	ldrh	r1, [r7, #10]
 8005e82:	4b4e      	ldr	r3, [pc, #312]	; (8005fbc <HAL_I2C_Master_Transmit+0x228>)
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f002 f9a1 	bl	80081d0 <I2C_TransferConfig>
 8005e8e:	e066      	b.n	8005f5e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	8979      	ldrh	r1, [r7, #10]
 8005e98:	4b48      	ldr	r3, [pc, #288]	; (8005fbc <HAL_I2C_Master_Transmit+0x228>)
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f002 f996 	bl	80081d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005ea4:	e05b      	b.n	8005f5e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	6a39      	ldr	r1, [r7, #32]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f001 ff9a 	bl	8007de4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e07b      	b.n	8005fb2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	781a      	ldrb	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d034      	beq.n	8005f5e <HAL_I2C_Master_Transmit+0x1ca>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d130      	bne.n	8005f5e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	2200      	movs	r2, #0
 8005f04:	2180      	movs	r1, #128	; 0x80
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f001 ff13 	bl	8007d32 <I2C_WaitOnFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e04d      	b.n	8005fb2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2bff      	cmp	r3, #255	; 0xff
 8005f1e:	d90e      	bls.n	8005f3e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	22ff      	movs	r2, #255	; 0xff
 8005f24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	8979      	ldrh	r1, [r7, #10]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f002 f94a 	bl	80081d0 <I2C_TransferConfig>
 8005f3c:	e00f      	b.n	8005f5e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	8979      	ldrh	r1, [r7, #10]
 8005f50:	2300      	movs	r3, #0
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f002 f939 	bl	80081d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d19e      	bne.n	8005ea6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	6a39      	ldr	r1, [r7, #32]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f001 ff80 	bl	8007e72 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e01a      	b.n	8005fb2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2220      	movs	r2, #32
 8005f82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b0c      	ldr	r3, [pc, #48]	; (8005fc0 <HAL_I2C_Master_Transmit+0x22c>)
 8005f90:	400b      	ands	r3, r1
 8005f92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	e000      	b.n	8005fb2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005fb0:	2302      	movs	r3, #2
  }
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	80002000 	.word	0x80002000
 8005fc0:	fe00e800 	.word	0xfe00e800

08005fc4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	607a      	str	r2, [r7, #4]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	817b      	strh	r3, [r7, #10]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	f040 80db 	bne.w	800619c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_I2C_Master_Receive+0x30>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e0d4      	b.n	800619e <HAL_I2C_Master_Receive+0x1da>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ffc:	f7fe fe0a 	bl	8004c14 <HAL_GetTick>
 8006000:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	2319      	movs	r3, #25
 8006008:	2201      	movs	r2, #1
 800600a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f001 fe8f 	bl	8007d32 <I2C_WaitOnFlagUntilTimeout>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e0bf      	b.n	800619e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2222      	movs	r2, #34	; 0x22
 8006022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2210      	movs	r2, #16
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	893a      	ldrh	r2, [r7, #8]
 800603e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604a:	b29b      	uxth	r3, r3
 800604c:	2bff      	cmp	r3, #255	; 0xff
 800604e:	d90e      	bls.n	800606e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	22ff      	movs	r2, #255	; 0xff
 8006054:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605a:	b2da      	uxtb	r2, r3
 800605c:	8979      	ldrh	r1, [r7, #10]
 800605e:	4b52      	ldr	r3, [pc, #328]	; (80061a8 <HAL_I2C_Master_Receive+0x1e4>)
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f002 f8b2 	bl	80081d0 <I2C_TransferConfig>
 800606c:	e06d      	b.n	800614a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607c:	b2da      	uxtb	r2, r3
 800607e:	8979      	ldrh	r1, [r7, #10]
 8006080:	4b49      	ldr	r3, [pc, #292]	; (80061a8 <HAL_I2C_Master_Receive+0x1e4>)
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f002 f8a1 	bl	80081d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800608e:	e05c      	b.n	800614a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	6a39      	ldr	r1, [r7, #32]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f001 ff2f 	bl	8007ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e07c      	b.n	800619e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d034      	beq.n	800614a <HAL_I2C_Master_Receive+0x186>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d130      	bne.n	800614a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	2200      	movs	r2, #0
 80060f0:	2180      	movs	r1, #128	; 0x80
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f001 fe1d 	bl	8007d32 <I2C_WaitOnFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e04d      	b.n	800619e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	2bff      	cmp	r3, #255	; 0xff
 800610a:	d90e      	bls.n	800612a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	22ff      	movs	r2, #255	; 0xff
 8006110:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006116:	b2da      	uxtb	r2, r3
 8006118:	8979      	ldrh	r1, [r7, #10]
 800611a:	2300      	movs	r3, #0
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f002 f854 	bl	80081d0 <I2C_TransferConfig>
 8006128:	e00f      	b.n	800614a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006138:	b2da      	uxtb	r2, r3
 800613a:	8979      	ldrh	r1, [r7, #10]
 800613c:	2300      	movs	r3, #0
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f002 f843 	bl	80081d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d19d      	bne.n	8006090 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	6a39      	ldr	r1, [r7, #32]
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f001 fe8a 	bl	8007e72 <I2C_WaitOnSTOPFlagUntilTimeout>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e01a      	b.n	800619e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2220      	movs	r2, #32
 800616e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6859      	ldr	r1, [r3, #4]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b0c      	ldr	r3, [pc, #48]	; (80061ac <HAL_I2C_Master_Receive+0x1e8>)
 800617c:	400b      	ands	r3, r1
 800617e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	e000      	b.n	800619e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800619c:	2302      	movs	r3, #2
  }
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	80002400 	.word	0x80002400
 80061ac:	fe00e800 	.word	0xfe00e800

080061b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	4608      	mov	r0, r1
 80061ba:	4611      	mov	r1, r2
 80061bc:	461a      	mov	r2, r3
 80061be:	4603      	mov	r3, r0
 80061c0:	817b      	strh	r3, [r7, #10]
 80061c2:	460b      	mov	r3, r1
 80061c4:	813b      	strh	r3, [r7, #8]
 80061c6:	4613      	mov	r3, r2
 80061c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	f040 80fd 	bne.w	80063d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <HAL_I2C_Mem_Read+0x34>
 80061de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d105      	bne.n	80061f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e0f1      	b.n	80063d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_I2C_Mem_Read+0x4e>
 80061fa:	2302      	movs	r3, #2
 80061fc:	e0ea      	b.n	80063d4 <HAL_I2C_Mem_Read+0x224>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006206:	f7fe fd05 	bl	8004c14 <HAL_GetTick>
 800620a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	2319      	movs	r3, #25
 8006212:	2201      	movs	r2, #1
 8006214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f001 fd8a 	bl	8007d32 <I2C_WaitOnFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e0d5      	b.n	80063d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2222      	movs	r2, #34	; 0x22
 800622c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2240      	movs	r2, #64	; 0x40
 8006234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a3a      	ldr	r2, [r7, #32]
 8006242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006248:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006250:	88f8      	ldrh	r0, [r7, #6]
 8006252:	893a      	ldrh	r2, [r7, #8]
 8006254:	8979      	ldrh	r1, [r7, #10]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	4603      	mov	r3, r0
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f001 f81b 	bl	800729c <I2C_RequestMemoryRead>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d005      	beq.n	8006278 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e0ad      	b.n	80063d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	2bff      	cmp	r3, #255	; 0xff
 8006280:	d90e      	bls.n	80062a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	22ff      	movs	r2, #255	; 0xff
 8006286:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628c:	b2da      	uxtb	r2, r3
 800628e:	8979      	ldrh	r1, [r7, #10]
 8006290:	4b52      	ldr	r3, [pc, #328]	; (80063dc <HAL_I2C_Mem_Read+0x22c>)
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f001 ff99 	bl	80081d0 <I2C_TransferConfig>
 800629e:	e00f      	b.n	80062c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	8979      	ldrh	r1, [r7, #10]
 80062b2:	4b4a      	ldr	r3, [pc, #296]	; (80063dc <HAL_I2C_Mem_Read+0x22c>)
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f001 ff88 	bl	80081d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	2200      	movs	r2, #0
 80062c8:	2104      	movs	r1, #4
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f001 fd31 	bl	8007d32 <I2C_WaitOnFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e07c      	b.n	80063d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d034      	beq.n	8006380 <HAL_I2C_Mem_Read+0x1d0>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631a:	2b00      	cmp	r3, #0
 800631c:	d130      	bne.n	8006380 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	2200      	movs	r2, #0
 8006326:	2180      	movs	r1, #128	; 0x80
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f001 fd02 	bl	8007d32 <I2C_WaitOnFlagUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e04d      	b.n	80063d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633c:	b29b      	uxth	r3, r3
 800633e:	2bff      	cmp	r3, #255	; 0xff
 8006340:	d90e      	bls.n	8006360 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	22ff      	movs	r2, #255	; 0xff
 8006346:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634c:	b2da      	uxtb	r2, r3
 800634e:	8979      	ldrh	r1, [r7, #10]
 8006350:	2300      	movs	r3, #0
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f001 ff39 	bl	80081d0 <I2C_TransferConfig>
 800635e:	e00f      	b.n	8006380 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636e:	b2da      	uxtb	r2, r3
 8006370:	8979      	ldrh	r1, [r7, #10]
 8006372:	2300      	movs	r3, #0
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f001 ff28 	bl	80081d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d19a      	bne.n	80062c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f001 fd6f 	bl	8007e72 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e01a      	b.n	80063d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2220      	movs	r2, #32
 80063a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6859      	ldr	r1, [r3, #4]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <HAL_I2C_Mem_Read+0x230>)
 80063b2:	400b      	ands	r3, r1
 80063b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	e000      	b.n	80063d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80063d2:	2302      	movs	r3, #2
  }
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	80002400 	.word	0x80002400
 80063e0:	fe00e800 	.word	0xfe00e800

080063e4 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	4608      	mov	r0, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	461a      	mov	r2, r3
 80063f2:	4603      	mov	r3, r0
 80063f4:	817b      	strh	r3, [r7, #10]
 80063f6:	460b      	mov	r3, r1
 80063f8:	813b      	strh	r3, [r7, #8]
 80063fa:	4613      	mov	r3, r2
 80063fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b20      	cmp	r3, #32
 8006408:	d16a      	bne.n	80064e0 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <HAL_I2C_Mem_Write_IT+0x32>
 8006410:	8bbb      	ldrh	r3, [r7, #28]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d105      	bne.n	8006422 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800641c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e05f      	b.n	80064e2 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800642c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006430:	d101      	bne.n	8006436 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8006432:	2302      	movs	r3, #2
 8006434:	e055      	b.n	80064e2 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_I2C_Mem_Write_IT+0x60>
 8006440:	2302      	movs	r3, #2
 8006442:	e04e      	b.n	80064e2 <HAL_I2C_Mem_Write_IT+0xfe>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2221      	movs	r2, #33	; 0x21
 8006450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2240      	movs	r2, #64	; 0x40
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8bba      	ldrh	r2, [r7, #28]
 8006472:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4a1d      	ldr	r2, [pc, #116]	; (80064ec <HAL_I2C_Mem_Write_IT+0x108>)
 8006478:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4a1c      	ldr	r2, [pc, #112]	; (80064f0 <HAL_I2C_Mem_Write_IT+0x10c>)
 800647e:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8006480:	897a      	ldrh	r2, [r7, #10]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d109      	bne.n	80064a0 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800648c:	893b      	ldrh	r3, [r7, #8]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f04f 32ff 	mov.w	r2, #4294967295
 800649c:	651a      	str	r2, [r3, #80]	; 0x50
 800649e:	e00b      	b.n	80064b8 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064a0:	893b      	ldrh	r3, [r7, #8]
 80064a2:	0a1b      	lsrs	r3, r3, #8
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80064ae:	893b      	ldrh	r3, [r7, #8]
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	8979      	ldrh	r1, [r7, #10]
 80064be:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <HAL_I2C_Mem_Write_IT+0x110>)
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f001 fe82 	bl	80081d0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064d4:	2101      	movs	r1, #1
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f001 feac 	bl	8008234 <I2C_Enable_IRQ>

    return HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	e000      	b.n	80064e2 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80064e0:	2302      	movs	r3, #2
  }
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	ffff0000 	.word	0xffff0000
 80064f0:	0800688d 	.word	0x0800688d
 80064f4:	80002000 	.word	0x80002000

080064f8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	; 0x28
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	607a      	str	r2, [r7, #4]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	460b      	mov	r3, r1
 8006506:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006508:	2300      	movs	r3, #0
 800650a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b20      	cmp	r3, #32
 8006516:	f040 80d6 	bne.w	80066c6 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006528:	d101      	bne.n	800652e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800652a:	2302      	movs	r3, #2
 800652c:	e0cc      	b.n	80066c8 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_I2C_IsDeviceReady+0x44>
 8006538:	2302      	movs	r3, #2
 800653a:	e0c5      	b.n	80066c8 <HAL_I2C_IsDeviceReady+0x1d0>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2224      	movs	r2, #36	; 0x24
 8006548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d107      	bne.n	800656a <HAL_I2C_IsDeviceReady+0x72>
 800655a:	897b      	ldrh	r3, [r7, #10]
 800655c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006560:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006564:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006568:	e006      	b.n	8006578 <HAL_I2C_IsDeviceReady+0x80>
 800656a:	897b      	ldrh	r3, [r7, #10]
 800656c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006574:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	6812      	ldr	r2, [r2, #0]
 800657c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800657e:	f7fe fb49 	bl	8004c14 <HAL_GetTick>
 8006582:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b20      	cmp	r3, #32
 8006590:	bf0c      	ite	eq
 8006592:	2301      	moveq	r3, #1
 8006594:	2300      	movne	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b10      	cmp	r3, #16
 80065a6:	bf0c      	ite	eq
 80065a8:	2301      	moveq	r3, #1
 80065aa:	2300      	movne	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80065b0:	e034      	b.n	800661c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b8:	d01a      	beq.n	80065f0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065ba:	f7fe fb2b 	bl	8004c14 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d302      	bcc.n	80065d0 <HAL_I2C_IsDeviceReady+0xd8>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10f      	bne.n	80065f0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065dc:	f043 0220 	orr.w	r2, r3, #32
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e06b      	b.n	80066c8 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	bf0c      	ite	eq
 80065fe:	2301      	moveq	r3, #1
 8006600:	2300      	movne	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b10      	cmp	r3, #16
 8006612:	bf0c      	ite	eq
 8006614:	2301      	moveq	r3, #1
 8006616:	2300      	movne	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800661c:	7ffb      	ldrb	r3, [r7, #31]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d102      	bne.n	8006628 <HAL_I2C_IsDeviceReady+0x130>
 8006622:	7fbb      	ldrb	r3, [r7, #30]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0c4      	beq.n	80065b2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	f003 0310 	and.w	r3, r3, #16
 8006632:	2b10      	cmp	r3, #16
 8006634:	d01a      	beq.n	800666c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2200      	movs	r2, #0
 800663e:	2120      	movs	r1, #32
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f001 fb76 	bl	8007d32 <I2C_WaitOnFlagUntilTimeout>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e03b      	b.n	80066c8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2220      	movs	r2, #32
 8006656:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	e02d      	b.n	80066c8 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2200      	movs	r2, #0
 8006674:	2120      	movs	r1, #32
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f001 fb5b 	bl	8007d32 <I2C_WaitOnFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e020      	b.n	80066c8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2210      	movs	r2, #16
 800668c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2220      	movs	r2, #32
 8006694:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	3301      	adds	r3, #1
 800669a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	f63f af56 	bhi.w	8006552 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b2:	f043 0220 	orr.w	r2, r3, #32
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80066c6:	2302      	movs	r3, #2
  }
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	68f9      	ldr	r1, [r7, #12]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	4798      	blx	r3
  }
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00f      	beq.n	8006746 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00a      	beq.n	8006746 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006734:	f043 0201 	orr.w	r2, r3, #1
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006744:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00f      	beq.n	8006770 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675e:	f043 0208 	orr.w	r2, r3, #8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800676e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00f      	beq.n	800679a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006788:	f043 0202 	orr.w	r2, r3, #2
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006798:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f003 030b 	and.w	r3, r3, #11
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80067aa:	68f9      	ldr	r1, [r7, #12]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 f967 	bl	8007a80 <I2C_ITError>
  }
}
 80067b2:	bf00      	nop
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	460b      	mov	r3, r1
 8006814:	70fb      	strb	r3, [r7, #3]
 8006816:	4613      	mov	r3, r2
 8006818:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af02      	add	r7, sp, #8
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006898:	4b8d      	ldr	r3, [pc, #564]	; (8006ad0 <I2C_Mem_ISR_IT+0x244>)
 800689a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d101      	bne.n	80068ae <I2C_Mem_ISR_IT+0x22>
 80068aa:	2302      	movs	r3, #2
 80068ac:	e10c      	b.n	8006ac8 <I2C_Mem_ISR_IT+0x23c>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f003 0310 	and.w	r3, r3, #16
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d012      	beq.n	80068e6 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00d      	beq.n	80068e6 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2210      	movs	r2, #16
 80068d0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d6:	f043 0204 	orr.w	r2, r3, #4
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f001 f9e5 	bl	8007cae <I2C_Flush_TXDR>
 80068e4:	e0dd      	b.n	8006aa2 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d022      	beq.n	8006936 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d01d      	beq.n	8006936 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f023 0304 	bic.w	r3, r3, #4
 8006900:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691e:	3b01      	subs	r3, #1
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006934:	e0b5      	b.n	8006aa2 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d02c      	beq.n	800699a <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006946:	2b00      	cmp	r3, #0
 8006948:	d027      	beq.n	800699a <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006952:	d118      	bne.n	8006986 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	781a      	ldrb	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800696e:	3b01      	subs	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8006984:	e08d      	b.n	8006aa2 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800698e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8006998:	e083      	b.n	8006aa2 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d03c      	beq.n	8006a1e <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d037      	beq.n	8006a1e <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d02c      	beq.n	8006a12 <I2C_Mem_ISR_IT+0x186>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d128      	bne.n	8006a12 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2bff      	cmp	r3, #255	; 0xff
 80069c8:	d910      	bls.n	80069ec <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	22ff      	movs	r2, #255	; 0xff
 80069ce:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d4:	b299      	uxth	r1, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	2300      	movs	r3, #0
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f001 fbf3 	bl	80081d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069ea:	e017      	b.n	8006a1c <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fa:	b299      	uxth	r1, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	2300      	movs	r3, #0
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f001 fbe0 	bl	80081d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a10:	e004      	b.n	8006a1c <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a12:	2140      	movs	r1, #64	; 0x40
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f001 f833 	bl	8007a80 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a1a:	e042      	b.n	8006aa2 <I2C_Mem_ISR_IT+0x216>
 8006a1c:	e041      	b.n	8006aa2 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d03c      	beq.n	8006aa2 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d037      	beq.n	8006aa2 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a32:	2101      	movs	r1, #1
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f001 fc81 	bl	800833c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a3a:	2102      	movs	r1, #2
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f001 fbf9 	bl	8008234 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b22      	cmp	r3, #34	; 0x22
 8006a4c:	d101      	bne.n	8006a52 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8006a4e:	4b21      	ldr	r3, [pc, #132]	; (8006ad4 <I2C_Mem_ISR_IT+0x248>)
 8006a50:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2bff      	cmp	r3, #255	; 0xff
 8006a5a:	d910      	bls.n	8006a7e <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	22ff      	movs	r2, #255	; 0xff
 8006a60:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a66:	b299      	uxth	r1, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f001 fbaa 	bl	80081d0 <I2C_TransferConfig>
 8006a7c:	e011      	b.n	8006aa2 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a8c:	b299      	uxth	r1, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f001 fb97 	bl	80081d0 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f003 0320 	and.w	r3, r3, #32
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d008      	beq.n	8006abe <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006ab6:	6939      	ldr	r1, [r7, #16]
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 fd61 	bl	8007580 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	80002000 	.word	0x80002000
 8006ad4:	80002400 	.word	0x80002400

08006ad8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <I2C_Slave_ISR_IT+0x24>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e0e2      	b.n	8006cc2 <I2C_Slave_ISR_IT+0x1ea>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d009      	beq.n	8006b22 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006b18:	6939      	ldr	r1, [r7, #16]
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fdf8 	bl	8007710 <I2C_ITSlaveCplt>
 8006b20:	e0ca      	b.n	8006cb8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f003 0310 	and.w	r3, r3, #16
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d04b      	beq.n	8006bc4 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d046      	beq.n	8006bc4 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d128      	bne.n	8006b92 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b28      	cmp	r3, #40	; 0x28
 8006b4a:	d108      	bne.n	8006b5e <I2C_Slave_ISR_IT+0x86>
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b52:	d104      	bne.n	8006b5e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006b54:	6939      	ldr	r1, [r7, #16]
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 ff3e 	bl	80079d8 <I2C_ITListenCplt>
 8006b5c:	e031      	b.n	8006bc2 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b29      	cmp	r3, #41	; 0x29
 8006b68:	d10e      	bne.n	8006b88 <I2C_Slave_ISR_IT+0xb0>
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b70:	d00a      	beq.n	8006b88 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2210      	movs	r2, #16
 8006b78:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f001 f897 	bl	8007cae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 fca0 	bl	80074c6 <I2C_ITSlaveSeqCplt>
 8006b86:	e01c      	b.n	8006bc2 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2210      	movs	r2, #16
 8006b8e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006b90:	e08f      	b.n	8006cb2 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2210      	movs	r2, #16
 8006b98:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9e:	f043 0204 	orr.w	r2, r3, #4
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <I2C_Slave_ISR_IT+0xdc>
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bb2:	d17e      	bne.n	8006cb2 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb8:	4619      	mov	r1, r3
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f000 ff60 	bl	8007a80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006bc0:	e077      	b.n	8006cb2 <I2C_Slave_ISR_IT+0x1da>
 8006bc2:	e076      	b.n	8006cb2 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d02f      	beq.n	8006c2e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d02a      	beq.n	8006c2e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d018      	beq.n	8006c14 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d14b      	bne.n	8006cb6 <I2C_Slave_ISR_IT+0x1de>
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c24:	d047      	beq.n	8006cb6 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fc4d 	bl	80074c6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006c2c:	e043      	b.n	8006cb6 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d009      	beq.n	8006c4c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d004      	beq.n	8006c4c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006c42:	6939      	ldr	r1, [r7, #16]
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 fb7d 	bl	8007344 <I2C_ITAddrCplt>
 8006c4a:	e035      	b.n	8006cb8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d030      	beq.n	8006cb8 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d02b      	beq.n	8006cb8 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d018      	beq.n	8006c9c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	781a      	ldrb	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c92:	3b01      	subs	r3, #1
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c9a:	e00d      	b.n	8006cb8 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ca2:	d002      	beq.n	8006caa <I2C_Slave_ISR_IT+0x1d2>
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d106      	bne.n	8006cb8 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 fc0b 	bl	80074c6 <I2C_ITSlaveSeqCplt>
 8006cb0:	e002      	b.n	8006cb8 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006cb2:	bf00      	nop
 8006cb4:	e000      	b.n	8006cb8 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006cb6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b088      	sub	sp, #32
 8006cce:	af02      	add	r7, sp, #8
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <I2C_Master_ISR_DMA+0x1a>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e0d9      	b.n	8006e98 <I2C_Master_ISR_DMA+0x1ce>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d016      	beq.n	8006d24 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d011      	beq.n	8006d24 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2210      	movs	r2, #16
 8006d06:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0c:	f043 0204 	orr.w	r2, r3, #4
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006d14:	2120      	movs	r1, #32
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f001 fa8c 	bl	8008234 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 ffc6 	bl	8007cae <I2C_Flush_TXDR>
 8006d22:	e0b4      	b.n	8006e8e <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d071      	beq.n	8006e12 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d06c      	beq.n	8006e12 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d46:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d04e      	beq.n	8006df0 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d5e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2bff      	cmp	r3, #255	; 0xff
 8006d68:	d906      	bls.n	8006d78 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	22ff      	movs	r2, #255	; 0xff
 8006d6e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	e010      	b.n	8006d9a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d8a:	d003      	beq.n	8006d94 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	e002      	b.n	8006d9a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006d94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d98:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	8a79      	ldrh	r1, [r7, #18]
 8006da2:	2300      	movs	r3, #0
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f001 fa11 	bl	80081d0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b22      	cmp	r3, #34	; 0x22
 8006dca:	d108      	bne.n	8006dde <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dda:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006ddc:	e057      	b.n	8006e8e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006dee:	e04e      	b.n	8006e8e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dfe:	d003      	beq.n	8006e08 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 fb23 	bl	800744c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006e06:	e042      	b.n	8006e8e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006e08:	2140      	movs	r1, #64	; 0x40
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 fe38 	bl	8007a80 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006e10:	e03d      	b.n	8006e8e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d028      	beq.n	8006e6e <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d023      	beq.n	8006e6e <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d119      	bne.n	8006e64 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e3e:	d025      	beq.n	8006e8c <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e48:	d108      	bne.n	8006e5c <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e58:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006e5a:	e017      	b.n	8006e8c <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 faf5 	bl	800744c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006e62:	e013      	b.n	8006e8c <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006e64:	2140      	movs	r1, #64	; 0x40
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 fe0a 	bl	8007a80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006e6c:	e00e      	b.n	8006e8c <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f003 0320 	and.w	r3, r3, #32
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 fb7b 	bl	8007580 <I2C_ITMasterCplt>
 8006e8a:	e000      	b.n	8006e8e <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006e8c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006eac:	4b8d      	ldr	r3, [pc, #564]	; (80070e4 <I2C_Mem_ISR_DMA+0x244>)
 8006eae:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <I2C_Mem_ISR_DMA+0x1e>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e10e      	b.n	80070dc <I2C_Mem_ISR_DMA+0x23c>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d016      	beq.n	8006efe <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d011      	beq.n	8006efe <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2210      	movs	r2, #16
 8006ee0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee6:	f043 0204 	orr.w	r2, r3, #4
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006eee:	2120      	movs	r1, #32
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f001 f99f 	bl	8008234 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 fed9 	bl	8007cae <I2C_Flush_TXDR>
 8006efc:	e0e9      	b.n	80070d2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00e      	beq.n	8006f26 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d009      	beq.n	8006f26 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f22:	651a      	str	r2, [r3, #80]	; 0x50
 8006f24:	e0d5      	b.n	80070d2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d05f      	beq.n	8006ff0 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d05a      	beq.n	8006ff0 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f001 f9fd 	bl	800833c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006f42:	2110      	movs	r1, #16
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f001 f975 	bl	8008234 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d048      	beq.n	8006fe6 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2bff      	cmp	r3, #255	; 0xff
 8006f5c:	d910      	bls.n	8006f80 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	22ff      	movs	r2, #255	; 0xff
 8006f62:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f68:	b299      	uxth	r1, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	2300      	movs	r3, #0
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f001 f929 	bl	80081d0 <I2C_TransferConfig>
 8006f7e:	e011      	b.n	8006fa4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f8e:	b299      	uxth	r1, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	2300      	movs	r3, #0
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f001 f916 	bl	80081d0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b22      	cmp	r3, #34	; 0x22
 8006fc0:	d108      	bne.n	8006fd4 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fd0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006fd2:	e07e      	b.n	80070d2 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fe2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006fe4:	e075      	b.n	80070d2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006fe6:	2140      	movs	r1, #64	; 0x40
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fd49 	bl	8007a80 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006fee:	e070      	b.n	80070d2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d05d      	beq.n	80070b6 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007000:	2b00      	cmp	r3, #0
 8007002:	d058      	beq.n	80070b6 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007004:	2101      	movs	r1, #1
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f001 f998 	bl	800833c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800700c:	2110      	movs	r1, #16
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f001 f910 	bl	8008234 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b22      	cmp	r3, #34	; 0x22
 800701e:	d101      	bne.n	8007024 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8007020:	4b31      	ldr	r3, [pc, #196]	; (80070e8 <I2C_Mem_ISR_DMA+0x248>)
 8007022:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007028:	b29b      	uxth	r3, r3
 800702a:	2bff      	cmp	r3, #255	; 0xff
 800702c:	d910      	bls.n	8007050 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	22ff      	movs	r2, #255	; 0xff
 8007032:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007038:	b299      	uxth	r1, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800703e:	b2da      	uxtb	r2, r3
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f001 f8c1 	bl	80081d0 <I2C_TransferConfig>
 800704e:	e011      	b.n	8007074 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007054:	b29a      	uxth	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705e:	b299      	uxth	r1, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007064:	b2da      	uxtb	r2, r3
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f001 f8ae 	bl	80081d0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007078:	b29a      	uxth	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b22      	cmp	r3, #34	; 0x22
 8007090:	d108      	bne.n	80070a4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070a0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070a2:	e016      	b.n	80070d2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070b2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070b4:	e00d      	b.n	80070d2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f003 0320 	and.w	r3, r3, #32
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d008      	beq.n	80070d2 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 fa57 	bl	8007580 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	80002000 	.word	0x80002000
 80070e8:	80002400 	.word	0x80002400

080070ec <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007108:	2b01      	cmp	r3, #1
 800710a:	d101      	bne.n	8007110 <I2C_Slave_ISR_DMA+0x24>
 800710c:	2302      	movs	r3, #2
 800710e:	e0c0      	b.n	8007292 <I2C_Slave_ISR_DMA+0x1a6>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	d009      	beq.n	8007136 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 faee 	bl	8007710 <I2C_ITSlaveCplt>
 8007134:	e0a8      	b.n	8007288 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f003 0310 	and.w	r3, r3, #16
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 8095 	beq.w	800726c <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 808f 	beq.w	800726c <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800715e:	2b00      	cmp	r3, #0
 8007160:	d07d      	beq.n	800725e <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00c      	beq.n	8007184 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d007      	beq.n	8007184 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8007180:	2301      	movs	r3, #1
 8007182:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00c      	beq.n	80071a6 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d007      	beq.n	80071a6 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80071a2:	2301      	movs	r3, #1
 80071a4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d128      	bne.n	80071fe <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b28      	cmp	r3, #40	; 0x28
 80071b6:	d108      	bne.n	80071ca <I2C_Slave_ISR_DMA+0xde>
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071be:	d104      	bne.n	80071ca <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fc08 	bl	80079d8 <I2C_ITListenCplt>
 80071c8:	e048      	b.n	800725c <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b29      	cmp	r3, #41	; 0x29
 80071d4:	d10e      	bne.n	80071f4 <I2C_Slave_ISR_DMA+0x108>
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071dc:	d00a      	beq.n	80071f4 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2210      	movs	r2, #16
 80071e4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 fd61 	bl	8007cae <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 f96a 	bl	80074c6 <I2C_ITSlaveSeqCplt>
 80071f2:	e033      	b.n	800725c <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2210      	movs	r2, #16
 80071fa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80071fc:	e034      	b.n	8007268 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2210      	movs	r2, #16
 8007204:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720a:	f043 0204 	orr.w	r2, r3, #4
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007218:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <I2C_Slave_ISR_DMA+0x13c>
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007226:	d11f      	bne.n	8007268 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	2b21      	cmp	r3, #33	; 0x21
 800722c:	d002      	beq.n	8007234 <I2C_Slave_ISR_DMA+0x148>
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	2b29      	cmp	r3, #41	; 0x29
 8007232:	d103      	bne.n	800723c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2221      	movs	r2, #33	; 0x21
 8007238:	631a      	str	r2, [r3, #48]	; 0x30
 800723a:	e008      	b.n	800724e <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	2b22      	cmp	r3, #34	; 0x22
 8007240:	d002      	beq.n	8007248 <I2C_Slave_ISR_DMA+0x15c>
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	2b2a      	cmp	r3, #42	; 0x2a
 8007246:	d102      	bne.n	800724e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2222      	movs	r2, #34	; 0x22
 800724c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	4619      	mov	r1, r3
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 fc13 	bl	8007a80 <I2C_ITError>
      if (treatdmanack == 1U)
 800725a:	e005      	b.n	8007268 <I2C_Slave_ISR_DMA+0x17c>
 800725c:	e004      	b.n	8007268 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2210      	movs	r2, #16
 8007264:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007266:	e00f      	b.n	8007288 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8007268:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800726a:	e00d      	b.n	8007288 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d008      	beq.n	8007288 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 f85e 	bl	8007344 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	4608      	mov	r0, r1
 80072a6:	4611      	mov	r1, r2
 80072a8:	461a      	mov	r2, r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	817b      	strh	r3, [r7, #10]
 80072ae:	460b      	mov	r3, r1
 80072b0:	813b      	strh	r3, [r7, #8]
 80072b2:	4613      	mov	r3, r2
 80072b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80072b6:	88fb      	ldrh	r3, [r7, #6]
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	8979      	ldrh	r1, [r7, #10]
 80072bc:	4b20      	ldr	r3, [pc, #128]	; (8007340 <I2C_RequestMemoryRead+0xa4>)
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	2300      	movs	r3, #0
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 ff84 	bl	80081d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072c8:	69fa      	ldr	r2, [r7, #28]
 80072ca:	69b9      	ldr	r1, [r7, #24]
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 fd89 	bl	8007de4 <I2C_WaitOnTXISFlagUntilTimeout>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e02c      	b.n	8007336 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072dc:	88fb      	ldrh	r3, [r7, #6]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d105      	bne.n	80072ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072e2:	893b      	ldrh	r3, [r7, #8]
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	629a      	str	r2, [r3, #40]	; 0x28
 80072ec:	e015      	b.n	800731a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80072ee:	893b      	ldrh	r3, [r7, #8]
 80072f0:	0a1b      	lsrs	r3, r3, #8
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	69b9      	ldr	r1, [r7, #24]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fd6f 	bl	8007de4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e012      	b.n	8007336 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007310:	893b      	ldrh	r3, [r7, #8]
 8007312:	b2da      	uxtb	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2200      	movs	r2, #0
 8007322:	2140      	movs	r1, #64	; 0x40
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 fd04 	bl	8007d32 <I2C_WaitOnFlagUntilTimeout>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e000      	b.n	8007336 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	80002000 	.word	0x80002000

08007344 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007354:	b2db      	uxtb	r3, r3
 8007356:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800735a:	2b28      	cmp	r3, #40	; 0x28
 800735c:	d16a      	bne.n	8007434 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	0c1b      	lsrs	r3, r3, #16
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	0c1b      	lsrs	r3, r3, #16
 8007376:	b29b      	uxth	r3, r3
 8007378:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800737c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	b29b      	uxth	r3, r3
 8007386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800738a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	b29b      	uxth	r3, r3
 8007394:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007398:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d138      	bne.n	8007414 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80073a2:	897b      	ldrh	r3, [r7, #10]
 80073a4:	09db      	lsrs	r3, r3, #7
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	89bb      	ldrh	r3, [r7, #12]
 80073aa:	4053      	eors	r3, r2
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	f003 0306 	and.w	r3, r3, #6
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d11c      	bne.n	80073f0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80073b6:	897b      	ldrh	r3, [r7, #10]
 80073b8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073be:	1c5a      	adds	r2, r3, #1
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d13b      	bne.n	8007444 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2208      	movs	r2, #8
 80073d8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80073e2:	89ba      	ldrh	r2, [r7, #12]
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff fa0e 	bl	800680a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80073ee:	e029      	b.n	8007444 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80073f0:	893b      	ldrh	r3, [r7, #8]
 80073f2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80073f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 ff9f 	bl	800833c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007406:	89ba      	ldrh	r2, [r7, #12]
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff f9fc 	bl	800680a <HAL_I2C_AddrCallback>
}
 8007412:	e017      	b.n	8007444 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 ff8f 	bl	800833c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007426:	89ba      	ldrh	r2, [r7, #12]
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7ff f9ec 	bl	800680a <HAL_I2C_AddrCallback>
}
 8007432:	e007      	b.n	8007444 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2208      	movs	r2, #8
 800743a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b21      	cmp	r3, #33	; 0x21
 8007466:	d115      	bne.n	8007494 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2220      	movs	r2, #32
 800746c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2211      	movs	r2, #17
 8007474:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800747c:	2101      	movs	r1, #1
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 ff5c 	bl	800833c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7ff f994 	bl	80067ba <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007492:	e014      	b.n	80074be <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2212      	movs	r2, #18
 80074a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80074a8:	2102      	movs	r1, #2
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 ff46 	bl	800833c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff f988 	bl	80067ce <HAL_I2C_MasterRxCpltCallback>
}
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d008      	beq.n	80074fa <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	e00c      	b.n	8007514 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007512:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b29      	cmp	r3, #41	; 0x29
 800751e:	d112      	bne.n	8007546 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2228      	movs	r2, #40	; 0x28
 8007524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2221      	movs	r2, #33	; 0x21
 800752c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800752e:	2101      	movs	r1, #1
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 ff03 	bl	800833c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7ff f94f 	bl	80067e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007544:	e017      	b.n	8007576 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b2a      	cmp	r3, #42	; 0x2a
 8007550:	d111      	bne.n	8007576 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2228      	movs	r2, #40	; 0x28
 8007556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2222      	movs	r2, #34	; 0x22
 800755e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007560:	2102      	movs	r1, #2
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 feea 	bl	800833c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff f940 	bl	80067f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
	...

08007580 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2220      	movs	r2, #32
 8007594:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b21      	cmp	r3, #33	; 0x21
 80075a0:	d107      	bne.n	80075b2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80075a2:	2101      	movs	r1, #1
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fec9 	bl	800833c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2211      	movs	r2, #17
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30
 80075b0:	e00c      	b.n	80075cc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b22      	cmp	r3, #34	; 0x22
 80075bc:	d106      	bne.n	80075cc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80075be:	2102      	movs	r1, #2
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 febb 	bl	800833c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2212      	movs	r2, #18
 80075ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6859      	ldr	r1, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	4b4c      	ldr	r3, [pc, #304]	; (8007708 <I2C_ITMasterCplt+0x188>)
 80075d8:	400b      	ands	r3, r1
 80075da:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a49      	ldr	r2, [pc, #292]	; (800770c <I2C_ITMasterCplt+0x18c>)
 80075e6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f003 0310 	and.w	r3, r3, #16
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d009      	beq.n	8007606 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2210      	movs	r2, #16
 80075f8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fe:	f043 0204 	orr.w	r2, r3, #4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b60      	cmp	r3, #96	; 0x60
 8007610:	d10a      	bne.n	8007628 <I2C_ITMasterCplt+0xa8>
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	b2db      	uxtb	r3, r3
 8007624:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007626:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fb40 	bl	8007cae <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007632:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b60      	cmp	r3, #96	; 0x60
 800763e:	d002      	beq.n	8007646 <I2C_ITMasterCplt+0xc6>
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d006      	beq.n	8007654 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fa17 	bl	8007a80 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007652:	e054      	b.n	80076fe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b21      	cmp	r3, #33	; 0x21
 800765e:	d124      	bne.n	80076aa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b40      	cmp	r3, #64	; 0x40
 8007678:	d10b      	bne.n	8007692 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7ff f8d5 	bl	800683a <HAL_I2C_MemTxCpltCallback>
}
 8007690:	e035      	b.n	80076fe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff f889 	bl	80067ba <HAL_I2C_MasterTxCpltCallback>
}
 80076a8:	e029      	b.n	80076fe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b22      	cmp	r3, #34	; 0x22
 80076b4:	d123      	bne.n	80076fe <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2220      	movs	r2, #32
 80076ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b40      	cmp	r3, #64	; 0x40
 80076ce:	d10b      	bne.n	80076e8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff f8b4 	bl	800684e <HAL_I2C_MemRxCpltCallback>
}
 80076e6:	e00a      	b.n	80076fe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff f868 	bl	80067ce <HAL_I2C_MasterRxCpltCallback>
}
 80076fe:	bf00      	nop
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	fe00e800 	.word	0xfe00e800
 800770c:	ffff0000 	.word	0xffff0000

08007710 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007732:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2220      	movs	r2, #32
 800773a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800773c:	7afb      	ldrb	r3, [r7, #11]
 800773e:	2b21      	cmp	r3, #33	; 0x21
 8007740:	d002      	beq.n	8007748 <I2C_ITSlaveCplt+0x38>
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	2b29      	cmp	r3, #41	; 0x29
 8007746:	d108      	bne.n	800775a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007748:	f248 0101 	movw	r1, #32769	; 0x8001
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fdf5 	bl	800833c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2221      	movs	r2, #33	; 0x21
 8007756:	631a      	str	r2, [r3, #48]	; 0x30
 8007758:	e019      	b.n	800778e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800775a:	7afb      	ldrb	r3, [r7, #11]
 800775c:	2b22      	cmp	r3, #34	; 0x22
 800775e:	d002      	beq.n	8007766 <I2C_ITSlaveCplt+0x56>
 8007760:	7afb      	ldrb	r3, [r7, #11]
 8007762:	2b2a      	cmp	r3, #42	; 0x2a
 8007764:	d108      	bne.n	8007778 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007766:	f248 0102 	movw	r1, #32770	; 0x8002
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fde6 	bl	800833c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2222      	movs	r2, #34	; 0x22
 8007774:	631a      	str	r2, [r3, #48]	; 0x30
 8007776:	e00a      	b.n	800778e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007778:	7afb      	ldrb	r3, [r7, #11]
 800777a:	2b28      	cmp	r3, #40	; 0x28
 800777c:	d107      	bne.n	800778e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800777e:	f248 0103 	movw	r1, #32771	; 0x8003
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fdda 	bl	800833c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800779c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6859      	ldr	r1, [r3, #4]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	4b89      	ldr	r3, [pc, #548]	; (80079d0 <I2C_ITSlaveCplt+0x2c0>)
 80077aa:	400b      	ands	r3, r1
 80077ac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fa7d 	bl	8007cae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d013      	beq.n	80077e6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d01f      	beq.n	8007816 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	b29a      	uxth	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077e4:	e017      	b.n	8007816 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d012      	beq.n	8007816 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007804:	2b00      	cmp	r3, #0
 8007806:	d006      	beq.n	8007816 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	b29a      	uxth	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d020      	beq.n	8007862 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f023 0304 	bic.w	r3, r3, #4
 8007826:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00c      	beq.n	8007862 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784c:	3b01      	subs	r3, #1
 800784e:	b29a      	uxth	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007866:	b29b      	uxth	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d005      	beq.n	8007878 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007870:	f043 0204 	orr.w	r2, r3, #4
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f003 0310 	and.w	r3, r3, #16
 800787e:	2b00      	cmp	r3, #0
 8007880:	d049      	beq.n	8007916 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007888:	2b00      	cmp	r3, #0
 800788a:	d044      	beq.n	8007916 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007890:	b29b      	uxth	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d128      	bne.n	80078e8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b28      	cmp	r3, #40	; 0x28
 80078a0:	d108      	bne.n	80078b4 <I2C_ITSlaveCplt+0x1a4>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078a8:	d104      	bne.n	80078b4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80078aa:	6979      	ldr	r1, [r7, #20]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f893 	bl	80079d8 <I2C_ITListenCplt>
 80078b2:	e030      	b.n	8007916 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b29      	cmp	r3, #41	; 0x29
 80078be:	d10e      	bne.n	80078de <I2C_ITSlaveCplt+0x1ce>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078c6:	d00a      	beq.n	80078de <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2210      	movs	r2, #16
 80078ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f9ec 	bl	8007cae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff fdf5 	bl	80074c6 <I2C_ITSlaveSeqCplt>
 80078dc:	e01b      	b.n	8007916 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2210      	movs	r2, #16
 80078e4:	61da      	str	r2, [r3, #28]
 80078e6:	e016      	b.n	8007916 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2210      	movs	r2, #16
 80078ee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f4:	f043 0204 	orr.w	r2, r3, #4
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <I2C_ITSlaveCplt+0x1fa>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007908:	d105      	bne.n	8007916 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f8b5 	bl	8007a80 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007928:	2b00      	cmp	r3, #0
 800792a:	d010      	beq.n	800794e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f8a4 	bl	8007a80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b28      	cmp	r3, #40	; 0x28
 8007942:	d141      	bne.n	80079c8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007944:	6979      	ldr	r1, [r7, #20]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f846 	bl	80079d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800794c:	e03c      	b.n	80079c8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007952:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007956:	d014      	beq.n	8007982 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff fdb4 	bl	80074c6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a1c      	ldr	r2, [pc, #112]	; (80079d4 <I2C_ITSlaveCplt+0x2c4>)
 8007962:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2220      	movs	r2, #32
 8007968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fe ff53 	bl	8006826 <HAL_I2C_ListenCpltCallback>
}
 8007980:	e022      	b.n	80079c8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b22      	cmp	r3, #34	; 0x22
 800798c:	d10e      	bne.n	80079ac <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2220      	movs	r2, #32
 8007992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7fe ff26 	bl	80067f6 <HAL_I2C_SlaveRxCpltCallback>
}
 80079aa:	e00d      	b.n	80079c8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7fe ff0d 	bl	80067e2 <HAL_I2C_SlaveTxCpltCallback>
}
 80079c8:	bf00      	nop
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	fe00e800 	.word	0xfe00e800
 80079d4:	ffff0000 	.word	0xffff0000

080079d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a25      	ldr	r2, [pc, #148]	; (8007a7c <I2C_ITListenCplt+0xa4>)
 80079e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	f003 0304 	and.w	r3, r3, #4
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d022      	beq.n	8007a54 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	b2d2      	uxtb	r2, r2
 8007a1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d012      	beq.n	8007a54 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4c:	f043 0204 	orr.w	r2, r3, #4
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a54:	f248 0103 	movw	r1, #32771	; 0x8003
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fc6f 	bl	800833c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2210      	movs	r2, #16
 8007a64:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7fe fed9 	bl	8006826 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007a74:	bf00      	nop
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	ffff0000 	.word	0xffff0000

08007a80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a90:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a6d      	ldr	r2, [pc, #436]	; (8007c54 <I2C_ITError+0x1d4>)
 8007a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	2b28      	cmp	r3, #40	; 0x28
 8007ab6:	d005      	beq.n	8007ac4 <I2C_ITError+0x44>
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	2b29      	cmp	r3, #41	; 0x29
 8007abc:	d002      	beq.n	8007ac4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac2:	d10b      	bne.n	8007adc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007ac4:	2103      	movs	r1, #3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fc38 	bl	800833c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2228      	movs	r2, #40	; 0x28
 8007ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a60      	ldr	r2, [pc, #384]	; (8007c58 <I2C_ITError+0x1d8>)
 8007ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8007ada:	e030      	b.n	8007b3e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007adc:	f248 0103 	movw	r1, #32771	; 0x8003
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fc2b 	bl	800833c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f8e1 	bl	8007cae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b60      	cmp	r3, #96	; 0x60
 8007af6:	d01f      	beq.n	8007b38 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b20      	cmp	r3, #32
 8007b0c:	d114      	bne.n	8007b38 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	f003 0310 	and.w	r3, r3, #16
 8007b18:	2b10      	cmp	r3, #16
 8007b1a:	d109      	bne.n	8007b30 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2210      	movs	r2, #16
 8007b22:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b28:	f043 0204 	orr.w	r2, r3, #4
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2220      	movs	r2, #32
 8007b36:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d039      	beq.n	8007bc0 <I2C_ITError+0x140>
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b11      	cmp	r3, #17
 8007b50:	d002      	beq.n	8007b58 <I2C_ITError+0xd8>
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2b21      	cmp	r3, #33	; 0x21
 8007b56:	d133      	bne.n	8007bc0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b66:	d107      	bne.n	8007b78 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b76:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fd fa24 	bl	8004fca <HAL_DMA_GetState>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d017      	beq.n	8007bb8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	4a33      	ldr	r2, [pc, #204]	; (8007c5c <I2C_ITError+0x1dc>)
 8007b8e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fd f9ad 	bl	8004efc <HAL_DMA_Abort_IT>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d04d      	beq.n	8007c44 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007bb6:	e045      	b.n	8007c44 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f851 	bl	8007c60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007bbe:	e041      	b.n	8007c44 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d039      	beq.n	8007c3c <I2C_ITError+0x1bc>
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b12      	cmp	r3, #18
 8007bcc:	d002      	beq.n	8007bd4 <I2C_ITError+0x154>
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2b22      	cmp	r3, #34	; 0x22
 8007bd2:	d133      	bne.n	8007c3c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be2:	d107      	bne.n	8007bf4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bf2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fd f9e6 	bl	8004fca <HAL_DMA_GetState>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d017      	beq.n	8007c34 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c08:	4a14      	ldr	r2, [pc, #80]	; (8007c5c <I2C_ITError+0x1dc>)
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fd f96f 	bl	8004efc <HAL_DMA_Abort_IT>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d011      	beq.n	8007c48 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007c2e:	4610      	mov	r0, r2
 8007c30:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c32:	e009      	b.n	8007c48 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f813 	bl	8007c60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c3a:	e005      	b.n	8007c48 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f80f 	bl	8007c60 <I2C_TreatErrorCallback>
  }
}
 8007c42:	e002      	b.n	8007c4a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c44:	bf00      	nop
 8007c46:	e000      	b.n	8007c4a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c48:	bf00      	nop
}
 8007c4a:	bf00      	nop
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	ffff0000 	.word	0xffff0000
 8007c58:	08006ad9 	.word	0x08006ad9
 8007c5c:	08007cf7 	.word	0x08007cf7

08007c60 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b60      	cmp	r3, #96	; 0x60
 8007c72:	d10e      	bne.n	8007c92 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2220      	movs	r2, #32
 8007c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7fe fdf3 	bl	8006876 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c90:	e009      	b.n	8007ca6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7fe fdde 	bl	8006862 <HAL_I2C_ErrorCallback>
}
 8007ca6:	bf00      	nop
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b083      	sub	sp, #12
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d103      	bne.n	8007ccc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d007      	beq.n	8007cea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699a      	ldr	r2, [r3, #24]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f042 0201 	orr.w	r2, r2, #1
 8007ce8:	619a      	str	r2, [r3, #24]
  }
}
 8007cea:	bf00      	nop
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	2200      	movs	r2, #0
 8007d12:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d003      	beq.n	8007d24 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d20:	2200      	movs	r2, #0
 8007d22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f7ff ff9b 	bl	8007c60 <I2C_TreatErrorCallback>
}
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	603b      	str	r3, [r7, #0]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d42:	e03b      	b.n	8007dbc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f961 	bl	8008010 <I2C_IsErrorOccurred>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e041      	b.n	8007ddc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5e:	d02d      	beq.n	8007dbc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d60:	f7fc ff58 	bl	8004c14 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d302      	bcc.n	8007d76 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d122      	bne.n	8007dbc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	699a      	ldr	r2, [r3, #24]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	bf0c      	ite	eq
 8007d86:	2301      	moveq	r3, #1
 8007d88:	2300      	movne	r3, #0
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	79fb      	ldrb	r3, [r7, #7]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d113      	bne.n	8007dbc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d98:	f043 0220 	orr.w	r2, r3, #32
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2220      	movs	r2, #32
 8007da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e00f      	b.n	8007ddc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	699a      	ldr	r2, [r3, #24]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	bf0c      	ite	eq
 8007dcc:	2301      	moveq	r3, #1
 8007dce:	2300      	movne	r3, #0
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d0b4      	beq.n	8007d44 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007df0:	e033      	b.n	8007e5a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 f90a 	bl	8008010 <I2C_IsErrorOccurred>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e031      	b.n	8007e6a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0c:	d025      	beq.n	8007e5a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e0e:	f7fc ff01 	bl	8004c14 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d302      	bcc.n	8007e24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d11a      	bne.n	8007e5a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d013      	beq.n	8007e5a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e36:	f043 0220 	orr.w	r2, r3, #32
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e007      	b.n	8007e6a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	f003 0302 	and.w	r3, r3, #2
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d1c4      	bne.n	8007df2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e7e:	e02f      	b.n	8007ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 f8c3 	bl	8008010 <I2C_IsErrorOccurred>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e02d      	b.n	8007ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e94:	f7fc febe 	bl	8004c14 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d302      	bcc.n	8007eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d11a      	bne.n	8007ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	f003 0320 	and.w	r3, r3, #32
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	d013      	beq.n	8007ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebc:	f043 0220 	orr.w	r2, r3, #32
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e007      	b.n	8007ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b20      	cmp	r3, #32
 8007eec:	d1c8      	bne.n	8007e80 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007f08:	e071      	b.n	8007fee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f87e 	bl	8008010 <I2C_IsErrorOccurred>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	f003 0320 	and.w	r3, r3, #32
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	d13b      	bne.n	8007fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d138      	bne.n	8007fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d105      	bne.n	8007f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	f003 0310 	and.w	r3, r3, #16
 8007f56:	2b10      	cmp	r3, #16
 8007f58:	d121      	bne.n	8007f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2210      	movs	r2, #16
 8007f60:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2204      	movs	r2, #4
 8007f66:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6859      	ldr	r1, [r3, #4]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	4b24      	ldr	r3, [pc, #144]	; (800800c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007f7c:	400b      	ands	r3, r1
 8007f7e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	75fb      	strb	r3, [r7, #23]
 8007f9c:	e002      	b.n	8007fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007fa4:	f7fc fe36 	bl	8004c14 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d302      	bcc.n	8007fba <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d119      	bne.n	8007fee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d116      	bne.n	8007fee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	f003 0304 	and.w	r3, r3, #4
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d00f      	beq.n	8007fee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd2:	f043 0220 	orr.w	r2, r3, #32
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d002      	beq.n	8008002 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d083      	beq.n	8007f0a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	fe00e800 	.word	0xfe00e800

08008010 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	; 0x28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	f003 0310 	and.w	r3, r3, #16
 8008038:	2b00      	cmp	r3, #0
 800803a:	d068      	beq.n	800810e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2210      	movs	r2, #16
 8008042:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008044:	e049      	b.n	80080da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804c:	d045      	beq.n	80080da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800804e:	f7fc fde1 	bl	8004c14 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	429a      	cmp	r2, r3
 800805c:	d302      	bcc.n	8008064 <I2C_IsErrorOccurred+0x54>
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d13a      	bne.n	80080da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800806e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008076:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008086:	d121      	bne.n	80080cc <I2C_IsErrorOccurred+0xbc>
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800808e:	d01d      	beq.n	80080cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008090:	7cfb      	ldrb	r3, [r7, #19]
 8008092:	2b20      	cmp	r3, #32
 8008094:	d01a      	beq.n	80080cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80080a6:	f7fc fdb5 	bl	8004c14 <HAL_GetTick>
 80080aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080ac:	e00e      	b.n	80080cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80080ae:	f7fc fdb1 	bl	8004c14 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b19      	cmp	r3, #25
 80080ba:	d907      	bls.n	80080cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	f043 0320 	orr.w	r3, r3, #32
 80080c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80080ca:	e006      	b.n	80080da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	f003 0320 	and.w	r3, r3, #32
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	d1e9      	bne.n	80080ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f003 0320 	and.w	r3, r3, #32
 80080e4:	2b20      	cmp	r3, #32
 80080e6:	d003      	beq.n	80080f0 <I2C_IsErrorOccurred+0xe0>
 80080e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0aa      	beq.n	8008046 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80080f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d103      	bne.n	8008100 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2220      	movs	r2, #32
 80080fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	f043 0304 	orr.w	r3, r3, #4
 8008106:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00b      	beq.n	8008138 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	f043 0301 	orr.w	r3, r3, #1
 8008126:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008130:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00b      	beq.n	800815a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	f043 0308 	orr.w	r3, r3, #8
 8008148:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008152:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00b      	beq.n	800817c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	f043 0302 	orr.w	r3, r3, #2
 800816a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008174:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800817c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008180:	2b00      	cmp	r3, #0
 8008182:	d01c      	beq.n	80081be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f7ff fd92 	bl	8007cae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6859      	ldr	r1, [r3, #4]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	4b0d      	ldr	r3, [pc, #52]	; (80081cc <I2C_IsErrorOccurred+0x1bc>)
 8008196:	400b      	ands	r3, r1
 8008198:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	431a      	orrs	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80081be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3728      	adds	r7, #40	; 0x28
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	fe00e800 	.word	0xfe00e800

080081d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	607b      	str	r3, [r7, #4]
 80081da:	460b      	mov	r3, r1
 80081dc:	817b      	strh	r3, [r7, #10]
 80081de:	4613      	mov	r3, r2
 80081e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081e2:	897b      	ldrh	r3, [r7, #10]
 80081e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80081e8:	7a7b      	ldrb	r3, [r7, #9]
 80081ea:	041b      	lsls	r3, r3, #16
 80081ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	0d5b      	lsrs	r3, r3, #21
 800820a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800820e:	4b08      	ldr	r3, [pc, #32]	; (8008230 <I2C_TransferConfig+0x60>)
 8008210:	430b      	orrs	r3, r1
 8008212:	43db      	mvns	r3, r3
 8008214:	ea02 0103 	and.w	r1, r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	430a      	orrs	r2, r1
 8008220:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008222:	bf00      	nop
 8008224:	371c      	adds	r7, #28
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	03ff63ff 	.word	0x03ff63ff

08008234 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008248:	4a39      	ldr	r2, [pc, #228]	; (8008330 <I2C_Enable_IRQ+0xfc>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d032      	beq.n	80082b4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008252:	4a38      	ldr	r2, [pc, #224]	; (8008334 <I2C_Enable_IRQ+0x100>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d02d      	beq.n	80082b4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800825c:	4a36      	ldr	r2, [pc, #216]	; (8008338 <I2C_Enable_IRQ+0x104>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d028      	beq.n	80082b4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008266:	2b00      	cmp	r3, #0
 8008268:	da03      	bge.n	8008272 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008270:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008272:	887b      	ldrh	r3, [r7, #2]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008282:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008284:	887b      	ldrh	r3, [r7, #2]
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008294:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008296:	887b      	ldrh	r3, [r7, #2]
 8008298:	2b10      	cmp	r3, #16
 800829a:	d103      	bne.n	80082a4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80082a2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80082a4:	887b      	ldrh	r3, [r7, #2]
 80082a6:	2b20      	cmp	r3, #32
 80082a8:	d133      	bne.n	8008312 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f043 0320 	orr.w	r3, r3, #32
 80082b0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80082b2:	e02e      	b.n	8008312 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80082b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	da03      	bge.n	80082c4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80082c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80082c4:	887b      	ldrh	r3, [r7, #2]
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80082d4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80082d6:	887b      	ldrh	r3, [r7, #2]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d003      	beq.n	80082e8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80082e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80082e8:	887b      	ldrh	r3, [r7, #2]
 80082ea:	2b10      	cmp	r3, #16
 80082ec:	d103      	bne.n	80082f6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80082f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80082f6:	887b      	ldrh	r3, [r7, #2]
 80082f8:	2b20      	cmp	r3, #32
 80082fa:	d103      	bne.n	8008304 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008302:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008304:	887b      	ldrh	r3, [r7, #2]
 8008306:	2b40      	cmp	r3, #64	; 0x40
 8008308:	d103      	bne.n	8008312 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008310:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6819      	ldr	r1, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	430a      	orrs	r2, r1
 8008320:	601a      	str	r2, [r3, #0]
}
 8008322:	bf00      	nop
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	08006ccb 	.word	0x08006ccb
 8008334:	080070ed 	.word	0x080070ed
 8008338:	08006ea1 	.word	0x08006ea1

0800833c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800834c:	887b      	ldrh	r3, [r7, #2]
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00f      	beq.n	8008376 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800835c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008364:	b2db      	uxtb	r3, r3
 8008366:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800836a:	2b28      	cmp	r3, #40	; 0x28
 800836c:	d003      	beq.n	8008376 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008374:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008376:	887b      	ldrh	r3, [r7, #2]
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00f      	beq.n	80083a0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008386:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800838e:	b2db      	uxtb	r3, r3
 8008390:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008394:	2b28      	cmp	r3, #40	; 0x28
 8008396:	d003      	beq.n	80083a0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800839e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80083a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	da03      	bge.n	80083b0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80083ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80083b0:	887b      	ldrh	r3, [r7, #2]
 80083b2:	2b10      	cmp	r3, #16
 80083b4:	d103      	bne.n	80083be <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80083bc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80083be:	887b      	ldrh	r3, [r7, #2]
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	d103      	bne.n	80083cc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f043 0320 	orr.w	r3, r3, #32
 80083ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80083cc:	887b      	ldrh	r3, [r7, #2]
 80083ce:	2b40      	cmp	r3, #64	; 0x40
 80083d0:	d103      	bne.n	80083da <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083d8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6819      	ldr	r1, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	43da      	mvns	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	400a      	ands	r2, r1
 80083ea:	601a      	str	r2, [r3, #0]
}
 80083ec:	bf00      	nop
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b20      	cmp	r3, #32
 800840c:	d138      	bne.n	8008480 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008414:	2b01      	cmp	r3, #1
 8008416:	d101      	bne.n	800841c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008418:	2302      	movs	r3, #2
 800841a:	e032      	b.n	8008482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2224      	movs	r2, #36	; 0x24
 8008428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0201 	bic.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800844a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6819      	ldr	r1, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0201 	orr.w	r2, r2, #1
 800846a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2220      	movs	r2, #32
 8008470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	e000      	b.n	8008482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008480:	2302      	movs	r3, #2
  }
}
 8008482:	4618      	mov	r0, r3
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d139      	bne.n	8008518 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d101      	bne.n	80084b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084ae:	2302      	movs	r3, #2
 80084b0:	e033      	b.n	800851a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2224      	movs	r2, #36	; 0x24
 80084be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f022 0201 	bic.w	r2, r2, #1
 80084d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	021b      	lsls	r3, r3, #8
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0201 	orr.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	e000      	b.n	800851a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008518:	2302      	movs	r3, #2
  }
}
 800851a:	4618      	mov	r0, r3
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d141      	bne.n	80085ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008536:	4b4b      	ldr	r3, [pc, #300]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800853e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008542:	d131      	bne.n	80085a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008544:	4b47      	ldr	r3, [pc, #284]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800854a:	4a46      	ldr	r2, [pc, #280]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800854c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008550:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008554:	4b43      	ldr	r3, [pc, #268]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800855c:	4a41      	ldr	r2, [pc, #260]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800855e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008562:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008564:	4b40      	ldr	r3, [pc, #256]	; (8008668 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2232      	movs	r2, #50	; 0x32
 800856a:	fb02 f303 	mul.w	r3, r2, r3
 800856e:	4a3f      	ldr	r2, [pc, #252]	; (800866c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008570:	fba2 2303 	umull	r2, r3, r2, r3
 8008574:	0c9b      	lsrs	r3, r3, #18
 8008576:	3301      	adds	r3, #1
 8008578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800857a:	e002      	b.n	8008582 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3b01      	subs	r3, #1
 8008580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008582:	4b38      	ldr	r3, [pc, #224]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800858a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800858e:	d102      	bne.n	8008596 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1f2      	bne.n	800857c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008596:	4b33      	ldr	r3, [pc, #204]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800859e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085a2:	d158      	bne.n	8008656 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e057      	b.n	8008658 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80085a8:	4b2e      	ldr	r3, [pc, #184]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085ae:	4a2d      	ldr	r2, [pc, #180]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80085b8:	e04d      	b.n	8008656 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085c0:	d141      	bne.n	8008646 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80085c2:	4b28      	ldr	r3, [pc, #160]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80085ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ce:	d131      	bne.n	8008634 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80085d0:	4b24      	ldr	r3, [pc, #144]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085d6:	4a23      	ldr	r2, [pc, #140]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80085e0:	4b20      	ldr	r3, [pc, #128]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80085e8:	4a1e      	ldr	r2, [pc, #120]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80085f0:	4b1d      	ldr	r3, [pc, #116]	; (8008668 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2232      	movs	r2, #50	; 0x32
 80085f6:	fb02 f303 	mul.w	r3, r2, r3
 80085fa:	4a1c      	ldr	r2, [pc, #112]	; (800866c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80085fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008600:	0c9b      	lsrs	r3, r3, #18
 8008602:	3301      	adds	r3, #1
 8008604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008606:	e002      	b.n	800860e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3b01      	subs	r3, #1
 800860c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800860e:	4b15      	ldr	r3, [pc, #84]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800861a:	d102      	bne.n	8008622 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1f2      	bne.n	8008608 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008622:	4b10      	ldr	r3, [pc, #64]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800862a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800862e:	d112      	bne.n	8008656 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	e011      	b.n	8008658 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008634:	4b0b      	ldr	r3, [pc, #44]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800863a:	4a0a      	ldr	r2, [pc, #40]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800863c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008640:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008644:	e007      	b.n	8008656 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008646:	4b07      	ldr	r3, [pc, #28]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800864e:	4a05      	ldr	r2, [pc, #20]	; (8008664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008654:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3714      	adds	r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	40007000 	.word	0x40007000
 8008668:	20000000 	.word	0x20000000
 800866c:	431bde83 	.word	0x431bde83

08008670 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008670:	b480      	push	{r7}
 8008672:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008674:	4b05      	ldr	r3, [pc, #20]	; (800868c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	4a04      	ldr	r2, [pc, #16]	; (800868c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800867a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800867e:	6093      	str	r3, [r2, #8]
}
 8008680:	bf00      	nop
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	40007000 	.word	0x40007000

08008690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e2fe      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d075      	beq.n	800879a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086ae:	4b97      	ldr	r3, [pc, #604]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 030c 	and.w	r3, r3, #12
 80086b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086b8:	4b94      	ldr	r3, [pc, #592]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f003 0303 	and.w	r3, r3, #3
 80086c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	2b0c      	cmp	r3, #12
 80086c6:	d102      	bne.n	80086ce <HAL_RCC_OscConfig+0x3e>
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d002      	beq.n	80086d4 <HAL_RCC_OscConfig+0x44>
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	2b08      	cmp	r3, #8
 80086d2:	d10b      	bne.n	80086ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086d4:	4b8d      	ldr	r3, [pc, #564]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d05b      	beq.n	8008798 <HAL_RCC_OscConfig+0x108>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d157      	bne.n	8008798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e2d9      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f4:	d106      	bne.n	8008704 <HAL_RCC_OscConfig+0x74>
 80086f6:	4b85      	ldr	r3, [pc, #532]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a84      	ldr	r2, [pc, #528]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80086fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	e01d      	b.n	8008740 <HAL_RCC_OscConfig+0xb0>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800870c:	d10c      	bne.n	8008728 <HAL_RCC_OscConfig+0x98>
 800870e:	4b7f      	ldr	r3, [pc, #508]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a7e      	ldr	r2, [pc, #504]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 8008714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	4b7c      	ldr	r3, [pc, #496]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a7b      	ldr	r2, [pc, #492]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 8008720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	e00b      	b.n	8008740 <HAL_RCC_OscConfig+0xb0>
 8008728:	4b78      	ldr	r3, [pc, #480]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a77      	ldr	r2, [pc, #476]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 800872e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	4b75      	ldr	r3, [pc, #468]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a74      	ldr	r2, [pc, #464]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 800873a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800873e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d013      	beq.n	8008770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008748:	f7fc fa64 	bl	8004c14 <HAL_GetTick>
 800874c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800874e:	e008      	b.n	8008762 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008750:	f7fc fa60 	bl	8004c14 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b64      	cmp	r3, #100	; 0x64
 800875c:	d901      	bls.n	8008762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e29e      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008762:	4b6a      	ldr	r3, [pc, #424]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0f0      	beq.n	8008750 <HAL_RCC_OscConfig+0xc0>
 800876e:	e014      	b.n	800879a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008770:	f7fc fa50 	bl	8004c14 <HAL_GetTick>
 8008774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008776:	e008      	b.n	800878a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008778:	f7fc fa4c 	bl	8004c14 <HAL_GetTick>
 800877c:	4602      	mov	r2, r0
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	2b64      	cmp	r3, #100	; 0x64
 8008784:	d901      	bls.n	800878a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e28a      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800878a:	4b60      	ldr	r3, [pc, #384]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1f0      	bne.n	8008778 <HAL_RCC_OscConfig+0xe8>
 8008796:	e000      	b.n	800879a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d075      	beq.n	8008892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087a6:	4b59      	ldr	r3, [pc, #356]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f003 030c 	and.w	r3, r3, #12
 80087ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087b0:	4b56      	ldr	r3, [pc, #344]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f003 0303 	and.w	r3, r3, #3
 80087b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b0c      	cmp	r3, #12
 80087be:	d102      	bne.n	80087c6 <HAL_RCC_OscConfig+0x136>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d002      	beq.n	80087cc <HAL_RCC_OscConfig+0x13c>
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d11f      	bne.n	800880c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087cc:	4b4f      	ldr	r3, [pc, #316]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d005      	beq.n	80087e4 <HAL_RCC_OscConfig+0x154>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e25d      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087e4:	4b49      	ldr	r3, [pc, #292]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	061b      	lsls	r3, r3, #24
 80087f2:	4946      	ldr	r1, [pc, #280]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80087f8:	4b45      	ldr	r3, [pc, #276]	; (8008910 <HAL_RCC_OscConfig+0x280>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fc f9bd 	bl	8004b7c <HAL_InitTick>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d043      	beq.n	8008890 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e249      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d023      	beq.n	800885c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008814:	4b3d      	ldr	r3, [pc, #244]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a3c      	ldr	r2, [pc, #240]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 800881a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800881e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008820:	f7fc f9f8 	bl	8004c14 <HAL_GetTick>
 8008824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008826:	e008      	b.n	800883a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008828:	f7fc f9f4 	bl	8004c14 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	2b02      	cmp	r3, #2
 8008834:	d901      	bls.n	800883a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e232      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800883a:	4b34      	ldr	r3, [pc, #208]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0f0      	beq.n	8008828 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008846:	4b31      	ldr	r3, [pc, #196]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	061b      	lsls	r3, r3, #24
 8008854:	492d      	ldr	r1, [pc, #180]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 8008856:	4313      	orrs	r3, r2
 8008858:	604b      	str	r3, [r1, #4]
 800885a:	e01a      	b.n	8008892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800885c:	4b2b      	ldr	r3, [pc, #172]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a2a      	ldr	r2, [pc, #168]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 8008862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008868:	f7fc f9d4 	bl	8004c14 <HAL_GetTick>
 800886c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800886e:	e008      	b.n	8008882 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008870:	f7fc f9d0 	bl	8004c14 <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	2b02      	cmp	r3, #2
 800887c:	d901      	bls.n	8008882 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e20e      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008882:	4b22      	ldr	r3, [pc, #136]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1f0      	bne.n	8008870 <HAL_RCC_OscConfig+0x1e0>
 800888e:	e000      	b.n	8008892 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008890:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d041      	beq.n	8008922 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d01c      	beq.n	80088e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088a6:	4b19      	ldr	r3, [pc, #100]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80088a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088ac:	4a17      	ldr	r2, [pc, #92]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80088ae:	f043 0301 	orr.w	r3, r3, #1
 80088b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088b6:	f7fc f9ad 	bl	8004c14 <HAL_GetTick>
 80088ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088bc:	e008      	b.n	80088d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088be:	f7fc f9a9 	bl	8004c14 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d901      	bls.n	80088d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e1e7      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088d0:	4b0e      	ldr	r3, [pc, #56]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80088d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0ef      	beq.n	80088be <HAL_RCC_OscConfig+0x22e>
 80088de:	e020      	b.n	8008922 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088e0:	4b0a      	ldr	r3, [pc, #40]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80088e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088e6:	4a09      	ldr	r2, [pc, #36]	; (800890c <HAL_RCC_OscConfig+0x27c>)
 80088e8:	f023 0301 	bic.w	r3, r3, #1
 80088ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088f0:	f7fc f990 	bl	8004c14 <HAL_GetTick>
 80088f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80088f6:	e00d      	b.n	8008914 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088f8:	f7fc f98c 	bl	8004c14 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	2b02      	cmp	r3, #2
 8008904:	d906      	bls.n	8008914 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e1ca      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
 800890a:	bf00      	nop
 800890c:	40021000 	.word	0x40021000
 8008910:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008914:	4b8c      	ldr	r3, [pc, #560]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1ea      	bne.n	80088f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 80a6 	beq.w	8008a7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008930:	2300      	movs	r3, #0
 8008932:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008934:	4b84      	ldr	r3, [pc, #528]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <HAL_RCC_OscConfig+0x2b4>
 8008940:	2301      	movs	r3, #1
 8008942:	e000      	b.n	8008946 <HAL_RCC_OscConfig+0x2b6>
 8008944:	2300      	movs	r3, #0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00d      	beq.n	8008966 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800894a:	4b7f      	ldr	r3, [pc, #508]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 800894c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800894e:	4a7e      	ldr	r2, [pc, #504]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008954:	6593      	str	r3, [r2, #88]	; 0x58
 8008956:	4b7c      	ldr	r3, [pc, #496]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008962:	2301      	movs	r3, #1
 8008964:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008966:	4b79      	ldr	r3, [pc, #484]	; (8008b4c <HAL_RCC_OscConfig+0x4bc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896e:	2b00      	cmp	r3, #0
 8008970:	d118      	bne.n	80089a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008972:	4b76      	ldr	r3, [pc, #472]	; (8008b4c <HAL_RCC_OscConfig+0x4bc>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a75      	ldr	r2, [pc, #468]	; (8008b4c <HAL_RCC_OscConfig+0x4bc>)
 8008978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800897c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800897e:	f7fc f949 	bl	8004c14 <HAL_GetTick>
 8008982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008984:	e008      	b.n	8008998 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008986:	f7fc f945 	bl	8004c14 <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	2b02      	cmp	r3, #2
 8008992:	d901      	bls.n	8008998 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e183      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008998:	4b6c      	ldr	r3, [pc, #432]	; (8008b4c <HAL_RCC_OscConfig+0x4bc>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d0f0      	beq.n	8008986 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d108      	bne.n	80089be <HAL_RCC_OscConfig+0x32e>
 80089ac:	4b66      	ldr	r3, [pc, #408]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 80089ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b2:	4a65      	ldr	r2, [pc, #404]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 80089b4:	f043 0301 	orr.w	r3, r3, #1
 80089b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089bc:	e024      	b.n	8008a08 <HAL_RCC_OscConfig+0x378>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b05      	cmp	r3, #5
 80089c4:	d110      	bne.n	80089e8 <HAL_RCC_OscConfig+0x358>
 80089c6:	4b60      	ldr	r3, [pc, #384]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 80089c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089cc:	4a5e      	ldr	r2, [pc, #376]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 80089ce:	f043 0304 	orr.w	r3, r3, #4
 80089d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089d6:	4b5c      	ldr	r3, [pc, #368]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 80089d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089dc:	4a5a      	ldr	r2, [pc, #360]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 80089de:	f043 0301 	orr.w	r3, r3, #1
 80089e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089e6:	e00f      	b.n	8008a08 <HAL_RCC_OscConfig+0x378>
 80089e8:	4b57      	ldr	r3, [pc, #348]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 80089ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ee:	4a56      	ldr	r2, [pc, #344]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 80089f0:	f023 0301 	bic.w	r3, r3, #1
 80089f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089f8:	4b53      	ldr	r3, [pc, #332]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 80089fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089fe:	4a52      	ldr	r2, [pc, #328]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008a00:	f023 0304 	bic.w	r3, r3, #4
 8008a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d016      	beq.n	8008a3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a10:	f7fc f900 	bl	8004c14 <HAL_GetTick>
 8008a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a16:	e00a      	b.n	8008a2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a18:	f7fc f8fc 	bl	8004c14 <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d901      	bls.n	8008a2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e138      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a2e:	4b46      	ldr	r3, [pc, #280]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d0ed      	beq.n	8008a18 <HAL_RCC_OscConfig+0x388>
 8008a3c:	e015      	b.n	8008a6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a3e:	f7fc f8e9 	bl	8004c14 <HAL_GetTick>
 8008a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a44:	e00a      	b.n	8008a5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a46:	f7fc f8e5 	bl	8004c14 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d901      	bls.n	8008a5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e121      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a5c:	4b3a      	ldr	r3, [pc, #232]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1ed      	bne.n	8008a46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a6a:	7ffb      	ldrb	r3, [r7, #31]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d105      	bne.n	8008a7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a70:	4b35      	ldr	r3, [pc, #212]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a74:	4a34      	ldr	r2, [pc, #208]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0320 	and.w	r3, r3, #32
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d03c      	beq.n	8008b02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d01c      	beq.n	8008aca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a90:	4b2d      	ldr	r3, [pc, #180]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a96:	4a2c      	ldr	r2, [pc, #176]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008a98:	f043 0301 	orr.w	r3, r3, #1
 8008a9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa0:	f7fc f8b8 	bl	8004c14 <HAL_GetTick>
 8008aa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008aa6:	e008      	b.n	8008aba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008aa8:	f7fc f8b4 	bl	8004c14 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e0f2      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008aba:	4b23      	ldr	r3, [pc, #140]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0ef      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x418>
 8008ac8:	e01b      	b.n	8008b02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008aca:	4b1f      	ldr	r3, [pc, #124]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ad0:	4a1d      	ldr	r2, [pc, #116]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008ad2:	f023 0301 	bic.w	r3, r3, #1
 8008ad6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ada:	f7fc f89b 	bl	8004c14 <HAL_GetTick>
 8008ade:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ae0:	e008      	b.n	8008af4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ae2:	f7fc f897 	bl	8004c14 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d901      	bls.n	8008af4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e0d5      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008af4:	4b14      	ldr	r3, [pc, #80]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1ef      	bne.n	8008ae2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 80c9 	beq.w	8008c9e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b0c:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f003 030c 	and.w	r3, r3, #12
 8008b14:	2b0c      	cmp	r3, #12
 8008b16:	f000 8083 	beq.w	8008c20 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d15e      	bne.n	8008be0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b22:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a08      	ldr	r2, [pc, #32]	; (8008b48 <HAL_RCC_OscConfig+0x4b8>)
 8008b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2e:	f7fc f871 	bl	8004c14 <HAL_GetTick>
 8008b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b34:	e00c      	b.n	8008b50 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b36:	f7fc f86d 	bl	8004c14 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d905      	bls.n	8008b50 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e0ab      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
 8008b48:	40021000 	.word	0x40021000
 8008b4c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b50:	4b55      	ldr	r3, [pc, #340]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1ec      	bne.n	8008b36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b5c:	4b52      	ldr	r3, [pc, #328]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	4b52      	ldr	r3, [pc, #328]	; (8008cac <HAL_RCC_OscConfig+0x61c>)
 8008b62:	4013      	ands	r3, r2
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	6a11      	ldr	r1, [r2, #32]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b6c:	3a01      	subs	r2, #1
 8008b6e:	0112      	lsls	r2, r2, #4
 8008b70:	4311      	orrs	r1, r2
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008b76:	0212      	lsls	r2, r2, #8
 8008b78:	4311      	orrs	r1, r2
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008b7e:	0852      	lsrs	r2, r2, #1
 8008b80:	3a01      	subs	r2, #1
 8008b82:	0552      	lsls	r2, r2, #21
 8008b84:	4311      	orrs	r1, r2
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b8a:	0852      	lsrs	r2, r2, #1
 8008b8c:	3a01      	subs	r2, #1
 8008b8e:	0652      	lsls	r2, r2, #25
 8008b90:	4311      	orrs	r1, r2
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008b96:	06d2      	lsls	r2, r2, #27
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	4943      	ldr	r1, [pc, #268]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ba0:	4b41      	ldr	r3, [pc, #260]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a40      	ldr	r2, [pc, #256]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008baa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008bac:	4b3e      	ldr	r3, [pc, #248]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	4a3d      	ldr	r2, [pc, #244]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb8:	f7fc f82c 	bl	8004c14 <HAL_GetTick>
 8008bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bc0:	f7fc f828 	bl	8004c14 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e066      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bd2:	4b35      	ldr	r3, [pc, #212]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0f0      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x530>
 8008bde:	e05e      	b.n	8008c9e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008be0:	4b31      	ldr	r3, [pc, #196]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a30      	ldr	r2, [pc, #192]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bec:	f7fc f812 	bl	8004c14 <HAL_GetTick>
 8008bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bf2:	e008      	b.n	8008c06 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bf4:	f7fc f80e 	bl	8004c14 <HAL_GetTick>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d901      	bls.n	8008c06 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e04c      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c06:	4b28      	ldr	r3, [pc, #160]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1f0      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008c12:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	4924      	ldr	r1, [pc, #144]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008c18:	4b25      	ldr	r3, [pc, #148]	; (8008cb0 <HAL_RCC_OscConfig+0x620>)
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	60cb      	str	r3, [r1, #12]
 8008c1e:	e03e      	b.n	8008c9e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	69db      	ldr	r3, [r3, #28]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d101      	bne.n	8008c2c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e039      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008c2c:	4b1e      	ldr	r3, [pc, #120]	; (8008ca8 <HAL_RCC_OscConfig+0x618>)
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f003 0203 	and.w	r2, r3, #3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a1b      	ldr	r3, [r3, #32]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d12c      	bne.n	8008c9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d123      	bne.n	8008c9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d11b      	bne.n	8008c9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d113      	bne.n	8008c9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7c:	085b      	lsrs	r3, r3, #1
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d109      	bne.n	8008c9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c90:	085b      	lsrs	r3, r3, #1
 8008c92:	3b01      	subs	r3, #1
 8008c94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d001      	beq.n	8008c9e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e000      	b.n	8008ca0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3720      	adds	r7, #32
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	40021000 	.word	0x40021000
 8008cac:	019f800c 	.word	0x019f800c
 8008cb0:	feeefffc 	.word	0xfeeefffc

08008cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d101      	bne.n	8008ccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e11e      	b.n	8008f0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ccc:	4b91      	ldr	r3, [pc, #580]	; (8008f14 <HAL_RCC_ClockConfig+0x260>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 030f 	and.w	r3, r3, #15
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d910      	bls.n	8008cfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cda:	4b8e      	ldr	r3, [pc, #568]	; (8008f14 <HAL_RCC_ClockConfig+0x260>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f023 020f 	bic.w	r2, r3, #15
 8008ce2:	498c      	ldr	r1, [pc, #560]	; (8008f14 <HAL_RCC_ClockConfig+0x260>)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cea:	4b8a      	ldr	r3, [pc, #552]	; (8008f14 <HAL_RCC_ClockConfig+0x260>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 030f 	and.w	r3, r3, #15
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d001      	beq.n	8008cfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e106      	b.n	8008f0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d073      	beq.n	8008df0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d129      	bne.n	8008d64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d10:	4b81      	ldr	r3, [pc, #516]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e0f4      	b.n	8008f0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008d20:	f000 f99e 	bl	8009060 <RCC_GetSysClockFreqFromPLLSource>
 8008d24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	4a7c      	ldr	r2, [pc, #496]	; (8008f1c <HAL_RCC_ClockConfig+0x268>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d93f      	bls.n	8008dae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008d2e:	4b7a      	ldr	r3, [pc, #488]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d009      	beq.n	8008d4e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d033      	beq.n	8008dae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d12f      	bne.n	8008dae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008d4e:	4b72      	ldr	r3, [pc, #456]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d56:	4a70      	ldr	r2, [pc, #448]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008d5e:	2380      	movs	r3, #128	; 0x80
 8008d60:	617b      	str	r3, [r7, #20]
 8008d62:	e024      	b.n	8008dae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d107      	bne.n	8008d7c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d6c:	4b6a      	ldr	r3, [pc, #424]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d109      	bne.n	8008d8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e0c6      	b.n	8008f0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d7c:	4b66      	ldr	r3, [pc, #408]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e0be      	b.n	8008f0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008d8c:	f000 f8ce 	bl	8008f2c <HAL_RCC_GetSysClockFreq>
 8008d90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	4a61      	ldr	r2, [pc, #388]	; (8008f1c <HAL_RCC_ClockConfig+0x268>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d909      	bls.n	8008dae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008d9a:	4b5f      	ldr	r3, [pc, #380]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008da2:	4a5d      	ldr	r2, [pc, #372]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008daa:	2380      	movs	r3, #128	; 0x80
 8008dac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008dae:	4b5a      	ldr	r3, [pc, #360]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f023 0203 	bic.w	r2, r3, #3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	4957      	ldr	r1, [pc, #348]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dc0:	f7fb ff28 	bl	8004c14 <HAL_GetTick>
 8008dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dc6:	e00a      	b.n	8008dde <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dc8:	f7fb ff24 	bl	8004c14 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d901      	bls.n	8008dde <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e095      	b.n	8008f0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dde:	4b4e      	ldr	r3, [pc, #312]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f003 020c 	and.w	r2, r3, #12
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d1eb      	bne.n	8008dc8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d023      	beq.n	8008e44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0304 	and.w	r3, r3, #4
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e08:	4b43      	ldr	r3, [pc, #268]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	4a42      	ldr	r2, [pc, #264]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008e0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008e12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0308 	and.w	r3, r3, #8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d007      	beq.n	8008e30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008e20:	4b3d      	ldr	r3, [pc, #244]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e28:	4a3b      	ldr	r2, [pc, #236]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008e2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008e2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e30:	4b39      	ldr	r3, [pc, #228]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	4936      	ldr	r1, [pc, #216]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	608b      	str	r3, [r1, #8]
 8008e42:	e008      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2b80      	cmp	r3, #128	; 0x80
 8008e48:	d105      	bne.n	8008e56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008e4a:	4b33      	ldr	r3, [pc, #204]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	4a32      	ldr	r2, [pc, #200]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008e50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e56:	4b2f      	ldr	r3, [pc, #188]	; (8008f14 <HAL_RCC_ClockConfig+0x260>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 030f 	and.w	r3, r3, #15
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d21d      	bcs.n	8008ea0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e64:	4b2b      	ldr	r3, [pc, #172]	; (8008f14 <HAL_RCC_ClockConfig+0x260>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f023 020f 	bic.w	r2, r3, #15
 8008e6c:	4929      	ldr	r1, [pc, #164]	; (8008f14 <HAL_RCC_ClockConfig+0x260>)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008e74:	f7fb fece 	bl	8004c14 <HAL_GetTick>
 8008e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e7a:	e00a      	b.n	8008e92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e7c:	f7fb feca 	bl	8004c14 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d901      	bls.n	8008e92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e03b      	b.n	8008f0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e92:	4b20      	ldr	r3, [pc, #128]	; (8008f14 <HAL_RCC_ClockConfig+0x260>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 030f 	and.w	r3, r3, #15
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d1ed      	bne.n	8008e7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0304 	and.w	r3, r3, #4
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d008      	beq.n	8008ebe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008eac:	4b1a      	ldr	r3, [pc, #104]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	4917      	ldr	r1, [pc, #92]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 0308 	and.w	r3, r3, #8
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d009      	beq.n	8008ede <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008eca:	4b13      	ldr	r3, [pc, #76]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	00db      	lsls	r3, r3, #3
 8008ed8:	490f      	ldr	r1, [pc, #60]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008ede:	f000 f825 	bl	8008f2c <HAL_RCC_GetSysClockFreq>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <HAL_RCC_ClockConfig+0x264>)
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	091b      	lsrs	r3, r3, #4
 8008eea:	f003 030f 	and.w	r3, r3, #15
 8008eee:	490c      	ldr	r1, [pc, #48]	; (8008f20 <HAL_RCC_ClockConfig+0x26c>)
 8008ef0:	5ccb      	ldrb	r3, [r1, r3]
 8008ef2:	f003 031f 	and.w	r3, r3, #31
 8008ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8008efa:	4a0a      	ldr	r2, [pc, #40]	; (8008f24 <HAL_RCC_ClockConfig+0x270>)
 8008efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008efe:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <HAL_RCC_ClockConfig+0x274>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fb fe3a 	bl	8004b7c <HAL_InitTick>
 8008f08:	4603      	mov	r3, r0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	40022000 	.word	0x40022000
 8008f18:	40021000 	.word	0x40021000
 8008f1c:	04c4b400 	.word	0x04c4b400
 8008f20:	08012e00 	.word	0x08012e00
 8008f24:	20000000 	.word	0x20000000
 8008f28:	20000004 	.word	0x20000004

08008f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008f32:	4b2c      	ldr	r3, [pc, #176]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f003 030c 	and.w	r3, r3, #12
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	d102      	bne.n	8008f44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f3e:	4b2a      	ldr	r3, [pc, #168]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f40:	613b      	str	r3, [r7, #16]
 8008f42:	e047      	b.n	8008fd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008f44:	4b27      	ldr	r3, [pc, #156]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f003 030c 	and.w	r3, r3, #12
 8008f4c:	2b08      	cmp	r3, #8
 8008f4e:	d102      	bne.n	8008f56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008f50:	4b26      	ldr	r3, [pc, #152]	; (8008fec <HAL_RCC_GetSysClockFreq+0xc0>)
 8008f52:	613b      	str	r3, [r7, #16]
 8008f54:	e03e      	b.n	8008fd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008f56:	4b23      	ldr	r3, [pc, #140]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f003 030c 	and.w	r3, r3, #12
 8008f5e:	2b0c      	cmp	r3, #12
 8008f60:	d136      	bne.n	8008fd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f62:	4b20      	ldr	r3, [pc, #128]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	f003 0303 	and.w	r3, r3, #3
 8008f6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f6c:	4b1d      	ldr	r3, [pc, #116]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	091b      	lsrs	r3, r3, #4
 8008f72:	f003 030f 	and.w	r3, r3, #15
 8008f76:	3301      	adds	r3, #1
 8008f78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	d10c      	bne.n	8008f9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f80:	4a1a      	ldr	r2, [pc, #104]	; (8008fec <HAL_RCC_GetSysClockFreq+0xc0>)
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f88:	4a16      	ldr	r2, [pc, #88]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f8a:	68d2      	ldr	r2, [r2, #12]
 8008f8c:	0a12      	lsrs	r2, r2, #8
 8008f8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008f92:	fb02 f303 	mul.w	r3, r2, r3
 8008f96:	617b      	str	r3, [r7, #20]
      break;
 8008f98:	e00c      	b.n	8008fb4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f9a:	4a13      	ldr	r2, [pc, #76]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa2:	4a10      	ldr	r2, [pc, #64]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fa4:	68d2      	ldr	r2, [r2, #12]
 8008fa6:	0a12      	lsrs	r2, r2, #8
 8008fa8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008fac:	fb02 f303 	mul.w	r3, r2, r3
 8008fb0:	617b      	str	r3, [r7, #20]
      break;
 8008fb2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008fb4:	4b0b      	ldr	r3, [pc, #44]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	0e5b      	lsrs	r3, r3, #25
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	005b      	lsls	r3, r3, #1
 8008fc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fcc:	613b      	str	r3, [r7, #16]
 8008fce:	e001      	b.n	8008fd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008fd4:	693b      	ldr	r3, [r7, #16]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	371c      	adds	r7, #28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	40021000 	.word	0x40021000
 8008fe8:	00f42400 	.word	0x00f42400
 8008fec:	007a1200 	.word	0x007a1200

08008ff0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ff4:	4b03      	ldr	r3, [pc, #12]	; (8009004 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000000 	.word	0x20000000

08009008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800900c:	f7ff fff0 	bl	8008ff0 <HAL_RCC_GetHCLKFreq>
 8009010:	4602      	mov	r2, r0
 8009012:	4b06      	ldr	r3, [pc, #24]	; (800902c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	0a1b      	lsrs	r3, r3, #8
 8009018:	f003 0307 	and.w	r3, r3, #7
 800901c:	4904      	ldr	r1, [pc, #16]	; (8009030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800901e:	5ccb      	ldrb	r3, [r1, r3]
 8009020:	f003 031f 	and.w	r3, r3, #31
 8009024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009028:	4618      	mov	r0, r3
 800902a:	bd80      	pop	{r7, pc}
 800902c:	40021000 	.word	0x40021000
 8009030:	08012e10 	.word	0x08012e10

08009034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009038:	f7ff ffda 	bl	8008ff0 <HAL_RCC_GetHCLKFreq>
 800903c:	4602      	mov	r2, r0
 800903e:	4b06      	ldr	r3, [pc, #24]	; (8009058 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	0adb      	lsrs	r3, r3, #11
 8009044:	f003 0307 	and.w	r3, r3, #7
 8009048:	4904      	ldr	r1, [pc, #16]	; (800905c <HAL_RCC_GetPCLK2Freq+0x28>)
 800904a:	5ccb      	ldrb	r3, [r1, r3]
 800904c:	f003 031f 	and.w	r3, r3, #31
 8009050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009054:	4618      	mov	r0, r3
 8009056:	bd80      	pop	{r7, pc}
 8009058:	40021000 	.word	0x40021000
 800905c:	08012e10 	.word	0x08012e10

08009060 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009066:	4b1e      	ldr	r3, [pc, #120]	; (80090e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f003 0303 	and.w	r3, r3, #3
 800906e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009070:	4b1b      	ldr	r3, [pc, #108]	; (80090e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	091b      	lsrs	r3, r3, #4
 8009076:	f003 030f 	and.w	r3, r3, #15
 800907a:	3301      	adds	r3, #1
 800907c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b03      	cmp	r3, #3
 8009082:	d10c      	bne.n	800909e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009084:	4a17      	ldr	r2, [pc, #92]	; (80090e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	fbb2 f3f3 	udiv	r3, r2, r3
 800908c:	4a14      	ldr	r2, [pc, #80]	; (80090e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800908e:	68d2      	ldr	r2, [r2, #12]
 8009090:	0a12      	lsrs	r2, r2, #8
 8009092:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009096:	fb02 f303 	mul.w	r3, r2, r3
 800909a:	617b      	str	r3, [r7, #20]
    break;
 800909c:	e00c      	b.n	80090b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800909e:	4a12      	ldr	r2, [pc, #72]	; (80090e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a6:	4a0e      	ldr	r2, [pc, #56]	; (80090e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80090a8:	68d2      	ldr	r2, [r2, #12]
 80090aa:	0a12      	lsrs	r2, r2, #8
 80090ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80090b0:	fb02 f303 	mul.w	r3, r2, r3
 80090b4:	617b      	str	r3, [r7, #20]
    break;
 80090b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80090b8:	4b09      	ldr	r3, [pc, #36]	; (80090e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	0e5b      	lsrs	r3, r3, #25
 80090be:	f003 0303 	and.w	r3, r3, #3
 80090c2:	3301      	adds	r3, #1
 80090c4:	005b      	lsls	r3, r3, #1
 80090c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80090d2:	687b      	ldr	r3, [r7, #4]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	371c      	adds	r7, #28
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	40021000 	.word	0x40021000
 80090e4:	007a1200 	.word	0x007a1200
 80090e8:	00f42400 	.word	0x00f42400

080090ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090f4:	2300      	movs	r3, #0
 80090f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090f8:	2300      	movs	r3, #0
 80090fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 8098 	beq.w	800923a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800910a:	2300      	movs	r3, #0
 800910c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800910e:	4b43      	ldr	r3, [pc, #268]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10d      	bne.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800911a:	4b40      	ldr	r3, [pc, #256]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800911c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911e:	4a3f      	ldr	r2, [pc, #252]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009124:	6593      	str	r3, [r2, #88]	; 0x58
 8009126:	4b3d      	ldr	r3, [pc, #244]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800912a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800912e:	60bb      	str	r3, [r7, #8]
 8009130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009132:	2301      	movs	r3, #1
 8009134:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009136:	4b3a      	ldr	r3, [pc, #232]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a39      	ldr	r2, [pc, #228]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800913c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009140:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009142:	f7fb fd67 	bl	8004c14 <HAL_GetTick>
 8009146:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009148:	e009      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800914a:	f7fb fd63 	bl	8004c14 <HAL_GetTick>
 800914e:	4602      	mov	r2, r0
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	2b02      	cmp	r3, #2
 8009156:	d902      	bls.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	74fb      	strb	r3, [r7, #19]
        break;
 800915c:	e005      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800915e:	4b30      	ldr	r3, [pc, #192]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009166:	2b00      	cmp	r3, #0
 8009168:	d0ef      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800916a:	7cfb      	ldrb	r3, [r7, #19]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d159      	bne.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009170:	4b2a      	ldr	r3, [pc, #168]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800917a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d01e      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	429a      	cmp	r2, r3
 800918a:	d019      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800918c:	4b23      	ldr	r3, [pc, #140]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800918e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009196:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009198:	4b20      	ldr	r3, [pc, #128]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800919a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800919e:	4a1f      	ldr	r2, [pc, #124]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80091a8:	4b1c      	ldr	r3, [pc, #112]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ae:	4a1b      	ldr	r2, [pc, #108]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80091b8:	4a18      	ldr	r2, [pc, #96]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d016      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ca:	f7fb fd23 	bl	8004c14 <HAL_GetTick>
 80091ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091d0:	e00b      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091d2:	f7fb fd1f 	bl	8004c14 <HAL_GetTick>
 80091d6:	4602      	mov	r2, r0
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d902      	bls.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	74fb      	strb	r3, [r7, #19]
            break;
 80091e8:	e006      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091ea:	4b0c      	ldr	r3, [pc, #48]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f0:	f003 0302 	and.w	r3, r3, #2
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d0ec      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80091f8:	7cfb      	ldrb	r3, [r7, #19]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10b      	bne.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091fe:	4b07      	ldr	r3, [pc, #28]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800920c:	4903      	ldr	r1, [pc, #12]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800920e:	4313      	orrs	r3, r2
 8009210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009214:	e008      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009216:	7cfb      	ldrb	r3, [r7, #19]
 8009218:	74bb      	strb	r3, [r7, #18]
 800921a:	e005      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800921c:	40021000 	.word	0x40021000
 8009220:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009224:	7cfb      	ldrb	r3, [r7, #19]
 8009226:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009228:	7c7b      	ldrb	r3, [r7, #17]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d105      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800922e:	4ba7      	ldr	r3, [pc, #668]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009232:	4aa6      	ldr	r2, [pc, #664]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009238:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00a      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009246:	4ba1      	ldr	r3, [pc, #644]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800924c:	f023 0203 	bic.w	r2, r3, #3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	499d      	ldr	r1, [pc, #628]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009256:	4313      	orrs	r3, r2
 8009258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00a      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009268:	4b98      	ldr	r3, [pc, #608]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800926a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800926e:	f023 020c 	bic.w	r2, r3, #12
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	4995      	ldr	r1, [pc, #596]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009278:	4313      	orrs	r3, r2
 800927a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0304 	and.w	r3, r3, #4
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00a      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800928a:	4b90      	ldr	r3, [pc, #576]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800928c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009290:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	498c      	ldr	r1, [pc, #560]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800929a:	4313      	orrs	r3, r2
 800929c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0308 	and.w	r3, r3, #8
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00a      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80092ac:	4b87      	ldr	r3, [pc, #540]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	4984      	ldr	r1, [pc, #528]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092bc:	4313      	orrs	r3, r2
 80092be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 0310 	and.w	r3, r3, #16
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80092ce:	4b7f      	ldr	r3, [pc, #508]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	497b      	ldr	r1, [pc, #492]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092de:	4313      	orrs	r3, r2
 80092e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 0320 	and.w	r3, r3, #32
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00a      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80092f0:	4b76      	ldr	r3, [pc, #472]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	4973      	ldr	r1, [pc, #460]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009300:	4313      	orrs	r3, r2
 8009302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00a      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009312:	4b6e      	ldr	r3, [pc, #440]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009318:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	496a      	ldr	r1, [pc, #424]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009322:	4313      	orrs	r3, r2
 8009324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00a      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009334:	4b65      	ldr	r3, [pc, #404]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800933a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	4962      	ldr	r1, [pc, #392]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009344:	4313      	orrs	r3, r2
 8009346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00a      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009356:	4b5d      	ldr	r3, [pc, #372]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800935c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	4959      	ldr	r1, [pc, #356]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009366:	4313      	orrs	r3, r2
 8009368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00a      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009378:	4b54      	ldr	r3, [pc, #336]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800937a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800937e:	f023 0203 	bic.w	r2, r3, #3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009386:	4951      	ldr	r1, [pc, #324]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009388:	4313      	orrs	r3, r2
 800938a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00a      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800939a:	4b4c      	ldr	r3, [pc, #304]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800939c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	4948      	ldr	r1, [pc, #288]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d015      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093bc:	4b43      	ldr	r3, [pc, #268]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ca:	4940      	ldr	r1, [pc, #256]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093da:	d105      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093dc:	4b3b      	ldr	r3, [pc, #236]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	4a3a      	ldr	r2, [pc, #232]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d015      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80093f4:	4b35      	ldr	r3, [pc, #212]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009402:	4932      	ldr	r1, [pc, #200]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009404:	4313      	orrs	r3, r2
 8009406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009412:	d105      	bne.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009414:	4b2d      	ldr	r3, [pc, #180]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	4a2c      	ldr	r2, [pc, #176]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800941a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800941e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009428:	2b00      	cmp	r3, #0
 800942a:	d015      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800942c:	4b27      	ldr	r3, [pc, #156]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800942e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009432:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943a:	4924      	ldr	r1, [pc, #144]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800943c:	4313      	orrs	r3, r2
 800943e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009446:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800944a:	d105      	bne.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800944c:	4b1f      	ldr	r3, [pc, #124]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	4a1e      	ldr	r2, [pc, #120]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009456:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d015      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009464:	4b19      	ldr	r3, [pc, #100]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800946a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009472:	4916      	ldr	r1, [pc, #88]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009474:	4313      	orrs	r3, r2
 8009476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009482:	d105      	bne.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009484:	4b11      	ldr	r3, [pc, #68]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	4a10      	ldr	r2, [pc, #64]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800948a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800948e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009498:	2b00      	cmp	r3, #0
 800949a:	d019      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800949c:	4b0b      	ldr	r3, [pc, #44]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800949e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	4908      	ldr	r1, [pc, #32]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094ba:	d109      	bne.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094bc:	4b03      	ldr	r3, [pc, #12]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	4a02      	ldr	r2, [pc, #8]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094c6:	60d3      	str	r3, [r2, #12]
 80094c8:	e002      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80094ca:	bf00      	nop
 80094cc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d015      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80094dc:	4b29      	ldr	r3, [pc, #164]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ea:	4926      	ldr	r1, [pc, #152]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094fa:	d105      	bne.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80094fc:	4b21      	ldr	r3, [pc, #132]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	4a20      	ldr	r2, [pc, #128]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009506:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d015      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009514:	4b1b      	ldr	r3, [pc, #108]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009522:	4918      	ldr	r1, [pc, #96]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009524:	4313      	orrs	r3, r2
 8009526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800952e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009532:	d105      	bne.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009534:	4b13      	ldr	r3, [pc, #76]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	4a12      	ldr	r2, [pc, #72]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800953a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800953e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d015      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800954c:	4b0d      	ldr	r3, [pc, #52]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800954e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009552:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800955a:	490a      	ldr	r1, [pc, #40]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800955c:	4313      	orrs	r3, r2
 800955e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800956a:	d105      	bne.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800956c:	4b05      	ldr	r3, [pc, #20]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	4a04      	ldr	r2, [pc, #16]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009576:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009578:	7cbb      	ldrb	r3, [r7, #18]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	40021000 	.word	0x40021000

08009588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e042      	b.n	8009620 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d106      	bne.n	80095b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7fb fa43 	bl	8004a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2224      	movs	r2, #36	; 0x24
 80095b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0201 	bic.w	r2, r2, #1
 80095c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fefc 	bl	800a3d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fbfd 	bl	8009dd8 <UART_SetConfig>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d101      	bne.n	80095e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e01b      	b.n	8009620 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0201 	orr.w	r2, r2, #1
 8009616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 ff7b 	bl	800a514 <UART_CheckIdleState>
 800961e:	4603      	mov	r3, r0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009628:	b480      	push	{r7}
 800962a:	b091      	sub	sp, #68	; 0x44
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	4613      	mov	r3, r2
 8009634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800963c:	2b20      	cmp	r3, #32
 800963e:	d178      	bne.n	8009732 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d002      	beq.n	800964c <HAL_UART_Transmit_IT+0x24>
 8009646:	88fb      	ldrh	r3, [r7, #6]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e071      	b.n	8009734 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	88fa      	ldrh	r2, [r7, #6]
 800965a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	88fa      	ldrh	r2, [r7, #6]
 8009662:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2221      	movs	r2, #33	; 0x21
 8009678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009684:	d12a      	bne.n	80096dc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800968e:	d107      	bne.n	80096a0 <HAL_UART_Transmit_IT+0x78>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d103      	bne.n	80096a0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	4a29      	ldr	r2, [pc, #164]	; (8009740 <HAL_UART_Transmit_IT+0x118>)
 800969c:	679a      	str	r2, [r3, #120]	; 0x78
 800969e:	e002      	b.n	80096a6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4a28      	ldr	r2, [pc, #160]	; (8009744 <HAL_UART_Transmit_IT+0x11c>)
 80096a4:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3308      	adds	r3, #8
 80096ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b0:	e853 3f00 	ldrex	r3, [r3]
 80096b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80096bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	3308      	adds	r3, #8
 80096c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096c6:	637a      	str	r2, [r7, #52]	; 0x34
 80096c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096ce:	e841 2300 	strex	r3, r2, [r1]
 80096d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1e5      	bne.n	80096a6 <HAL_UART_Transmit_IT+0x7e>
 80096da:	e028      	b.n	800972e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096e4:	d107      	bne.n	80096f6 <HAL_UART_Transmit_IT+0xce>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d103      	bne.n	80096f6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	4a15      	ldr	r2, [pc, #84]	; (8009748 <HAL_UART_Transmit_IT+0x120>)
 80096f2:	679a      	str	r2, [r3, #120]	; 0x78
 80096f4:	e002      	b.n	80096fc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4a14      	ldr	r2, [pc, #80]	; (800974c <HAL_UART_Transmit_IT+0x124>)
 80096fa:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	613b      	str	r3, [r7, #16]
   return(result);
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800971a:	623b      	str	r3, [r7, #32]
 800971c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	69f9      	ldr	r1, [r7, #28]
 8009720:	6a3a      	ldr	r2, [r7, #32]
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	61bb      	str	r3, [r7, #24]
   return(result);
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e6      	bne.n	80096fc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	e000      	b.n	8009734 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009732:	2302      	movs	r3, #2
  }
}
 8009734:	4618      	mov	r0, r3
 8009736:	3744      	adds	r7, #68	; 0x44
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	0800aa95 	.word	0x0800aa95
 8009744:	0800a9b5 	.word	0x0800a9b5
 8009748:	0800a8f3 	.word	0x0800a8f3
 800974c:	0800a83b 	.word	0x0800a83b

08009750 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b0ba      	sub	sp, #232	; 0xe8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009776:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800977a:	f640 030f 	movw	r3, #2063	; 0x80f
 800977e:	4013      	ands	r3, r2
 8009780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009788:	2b00      	cmp	r3, #0
 800978a:	d11b      	bne.n	80097c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800978c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009790:	f003 0320 	and.w	r3, r3, #32
 8009794:	2b00      	cmp	r3, #0
 8009796:	d015      	beq.n	80097c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800979c:	f003 0320 	and.w	r3, r3, #32
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d105      	bne.n	80097b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d009      	beq.n	80097c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 82e3 	beq.w	8009d80 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	4798      	blx	r3
      }
      return;
 80097c2:	e2dd      	b.n	8009d80 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80097c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 8123 	beq.w	8009a14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80097ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80097d2:	4b8d      	ldr	r3, [pc, #564]	; (8009a08 <HAL_UART_IRQHandler+0x2b8>)
 80097d4:	4013      	ands	r3, r2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d106      	bne.n	80097e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80097da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80097de:	4b8b      	ldr	r3, [pc, #556]	; (8009a0c <HAL_UART_IRQHandler+0x2bc>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 8116 	beq.w	8009a14 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ec:	f003 0301 	and.w	r3, r3, #1
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d011      	beq.n	8009818 <HAL_UART_IRQHandler+0xc8>
 80097f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00b      	beq.n	8009818 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2201      	movs	r2, #1
 8009806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800980e:	f043 0201 	orr.w	r2, r3, #1
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800981c:	f003 0302 	and.w	r3, r3, #2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d011      	beq.n	8009848 <HAL_UART_IRQHandler+0xf8>
 8009824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00b      	beq.n	8009848 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2202      	movs	r2, #2
 8009836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800983e:	f043 0204 	orr.w	r2, r3, #4
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	2b00      	cmp	r3, #0
 8009852:	d011      	beq.n	8009878 <HAL_UART_IRQHandler+0x128>
 8009854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2204      	movs	r2, #4
 8009866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800986e:	f043 0202 	orr.w	r2, r3, #2
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800987c:	f003 0308 	and.w	r3, r3, #8
 8009880:	2b00      	cmp	r3, #0
 8009882:	d017      	beq.n	80098b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009888:	f003 0320 	and.w	r3, r3, #32
 800988c:	2b00      	cmp	r3, #0
 800988e:	d105      	bne.n	800989c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009890:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009894:	4b5c      	ldr	r3, [pc, #368]	; (8009a08 <HAL_UART_IRQHandler+0x2b8>)
 8009896:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00b      	beq.n	80098b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2208      	movs	r2, #8
 80098a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098aa:	f043 0208 	orr.w	r2, r3, #8
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80098b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d012      	beq.n	80098e6 <HAL_UART_IRQHandler+0x196>
 80098c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00c      	beq.n	80098e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098dc:	f043 0220 	orr.w	r2, r3, #32
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 8249 	beq.w	8009d84 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098f6:	f003 0320 	and.w	r3, r3, #32
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d013      	beq.n	8009926 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d105      	bne.n	8009916 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800990a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800990e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d007      	beq.n	8009926 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800992c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993a:	2b40      	cmp	r3, #64	; 0x40
 800993c:	d005      	beq.n	800994a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800993e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009942:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009946:	2b00      	cmp	r3, #0
 8009948:	d054      	beq.n	80099f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fef9 	bl	800a742 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800995a:	2b40      	cmp	r3, #64	; 0x40
 800995c:	d146      	bne.n	80099ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3308      	adds	r3, #8
 8009964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800997c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3308      	adds	r3, #8
 8009986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800998a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800998e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800999a:	e841 2300 	strex	r3, r2, [r1]
 800999e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80099a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1d9      	bne.n	800995e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d017      	beq.n	80099e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ba:	4a15      	ldr	r2, [pc, #84]	; (8009a10 <HAL_UART_IRQHandler+0x2c0>)
 80099bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fb fa99 	bl	8004efc <HAL_DMA_Abort_IT>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d019      	beq.n	8009a04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80099de:	4610      	mov	r0, r2
 80099e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099e2:	e00f      	b.n	8009a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f9e1 	bl	8009dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ea:	e00b      	b.n	8009a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f9dd 	bl	8009dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099f2:	e007      	b.n	8009a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f9d9 	bl	8009dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009a02:	e1bf      	b.n	8009d84 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a04:	bf00      	nop
    return;
 8009a06:	e1bd      	b.n	8009d84 <HAL_UART_IRQHandler+0x634>
 8009a08:	10000001 	.word	0x10000001
 8009a0c:	04000120 	.word	0x04000120
 8009a10:	0800a80f 	.word	0x0800a80f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	f040 8153 	bne.w	8009cc4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a22:	f003 0310 	and.w	r3, r3, #16
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f000 814c 	beq.w	8009cc4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a30:	f003 0310 	and.w	r3, r3, #16
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 8145 	beq.w	8009cc4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2210      	movs	r2, #16
 8009a40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4c:	2b40      	cmp	r3, #64	; 0x40
 8009a4e:	f040 80bb 	bne.w	8009bc8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 818f 	beq.w	8009d88 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a74:	429a      	cmp	r2, r3
 8009a76:	f080 8187 	bcs.w	8009d88 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0320 	and.w	r3, r3, #32
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f040 8087 	bne.w	8009ba6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009aa4:	e853 3f00 	ldrex	r3, [r3]
 8009aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	461a      	mov	r2, r3
 8009abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ac6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ace:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ad2:	e841 2300 	strex	r3, r2, [r1]
 8009ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1da      	bne.n	8009a98 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009aec:	e853 3f00 	ldrex	r3, [r3]
 8009af0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009af4:	f023 0301 	bic.w	r3, r3, #1
 8009af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3308      	adds	r3, #8
 8009b02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009b0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b12:	e841 2300 	strex	r3, r2, [r1]
 8009b16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1e1      	bne.n	8009ae2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3308      	adds	r3, #8
 8009b24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b28:	e853 3f00 	ldrex	r3, [r3]
 8009b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b4a:	e841 2300 	strex	r3, r2, [r1]
 8009b4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e3      	bne.n	8009b1e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2220      	movs	r2, #32
 8009b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b6c:	e853 3f00 	ldrex	r3, [r3]
 8009b70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b74:	f023 0310 	bic.w	r3, r3, #16
 8009b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	461a      	mov	r2, r3
 8009b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b86:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b8e:	e841 2300 	strex	r3, r2, [r1]
 8009b92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1e4      	bne.n	8009b64 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fb f952 	bl	8004e4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2202      	movs	r2, #2
 8009baa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f8fd 	bl	8009dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bc6:	e0df      	b.n	8009d88 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 80d1 	beq.w	8009d8c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009bea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 80cc 	beq.w	8009d8c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfc:	e853 3f00 	ldrex	r3, [r3]
 8009c00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c16:	647b      	str	r3, [r7, #68]	; 0x44
 8009c18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e4      	bne.n	8009bf4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	3308      	adds	r3, #8
 8009c30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	623b      	str	r3, [r7, #32]
   return(result);
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c40:	f023 0301 	bic.w	r3, r3, #1
 8009c44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c52:	633a      	str	r2, [r7, #48]	; 0x30
 8009c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c5a:	e841 2300 	strex	r3, r2, [r1]
 8009c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e1      	bne.n	8009c2a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	e853 3f00 	ldrex	r3, [r3]
 8009c86:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f023 0310 	bic.w	r3, r3, #16
 8009c8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c9c:	61fb      	str	r3, [r7, #28]
 8009c9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca0:	69b9      	ldr	r1, [r7, #24]
 8009ca2:	69fa      	ldr	r2, [r7, #28]
 8009ca4:	e841 2300 	strex	r3, r2, [r1]
 8009ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1e4      	bne.n	8009c7a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cba:	4619      	mov	r1, r3
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f87f 	bl	8009dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009cc2:	e063      	b.n	8009d8c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00e      	beq.n	8009cee <HAL_UART_IRQHandler+0x59e>
 8009cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d008      	beq.n	8009cee <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ce4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 ff74 	bl	800abd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cec:	e051      	b.n	8009d92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d014      	beq.n	8009d24 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d105      	bne.n	8009d12 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d008      	beq.n	8009d24 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d03a      	beq.n	8009d90 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	4798      	blx	r3
    }
    return;
 8009d22:	e035      	b.n	8009d90 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d009      	beq.n	8009d44 <HAL_UART_IRQHandler+0x5f4>
 8009d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 ff1e 	bl	800ab7e <UART_EndTransmit_IT>
    return;
 8009d42:	e026      	b.n	8009d92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d009      	beq.n	8009d64 <HAL_UART_IRQHandler+0x614>
 8009d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 ff4d 	bl	800abfc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d62:	e016      	b.n	8009d92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d010      	beq.n	8009d92 <HAL_UART_IRQHandler+0x642>
 8009d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	da0c      	bge.n	8009d92 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 ff35 	bl	800abe8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d7e:	e008      	b.n	8009d92 <HAL_UART_IRQHandler+0x642>
      return;
 8009d80:	bf00      	nop
 8009d82:	e006      	b.n	8009d92 <HAL_UART_IRQHandler+0x642>
    return;
 8009d84:	bf00      	nop
 8009d86:	e004      	b.n	8009d92 <HAL_UART_IRQHandler+0x642>
      return;
 8009d88:	bf00      	nop
 8009d8a:	e002      	b.n	8009d92 <HAL_UART_IRQHandler+0x642>
      return;
 8009d8c:	bf00      	nop
 8009d8e:	e000      	b.n	8009d92 <HAL_UART_IRQHandler+0x642>
    return;
 8009d90:	bf00      	nop
  }
}
 8009d92:	37e8      	adds	r7, #232	; 0xe8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ddc:	b08c      	sub	sp, #48	; 0x30
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	689a      	ldr	r2, [r3, #8]
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	431a      	orrs	r2, r3
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	431a      	orrs	r2, r3
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	4baa      	ldr	r3, [pc, #680]	; (800a0b0 <UART_SetConfig+0x2d8>)
 8009e08:	4013      	ands	r3, r2
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	6812      	ldr	r2, [r2, #0]
 8009e0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e10:	430b      	orrs	r3, r1
 8009e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	68da      	ldr	r2, [r3, #12]
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a9f      	ldr	r2, [pc, #636]	; (800a0b4 <UART_SetConfig+0x2dc>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d004      	beq.n	8009e44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e40:	4313      	orrs	r3, r2
 8009e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009e4e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	6812      	ldr	r2, [r2, #0]
 8009e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e58:	430b      	orrs	r3, r1
 8009e5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e62:	f023 010f 	bic.w	r1, r3, #15
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a90      	ldr	r2, [pc, #576]	; (800a0b8 <UART_SetConfig+0x2e0>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d125      	bne.n	8009ec8 <UART_SetConfig+0xf0>
 8009e7c:	4b8f      	ldr	r3, [pc, #572]	; (800a0bc <UART_SetConfig+0x2e4>)
 8009e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e82:	f003 0303 	and.w	r3, r3, #3
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d81a      	bhi.n	8009ec0 <UART_SetConfig+0xe8>
 8009e8a:	a201      	add	r2, pc, #4	; (adr r2, 8009e90 <UART_SetConfig+0xb8>)
 8009e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e90:	08009ea1 	.word	0x08009ea1
 8009e94:	08009eb1 	.word	0x08009eb1
 8009e98:	08009ea9 	.word	0x08009ea9
 8009e9c:	08009eb9 	.word	0x08009eb9
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ea6:	e116      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eae:	e112      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009eb0:	2304      	movs	r3, #4
 8009eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eb6:	e10e      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009eb8:	2308      	movs	r3, #8
 8009eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ebe:	e10a      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009ec0:	2310      	movs	r3, #16
 8009ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ec6:	e106      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a7c      	ldr	r2, [pc, #496]	; (800a0c0 <UART_SetConfig+0x2e8>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d138      	bne.n	8009f44 <UART_SetConfig+0x16c>
 8009ed2:	4b7a      	ldr	r3, [pc, #488]	; (800a0bc <UART_SetConfig+0x2e4>)
 8009ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed8:	f003 030c 	and.w	r3, r3, #12
 8009edc:	2b0c      	cmp	r3, #12
 8009ede:	d82d      	bhi.n	8009f3c <UART_SetConfig+0x164>
 8009ee0:	a201      	add	r2, pc, #4	; (adr r2, 8009ee8 <UART_SetConfig+0x110>)
 8009ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee6:	bf00      	nop
 8009ee8:	08009f1d 	.word	0x08009f1d
 8009eec:	08009f3d 	.word	0x08009f3d
 8009ef0:	08009f3d 	.word	0x08009f3d
 8009ef4:	08009f3d 	.word	0x08009f3d
 8009ef8:	08009f2d 	.word	0x08009f2d
 8009efc:	08009f3d 	.word	0x08009f3d
 8009f00:	08009f3d 	.word	0x08009f3d
 8009f04:	08009f3d 	.word	0x08009f3d
 8009f08:	08009f25 	.word	0x08009f25
 8009f0c:	08009f3d 	.word	0x08009f3d
 8009f10:	08009f3d 	.word	0x08009f3d
 8009f14:	08009f3d 	.word	0x08009f3d
 8009f18:	08009f35 	.word	0x08009f35
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f22:	e0d8      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009f24:	2302      	movs	r3, #2
 8009f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f2a:	e0d4      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009f2c:	2304      	movs	r3, #4
 8009f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f32:	e0d0      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009f34:	2308      	movs	r3, #8
 8009f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f3a:	e0cc      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009f3c:	2310      	movs	r3, #16
 8009f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f42:	e0c8      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a5e      	ldr	r2, [pc, #376]	; (800a0c4 <UART_SetConfig+0x2ec>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d125      	bne.n	8009f9a <UART_SetConfig+0x1c2>
 8009f4e:	4b5b      	ldr	r3, [pc, #364]	; (800a0bc <UART_SetConfig+0x2e4>)
 8009f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f58:	2b30      	cmp	r3, #48	; 0x30
 8009f5a:	d016      	beq.n	8009f8a <UART_SetConfig+0x1b2>
 8009f5c:	2b30      	cmp	r3, #48	; 0x30
 8009f5e:	d818      	bhi.n	8009f92 <UART_SetConfig+0x1ba>
 8009f60:	2b20      	cmp	r3, #32
 8009f62:	d00a      	beq.n	8009f7a <UART_SetConfig+0x1a2>
 8009f64:	2b20      	cmp	r3, #32
 8009f66:	d814      	bhi.n	8009f92 <UART_SetConfig+0x1ba>
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <UART_SetConfig+0x19a>
 8009f6c:	2b10      	cmp	r3, #16
 8009f6e:	d008      	beq.n	8009f82 <UART_SetConfig+0x1aa>
 8009f70:	e00f      	b.n	8009f92 <UART_SetConfig+0x1ba>
 8009f72:	2300      	movs	r3, #0
 8009f74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f78:	e0ad      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f80:	e0a9      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009f82:	2304      	movs	r3, #4
 8009f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f88:	e0a5      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009f8a:	2308      	movs	r3, #8
 8009f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f90:	e0a1      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009f92:	2310      	movs	r3, #16
 8009f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f98:	e09d      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a4a      	ldr	r2, [pc, #296]	; (800a0c8 <UART_SetConfig+0x2f0>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d125      	bne.n	8009ff0 <UART_SetConfig+0x218>
 8009fa4:	4b45      	ldr	r3, [pc, #276]	; (800a0bc <UART_SetConfig+0x2e4>)
 8009fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009faa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009fae:	2bc0      	cmp	r3, #192	; 0xc0
 8009fb0:	d016      	beq.n	8009fe0 <UART_SetConfig+0x208>
 8009fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8009fb4:	d818      	bhi.n	8009fe8 <UART_SetConfig+0x210>
 8009fb6:	2b80      	cmp	r3, #128	; 0x80
 8009fb8:	d00a      	beq.n	8009fd0 <UART_SetConfig+0x1f8>
 8009fba:	2b80      	cmp	r3, #128	; 0x80
 8009fbc:	d814      	bhi.n	8009fe8 <UART_SetConfig+0x210>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <UART_SetConfig+0x1f0>
 8009fc2:	2b40      	cmp	r3, #64	; 0x40
 8009fc4:	d008      	beq.n	8009fd8 <UART_SetConfig+0x200>
 8009fc6:	e00f      	b.n	8009fe8 <UART_SetConfig+0x210>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fce:	e082      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fd6:	e07e      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009fd8:	2304      	movs	r3, #4
 8009fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fde:	e07a      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009fe0:	2308      	movs	r3, #8
 8009fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fe6:	e076      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009fe8:	2310      	movs	r3, #16
 8009fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fee:	e072      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a35      	ldr	r2, [pc, #212]	; (800a0cc <UART_SetConfig+0x2f4>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d12a      	bne.n	800a050 <UART_SetConfig+0x278>
 8009ffa:	4b30      	ldr	r3, [pc, #192]	; (800a0bc <UART_SetConfig+0x2e4>)
 8009ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a004:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a008:	d01a      	beq.n	800a040 <UART_SetConfig+0x268>
 800a00a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a00e:	d81b      	bhi.n	800a048 <UART_SetConfig+0x270>
 800a010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a014:	d00c      	beq.n	800a030 <UART_SetConfig+0x258>
 800a016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a01a:	d815      	bhi.n	800a048 <UART_SetConfig+0x270>
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d003      	beq.n	800a028 <UART_SetConfig+0x250>
 800a020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a024:	d008      	beq.n	800a038 <UART_SetConfig+0x260>
 800a026:	e00f      	b.n	800a048 <UART_SetConfig+0x270>
 800a028:	2300      	movs	r3, #0
 800a02a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a02e:	e052      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 800a030:	2302      	movs	r3, #2
 800a032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a036:	e04e      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 800a038:	2304      	movs	r3, #4
 800a03a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a03e:	e04a      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 800a040:	2308      	movs	r3, #8
 800a042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a046:	e046      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 800a048:	2310      	movs	r3, #16
 800a04a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a04e:	e042      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a17      	ldr	r2, [pc, #92]	; (800a0b4 <UART_SetConfig+0x2dc>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d13a      	bne.n	800a0d0 <UART_SetConfig+0x2f8>
 800a05a:	4b18      	ldr	r3, [pc, #96]	; (800a0bc <UART_SetConfig+0x2e4>)
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a060:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a064:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a068:	d01a      	beq.n	800a0a0 <UART_SetConfig+0x2c8>
 800a06a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a06e:	d81b      	bhi.n	800a0a8 <UART_SetConfig+0x2d0>
 800a070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a074:	d00c      	beq.n	800a090 <UART_SetConfig+0x2b8>
 800a076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a07a:	d815      	bhi.n	800a0a8 <UART_SetConfig+0x2d0>
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d003      	beq.n	800a088 <UART_SetConfig+0x2b0>
 800a080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a084:	d008      	beq.n	800a098 <UART_SetConfig+0x2c0>
 800a086:	e00f      	b.n	800a0a8 <UART_SetConfig+0x2d0>
 800a088:	2300      	movs	r3, #0
 800a08a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a08e:	e022      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 800a090:	2302      	movs	r3, #2
 800a092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a096:	e01e      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 800a098:	2304      	movs	r3, #4
 800a09a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a09e:	e01a      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 800a0a0:	2308      	movs	r3, #8
 800a0a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0a6:	e016      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 800a0a8:	2310      	movs	r3, #16
 800a0aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a0ae:	e012      	b.n	800a0d6 <UART_SetConfig+0x2fe>
 800a0b0:	cfff69f3 	.word	0xcfff69f3
 800a0b4:	40008000 	.word	0x40008000
 800a0b8:	40013800 	.word	0x40013800
 800a0bc:	40021000 	.word	0x40021000
 800a0c0:	40004400 	.word	0x40004400
 800a0c4:	40004800 	.word	0x40004800
 800a0c8:	40004c00 	.word	0x40004c00
 800a0cc:	40005000 	.word	0x40005000
 800a0d0:	2310      	movs	r3, #16
 800a0d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4aae      	ldr	r2, [pc, #696]	; (800a394 <UART_SetConfig+0x5bc>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	f040 8097 	bne.w	800a210 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0e6:	2b08      	cmp	r3, #8
 800a0e8:	d823      	bhi.n	800a132 <UART_SetConfig+0x35a>
 800a0ea:	a201      	add	r2, pc, #4	; (adr r2, 800a0f0 <UART_SetConfig+0x318>)
 800a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f0:	0800a115 	.word	0x0800a115
 800a0f4:	0800a133 	.word	0x0800a133
 800a0f8:	0800a11d 	.word	0x0800a11d
 800a0fc:	0800a133 	.word	0x0800a133
 800a100:	0800a123 	.word	0x0800a123
 800a104:	0800a133 	.word	0x0800a133
 800a108:	0800a133 	.word	0x0800a133
 800a10c:	0800a133 	.word	0x0800a133
 800a110:	0800a12b 	.word	0x0800a12b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a114:	f7fe ff78 	bl	8009008 <HAL_RCC_GetPCLK1Freq>
 800a118:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a11a:	e010      	b.n	800a13e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a11c:	4b9e      	ldr	r3, [pc, #632]	; (800a398 <UART_SetConfig+0x5c0>)
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a120:	e00d      	b.n	800a13e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a122:	f7fe ff03 	bl	8008f2c <HAL_RCC_GetSysClockFreq>
 800a126:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a128:	e009      	b.n	800a13e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a12a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a130:	e005      	b.n	800a13e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a13c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	2b00      	cmp	r3, #0
 800a142:	f000 8130 	beq.w	800a3a6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14a:	4a94      	ldr	r2, [pc, #592]	; (800a39c <UART_SetConfig+0x5c4>)
 800a14c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a150:	461a      	mov	r2, r3
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	fbb3 f3f2 	udiv	r3, r3, r2
 800a158:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	4613      	mov	r3, r2
 800a160:	005b      	lsls	r3, r3, #1
 800a162:	4413      	add	r3, r2
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	429a      	cmp	r2, r3
 800a168:	d305      	bcc.n	800a176 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	429a      	cmp	r2, r3
 800a174:	d903      	bls.n	800a17e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a17c:	e113      	b.n	800a3a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	2200      	movs	r2, #0
 800a182:	60bb      	str	r3, [r7, #8]
 800a184:	60fa      	str	r2, [r7, #12]
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18a:	4a84      	ldr	r2, [pc, #528]	; (800a39c <UART_SetConfig+0x5c4>)
 800a18c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a190:	b29b      	uxth	r3, r3
 800a192:	2200      	movs	r2, #0
 800a194:	603b      	str	r3, [r7, #0]
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a19c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1a0:	f7f6 fd9a 	bl	8000cd8 <__aeabi_uldivmod>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	f04f 0200 	mov.w	r2, #0
 800a1b0:	f04f 0300 	mov.w	r3, #0
 800a1b4:	020b      	lsls	r3, r1, #8
 800a1b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1ba:	0202      	lsls	r2, r0, #8
 800a1bc:	6979      	ldr	r1, [r7, #20]
 800a1be:	6849      	ldr	r1, [r1, #4]
 800a1c0:	0849      	lsrs	r1, r1, #1
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	eb12 0804 	adds.w	r8, r2, r4
 800a1cc:	eb43 0905 	adc.w	r9, r3, r5
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	469a      	mov	sl, r3
 800a1d8:	4693      	mov	fp, r2
 800a1da:	4652      	mov	r2, sl
 800a1dc:	465b      	mov	r3, fp
 800a1de:	4640      	mov	r0, r8
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	f7f6 fd79 	bl	8000cd8 <__aeabi_uldivmod>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1f4:	d308      	bcc.n	800a208 <UART_SetConfig+0x430>
 800a1f6:	6a3b      	ldr	r3, [r7, #32]
 800a1f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1fc:	d204      	bcs.n	800a208 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	6a3a      	ldr	r2, [r7, #32]
 800a204:	60da      	str	r2, [r3, #12]
 800a206:	e0ce      	b.n	800a3a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a20e:	e0ca      	b.n	800a3a6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a218:	d166      	bne.n	800a2e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a21a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a21e:	2b08      	cmp	r3, #8
 800a220:	d827      	bhi.n	800a272 <UART_SetConfig+0x49a>
 800a222:	a201      	add	r2, pc, #4	; (adr r2, 800a228 <UART_SetConfig+0x450>)
 800a224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a228:	0800a24d 	.word	0x0800a24d
 800a22c:	0800a255 	.word	0x0800a255
 800a230:	0800a25d 	.word	0x0800a25d
 800a234:	0800a273 	.word	0x0800a273
 800a238:	0800a263 	.word	0x0800a263
 800a23c:	0800a273 	.word	0x0800a273
 800a240:	0800a273 	.word	0x0800a273
 800a244:	0800a273 	.word	0x0800a273
 800a248:	0800a26b 	.word	0x0800a26b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a24c:	f7fe fedc 	bl	8009008 <HAL_RCC_GetPCLK1Freq>
 800a250:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a252:	e014      	b.n	800a27e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a254:	f7fe feee 	bl	8009034 <HAL_RCC_GetPCLK2Freq>
 800a258:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a25a:	e010      	b.n	800a27e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a25c:	4b4e      	ldr	r3, [pc, #312]	; (800a398 <UART_SetConfig+0x5c0>)
 800a25e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a260:	e00d      	b.n	800a27e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a262:	f7fe fe63 	bl	8008f2c <HAL_RCC_GetSysClockFreq>
 800a266:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a268:	e009      	b.n	800a27e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a26a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a26e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a270:	e005      	b.n	800a27e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a272:	2300      	movs	r3, #0
 800a274:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a27c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	2b00      	cmp	r3, #0
 800a282:	f000 8090 	beq.w	800a3a6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28a:	4a44      	ldr	r2, [pc, #272]	; (800a39c <UART_SetConfig+0x5c4>)
 800a28c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a290:	461a      	mov	r2, r3
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	fbb3 f3f2 	udiv	r3, r3, r2
 800a298:	005a      	lsls	r2, r3, #1
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	085b      	lsrs	r3, r3, #1
 800a2a0:	441a      	add	r2, r3
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2ac:	6a3b      	ldr	r3, [r7, #32]
 800a2ae:	2b0f      	cmp	r3, #15
 800a2b0:	d916      	bls.n	800a2e0 <UART_SetConfig+0x508>
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2b8:	d212      	bcs.n	800a2e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	f023 030f 	bic.w	r3, r3, #15
 800a2c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	085b      	lsrs	r3, r3, #1
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	f003 0307 	and.w	r3, r3, #7
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	8bfb      	ldrh	r3, [r7, #30]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	8bfa      	ldrh	r2, [r7, #30]
 800a2dc:	60da      	str	r2, [r3, #12]
 800a2de:	e062      	b.n	800a3a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a2e6:	e05e      	b.n	800a3a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a2ec:	2b08      	cmp	r3, #8
 800a2ee:	d828      	bhi.n	800a342 <UART_SetConfig+0x56a>
 800a2f0:	a201      	add	r2, pc, #4	; (adr r2, 800a2f8 <UART_SetConfig+0x520>)
 800a2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f6:	bf00      	nop
 800a2f8:	0800a31d 	.word	0x0800a31d
 800a2fc:	0800a325 	.word	0x0800a325
 800a300:	0800a32d 	.word	0x0800a32d
 800a304:	0800a343 	.word	0x0800a343
 800a308:	0800a333 	.word	0x0800a333
 800a30c:	0800a343 	.word	0x0800a343
 800a310:	0800a343 	.word	0x0800a343
 800a314:	0800a343 	.word	0x0800a343
 800a318:	0800a33b 	.word	0x0800a33b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a31c:	f7fe fe74 	bl	8009008 <HAL_RCC_GetPCLK1Freq>
 800a320:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a322:	e014      	b.n	800a34e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a324:	f7fe fe86 	bl	8009034 <HAL_RCC_GetPCLK2Freq>
 800a328:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a32a:	e010      	b.n	800a34e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a32c:	4b1a      	ldr	r3, [pc, #104]	; (800a398 <UART_SetConfig+0x5c0>)
 800a32e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a330:	e00d      	b.n	800a34e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a332:	f7fe fdfb 	bl	8008f2c <HAL_RCC_GetSysClockFreq>
 800a336:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a338:	e009      	b.n	800a34e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a33a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a33e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a340:	e005      	b.n	800a34e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a342:	2300      	movs	r3, #0
 800a344:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a34c:	bf00      	nop
    }

    if (pclk != 0U)
 800a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a350:	2b00      	cmp	r3, #0
 800a352:	d028      	beq.n	800a3a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a358:	4a10      	ldr	r2, [pc, #64]	; (800a39c <UART_SetConfig+0x5c4>)
 800a35a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a35e:	461a      	mov	r2, r3
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	fbb3 f2f2 	udiv	r2, r3, r2
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	085b      	lsrs	r3, r3, #1
 800a36c:	441a      	add	r2, r3
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	fbb2 f3f3 	udiv	r3, r2, r3
 800a376:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	2b0f      	cmp	r3, #15
 800a37c:	d910      	bls.n	800a3a0 <UART_SetConfig+0x5c8>
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a384:	d20c      	bcs.n	800a3a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	b29a      	uxth	r2, r3
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	60da      	str	r2, [r3, #12]
 800a390:	e009      	b.n	800a3a6 <UART_SetConfig+0x5ce>
 800a392:	bf00      	nop
 800a394:	40008000 	.word	0x40008000
 800a398:	00f42400 	.word	0x00f42400
 800a39c:	08012e28 	.word	0x08012e28
      }
      else
      {
        ret = HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a3c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3730      	adds	r7, #48	; 0x30
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a3d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3dc:	f003 0308 	and.w	r3, r3, #8
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00a      	beq.n	800a3fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00a      	beq.n	800a41c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	430a      	orrs	r2, r1
 800a41a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a420:	f003 0302 	and.w	r3, r3, #2
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00a      	beq.n	800a43e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	430a      	orrs	r2, r1
 800a43c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a442:	f003 0304 	and.w	r3, r3, #4
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00a      	beq.n	800a460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	430a      	orrs	r2, r1
 800a45e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a464:	f003 0310 	and.w	r3, r3, #16
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00a      	beq.n	800a482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	430a      	orrs	r2, r1
 800a480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a486:	f003 0320 	and.w	r3, r3, #32
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00a      	beq.n	800a4a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d01a      	beq.n	800a4e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	430a      	orrs	r2, r1
 800a4c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4ce:	d10a      	bne.n	800a4e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00a      	beq.n	800a508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	430a      	orrs	r2, r1
 800a506:	605a      	str	r2, [r3, #4]
  }
}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b098      	sub	sp, #96	; 0x60
 800a518:	af02      	add	r7, sp, #8
 800a51a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a524:	f7fa fb76 	bl	8004c14 <HAL_GetTick>
 800a528:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 0308 	and.w	r3, r3, #8
 800a534:	2b08      	cmp	r3, #8
 800a536:	d12f      	bne.n	800a598 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a538:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a540:	2200      	movs	r2, #0
 800a542:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f88e 	bl	800a668 <UART_WaitOnFlagUntilTimeout>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d022      	beq.n	800a598 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55a:	e853 3f00 	ldrex	r3, [r3]
 800a55e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a566:	653b      	str	r3, [r7, #80]	; 0x50
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	461a      	mov	r2, r3
 800a56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a570:	647b      	str	r3, [r7, #68]	; 0x44
 800a572:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a574:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a578:	e841 2300 	strex	r3, r2, [r1]
 800a57c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1e6      	bne.n	800a552 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2220      	movs	r2, #32
 800a588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e063      	b.n	800a660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0304 	and.w	r3, r3, #4
 800a5a2:	2b04      	cmp	r3, #4
 800a5a4:	d149      	bne.n	800a63a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f857 	bl	800a668 <UART_WaitOnFlagUntilTimeout>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d03c      	beq.n	800a63a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c8:	e853 3f00 	ldrex	r3, [r3]
 800a5cc:	623b      	str	r3, [r7, #32]
   return(result);
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5de:	633b      	str	r3, [r7, #48]	; 0x30
 800a5e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5e6:	e841 2300 	strex	r3, r2, [r1]
 800a5ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e6      	bne.n	800a5c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	e853 3f00 	ldrex	r3, [r3]
 800a600:	60fb      	str	r3, [r7, #12]
   return(result);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f023 0301 	bic.w	r3, r3, #1
 800a608:	64bb      	str	r3, [r7, #72]	; 0x48
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	3308      	adds	r3, #8
 800a610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a612:	61fa      	str	r2, [r7, #28]
 800a614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a616:	69b9      	ldr	r1, [r7, #24]
 800a618:	69fa      	ldr	r2, [r7, #28]
 800a61a:	e841 2300 	strex	r3, r2, [r1]
 800a61e:	617b      	str	r3, [r7, #20]
   return(result);
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1e5      	bne.n	800a5f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2220      	movs	r2, #32
 800a62a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a636:	2303      	movs	r3, #3
 800a638:	e012      	b.n	800a660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2220      	movs	r2, #32
 800a63e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2220      	movs	r2, #32
 800a646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3758      	adds	r7, #88	; 0x58
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	603b      	str	r3, [r7, #0]
 800a674:	4613      	mov	r3, r2
 800a676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a678:	e04f      	b.n	800a71a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a680:	d04b      	beq.n	800a71a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a682:	f7fa fac7 	bl	8004c14 <HAL_GetTick>
 800a686:	4602      	mov	r2, r0
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	69ba      	ldr	r2, [r7, #24]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d302      	bcc.n	800a698 <UART_WaitOnFlagUntilTimeout+0x30>
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a698:	2303      	movs	r3, #3
 800a69a:	e04e      	b.n	800a73a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 0304 	and.w	r3, r3, #4
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d037      	beq.n	800a71a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	2b80      	cmp	r3, #128	; 0x80
 800a6ae:	d034      	beq.n	800a71a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	2b40      	cmp	r3, #64	; 0x40
 800a6b4:	d031      	beq.n	800a71a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	f003 0308 	and.w	r3, r3, #8
 800a6c0:	2b08      	cmp	r3, #8
 800a6c2:	d110      	bne.n	800a6e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2208      	movs	r2, #8
 800a6ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f000 f838 	bl	800a742 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2208      	movs	r2, #8
 800a6d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e029      	b.n	800a73a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	69db      	ldr	r3, [r3, #28]
 800a6ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6f4:	d111      	bne.n	800a71a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 f81e 	bl	800a742 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2220      	movs	r2, #32
 800a70a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e00f      	b.n	800a73a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69da      	ldr	r2, [r3, #28]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	4013      	ands	r3, r2
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	429a      	cmp	r2, r3
 800a728:	bf0c      	ite	eq
 800a72a:	2301      	moveq	r3, #1
 800a72c:	2300      	movne	r3, #0
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	461a      	mov	r2, r3
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	429a      	cmp	r2, r3
 800a736:	d0a0      	beq.n	800a67a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a742:	b480      	push	{r7}
 800a744:	b095      	sub	sp, #84	; 0x54
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a752:	e853 3f00 	ldrex	r3, [r3]
 800a756:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a75e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	461a      	mov	r2, r3
 800a766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a768:	643b      	str	r3, [r7, #64]	; 0x40
 800a76a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a76e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a770:	e841 2300 	strex	r3, r2, [r1]
 800a774:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1e6      	bne.n	800a74a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3308      	adds	r3, #8
 800a782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a784:	6a3b      	ldr	r3, [r7, #32]
 800a786:	e853 3f00 	ldrex	r3, [r3]
 800a78a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a792:	f023 0301 	bic.w	r3, r3, #1
 800a796:	64bb      	str	r3, [r7, #72]	; 0x48
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	3308      	adds	r3, #8
 800a79e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7a8:	e841 2300 	strex	r3, r2, [r1]
 800a7ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1e3      	bne.n	800a77c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d118      	bne.n	800a7ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	e853 3f00 	ldrex	r3, [r3]
 800a7c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	f023 0310 	bic.w	r3, r3, #16
 800a7d0:	647b      	str	r3, [r7, #68]	; 0x44
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7da:	61bb      	str	r3, [r7, #24]
 800a7dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7de:	6979      	ldr	r1, [r7, #20]
 800a7e0:	69ba      	ldr	r2, [r7, #24]
 800a7e2:	e841 2300 	strex	r3, r2, [r1]
 800a7e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1e6      	bne.n	800a7bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a802:	bf00      	nop
 800a804:	3754      	adds	r7, #84	; 0x54
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b084      	sub	sp, #16
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a81a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f7ff fabd 	bl	8009dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a832:	bf00      	nop
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b08f      	sub	sp, #60	; 0x3c
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a848:	2b21      	cmp	r3, #33	; 0x21
 800a84a:	d14c      	bne.n	800a8e6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a852:	b29b      	uxth	r3, r3
 800a854:	2b00      	cmp	r3, #0
 800a856:	d132      	bne.n	800a8be <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85e:	6a3b      	ldr	r3, [r7, #32]
 800a860:	e853 3f00 	ldrex	r3, [r3]
 800a864:	61fb      	str	r3, [r7, #28]
   return(result);
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a86c:	637b      	str	r3, [r7, #52]	; 0x34
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a876:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a878:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a87c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a87e:	e841 2300 	strex	r3, r2, [r1]
 800a882:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1e6      	bne.n	800a858 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	e853 3f00 	ldrex	r3, [r3]
 800a896:	60bb      	str	r3, [r7, #8]
   return(result);
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a89e:	633b      	str	r3, [r7, #48]	; 0x30
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a8:	61bb      	str	r3, [r7, #24]
 800a8aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ac:	6979      	ldr	r1, [r7, #20]
 800a8ae:	69ba      	ldr	r2, [r7, #24]
 800a8b0:	e841 2300 	strex	r3, r2, [r1]
 800a8b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1e6      	bne.n	800a88a <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a8bc:	e013      	b.n	800a8e6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8c2:	781a      	ldrb	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ce:	1c5a      	adds	r2, r3, #1
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a8e6:	bf00      	nop
 800a8e8:	373c      	adds	r7, #60	; 0x3c
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b091      	sub	sp, #68	; 0x44
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a900:	2b21      	cmp	r3, #33	; 0x21
 800a902:	d151      	bne.n	800a9a8 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d132      	bne.n	800a976 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a918:	e853 3f00 	ldrex	r3, [r3]
 800a91c:	623b      	str	r3, [r7, #32]
   return(result);
 800a91e:	6a3b      	ldr	r3, [r7, #32]
 800a920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a924:	63bb      	str	r3, [r7, #56]	; 0x38
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	461a      	mov	r2, r3
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	633b      	str	r3, [r7, #48]	; 0x30
 800a930:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a936:	e841 2300 	strex	r3, r2, [r1]
 800a93a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1e6      	bne.n	800a910 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	e853 3f00 	ldrex	r3, [r3]
 800a94e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a956:	637b      	str	r3, [r7, #52]	; 0x34
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	461a      	mov	r2, r3
 800a95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a960:	61fb      	str	r3, [r7, #28]
 800a962:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a964:	69b9      	ldr	r1, [r7, #24]
 800a966:	69fa      	ldr	r2, [r7, #28]
 800a968:	e841 2300 	strex	r3, r2, [r1]
 800a96c:	617b      	str	r3, [r7, #20]
   return(result);
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1e6      	bne.n	800a942 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a974:	e018      	b.n	800a9a8 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a97a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a97e:	881b      	ldrh	r3, [r3, #0]
 800a980:	461a      	mov	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a98a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a990:	1c9a      	adds	r2, r3, #2
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a9a8:	bf00      	nop
 800a9aa:	3744      	adds	r7, #68	; 0x44
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b091      	sub	sp, #68	; 0x44
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c2:	2b21      	cmp	r3, #33	; 0x21
 800a9c4:	d160      	bne.n	800aa88 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a9cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a9ce:	e057      	b.n	800aa80 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d133      	bne.n	800aa44 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e6:	e853 3f00 	ldrex	r3, [r3]
 800a9ea:	623b      	str	r3, [r7, #32]
   return(result);
 800a9ec:	6a3b      	ldr	r3, [r7, #32]
 800a9ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a9f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9fc:	633a      	str	r2, [r7, #48]	; 0x30
 800a9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa04:	e841 2300 	strex	r3, r2, [r1]
 800aa08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1e5      	bne.n	800a9dc <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	e853 3f00 	ldrex	r3, [r3]
 800aa1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa24:	637b      	str	r3, [r7, #52]	; 0x34
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2e:	61fb      	str	r3, [r7, #28]
 800aa30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa32:	69b9      	ldr	r1, [r7, #24]
 800aa34:	69fa      	ldr	r2, [r7, #28]
 800aa36:	e841 2300 	strex	r3, r2, [r1]
 800aa3a:	617b      	str	r3, [r7, #20]
   return(result);
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e6      	bne.n	800aa10 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800aa42:	e021      	b.n	800aa88 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d013      	beq.n	800aa7a <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa56:	781a      	ldrb	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa62:	1c5a      	adds	r2, r3, #1
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	3b01      	subs	r3, #1
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aa7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800aa80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1a4      	bne.n	800a9d0 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800aa86:	e7ff      	b.n	800aa88 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800aa88:	bf00      	nop
 800aa8a:	3744      	adds	r7, #68	; 0x44
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b091      	sub	sp, #68	; 0x44
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa2:	2b21      	cmp	r3, #33	; 0x21
 800aaa4:	d165      	bne.n	800ab72 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aaac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800aaae:	e05c      	b.n	800ab6a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d133      	bne.n	800ab24 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3308      	adds	r3, #8
 800aac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac4:	6a3b      	ldr	r3, [r7, #32]
 800aac6:	e853 3f00 	ldrex	r3, [r3]
 800aaca:	61fb      	str	r3, [r7, #28]
   return(result);
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aad2:	637b      	str	r3, [r7, #52]	; 0x34
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3308      	adds	r3, #8
 800aada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aadc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aae4:	e841 2300 	strex	r3, r2, [r1]
 800aae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1e5      	bne.n	800aabc <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	e853 3f00 	ldrex	r3, [r3]
 800aafc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab04:	633b      	str	r3, [r7, #48]	; 0x30
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0e:	61bb      	str	r3, [r7, #24]
 800ab10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab12:	6979      	ldr	r1, [r7, #20]
 800ab14:	69ba      	ldr	r2, [r7, #24]
 800ab16:	e841 2300 	strex	r3, r2, [r1]
 800ab1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1e6      	bne.n	800aaf0 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ab22:	e026      	b.n	800ab72 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	69db      	ldr	r3, [r3, #28]
 800ab2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d018      	beq.n	800ab64 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab36:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ab38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3a:	881b      	ldrh	r3, [r3, #0]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab46:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab4c:	1c9a      	adds	r2, r3, #2
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ab64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ab66:	3b01      	subs	r3, #1
 800ab68:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ab6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d19f      	bne.n	800aab0 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ab70:	e7ff      	b.n	800ab72 <UART_TxISR_16BIT_FIFOEN+0xde>
 800ab72:	bf00      	nop
 800ab74:	3744      	adds	r7, #68	; 0x44
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b088      	sub	sp, #32
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	e853 3f00 	ldrex	r3, [r3]
 800ab92:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab9a:	61fb      	str	r3, [r7, #28]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	461a      	mov	r2, r3
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	61bb      	str	r3, [r7, #24]
 800aba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba8:	6979      	ldr	r1, [r7, #20]
 800abaa:	69ba      	ldr	r2, [r7, #24]
 800abac:	e841 2300 	strex	r3, r2, [r1]
 800abb0:	613b      	str	r3, [r7, #16]
   return(result);
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1e6      	bne.n	800ab86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2220      	movs	r2, #32
 800abbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7ff f8e6 	bl	8009d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abcc:	bf00      	nop
 800abce:	3720      	adds	r7, #32
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac04:	bf00      	nop
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d101      	bne.n	800ac26 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac22:	2302      	movs	r3, #2
 800ac24:	e027      	b.n	800ac76 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2224      	movs	r2, #36	; 0x24
 800ac32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f022 0201 	bic.w	r2, r2, #1
 800ac4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ac54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2220      	movs	r2, #32
 800ac68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b084      	sub	sp, #16
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
 800ac8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d101      	bne.n	800ac9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac96:	2302      	movs	r3, #2
 800ac98:	e02d      	b.n	800acf6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2224      	movs	r2, #36	; 0x24
 800aca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f022 0201 	bic.w	r2, r2, #1
 800acc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	430a      	orrs	r2, r1
 800acd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f850 	bl	800ad7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2220      	movs	r2, #32
 800ace8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d101      	bne.n	800ad16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad12:	2302      	movs	r3, #2
 800ad14:	e02d      	b.n	800ad72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2224      	movs	r2, #36	; 0x24
 800ad22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f022 0201 	bic.w	r2, r2, #1
 800ad3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	430a      	orrs	r2, r1
 800ad50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f812 	bl	800ad7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2220      	movs	r2, #32
 800ad64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
	...

0800ad7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d108      	bne.n	800ad9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad9c:	e031      	b.n	800ae02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad9e:	2308      	movs	r3, #8
 800ada0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ada2:	2308      	movs	r3, #8
 800ada4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	0e5b      	lsrs	r3, r3, #25
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	f003 0307 	and.w	r3, r3, #7
 800adb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	0f5b      	lsrs	r3, r3, #29
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	f003 0307 	and.w	r3, r3, #7
 800adc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adc6:	7bbb      	ldrb	r3, [r7, #14]
 800adc8:	7b3a      	ldrb	r2, [r7, #12]
 800adca:	4911      	ldr	r1, [pc, #68]	; (800ae10 <UARTEx_SetNbDataToProcess+0x94>)
 800adcc:	5c8a      	ldrb	r2, [r1, r2]
 800adce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800add2:	7b3a      	ldrb	r2, [r7, #12]
 800add4:	490f      	ldr	r1, [pc, #60]	; (800ae14 <UARTEx_SetNbDataToProcess+0x98>)
 800add6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800add8:	fb93 f3f2 	sdiv	r3, r3, r2
 800addc:	b29a      	uxth	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	7b7a      	ldrb	r2, [r7, #13]
 800ade8:	4909      	ldr	r1, [pc, #36]	; (800ae10 <UARTEx_SetNbDataToProcess+0x94>)
 800adea:	5c8a      	ldrb	r2, [r1, r2]
 800adec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800adf0:	7b7a      	ldrb	r2, [r7, #13]
 800adf2:	4908      	ldr	r1, [pc, #32]	; (800ae14 <UARTEx_SetNbDataToProcess+0x98>)
 800adf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ae02:	bf00      	nop
 800ae04:	3714      	adds	r7, #20
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	08012e40 	.word	0x08012e40
 800ae14:	08012e48 	.word	0x08012e48

0800ae18 <_ZN17AbstractAllocatorD1Ev>:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
    virtual void* allocate(CanardInstance* ins, size_t amount) = 0;
    virtual void free(CanardInstance* ins, void* pointer) = 0;
    virtual ~AbstractAllocator() {}
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	4a04      	ldr	r2, [pc, #16]	; (800ae34 <_ZN17AbstractAllocatorD1Ev+0x1c>)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr
 800ae34:	08012dd4 	.word	0x08012dd4

0800ae38 <_ZN17AbstractAllocatorD0Ev>:
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7ff ffe9 	bl	800ae18 <_ZN17AbstractAllocatorD1Ev>
 800ae46:	2108      	movs	r1, #8
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f002 fe54 	bl	800daf6 <_ZdlPvj>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4618      	mov	r0, r3
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
#include "sys_allocator.h"
#include <cstdlib>

void* SystemAllocator::allocate(CanardInstance* const ins, const size_t amount) {
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
    (void)ins;
    void* mem;

    CRITICAL_SECTION({ mem = std::malloc(amount); })
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f002 fe9f 	bl	800dba8 <malloc>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	617b      	str	r3, [r7, #20]
    if (mem == nullptr) {
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d105      	bne.n	800ae80 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
        utilities.error_handler();
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	3310      	adds	r3, #16
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7f8 fc48 	bl	8003710 <_ZNKSt8functionIFvvEEclEv>
    }
    return mem;
 800ae80:	697b      	ldr	r3, [r7, #20]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <_ZN15SystemAllocator4freeEP14CanardInstancePv>:

void SystemAllocator::free(CanardInstance* const ins, void* const pointer) {
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b084      	sub	sp, #16
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	60f8      	str	r0, [r7, #12]
 800ae92:	60b9      	str	r1, [r7, #8]
 800ae94:	607a      	str	r2, [r7, #4]
    (void)ins;
    CRITICAL_SECTION({ std::free(pointer); })
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f002 fe8e 	bl	800dbb8 <free>
}
 800ae9c:	bf00      	nop
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <_ZN15SystemAllocatorD1Ev>:
class SystemAllocator : public AbstractAllocator {
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	4a05      	ldr	r2, [pc, #20]	; (800aec4 <_ZN15SystemAllocatorD1Ev+0x20>)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	601a      	str	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7ff ffaf 	bl	800ae18 <_ZN17AbstractAllocatorD1Ev>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4618      	mov	r0, r3
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	08012e58 	.word	0x08012e58

0800aec8 <_ZN15SystemAllocatorD0Ev>:
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7ff ffe7 	bl	800aea4 <_ZN15SystemAllocatorD1Ev>
 800aed6:	2108      	movs	r1, #8
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f002 fe0c 	bl	800daf6 <_ZdlPvj>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4618      	mov	r0, r3
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
void CyphalInterface::push(
    const CanardMicrosecond tx_deadline_usec,
    const CanardTransferMetadata* const metadata,
    const size_t payload_size,
    const void* const payload
) const {
 800aee8:	b590      	push	{r4, r7, lr}
 800aeea:	b08b      	sub	sp, #44	; 0x2c
 800aeec:	af04      	add	r7, sp, #16
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t push_state = canardTxPush(
        &provider->queue,
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3304      	adds	r3, #4
 800aef8:	4618      	mov	r0, r3
 800aefa:	f000 f876 	bl	800afea <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800aefe:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800af00:	f103 040c 	add.w	r4, r3, #12
        &provider->canard,
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	3304      	adds	r3, #4
 800af08:	4618      	mov	r0, r3
 800af0a:	f000 f86e 	bl	800afea <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800af0e:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800af10:	f103 0120 	add.w	r1, r3, #32
 800af14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af16:	9302      	str	r3, [sp, #8]
 800af18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1a:	9301      	str	r3, [sp, #4]
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af24:	4620      	mov	r0, r4
 800af26:	f002 fb3f 	bl	800d5a8 <canardTxPush>
 800af2a:	6178      	str	r0, [r7, #20]
        tx_deadline_usec,
        metadata,
        payload_size,
        payload
    );
    if (push_state == -CANARD_ERROR_OUT_OF_MEMORY) {
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	f113 0f03 	cmn.w	r3, #3
 800af32:	d106      	bne.n	800af42 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
#ifdef __linux__
        std::cerr << "[Error: OOM] Tried to send to port: " << metadata->port_id << ", node: " << +metadata->remote_node_id << std::endl;
#else
        utilities.error_handler();
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	3310      	adds	r3, #16
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7f8 fbe8 	bl	8003710 <_ZNKSt8functionIFvvEEclEv>
#endif
        return;
 800af40:	e008      	b.n	800af54 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
    }
    if (push_state < 0) {
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2b00      	cmp	r3, #0
 800af46:	da05      	bge.n	800af54 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
        utilities.error_handler();
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	3310      	adds	r3, #16
 800af4e:	4618      	mov	r0, r3
 800af50:	f7f8 fbde 	bl	8003710 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800af54:	371c      	adds	r7, #28
 800af56:	46bd      	mov	sp, r7
 800af58:	bd90      	pop	{r4, r7, pc}
	...

0800af5c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
void CyphalInterface::subscribe(
    CanardPortID port_id,
    size_t extent,
    CanardTransferKind kind,
    CanardRxSubscription* subscription
) const {
 800af5c:	b590      	push	{r4, r7, lr}
 800af5e:	b089      	sub	sp, #36	; 0x24
 800af60:	af04      	add	r7, sp, #16
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	607a      	str	r2, [r7, #4]
 800af66:	461a      	mov	r2, r3
 800af68:	460b      	mov	r3, r1
 800af6a:	817b      	strh	r3, [r7, #10]
 800af6c:	4613      	mov	r3, r2
 800af6e:	727b      	strb	r3, [r7, #9]
    if (canardRxSubscribe(
            (CanardInstance* const)&provider->canard,
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	3304      	adds	r3, #4
 800af74:	4618      	mov	r0, r3
 800af76:	f000 f838 	bl	800afea <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800af7a:	4603      	mov	r3, r0
    if (canardRxSubscribe(
 800af7c:	f103 0020 	add.w	r0, r3, #32
 800af80:	897c      	ldrh	r4, [r7, #10]
 800af82:	7a79      	ldrb	r1, [r7, #9]
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	9302      	str	r3, [sp, #8]
 800af88:	4a0d      	ldr	r2, [pc, #52]	; (800afc0 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 800af8a:	f04f 0300 	mov.w	r3, #0
 800af8e:	e9cd 2300 	strd	r2, r3, [sp]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4622      	mov	r2, r4
 800af96:	f002 fc57 	bl	800d848 <canardRxSubscribe>
 800af9a:	4603      	mov	r3, r0
            kind,
            port_id,
            extent,
            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
            subscription
        ) != 1) {
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	bf14      	ite	ne
 800afa0:	2301      	movne	r3, #1
 800afa2:	2300      	moveq	r3, #0
 800afa4:	b2db      	uxtb	r3, r3
    if (canardRxSubscribe(
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d005      	beq.n	800afb6 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
        utilities.error_handler();
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	3310      	adds	r3, #16
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7f8 fbad 	bl	8003710 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800afb6:	bf00      	nop
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd90      	pop	{r4, r7, pc}
 800afbe:	bf00      	nop
 800afc0:	001e8480 	.word	0x001e8480

0800afc4 <_ZN15CyphalInterface4loopEv>:

void CyphalInterface::loop() {
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
    provider->can_loop();
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3304      	adds	r3, #4
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 f80a 	bl	800afea <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800afd6:	4603      	mov	r3, r0
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	3208      	adds	r2, #8
 800afdc:	6812      	ldr	r2, [r2, #0]
 800afde:	4618      	mov	r0, r3
 800afe0:	4790      	blx	r2
}
 800afe2:	bf00      	nop
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800afea:	b580      	push	{r7, lr}
 800afec:	b082      	sub	sp, #8
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
	return get();
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f805 	bl	800b002 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 800aff8:	4603      	mov	r3, r0
      }
 800affa:	4618      	mov	r0, r3
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f000 f805 	bl	800b01c <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800b012:	4603      	mov	r3, r0
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4618      	mov	r0, r3
 800b028:	f000 f806 	bl	800b038 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800b02c:	4603      	mov	r3, r0
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4618      	mov	r0, r3
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4618      	mov	r0, r3
 800b044:	f000 f805 	bl	800b052 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800b048:	4603      	mov	r3, r0
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800b052:	b580      	push	{r7, lr}
 800b054:	b082      	sub	sp, #8
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f805 	bl	800b06a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 800b060:	4603      	mov	r3, r0
 800b062:	4618      	mov	r0, r3
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4618      	mov	r0, r3
 800b076:	f000 f805 	bl	800b084 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 800b07a:	4603      	mov	r3, r0
 800b07c:	4618      	mov	r0, r3
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4618      	mov	r0, r3
 800b090:	370c      	adds	r7, #12
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <_Z16fdcan_dlc_to_lenm>:
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
};

size_t fdcan_dlc_to_len(uint32_t dlc) {
 800b09a:	b480      	push	{r7}
 800b09c:	b085      	sub	sp, #20
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
    auto dlc_index = (uint8_t)(dlc / 65536);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	0c1b      	lsrs	r3, r3, #16
 800b0a6:	73fb      	strb	r3, [r7, #15]
    if (dlc_index <= 8) {
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	2b08      	cmp	r3, #8
 800b0ac:	d801      	bhi.n	800b0b2 <_Z16fdcan_dlc_to_lenm+0x18>
        return dlc_index;
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
 800b0b0:	e009      	b.n	800b0c6 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    if (dlc_index <= 12) {
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
 800b0b4:	2b0c      	cmp	r3, #12
 800b0b6:	d803      	bhi.n	800b0c0 <_Z16fdcan_dlc_to_lenm+0x26>
        return 8 + 4 * (dlc_index - 8);
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	3b06      	subs	r3, #6
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	e002      	b.n	800b0c6 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    return 32 + 16 * (dlc_index - 13);
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	3b0b      	subs	r3, #11
 800b0c4:	011b      	lsls	r3, r3, #4
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <_ZL12delay_cyclest>:
       bne     .L3               // 1 + 1-3 такта, в среднем 2(3?)
     *
     * Всего 5 тактов на цикл + 8 в начале.
     */

    uint8_t real_cycles = (cycles - 8) / 5;
 800b0d4:	f1a0 0308 	sub.w	r3, r0, #8
 800b0d8:	4a07      	ldr	r2, [pc, #28]	; (800b0f8 <_ZL12delay_cyclest+0x24>)
 800b0da:	fb82 1203 	smull	r1, r2, r2, r3
 800b0de:	17db      	asrs	r3, r3, #31
 800b0e0:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    while (real_cycles--) {
 800b0e4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800b0e8:	d004      	beq.n	800b0f4 <_ZL12delay_cyclest+0x20>
        __asm__("nop");
 800b0ea:	bf00      	nop
    while (real_cycles--) {
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800b0f2:	d1fa      	bne.n	800b0ea <_ZL12delay_cyclest+0x16>
    }
}
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	66666667 	.word	0x66666667

0800b0fc <_ZN5G4CAN10len_to_dlcEj>:
#if (defined(STM32G474xx) || defined(STM32_G)) && defined(HAL_FDCAN_MODULE_ENABLED)
#include <cstring>

#include "FDCAN_generic.h"

uint32_t G4CAN::len_to_dlc(size_t len) {
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
    return CanardFDCANLengthToDLC[len];
 800b106:	4a05      	ldr	r2, [pc, #20]	; (800b11c <_ZN5G4CAN10len_to_dlcEj+0x20>)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	370c      	adds	r7, #12
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop
 800b11c:	08012e68 	.word	0x08012e68

0800b120 <_ZN5G4CAN10dlc_to_lenEm>:

size_t G4CAN::dlc_to_len(uint32_t dlc) {
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
    return fdcan_dlc_to_len(dlc);
 800b12a:	6838      	ldr	r0, [r7, #0]
 800b12c:	f7ff ffb5 	bl	800b09a <_Z16fdcan_dlc_to_lenm>
 800b130:	4603      	mov	r3, r0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <_ZN5G4CAN8can_loopEv>:

void G4CAN::can_loop() {
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b086      	sub	sp, #24
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800b142:	e017      	b.n	800b174 <_ZN5G4CAN8can_loopEv+0x3a>
        CanardFrame frame;
        bool has_read = read_frame(&frame);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	330c      	adds	r3, #12
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f107 0208 	add.w	r2, r7, #8
 800b150:	4611      	mov	r1, r2
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	4798      	blx	r3
 800b156:	4603      	mov	r3, r0
 800b158:	75fb      	strb	r3, [r7, #23]
        if (!has_read)
 800b15a:	7dfb      	ldrb	r3, [r7, #23]
 800b15c:	f083 0301 	eor.w	r3, r3, #1
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d115      	bne.n	800b192 <_ZN5G4CAN8can_loopEv+0x58>
            break;
        process_canard_rx(&frame);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f107 0208 	add.w	r2, r7, #8
 800b16c:	4611      	mov	r1, r2
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 f8e2 	bl	800b338 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b178:	2140      	movs	r1, #64	; 0x40
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fa faa2 	bl	80056c4 <HAL_FDCAN_GetRxFifoFillLevel>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	bf14      	ite	ne
 800b186:	2301      	movne	r3, #1
 800b188:	2300      	moveq	r3, #0
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1d9      	bne.n	800b144 <_ZN5G4CAN8can_loopEv+0xa>
 800b190:	e000      	b.n	800b194 <_ZN5G4CAN8can_loopEv+0x5a>
            break;
 800b192:	bf00      	nop
    }

    process_canard_tx();
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4618      	mov	r0, r3
 800b198:	f000 f92e 	bl	800b3f8 <_ZN19AbstractCANProvider17process_canard_txEv>
}
 800b19c:	bf00      	nop
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <_ZN5G4CAN10read_frameEP11CanardFrame>:

static uint8_t RxData[64] = {};

bool G4CAN::read_frame(CanardFrame* rxf) {
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b08e      	sub	sp, #56	; 0x38
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
    // may want to check 2 FIFOs in the future
    uint32_t rx_fifo = -1;
 800b1ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0)) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b8:	2140      	movs	r1, #64	; 0x40
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fa fa82 	bl	80056c4 <HAL_FDCAN_GetRxFifoFillLevel>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	bf14      	ite	ne
 800b1c6:	2301      	movne	r3, #1
 800b1c8:	2300      	moveq	r3, #0
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
        rx_fifo = FDCAN_RX_FIFO0;
 800b1d0:	2340      	movs	r3, #64	; 0x40
 800b1d2:	637b      	str	r3, [r7, #52]	; 0x34
 800b1d4:	e00f      	b.n	800b1f6 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
    } else if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO1)) {
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1da:	2141      	movs	r1, #65	; 0x41
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fa fa71 	bl	80056c4 <HAL_FDCAN_GetRxFifoFillLevel>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	bf14      	ite	ne
 800b1e8:	2301      	movne	r3, #1
 800b1ea:	2300      	moveq	r3, #0
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
        rx_fifo = FDCAN_RX_FIFO1;
 800b1f2:	2341      	movs	r3, #65	; 0x41
 800b1f4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if (rx_fifo == (uint32_t)-1) {
 800b1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1fc:	d101      	bne.n	800b202 <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
        return false;
 800b1fe:	2300      	movs	r3, #0
 800b200:	e02e      	b.n	800b260 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
    }

    FDCAN_RxHeaderTypeDef RxHeader = {};
 800b202:	f107 030c 	add.w	r3, r7, #12
 800b206:	2228      	movs	r2, #40	; 0x28
 800b208:	2100      	movs	r1, #0
 800b20a:	4618      	mov	r0, r3
 800b20c:	f003 fd4f 	bl	800ecae <memset>
    if (HAL_FDCAN_GetRxMessage(handler, rx_fifo, &RxHeader, RxData) != HAL_OK) {
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b214:	f107 020c 	add.w	r2, r7, #12
 800b218:	4b13      	ldr	r3, [pc, #76]	; (800b268 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800b21a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b21c:	f7fa f978 	bl	8005510 <HAL_FDCAN_GetRxMessage>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	bf14      	ite	ne
 800b226:	2301      	movne	r3, #1
 800b228:	2300      	moveq	r3, #0
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d005      	beq.n	800b23c <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
        utilities.error_handler();
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b234:	3310      	adds	r3, #16
 800b236:	4618      	mov	r0, r3
 800b238:	f7f8 fa6a 	bl	8003710 <_ZNKSt8functionIFvvEEclEv>
    }

    rxf->extended_can_id = RxHeader.Identifier;
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	601a      	str	r2, [r3, #0]
    rxf->payload_size = dlc_to_len(RxHeader.DataLength);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3304      	adds	r3, #4
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	69ba      	ldr	r2, [r7, #24]
 800b24c:	4611      	mov	r1, r2
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	4798      	blx	r3
 800b252:	4602      	mov	r2, r0
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	605a      	str	r2, [r3, #4]
    rxf->payload = (void*)RxData;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	4a03      	ldr	r2, [pc, #12]	; (800b268 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800b25c:	609a      	str	r2, [r3, #8]
    return true;
 800b25e:	2301      	movs	r3, #1
}
 800b260:	4618      	mov	r0, r3
 800b262:	3738      	adds	r7, #56	; 0x38
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	20000420 	.word	0x20000420

0800b26c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:

int G4CAN::write_frame(const CanardTxQueueItem* ti) {
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b08c      	sub	sp, #48	; 0x30
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = ti->frame.extended_can_id;
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 800b27c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b280:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800b282:	2300      	movs	r3, #0
 800b284:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = CanardFDCANLengthToDLC[ti->frame.payload_size];
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	4a2a      	ldr	r2, [pc, #168]	; (800b334 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 800b28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b290:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800b292:	2300      	movs	r3, #0
 800b294:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800b296:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b29a:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 800b29c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b2a0:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 800b2a2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b2a6:	627b      	str	r3, [r7, #36]	; 0x24
    TxHeader.MessageMarker = 0x0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	62bb      	str	r3, [r7, #40]	; 0x28

    // all mailboxes should be free -
    // https://forum.opencyphal.org/t/uavcan-v0-found-data-transfer-reversal/1476/6
    // "Reduce the number of enqueued frames to 1" - fix to inner priority inversion
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2b0:	e006      	b.n	800b2c0 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
        delay_cycles(ONE_FULL_FRAME_CYCLES);
 800b2b2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800b2b6:	f7ff ff0d 	bl	800b0d4 <_ZL12delay_cyclest>
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800b2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2bc:	3301      	adds	r3, #1
 800b2be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fa fa1b 	bl	8005700 <HAL_FDCAN_GetTxFifoFreeLevel>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b03      	cmp	r3, #3
 800b2ce:	d004      	beq.n	800b2da <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800b2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	dc01      	bgt.n	800b2da <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e000      	b.n	800b2dc <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e8      	bne.n	800b2b2 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
    } // wait for message to transmit
    if (HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3) {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fa fa0b 	bl	8005700 <HAL_FDCAN_GetTxFifoFreeLevel>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b03      	cmp	r3, #3
 800b2ee:	bf14      	ite	ne
 800b2f0:	2301      	movne	r3, #1
 800b2f2:	2300      	moveq	r3, #0
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d002      	beq.n	800b300 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
        return -1;
 800b2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fe:	e014      	b.n	800b32a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }

    if (HAL_FDCAN_AddMessageToTxFifoQ(handler, &TxHeader, (uint8_t *)ti->frame.payload) != HAL_OK) {
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b308:	f107 0308 	add.w	r3, r7, #8
 800b30c:	4619      	mov	r1, r3
 800b30e:	f7fa f8bb 	bl	8005488 <HAL_FDCAN_AddMessageToTxFifoQ>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	bf14      	ite	ne
 800b318:	2301      	movne	r3, #1
 800b31a:	2300      	moveq	r3, #0
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d002      	beq.n	800b328 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
        return -1;
 800b322:	f04f 33ff 	mov.w	r3, #4294967295
 800b326:	e000      	b.n	800b32a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }
    return TxHeader.DataLength;
 800b328:	697b      	ldr	r3, [r7, #20]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3730      	adds	r7, #48	; 0x30
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	08012e68 	.word	0x08012e68

0800b338 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
CanardInstance canard{};

std::unique_ptr<AbstractAllocator> _alloc_ptr;


void AbstractCANProvider::process_canard_rx(CanardFrame* frame) {
 800b338:	b590      	push	{r4, r7, lr}
 800b33a:	b093      	sub	sp, #76	; 0x4c
 800b33c:	af04      	add	r7, sp, #16
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
    CanardRxTransfer transfer = {.payload = nullptr};
 800b342:	f107 0310 	add.w	r3, r7, #16
 800b346:	2200      	movs	r2, #0
 800b348:	601a      	str	r2, [r3, #0]
 800b34a:	605a      	str	r2, [r3, #4]
 800b34c:	609a      	str	r2, [r3, #8]
 800b34e:	60da      	str	r2, [r3, #12]
 800b350:	611a      	str	r2, [r3, #16]
 800b352:	615a      	str	r2, [r3, #20]
    CanardRxSubscription* subscription = nullptr;
 800b354:	2300      	movs	r3, #0
 800b356:	60fb      	str	r3, [r7, #12]
    void (*processor)(CanardRxTransfer*) = nullptr;
 800b358:	2300      	movs	r3, #0
 800b35a:	637b      	str	r3, [r7, #52]	; 0x34
    IListener<CanardRxTransfer*>* listener = nullptr;
 800b35c:	2300      	movs	r3, #0
 800b35e:	633b      	str	r3, [r7, #48]	; 0x30

    const int8_t accept_result = canardRxAccept(
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f103 0420 	add.w	r4, r3, #32
        (CanardInstance* const)&canard,
        utilities.micros_64(),
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    const int8_t accept_result = canardRxAccept(
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7f8 f9e6 	bl	800373c <_ZNKSt8functionIFyvEEclEv>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	f107 010c 	add.w	r1, r7, #12
 800b378:	9103      	str	r1, [sp, #12]
 800b37a:	f107 0110 	add.w	r1, r7, #16
 800b37e:	9102      	str	r1, [sp, #8]
 800b380:	2100      	movs	r1, #0
 800b382:	9101      	str	r1, [sp, #4]
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	9100      	str	r1, [sp, #0]
 800b388:	4620      	mov	r0, r4
 800b38a:	f002 f9cd 	bl	800d728 <canardRxAccept>
 800b38e:	4603      	mov	r3, r0
 800b390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        frame,
        0,
        &transfer,
        &subscription
    );
    if (accept_result == 0 || accept_result > 1) {
 800b394:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d029      	beq.n	800b3f0 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xb8>
 800b39c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	dc25      	bgt.n	800b3f0 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xb8>
        // The received frame is either invalid or it's a non-last frame of a multi-frame transfer.
        return;
    }
    if (accept_result < 0) goto exit;
 800b3a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	db11      	blt.n	800b3d0 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x98>
    if (subscription == nullptr) goto exit;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d010      	beq.n	800b3d4 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x9c>

    listener = reinterpret_cast<IListener<CanardRxTransfer*>*>(subscription->user_reference);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	633b      	str	r3, [r7, #48]	; 0x30
    if (listener == nullptr) goto exit;
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00c      	beq.n	800b3d8 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
    listener->accept(&transfer);
 800b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f107 0210 	add.w	r2, r7, #16
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3cc:	4798      	blx	r3
 800b3ce:	e004      	b.n	800b3da <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (accept_result < 0) goto exit;
 800b3d0:	bf00      	nop
 800b3d2:	e002      	b.n	800b3da <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (subscription == nullptr) goto exit;
 800b3d4:	bf00      	nop
 800b3d6:	e000      	b.n	800b3da <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (listener == nullptr) goto exit;
 800b3d8:	bf00      	nop

exit:
    if (transfer.payload != nullptr) {
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d008      	beq.n	800b3f2 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xba>
        canard.memory_free(&canard, transfer.payload);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	3220      	adds	r2, #32
 800b3e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	4798      	blx	r3
 800b3ee:	e000      	b.n	800b3f2 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xba>
        return;
 800b3f0:	bf00      	nop
    }
}
 800b3f2:	373c      	adds	r7, #60	; 0x3c
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd90      	pop	{r4, r7, pc}

0800b3f8 <_ZN19AbstractCANProvider17process_canard_txEv>:

void AbstractCANProvider::process_canard_tx() {
 800b3f8:	b5b0      	push	{r4, r5, r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
    // Look at top of the TX queue of individual CAN frames
    while (queue.size != 0) {
 800b400:	e036      	b.n	800b470 <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
        const CanardTxQueueItem* ti = canardTxPeek(&queue);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	330c      	adds	r3, #12
 800b406:	4618      	mov	r0, r3
 800b408:	f002 f958 	bl	800d6bc <canardTxPeek>
 800b40c:	60f8      	str	r0, [r7, #12]

        if (0U == ti->tx_deadline_usec || ti->tx_deadline_usec > utilities.micros_64()) {
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b414:	4313      	orrs	r3, r2
 800b416:	d00c      	beq.n	800b432 <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b422:	4618      	mov	r0, r3
 800b424:	f7f8 f98a 	bl	800373c <_ZNKSt8functionIFyvEEclEv>
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	42a2      	cmp	r2, r4
 800b42e:	41ab      	sbcs	r3, r5
 800b430:	d201      	bcs.n	800b436 <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 800b432:	2301      	movs	r3, #1
 800b434:	e000      	b.n	800b438 <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 800b436:	2300      	movs	r3, #0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00a      	beq.n	800b452 <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
            int written = write_frame(ti);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	3310      	adds	r3, #16
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68f9      	ldr	r1, [r7, #12]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	4798      	blx	r3
 800b44a:	60b8      	str	r0, [r7, #8]
            if (written < 0) {
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	db13      	blt.n	800b47a <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
                break;
            }
        }
        // After the frame is transmitted or if it has timed out while waiting,
        // pop it from the queue and deallocate:
        canard.memory_free(&canard, canardTxPop(&queue, ti));
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f103 0520 	add.w	r5, r3, #32
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	330c      	adds	r3, #12
 800b460:	68f9      	ldr	r1, [r7, #12]
 800b462:	4618      	mov	r0, r3
 800b464:	f002 f93f 	bl	800d6e6 <canardTxPop>
 800b468:	4603      	mov	r3, r0
 800b46a:	4619      	mov	r1, r3
 800b46c:	4628      	mov	r0, r5
 800b46e:	47a0      	blx	r4
    while (queue.size != 0) {
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	695b      	ldr	r3, [r3, #20]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1c4      	bne.n	800b402 <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
    }
}
 800b478:	e000      	b.n	800b47c <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
                break;
 800b47a:	bf00      	nop
}
 800b47c:	bf00      	nop
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bdb0      	pop	{r4, r5, r7, pc}

0800b484 <_Z41__static_initialization_and_destruction_0ii>:
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d107      	bne.n	800b4a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d102      	bne.n	800b4a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b49e:	4803      	ldr	r0, [pc, #12]	; (800b4ac <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800b4a0:	f000 f806 	bl	800b4b0 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 800b4a4:	bf00      	nop
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	20000460 	.word	0x20000460

0800b4b0 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800b4b0:	b590      	push	{r4, r7, lr}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7f8 feec 	bl	8004298 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800b4c0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00c      	beq.n	800b4e4 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7f8 fd61 	bl	8003f92 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7f8 fe0b 	bl	80040ee <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4619      	mov	r1, r3
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f7f8 fee7 	bl	80042b2 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	601a      	str	r2, [r3, #0]
      }
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd90      	pop	{r4, r7, pc}

0800b4f4 <_GLOBAL__sub_I_queue>:
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b4fc:	2001      	movs	r0, #1
 800b4fe:	f7ff ffc1 	bl	800b484 <_Z41__static_initialization_and_destruction_0ii>
 800b502:	bd80      	pop	{r7, pc}

0800b504 <_GLOBAL__sub_D_queue>:
 800b504:	b580      	push	{r7, lr}
 800b506:	af00      	add	r7, sp, #0
 800b508:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b50c:	2000      	movs	r0, #0
 800b50e:	f7ff ffb9 	bl	800b484 <_Z41__static_initialization_and_destruction_0ii>
 800b512:	bd80      	pop	{r7, pc}

0800b514 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	460b      	mov	r3, r1
 800b51e:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 800b520:	2300      	movs	r3, #0
 800b522:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800b528:	e007      	b.n	800b53a <cavlFindExtremum+0x26>
    {
        result = c;
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 800b52e:	78fb      	ldrb	r3, [r7, #3]
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	4413      	add	r3, r2
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1f4      	bne.n	800b52a <cavlFindExtremum+0x16>
    }
    return result;
 800b540:	68fb      	ldr	r3, [r7, #12]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
	...

0800b550 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	460b      	mov	r3, r1
 800b55a:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d014      	beq.n	800b58c <cavlPrivateRotate+0x3c>
 800b562:	78fb      	ldrb	r3, [r7, #3]
 800b564:	f083 0301 	eor.w	r3, r3, #1
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4413      	add	r3, r2
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00a      	beq.n	800b58c <cavlPrivateRotate+0x3c>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b580:	db04      	blt.n	800b58c <cavlPrivateRotate+0x3c>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	dd05      	ble.n	800b598 <cavlPrivateRotate+0x48>
 800b58c:	4b2a      	ldr	r3, [pc, #168]	; (800b638 <cavlPrivateRotate+0xe8>)
 800b58e:	4a2b      	ldr	r2, [pc, #172]	; (800b63c <cavlPrivateRotate+0xec>)
 800b590:	2162      	movs	r1, #98	; 0x62
 800b592:	482b      	ldr	r0, [pc, #172]	; (800b640 <cavlPrivateRotate+0xf0>)
 800b594:	f002 fad8 	bl	800db48 <__assert_func>
    Cavl* const z = x->lr[!r];
 800b598:	78fb      	ldrb	r3, [r7, #3]
 800b59a:	f083 0301 	eor.w	r3, r3, #1
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	4413      	add	r3, r2
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00e      	beq.n	800b5d0 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	6879      	ldr	r1, [r7, #4]
 800b5be:	4299      	cmp	r1, r3
 800b5c0:	bf0c      	ite	eq
 800b5c2:	2301      	moveq	r3, #1
 800b5c4:	2300      	movne	r3, #0
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	601a      	str	r2, [r3, #0]
    x->up     = z;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 800b5de:	78fb      	ldrb	r3, [r7, #3]
 800b5e0:	78fa      	ldrb	r2, [r7, #3]
 800b5e2:	f082 0201 	eor.w	r2, r2, #1
 800b5e6:	b2d2      	uxtb	r2, r2
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4413      	add	r3, r2
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	6879      	ldr	r1, [r7, #4]
 800b5f4:	0083      	lsls	r3, r0, #2
 800b5f6:	440b      	add	r3, r1
 800b5f8:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 800b5fa:	78fb      	ldrb	r3, [r7, #3]
 800b5fc:	f083 0301 	eor.w	r3, r3, #1
 800b600:	b2db      	uxtb	r3, r3
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4413      	add	r3, r2
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d009      	beq.n	800b622 <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 800b60e:	78fb      	ldrb	r3, [r7, #3]
 800b610:	f083 0301 	eor.w	r3, r3, #1
 800b614:	b2db      	uxtb	r3, r3
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 800b622:	78fb      	ldrb	r3, [r7, #3]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4413      	add	r3, r2
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	605a      	str	r2, [r3, #4]
}
 800b62e:	bf00      	nop
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	08012344 	.word	0x08012344
 800b63c:	080132f4 	.word	0x080132f4
 800b640:	0801238c 	.word	0x0801238c

0800b644 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	460b      	mov	r3, r1
 800b64e:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00a      	beq.n	800b66c <cavlPrivateAdjustBalance+0x28>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b660:	db04      	blt.n	800b66c <cavlPrivateAdjustBalance+0x28>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	dd05      	ble.n	800b678 <cavlPrivateAdjustBalance+0x34>
 800b66c:	4b61      	ldr	r3, [pc, #388]	; (800b7f4 <cavlPrivateAdjustBalance+0x1b0>)
 800b66e:	4a62      	ldr	r2, [pc, #392]	; (800b7f8 <cavlPrivateAdjustBalance+0x1b4>)
 800b670:	2177      	movs	r1, #119	; 0x77
 800b672:	4862      	ldr	r0, [pc, #392]	; (800b7fc <cavlPrivateAdjustBalance+0x1b8>)
 800b674:	f002 fa68 	bl	800db48 <__assert_func>
    Cavl*        out    = x;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b682:	b2db      	uxtb	r3, r3
 800b684:	78fa      	ldrb	r2, [r7, #3]
 800b686:	2a00      	cmp	r2, #0
 800b688:	d001      	beq.n	800b68e <cavlPrivateAdjustBalance+0x4a>
 800b68a:	2201      	movs	r2, #1
 800b68c:	e000      	b.n	800b690 <cavlPrivateAdjustBalance+0x4c>
 800b68e:	22ff      	movs	r2, #255	; 0xff
 800b690:	4413      	add	r3, r2
 800b692:	b2db      	uxtb	r3, r3
 800b694:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 800b696:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b69e:	db04      	blt.n	800b6aa <cavlPrivateAdjustBalance+0x66>
 800b6a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	f340 809c 	ble.w	800b7e2 <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 800b6aa:	7cfb      	ldrb	r3, [r7, #19]
 800b6ac:	09db      	lsrs	r3, r3, #7
 800b6ae:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 800b6b0:	7cbb      	ldrb	r3, [r7, #18]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <cavlPrivateAdjustBalance+0x76>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e001      	b.n	800b6be <cavlPrivateAdjustBalance+0x7a>
 800b6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b6be:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 800b6c0:	7cbb      	ldrb	r3, [r7, #18]
 800b6c2:	f083 0301 	eor.w	r3, r3, #1
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d105      	bne.n	800b6e4 <cavlPrivateAdjustBalance+0xa0>
 800b6d8:	4b49      	ldr	r3, [pc, #292]	; (800b800 <cavlPrivateAdjustBalance+0x1bc>)
 800b6da:	4a47      	ldr	r2, [pc, #284]	; (800b7f8 <cavlPrivateAdjustBalance+0x1b4>)
 800b6dc:	217f      	movs	r1, #127	; 0x7f
 800b6de:	4847      	ldr	r0, [pc, #284]	; (800b7fc <cavlPrivateAdjustBalance+0x1b8>)
 800b6e0:	f002 fa32 	bl	800db48 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b6f0:	fb02 f303 	mul.w	r3, r2, r3
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dc1c      	bgt.n	800b732 <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 800b6fc:	7cbb      	ldrb	r3, [r7, #18]
 800b6fe:	4619      	mov	r1, r3
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f7ff ff25 	bl	800b550 <cavlPrivateRotate>
            if (0 == z->bf)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d109      	bne.n	800b724 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 800b710:	7c7b      	ldrb	r3, [r7, #17]
 800b712:	425b      	negs	r3, r3
 800b714:	b2db      	uxtb	r3, r3
 800b716:	b25a      	sxtb	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	7c7a      	ldrb	r2, [r7, #17]
 800b720:	731a      	strb	r2, [r3, #12]
    {
 800b722:	e061      	b.n	800b7e8 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	731a      	strb	r2, [r3, #12]
    {
 800b730:	e05a      	b.n	800b7e8 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 800b732:	7cbb      	ldrb	r3, [r7, #18]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	4413      	add	r3, r2
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d105      	bne.n	800b750 <cavlPrivateAdjustBalance+0x10c>
 800b744:	4b2f      	ldr	r3, [pc, #188]	; (800b804 <cavlPrivateAdjustBalance+0x1c0>)
 800b746:	4a2c      	ldr	r2, [pc, #176]	; (800b7f8 <cavlPrivateAdjustBalance+0x1b4>)
 800b748:	2192      	movs	r1, #146	; 0x92
 800b74a:	482c      	ldr	r0, [pc, #176]	; (800b7fc <cavlPrivateAdjustBalance+0x1b8>)
 800b74c:	f002 f9fc 	bl	800db48 <__assert_func>
            out = y;
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 800b754:	7cbb      	ldrb	r3, [r7, #18]
 800b756:	2b00      	cmp	r3, #0
 800b758:	bf14      	ite	ne
 800b75a:	2301      	movne	r3, #1
 800b75c:	2300      	moveq	r3, #0
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	f083 0301 	eor.w	r3, r3, #1
 800b764:	b2db      	uxtb	r3, r3
 800b766:	f003 0301 	and.w	r3, r3, #1
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	4619      	mov	r1, r3
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f7ff feee 	bl	800b550 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 800b774:	7cbb      	ldrb	r3, [r7, #18]
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f7ff fee9 	bl	800b550 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b784:	461a      	mov	r2, r3
 800b786:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b78a:	fb02 f303 	mul.w	r3, r2, r3
 800b78e:	2b00      	cmp	r3, #0
 800b790:	da09      	bge.n	800b7a6 <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	7c7a      	ldrb	r2, [r7, #17]
 800b796:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	2200      	movs	r2, #0
 800b79c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	731a      	strb	r2, [r3, #12]
    {
 800b7a4:	e020      	b.n	800b7e8 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b7b2:	fb02 f303 	mul.w	r3, r2, r3
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	dd0c      	ble.n	800b7d4 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 800b7c6:	7c7b      	ldrb	r3, [r7, #17]
 800b7c8:	425b      	negs	r3, r3
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	b25a      	sxtb	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	731a      	strb	r2, [r3, #12]
    {
 800b7d2:	e009      	b.n	800b7e8 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	731a      	strb	r2, [r3, #12]
    {
 800b7e0:	e002      	b.n	800b7e8 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	7cfa      	ldrb	r2, [r7, #19]
 800b7e6:	731a      	strb	r2, [r3, #12]
    }
    return out;
 800b7e8:	697b      	ldr	r3, [r7, #20]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3718      	adds	r7, #24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	080123b8 	.word	0x080123b8
 800b7f8:	080132d8 	.word	0x080132d8
 800b7fc:	0801238c 	.word	0x0801238c
 800b800:	080123e8 	.word	0x080123e8
 800b804:	080123f4 	.word	0x080123f4

0800b808 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d004      	beq.n	800b820 <cavlPrivateRetraceOnGrowth+0x18>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d005      	beq.n	800b82c <cavlPrivateRetraceOnGrowth+0x24>
 800b820:	4b23      	ldr	r3, [pc, #140]	; (800b8b0 <cavlPrivateRetraceOnGrowth+0xa8>)
 800b822:	4a24      	ldr	r2, [pc, #144]	; (800b8b4 <cavlPrivateRetraceOnGrowth+0xac>)
 800b824:	21b5      	movs	r1, #181	; 0xb5
 800b826:	4824      	ldr	r0, [pc, #144]	; (800b8b8 <cavlPrivateRetraceOnGrowth+0xb0>)
 800b828:	f002 f98e 	bl	800db48 <__assert_func>
    Cavl* c = added;      // Child
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 800b836:	e023      	b.n	800b880 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	697a      	ldr	r2, [r7, #20]
 800b83e:	429a      	cmp	r2, r3
 800b840:	bf0c      	ite	eq
 800b842:	2301      	moveq	r3, #1
 800b844:	2300      	movne	r3, #0
 800b846:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 800b848:	7bfb      	ldrb	r3, [r7, #15]
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	4413      	add	r3, r2
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	697a      	ldr	r2, [r7, #20]
 800b854:	429a      	cmp	r2, r3
 800b856:	d005      	beq.n	800b864 <cavlPrivateRetraceOnGrowth+0x5c>
 800b858:	4b18      	ldr	r3, [pc, #96]	; (800b8bc <cavlPrivateRetraceOnGrowth+0xb4>)
 800b85a:	4a16      	ldr	r2, [pc, #88]	; (800b8b4 <cavlPrivateRetraceOnGrowth+0xac>)
 800b85c:	21bb      	movs	r1, #187	; 0xbb
 800b85e:	4816      	ldr	r0, [pc, #88]	; (800b8b8 <cavlPrivateRetraceOnGrowth+0xb0>)
 800b860:	f002 f972 	bl	800db48 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 800b864:	7bfb      	ldrb	r3, [r7, #15]
 800b866:	4619      	mov	r1, r3
 800b868:	6938      	ldr	r0, [r7, #16]
 800b86a:	f7ff feeb 	bl	800b644 <cavlPrivateAdjustBalance>
 800b86e:	6178      	str	r0, [r7, #20]
        p = c->up;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d003      	beq.n	800b888 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1d8      	bne.n	800b838 <cavlPrivateRetraceOnGrowth+0x30>
 800b886:	e000      	b.n	800b88a <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 800b888:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d105      	bne.n	800b89c <cavlPrivateRetraceOnGrowth+0x94>
 800b890:	4b0b      	ldr	r3, [pc, #44]	; (800b8c0 <cavlPrivateRetraceOnGrowth+0xb8>)
 800b892:	4a08      	ldr	r2, [pc, #32]	; (800b8b4 <cavlPrivateRetraceOnGrowth+0xac>)
 800b894:	21c3      	movs	r1, #195	; 0xc3
 800b896:	4808      	ldr	r0, [pc, #32]	; (800b8b8 <cavlPrivateRetraceOnGrowth+0xb0>)
 800b898:	f002 f956 	bl	800db48 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d101      	bne.n	800b8a6 <cavlPrivateRetraceOnGrowth+0x9e>
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	e000      	b.n	800b8a8 <cavlPrivateRetraceOnGrowth+0xa0>
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3718      	adds	r7, #24
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	08012400 	.word	0x08012400
 800b8b4:	080132bc 	.word	0x080132bc
 800b8b8:	0801238c 	.word	0x0801238c
 800b8bc:	08012424 	.word	0x08012424
 800b8c0:	08012434 	.word	0x08012434

0800b8c4 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b08a      	sub	sp, #40	; 0x28
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
 800b8d0:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((root != NULL) && (predicate != NULL))
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d065      	beq.n	800b9a8 <cavlSearch+0xe4>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d062      	beq.n	800b9a8 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 800b8ec:	e02f      	b.n	800b94e <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	68b8      	ldr	r0, [r7, #8]
 800b8f8:	4798      	blx	r3
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 800b8fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d103      	bne.n	800b90e <cavlSearch+0x4a>
            {
                out = *n;
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800b90c:	e023      	b.n	800b956 <cavlSearch+0x92>
            }
            up = *n;
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	bfcc      	ite	gt
 800b920:	2301      	movgt	r3, #1
 800b922:	2300      	movle	r3, #0
 800b924:	b2db      	uxtb	r3, r3
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4413      	add	r3, r2
 800b92a:	3304      	adds	r3, #4
 800b92c:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00b      	beq.n	800b94e <cavlSearch+0x8a>
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	6a3a      	ldr	r2, [r7, #32]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d005      	beq.n	800b94e <cavlSearch+0x8a>
 800b942:	4b1c      	ldr	r3, [pc, #112]	; (800b9b4 <cavlSearch+0xf0>)
 800b944:	4a1c      	ldr	r2, [pc, #112]	; (800b9b8 <cavlSearch+0xf4>)
 800b946:	21db      	movs	r1, #219	; 0xdb
 800b948:	481c      	ldr	r0, [pc, #112]	; (800b9bc <cavlSearch+0xf8>)
 800b94a:	f002 f8fd 	bl	800db48 <__assert_func>
        while (*n != NULL)
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1cb      	bne.n	800b8ee <cavlSearch+0x2a>
        }
        if (NULL == out)
 800b956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d125      	bne.n	800b9a8 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d004      	beq.n	800b96c <cavlSearch+0xa8>
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	68b8      	ldr	r0, [r7, #8]
 800b966:	4798      	blx	r3
 800b968:	4603      	mov	r3, r0
 800b96a:	e000      	b.n	800b96e <cavlSearch+0xaa>
 800b96c:	2300      	movs	r3, #0
 800b96e:	627b      	str	r3, [r7, #36]	; 0x24
            if (out != NULL)
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	2b00      	cmp	r3, #0
 800b974:	d018      	beq.n	800b9a8 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b97a:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	2200      	movs	r2, #0
 800b980:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	2200      	movs	r2, #0
 800b986:	609a      	str	r2, [r3, #8]
                out->up        = up;
 800b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98a:	6a3a      	ldr	r2, [r7, #32]
 800b98c:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 800b98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b990:	2200      	movs	r2, #0
 800b992:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 800b994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b996:	f7ff ff37 	bl	800b808 <cavlPrivateRetraceOnGrowth>
 800b99a:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d002      	beq.n	800b9a8 <cavlSearch+0xe4>
                {
                    *root = rt;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3728      	adds	r7, #40	; 0x28
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	08012440 	.word	0x08012440
 800b9b8:	080132b0 	.word	0x080132b0
 800b9bc:	0801238c 	.word	0x0801238c

0800b9c0 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b088      	sub	sp, #32
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 8116 	beq.w	800bbfe <cavlRemove+0x23e>
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f000 8112 	beq.w	800bbfe <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d105      	bne.n	800b9ee <cavlRemove+0x2e>
 800b9e2:	4b89      	ldr	r3, [pc, #548]	; (800bc08 <cavlRemove+0x248>)
 800b9e4:	4a89      	ldr	r2, [pc, #548]	; (800bc0c <cavlRemove+0x24c>)
 800b9e6:	21f6      	movs	r1, #246	; 0xf6
 800b9e8:	4889      	ldr	r0, [pc, #548]	; (800bc10 <cavlRemove+0x250>)
 800b9ea:	f002 f8ad 	bl	800db48 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10a      	bne.n	800ba0c <cavlRemove+0x4c>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d005      	beq.n	800ba0c <cavlRemove+0x4c>
 800ba00:	4b84      	ldr	r3, [pc, #528]	; (800bc14 <cavlRemove+0x254>)
 800ba02:	4a82      	ldr	r2, [pc, #520]	; (800bc0c <cavlRemove+0x24c>)
 800ba04:	21f7      	movs	r1, #247	; 0xf7
 800ba06:	4882      	ldr	r0, [pc, #520]	; (800bc10 <cavlRemove+0x250>)
 800ba08:	f002 f89e 	bl	800db48 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 800ba10:	2300      	movs	r3, #0
 800ba12:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d073      	beq.n	800bb04 <cavlRemove+0x144>
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d06f      	beq.n	800bb04 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	2100      	movs	r1, #0
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7ff fd72 	bl	800b514 <cavlFindExtremum>
 800ba30:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d007      	beq.n	800ba48 <cavlRemove+0x88>
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d103      	bne.n	800ba48 <cavlRemove+0x88>
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d105      	bne.n	800ba54 <cavlRemove+0x94>
 800ba48:	4b73      	ldr	r3, [pc, #460]	; (800bc18 <cavlRemove+0x258>)
 800ba4a:	4a70      	ldr	r2, [pc, #448]	; (800bc0c <cavlRemove+0x24c>)
 800ba4c:	21ff      	movs	r1, #255	; 0xff
 800ba4e:	4870      	ldr	r0, [pc, #448]	; (800bc10 <cavlRemove+0x250>)
 800ba50:	f002 f87a 	bl	800db48 <__assert_func>
            re->bf        = node->bf;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	685a      	ldr	r2, [r3, #4]
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d025      	beq.n	800bac4 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 800ba7e:	69fb      	ldr	r3, [r7, #28]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	697a      	ldr	r2, [r7, #20]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d006      	beq.n	800ba96 <cavlRemove+0xd6>
 800ba88:	4b64      	ldr	r3, [pc, #400]	; (800bc1c <cavlRemove+0x25c>)
 800ba8a:	4a60      	ldr	r2, [pc, #384]	; (800bc0c <cavlRemove+0x24c>)
 800ba8c:	f44f 7183 	mov.w	r1, #262	; 0x106
 800ba90:	485f      	ldr	r0, [pc, #380]	; (800bc10 <cavlRemove+0x250>)
 800ba92:	f002 f859 	bl	800db48 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	689a      	ldr	r2, [r3, #8]
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d003      	beq.n	800baae <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	69fa      	ldr	r2, [r7, #28]
 800baac:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	689a      	ldr	r2, [r3, #8]
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	601a      	str	r2, [r3, #0]
                r             = false;
 800babe:	2300      	movs	r3, #0
 800bac0:	76fb      	strb	r3, [r7, #27]
 800bac2:	e003      	b.n	800bacc <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 800bac8:	2301      	movs	r3, #1
 800baca:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d00f      	beq.n	800bafc <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	6839      	ldr	r1, [r7, #0]
 800bae8:	4299      	cmp	r1, r3
 800baea:	bf0c      	ite	eq
 800baec:	2301      	moveq	r3, #1
 800baee:	2300      	movne	r3, #0
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4413      	add	r3, r2
 800baf6:	697a      	ldr	r2, [r7, #20]
 800baf8:	605a      	str	r2, [r3, #4]
        {
 800bafa:	e046      	b.n	800bb8a <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	697a      	ldr	r2, [r7, #20]
 800bb00:	601a      	str	r2, [r3, #0]
        {
 800bb02:	e042      	b.n	800bb8a <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	bf14      	ite	ne
 800bb12:	2301      	movne	r3, #1
 800bb14:	2300      	moveq	r3, #0
 800bb16:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 800bb18:	7cfb      	ldrb	r3, [r7, #19]
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4413      	add	r3, r2
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d006      	beq.n	800bb34 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 800bb26:	7cfb      	ldrb	r3, [r7, #19]
 800bb28:	683a      	ldr	r2, [r7, #0]
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4413      	add	r3, r2
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	69fa      	ldr	r2, [r7, #28]
 800bb32:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d020      	beq.n	800bb7c <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	bf0c      	ite	eq
 800bb44:	2301      	moveq	r3, #1
 800bb46:	2300      	movne	r3, #0
 800bb48:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 800bb4a:	7cfb      	ldrb	r3, [r7, #19]
 800bb4c:	7ef8      	ldrb	r0, [r7, #27]
 800bb4e:	683a      	ldr	r2, [r7, #0]
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	685a      	ldr	r2, [r3, #4]
 800bb56:	69f9      	ldr	r1, [r7, #28]
 800bb58:	0083      	lsls	r3, r0, #2
 800bb5a:	440b      	add	r3, r1
 800bb5c:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 800bb5e:	7efb      	ldrb	r3, [r7, #27]
 800bb60:	69fa      	ldr	r2, [r7, #28]
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4413      	add	r3, r2
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00e      	beq.n	800bb8a <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 800bb6c:	7efb      	ldrb	r3, [r7, #27]
 800bb6e:	69fa      	ldr	r2, [r7, #28]
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	69fa      	ldr	r2, [r7, #28]
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	e006      	b.n	800bb8a <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 800bb7c:	7cfb      	ldrb	r3, [r7, #19]
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	4413      	add	r3, r2
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d036      	beq.n	800bbfe <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 800bb90:	2300      	movs	r3, #0
 800bb92:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 800bb94:	7efb      	ldrb	r3, [r7, #27]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	bf14      	ite	ne
 800bb9a:	2301      	movne	r3, #1
 800bb9c:	2300      	moveq	r3, #0
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	f083 0301 	eor.w	r3, r3, #1
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	f003 0301 	and.w	r3, r3, #1
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	4619      	mov	r1, r3
 800bbae:	69f8      	ldr	r0, [r7, #28]
 800bbb0:	f7ff fd48 	bl	800b644 <cavlPrivateAdjustBalance>
 800bbb4:	60f8      	str	r0, [r7, #12]
                p = c->up;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10b      	bne.n	800bbde <cavlRemove+0x21e>
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d008      	beq.n	800bbde <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	bf0c      	ite	eq
 800bbd6:	2301      	moveq	r3, #1
 800bbd8:	2300      	movne	r3, #0
 800bbda:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 800bbdc:	e7da      	b.n	800bb94 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10c      	bne.n	800bbfe <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d106      	bne.n	800bbf8 <cavlRemove+0x238>
 800bbea:	4b0d      	ldr	r3, [pc, #52]	; (800bc20 <cavlRemove+0x260>)
 800bbec:	4a07      	ldr	r2, [pc, #28]	; (800bc0c <cavlRemove+0x24c>)
 800bbee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800bbf2:	4807      	ldr	r0, [pc, #28]	; (800bc10 <cavlRemove+0x250>)
 800bbf4:	f001 ffa8 	bl	800db48 <__assert_func>
                *root = c;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 800bbfe:	bf00      	nop
 800bc00:	3720      	adds	r7, #32
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	08012464 	.word	0x08012464
 800bc0c:	08013338 	.word	0x08013338
 800bc10:	0801238c 	.word	0x0801238c
 800bc14:	08012474 	.word	0x08012474
 800bc18:	0801249c 	.word	0x0801249c
 800bc1c:	080124d4 	.word	0x080124d4
 800bc20:	08012434 	.word	0x08012434

0800bc24 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 800bc2c:	687b      	ldr	r3, [r7, #4]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
	...

0800bc3c <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	4603      	mov	r3, r0
 800bc44:	460a      	mov	r2, r1
 800bc46:	80fb      	strh	r3, [r7, #6]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800bc4c:	88fb      	ldrh	r3, [r7, #6]
 800bc4e:	021b      	lsls	r3, r3, #8
 800bc50:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 800bc52:	88fb      	ldrh	r3, [r7, #6]
 800bc54:	0a1b      	lsrs	r3, r3, #8
 800bc56:	b299      	uxth	r1, r3
 800bc58:	797b      	ldrb	r3, [r7, #5]
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	404b      	eors	r3, r1
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	4905      	ldr	r1, [pc, #20]	; (800bc78 <crcAddByte+0x3c>)
 800bc64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800bc68:	4053      	eors	r3, r2
 800bc6a:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	08012f88 	.word	0x08012f88

0800bc7c <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b088      	sub	sp, #32
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	4603      	mov	r3, r0
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d108      	bne.n	800bca2 <crcAdd+0x26>
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d005      	beq.n	800bca2 <crcAdd+0x26>
 800bc96:	4b12      	ldr	r3, [pc, #72]	; (800bce0 <crcAdd+0x64>)
 800bc98:	4a12      	ldr	r2, [pc, #72]	; (800bce4 <crcAdd+0x68>)
 800bc9a:	2185      	movs	r1, #133	; 0x85
 800bc9c:	4812      	ldr	r0, [pc, #72]	; (800bce8 <crcAdd+0x6c>)
 800bc9e:	f001 ff53 	bl	800db48 <__assert_func>
    TransferCRC    out = crc;
 800bca2:	89fb      	ldrh	r3, [r7, #14]
 800bca4:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800bcaa:	2300      	movs	r3, #0
 800bcac:	617b      	str	r3, [r7, #20]
 800bcae:	e00e      	b.n	800bcce <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	781a      	ldrb	r2, [r3, #0]
 800bcb4:	8bfb      	ldrh	r3, [r7, #30]
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff ffbf 	bl	800bc3c <crcAddByte>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	83fb      	strh	r3, [r7, #30]
        ++p;
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	3301      	adds	r3, #1
 800bccc:	617b      	str	r3, [r7, #20]
 800bcce:	697a      	ldr	r2, [r7, #20]
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d3ec      	bcc.n	800bcb0 <crcAdd+0x34>
    }
    return out;
 800bcd6:	8bfb      	ldrh	r3, [r7, #30]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3720      	adds	r7, #32
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	080124e4 	.word	0x080124e4
 800bce4:	08013204 	.word	0x08013204
 800bce8:	0801250c 	.word	0x0801250c

0800bcec <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	460a      	mov	r2, r1
 800bcf6:	80fb      	strh	r3, [r7, #6]
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800bcfc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	da05      	bge.n	800bd10 <txMakeMessageSessionSpecifier+0x24>
 800bd04:	4b0e      	ldr	r3, [pc, #56]	; (800bd40 <txMakeMessageSessionSpecifier+0x54>)
 800bd06:	4a0f      	ldr	r2, [pc, #60]	; (800bd44 <txMakeMessageSessionSpecifier+0x58>)
 800bd08:	21ac      	movs	r1, #172	; 0xac
 800bd0a:	480f      	ldr	r0, [pc, #60]	; (800bd48 <txMakeMessageSessionSpecifier+0x5c>)
 800bd0c:	f001 ff1c 	bl	800db48 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 800bd10:	88fb      	ldrh	r3, [r7, #6]
 800bd12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd16:	d305      	bcc.n	800bd24 <txMakeMessageSessionSpecifier+0x38>
 800bd18:	4b0c      	ldr	r3, [pc, #48]	; (800bd4c <txMakeMessageSessionSpecifier+0x60>)
 800bd1a:	4a0a      	ldr	r2, [pc, #40]	; (800bd44 <txMakeMessageSessionSpecifier+0x58>)
 800bd1c:	21ad      	movs	r1, #173	; 0xad
 800bd1e:	480a      	ldr	r0, [pc, #40]	; (800bd48 <txMakeMessageSessionSpecifier+0x5c>)
 800bd20:	f001 ff12 	bl	800db48 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 800bd24:	88fb      	ldrh	r3, [r7, #6]
 800bd26:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 800bd2e:	797a      	ldrb	r2, [r7, #5]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	021b      	lsls	r3, r3, #8
 800bd34:	4313      	orrs	r3, r2
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	0801253c 	.word	0x0801253c
 800bd44:	0801320c 	.word	0x0801320c
 800bd48:	0801250c 	.word	0x0801250c
 800bd4c:	08012550 	.word	0x08012550

0800bd50 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 800bd50:	b590      	push	{r4, r7, lr}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4604      	mov	r4, r0
 800bd58:	4608      	mov	r0, r1
 800bd5a:	4611      	mov	r1, r2
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	4623      	mov	r3, r4
 800bd60:	80fb      	strh	r3, [r7, #6]
 800bd62:	4603      	mov	r3, r0
 800bd64:	717b      	strb	r3, [r7, #5]
 800bd66:	460b      	mov	r3, r1
 800bd68:	713b      	strb	r3, [r7, #4]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800bd6e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	da05      	bge.n	800bd82 <txMakeServiceSessionSpecifier+0x32>
 800bd76:	4b17      	ldr	r3, [pc, #92]	; (800bdd4 <txMakeServiceSessionSpecifier+0x84>)
 800bd78:	4a17      	ldr	r2, [pc, #92]	; (800bdd8 <txMakeServiceSessionSpecifier+0x88>)
 800bd7a:	21b7      	movs	r1, #183	; 0xb7
 800bd7c:	4817      	ldr	r0, [pc, #92]	; (800bddc <txMakeServiceSessionSpecifier+0x8c>)
 800bd7e:	f001 fee3 	bl	800db48 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 800bd82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	da05      	bge.n	800bd96 <txMakeServiceSessionSpecifier+0x46>
 800bd8a:	4b15      	ldr	r3, [pc, #84]	; (800bde0 <txMakeServiceSessionSpecifier+0x90>)
 800bd8c:	4a12      	ldr	r2, [pc, #72]	; (800bdd8 <txMakeServiceSessionSpecifier+0x88>)
 800bd8e:	21b8      	movs	r1, #184	; 0xb8
 800bd90:	4812      	ldr	r0, [pc, #72]	; (800bddc <txMakeServiceSessionSpecifier+0x8c>)
 800bd92:	f001 fed9 	bl	800db48 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 800bd96:	88fb      	ldrh	r3, [r7, #6]
 800bd98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd9c:	d305      	bcc.n	800bdaa <txMakeServiceSessionSpecifier+0x5a>
 800bd9e:	4b11      	ldr	r3, [pc, #68]	; (800bde4 <txMakeServiceSessionSpecifier+0x94>)
 800bda0:	4a0d      	ldr	r2, [pc, #52]	; (800bdd8 <txMakeServiceSessionSpecifier+0x88>)
 800bda2:	21b9      	movs	r1, #185	; 0xb9
 800bda4:	480d      	ldr	r0, [pc, #52]	; (800bddc <txMakeServiceSessionSpecifier+0x8c>)
 800bda6:	f001 fecf 	bl	800db48 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800bdaa:	793a      	ldrb	r2, [r7, #4]
 800bdac:	78fb      	ldrb	r3, [r7, #3]
 800bdae:	01db      	lsls	r3, r3, #7
 800bdb0:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800bdb2:	88fb      	ldrh	r3, [r7, #6]
 800bdb4:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800bdb6:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800bdb8:	797a      	ldrb	r2, [r7, #5]
 800bdba:	2a00      	cmp	r2, #0
 800bdbc:	d002      	beq.n	800bdc4 <txMakeServiceSessionSpecifier+0x74>
 800bdbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bdc2:	e000      	b.n	800bdc6 <txMakeServiceSessionSpecifier+0x76>
 800bdc4:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800bdc6:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800bdc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd90      	pop	{r4, r7, pc}
 800bdd4:	0801253c 	.word	0x0801253c
 800bdd8:	0801322c 	.word	0x0801322c
 800bddc:	0801250c 	.word	0x0801250c
 800bde0:	08012564 	.word	0x08012564
 800bde4:	08012578 	.word	0x08012578

0800bde8 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 800bdf0:	2340      	movs	r3, #64	; 0x40
 800bdf2:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b07      	cmp	r3, #7
 800bdfc:	d802      	bhi.n	800be04 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 800bdfe:	2308      	movs	r3, #8
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	e014      	b.n	800be2e <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d808      	bhi.n	800be1e <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 800be0c:	4a0c      	ldr	r2, [pc, #48]	; (800be40 <adjustPresentationLayerMTU+0x58>)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4413      	add	r3, r2
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	461a      	mov	r2, r3
 800be16:	4b0b      	ldr	r3, [pc, #44]	; (800be44 <adjustPresentationLayerMTU+0x5c>)
 800be18:	5c9b      	ldrb	r3, [r3, r2]
 800be1a:	60fb      	str	r3, [r7, #12]
 800be1c:	e007      	b.n	800be2e <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 800be1e:	4a08      	ldr	r2, [pc, #32]	; (800be40 <adjustPresentationLayerMTU+0x58>)
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	4413      	add	r3, r2
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	461a      	mov	r2, r3
 800be28:	4b06      	ldr	r3, [pc, #24]	; (800be44 <adjustPresentationLayerMTU+0x5c>)
 800be2a:	5c9b      	ldrb	r3, [r3, r2]
 800be2c:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	3b01      	subs	r3, #1
}
 800be32:	4618      	mov	r0, r3
 800be34:	3714      	adds	r7, #20
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	08013198 	.word	0x08013198
 800be44:	08013188 	.word	0x08013188

0800be48 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b08a      	sub	sp, #40	; 0x28
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	607a      	str	r2, [r7, #4]
 800be54:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d105      	bne.n	800be68 <txMakeCANID+0x20>
 800be5c:	4b60      	ldr	r3, [pc, #384]	; (800bfe0 <txMakeCANID+0x198>)
 800be5e:	4a61      	ldr	r2, [pc, #388]	; (800bfe4 <txMakeCANID+0x19c>)
 800be60:	21d9      	movs	r1, #217	; 0xd9
 800be62:	4861      	ldr	r0, [pc, #388]	; (800bfe8 <txMakeCANID+0x1a0>)
 800be64:	f001 fe70 	bl	800db48 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 800be68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d105      	bne.n	800be7a <txMakeCANID+0x32>
 800be6e:	4b5f      	ldr	r3, [pc, #380]	; (800bfec <txMakeCANID+0x1a4>)
 800be70:	4a5c      	ldr	r2, [pc, #368]	; (800bfe4 <txMakeCANID+0x19c>)
 800be72:	21da      	movs	r1, #218	; 0xda
 800be74:	485c      	ldr	r0, [pc, #368]	; (800bfe8 <txMakeCANID+0x1a0>)
 800be76:	f001 fe67 	bl	800db48 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800be7a:	f06f 0301 	mvn.w	r3, #1
 800be7e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	785b      	ldrb	r3, [r3, #1]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d157      	bne.n	800bf38 <txMakeCANID+0xf0>
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	791b      	ldrb	r3, [r3, #4]
 800be8c:	2bff      	cmp	r3, #255	; 0xff
 800be8e:	d153      	bne.n	800bf38 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800be94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be98:	d24e      	bcs.n	800bf38 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800be9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	db11      	blt.n	800bec6 <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	885b      	ldrh	r3, [r3, #2]
 800bea6:	78fa      	ldrb	r2, [r7, #3]
 800bea8:	4611      	mov	r1, r2
 800beaa:	4618      	mov	r0, r3
 800beac:	f7ff ff1e 	bl	800bcec <txMakeMessageSessionSpecifier>
 800beb0:	4603      	mov	r3, r0
 800beb2:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800beb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	da75      	bge.n	800bfa6 <txMakeCANID+0x15e>
 800beba:	4b4d      	ldr	r3, [pc, #308]	; (800bff0 <txMakeCANID+0x1a8>)
 800bebc:	4a49      	ldr	r2, [pc, #292]	; (800bfe4 <txMakeCANID+0x19c>)
 800bebe:	21e2      	movs	r1, #226	; 0xe2
 800bec0:	4849      	ldr	r0, [pc, #292]	; (800bfe8 <txMakeCANID+0x1a0>)
 800bec2:	f001 fe41 	bl	800db48 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beca:	429a      	cmp	r2, r3
 800becc:	d830      	bhi.n	800bf30 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d108      	bne.n	800bee6 <txMakeCANID+0x9e>
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d005      	beq.n	800bee6 <txMakeCANID+0x9e>
 800beda:	4b46      	ldr	r3, [pc, #280]	; (800bff4 <txMakeCANID+0x1ac>)
 800bedc:	4a41      	ldr	r2, [pc, #260]	; (800bfe4 <txMakeCANID+0x19c>)
 800bede:	21e6      	movs	r1, #230	; 0xe6
 800bee0:	4841      	ldr	r0, [pc, #260]	; (800bfe8 <txMakeCANID+0x1a0>)
 800bee2:	f001 fe31 	bl	800db48 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	68b9      	ldr	r1, [r7, #8]
 800beea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800beee:	f7ff fec5 	bl	800bc7c <crcAdd>
 800bef2:	4603      	mov	r3, r0
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800befa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	885b      	ldrh	r3, [r3, #2]
 800bf02:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800bf06:	4611      	mov	r1, r2
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7ff feef 	bl	800bcec <txMakeMessageSessionSpecifier>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf14:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf1c:	d305      	bcc.n	800bf2a <txMakeCANID+0xe2>
 800bf1e:	4b36      	ldr	r3, [pc, #216]	; (800bff8 <txMakeCANID+0x1b0>)
 800bf20:	4a30      	ldr	r2, [pc, #192]	; (800bfe4 <txMakeCANID+0x19c>)
 800bf22:	21e9      	movs	r1, #233	; 0xe9
 800bf24:	4830      	ldr	r0, [pc, #192]	; (800bfe8 <txMakeCANID+0x1a0>)
 800bf26:	f001 fe0f 	bl	800db48 <__assert_func>
            out = (int32_t) spec;
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bf2e:	e03a      	b.n	800bfa6 <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 800bf30:	f06f 0301 	mvn.w	r3, #1
 800bf34:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bf36:	e036      	b.n	800bfa6 <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	785b      	ldrb	r3, [r3, #1]
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d003      	beq.n	800bf48 <txMakeCANID+0x100>
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	785b      	ldrb	r3, [r3, #1]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d12a      	bne.n	800bf9e <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	791b      	ldrb	r3, [r3, #4]
 800bf4c:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	db25      	blt.n	800bf9e <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	885b      	ldrh	r3, [r3, #2]
 800bf56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf5a:	d220      	bcs.n	800bf9e <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bf5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	db18      	blt.n	800bf96 <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	bf0c      	ite	eq
 800bf70:	2301      	moveq	r3, #1
 800bf72:	2300      	movne	r3, #0
 800bf74:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800bf7a:	78fa      	ldrb	r2, [r7, #3]
 800bf7c:	f7ff fee8 	bl	800bd50 <txMakeServiceSessionSpecifier>
 800bf80:	4603      	mov	r3, r0
 800bf82:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	da0f      	bge.n	800bfaa <txMakeCANID+0x162>
 800bf8a:	4b19      	ldr	r3, [pc, #100]	; (800bff0 <txMakeCANID+0x1a8>)
 800bf8c:	4a15      	ldr	r2, [pc, #84]	; (800bfe4 <txMakeCANID+0x19c>)
 800bf8e:	21fa      	movs	r1, #250	; 0xfa
 800bf90:	4815      	ldr	r0, [pc, #84]	; (800bfe8 <txMakeCANID+0x1a0>)
 800bf92:	f001 fdd9 	bl	800db48 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 800bf96:	f06f 0301 	mvn.w	r3, #1
 800bf9a:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bf9c:	e005      	b.n	800bfaa <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 800bf9e:	f06f 0301 	mvn.w	r3, #1
 800bfa2:	627b      	str	r3, [r7, #36]	; 0x24
 800bfa4:	e002      	b.n	800bfac <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bfa6:	bf00      	nop
 800bfa8:	e000      	b.n	800bfac <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800bfaa:	bf00      	nop
    }

    if (out >= 0)
 800bfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	db10      	blt.n	800bfd4 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	2b07      	cmp	r3, #7
 800bfbc:	d807      	bhi.n	800bfce <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	069a      	lsls	r2, r3, #26
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	627b      	str	r3, [r7, #36]	; 0x24
 800bfcc:	e002      	b.n	800bfd4 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 800bfce:	f06f 0301 	mvn.w	r3, #1
 800bfd2:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    return out;
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3728      	adds	r7, #40	; 0x28
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	0801258c 	.word	0x0801258c
 800bfe4:	080131f8 	.word	0x080131f8
 800bfe8:	0801250c 	.word	0x0801250c
 800bfec:	080125a0 	.word	0x080125a0
 800bff0:	080125bc 	.word	0x080125bc
 800bff4:	080125c8 	.word	0x080125c8
 800bff8:	080125fc 	.word	0x080125fc

0800bffc <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 800bffc:	b590      	push	{r4, r7, lr}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	4604      	mov	r4, r0
 800c004:	4608      	mov	r0, r1
 800c006:	4611      	mov	r1, r2
 800c008:	461a      	mov	r2, r3
 800c00a:	4623      	mov	r3, r4
 800c00c:	71fb      	strb	r3, [r7, #7]
 800c00e:	4603      	mov	r3, r0
 800c010:	71bb      	strb	r3, [r7, #6]
 800c012:	460b      	mov	r3, r1
 800c014:	717b      	strb	r3, [r7, #5]
 800c016:	4613      	mov	r3, r2
 800c018:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 800c01a:	79fb      	ldrb	r3, [r7, #7]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d009      	beq.n	800c034 <txMakeTailByte+0x38>
 800c020:	797b      	ldrb	r3, [r7, #5]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d006      	beq.n	800c034 <txMakeTailByte+0x38>
 800c026:	4b13      	ldr	r3, [pc, #76]	; (800c074 <txMakeTailByte+0x78>)
 800c028:	4a13      	ldr	r2, [pc, #76]	; (800c078 <txMakeTailByte+0x7c>)
 800c02a:	f240 111b 	movw	r1, #283	; 0x11b
 800c02e:	4813      	ldr	r0, [pc, #76]	; (800c07c <txMakeTailByte+0x80>)
 800c030:	f001 fd8a 	bl	800db48 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800c034:	79fb      	ldrb	r3, [r7, #7]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d001      	beq.n	800c03e <txMakeTailByte+0x42>
 800c03a:	2280      	movs	r2, #128	; 0x80
 800c03c:	e000      	b.n	800c040 <txMakeTailByte+0x44>
 800c03e:	2200      	movs	r2, #0
 800c040:	79bb      	ldrb	r3, [r7, #6]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d001      	beq.n	800c04a <txMakeTailByte+0x4e>
 800c046:	2340      	movs	r3, #64	; 0x40
 800c048:	e000      	b.n	800c04c <txMakeTailByte+0x50>
 800c04a:	2300      	movs	r3, #0
 800c04c:	4313      	orrs	r3, r2
 800c04e:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 800c050:	797a      	ldrb	r2, [r7, #5]
 800c052:	2a00      	cmp	r2, #0
 800c054:	d001      	beq.n	800c05a <txMakeTailByte+0x5e>
 800c056:	2220      	movs	r2, #32
 800c058:	e000      	b.n	800c05c <txMakeTailByte+0x60>
 800c05a:	2200      	movs	r2, #0
 800c05c:	4313      	orrs	r3, r2
 800c05e:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 800c060:	793b      	ldrb	r3, [r7, #4]
 800c062:	f003 031f 	and.w	r3, r3, #31
 800c066:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800c068:	4313      	orrs	r3, r2
 800c06a:	b2db      	uxtb	r3, r3
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	bd90      	pop	{r4, r7, pc}
 800c074:	08012618 	.word	0x08012618
 800c078:	080132a0 	.word	0x080132a0
 800c07c:	0801250c 	.word	0x0801250c

0800c080 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b40      	cmp	r3, #64	; 0x40
 800c08c:	d906      	bls.n	800c09c <txRoundFramePayloadSizeUp+0x1c>
 800c08e:	4b0f      	ldr	r3, [pc, #60]	; (800c0cc <txRoundFramePayloadSizeUp+0x4c>)
 800c090:	4a0f      	ldr	r2, [pc, #60]	; (800c0d0 <txRoundFramePayloadSizeUp+0x50>)
 800c092:	f44f 7192 	mov.w	r1, #292	; 0x124
 800c096:	480f      	ldr	r0, [pc, #60]	; (800c0d4 <txRoundFramePayloadSizeUp+0x54>)
 800c098:	f001 fd56 	bl	800db48 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 800c09c:	4a0e      	ldr	r2, [pc, #56]	; (800c0d8 <txRoundFramePayloadSizeUp+0x58>)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2b0f      	cmp	r3, #15
 800c0aa:	d906      	bls.n	800c0ba <txRoundFramePayloadSizeUp+0x3a>
 800c0ac:	4b0b      	ldr	r3, [pc, #44]	; (800c0dc <txRoundFramePayloadSizeUp+0x5c>)
 800c0ae:	4a08      	ldr	r2, [pc, #32]	; (800c0d0 <txRoundFramePayloadSizeUp+0x50>)
 800c0b0:	f240 1127 	movw	r1, #295	; 0x127
 800c0b4:	4807      	ldr	r0, [pc, #28]	; (800c0d4 <txRoundFramePayloadSizeUp+0x54>)
 800c0b6:	f001 fd47 	bl	800db48 <__assert_func>
    return CanardCANDLCToLength[y];
 800c0ba:	4a09      	ldr	r2, [pc, #36]	; (800c0e0 <txRoundFramePayloadSizeUp+0x60>)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	4413      	add	r3, r2
 800c0c0:	781b      	ldrb	r3, [r3, #0]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	08012640 	.word	0x08012640
 800c0d0:	08013270 	.word	0x08013270
 800c0d4:	0801250c 	.word	0x0801250c
 800c0d8:	08013198 	.word	0x08013198
 800c0dc:	08012688 	.word	0x08012688
 800c0e0:	08013188 	.word	0x08013188

0800c0e4 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d106      	bne.n	800c106 <txAllocateQueueItem+0x22>
 800c0f8:	4b1f      	ldr	r3, [pc, #124]	; (800c178 <txAllocateQueueItem+0x94>)
 800c0fa:	4a20      	ldr	r2, [pc, #128]	; (800c17c <txAllocateQueueItem+0x98>)
 800c0fc:	f240 1131 	movw	r1, #305	; 0x131
 800c100:	481f      	ldr	r0, [pc, #124]	; (800c180 <txAllocateQueueItem+0x9c>)
 800c102:	f001 fd21 	bl	800db48 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 800c106:	6a3b      	ldr	r3, [r7, #32]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d106      	bne.n	800c11a <txAllocateQueueItem+0x36>
 800c10c:	4b1d      	ldr	r3, [pc, #116]	; (800c184 <txAllocateQueueItem+0xa0>)
 800c10e:	4a1b      	ldr	r2, [pc, #108]	; (800c17c <txAllocateQueueItem+0x98>)
 800c110:	f44f 7199 	mov.w	r1, #306	; 0x132
 800c114:	481a      	ldr	r0, [pc, #104]	; (800c180 <txAllocateQueueItem+0x9c>)
 800c116:	f001 fd17 	bl	800db48 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	6a3a      	ldr	r2, [r7, #32]
 800c120:	3230      	adds	r2, #48	; 0x30
 800c122:	4611      	mov	r1, r2
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	4798      	blx	r3
 800c128:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d01e      	beq.n	800c16e <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	2200      	movs	r2, #0
 800c134:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	2200      	movs	r2, #0
 800c13a:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	2200      	movs	r2, #0
 800c140:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	2200      	movs	r2, #0
 800c146:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	2200      	movs	r2, #0
 800c14c:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 800c14e:	6979      	ldr	r1, [r7, #20]
 800c150:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c154:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	6a3a      	ldr	r2, [r7, #32]
 800c15c:	625a      	str	r2, [r3, #36]	; 0x24
        out->base.frame.payload         = out->payload_buffer;
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	629a      	str	r2, [r3, #40]	; 0x28
        out->base.frame.extended_can_id = id;
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	68ba      	ldr	r2, [r7, #8]
 800c16c:	621a      	str	r2, [r3, #32]
    }
    return out;
 800c16e:	697b      	ldr	r3, [r7, #20]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3718      	adds	r7, #24
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	080126d0 	.word	0x080126d0
 800c17c:	0801328c 	.word	0x0801328c
 800c180:	0801250c 	.word	0x0801250c
 800c184:	080126e4 	.word	0x080126e4

0800c188 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d002      	beq.n	800c1a6 <txAVLPredicate+0x1e>
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d106      	bne.n	800c1b4 <txAVLPredicate+0x2c>
 800c1a6:	4b0a      	ldr	r3, [pc, #40]	; (800c1d0 <txAVLPredicate+0x48>)
 800c1a8:	4a0a      	ldr	r2, [pc, #40]	; (800c1d4 <txAVLPredicate+0x4c>)
 800c1aa:	f240 114d 	movw	r1, #333	; 0x14d
 800c1ae:	480a      	ldr	r0, [pc, #40]	; (800c1d8 <txAVLPredicate+0x50>)
 800c1b0:	f001 fcca 	bl	800db48 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6a1a      	ldr	r2, [r3, #32]
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	6a1b      	ldr	r3, [r3, #32]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d301      	bcc.n	800c1c4 <txAVLPredicate+0x3c>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e001      	b.n	800c1c8 <txAVLPredicate+0x40>
 800c1c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	080126f8 	.word	0x080126f8
 800c1d4:	08013260 	.word	0x08013260
 800c1d8:	0801250c 	.word	0x0801250c

0800c1dc <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 800c1dc:	b590      	push	{r4, r7, lr}
 800c1de:	b08d      	sub	sp, #52	; 0x34
 800c1e0:	af02      	add	r7, sp, #8
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d106      	bne.n	800c1fe <txPushSingleFrame+0x22>
 800c1f0:	4b5c      	ldr	r3, [pc, #368]	; (800c364 <txPushSingleFrame+0x188>)
 800c1f2:	4a5d      	ldr	r2, [pc, #372]	; (800c368 <txPushSingleFrame+0x18c>)
 800c1f4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800c1f8:	485c      	ldr	r0, [pc, #368]	; (800c36c <txPushSingleFrame+0x190>)
 800c1fa:	f001 fca5 	bl	800db48 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 800c1fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c200:	2b00      	cmp	r3, #0
 800c202:	d109      	bne.n	800c218 <txPushSingleFrame+0x3c>
 800c204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c206:	2b00      	cmp	r3, #0
 800c208:	d006      	beq.n	800c218 <txPushSingleFrame+0x3c>
 800c20a:	4b59      	ldr	r3, [pc, #356]	; (800c370 <txPushSingleFrame+0x194>)
 800c20c:	4a56      	ldr	r2, [pc, #344]	; (800c368 <txPushSingleFrame+0x18c>)
 800c20e:	f240 115b 	movw	r1, #347	; 0x15b
 800c212:	4856      	ldr	r0, [pc, #344]	; (800c36c <txPushSingleFrame+0x190>)
 800c214:	f001 fc98 	bl	800db48 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 800c218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c21a:	3301      	adds	r3, #1
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7ff ff2f 	bl	800c080 <txRoundFramePayloadSizeUp>
 800c222:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 800c224:	6a3a      	ldr	r2, [r7, #32]
 800c226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c228:	429a      	cmp	r2, r3
 800c22a:	d806      	bhi.n	800c23a <txPushSingleFrame+0x5e>
 800c22c:	4b51      	ldr	r3, [pc, #324]	; (800c374 <txPushSingleFrame+0x198>)
 800c22e:	4a4e      	ldr	r2, [pc, #312]	; (800c368 <txPushSingleFrame+0x18c>)
 800c230:	f240 115d 	movw	r1, #349	; 0x15d
 800c234:	484d      	ldr	r0, [pc, #308]	; (800c36c <txPushSingleFrame+0x190>)
 800c236:	f001 fc87 	bl	800db48 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 800c23a:	6a3a      	ldr	r2, [r7, #32]
 800c23c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c23e:	1ad3      	subs	r3, r2, r3
 800c240:	3b01      	subs	r3, #1
 800c242:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 800c244:	69fa      	ldr	r2, [r7, #28]
 800c246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c248:	4413      	add	r3, r2
 800c24a:	3301      	adds	r3, #1
 800c24c:	6a3a      	ldr	r2, [r7, #32]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d006      	beq.n	800c260 <txPushSingleFrame+0x84>
 800c252:	4b49      	ldr	r3, [pc, #292]	; (800c378 <txPushSingleFrame+0x19c>)
 800c254:	4a44      	ldr	r2, [pc, #272]	; (800c368 <txPushSingleFrame+0x18c>)
 800c256:	f240 115f 	movw	r1, #351	; 0x15f
 800c25a:	4844      	ldr	r0, [pc, #272]	; (800c36c <txPushSingleFrame+0x190>)
 800c25c:	f001 fc74 	bl	800db48 <__assert_func>
    int32_t       out = 0;
 800c260:	2300      	movs	r3, #0
 800c262:	627b      	str	r3, [r7, #36]	; 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	689a      	ldr	r2, [r3, #8]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d209      	bcs.n	800c284 <txPushSingleFrame+0xa8>
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c278:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c27a:	68b8      	ldr	r0, [r7, #8]
 800c27c:	f7ff ff32 	bl	800c0e4 <txAllocateQueueItem>
 800c280:	4603      	mov	r3, r0
 800c282:	e000      	b.n	800c286 <txPushSingleFrame+0xaa>
 800c284:	2300      	movs	r3, #0
    TxItem* const tqi =
 800c286:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d054      	beq.n	800c338 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 800c28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c290:	2b00      	cmp	r3, #0
 800c292:	d010      	beq.n	800c2b6 <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 800c294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c296:	2b00      	cmp	r3, #0
 800c298:	d106      	bne.n	800c2a8 <txPushSingleFrame+0xcc>
 800c29a:	4b38      	ldr	r3, [pc, #224]	; (800c37c <txPushSingleFrame+0x1a0>)
 800c29c:	4a32      	ldr	r2, [pc, #200]	; (800c368 <txPushSingleFrame+0x18c>)
 800c29e:	f240 1167 	movw	r1, #359	; 0x167
 800c2a2:	4832      	ldr	r0, [pc, #200]	; (800c36c <txPushSingleFrame+0x190>)
 800c2a4:	f001 fc50 	bl	800db48 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	3330      	adds	r3, #48	; 0x30
 800c2ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f002 fdd0 	bl	800ee56 <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800c2b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2b8:	3330      	adds	r3, #48	; 0x30
 800c2ba:	69ba      	ldr	r2, [r7, #24]
 800c2bc:	4413      	add	r3, r2
 800c2be:	69fa      	ldr	r2, [r7, #28]
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f002 fcf3 	bl	800ecae <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800c2c8:	6a3b      	ldr	r3, [r7, #32]
 800c2ca:	1e5c      	subs	r4, r3, #1
 800c2cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	2101      	movs	r1, #1
 800c2d4:	2001      	movs	r0, #1
 800c2d6:	f7ff fe91 	bl	800bffc <txMakeTailByte>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	461a      	mov	r2, r3
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	4423      	add	r3, r4
 800c2e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f103 000c 	add.w	r0, r3, #12
 800c2ec:	69b9      	ldr	r1, [r7, #24]
 800c2ee:	4b24      	ldr	r3, [pc, #144]	; (800c380 <txPushSingleFrame+0x1a4>)
 800c2f0:	4a24      	ldr	r2, [pc, #144]	; (800c384 <txPushSingleFrame+0x1a8>)
 800c2f2:	f7ff fae7 	bl	800b8c4 <cavlSearch>
 800c2f6:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d006      	beq.n	800c30e <txPushSingleFrame+0x132>
 800c300:	4b21      	ldr	r3, [pc, #132]	; (800c388 <txPushSingleFrame+0x1ac>)
 800c302:	4a19      	ldr	r2, [pc, #100]	; (800c368 <txPushSingleFrame+0x18c>)
 800c304:	f240 1173 	movw	r1, #371	; 0x173
 800c308:	4818      	ldr	r0, [pc, #96]	; (800c36c <txPushSingleFrame+0x190>)
 800c30a:	f001 fc1d 	bl	800db48 <__assert_func>
        que->size++;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	1c5a      	adds	r2, r3, #1
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	689a      	ldr	r2, [r3, #8]
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	429a      	cmp	r2, r3
 800c322:	d906      	bls.n	800c332 <txPushSingleFrame+0x156>
 800c324:	4b19      	ldr	r3, [pc, #100]	; (800c38c <txPushSingleFrame+0x1b0>)
 800c326:	4a10      	ldr	r2, [pc, #64]	; (800c368 <txPushSingleFrame+0x18c>)
 800c328:	f240 1175 	movw	r1, #373	; 0x175
 800c32c:	480f      	ldr	r0, [pc, #60]	; (800c36c <txPushSingleFrame+0x190>)
 800c32e:	f001 fc0b 	bl	800db48 <__assert_func>
        out = 1;  // One frame enqueued.
 800c332:	2301      	movs	r3, #1
 800c334:	627b      	str	r3, [r7, #36]	; 0x24
 800c336:	e002      	b.n	800c33e <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800c338:	f06f 0302 	mvn.w	r3, #2
 800c33c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 800c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c340:	2b00      	cmp	r3, #0
 800c342:	db09      	blt.n	800c358 <txPushSingleFrame+0x17c>
 800c344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c346:	2b01      	cmp	r3, #1
 800c348:	d006      	beq.n	800c358 <txPushSingleFrame+0x17c>
 800c34a:	4b11      	ldr	r3, [pc, #68]	; (800c390 <txPushSingleFrame+0x1b4>)
 800c34c:	4a06      	ldr	r2, [pc, #24]	; (800c368 <txPushSingleFrame+0x18c>)
 800c34e:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800c352:	4806      	ldr	r0, [pc, #24]	; (800c36c <txPushSingleFrame+0x190>)
 800c354:	f001 fbf8 	bl	800db48 <__assert_func>
    return out;
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	372c      	adds	r7, #44	; 0x2c
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd90      	pop	{r4, r7, pc}
 800c362:	bf00      	nop
 800c364:	080126d0 	.word	0x080126d0
 800c368:	0801324c 	.word	0x0801324c
 800c36c:	0801250c 	.word	0x0801250c
 800c370:	0801272c 	.word	0x0801272c
 800c374:	0801275c 	.word	0x0801275c
 800c378:	08012780 	.word	0x08012780
 800c37c:	080127bc 	.word	0x080127bc
 800c380:	0800bc25 	.word	0x0800bc25
 800c384:	0800c189 	.word	0x0800c189
 800c388:	080127d4 	.word	0x080127d4
 800c38c:	080127ec 	.word	0x080127ec
 800c390:	08012808 	.word	0x08012808

0800c394 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 800c394:	b590      	push	{r4, r7, lr}
 800c396:	b093      	sub	sp, #76	; 0x4c
 800c398:	af02      	add	r7, sp, #8
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d106      	bne.n	800c3b4 <txGenerateMultiFrameChain+0x20>
 800c3a6:	4b93      	ldr	r3, [pc, #588]	; (800c5f4 <txGenerateMultiFrameChain+0x260>)
 800c3a8:	4a93      	ldr	r2, [pc, #588]	; (800c5f8 <txGenerateMultiFrameChain+0x264>)
 800c3aa:	f240 1189 	movw	r1, #393	; 0x189
 800c3ae:	4893      	ldr	r0, [pc, #588]	; (800c5fc <txGenerateMultiFrameChain+0x268>)
 800c3b0:	f001 fbca 	bl	800db48 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d106      	bne.n	800c3c8 <txGenerateMultiFrameChain+0x34>
 800c3ba:	4b91      	ldr	r3, [pc, #580]	; (800c600 <txGenerateMultiFrameChain+0x26c>)
 800c3bc:	4a8e      	ldr	r2, [pc, #568]	; (800c5f8 <txGenerateMultiFrameChain+0x264>)
 800c3be:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800c3c2:	488e      	ldr	r0, [pc, #568]	; (800c5fc <txGenerateMultiFrameChain+0x268>)
 800c3c4:	f001 fbc0 	bl	800db48 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800c3c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d806      	bhi.n	800c3de <txGenerateMultiFrameChain+0x4a>
 800c3d0:	4b8c      	ldr	r3, [pc, #560]	; (800c604 <txGenerateMultiFrameChain+0x270>)
 800c3d2:	4a89      	ldr	r2, [pc, #548]	; (800c5f8 <txGenerateMultiFrameChain+0x264>)
 800c3d4:	f240 118b 	movw	r1, #395	; 0x18b
 800c3d8:	4888      	ldr	r0, [pc, #544]	; (800c5fc <txGenerateMultiFrameChain+0x268>)
 800c3da:	f001 fbb5 	bl	800db48 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 800c3de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d106      	bne.n	800c3f2 <txGenerateMultiFrameChain+0x5e>
 800c3e4:	4b88      	ldr	r3, [pc, #544]	; (800c608 <txGenerateMultiFrameChain+0x274>)
 800c3e6:	4a84      	ldr	r2, [pc, #528]	; (800c5f8 <txGenerateMultiFrameChain+0x264>)
 800c3e8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800c3ec:	4883      	ldr	r0, [pc, #524]	; (800c5fc <txGenerateMultiFrameChain+0x268>)
 800c3ee:	f001 fbab 	bl	800db48 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	613b      	str	r3, [r7, #16]
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	617b      	str	r3, [r7, #20]
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800c3fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c400:	3302      	adds	r3, #2
 800c402:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t         offset                = 0U;
 800c404:	2300      	movs	r3, #0
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 800c408:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c40a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c40c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c410:	f7ff fc34 	bl	800bc7c <crcAdd>
 800c414:	4603      	mov	r3, r0
 800c416:	877b      	strh	r3, [r7, #58]	; 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 800c418:	2301      	movs	r3, #1
 800c41a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 800c41e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c420:	637b      	str	r3, [r7, #52]	; 0x34
    while (offset < payload_size_with_crc)
 800c422:	e0d4      	b.n	800c5ce <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	3301      	adds	r3, #1
 800c428:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 800c42a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c42e:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	429a      	cmp	r2, r3
 800c434:	d908      	bls.n	800c448 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 800c436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	3301      	adds	r3, #1
 800c43e:	4618      	mov	r0, r3
 800c440:	f7ff fe1e 	bl	800c080 <txRoundFramePayloadSizeUp>
 800c444:	4603      	mov	r3, r0
 800c446:	e001      	b.n	800c44c <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 800c44c:	627b      	str	r3, [r7, #36]	; 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 800c44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c456:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c458:	68b8      	ldr	r0, [r7, #8]
 800c45a:	f7ff fe43 	bl	800c0e4 <txAllocateQueueItem>
 800c45e:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d102      	bne.n	800c46c <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 800c466:	6a3b      	ldr	r3, [r7, #32]
 800c468:	613b      	str	r3, [r7, #16]
 800c46a:	e002      	b.n	800c472 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	6a3a      	ldr	r2, [r7, #32]
 800c470:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 800c472:	6a3b      	ldr	r3, [r7, #32]
 800c474:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f000 80ae 	beq.w	800c5da <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 800c47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c480:	3b01      	subs	r3, #1
 800c482:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 800c484:	2300      	movs	r3, #0
 800c486:	633b      	str	r3, [r7, #48]	; 0x30
        if (offset < payload_size)
 800c488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c48a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d21c      	bcs.n	800c4ca <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 800c490:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c494:	1ad3      	subs	r3, r2, r3
 800c496:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (move_size > frame_payload_size)
 800c498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d901      	bls.n	800c4a4 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	3330      	adds	r3, #48	; 0x30
 800c4a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f002 fcd2 	bl	800ee56 <memcpy>
            frame_offset = frame_offset + move_size;
 800c4b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b6:	4413      	add	r3, r2
 800c4b8:	633b      	str	r3, [r7, #48]	; 0x30
            offset += move_size;
 800c4ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4be:	4413      	add	r3, r2
 800c4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
            payload_ptr += move_size;
 800c4c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	4413      	add	r3, r2
 800c4c8:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 800c4ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d343      	bcc.n	800c55a <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800c4d2:	e00f      	b.n	800c4f4 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 800c4d4:	697a      	ldr	r2, [r7, #20]
 800c4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d8:	4413      	add	r3, r2
 800c4da:	3330      	adds	r3, #48	; 0x30
 800c4dc:	2200      	movs	r2, #0
 800c4de:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800c4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	633b      	str	r3, [r7, #48]	; 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 800c4e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7ff fba6 	bl	800bc3c <crcAddByte>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	877b      	strh	r3, [r7, #58]	; 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800c4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f6:	3302      	adds	r3, #2
 800c4f8:	69fa      	ldr	r2, [r7, #28]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d8ea      	bhi.n	800c4d4 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 800c4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	429a      	cmp	r2, r3
 800c504:	d213      	bcs.n	800c52e <txGenerateMultiFrameChain+0x19a>
 800c506:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d10f      	bne.n	800c52e <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 800c50e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c510:	0a1b      	lsrs	r3, r3, #8
 800c512:	b29b      	uxth	r3, r3
 800c514:	697a      	ldr	r2, [r7, #20]
 800c516:	b2d9      	uxtb	r1, r3
 800c518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51a:	4413      	add	r3, r2
 800c51c:	3330      	adds	r3, #48	; 0x30
 800c51e:	460a      	mov	r2, r1
 800c520:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	3301      	adds	r3, #1
 800c526:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 800c528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c52a:	3301      	adds	r3, #1
 800c52c:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 800c52e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	429a      	cmp	r2, r3
 800c534:	d211      	bcs.n	800c55a <txGenerateMultiFrameChain+0x1c6>
 800c536:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c538:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d90d      	bls.n	800c55a <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c542:	b2d9      	uxtb	r1, r3
 800c544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c546:	4413      	add	r3, r2
 800c548:	3330      	adds	r3, #48	; 0x30
 800c54a:	460a      	mov	r2, r1
 800c54c:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c550:	3301      	adds	r3, #1
 800c552:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 800c554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c556:	3301      	adds	r3, #1
 800c558:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	1c5a      	adds	r2, r3, #1
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c562:	429a      	cmp	r2, r3
 800c564:	d006      	beq.n	800c574 <txGenerateMultiFrameChain+0x1e0>
 800c566:	4b29      	ldr	r3, [pc, #164]	; (800c60c <txGenerateMultiFrameChain+0x278>)
 800c568:	4a23      	ldr	r2, [pc, #140]	; (800c5f8 <txGenerateMultiFrameChain+0x264>)
 800c56a:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c56e:	4823      	ldr	r0, [pc, #140]	; (800c5fc <txGenerateMultiFrameChain+0x268>)
 800c570:	f001 faea 	bl	800db48 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800c574:	693a      	ldr	r2, [r7, #16]
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	429a      	cmp	r2, r3
 800c57a:	bf0c      	ite	eq
 800c57c:	2301      	moveq	r3, #1
 800c57e:	2300      	movne	r3, #0
 800c580:	b2d8      	uxtb	r0, r3
 800c582:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c586:	429a      	cmp	r2, r3
 800c588:	bf2c      	ite	cs
 800c58a:	2301      	movcs	r3, #1
 800c58c:	2300      	movcc	r3, #0
 800c58e:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800c590:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800c592:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800c596:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800c59a:	f7ff fd2f 	bl	800bffc <txMakeTailByte>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a4:	4423      	add	r3, r4
 800c5a6:	3330      	adds	r3, #48	; 0x30
 800c5a8:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 800c5aa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	bf14      	ite	ne
 800c5b2:	2301      	movne	r3, #1
 800c5b4:	2300      	moveq	r3, #0
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	f083 0301 	eor.w	r3, r3, #1
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800c5c2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c5c6:	f003 0301 	and.w	r3, r3, #1
 800c5ca:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    while (offset < payload_size_with_crc)
 800c5ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	f4ff af26 	bcc.w	800c424 <txGenerateMultiFrameChain+0x90>
 800c5d8:	e000      	b.n	800c5dc <txGenerateMultiFrameChain+0x248>
            break;
 800c5da:	bf00      	nop
    }
    return out;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	461c      	mov	r4, r3
 800c5e0:	f107 0310 	add.w	r3, r7, #16
 800c5e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	3744      	adds	r7, #68	; 0x44
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd90      	pop	{r4, r7, pc}
 800c5f4:	080126d0 	.word	0x080126d0
 800c5f8:	0801331c 	.word	0x0801331c
 800c5fc:	0801250c 	.word	0x0801250c
 800c600:	08012820 	.word	0x08012820
 800c604:	0801283c 	.word	0x0801283c
 800c608:	080127bc 	.word	0x080127bc
 800c60c:	08012864 	.word	0x08012864

0800c610 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b094      	sub	sp, #80	; 0x50
 800c614:	af06      	add	r7, sp, #24
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d002      	beq.n	800c628 <txPushMultiFrame+0x18>
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d106      	bne.n	800c636 <txPushMultiFrame+0x26>
 800c628:	4b65      	ldr	r3, [pc, #404]	; (800c7c0 <txPushMultiFrame+0x1b0>)
 800c62a:	4a66      	ldr	r2, [pc, #408]	; (800c7c4 <txPushMultiFrame+0x1b4>)
 800c62c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800c630:	4865      	ldr	r0, [pc, #404]	; (800c7c8 <txPushMultiFrame+0x1b8>)
 800c632:	f001 fa89 	bl	800db48 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d106      	bne.n	800c64a <txPushMultiFrame+0x3a>
 800c63c:	4b63      	ldr	r3, [pc, #396]	; (800c7cc <txPushMultiFrame+0x1bc>)
 800c63e:	4a61      	ldr	r2, [pc, #388]	; (800c7c4 <txPushMultiFrame+0x1b4>)
 800c640:	f240 11ed 	movw	r1, #493	; 0x1ed
 800c644:	4860      	ldr	r0, [pc, #384]	; (800c7c8 <txPushMultiFrame+0x1b8>)
 800c646:	f001 fa7f 	bl	800db48 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800c64a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d806      	bhi.n	800c660 <txPushMultiFrame+0x50>
 800c652:	4b5f      	ldr	r3, [pc, #380]	; (800c7d0 <txPushMultiFrame+0x1c0>)
 800c654:	4a5b      	ldr	r2, [pc, #364]	; (800c7c4 <txPushMultiFrame+0x1b4>)
 800c656:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 800c65a:	485b      	ldr	r0, [pc, #364]	; (800c7c8 <txPushMultiFrame+0x1b8>)
 800c65c:	f001 fa74 	bl	800db48 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 800c660:	2300      	movs	r3, #0
 800c662:	637b      	str	r3, [r7, #52]	; 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800c664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c666:	3302      	adds	r3, #2
 800c668:	62bb      	str	r3, [r7, #40]	; 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 800c66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	4413      	add	r3, r2
 800c670:	1e5a      	subs	r2, r3, #1
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	fbb2 f3f3 	udiv	r3, r2, r3
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
    CANARD_ASSERT(num_frames >= 2);
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d806      	bhi.n	800c68e <txPushMultiFrame+0x7e>
 800c680:	4b54      	ldr	r3, [pc, #336]	; (800c7d4 <txPushMultiFrame+0x1c4>)
 800c682:	4a50      	ldr	r2, [pc, #320]	; (800c7c4 <txPushMultiFrame+0x1b4>)
 800c684:	f240 11f3 	movw	r1, #499	; 0x1f3
 800c688:	484f      	ldr	r0, [pc, #316]	; (800c7c8 <txPushMultiFrame+0x1b8>)
 800c68a:	f001 fa5d 	bl	800db48 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	689a      	ldr	r2, [r3, #8]
 800c692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c694:	441a      	add	r2, r3
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d87b      	bhi.n	800c796 <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 800c69e:	f107 0010 	add.w	r0, r7, #16
 800c6a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6a4:	9305      	str	r3, [sp, #20]
 800c6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6a8:	9304      	str	r3, [sp, #16]
 800c6aa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800c6ae:	9303      	str	r3, [sp, #12]
 800c6b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6b2:	9302      	str	r3, [sp, #8]
 800c6b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c6b8:	e9cd 2300 	strd	r2, r3, [sp]
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	68b9      	ldr	r1, [r7, #8]
 800c6c0:	f7ff fe68 	bl	800c394 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d051      	beq.n	800c76e <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	633b      	str	r3, [r7, #48]	; 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f103 000c 	add.w	r0, r3, #12
 800c6d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6d6:	4b40      	ldr	r3, [pc, #256]	; (800c7d8 <txPushMultiFrame+0x1c8>)
 800c6d8:	4a40      	ldr	r2, [pc, #256]	; (800c7dc <txPushMultiFrame+0x1cc>)
 800c6da:	f7ff f8f3 	bl	800b8c4 <cavlSearch>
 800c6de:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 800c6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e2:	69fa      	ldr	r2, [r7, #28]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d006      	beq.n	800c6f6 <txPushMultiFrame+0xe6>
 800c6e8:	4b3d      	ldr	r3, [pc, #244]	; (800c7e0 <txPushMultiFrame+0x1d0>)
 800c6ea:	4a36      	ldr	r2, [pc, #216]	; (800c7c4 <txPushMultiFrame+0x1b4>)
 800c6ec:	f240 2105 	movw	r1, #517	; 0x205
 800c6f0:	4835      	ldr	r0, [pc, #212]	; (800c7c8 <txPushMultiFrame+0x1b8>)
 800c6f2:	f001 fa29 	bl	800db48 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d106      	bne.n	800c70c <txPushMultiFrame+0xfc>
 800c6fe:	4b39      	ldr	r3, [pc, #228]	; (800c7e4 <txPushMultiFrame+0x1d4>)
 800c700:	4a30      	ldr	r2, [pc, #192]	; (800c7c4 <txPushMultiFrame+0x1b4>)
 800c702:	f240 2106 	movw	r1, #518	; 0x206
 800c706:	4830      	ldr	r0, [pc, #192]	; (800c7c8 <txPushMultiFrame+0x1b8>)
 800c708:	f001 fa1e 	bl	800db48 <__assert_func>
                next = next->next_in_transfer;
 800c70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	633b      	str	r3, [r7, #48]	; 0x30
            } while (next != NULL);
 800c712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1da      	bne.n	800c6ce <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d006      	beq.n	800c72e <txPushMultiFrame+0x11e>
 800c720:	4b31      	ldr	r3, [pc, #196]	; (800c7e8 <txPushMultiFrame+0x1d8>)
 800c722:	4a28      	ldr	r2, [pc, #160]	; (800c7c4 <txPushMultiFrame+0x1b4>)
 800c724:	f240 2109 	movw	r1, #521	; 0x209
 800c728:	4827      	ldr	r0, [pc, #156]	; (800c7c8 <txPushMultiFrame+0x1b8>)
 800c72a:	f001 fa0d 	bl	800db48 <__assert_func>
            que->size += sq.size;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	689a      	ldr	r2, [r3, #8]
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	441a      	add	r2, r3
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	689a      	ldr	r2, [r3, #8]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	429a      	cmp	r2, r3
 800c744:	d906      	bls.n	800c754 <txPushMultiFrame+0x144>
 800c746:	4b29      	ldr	r3, [pc, #164]	; (800c7ec <txPushMultiFrame+0x1dc>)
 800c748:	4a1e      	ldr	r2, [pc, #120]	; (800c7c4 <txPushMultiFrame+0x1b4>)
 800c74a:	f240 210b 	movw	r1, #523	; 0x20b
 800c74e:	481e      	ldr	r0, [pc, #120]	; (800c7c8 <txPushMultiFrame+0x1b8>)
 800c750:	f001 f9fa 	bl	800db48 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	2b00      	cmp	r3, #0
 800c758:	da06      	bge.n	800c768 <txPushMultiFrame+0x158>
 800c75a:	4b25      	ldr	r3, [pc, #148]	; (800c7f0 <txPushMultiFrame+0x1e0>)
 800c75c:	4a19      	ldr	r2, [pc, #100]	; (800c7c4 <txPushMultiFrame+0x1b4>)
 800c75e:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800c762:	4819      	ldr	r0, [pc, #100]	; (800c7c8 <txPushMultiFrame+0x1b8>)
 800c764:	f001 f9f0 	bl	800db48 <__assert_func>
            out = (int32_t) sq.size;
 800c768:	69bb      	ldr	r3, [r7, #24]
 800c76a:	637b      	str	r3, [r7, #52]	; 0x34
 800c76c:	e016      	b.n	800c79c <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 800c76e:	f06f 0302 	mvn.w	r3, #2
 800c772:	637b      	str	r3, [r7, #52]	; 0x34
            CanardTxQueueItem* head = &sq.head->base;
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 800c778:	e009      	b.n	800c78e <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 800c77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c786:	68b8      	ldr	r0, [r7, #8]
 800c788:	4798      	blx	r3
                head = next;
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 800c78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1f2      	bne.n	800c77a <txPushMultiFrame+0x16a>
 800c794:	e002      	b.n	800c79c <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800c796:	f06f 0302 	mvn.w	r3, #2
 800c79a:	637b      	str	r3, [r7, #52]	; 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 800c79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	db09      	blt.n	800c7b6 <txPushMultiFrame+0x1a6>
 800c7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	dc06      	bgt.n	800c7b6 <txPushMultiFrame+0x1a6>
 800c7a8:	4b12      	ldr	r3, [pc, #72]	; (800c7f4 <txPushMultiFrame+0x1e4>)
 800c7aa:	4a06      	ldr	r2, [pc, #24]	; (800c7c4 <txPushMultiFrame+0x1b4>)
 800c7ac:	f240 211f 	movw	r1, #543	; 0x21f
 800c7b0:	4805      	ldr	r0, [pc, #20]	; (800c7c8 <txPushMultiFrame+0x1b8>)
 800c7b2:	f001 f9c9 	bl	800db48 <__assert_func>
    return out;
 800c7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3738      	adds	r7, #56	; 0x38
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	080128a0 	.word	0x080128a0
 800c7c4:	08013308 	.word	0x08013308
 800c7c8:	0801250c 	.word	0x0801250c
 800c7cc:	08012820 	.word	0x08012820
 800c7d0:	0801283c 	.word	0x0801283c
 800c7d4:	080128d0 	.word	0x080128d0
 800c7d8:	0800bc25 	.word	0x0800bc25
 800c7dc:	0800c189 	.word	0x0800c189
 800c7e0:	080128e0 	.word	0x080128e0
 800c7e4:	080128f4 	.word	0x080128f4
 800c7e8:	08012910 	.word	0x08012910
 800c7ec:	080127ec 	.word	0x080127ec
 800c7f0:	08012928 	.word	0x08012928
 800c7f4:	0801294c 	.word	0x0801294c

0800c7f8 <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid UAVCAN/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b088      	sub	sp, #32
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
 800c804:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d106      	bne.n	800c81a <rxTryParseFrame+0x22>
 800c80c:	4b96      	ldr	r3, [pc, #600]	; (800ca68 <rxTryParseFrame+0x270>)
 800c80e:	4a97      	ldr	r2, [pc, #604]	; (800ca6c <rxTryParseFrame+0x274>)
 800c810:	f240 214e 	movw	r1, #590	; 0x24e
 800c814:	4896      	ldr	r0, [pc, #600]	; (800ca70 <rxTryParseFrame+0x278>)
 800c816:	f001 f997 	bl	800db48 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c822:	d306      	bcc.n	800c832 <rxTryParseFrame+0x3a>
 800c824:	4b93      	ldr	r3, [pc, #588]	; (800ca74 <rxTryParseFrame+0x27c>)
 800c826:	4a91      	ldr	r2, [pc, #580]	; (800ca6c <rxTryParseFrame+0x274>)
 800c828:	f240 214f 	movw	r1, #591	; 0x24f
 800c82c:	4890      	ldr	r0, [pc, #576]	; (800ca70 <rxTryParseFrame+0x278>)
 800c82e:	f001 f98b 	bl	800db48 <__assert_func>
    CANARD_ASSERT(out != NULL);
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d106      	bne.n	800c846 <rxTryParseFrame+0x4e>
 800c838:	4b8f      	ldr	r3, [pc, #572]	; (800ca78 <rxTryParseFrame+0x280>)
 800c83a:	4a8c      	ldr	r2, [pc, #560]	; (800ca6c <rxTryParseFrame+0x274>)
 800c83c:	f44f 7114 	mov.w	r1, #592	; 0x250
 800c840:	488b      	ldr	r0, [pc, #556]	; (800ca70 <rxTryParseFrame+0x278>)
 800c842:	f001 f981 	bl	800db48 <__assert_func>
    bool valid = false;
 800c846:	2300      	movs	r3, #0
 800c848:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f000 8105 	beq.w	800ca5e <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d106      	bne.n	800c86a <rxTryParseFrame+0x72>
 800c85c:	4b87      	ldr	r3, [pc, #540]	; (800ca7c <rxTryParseFrame+0x284>)
 800c85e:	4a83      	ldr	r2, [pc, #524]	; (800ca6c <rxTryParseFrame+0x274>)
 800c860:	f44f 7115 	mov.w	r1, #596	; 0x254
 800c864:	4882      	ldr	r0, [pc, #520]	; (800ca70 <rxTryParseFrame+0x278>)
 800c866:	f001 f96f 	bl	800db48 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c870:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	0e9b      	lsrs	r3, r3, #26
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	f003 0307 	and.w	r3, r3, #7
 800c884:	b2da      	uxtb	r2, r3
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c892:	b2da      	uxtb	r2, r3
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d128      	bne.n	800c8f4 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	0a1b      	lsrs	r3, r3, #8
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d002      	beq.n	800c8c8 <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	22ff      	movs	r2, #255	; 0xff
 800c8c6:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	22ff      	movs	r2, #255	; 0xff
 800c8cc:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d106      	bne.n	800c8e6 <rxTryParseFrame+0xee>
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d101      	bne.n	800c8e6 <rxTryParseFrame+0xee>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e000      	b.n	800c8e8 <rxTryParseFrame+0xf0>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	77fb      	strb	r3, [r7, #31]
 800c8ea:	7ffb      	ldrb	r3, [r7, #31]
 800c8ec:	f003 0301 	and.w	r3, r3, #1
 800c8f0:	77fb      	strb	r3, [r7, #31]
 800c8f2:	e02c      	b.n	800c94e <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <rxTryParseFrame+0x10a>
 800c8fe:	2202      	movs	r2, #2
 800c900:	e000      	b.n	800c904 <rxTryParseFrame+0x10c>
 800c902:	2201      	movs	r2, #1
            out->transfer_kind =
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	0b9b      	lsrs	r3, r3, #14
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c912:	b29a      	uxth	r2, r3
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	09db      	lsrs	r3, r3, #7
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c922:	b2da      	uxtb	r2, r3
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d107      	bne.n	800c942 <rxTryParseFrame+0x14a>
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	7b1a      	ldrb	r2, [r3, #12]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	7b5b      	ldrb	r3, [r3, #13]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d001      	beq.n	800c942 <rxTryParseFrame+0x14a>
 800c93e:	2301      	movs	r3, #1
 800c940:	e000      	b.n	800c944 <rxTryParseFrame+0x14c>
 800c942:	2300      	movs	r3, #0
 800c944:	77fb      	strb	r3, [r7, #31]
 800c946:	7ffb      	ldrb	r3, [r7, #31]
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	1e5a      	subs	r2, r3, #1
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	689a      	ldr	r2, [r3, #8]
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	699a      	ldr	r2, [r3, #24]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	695b      	ldr	r3, [r3, #20]
 800c968:	4413      	add	r3, r2
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 800c96e:	7dfb      	ldrb	r3, [r7, #23]
 800c970:	f003 031f 	and.w	r3, r3, #31
 800c974:	b2da      	uxtb	r2, r3
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 800c97a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	09db      	lsrs	r3, r3, #7
 800c982:	b2da      	uxtb	r2, r3
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 800c988:	7dfb      	ldrb	r3, [r7, #23]
 800c98a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c98e:	2b00      	cmp	r3, #0
 800c990:	bf14      	ite	ne
 800c992:	2301      	movne	r3, #1
 800c994:	2300      	moveq	r3, #0
 800c996:	b2da      	uxtb	r2, r3
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 800c99c:	7dfb      	ldrb	r3, [r7, #23]
 800c99e:	f003 0320 	and.w	r3, r3, #32
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	bf14      	ite	ne
 800c9a6:	2301      	movne	r3, #1
 800c9a8:	2300      	moveq	r3, #0
 800c9aa:	b2da      	uxtb	r2, r3
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 800c9b0:	7ffb      	ldrb	r3, [r7, #31]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00c      	beq.n	800c9d0 <rxTryParseFrame+0x1d8>
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	7bdb      	ldrb	r3, [r3, #15]
 800c9ba:	f083 0301 	eor.w	r3, r3, #1
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d103      	bne.n	800c9cc <rxTryParseFrame+0x1d4>
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	7c5b      	ldrb	r3, [r3, #17]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <rxTryParseFrame+0x1d8>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e000      	b.n	800c9d2 <rxTryParseFrame+0x1da>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	77fb      	strb	r3, [r7, #31]
 800c9d4:	7ffb      	ldrb	r3, [r7, #31]
 800c9d6:	f003 0301 	and.w	r3, r3, #1
 800c9da:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 800c9dc:	7ffb      	ldrb	r3, [r7, #31]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00d      	beq.n	800c9fe <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d003      	beq.n	800c9f2 <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	7c1b      	ldrb	r3, [r3, #16]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d103      	bne.n	800c9fa <rxTryParseFrame+0x202>
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	7b1b      	ldrb	r3, [r3, #12]
 800c9f6:	2bff      	cmp	r3, #255	; 0xff
 800c9f8:	d001      	beq.n	800c9fe <rxTryParseFrame+0x206>
        valid = valid &&
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e000      	b.n	800ca00 <rxTryParseFrame+0x208>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	77fb      	strb	r3, [r7, #31]
 800ca02:	7ffb      	ldrb	r3, [r7, #31]
 800ca04:	f003 0301 	and.w	r3, r3, #1
 800ca08:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 800ca0a:	7ffb      	ldrb	r3, [r7, #31]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d009      	beq.n	800ca24 <rxTryParseFrame+0x22c>
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	695b      	ldr	r3, [r3, #20]
 800ca14:	2b06      	cmp	r3, #6
 800ca16:	d803      	bhi.n	800ca20 <rxTryParseFrame+0x228>
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	7c1b      	ldrb	r3, [r3, #16]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d001      	beq.n	800ca24 <rxTryParseFrame+0x22c>
 800ca20:	2301      	movs	r3, #1
 800ca22:	e000      	b.n	800ca26 <rxTryParseFrame+0x22e>
 800ca24:	2300      	movs	r3, #0
 800ca26:	77fb      	strb	r3, [r7, #31]
 800ca28:	7ffb      	ldrb	r3, [r7, #31]
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 800ca30:	7ffb      	ldrb	r3, [r7, #31]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00d      	beq.n	800ca52 <rxTryParseFrame+0x25a>
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	695b      	ldr	r3, [r3, #20]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d107      	bne.n	800ca4e <rxTryParseFrame+0x256>
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	7bdb      	ldrb	r3, [r3, #15]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d005      	beq.n	800ca52 <rxTryParseFrame+0x25a>
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	7c1b      	ldrb	r3, [r3, #16]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <rxTryParseFrame+0x25a>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e000      	b.n	800ca54 <rxTryParseFrame+0x25c>
 800ca52:	2300      	movs	r3, #0
 800ca54:	77fb      	strb	r3, [r7, #31]
 800ca56:	7ffb      	ldrb	r3, [r7, #31]
 800ca58:	f003 0301 	and.w	r3, r3, #1
 800ca5c:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 800ca5e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3720      	adds	r7, #32
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	08012964 	.word	0x08012964
 800ca6c:	08013358 	.word	0x08013358
 800ca70:	0801250c 	.word	0x0801250c
 800ca74:	0801297c 	.word	0x0801297c
 800ca78:	080129ac 	.word	0x080129ac
 800ca7c:	080129c0 	.word	0x080129c0

0800ca80 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d106      	bne.n	800ca9e <rxInitTransferMetadataFromFrame+0x1e>
 800ca90:	4b19      	ldr	r3, [pc, #100]	; (800caf8 <rxInitTransferMetadataFromFrame+0x78>)
 800ca92:	4a1a      	ldr	r2, [pc, #104]	; (800cafc <rxInitTransferMetadataFromFrame+0x7c>)
 800ca94:	f240 218f 	movw	r1, #655	; 0x28f
 800ca98:	4819      	ldr	r0, [pc, #100]	; (800cb00 <rxInitTransferMetadataFromFrame+0x80>)
 800ca9a:	f001 f855 	bl	800db48 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	699b      	ldr	r3, [r3, #24]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d106      	bne.n	800cab4 <rxInitTransferMetadataFromFrame+0x34>
 800caa6:	4b17      	ldr	r3, [pc, #92]	; (800cb04 <rxInitTransferMetadataFromFrame+0x84>)
 800caa8:	4a14      	ldr	r2, [pc, #80]	; (800cafc <rxInitTransferMetadataFromFrame+0x7c>)
 800caaa:	f44f 7124 	mov.w	r1, #656	; 0x290
 800caae:	4814      	ldr	r0, [pc, #80]	; (800cb00 <rxInitTransferMetadataFromFrame+0x80>)
 800cab0:	f001 f84a 	bl	800db48 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d106      	bne.n	800cac8 <rxInitTransferMetadataFromFrame+0x48>
 800caba:	4b13      	ldr	r3, [pc, #76]	; (800cb08 <rxInitTransferMetadataFromFrame+0x88>)
 800cabc:	4a0f      	ldr	r2, [pc, #60]	; (800cafc <rxInitTransferMetadataFromFrame+0x7c>)
 800cabe:	f240 2191 	movw	r1, #657	; 0x291
 800cac2:	480f      	ldr	r0, [pc, #60]	; (800cb00 <rxInitTransferMetadataFromFrame+0x80>)
 800cac4:	f001 f840 	bl	800db48 <__assert_func>
    out_transfer->priority       = frame->priority;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	7a1a      	ldrb	r2, [r3, #8]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	7a5a      	ldrb	r2, [r3, #9]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	895a      	ldrh	r2, [r3, #10]
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	7b1a      	ldrb	r2, [r3, #12]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	7b9a      	ldrb	r2, [r3, #14]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	715a      	strb	r2, [r3, #5]
}
 800caf0:	bf00      	nop
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	08012964 	.word	0x08012964
 800cafc:	080133ec 	.word	0x080133ec
 800cb00:	0801250c 	.word	0x0801250c
 800cb04:	080129c0 	.word	0x080129c0
 800cb08:	080129e0 	.word	0x080129e0

0800cb0c <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	4603      	mov	r3, r0
 800cb14:	460a      	mov	r2, r1
 800cb16:	71fb      	strb	r3, [r7, #7]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 800cb1c:	79fb      	ldrb	r3, [r7, #7]
 800cb1e:	2b1f      	cmp	r3, #31
 800cb20:	d906      	bls.n	800cb30 <rxComputeTransferIDDifference+0x24>
 800cb22:	4b15      	ldr	r3, [pc, #84]	; (800cb78 <rxComputeTransferIDDifference+0x6c>)
 800cb24:	4a15      	ldr	r2, [pc, #84]	; (800cb7c <rxComputeTransferIDDifference+0x70>)
 800cb26:	f44f 7127 	mov.w	r1, #668	; 0x29c
 800cb2a:	4815      	ldr	r0, [pc, #84]	; (800cb80 <rxComputeTransferIDDifference+0x74>)
 800cb2c:	f001 f80c 	bl	800db48 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 800cb30:	79bb      	ldrb	r3, [r7, #6]
 800cb32:	2b1f      	cmp	r3, #31
 800cb34:	d906      	bls.n	800cb44 <rxComputeTransferIDDifference+0x38>
 800cb36:	4b13      	ldr	r3, [pc, #76]	; (800cb84 <rxComputeTransferIDDifference+0x78>)
 800cb38:	4a10      	ldr	r2, [pc, #64]	; (800cb7c <rxComputeTransferIDDifference+0x70>)
 800cb3a:	f240 219d 	movw	r1, #669	; 0x29d
 800cb3e:	4810      	ldr	r0, [pc, #64]	; (800cb80 <rxComputeTransferIDDifference+0x74>)
 800cb40:	f001 f802 	bl	800db48 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 800cb44:	79fb      	ldrb	r3, [r7, #7]
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	79bb      	ldrb	r3, [r7, #6]
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 800cb52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	da07      	bge.n	800cb6a <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 800cb5a:	2320      	movs	r3, #32
 800cb5c:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 800cb5e:	7b7b      	ldrb	r3, [r7, #13]
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	89fb      	ldrh	r3, [r7, #14]
 800cb64:	4413      	add	r3, r2
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 800cb6a:	89fb      	ldrh	r3, [r7, #14]
 800cb6c:	b2db      	uxtb	r3, r3
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	080129fc 	.word	0x080129fc
 800cb7c:	08013388 	.word	0x08013388
 800cb80:	0801250c 	.word	0x0801250c
 800cb84:	08012a14 	.word	0x08012a14

0800cb88 <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b086      	sub	sp, #24
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d106      	bne.n	800cbaa <rxSessionWritePayload+0x22>
 800cb9c:	4b67      	ldr	r3, [pc, #412]	; (800cd3c <rxSessionWritePayload+0x1b4>)
 800cb9e:	4a68      	ldr	r2, [pc, #416]	; (800cd40 <rxSessionWritePayload+0x1b8>)
 800cba0:	f240 21ad 	movw	r1, #685	; 0x2ad
 800cba4:	4867      	ldr	r0, [pc, #412]	; (800cd44 <rxSessionWritePayload+0x1bc>)
 800cba6:	f000 ffcf 	bl	800db48 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d106      	bne.n	800cbbe <rxSessionWritePayload+0x36>
 800cbb0:	4b65      	ldr	r3, [pc, #404]	; (800cd48 <rxSessionWritePayload+0x1c0>)
 800cbb2:	4a63      	ldr	r2, [pc, #396]	; (800cd40 <rxSessionWritePayload+0x1b8>)
 800cbb4:	f240 21ae 	movw	r1, #686	; 0x2ae
 800cbb8:	4862      	ldr	r0, [pc, #392]	; (800cd44 <rxSessionWritePayload+0x1bc>)
 800cbba:	f000 ffc5 	bl	800db48 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800cbbe:	6a3b      	ldr	r3, [r7, #32]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d109      	bne.n	800cbd8 <rxSessionWritePayload+0x50>
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d006      	beq.n	800cbd8 <rxSessionWritePayload+0x50>
 800cbca:	4b60      	ldr	r3, [pc, #384]	; (800cd4c <rxSessionWritePayload+0x1c4>)
 800cbcc:	4a5c      	ldr	r2, [pc, #368]	; (800cd40 <rxSessionWritePayload+0x1b8>)
 800cbce:	f240 21af 	movw	r1, #687	; 0x2af
 800cbd2:	485c      	ldr	r0, [pc, #368]	; (800cd44 <rxSessionWritePayload+0x1bc>)
 800cbd4:	f000 ffb8 	bl	800db48 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d206      	bcs.n	800cbf0 <rxSessionWritePayload+0x68>
 800cbe2:	4b5b      	ldr	r3, [pc, #364]	; (800cd50 <rxSessionWritePayload+0x1c8>)
 800cbe4:	4a56      	ldr	r2, [pc, #344]	; (800cd40 <rxSessionWritePayload+0x1b8>)
 800cbe6:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 800cbea:	4856      	ldr	r0, [pc, #344]	; (800cd44 <rxSessionWritePayload+0x1bc>)
 800cbec:	f000 ffac 	bl	800db48 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	68da      	ldr	r2, [r3, #12]
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d906      	bls.n	800cc0a <rxSessionWritePayload+0x82>
 800cbfc:	4b55      	ldr	r3, [pc, #340]	; (800cd54 <rxSessionWritePayload+0x1cc>)
 800cbfe:	4a50      	ldr	r2, [pc, #320]	; (800cd40 <rxSessionWritePayload+0x1b8>)
 800cc00:	f240 21b1 	movw	r1, #689	; 0x2b1
 800cc04:	484f      	ldr	r0, [pc, #316]	; (800cd44 <rxSessionWritePayload+0x1bc>)
 800cc06:	f000 ff9f 	bl	800db48 <__assert_func>

    rxs->total_payload_size += payload_size;
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	689a      	ldr	r2, [r3, #8]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	441a      	add	r2, r3
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	691b      	ldr	r3, [r3, #16]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d115      	bne.n	800cc4a <rxSessionWritePayload+0xc2>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d012      	beq.n	800cc4a <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d006      	beq.n	800cc3a <rxSessionWritePayload+0xb2>
 800cc2c:	4b4a      	ldr	r3, [pc, #296]	; (800cd58 <rxSessionWritePayload+0x1d0>)
 800cc2e:	4a44      	ldr	r2, [pc, #272]	; (800cd40 <rxSessionWritePayload+0x1b8>)
 800cc30:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800cc34:	4843      	ldr	r0, [pc, #268]	; (800cd44 <rxSessionWritePayload+0x1bc>)
 800cc36:	f000 ff87 	bl	800db48 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	689b      	ldr	r3, [r3, #8]
 800cc3e:	6879      	ldr	r1, [r7, #4]
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	4798      	blx	r3
 800cc44:	4602      	mov	r2, r0
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	691b      	ldr	r3, [r3, #16]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d04e      	beq.n	800ccf4 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	68da      	ldr	r2, [r3, #12]
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	4413      	add	r3, r2
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d229      	bcs.n	800ccbc <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d206      	bcs.n	800cc80 <rxSessionWritePayload+0xf8>
 800cc72:	4b37      	ldr	r3, [pc, #220]	; (800cd50 <rxSessionWritePayload+0x1c8>)
 800cc74:	4a32      	ldr	r2, [pc, #200]	; (800cd40 <rxSessionWritePayload+0x1b8>)
 800cc76:	f240 21c3 	movw	r1, #707	; 0x2c3
 800cc7a:	4832      	ldr	r0, [pc, #200]	; (800cd44 <rxSessionWritePayload+0x1bc>)
 800cc7c:	f000 ff64 	bl	800db48 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	1ad3      	subs	r3, r2, r3
 800cc88:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	68da      	ldr	r2, [r3, #12]
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	4413      	add	r3, r2
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d006      	beq.n	800cca6 <rxSessionWritePayload+0x11e>
 800cc98:	4b30      	ldr	r3, [pc, #192]	; (800cd5c <rxSessionWritePayload+0x1d4>)
 800cc9a:	4a29      	ldr	r2, [pc, #164]	; (800cd40 <rxSessionWritePayload+0x1b8>)
 800cc9c:	f240 21c5 	movw	r1, #709	; 0x2c5
 800cca0:	4828      	ldr	r0, [pc, #160]	; (800cd44 <rxSessionWritePayload+0x1bc>)
 800cca2:	f000 ff51 	bl	800db48 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d306      	bcc.n	800ccbc <rxSessionWritePayload+0x134>
 800ccae:	4b2c      	ldr	r3, [pc, #176]	; (800cd60 <rxSessionWritePayload+0x1d8>)
 800ccb0:	4a23      	ldr	r2, [pc, #140]	; (800cd40 <rxSessionWritePayload+0x1b8>)
 800ccb2:	f240 21c6 	movw	r1, #710	; 0x2c6
 800ccb6:	4823      	ldr	r0, [pc, #140]	; (800cd44 <rxSessionWritePayload+0x1bc>)
 800ccb8:	f000 ff46 	bl	800db48 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	691a      	ldr	r2, [r3, #16]
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	693a      	ldr	r2, [r7, #16]
 800ccc8:	6a39      	ldr	r1, [r7, #32]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f002 f8c3 	bl	800ee56 <memcpy>
        rxs->payload_size += bytes_to_copy;
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	68da      	ldr	r2, [r3, #12]
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	441a      	add	r2, r3
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d219      	bcs.n	800cd1a <rxSessionWritePayload+0x192>
 800cce6:	4b1a      	ldr	r3, [pc, #104]	; (800cd50 <rxSessionWritePayload+0x1c8>)
 800cce8:	4a15      	ldr	r2, [pc, #84]	; (800cd40 <rxSessionWritePayload+0x1b8>)
 800ccea:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800ccee:	4815      	ldr	r0, [pc, #84]	; (800cd44 <rxSessionWritePayload+0x1bc>)
 800ccf0:	f000 ff2a 	bl	800db48 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d006      	beq.n	800cd0a <rxSessionWritePayload+0x182>
 800ccfc:	4b16      	ldr	r3, [pc, #88]	; (800cd58 <rxSessionWritePayload+0x1d0>)
 800ccfe:	4a10      	ldr	r2, [pc, #64]	; (800cd40 <rxSessionWritePayload+0x1b8>)
 800cd00:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800cd04:	480f      	ldr	r0, [pc, #60]	; (800cd44 <rxSessionWritePayload+0x1bc>)
 800cd06:	f000 ff1f 	bl	800db48 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <rxSessionWritePayload+0x18e>
 800cd10:	f06f 0302 	mvn.w	r3, #2
 800cd14:	e000      	b.n	800cd18 <rxSessionWritePayload+0x190>
 800cd16:	2300      	movs	r3, #0
 800cd18:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 800cd1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	dd06      	ble.n	800cd30 <rxSessionWritePayload+0x1a8>
 800cd22:	4b10      	ldr	r3, [pc, #64]	; (800cd64 <rxSessionWritePayload+0x1dc>)
 800cd24:	4a06      	ldr	r2, [pc, #24]	; (800cd40 <rxSessionWritePayload+0x1b8>)
 800cd26:	f240 21d7 	movw	r1, #727	; 0x2d7
 800cd2a:	4806      	ldr	r0, [pc, #24]	; (800cd44 <rxSessionWritePayload+0x1bc>)
 800cd2c:	f000 ff0c 	bl	800db48 <__assert_func>
    return out;
 800cd30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3718      	adds	r7, #24
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	080126d0 	.word	0x080126d0
 800cd40:	080133d4 	.word	0x080133d4
 800cd44:	0801250c 	.word	0x0801250c
 800cd48:	08012a2c 	.word	0x08012a2c
 800cd4c:	080125c8 	.word	0x080125c8
 800cd50:	08012a40 	.word	0x08012a40
 800cd54:	08012a5c 	.word	0x08012a5c
 800cd58:	08012a8c 	.word	0x08012a8c
 800cd5c:	08012aa4 	.word	0x08012aa4
 800cd60:	08012ad4 	.word	0x08012ad4
 800cd64:	08012af4 	.word	0x08012af4

0800cd68 <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d106      	bne.n	800cd86 <rxSessionRestart+0x1e>
 800cd78:	4b1a      	ldr	r3, [pc, #104]	; (800cde4 <rxSessionRestart+0x7c>)
 800cd7a:	4a1b      	ldr	r2, [pc, #108]	; (800cde8 <rxSessionRestart+0x80>)
 800cd7c:	f240 21dd 	movw	r1, #733	; 0x2dd
 800cd80:	481a      	ldr	r0, [pc, #104]	; (800cdec <rxSessionRestart+0x84>)
 800cd82:	f000 fee1 	bl	800db48 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d106      	bne.n	800cd9a <rxSessionRestart+0x32>
 800cd8c:	4b18      	ldr	r3, [pc, #96]	; (800cdf0 <rxSessionRestart+0x88>)
 800cd8e:	4a16      	ldr	r2, [pc, #88]	; (800cde8 <rxSessionRestart+0x80>)
 800cd90:	f240 21de 	movw	r1, #734	; 0x2de
 800cd94:	4815      	ldr	r0, [pc, #84]	; (800cdec <rxSessionRestart+0x84>)
 800cd96:	f000 fed7 	bl	800db48 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	683a      	ldr	r2, [r7, #0]
 800cda0:	6912      	ldr	r2, [r2, #16]
 800cda2:	4611      	mov	r1, r2
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdc0:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	7d9b      	ldrb	r3, [r3, #22]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	f003 031f 	and.w	r3, r3, #31
 800cdce:	b2da      	uxtb	r2, r3
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	761a      	strb	r2, [r3, #24]
}
 800cdda:	bf00      	nop
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	080126d0 	.word	0x080126d0
 800cde8:	080133a8 	.word	0x080133a8
 800cdec:	0801250c 	.word	0x0801250c
 800cdf0:	08012a2c 	.word	0x08012a2c

0800cdf4 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b088      	sub	sp, #32
 800cdf8:	af02      	add	r7, sp, #8
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
 800ce00:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d106      	bne.n	800ce16 <rxSessionAcceptFrame+0x22>
 800ce08:	4b81      	ldr	r3, [pc, #516]	; (800d010 <rxSessionAcceptFrame+0x21c>)
 800ce0a:	4a82      	ldr	r2, [pc, #520]	; (800d014 <rxSessionAcceptFrame+0x220>)
 800ce0c:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ce10:	4881      	ldr	r0, [pc, #516]	; (800d018 <rxSessionAcceptFrame+0x224>)
 800ce12:	f000 fe99 	bl	800db48 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d106      	bne.n	800ce2a <rxSessionAcceptFrame+0x36>
 800ce1c:	4b7f      	ldr	r3, [pc, #508]	; (800d01c <rxSessionAcceptFrame+0x228>)
 800ce1e:	4a7d      	ldr	r2, [pc, #500]	; (800d014 <rxSessionAcceptFrame+0x220>)
 800ce20:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800ce24:	487c      	ldr	r0, [pc, #496]	; (800d018 <rxSessionAcceptFrame+0x224>)
 800ce26:	f000 fe8f 	bl	800db48 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d106      	bne.n	800ce3e <rxSessionAcceptFrame+0x4a>
 800ce30:	4b7b      	ldr	r3, [pc, #492]	; (800d020 <rxSessionAcceptFrame+0x22c>)
 800ce32:	4a78      	ldr	r2, [pc, #480]	; (800d014 <rxSessionAcceptFrame+0x220>)
 800ce34:	f240 21f1 	movw	r1, #753	; 0x2f1
 800ce38:	4877      	ldr	r0, [pc, #476]	; (800d018 <rxSessionAcceptFrame+0x224>)
 800ce3a:	f000 fe85 	bl	800db48 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	699b      	ldr	r3, [r3, #24]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d106      	bne.n	800ce54 <rxSessionAcceptFrame+0x60>
 800ce46:	4b77      	ldr	r3, [pc, #476]	; (800d024 <rxSessionAcceptFrame+0x230>)
 800ce48:	4a72      	ldr	r2, [pc, #456]	; (800d014 <rxSessionAcceptFrame+0x220>)
 800ce4a:	f240 21f2 	movw	r1, #754	; 0x2f2
 800ce4e:	4872      	ldr	r0, [pc, #456]	; (800d018 <rxSessionAcceptFrame+0x224>)
 800ce50:	f000 fe7a 	bl	800db48 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	7b9b      	ldrb	r3, [r3, #14]
 800ce58:	2b1f      	cmp	r3, #31
 800ce5a:	d906      	bls.n	800ce6a <rxSessionAcceptFrame+0x76>
 800ce5c:	4b72      	ldr	r3, [pc, #456]	; (800d028 <rxSessionAcceptFrame+0x234>)
 800ce5e:	4a6d      	ldr	r2, [pc, #436]	; (800d014 <rxSessionAcceptFrame+0x220>)
 800ce60:	f240 21f3 	movw	r1, #755	; 0x2f3
 800ce64:	486c      	ldr	r0, [pc, #432]	; (800d018 <rxSessionAcceptFrame+0x224>)
 800ce66:	f000 fe6f 	bl	800db48 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800ce6a:	6a3b      	ldr	r3, [r7, #32]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d106      	bne.n	800ce7e <rxSessionAcceptFrame+0x8a>
 800ce70:	4b6e      	ldr	r3, [pc, #440]	; (800d02c <rxSessionAcceptFrame+0x238>)
 800ce72:	4a68      	ldr	r2, [pc, #416]	; (800d014 <rxSessionAcceptFrame+0x220>)
 800ce74:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800ce78:	4867      	ldr	r0, [pc, #412]	; (800d018 <rxSessionAcceptFrame+0x224>)
 800ce7a:	f000 fe65 	bl	800db48 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	7bdb      	ldrb	r3, [r3, #15]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d005      	beq.n	800ce92 <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8c:	68b9      	ldr	r1, [r7, #8]
 800ce8e:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	7bdb      	ldrb	r3, [r3, #15]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d005      	beq.n	800cea6 <rxSessionAcceptFrame+0xb2>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	7c1b      	ldrb	r3, [r3, #16]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d001      	beq.n	800cea6 <rxSessionAcceptFrame+0xb2>
 800cea2:	2301      	movs	r3, #1
 800cea4:	e000      	b.n	800cea8 <rxSessionAcceptFrame+0xb4>
 800cea6:	2300      	movs	r3, #0
 800cea8:	75bb      	strb	r3, [r7, #22]
 800ceaa:	7dbb      	ldrb	r3, [r7, #22]
 800ceac:	f003 0301 	and.w	r3, r3, #1
 800ceb0:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 800ceb2:	7dbb      	ldrb	r3, [r7, #22]
 800ceb4:	f083 0301 	eor.w	r3, r3, #1
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00c      	beq.n	800ced8 <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	8a98      	ldrh	r0, [r3, #20]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6959      	ldr	r1, [r3, #20]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	699b      	ldr	r3, [r3, #24]
 800ceca:	461a      	mov	r2, r3
 800cecc:	f7fe fed6 	bl	800bc7c <crcAdd>
 800ced0:	4603      	mov	r3, r0
 800ced2:	461a      	mov	r2, r3
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	695a      	ldr	r2, [r3, #20]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	699b      	ldr	r3, [r3, #24]
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	4613      	mov	r3, r2
 800cee4:	683a      	ldr	r2, [r7, #0]
 800cee6:	68b9      	ldr	r1, [r7, #8]
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f7ff fe4d 	bl	800cb88 <rxSessionWritePayload>
 800ceee:	4603      	mov	r3, r0
 800cef0:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 800cef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	da10      	bge.n	800cf1c <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 800cefa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cefe:	f113 0f03 	cmn.w	r3, #3
 800cf02:	d006      	beq.n	800cf12 <rxSessionAcceptFrame+0x11e>
 800cf04:	4b4a      	ldr	r3, [pc, #296]	; (800d030 <rxSessionAcceptFrame+0x23c>)
 800cf06:	4a43      	ldr	r2, [pc, #268]	; (800d014 <rxSessionAcceptFrame+0x220>)
 800cf08:	f240 3106 	movw	r1, #774	; 0x306
 800cf0c:	4842      	ldr	r0, [pc, #264]	; (800d018 <rxSessionAcceptFrame+0x224>)
 800cf0e:	f000 fe1b 	bl	800db48 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 800cf12:	68b9      	ldr	r1, [r7, #8]
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f7ff ff27 	bl	800cd68 <rxSessionRestart>
 800cf1a:	e072      	b.n	800d002 <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	7c1b      	ldrb	r3, [r3, #16]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d05f      	beq.n	800cfe4 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 800cf24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d006      	beq.n	800cf3a <rxSessionAcceptFrame+0x146>
 800cf2c:	4b41      	ldr	r3, [pc, #260]	; (800d034 <rxSessionAcceptFrame+0x240>)
 800cf2e:	4a39      	ldr	r2, [pc, #228]	; (800d014 <rxSessionAcceptFrame+0x220>)
 800cf30:	f240 310b 	movw	r1, #779	; 0x30b
 800cf34:	4838      	ldr	r0, [pc, #224]	; (800d018 <rxSessionAcceptFrame+0x224>)
 800cf36:	f000 fe07 	bl	800db48 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 800cf3a:	7dbb      	ldrb	r3, [r7, #22]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d103      	bne.n	800cf48 <rxSessionAcceptFrame+0x154>
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	8a9b      	ldrh	r3, [r3, #20]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d148      	bne.n	800cfda <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 800cf48:	2301      	movs	r3, #1
 800cf4a:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800cf4c:	6a3b      	ldr	r3, [r7, #32]
 800cf4e:	4619      	mov	r1, r3
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7ff fd95 	bl	800ca80 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	6a39      	ldr	r1, [r7, #32]
 800cf5e:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	68da      	ldr	r2, [r3, #12]
 800cf66:	6a3b      	ldr	r3, [r7, #32]
 800cf68:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	691a      	ldr	r2, [r3, #16]
 800cf6e:	6a3b      	ldr	r3, [r7, #32]
 800cf70:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	689a      	ldr	r2, [r3, #8]
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d206      	bcs.n	800cf8c <rxSessionAcceptFrame+0x198>
 800cf7e:	4b2e      	ldr	r3, [pc, #184]	; (800d038 <rxSessionAcceptFrame+0x244>)
 800cf80:	4a24      	ldr	r2, [pc, #144]	; (800d014 <rxSessionAcceptFrame+0x220>)
 800cf82:	f240 3115 	movw	r1, #789	; 0x315
 800cf86:	4824      	ldr	r0, [pc, #144]	; (800d018 <rxSessionAcceptFrame+0x224>)
 800cf88:	f000 fdde 	bl	800db48 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	689a      	ldr	r2, [r3, #8]
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 800cf98:	7dbb      	ldrb	r3, [r7, #22]
 800cf9a:	f083 0301 	eor.w	r3, r3, #1
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d017      	beq.n	800cfd4 <rxSessionAcceptFrame+0x1e0>
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d814      	bhi.n	800cfd4 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 800cfaa:	6a3b      	ldr	r3, [r7, #32]
 800cfac:	691a      	ldr	r2, [r3, #16]
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	f1c3 0302 	rsb	r3, r3, #2
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d206      	bcs.n	800cfc6 <rxSessionAcceptFrame+0x1d2>
 800cfb8:	4b20      	ldr	r3, [pc, #128]	; (800d03c <rxSessionAcceptFrame+0x248>)
 800cfba:	4a16      	ldr	r2, [pc, #88]	; (800d014 <rxSessionAcceptFrame+0x220>)
 800cfbc:	f240 3119 	movw	r1, #793	; 0x319
 800cfc0:	4815      	ldr	r0, [pc, #84]	; (800d018 <rxSessionAcceptFrame+0x224>)
 800cfc2:	f000 fdc1 	bl	800db48 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 800cfc6:	6a3b      	ldr	r3, [r7, #32]
 800cfc8:	691a      	ldr	r2, [r3, #16]
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	4413      	add	r3, r2
 800cfce:	1e9a      	subs	r2, r3, #2
 800cfd0:	6a3b      	ldr	r3, [r7, #32]
 800cfd2:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 800cfda:	68b9      	ldr	r1, [r7, #8]
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f7ff fec3 	bl	800cd68 <rxSessionRestart>
 800cfe2:	e00e      	b.n	800d002 <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	7e1b      	ldrb	r3, [r3, #24]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	bf14      	ite	ne
 800cfec:	2301      	movne	r3, #1
 800cfee:	2300      	moveq	r3, #0
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	f083 0301 	eor.w	r3, r3, #1
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	f003 0301 	and.w	r3, r3, #1
 800cffc:	b2da      	uxtb	r2, r3
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	761a      	strb	r2, [r3, #24]
    }
    return out;
 800d002:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d006:	4618      	mov	r0, r3
 800d008:	3718      	adds	r7, #24
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	080126d0 	.word	0x080126d0
 800d014:	080133bc 	.word	0x080133bc
 800d018:	0801250c 	.word	0x0801250c
 800d01c:	08012a2c 	.word	0x08012a2c
 800d020:	08012964 	.word	0x08012964
 800d024:	080129c0 	.word	0x080129c0
 800d028:	08012b00 	.word	0x08012b00
 800d02c:	080129e0 	.word	0x080129e0
 800d030:	08012b28 	.word	0x08012b28
 800d034:	08012b34 	.word	0x08012b34
 800d038:	08012b40 	.word	0x08012b40
 800d03c:	08012b70 	.word	0x08012b70

0800d040 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_transport_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 800d040:	b5b0      	push	{r4, r5, r7, lr}
 800d042:	b088      	sub	sp, #32
 800d044:	af02      	add	r7, sp, #8
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
 800d04c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d106      	bne.n	800d062 <rxSessionUpdate+0x22>
 800d054:	4b6d      	ldr	r3, [pc, #436]	; (800d20c <rxSessionUpdate+0x1cc>)
 800d056:	4a6e      	ldr	r2, [pc, #440]	; (800d210 <rxSessionUpdate+0x1d0>)
 800d058:	f240 3137 	movw	r1, #823	; 0x337
 800d05c:	486d      	ldr	r0, [pc, #436]	; (800d214 <rxSessionUpdate+0x1d4>)
 800d05e:	f000 fd73 	bl	800db48 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d106      	bne.n	800d076 <rxSessionUpdate+0x36>
 800d068:	4b6b      	ldr	r3, [pc, #428]	; (800d218 <rxSessionUpdate+0x1d8>)
 800d06a:	4a69      	ldr	r2, [pc, #420]	; (800d210 <rxSessionUpdate+0x1d0>)
 800d06c:	f44f 714e 	mov.w	r1, #824	; 0x338
 800d070:	4868      	ldr	r0, [pc, #416]	; (800d214 <rxSessionUpdate+0x1d4>)
 800d072:	f000 fd69 	bl	800db48 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d106      	bne.n	800d08a <rxSessionUpdate+0x4a>
 800d07c:	4b67      	ldr	r3, [pc, #412]	; (800d21c <rxSessionUpdate+0x1dc>)
 800d07e:	4a64      	ldr	r2, [pc, #400]	; (800d210 <rxSessionUpdate+0x1d0>)
 800d080:	f240 3139 	movw	r1, #825	; 0x339
 800d084:	4863      	ldr	r0, [pc, #396]	; (800d214 <rxSessionUpdate+0x1d4>)
 800d086:	f000 fd5f 	bl	800db48 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800d08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d106      	bne.n	800d09e <rxSessionUpdate+0x5e>
 800d090:	4b63      	ldr	r3, [pc, #396]	; (800d220 <rxSessionUpdate+0x1e0>)
 800d092:	4a5f      	ldr	r2, [pc, #380]	; (800d210 <rxSessionUpdate+0x1d0>)
 800d094:	f240 313a 	movw	r1, #826	; 0x33a
 800d098:	485e      	ldr	r0, [pc, #376]	; (800d214 <rxSessionUpdate+0x1d4>)
 800d09a:	f000 fd55 	bl	800db48 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	7d9b      	ldrb	r3, [r3, #22]
 800d0a2:	2b1f      	cmp	r3, #31
 800d0a4:	d906      	bls.n	800d0b4 <rxSessionUpdate+0x74>
 800d0a6:	4b5f      	ldr	r3, [pc, #380]	; (800d224 <rxSessionUpdate+0x1e4>)
 800d0a8:	4a59      	ldr	r2, [pc, #356]	; (800d210 <rxSessionUpdate+0x1d0>)
 800d0aa:	f240 313b 	movw	r1, #827	; 0x33b
 800d0ae:	4859      	ldr	r0, [pc, #356]	; (800d214 <rxSessionUpdate+0x1d4>)
 800d0b0:	f000 fd4a 	bl	800db48 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	7b9b      	ldrb	r3, [r3, #14]
 800d0b8:	2b1f      	cmp	r3, #31
 800d0ba:	d906      	bls.n	800d0ca <rxSessionUpdate+0x8a>
 800d0bc:	4b5a      	ldr	r3, [pc, #360]	; (800d228 <rxSessionUpdate+0x1e8>)
 800d0be:	4a54      	ldr	r2, [pc, #336]	; (800d210 <rxSessionUpdate+0x1d0>)
 800d0c0:	f44f 714f 	mov.w	r1, #828	; 0x33c
 800d0c4:	4853      	ldr	r0, [pc, #332]	; (800d214 <rxSessionUpdate+0x1d4>)
 800d0c6:	f000 fd3f 	bl	800db48 <__assert_func>

    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d0:	68b9      	ldr	r1, [r7, #8]
 800d0d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0d6:	4290      	cmp	r0, r2
 800d0d8:	eb71 0303 	sbcs.w	r3, r1, r3
 800d0dc:	d20f      	bcs.n	800d0fe <rxSessionUpdate+0xbe>
                               ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ea:	1a84      	subs	r4, r0, r2
 800d0ec:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800d0f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d0f4:	42a2      	cmp	r2, r4
 800d0f6:	41ab      	sbcs	r3, r5
 800d0f8:	d201      	bcs.n	800d0fe <rxSessionUpdate+0xbe>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e000      	b.n	800d100 <rxSessionUpdate+0xc0>
 800d0fe:	2300      	movs	r3, #0
 800d100:	75bb      	strb	r3, [r7, #22]
 800d102:	7dbb      	ldrb	r3, [r7, #22]
 800d104:	f003 0301 	and.w	r3, r3, #1
 800d108:	75bb      	strb	r3, [r7, #22]

    const bool not_previous_tid = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	7d9a      	ldrb	r2, [r3, #22]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	7b9b      	ldrb	r3, [r3, #14]
 800d112:	4619      	mov	r1, r3
 800d114:	4610      	mov	r0, r2
 800d116:	f7ff fcf9 	bl	800cb0c <rxComputeTransferIDDifference>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	bf8c      	ite	hi
 800d120:	2301      	movhi	r3, #1
 800d122:	2300      	movls	r3, #0
 800d124:	757b      	strb	r3, [r7, #21]

    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800d126:	7dbb      	ldrb	r3, [r7, #22]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d10b      	bne.n	800d144 <rxSessionUpdate+0x104>
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	7ddb      	ldrb	r3, [r3, #23]
 800d130:	78fa      	ldrb	r2, [r7, #3]
 800d132:	429a      	cmp	r2, r3
 800d134:	d108      	bne.n	800d148 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	7bdb      	ldrb	r3, [r3, #15]
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d004      	beq.n	800d148 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 800d13e:	7d7b      	ldrb	r3, [r7, #21]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d001      	beq.n	800d148 <rxSessionUpdate+0x108>
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800d144:	2301      	movs	r3, #1
 800d146:	e000      	b.n	800d14a <rxSessionUpdate+0x10a>
 800d148:	2300      	movs	r3, #0
 800d14a:	753b      	strb	r3, [r7, #20]
 800d14c:	7d3b      	ldrb	r3, [r7, #20]
 800d14e:	f003 0301 	and.w	r3, r3, #1
 800d152:	753b      	strb	r3, [r7, #20]

    if (need_restart)
 800d154:	7d3b      	ldrb	r3, [r7, #20]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d013      	beq.n	800d182 <rxSessionUpdate+0x142>
    {
        rxs->total_payload_size        = 0U;
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	2200      	movs	r2, #0
 800d15e:	609a      	str	r2, [r3, #8]
        rxs->payload_size              = 0U;
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	2200      	movs	r2, #0
 800d164:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc            = CRC_INITIAL;
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d16c:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id               = frame->transfer_id;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	7b9a      	ldrb	r2, [r3, #14]
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	759a      	strb	r2, [r3, #22]
        rxs->toggle                    = INITIAL_TOGGLE_STATE;
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	2201      	movs	r2, #1
 800d17a:	761a      	strb	r2, [r3, #24]
        rxs->redundant_transport_index = redundant_transport_index;
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	78fa      	ldrb	r2, [r7, #3]
 800d180:	75da      	strb	r2, [r3, #23]
    }

    int8_t out = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	75fb      	strb	r3, [r7, #23]
    if (need_restart && (!frame->start_of_transfer))
 800d186:	7d3b      	ldrb	r3, [r7, #20]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00b      	beq.n	800d1a4 <rxSessionUpdate+0x164>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	7bdb      	ldrb	r3, [r3, #15]
 800d190:	f083 0301 	eor.w	r3, r3, #1
 800d194:	b2db      	uxtb	r3, r3
 800d196:	2b00      	cmp	r3, #0
 800d198:	d004      	beq.n	800d1a4 <rxSessionUpdate+0x164>
    {
        rxSessionRestart(ins, rxs);  // SOT-miss, no point going further.
 800d19a:	68b9      	ldr	r1, [r7, #8]
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f7ff fde3 	bl	800cd68 <rxSessionRestart>
 800d1a2:	e02c      	b.n	800d1fe <rxSessionUpdate+0x1be>
    }
    else
    {
        const bool correct_transport = (rxs->redundant_transport_index == redundant_transport_index);
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	7ddb      	ldrb	r3, [r3, #23]
 800d1a8:	78fa      	ldrb	r2, [r7, #3]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	bf0c      	ite	eq
 800d1ae:	2301      	moveq	r3, #1
 800d1b0:	2300      	movne	r3, #0
 800d1b2:	74fb      	strb	r3, [r7, #19]
        const bool correct_toggle    = (frame->toggle == rxs->toggle);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	7c5a      	ldrb	r2, [r3, #17]
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	7e1b      	ldrb	r3, [r3, #24]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	bf0c      	ite	eq
 800d1c0:	2301      	moveq	r3, #1
 800d1c2:	2300      	movne	r3, #0
 800d1c4:	74bb      	strb	r3, [r7, #18]
        const bool correct_tid       = (frame->transfer_id == rxs->transfer_id);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	7b9a      	ldrb	r2, [r3, #14]
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	7d9b      	ldrb	r3, [r3, #22]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	bf0c      	ite	eq
 800d1d2:	2301      	moveq	r3, #1
 800d1d4:	2300      	movne	r3, #0
 800d1d6:	747b      	strb	r3, [r7, #17]
        if (correct_transport && correct_toggle && correct_tid)
 800d1d8:	7cfb      	ldrb	r3, [r7, #19]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00f      	beq.n	800d1fe <rxSessionUpdate+0x1be>
 800d1de:	7cbb      	ldrb	r3, [r7, #18]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d00c      	beq.n	800d1fe <rxSessionUpdate+0x1be>
 800d1e4:	7c7b      	ldrb	r3, [r7, #17]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d009      	beq.n	800d1fe <rxSessionUpdate+0x1be>
        {
            out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 800d1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ec:	9300      	str	r3, [sp, #0]
 800d1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	68b9      	ldr	r1, [r7, #8]
 800d1f4:	68f8      	ldr	r0, [r7, #12]
 800d1f6:	f7ff fdfd 	bl	800cdf4 <rxSessionAcceptFrame>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	75fb      	strb	r3, [r7, #23]
        }
    }
    return out;
 800d1fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d202:	4618      	mov	r0, r3
 800d204:	3718      	adds	r7, #24
 800d206:	46bd      	mov	sp, r7
 800d208:	bdb0      	pop	{r4, r5, r7, pc}
 800d20a:	bf00      	nop
 800d20c:	080126d0 	.word	0x080126d0
 800d210:	08013378 	.word	0x08013378
 800d214:	0801250c 	.word	0x0801250c
 800d218:	08012a2c 	.word	0x08012a2c
 800d21c:	08012964 	.word	0x08012964
 800d220:	080129e0 	.word	0x080129e0
 800d224:	08012ba8 	.word	0x08012ba8
 800d228:	08012b00 	.word	0x08012b00

0800d22c <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_transport_index,
                                    CanardRxTransfer* const     out_transfer)
{
 800d22c:	b5b0      	push	{r4, r5, r7, lr}
 800d22e:	b08c      	sub	sp, #48	; 0x30
 800d230:	af04      	add	r7, sp, #16
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
 800d238:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d106      	bne.n	800d24e <rxAcceptFrame+0x22>
 800d240:	4b85      	ldr	r3, [pc, #532]	; (800d458 <rxAcceptFrame+0x22c>)
 800d242:	4a86      	ldr	r2, [pc, #536]	; (800d45c <rxAcceptFrame+0x230>)
 800d244:	f44f 715a 	mov.w	r1, #872	; 0x368
 800d248:	4885      	ldr	r0, [pc, #532]	; (800d460 <rxAcceptFrame+0x234>)
 800d24a:	f000 fc7d 	bl	800db48 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d106      	bne.n	800d262 <rxAcceptFrame+0x36>
 800d254:	4b83      	ldr	r3, [pc, #524]	; (800d464 <rxAcceptFrame+0x238>)
 800d256:	4a81      	ldr	r2, [pc, #516]	; (800d45c <rxAcceptFrame+0x230>)
 800d258:	f240 3169 	movw	r1, #873	; 0x369
 800d25c:	4880      	ldr	r0, [pc, #512]	; (800d460 <rxAcceptFrame+0x234>)
 800d25e:	f000 fc73 	bl	800db48 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	8b9a      	ldrh	r2, [r3, #28]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	895b      	ldrh	r3, [r3, #10]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d006      	beq.n	800d27c <rxAcceptFrame+0x50>
 800d26e:	4b7e      	ldr	r3, [pc, #504]	; (800d468 <rxAcceptFrame+0x23c>)
 800d270:	4a7a      	ldr	r2, [pc, #488]	; (800d45c <rxAcceptFrame+0x230>)
 800d272:	f240 316a 	movw	r1, #874	; 0x36a
 800d276:	487a      	ldr	r0, [pc, #488]	; (800d460 <rxAcceptFrame+0x234>)
 800d278:	f000 fc66 	bl	800db48 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d106      	bne.n	800d290 <rxAcceptFrame+0x64>
 800d282:	4b7a      	ldr	r3, [pc, #488]	; (800d46c <rxAcceptFrame+0x240>)
 800d284:	4a75      	ldr	r2, [pc, #468]	; (800d45c <rxAcceptFrame+0x230>)
 800d286:	f240 316b 	movw	r1, #875	; 0x36b
 800d28a:	4875      	ldr	r0, [pc, #468]	; (800d460 <rxAcceptFrame+0x234>)
 800d28c:	f000 fc5c 	bl	800db48 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	699b      	ldr	r3, [r3, #24]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d106      	bne.n	800d2a6 <rxAcceptFrame+0x7a>
 800d298:	4b75      	ldr	r3, [pc, #468]	; (800d470 <rxAcceptFrame+0x244>)
 800d29a:	4a70      	ldr	r2, [pc, #448]	; (800d45c <rxAcceptFrame+0x230>)
 800d29c:	f44f 715b 	mov.w	r1, #876	; 0x36c
 800d2a0:	486f      	ldr	r0, [pc, #444]	; (800d460 <rxAcceptFrame+0x234>)
 800d2a2:	f000 fc51 	bl	800db48 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	7b9b      	ldrb	r3, [r3, #14]
 800d2aa:	2b1f      	cmp	r3, #31
 800d2ac:	d906      	bls.n	800d2bc <rxAcceptFrame+0x90>
 800d2ae:	4b71      	ldr	r3, [pc, #452]	; (800d474 <rxAcceptFrame+0x248>)
 800d2b0:	4a6a      	ldr	r2, [pc, #424]	; (800d45c <rxAcceptFrame+0x230>)
 800d2b2:	f240 316d 	movw	r1, #877	; 0x36d
 800d2b6:	486a      	ldr	r0, [pc, #424]	; (800d460 <rxAcceptFrame+0x234>)
 800d2b8:	f000 fc46 	bl	800db48 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	7b5b      	ldrb	r3, [r3, #13]
 800d2c0:	2bff      	cmp	r3, #255	; 0xff
 800d2c2:	d00c      	beq.n	800d2de <rxAcceptFrame+0xb2>
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	791a      	ldrb	r2, [r3, #4]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	7b5b      	ldrb	r3, [r3, #13]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d006      	beq.n	800d2de <rxAcceptFrame+0xb2>
 800d2d0:	4b69      	ldr	r3, [pc, #420]	; (800d478 <rxAcceptFrame+0x24c>)
 800d2d2:	4a62      	ldr	r2, [pc, #392]	; (800d45c <rxAcceptFrame+0x230>)
 800d2d4:	f240 316e 	movw	r1, #878	; 0x36e
 800d2d8:	4861      	ldr	r0, [pc, #388]	; (800d460 <rxAcceptFrame+0x234>)
 800d2da:	f000 fc35 	bl	800db48 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800d2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d106      	bne.n	800d2f2 <rxAcceptFrame+0xc6>
 800d2e4:	4b65      	ldr	r3, [pc, #404]	; (800d47c <rxAcceptFrame+0x250>)
 800d2e6:	4a5d      	ldr	r2, [pc, #372]	; (800d45c <rxAcceptFrame+0x230>)
 800d2e8:	f240 316f 	movw	r1, #879	; 0x36f
 800d2ec:	485c      	ldr	r0, [pc, #368]	; (800d460 <rxAcceptFrame+0x234>)
 800d2ee:	f000 fc2b 	bl	800db48 <__assert_func>

    int8_t out = 0;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	7b1b      	ldrb	r3, [r3, #12]
 800d2fa:	b25b      	sxtb	r3, r3
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	db6c      	blt.n	800d3da <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	7b1b      	ldrb	r3, [r3, #12]
 800d304:	68ba      	ldr	r2, [r7, #8]
 800d306:	3308      	adds	r3, #8
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	4413      	add	r3, r2
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d134      	bne.n	800d37c <rxAcceptFrame+0x150>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	7bdb      	ldrb	r3, [r3, #15]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d030      	beq.n	800d37c <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	2120      	movs	r1, #32
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	4798      	blx	r3
 800d324:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	7b1b      	ldrb	r3, [r3, #12]
 800d32a:	68ba      	ldr	r2, [r7, #8]
 800d32c:	3308      	adds	r3, #8
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	4413      	add	r3, r2
 800d332:	693a      	ldr	r2, [r7, #16]
 800d334:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d01d      	beq.n	800d378 <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec   = frame->timestamp_usec;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d342:	6939      	ldr	r1, [r7, #16]
 800d344:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size        = 0U;
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	2200      	movs	r2, #0
 800d34c:	609a      	str	r2, [r3, #8]
                rxs->payload_size              = 0U;
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	2200      	movs	r2, #0
 800d352:	60da      	str	r2, [r3, #12]
                rxs->payload                   = NULL;
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	2200      	movs	r2, #0
 800d358:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc            = CRC_INITIAL;
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d360:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id               = frame->transfer_id;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	7b9a      	ldrb	r2, [r3, #14]
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	759a      	strb	r2, [r3, #22]
                rxs->redundant_transport_index = redundant_transport_index;
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	78fa      	ldrb	r2, [r7, #3]
 800d36e:	75da      	strb	r2, [r3, #23]
                rxs->toggle                    = INITIAL_TOGGLE_STATE;
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	2201      	movs	r2, #1
 800d374:	761a      	strb	r2, [r3, #24]
 800d376:	e001      	b.n	800d37c <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 800d378:	23fd      	movs	r3, #253	; 0xfd
 800d37a:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	7b1b      	ldrb	r3, [r3, #12]
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	3308      	adds	r3, #8
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4413      	add	r3, r2
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d05e      	beq.n	800d44c <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 800d38e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d006      	beq.n	800d3a4 <rxAcceptFrame+0x178>
 800d396:	4b3a      	ldr	r3, [pc, #232]	; (800d480 <rxAcceptFrame+0x254>)
 800d398:	4a30      	ldr	r2, [pc, #192]	; (800d45c <rxAcceptFrame+0x230>)
 800d39a:	f240 318e 	movw	r1, #910	; 0x38e
 800d39e:	4830      	ldr	r0, [pc, #192]	; (800d460 <rxAcceptFrame+0x234>)
 800d3a0:	f000 fbd2 	bl	800db48 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	7b1b      	ldrb	r3, [r3, #12]
 800d3a8:	68ba      	ldr	r2, [r7, #8]
 800d3aa:	3308      	adds	r3, #8
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	4413      	add	r3, r2
 800d3b0:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d3b8:	68b9      	ldr	r1, [r7, #8]
 800d3ba:	6989      	ldr	r1, [r1, #24]
 800d3bc:	78fd      	ldrb	r5, [r7, #3]
 800d3be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3c0:	9003      	str	r0, [sp, #12]
 800d3c2:	9102      	str	r1, [sp, #8]
 800d3c4:	e9cd 2300 	strd	r2, r3, [sp]
 800d3c8:	462b      	mov	r3, r5
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f7ff fe36 	bl	800d040 <rxSessionUpdate>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	77fb      	strb	r3, [r7, #31]
 800d3d8:	e038      	b.n	800d44c <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	7b1b      	ldrb	r3, [r3, #12]
 800d3de:	2bff      	cmp	r3, #255	; 0xff
 800d3e0:	d006      	beq.n	800d3f0 <rxAcceptFrame+0x1c4>
 800d3e2:	4b28      	ldr	r3, [pc, #160]	; (800d484 <rxAcceptFrame+0x258>)
 800d3e4:	4a1d      	ldr	r2, [pc, #116]	; (800d45c <rxAcceptFrame+0x230>)
 800d3e6:	f240 319a 	movw	r1, #922	; 0x39a
 800d3ea:	481d      	ldr	r0, [pc, #116]	; (800d460 <rxAcceptFrame+0x234>)
 800d3ec:	f000 fbac 	bl	800db48 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	695a      	ldr	r2, [r3, #20]
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	bf28      	it	cs
 800d3fc:	4613      	movcs	r3, r2
 800d3fe:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	69b9      	ldr	r1, [r7, #24]
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	4798      	blx	r3
 800d40a:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d01a      	beq.n	800d448 <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800d412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d414:	4619      	mov	r1, r3
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7ff fb32 	bl	800ca80 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d422:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d424:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 800d428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42a:	69ba      	ldr	r2, [r7, #24]
 800d42c:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 800d42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d430:	697a      	ldr	r2, [r7, #20]
 800d432:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	699b      	ldr	r3, [r3, #24]
 800d438:	69ba      	ldr	r2, [r7, #24]
 800d43a:	4619      	mov	r1, r3
 800d43c:	6978      	ldr	r0, [r7, #20]
 800d43e:	f001 fd0a 	bl	800ee56 <memcpy>
            out = 1;
 800d442:	2301      	movs	r3, #1
 800d444:	77fb      	strb	r3, [r7, #31]
 800d446:	e001      	b.n	800d44c <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 800d448:	23fd      	movs	r3, #253	; 0xfd
 800d44a:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800d44c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3720      	adds	r7, #32
 800d454:	46bd      	mov	sp, r7
 800d456:	bdb0      	pop	{r4, r5, r7, pc}
 800d458:	080126d0 	.word	0x080126d0
 800d45c:	08013368 	.word	0x08013368
 800d460:	0801250c 	.word	0x0801250c
 800d464:	08012bd0 	.word	0x08012bd0
 800d468:	08012bec 	.word	0x08012bec
 800d46c:	08012964 	.word	0x08012964
 800d470:	080129c0 	.word	0x080129c0
 800d474:	08012b00 	.word	0x08012b00
 800d478:	08012c14 	.word	0x08012c14
 800d47c:	080129e0 	.word	0x080129e0
 800d480:	08012c6c 	.word	0x08012c6c
 800d484:	08012c78 	.word	0x08012c78

0800d488 <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	881b      	ldrh	r3, [r3, #0]
 800d496:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) node)->port_id;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	8b9b      	ldrh	r3, [r3, #28]
 800d49c:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 800d49e:	89fa      	ldrh	r2, [r7, #14]
 800d4a0:	89bb      	ldrh	r3, [r7, #12]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d00a      	beq.n	800d4bc <rxSubscriptionPredicateOnPortID+0x34>
 800d4a6:	89fa      	ldrh	r2, [r7, #14]
 800d4a8:	89bb      	ldrh	r3, [r7, #12]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	bf8c      	ite	hi
 800d4ae:	2301      	movhi	r3, #1
 800d4b0:	2300      	movls	r3, #0
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	4b05      	ldr	r3, [pc, #20]	; (800d4cc <rxSubscriptionPredicateOnPortID+0x44>)
 800d4b8:	569b      	ldrsb	r3, [r3, r2]
 800d4ba:	e000      	b.n	800d4be <rxSubscriptionPredicateOnPortID+0x36>
 800d4bc:	2300      	movs	r3, #0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3714      	adds	r7, #20
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop
 800d4cc:	08013354 	.word	0x08013354

0800d4d0 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	331c      	adds	r3, #28
 800d4de:	6839      	ldr	r1, [r7, #0]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7ff ffd1 	bl	800d488 <rxSubscriptionPredicateOnPortID>
 800d4e6:	4603      	mov	r3, r0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3708      	adds	r7, #8
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 800d4f0:	b5b0      	push	{r4, r5, r7, lr}
 800d4f2:	b08c      	sub	sp, #48	; 0x30
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d106      	bne.n	800d510 <canardInit+0x20>
 800d502:	4b16      	ldr	r3, [pc, #88]	; (800d55c <canardInit+0x6c>)
 800d504:	4a16      	ldr	r2, [pc, #88]	; (800d560 <canardInit+0x70>)
 800d506:	f240 31d6 	movw	r1, #982	; 0x3d6
 800d50a:	4816      	ldr	r0, [pc, #88]	; (800d564 <canardInit+0x74>)
 800d50c:	f000 fb1c 	bl	800db48 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d106      	bne.n	800d524 <canardInit+0x34>
 800d516:	4b14      	ldr	r3, [pc, #80]	; (800d568 <canardInit+0x78>)
 800d518:	4a11      	ldr	r2, [pc, #68]	; (800d560 <canardInit+0x70>)
 800d51a:	f240 31d7 	movw	r1, #983	; 0x3d7
 800d51e:	4811      	ldr	r0, [pc, #68]	; (800d564 <canardInit+0x74>)
 800d520:	f000 fb12 	bl	800db48 <__assert_func>
    const CanardInstance out = {
 800d524:	2300      	movs	r3, #0
 800d526:	617b      	str	r3, [r7, #20]
 800d528:	23ff      	movs	r3, #255	; 0xff
 800d52a:	763b      	strb	r3, [r7, #24]
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	61fb      	str	r3, [r7, #28]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	623b      	str	r3, [r7, #32]
 800d534:	2300      	movs	r3, #0
 800d536:	627b      	str	r3, [r7, #36]	; 0x24
 800d538:	2300      	movs	r3, #0
 800d53a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d53c:	2300      	movs	r3, #0
 800d53e:	62fb      	str	r3, [r7, #44]	; 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	461d      	mov	r5, r3
 800d544:	f107 0414 	add.w	r4, r7, #20
 800d548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d54a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d54c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d550:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	3730      	adds	r7, #48	; 0x30
 800d558:	46bd      	mov	sp, r7
 800d55a:	bdb0      	pop	{r4, r5, r7, pc}
 800d55c:	08012c98 	.word	0x08012c98
 800d560:	080131dc 	.word	0x080131dc
 800d564:	0801250c 	.word	0x0801250c
 800d568:	08012cb8 	.word	0x08012cb8

0800d56c <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 800d56c:	b4b0      	push	{r4, r5, r7}
 800d56e:	b08b      	sub	sp, #44	; 0x2c
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	617b      	str	r3, [r7, #20]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	61bb      	str	r3, [r7, #24]
 800d580:	2300      	movs	r3, #0
 800d582:	61fb      	str	r3, [r7, #28]
 800d584:	2300      	movs	r3, #0
 800d586:	623b      	str	r3, [r7, #32]
 800d588:	2300      	movs	r3, #0
 800d58a:	627b      	str	r3, [r7, #36]	; 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	461d      	mov	r5, r3
 800d590:	f107 0414 	add.w	r4, r7, #20
 800d594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d598:	6823      	ldr	r3, [r4, #0]
 800d59a:	602b      	str	r3, [r5, #0]
}
 800d59c:	68f8      	ldr	r0, [r7, #12]
 800d59e:	372c      	adds	r7, #44	; 0x2c
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bcb0      	pop	{r4, r5, r7}
 800d5a4:	4770      	bx	lr
	...

0800d5a8 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b08e      	sub	sp, #56	; 0x38
 800d5ac:	af06      	add	r7, sp, #24
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800d5b6:	f06f 0301 	mvn.w	r3, #1
 800d5ba:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d062      	beq.n	800d688 <canardTxPush+0xe0>
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d05f      	beq.n	800d688 <canardTxPush+0xe0>
 800d5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d05c      	beq.n	800d688 <canardTxPush+0xe0>
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d102      	bne.n	800d5da <canardTxPush+0x32>
 800d5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d156      	bne.n	800d688 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fe fc02 	bl	800bde8 <adjustPresentationLayerMTU>
 800d5e4:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	791a      	ldrb	r2, [r3, #4]
 800d5ea:	69bb      	ldr	r3, [r7, #24]
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5f6:	f7fe fc27 	bl	800be48 <txMakeCANID>
 800d5fa:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	db40      	blt.n	800d684 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 800d602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	429a      	cmp	r2, r3
 800d608:	d81c      	bhi.n	800d644 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800d60a:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 800d60c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d60e:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 800d610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d612:	9103      	str	r1, [sp, #12]
 800d614:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d616:	9102      	str	r1, [sp, #8]
 800d618:	9201      	str	r2, [sp, #4]
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d620:	68b9      	ldr	r1, [r7, #8]
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f7fe fdda 	bl	800c1dc <txPushSingleFrame>
 800d628:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	db2b      	blt.n	800d688 <canardTxPush+0xe0>
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	2b01      	cmp	r3, #1
 800d634:	d028      	beq.n	800d688 <canardTxPush+0xe0>
 800d636:	4b1c      	ldr	r3, [pc, #112]	; (800d6a8 <canardTxPush+0x100>)
 800d638:	4a1c      	ldr	r2, [pc, #112]	; (800d6ac <canardTxPush+0x104>)
 800d63a:	f240 4105 	movw	r1, #1029	; 0x405
 800d63e:	481c      	ldr	r0, [pc, #112]	; (800d6b0 <canardTxPush+0x108>)
 800d640:	f000 fa82 	bl	800db48 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 800d644:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 800d646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d648:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 800d64a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d64c:	9105      	str	r1, [sp, #20]
 800d64e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d650:	9104      	str	r1, [sp, #16]
 800d652:	9203      	str	r2, [sp, #12]
 800d654:	9302      	str	r3, [sp, #8]
 800d656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d65a:	e9cd 2300 	strd	r2, r3, [sp]
 800d65e:	69ba      	ldr	r2, [r7, #24]
 800d660:	68b9      	ldr	r1, [r7, #8]
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	f7fe ffd4 	bl	800c610 <txPushMultiFrame>
 800d668:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	db0b      	blt.n	800d688 <canardTxPush+0xe0>
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	2b01      	cmp	r3, #1
 800d674:	dc08      	bgt.n	800d688 <canardTxPush+0xe0>
 800d676:	4b0f      	ldr	r3, [pc, #60]	; (800d6b4 <canardTxPush+0x10c>)
 800d678:	4a0c      	ldr	r2, [pc, #48]	; (800d6ac <canardTxPush+0x104>)
 800d67a:	f240 4111 	movw	r1, #1041	; 0x411
 800d67e:	480c      	ldr	r0, [pc, #48]	; (800d6b0 <canardTxPush+0x108>)
 800d680:	f000 fa62 	bl	800db48 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d106      	bne.n	800d69c <canardTxPush+0xf4>
 800d68e:	4b0a      	ldr	r3, [pc, #40]	; (800d6b8 <canardTxPush+0x110>)
 800d690:	4a06      	ldr	r2, [pc, #24]	; (800d6ac <canardTxPush+0x104>)
 800d692:	f240 4119 	movw	r1, #1049	; 0x419
 800d696:	4806      	ldr	r0, [pc, #24]	; (800d6b0 <canardTxPush+0x108>)
 800d698:	f000 fa56 	bl	800db48 <__assert_func>
    return out;
 800d69c:	69fb      	ldr	r3, [r7, #28]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3720      	adds	r7, #32
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	08012808 	.word	0x08012808
 800d6ac:	080131e8 	.word	0x080131e8
 800d6b0:	0801250c 	.word	0x0801250c
 800d6b4:	0801294c 	.word	0x0801294c
 800d6b8:	08012cd4 	.word	0x08012cd4

0800d6bc <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d006      	beq.n	800d6dc <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) cavlFindExtremum(que->root, false);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fd ff1d 	bl	800b514 <cavlFindExtremum>
 800d6da:	60f8      	str	r0, [r7, #12]
    }
    return out;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b084      	sub	sp, #16
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
 800d6ee:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d010      	beq.n	800d71c <canardTxPop+0x36>
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00d      	beq.n	800d71c <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	330c      	adds	r3, #12
 800d708:	683a      	ldr	r2, [r7, #0]
 800d70a:	4611      	mov	r1, r2
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7fe f957 	bl	800b9c0 <cavlRemove>
        que->size--;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	1e5a      	subs	r2, r3, #1
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	609a      	str	r2, [r3, #8]
    }
    return out;
 800d71c:	68fb      	ldr	r3, [r7, #12]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
	...

0800d728 <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_transport_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b090      	sub	sp, #64	; 0x40
 800d72c:	af02      	add	r7, sp, #8
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800d734:	23fe      	movs	r3, #254	; 0xfe
 800d736:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d068      	beq.n	800d812 <canardRxAccept+0xea>
 800d740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d742:	2b00      	cmp	r3, #0
 800d744:	d065      	beq.n	800d812 <canardRxAccept+0xea>
 800d746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d062      	beq.n	800d812 <canardRxAccept+0xea>
 800d74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d754:	d25d      	bcs.n	800d812 <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800d756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d758:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d103      	bne.n	800d766 <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 800d75e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d155      	bne.n	800d812 <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 800d766:	f107 0310 	add.w	r3, r7, #16
 800d76a:	2220      	movs	r2, #32
 800d76c:	2100      	movs	r1, #0
 800d76e:	4618      	mov	r0, r3
 800d770:	f001 fa9d 	bl	800ecae <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 800d774:	f107 0310 	add.w	r3, r7, #16
 800d778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d77a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d77e:	f7ff f83b 	bl	800c7f8 <rxTryParseFrame>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d041      	beq.n	800d80c <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 800d788:	7f7b      	ldrb	r3, [r7, #29]
 800d78a:	2bff      	cmp	r3, #255	; 0xff
 800d78c:	d004      	beq.n	800d798 <canardRxAccept+0x70>
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	791a      	ldrb	r2, [r3, #4]
 800d792:	7f7b      	ldrb	r3, [r7, #29]
 800d794:	429a      	cmp	r2, r3
 800d796:	d135      	bne.n	800d804 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 800d798:	7e7b      	ldrb	r3, [r7, #25]
 800d79a:	3304      	adds	r3, #4
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	68fa      	ldr	r2, [r7, #12]
 800d7a0:	18d0      	adds	r0, r2, r3
 800d7a2:	f107 0310 	add.w	r3, r7, #16
 800d7a6:	f103 010a 	add.w	r1, r3, #10
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	4a21      	ldr	r2, [pc, #132]	; (800d834 <canardRxAccept+0x10c>)
 800d7ae:	f7fe f889 	bl	800b8c4 <cavlSearch>
 800d7b2:	6338      	str	r0, [r7, #48]	; 0x30
                                                       &model.port_id,
                                                       &rxSubscriptionPredicateOnPortID,
                                                       NULL);
                if (out_subscription != NULL)
 800d7b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d002      	beq.n	800d7c0 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 800d7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7be:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 800d7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d01a      	beq.n	800d7fc <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 800d7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c8:	8b9a      	ldrh	r2, [r3, #28]
 800d7ca:	8b7b      	ldrh	r3, [r7, #26]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d006      	beq.n	800d7de <canardRxAccept+0xb6>
 800d7d0:	4b19      	ldr	r3, [pc, #100]	; (800d838 <canardRxAccept+0x110>)
 800d7d2:	4a1a      	ldr	r2, [pc, #104]	; (800d83c <canardRxAccept+0x114>)
 800d7d4:	f240 415a 	movw	r1, #1114	; 0x45a
 800d7d8:	4819      	ldr	r0, [pc, #100]	; (800d840 <canardRxAccept+0x118>)
 800d7da:	f000 f9b5 	bl	800db48 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_transport_index, out_transfer);
 800d7de:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800d7e2:	f107 0210 	add.w	r2, r7, #16
 800d7e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f7ff fd1c 	bl	800d22c <rxAcceptFrame>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800d7fa:	e00a      	b.n	800d812 <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 800d802:	e006      	b.n	800d812 <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 800d804:	2300      	movs	r3, #0
 800d806:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d80a:	e002      	b.n	800d812 <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-UAVCAN/CAN input frame.
 800d80c:	2300      	movs	r3, #0
 800d80e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 800d812:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d816:	2b01      	cmp	r3, #1
 800d818:	dd06      	ble.n	800d828 <canardRxAccept+0x100>
 800d81a:	4b0a      	ldr	r3, [pc, #40]	; (800d844 <canardRxAccept+0x11c>)
 800d81c:	4a07      	ldr	r2, [pc, #28]	; (800d83c <canardRxAccept+0x114>)
 800d81e:	f240 416c 	movw	r1, #1132	; 0x46c
 800d822:	4807      	ldr	r0, [pc, #28]	; (800d840 <canardRxAccept+0x118>)
 800d824:	f000 f990 	bl	800db48 <__assert_func>
    return out;
 800d828:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3738      	adds	r7, #56	; 0x38
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	0800d489 	.word	0x0800d489
 800d838:	08012ce0 	.word	0x08012ce0
 800d83c:	08013344 	.word	0x08013344
 800d840:	0801250c 	.word	0x0801250c
 800d844:	08012d00 	.word	0x08012d00

0800d848 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	607b      	str	r3, [r7, #4]
 800d852:	460b      	mov	r3, r1
 800d854:	72fb      	strb	r3, [r7, #11]
 800d856:	4613      	mov	r3, r2
 800d858:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800d85a:	23fe      	movs	r3, #254	; 0xfe
 800d85c:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800d85e:	7afb      	ldrb	r3, [r7, #11]
 800d860:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d04a      	beq.n	800d8fe <canardRxSubscribe+0xb6>
 800d868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d047      	beq.n	800d8fe <canardRxSubscribe+0xb6>
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	2b02      	cmp	r3, #2
 800d872:	d844      	bhi.n	800d8fe <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 800d874:	893a      	ldrh	r2, [r7, #8]
 800d876:	7afb      	ldrb	r3, [r7, #11]
 800d878:	4619      	mov	r1, r3
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	f000 f850 	bl	800d920 <canardRxUnsubscribe>
 800d880:	4603      	mov	r3, r0
 800d882:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 800d884:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	db38      	blt.n	800d8fe <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 800d88c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d88e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d892:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 800d896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 800d89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89e:	893a      	ldrh	r2, [r7, #8]
 800d8a0:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	61bb      	str	r3, [r7, #24]
 800d8a6:	e009      	b.n	800d8bc <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 800d8a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	3308      	adds	r3, #8
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	4413      	add	r3, r2
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	61bb      	str	r3, [r7, #24]
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	2b7f      	cmp	r3, #127	; 0x7f
 800d8c0:	d9f2      	bls.n	800d8a8 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	68fa      	ldr	r2, [r7, #12]
 800d8ca:	18d0      	adds	r0, r2, r3
 800d8cc:	4b0f      	ldr	r3, [pc, #60]	; (800d90c <canardRxSubscribe+0xc4>)
 800d8ce:	4a10      	ldr	r2, [pc, #64]	; (800d910 <canardRxSubscribe+0xc8>)
 800d8d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d8d2:	f7fd fff7 	bl	800b8c4 <cavlSearch>
 800d8d6:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8da:	693a      	ldr	r2, [r7, #16]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d006      	beq.n	800d8ee <canardRxSubscribe+0xa6>
 800d8e0:	4b0c      	ldr	r3, [pc, #48]	; (800d914 <canardRxSubscribe+0xcc>)
 800d8e2:	4a0d      	ldr	r2, [pc, #52]	; (800d918 <canardRxSubscribe+0xd0>)
 800d8e4:	f44f 6192 	mov.w	r1, #1168	; 0x490
 800d8e8:	480c      	ldr	r0, [pc, #48]	; (800d91c <canardRxSubscribe+0xd4>)
 800d8ea:	f000 f92d 	bl	800db48 <__assert_func>
            out = (out > 0) ? 0 : 1;
 800d8ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	bfd4      	ite	le
 800d8f6:	2301      	movle	r3, #1
 800d8f8:	2300      	movgt	r3, #0
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800d8fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3720      	adds	r7, #32
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	0800bc25 	.word	0x0800bc25
 800d910:	0800d4d1 	.word	0x0800d4d1
 800d914:	08012d0c 	.word	0x08012d0c
 800d918:	0801340c 	.word	0x0801340c
 800d91c:	0801250c 	.word	0x0801250c

0800d920 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b088      	sub	sp, #32
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	460b      	mov	r3, r1
 800d92a:	70fb      	strb	r3, [r7, #3]
 800d92c:	4613      	mov	r3, r2
 800d92e:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800d930:	23fe      	movs	r3, #254	; 0xfe
 800d932:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800d934:	78fb      	ldrb	r3, [r7, #3]
 800d936:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d05f      	beq.n	800d9fe <canardRxUnsubscribe+0xde>
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	2b02      	cmp	r3, #2
 800d942:	d85c      	bhi.n	800d9fe <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 800d944:	883b      	ldrh	r3, [r7, #0]
 800d946:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	3304      	adds	r3, #4
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	18d0      	adds	r0, r2, r3
 800d952:	f107 010e 	add.w	r1, r7, #14
 800d956:	2300      	movs	r3, #0
 800d958:	4a2c      	ldr	r2, [pc, #176]	; (800da0c <canardRxUnsubscribe+0xec>)
 800d95a:	f7fd ffb3 	bl	800b8c4 <cavlSearch>
 800d95e:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d049      	beq.n	800d9fa <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	3304      	adds	r3, #4
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	4413      	add	r3, r2
 800d970:	693a      	ldr	r2, [r7, #16]
 800d972:	4611      	mov	r1, r2
 800d974:	4618      	mov	r0, r3
 800d976:	f7fe f823 	bl	800b9c0 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	8b9b      	ldrh	r3, [r3, #28]
 800d97e:	883a      	ldrh	r2, [r7, #0]
 800d980:	429a      	cmp	r2, r3
 800d982:	d006      	beq.n	800d992 <canardRxUnsubscribe+0x72>
 800d984:	4b22      	ldr	r3, [pc, #136]	; (800da10 <canardRxUnsubscribe+0xf0>)
 800d986:	4a23      	ldr	r2, [pc, #140]	; (800da14 <canardRxUnsubscribe+0xf4>)
 800d988:	f240 41a5 	movw	r1, #1189	; 0x4a5
 800d98c:	4822      	ldr	r0, [pc, #136]	; (800da18 <canardRxUnsubscribe+0xf8>)
 800d98e:	f000 f8db 	bl	800db48 <__assert_func>
            out = 1;
 800d992:	2301      	movs	r3, #1
 800d994:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800d996:	2300      	movs	r3, #0
 800d998:	61bb      	str	r3, [r7, #24]
 800d99a:	e02a      	b.n	800d9f2 <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	68da      	ldr	r2, [r3, #12]
 800d9a0:	6939      	ldr	r1, [r7, #16]
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	3308      	adds	r3, #8
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	440b      	add	r3, r1
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d007      	beq.n	800d9c0 <canardRxUnsubscribe+0xa0>
 800d9b0:	6939      	ldr	r1, [r7, #16]
 800d9b2:	69bb      	ldr	r3, [r7, #24]
 800d9b4:	3308      	adds	r3, #8
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	440b      	add	r3, r1
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	691b      	ldr	r3, [r3, #16]
 800d9be:	e000      	b.n	800d9c2 <canardRxUnsubscribe+0xa2>
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	68da      	ldr	r2, [r3, #12]
 800d9cc:	6939      	ldr	r1, [r7, #16]
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	3308      	adds	r3, #8
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	440b      	add	r3, r1
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	4619      	mov	r1, r3
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	4790      	blx	r2
                sub->sessions[i] = NULL;
 800d9de:	693a      	ldr	r2, [r7, #16]
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	3308      	adds	r3, #8
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	4413      	add	r3, r2
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	61bb      	str	r3, [r7, #24]
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	2b7f      	cmp	r3, #127	; 0x7f
 800d9f6:	d9d1      	bls.n	800d99c <canardRxUnsubscribe+0x7c>
 800d9f8:	e001      	b.n	800d9fe <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800d9fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800da02:	4618      	mov	r0, r3
 800da04:	3720      	adds	r7, #32
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	0800d489 	.word	0x0800d489
 800da10:	08012d2c 	.word	0x08012d2c
 800da14:	08013420 	.word	0x08013420
 800da18:	0801250c 	.word	0x0801250c

0800da1c <canardMakeFilterForSubject>:

CanardFilter canardMakeFilterForSubject(const CanardPortID subject_id)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b085      	sub	sp, #20
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	460b      	mov	r3, r1
 800da26:	807b      	strh	r3, [r7, #2]
    CanardFilter out = {0};
 800da28:	f107 0308 	add.w	r3, r7, #8
 800da2c:	2200      	movs	r2, #0
 800da2e:	601a      	str	r2, [r3, #0]
 800da30:	605a      	str	r2, [r3, #4]

    out.extended_can_id = ((uint32_t) subject_id) << OFFSET_SUBJECT_ID;
 800da32:	887b      	ldrh	r3, [r7, #2]
 800da34:	021b      	lsls	r3, r3, #8
 800da36:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_07 | (CANARD_SUBJECT_ID_MAX << OFFSET_SUBJECT_ID);
 800da38:	4b07      	ldr	r3, [pc, #28]	; (800da58 <canardMakeFilterForSubject+0x3c>)
 800da3a:	60fb      	str	r3, [r7, #12]

    return out;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	461a      	mov	r2, r3
 800da40:	f107 0308 	add.w	r3, r7, #8
 800da44:	e893 0003 	ldmia.w	r3, {r0, r1}
 800da48:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	3714      	adds	r7, #20
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr
 800da58:	021fff80 	.word	0x021fff80

0800da5c <canardMakeFilterForServices>:

    return out;
}

CanardFilter canardMakeFilterForServices(const CanardNodeID local_node_id)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	460b      	mov	r3, r1
 800da66:	70fb      	strb	r3, [r7, #3]
    CanardFilter out = {0};
 800da68:	f107 0308 	add.w	r3, r7, #8
 800da6c:	2200      	movs	r2, #0
 800da6e:	601a      	str	r2, [r3, #0]
 800da70:	605a      	str	r2, [r3, #4]

    out.extended_can_id = FLAG_SERVICE_NOT_MESSAGE | (((uint32_t) local_node_id) << OFFSET_DST_NODE_ID);
 800da72:	78fb      	ldrb	r3, [r7, #3]
 800da74:	01db      	lsls	r3, r3, #7
 800da76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800da7a:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_23 | (CANARD_NODE_ID_MAX << OFFSET_DST_NODE_ID);
 800da7c:	4b07      	ldr	r3, [pc, #28]	; (800da9c <canardMakeFilterForServices+0x40>)
 800da7e:	60fb      	str	r3, [r7, #12]

    return out;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	461a      	mov	r2, r3
 800da84:	f107 0308 	add.w	r3, r7, #8
 800da88:	e893 0003 	ldmia.w	r3, {r0, r1}
 800da8c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	3714      	adds	r7, #20
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr
 800da9c:	02803f80 	.word	0x02803f80

0800daa0 <canardConsolidateFilters>:

CanardFilter canardConsolidateFilters(const CanardFilter* a, const CanardFilter* b)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b087      	sub	sp, #28
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	60f8      	str	r0, [r7, #12]
 800daa8:	60b9      	str	r1, [r7, #8]
 800daaa:	607a      	str	r2, [r7, #4]
    CanardFilter out = {0};
 800daac:	f107 0310 	add.w	r3, r7, #16
 800dab0:	2200      	movs	r2, #0
 800dab2:	601a      	str	r2, [r3, #0]
 800dab4:	605a      	str	r2, [r3, #4]

    out.extended_mask   = a->extended_mask & b->extended_mask & ~(a->extended_can_id ^ b->extended_can_id);
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	685a      	ldr	r2, [r3, #4]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	401a      	ands	r2, r3
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	6819      	ldr	r1, [r3, #0]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	404b      	eors	r3, r1
 800daca:	43db      	mvns	r3, r3
 800dacc:	4013      	ands	r3, r2
 800dace:	617b      	str	r3, [r7, #20]
    out.extended_can_id = a->extended_can_id & out.extended_mask;
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	4013      	ands	r3, r2
 800dad8:	613b      	str	r3, [r7, #16]

    return out;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	461a      	mov	r2, r3
 800dade:	f107 0310 	add.w	r3, r7, #16
 800dae2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dae6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	371c      	adds	r7, #28
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <_ZdlPvj>:
 800daf6:	f000 b814 	b.w	800db22 <_ZdlPv>

0800dafa <_Znwj>:
 800dafa:	2801      	cmp	r0, #1
 800dafc:	bf38      	it	cc
 800dafe:	2001      	movcc	r0, #1
 800db00:	b510      	push	{r4, lr}
 800db02:	4604      	mov	r4, r0
 800db04:	4620      	mov	r0, r4
 800db06:	f000 f84f 	bl	800dba8 <malloc>
 800db0a:	b100      	cbz	r0, 800db0e <_Znwj+0x14>
 800db0c:	bd10      	pop	{r4, pc}
 800db0e:	f000 f80b 	bl	800db28 <_ZSt15get_new_handlerv>
 800db12:	b908      	cbnz	r0, 800db18 <_Znwj+0x1e>
 800db14:	f000 f810 	bl	800db38 <abort>
 800db18:	4780      	blx	r0
 800db1a:	e7f3      	b.n	800db04 <_Znwj+0xa>

0800db1c <_ZSt25__throw_bad_function_callv>:
 800db1c:	b508      	push	{r3, lr}
 800db1e:	f000 f80b 	bl	800db38 <abort>

0800db22 <_ZdlPv>:
 800db22:	f000 b849 	b.w	800dbb8 <free>
	...

0800db28 <_ZSt15get_new_handlerv>:
 800db28:	4b02      	ldr	r3, [pc, #8]	; (800db34 <_ZSt15get_new_handlerv+0xc>)
 800db2a:	6818      	ldr	r0, [r3, #0]
 800db2c:	f3bf 8f5b 	dmb	ish
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	20000464 	.word	0x20000464

0800db38 <abort>:
 800db38:	b508      	push	{r3, lr}
 800db3a:	2006      	movs	r0, #6
 800db3c:	f001 f8e8 	bl	800ed10 <raise>
 800db40:	2001      	movs	r0, #1
 800db42:	f7f6 fe6d 	bl	8004820 <_exit>
	...

0800db48 <__assert_func>:
 800db48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db4a:	4614      	mov	r4, r2
 800db4c:	461a      	mov	r2, r3
 800db4e:	4b09      	ldr	r3, [pc, #36]	; (800db74 <__assert_func+0x2c>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4605      	mov	r5, r0
 800db54:	68d8      	ldr	r0, [r3, #12]
 800db56:	b14c      	cbz	r4, 800db6c <__assert_func+0x24>
 800db58:	4b07      	ldr	r3, [pc, #28]	; (800db78 <__assert_func+0x30>)
 800db5a:	9100      	str	r1, [sp, #0]
 800db5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db60:	4906      	ldr	r1, [pc, #24]	; (800db7c <__assert_func+0x34>)
 800db62:	462b      	mov	r3, r5
 800db64:	f000 fff6 	bl	800eb54 <fiprintf>
 800db68:	f7ff ffe6 	bl	800db38 <abort>
 800db6c:	4b04      	ldr	r3, [pc, #16]	; (800db80 <__assert_func+0x38>)
 800db6e:	461c      	mov	r4, r3
 800db70:	e7f3      	b.n	800db5a <__assert_func+0x12>
 800db72:	bf00      	nop
 800db74:	20000064 	.word	0x20000064
 800db78:	08013434 	.word	0x08013434
 800db7c:	08013441 	.word	0x08013441
 800db80:	0801346f 	.word	0x0801346f

0800db84 <exit>:
 800db84:	b508      	push	{r3, lr}
 800db86:	4b06      	ldr	r3, [pc, #24]	; (800dba0 <exit+0x1c>)
 800db88:	4604      	mov	r4, r0
 800db8a:	b113      	cbz	r3, 800db92 <exit+0xe>
 800db8c:	2100      	movs	r1, #0
 800db8e:	f3af 8000 	nop.w
 800db92:	4b04      	ldr	r3, [pc, #16]	; (800dba4 <exit+0x20>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	b103      	cbz	r3, 800db9a <exit+0x16>
 800db98:	4798      	blx	r3
 800db9a:	4620      	mov	r0, r4
 800db9c:	f7f6 fe40 	bl	8004820 <_exit>
 800dba0:	00000000 	.word	0x00000000
 800dba4:	200005a8 	.word	0x200005a8

0800dba8 <malloc>:
 800dba8:	4b02      	ldr	r3, [pc, #8]	; (800dbb4 <malloc+0xc>)
 800dbaa:	4601      	mov	r1, r0
 800dbac:	6818      	ldr	r0, [r3, #0]
 800dbae:	f000 b82b 	b.w	800dc08 <_malloc_r>
 800dbb2:	bf00      	nop
 800dbb4:	20000064 	.word	0x20000064

0800dbb8 <free>:
 800dbb8:	4b02      	ldr	r3, [pc, #8]	; (800dbc4 <free+0xc>)
 800dbba:	4601      	mov	r1, r0
 800dbbc:	6818      	ldr	r0, [r3, #0]
 800dbbe:	f001 bfd9 	b.w	800fb74 <_free_r>
 800dbc2:	bf00      	nop
 800dbc4:	20000064 	.word	0x20000064

0800dbc8 <sbrk_aligned>:
 800dbc8:	b570      	push	{r4, r5, r6, lr}
 800dbca:	4e0e      	ldr	r6, [pc, #56]	; (800dc04 <sbrk_aligned+0x3c>)
 800dbcc:	460c      	mov	r4, r1
 800dbce:	6831      	ldr	r1, [r6, #0]
 800dbd0:	4605      	mov	r5, r0
 800dbd2:	b911      	cbnz	r1, 800dbda <sbrk_aligned+0x12>
 800dbd4:	f001 f8f0 	bl	800edb8 <_sbrk_r>
 800dbd8:	6030      	str	r0, [r6, #0]
 800dbda:	4621      	mov	r1, r4
 800dbdc:	4628      	mov	r0, r5
 800dbde:	f001 f8eb 	bl	800edb8 <_sbrk_r>
 800dbe2:	1c43      	adds	r3, r0, #1
 800dbe4:	d00a      	beq.n	800dbfc <sbrk_aligned+0x34>
 800dbe6:	1cc4      	adds	r4, r0, #3
 800dbe8:	f024 0403 	bic.w	r4, r4, #3
 800dbec:	42a0      	cmp	r0, r4
 800dbee:	d007      	beq.n	800dc00 <sbrk_aligned+0x38>
 800dbf0:	1a21      	subs	r1, r4, r0
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	f001 f8e0 	bl	800edb8 <_sbrk_r>
 800dbf8:	3001      	adds	r0, #1
 800dbfa:	d101      	bne.n	800dc00 <sbrk_aligned+0x38>
 800dbfc:	f04f 34ff 	mov.w	r4, #4294967295
 800dc00:	4620      	mov	r0, r4
 800dc02:	bd70      	pop	{r4, r5, r6, pc}
 800dc04:	2000046c 	.word	0x2000046c

0800dc08 <_malloc_r>:
 800dc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc0c:	1ccd      	adds	r5, r1, #3
 800dc0e:	f025 0503 	bic.w	r5, r5, #3
 800dc12:	3508      	adds	r5, #8
 800dc14:	2d0c      	cmp	r5, #12
 800dc16:	bf38      	it	cc
 800dc18:	250c      	movcc	r5, #12
 800dc1a:	2d00      	cmp	r5, #0
 800dc1c:	4607      	mov	r7, r0
 800dc1e:	db01      	blt.n	800dc24 <_malloc_r+0x1c>
 800dc20:	42a9      	cmp	r1, r5
 800dc22:	d905      	bls.n	800dc30 <_malloc_r+0x28>
 800dc24:	230c      	movs	r3, #12
 800dc26:	603b      	str	r3, [r7, #0]
 800dc28:	2600      	movs	r6, #0
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dd04 <_malloc_r+0xfc>
 800dc34:	f000 f868 	bl	800dd08 <__malloc_lock>
 800dc38:	f8d8 3000 	ldr.w	r3, [r8]
 800dc3c:	461c      	mov	r4, r3
 800dc3e:	bb5c      	cbnz	r4, 800dc98 <_malloc_r+0x90>
 800dc40:	4629      	mov	r1, r5
 800dc42:	4638      	mov	r0, r7
 800dc44:	f7ff ffc0 	bl	800dbc8 <sbrk_aligned>
 800dc48:	1c43      	adds	r3, r0, #1
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	d155      	bne.n	800dcfa <_malloc_r+0xf2>
 800dc4e:	f8d8 4000 	ldr.w	r4, [r8]
 800dc52:	4626      	mov	r6, r4
 800dc54:	2e00      	cmp	r6, #0
 800dc56:	d145      	bne.n	800dce4 <_malloc_r+0xdc>
 800dc58:	2c00      	cmp	r4, #0
 800dc5a:	d048      	beq.n	800dcee <_malloc_r+0xe6>
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	4631      	mov	r1, r6
 800dc60:	4638      	mov	r0, r7
 800dc62:	eb04 0903 	add.w	r9, r4, r3
 800dc66:	f001 f8a7 	bl	800edb8 <_sbrk_r>
 800dc6a:	4581      	cmp	r9, r0
 800dc6c:	d13f      	bne.n	800dcee <_malloc_r+0xe6>
 800dc6e:	6821      	ldr	r1, [r4, #0]
 800dc70:	1a6d      	subs	r5, r5, r1
 800dc72:	4629      	mov	r1, r5
 800dc74:	4638      	mov	r0, r7
 800dc76:	f7ff ffa7 	bl	800dbc8 <sbrk_aligned>
 800dc7a:	3001      	adds	r0, #1
 800dc7c:	d037      	beq.n	800dcee <_malloc_r+0xe6>
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	442b      	add	r3, r5
 800dc82:	6023      	str	r3, [r4, #0]
 800dc84:	f8d8 3000 	ldr.w	r3, [r8]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d038      	beq.n	800dcfe <_malloc_r+0xf6>
 800dc8c:	685a      	ldr	r2, [r3, #4]
 800dc8e:	42a2      	cmp	r2, r4
 800dc90:	d12b      	bne.n	800dcea <_malloc_r+0xe2>
 800dc92:	2200      	movs	r2, #0
 800dc94:	605a      	str	r2, [r3, #4]
 800dc96:	e00f      	b.n	800dcb8 <_malloc_r+0xb0>
 800dc98:	6822      	ldr	r2, [r4, #0]
 800dc9a:	1b52      	subs	r2, r2, r5
 800dc9c:	d41f      	bmi.n	800dcde <_malloc_r+0xd6>
 800dc9e:	2a0b      	cmp	r2, #11
 800dca0:	d917      	bls.n	800dcd2 <_malloc_r+0xca>
 800dca2:	1961      	adds	r1, r4, r5
 800dca4:	42a3      	cmp	r3, r4
 800dca6:	6025      	str	r5, [r4, #0]
 800dca8:	bf18      	it	ne
 800dcaa:	6059      	strne	r1, [r3, #4]
 800dcac:	6863      	ldr	r3, [r4, #4]
 800dcae:	bf08      	it	eq
 800dcb0:	f8c8 1000 	streq.w	r1, [r8]
 800dcb4:	5162      	str	r2, [r4, r5]
 800dcb6:	604b      	str	r3, [r1, #4]
 800dcb8:	4638      	mov	r0, r7
 800dcba:	f104 060b 	add.w	r6, r4, #11
 800dcbe:	f000 f829 	bl	800dd14 <__malloc_unlock>
 800dcc2:	f026 0607 	bic.w	r6, r6, #7
 800dcc6:	1d23      	adds	r3, r4, #4
 800dcc8:	1af2      	subs	r2, r6, r3
 800dcca:	d0ae      	beq.n	800dc2a <_malloc_r+0x22>
 800dccc:	1b9b      	subs	r3, r3, r6
 800dcce:	50a3      	str	r3, [r4, r2]
 800dcd0:	e7ab      	b.n	800dc2a <_malloc_r+0x22>
 800dcd2:	42a3      	cmp	r3, r4
 800dcd4:	6862      	ldr	r2, [r4, #4]
 800dcd6:	d1dd      	bne.n	800dc94 <_malloc_r+0x8c>
 800dcd8:	f8c8 2000 	str.w	r2, [r8]
 800dcdc:	e7ec      	b.n	800dcb8 <_malloc_r+0xb0>
 800dcde:	4623      	mov	r3, r4
 800dce0:	6864      	ldr	r4, [r4, #4]
 800dce2:	e7ac      	b.n	800dc3e <_malloc_r+0x36>
 800dce4:	4634      	mov	r4, r6
 800dce6:	6876      	ldr	r6, [r6, #4]
 800dce8:	e7b4      	b.n	800dc54 <_malloc_r+0x4c>
 800dcea:	4613      	mov	r3, r2
 800dcec:	e7cc      	b.n	800dc88 <_malloc_r+0x80>
 800dcee:	230c      	movs	r3, #12
 800dcf0:	603b      	str	r3, [r7, #0]
 800dcf2:	4638      	mov	r0, r7
 800dcf4:	f000 f80e 	bl	800dd14 <__malloc_unlock>
 800dcf8:	e797      	b.n	800dc2a <_malloc_r+0x22>
 800dcfa:	6025      	str	r5, [r4, #0]
 800dcfc:	e7dc      	b.n	800dcb8 <_malloc_r+0xb0>
 800dcfe:	605b      	str	r3, [r3, #4]
 800dd00:	deff      	udf	#255	; 0xff
 800dd02:	bf00      	nop
 800dd04:	20000468 	.word	0x20000468

0800dd08 <__malloc_lock>:
 800dd08:	4801      	ldr	r0, [pc, #4]	; (800dd10 <__malloc_lock+0x8>)
 800dd0a:	f001 b8a2 	b.w	800ee52 <__retarget_lock_acquire_recursive>
 800dd0e:	bf00      	nop
 800dd10:	200005b0 	.word	0x200005b0

0800dd14 <__malloc_unlock>:
 800dd14:	4801      	ldr	r0, [pc, #4]	; (800dd1c <__malloc_unlock+0x8>)
 800dd16:	f001 b89d 	b.w	800ee54 <__retarget_lock_release_recursive>
 800dd1a:	bf00      	nop
 800dd1c:	200005b0 	.word	0x200005b0

0800dd20 <__cvt>:
 800dd20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd24:	ec55 4b10 	vmov	r4, r5, d0
 800dd28:	2d00      	cmp	r5, #0
 800dd2a:	460e      	mov	r6, r1
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	462b      	mov	r3, r5
 800dd30:	bfbb      	ittet	lt
 800dd32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dd36:	461d      	movlt	r5, r3
 800dd38:	2300      	movge	r3, #0
 800dd3a:	232d      	movlt	r3, #45	; 0x2d
 800dd3c:	700b      	strb	r3, [r1, #0]
 800dd3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dd44:	4691      	mov	r9, r2
 800dd46:	f023 0820 	bic.w	r8, r3, #32
 800dd4a:	bfbc      	itt	lt
 800dd4c:	4622      	movlt	r2, r4
 800dd4e:	4614      	movlt	r4, r2
 800dd50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd54:	d005      	beq.n	800dd62 <__cvt+0x42>
 800dd56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dd5a:	d100      	bne.n	800dd5e <__cvt+0x3e>
 800dd5c:	3601      	adds	r6, #1
 800dd5e:	2102      	movs	r1, #2
 800dd60:	e000      	b.n	800dd64 <__cvt+0x44>
 800dd62:	2103      	movs	r1, #3
 800dd64:	ab03      	add	r3, sp, #12
 800dd66:	9301      	str	r3, [sp, #4]
 800dd68:	ab02      	add	r3, sp, #8
 800dd6a:	9300      	str	r3, [sp, #0]
 800dd6c:	ec45 4b10 	vmov	d0, r4, r5
 800dd70:	4653      	mov	r3, sl
 800dd72:	4632      	mov	r2, r6
 800dd74:	f001 f90c 	bl	800ef90 <_dtoa_r>
 800dd78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dd7c:	4607      	mov	r7, r0
 800dd7e:	d102      	bne.n	800dd86 <__cvt+0x66>
 800dd80:	f019 0f01 	tst.w	r9, #1
 800dd84:	d022      	beq.n	800ddcc <__cvt+0xac>
 800dd86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd8a:	eb07 0906 	add.w	r9, r7, r6
 800dd8e:	d110      	bne.n	800ddb2 <__cvt+0x92>
 800dd90:	783b      	ldrb	r3, [r7, #0]
 800dd92:	2b30      	cmp	r3, #48	; 0x30
 800dd94:	d10a      	bne.n	800ddac <__cvt+0x8c>
 800dd96:	2200      	movs	r2, #0
 800dd98:	2300      	movs	r3, #0
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	4629      	mov	r1, r5
 800dd9e:	f7f2 febb 	bl	8000b18 <__aeabi_dcmpeq>
 800dda2:	b918      	cbnz	r0, 800ddac <__cvt+0x8c>
 800dda4:	f1c6 0601 	rsb	r6, r6, #1
 800dda8:	f8ca 6000 	str.w	r6, [sl]
 800ddac:	f8da 3000 	ldr.w	r3, [sl]
 800ddb0:	4499      	add	r9, r3
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	4629      	mov	r1, r5
 800ddba:	f7f2 fead 	bl	8000b18 <__aeabi_dcmpeq>
 800ddbe:	b108      	cbz	r0, 800ddc4 <__cvt+0xa4>
 800ddc0:	f8cd 900c 	str.w	r9, [sp, #12]
 800ddc4:	2230      	movs	r2, #48	; 0x30
 800ddc6:	9b03      	ldr	r3, [sp, #12]
 800ddc8:	454b      	cmp	r3, r9
 800ddca:	d307      	bcc.n	800dddc <__cvt+0xbc>
 800ddcc:	9b03      	ldr	r3, [sp, #12]
 800ddce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddd0:	1bdb      	subs	r3, r3, r7
 800ddd2:	4638      	mov	r0, r7
 800ddd4:	6013      	str	r3, [r2, #0]
 800ddd6:	b004      	add	sp, #16
 800ddd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dddc:	1c59      	adds	r1, r3, #1
 800ddde:	9103      	str	r1, [sp, #12]
 800dde0:	701a      	strb	r2, [r3, #0]
 800dde2:	e7f0      	b.n	800ddc6 <__cvt+0xa6>

0800dde4 <__exponent>:
 800dde4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dde6:	4603      	mov	r3, r0
 800dde8:	2900      	cmp	r1, #0
 800ddea:	bfb8      	it	lt
 800ddec:	4249      	neglt	r1, r1
 800ddee:	f803 2b02 	strb.w	r2, [r3], #2
 800ddf2:	bfb4      	ite	lt
 800ddf4:	222d      	movlt	r2, #45	; 0x2d
 800ddf6:	222b      	movge	r2, #43	; 0x2b
 800ddf8:	2909      	cmp	r1, #9
 800ddfa:	7042      	strb	r2, [r0, #1]
 800ddfc:	dd2a      	ble.n	800de54 <__exponent+0x70>
 800ddfe:	f10d 0207 	add.w	r2, sp, #7
 800de02:	4617      	mov	r7, r2
 800de04:	260a      	movs	r6, #10
 800de06:	4694      	mov	ip, r2
 800de08:	fb91 f5f6 	sdiv	r5, r1, r6
 800de0c:	fb06 1415 	mls	r4, r6, r5, r1
 800de10:	3430      	adds	r4, #48	; 0x30
 800de12:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800de16:	460c      	mov	r4, r1
 800de18:	2c63      	cmp	r4, #99	; 0x63
 800de1a:	f102 32ff 	add.w	r2, r2, #4294967295
 800de1e:	4629      	mov	r1, r5
 800de20:	dcf1      	bgt.n	800de06 <__exponent+0x22>
 800de22:	3130      	adds	r1, #48	; 0x30
 800de24:	f1ac 0402 	sub.w	r4, ip, #2
 800de28:	f802 1c01 	strb.w	r1, [r2, #-1]
 800de2c:	1c41      	adds	r1, r0, #1
 800de2e:	4622      	mov	r2, r4
 800de30:	42ba      	cmp	r2, r7
 800de32:	d30a      	bcc.n	800de4a <__exponent+0x66>
 800de34:	f10d 0209 	add.w	r2, sp, #9
 800de38:	eba2 020c 	sub.w	r2, r2, ip
 800de3c:	42bc      	cmp	r4, r7
 800de3e:	bf88      	it	hi
 800de40:	2200      	movhi	r2, #0
 800de42:	4413      	add	r3, r2
 800de44:	1a18      	subs	r0, r3, r0
 800de46:	b003      	add	sp, #12
 800de48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de4a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800de4e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800de52:	e7ed      	b.n	800de30 <__exponent+0x4c>
 800de54:	2330      	movs	r3, #48	; 0x30
 800de56:	3130      	adds	r1, #48	; 0x30
 800de58:	7083      	strb	r3, [r0, #2]
 800de5a:	70c1      	strb	r1, [r0, #3]
 800de5c:	1d03      	adds	r3, r0, #4
 800de5e:	e7f1      	b.n	800de44 <__exponent+0x60>

0800de60 <_printf_float>:
 800de60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de64:	ed2d 8b02 	vpush	{d8}
 800de68:	b08d      	sub	sp, #52	; 0x34
 800de6a:	460c      	mov	r4, r1
 800de6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800de70:	4616      	mov	r6, r2
 800de72:	461f      	mov	r7, r3
 800de74:	4605      	mov	r5, r0
 800de76:	f000 ff53 	bl	800ed20 <_localeconv_r>
 800de7a:	f8d0 a000 	ldr.w	sl, [r0]
 800de7e:	4650      	mov	r0, sl
 800de80:	f7f2 fa1e 	bl	80002c0 <strlen>
 800de84:	2300      	movs	r3, #0
 800de86:	930a      	str	r3, [sp, #40]	; 0x28
 800de88:	6823      	ldr	r3, [r4, #0]
 800de8a:	9305      	str	r3, [sp, #20]
 800de8c:	f8d8 3000 	ldr.w	r3, [r8]
 800de90:	f894 b018 	ldrb.w	fp, [r4, #24]
 800de94:	3307      	adds	r3, #7
 800de96:	f023 0307 	bic.w	r3, r3, #7
 800de9a:	f103 0208 	add.w	r2, r3, #8
 800de9e:	f8c8 2000 	str.w	r2, [r8]
 800dea2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dea6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800deaa:	9307      	str	r3, [sp, #28]
 800deac:	f8cd 8018 	str.w	r8, [sp, #24]
 800deb0:	ee08 0a10 	vmov	s16, r0
 800deb4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800deb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800debc:	4b9e      	ldr	r3, [pc, #632]	; (800e138 <_printf_float+0x2d8>)
 800debe:	f04f 32ff 	mov.w	r2, #4294967295
 800dec2:	f7f2 fe5b 	bl	8000b7c <__aeabi_dcmpun>
 800dec6:	bb88      	cbnz	r0, 800df2c <_printf_float+0xcc>
 800dec8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800decc:	4b9a      	ldr	r3, [pc, #616]	; (800e138 <_printf_float+0x2d8>)
 800dece:	f04f 32ff 	mov.w	r2, #4294967295
 800ded2:	f7f2 fe35 	bl	8000b40 <__aeabi_dcmple>
 800ded6:	bb48      	cbnz	r0, 800df2c <_printf_float+0xcc>
 800ded8:	2200      	movs	r2, #0
 800deda:	2300      	movs	r3, #0
 800dedc:	4640      	mov	r0, r8
 800dede:	4649      	mov	r1, r9
 800dee0:	f7f2 fe24 	bl	8000b2c <__aeabi_dcmplt>
 800dee4:	b110      	cbz	r0, 800deec <_printf_float+0x8c>
 800dee6:	232d      	movs	r3, #45	; 0x2d
 800dee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800deec:	4a93      	ldr	r2, [pc, #588]	; (800e13c <_printf_float+0x2dc>)
 800deee:	4b94      	ldr	r3, [pc, #592]	; (800e140 <_printf_float+0x2e0>)
 800def0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800def4:	bf94      	ite	ls
 800def6:	4690      	movls	r8, r2
 800def8:	4698      	movhi	r8, r3
 800defa:	2303      	movs	r3, #3
 800defc:	6123      	str	r3, [r4, #16]
 800defe:	9b05      	ldr	r3, [sp, #20]
 800df00:	f023 0304 	bic.w	r3, r3, #4
 800df04:	6023      	str	r3, [r4, #0]
 800df06:	f04f 0900 	mov.w	r9, #0
 800df0a:	9700      	str	r7, [sp, #0]
 800df0c:	4633      	mov	r3, r6
 800df0e:	aa0b      	add	r2, sp, #44	; 0x2c
 800df10:	4621      	mov	r1, r4
 800df12:	4628      	mov	r0, r5
 800df14:	f000 f9da 	bl	800e2cc <_printf_common>
 800df18:	3001      	adds	r0, #1
 800df1a:	f040 8090 	bne.w	800e03e <_printf_float+0x1de>
 800df1e:	f04f 30ff 	mov.w	r0, #4294967295
 800df22:	b00d      	add	sp, #52	; 0x34
 800df24:	ecbd 8b02 	vpop	{d8}
 800df28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2c:	4642      	mov	r2, r8
 800df2e:	464b      	mov	r3, r9
 800df30:	4640      	mov	r0, r8
 800df32:	4649      	mov	r1, r9
 800df34:	f7f2 fe22 	bl	8000b7c <__aeabi_dcmpun>
 800df38:	b140      	cbz	r0, 800df4c <_printf_float+0xec>
 800df3a:	464b      	mov	r3, r9
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	bfbc      	itt	lt
 800df40:	232d      	movlt	r3, #45	; 0x2d
 800df42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800df46:	4a7f      	ldr	r2, [pc, #508]	; (800e144 <_printf_float+0x2e4>)
 800df48:	4b7f      	ldr	r3, [pc, #508]	; (800e148 <_printf_float+0x2e8>)
 800df4a:	e7d1      	b.n	800def0 <_printf_float+0x90>
 800df4c:	6863      	ldr	r3, [r4, #4]
 800df4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800df52:	9206      	str	r2, [sp, #24]
 800df54:	1c5a      	adds	r2, r3, #1
 800df56:	d13f      	bne.n	800dfd8 <_printf_float+0x178>
 800df58:	2306      	movs	r3, #6
 800df5a:	6063      	str	r3, [r4, #4]
 800df5c:	9b05      	ldr	r3, [sp, #20]
 800df5e:	6861      	ldr	r1, [r4, #4]
 800df60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800df64:	2300      	movs	r3, #0
 800df66:	9303      	str	r3, [sp, #12]
 800df68:	ab0a      	add	r3, sp, #40	; 0x28
 800df6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800df6e:	ab09      	add	r3, sp, #36	; 0x24
 800df70:	ec49 8b10 	vmov	d0, r8, r9
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	6022      	str	r2, [r4, #0]
 800df78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800df7c:	4628      	mov	r0, r5
 800df7e:	f7ff fecf 	bl	800dd20 <__cvt>
 800df82:	9b06      	ldr	r3, [sp, #24]
 800df84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df86:	2b47      	cmp	r3, #71	; 0x47
 800df88:	4680      	mov	r8, r0
 800df8a:	d108      	bne.n	800df9e <_printf_float+0x13e>
 800df8c:	1cc8      	adds	r0, r1, #3
 800df8e:	db02      	blt.n	800df96 <_printf_float+0x136>
 800df90:	6863      	ldr	r3, [r4, #4]
 800df92:	4299      	cmp	r1, r3
 800df94:	dd41      	ble.n	800e01a <_printf_float+0x1ba>
 800df96:	f1ab 0302 	sub.w	r3, fp, #2
 800df9a:	fa5f fb83 	uxtb.w	fp, r3
 800df9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dfa2:	d820      	bhi.n	800dfe6 <_printf_float+0x186>
 800dfa4:	3901      	subs	r1, #1
 800dfa6:	465a      	mov	r2, fp
 800dfa8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dfac:	9109      	str	r1, [sp, #36]	; 0x24
 800dfae:	f7ff ff19 	bl	800dde4 <__exponent>
 800dfb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfb4:	1813      	adds	r3, r2, r0
 800dfb6:	2a01      	cmp	r2, #1
 800dfb8:	4681      	mov	r9, r0
 800dfba:	6123      	str	r3, [r4, #16]
 800dfbc:	dc02      	bgt.n	800dfc4 <_printf_float+0x164>
 800dfbe:	6822      	ldr	r2, [r4, #0]
 800dfc0:	07d2      	lsls	r2, r2, #31
 800dfc2:	d501      	bpl.n	800dfc8 <_printf_float+0x168>
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	6123      	str	r3, [r4, #16]
 800dfc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d09c      	beq.n	800df0a <_printf_float+0xaa>
 800dfd0:	232d      	movs	r3, #45	; 0x2d
 800dfd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfd6:	e798      	b.n	800df0a <_printf_float+0xaa>
 800dfd8:	9a06      	ldr	r2, [sp, #24]
 800dfda:	2a47      	cmp	r2, #71	; 0x47
 800dfdc:	d1be      	bne.n	800df5c <_printf_float+0xfc>
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1bc      	bne.n	800df5c <_printf_float+0xfc>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e7b9      	b.n	800df5a <_printf_float+0xfa>
 800dfe6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dfea:	d118      	bne.n	800e01e <_printf_float+0x1be>
 800dfec:	2900      	cmp	r1, #0
 800dfee:	6863      	ldr	r3, [r4, #4]
 800dff0:	dd0b      	ble.n	800e00a <_printf_float+0x1aa>
 800dff2:	6121      	str	r1, [r4, #16]
 800dff4:	b913      	cbnz	r3, 800dffc <_printf_float+0x19c>
 800dff6:	6822      	ldr	r2, [r4, #0]
 800dff8:	07d0      	lsls	r0, r2, #31
 800dffa:	d502      	bpl.n	800e002 <_printf_float+0x1a2>
 800dffc:	3301      	adds	r3, #1
 800dffe:	440b      	add	r3, r1
 800e000:	6123      	str	r3, [r4, #16]
 800e002:	65a1      	str	r1, [r4, #88]	; 0x58
 800e004:	f04f 0900 	mov.w	r9, #0
 800e008:	e7de      	b.n	800dfc8 <_printf_float+0x168>
 800e00a:	b913      	cbnz	r3, 800e012 <_printf_float+0x1b2>
 800e00c:	6822      	ldr	r2, [r4, #0]
 800e00e:	07d2      	lsls	r2, r2, #31
 800e010:	d501      	bpl.n	800e016 <_printf_float+0x1b6>
 800e012:	3302      	adds	r3, #2
 800e014:	e7f4      	b.n	800e000 <_printf_float+0x1a0>
 800e016:	2301      	movs	r3, #1
 800e018:	e7f2      	b.n	800e000 <_printf_float+0x1a0>
 800e01a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e01e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e020:	4299      	cmp	r1, r3
 800e022:	db05      	blt.n	800e030 <_printf_float+0x1d0>
 800e024:	6823      	ldr	r3, [r4, #0]
 800e026:	6121      	str	r1, [r4, #16]
 800e028:	07d8      	lsls	r0, r3, #31
 800e02a:	d5ea      	bpl.n	800e002 <_printf_float+0x1a2>
 800e02c:	1c4b      	adds	r3, r1, #1
 800e02e:	e7e7      	b.n	800e000 <_printf_float+0x1a0>
 800e030:	2900      	cmp	r1, #0
 800e032:	bfd4      	ite	le
 800e034:	f1c1 0202 	rsble	r2, r1, #2
 800e038:	2201      	movgt	r2, #1
 800e03a:	4413      	add	r3, r2
 800e03c:	e7e0      	b.n	800e000 <_printf_float+0x1a0>
 800e03e:	6823      	ldr	r3, [r4, #0]
 800e040:	055a      	lsls	r2, r3, #21
 800e042:	d407      	bmi.n	800e054 <_printf_float+0x1f4>
 800e044:	6923      	ldr	r3, [r4, #16]
 800e046:	4642      	mov	r2, r8
 800e048:	4631      	mov	r1, r6
 800e04a:	4628      	mov	r0, r5
 800e04c:	47b8      	blx	r7
 800e04e:	3001      	adds	r0, #1
 800e050:	d12c      	bne.n	800e0ac <_printf_float+0x24c>
 800e052:	e764      	b.n	800df1e <_printf_float+0xbe>
 800e054:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e058:	f240 80e0 	bls.w	800e21c <_printf_float+0x3bc>
 800e05c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e060:	2200      	movs	r2, #0
 800e062:	2300      	movs	r3, #0
 800e064:	f7f2 fd58 	bl	8000b18 <__aeabi_dcmpeq>
 800e068:	2800      	cmp	r0, #0
 800e06a:	d034      	beq.n	800e0d6 <_printf_float+0x276>
 800e06c:	4a37      	ldr	r2, [pc, #220]	; (800e14c <_printf_float+0x2ec>)
 800e06e:	2301      	movs	r3, #1
 800e070:	4631      	mov	r1, r6
 800e072:	4628      	mov	r0, r5
 800e074:	47b8      	blx	r7
 800e076:	3001      	adds	r0, #1
 800e078:	f43f af51 	beq.w	800df1e <_printf_float+0xbe>
 800e07c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e080:	429a      	cmp	r2, r3
 800e082:	db02      	blt.n	800e08a <_printf_float+0x22a>
 800e084:	6823      	ldr	r3, [r4, #0]
 800e086:	07d8      	lsls	r0, r3, #31
 800e088:	d510      	bpl.n	800e0ac <_printf_float+0x24c>
 800e08a:	ee18 3a10 	vmov	r3, s16
 800e08e:	4652      	mov	r2, sl
 800e090:	4631      	mov	r1, r6
 800e092:	4628      	mov	r0, r5
 800e094:	47b8      	blx	r7
 800e096:	3001      	adds	r0, #1
 800e098:	f43f af41 	beq.w	800df1e <_printf_float+0xbe>
 800e09c:	f04f 0800 	mov.w	r8, #0
 800e0a0:	f104 091a 	add.w	r9, r4, #26
 800e0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	4543      	cmp	r3, r8
 800e0aa:	dc09      	bgt.n	800e0c0 <_printf_float+0x260>
 800e0ac:	6823      	ldr	r3, [r4, #0]
 800e0ae:	079b      	lsls	r3, r3, #30
 800e0b0:	f100 8107 	bmi.w	800e2c2 <_printf_float+0x462>
 800e0b4:	68e0      	ldr	r0, [r4, #12]
 800e0b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0b8:	4298      	cmp	r0, r3
 800e0ba:	bfb8      	it	lt
 800e0bc:	4618      	movlt	r0, r3
 800e0be:	e730      	b.n	800df22 <_printf_float+0xc2>
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	464a      	mov	r2, r9
 800e0c4:	4631      	mov	r1, r6
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	47b8      	blx	r7
 800e0ca:	3001      	adds	r0, #1
 800e0cc:	f43f af27 	beq.w	800df1e <_printf_float+0xbe>
 800e0d0:	f108 0801 	add.w	r8, r8, #1
 800e0d4:	e7e6      	b.n	800e0a4 <_printf_float+0x244>
 800e0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	dc39      	bgt.n	800e150 <_printf_float+0x2f0>
 800e0dc:	4a1b      	ldr	r2, [pc, #108]	; (800e14c <_printf_float+0x2ec>)
 800e0de:	2301      	movs	r3, #1
 800e0e0:	4631      	mov	r1, r6
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	47b8      	blx	r7
 800e0e6:	3001      	adds	r0, #1
 800e0e8:	f43f af19 	beq.w	800df1e <_printf_float+0xbe>
 800e0ec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	d102      	bne.n	800e0fa <_printf_float+0x29a>
 800e0f4:	6823      	ldr	r3, [r4, #0]
 800e0f6:	07d9      	lsls	r1, r3, #31
 800e0f8:	d5d8      	bpl.n	800e0ac <_printf_float+0x24c>
 800e0fa:	ee18 3a10 	vmov	r3, s16
 800e0fe:	4652      	mov	r2, sl
 800e100:	4631      	mov	r1, r6
 800e102:	4628      	mov	r0, r5
 800e104:	47b8      	blx	r7
 800e106:	3001      	adds	r0, #1
 800e108:	f43f af09 	beq.w	800df1e <_printf_float+0xbe>
 800e10c:	f04f 0900 	mov.w	r9, #0
 800e110:	f104 0a1a 	add.w	sl, r4, #26
 800e114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e116:	425b      	negs	r3, r3
 800e118:	454b      	cmp	r3, r9
 800e11a:	dc01      	bgt.n	800e120 <_printf_float+0x2c0>
 800e11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e11e:	e792      	b.n	800e046 <_printf_float+0x1e6>
 800e120:	2301      	movs	r3, #1
 800e122:	4652      	mov	r2, sl
 800e124:	4631      	mov	r1, r6
 800e126:	4628      	mov	r0, r5
 800e128:	47b8      	blx	r7
 800e12a:	3001      	adds	r0, #1
 800e12c:	f43f aef7 	beq.w	800df1e <_printf_float+0xbe>
 800e130:	f109 0901 	add.w	r9, r9, #1
 800e134:	e7ee      	b.n	800e114 <_printf_float+0x2b4>
 800e136:	bf00      	nop
 800e138:	7fefffff 	.word	0x7fefffff
 800e13c:	08013470 	.word	0x08013470
 800e140:	08013474 	.word	0x08013474
 800e144:	08013478 	.word	0x08013478
 800e148:	0801347c 	.word	0x0801347c
 800e14c:	08013480 	.word	0x08013480
 800e150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e152:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e154:	429a      	cmp	r2, r3
 800e156:	bfa8      	it	ge
 800e158:	461a      	movge	r2, r3
 800e15a:	2a00      	cmp	r2, #0
 800e15c:	4691      	mov	r9, r2
 800e15e:	dc37      	bgt.n	800e1d0 <_printf_float+0x370>
 800e160:	f04f 0b00 	mov.w	fp, #0
 800e164:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e168:	f104 021a 	add.w	r2, r4, #26
 800e16c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e16e:	9305      	str	r3, [sp, #20]
 800e170:	eba3 0309 	sub.w	r3, r3, r9
 800e174:	455b      	cmp	r3, fp
 800e176:	dc33      	bgt.n	800e1e0 <_printf_float+0x380>
 800e178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e17c:	429a      	cmp	r2, r3
 800e17e:	db3b      	blt.n	800e1f8 <_printf_float+0x398>
 800e180:	6823      	ldr	r3, [r4, #0]
 800e182:	07da      	lsls	r2, r3, #31
 800e184:	d438      	bmi.n	800e1f8 <_printf_float+0x398>
 800e186:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e18a:	eba2 0903 	sub.w	r9, r2, r3
 800e18e:	9b05      	ldr	r3, [sp, #20]
 800e190:	1ad2      	subs	r2, r2, r3
 800e192:	4591      	cmp	r9, r2
 800e194:	bfa8      	it	ge
 800e196:	4691      	movge	r9, r2
 800e198:	f1b9 0f00 	cmp.w	r9, #0
 800e19c:	dc35      	bgt.n	800e20a <_printf_float+0x3aa>
 800e19e:	f04f 0800 	mov.w	r8, #0
 800e1a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e1a6:	f104 0a1a 	add.w	sl, r4, #26
 800e1aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1ae:	1a9b      	subs	r3, r3, r2
 800e1b0:	eba3 0309 	sub.w	r3, r3, r9
 800e1b4:	4543      	cmp	r3, r8
 800e1b6:	f77f af79 	ble.w	800e0ac <_printf_float+0x24c>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	4652      	mov	r2, sl
 800e1be:	4631      	mov	r1, r6
 800e1c0:	4628      	mov	r0, r5
 800e1c2:	47b8      	blx	r7
 800e1c4:	3001      	adds	r0, #1
 800e1c6:	f43f aeaa 	beq.w	800df1e <_printf_float+0xbe>
 800e1ca:	f108 0801 	add.w	r8, r8, #1
 800e1ce:	e7ec      	b.n	800e1aa <_printf_float+0x34a>
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	4631      	mov	r1, r6
 800e1d4:	4642      	mov	r2, r8
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	47b8      	blx	r7
 800e1da:	3001      	adds	r0, #1
 800e1dc:	d1c0      	bne.n	800e160 <_printf_float+0x300>
 800e1de:	e69e      	b.n	800df1e <_printf_float+0xbe>
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	4631      	mov	r1, r6
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	9205      	str	r2, [sp, #20]
 800e1e8:	47b8      	blx	r7
 800e1ea:	3001      	adds	r0, #1
 800e1ec:	f43f ae97 	beq.w	800df1e <_printf_float+0xbe>
 800e1f0:	9a05      	ldr	r2, [sp, #20]
 800e1f2:	f10b 0b01 	add.w	fp, fp, #1
 800e1f6:	e7b9      	b.n	800e16c <_printf_float+0x30c>
 800e1f8:	ee18 3a10 	vmov	r3, s16
 800e1fc:	4652      	mov	r2, sl
 800e1fe:	4631      	mov	r1, r6
 800e200:	4628      	mov	r0, r5
 800e202:	47b8      	blx	r7
 800e204:	3001      	adds	r0, #1
 800e206:	d1be      	bne.n	800e186 <_printf_float+0x326>
 800e208:	e689      	b.n	800df1e <_printf_float+0xbe>
 800e20a:	9a05      	ldr	r2, [sp, #20]
 800e20c:	464b      	mov	r3, r9
 800e20e:	4442      	add	r2, r8
 800e210:	4631      	mov	r1, r6
 800e212:	4628      	mov	r0, r5
 800e214:	47b8      	blx	r7
 800e216:	3001      	adds	r0, #1
 800e218:	d1c1      	bne.n	800e19e <_printf_float+0x33e>
 800e21a:	e680      	b.n	800df1e <_printf_float+0xbe>
 800e21c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e21e:	2a01      	cmp	r2, #1
 800e220:	dc01      	bgt.n	800e226 <_printf_float+0x3c6>
 800e222:	07db      	lsls	r3, r3, #31
 800e224:	d53a      	bpl.n	800e29c <_printf_float+0x43c>
 800e226:	2301      	movs	r3, #1
 800e228:	4642      	mov	r2, r8
 800e22a:	4631      	mov	r1, r6
 800e22c:	4628      	mov	r0, r5
 800e22e:	47b8      	blx	r7
 800e230:	3001      	adds	r0, #1
 800e232:	f43f ae74 	beq.w	800df1e <_printf_float+0xbe>
 800e236:	ee18 3a10 	vmov	r3, s16
 800e23a:	4652      	mov	r2, sl
 800e23c:	4631      	mov	r1, r6
 800e23e:	4628      	mov	r0, r5
 800e240:	47b8      	blx	r7
 800e242:	3001      	adds	r0, #1
 800e244:	f43f ae6b 	beq.w	800df1e <_printf_float+0xbe>
 800e248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e24c:	2200      	movs	r2, #0
 800e24e:	2300      	movs	r3, #0
 800e250:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e254:	f7f2 fc60 	bl	8000b18 <__aeabi_dcmpeq>
 800e258:	b9d8      	cbnz	r0, 800e292 <_printf_float+0x432>
 800e25a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e25e:	f108 0201 	add.w	r2, r8, #1
 800e262:	4631      	mov	r1, r6
 800e264:	4628      	mov	r0, r5
 800e266:	47b8      	blx	r7
 800e268:	3001      	adds	r0, #1
 800e26a:	d10e      	bne.n	800e28a <_printf_float+0x42a>
 800e26c:	e657      	b.n	800df1e <_printf_float+0xbe>
 800e26e:	2301      	movs	r3, #1
 800e270:	4652      	mov	r2, sl
 800e272:	4631      	mov	r1, r6
 800e274:	4628      	mov	r0, r5
 800e276:	47b8      	blx	r7
 800e278:	3001      	adds	r0, #1
 800e27a:	f43f ae50 	beq.w	800df1e <_printf_float+0xbe>
 800e27e:	f108 0801 	add.w	r8, r8, #1
 800e282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e284:	3b01      	subs	r3, #1
 800e286:	4543      	cmp	r3, r8
 800e288:	dcf1      	bgt.n	800e26e <_printf_float+0x40e>
 800e28a:	464b      	mov	r3, r9
 800e28c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e290:	e6da      	b.n	800e048 <_printf_float+0x1e8>
 800e292:	f04f 0800 	mov.w	r8, #0
 800e296:	f104 0a1a 	add.w	sl, r4, #26
 800e29a:	e7f2      	b.n	800e282 <_printf_float+0x422>
 800e29c:	2301      	movs	r3, #1
 800e29e:	4642      	mov	r2, r8
 800e2a0:	e7df      	b.n	800e262 <_printf_float+0x402>
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	464a      	mov	r2, r9
 800e2a6:	4631      	mov	r1, r6
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	47b8      	blx	r7
 800e2ac:	3001      	adds	r0, #1
 800e2ae:	f43f ae36 	beq.w	800df1e <_printf_float+0xbe>
 800e2b2:	f108 0801 	add.w	r8, r8, #1
 800e2b6:	68e3      	ldr	r3, [r4, #12]
 800e2b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2ba:	1a5b      	subs	r3, r3, r1
 800e2bc:	4543      	cmp	r3, r8
 800e2be:	dcf0      	bgt.n	800e2a2 <_printf_float+0x442>
 800e2c0:	e6f8      	b.n	800e0b4 <_printf_float+0x254>
 800e2c2:	f04f 0800 	mov.w	r8, #0
 800e2c6:	f104 0919 	add.w	r9, r4, #25
 800e2ca:	e7f4      	b.n	800e2b6 <_printf_float+0x456>

0800e2cc <_printf_common>:
 800e2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d0:	4616      	mov	r6, r2
 800e2d2:	4699      	mov	r9, r3
 800e2d4:	688a      	ldr	r2, [r1, #8]
 800e2d6:	690b      	ldr	r3, [r1, #16]
 800e2d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	bfb8      	it	lt
 800e2e0:	4613      	movlt	r3, r2
 800e2e2:	6033      	str	r3, [r6, #0]
 800e2e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e2e8:	4607      	mov	r7, r0
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	b10a      	cbz	r2, 800e2f2 <_printf_common+0x26>
 800e2ee:	3301      	adds	r3, #1
 800e2f0:	6033      	str	r3, [r6, #0]
 800e2f2:	6823      	ldr	r3, [r4, #0]
 800e2f4:	0699      	lsls	r1, r3, #26
 800e2f6:	bf42      	ittt	mi
 800e2f8:	6833      	ldrmi	r3, [r6, #0]
 800e2fa:	3302      	addmi	r3, #2
 800e2fc:	6033      	strmi	r3, [r6, #0]
 800e2fe:	6825      	ldr	r5, [r4, #0]
 800e300:	f015 0506 	ands.w	r5, r5, #6
 800e304:	d106      	bne.n	800e314 <_printf_common+0x48>
 800e306:	f104 0a19 	add.w	sl, r4, #25
 800e30a:	68e3      	ldr	r3, [r4, #12]
 800e30c:	6832      	ldr	r2, [r6, #0]
 800e30e:	1a9b      	subs	r3, r3, r2
 800e310:	42ab      	cmp	r3, r5
 800e312:	dc26      	bgt.n	800e362 <_printf_common+0x96>
 800e314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e318:	1e13      	subs	r3, r2, #0
 800e31a:	6822      	ldr	r2, [r4, #0]
 800e31c:	bf18      	it	ne
 800e31e:	2301      	movne	r3, #1
 800e320:	0692      	lsls	r2, r2, #26
 800e322:	d42b      	bmi.n	800e37c <_printf_common+0xb0>
 800e324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e328:	4649      	mov	r1, r9
 800e32a:	4638      	mov	r0, r7
 800e32c:	47c0      	blx	r8
 800e32e:	3001      	adds	r0, #1
 800e330:	d01e      	beq.n	800e370 <_printf_common+0xa4>
 800e332:	6823      	ldr	r3, [r4, #0]
 800e334:	6922      	ldr	r2, [r4, #16]
 800e336:	f003 0306 	and.w	r3, r3, #6
 800e33a:	2b04      	cmp	r3, #4
 800e33c:	bf02      	ittt	eq
 800e33e:	68e5      	ldreq	r5, [r4, #12]
 800e340:	6833      	ldreq	r3, [r6, #0]
 800e342:	1aed      	subeq	r5, r5, r3
 800e344:	68a3      	ldr	r3, [r4, #8]
 800e346:	bf0c      	ite	eq
 800e348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e34c:	2500      	movne	r5, #0
 800e34e:	4293      	cmp	r3, r2
 800e350:	bfc4      	itt	gt
 800e352:	1a9b      	subgt	r3, r3, r2
 800e354:	18ed      	addgt	r5, r5, r3
 800e356:	2600      	movs	r6, #0
 800e358:	341a      	adds	r4, #26
 800e35a:	42b5      	cmp	r5, r6
 800e35c:	d11a      	bne.n	800e394 <_printf_common+0xc8>
 800e35e:	2000      	movs	r0, #0
 800e360:	e008      	b.n	800e374 <_printf_common+0xa8>
 800e362:	2301      	movs	r3, #1
 800e364:	4652      	mov	r2, sl
 800e366:	4649      	mov	r1, r9
 800e368:	4638      	mov	r0, r7
 800e36a:	47c0      	blx	r8
 800e36c:	3001      	adds	r0, #1
 800e36e:	d103      	bne.n	800e378 <_printf_common+0xac>
 800e370:	f04f 30ff 	mov.w	r0, #4294967295
 800e374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e378:	3501      	adds	r5, #1
 800e37a:	e7c6      	b.n	800e30a <_printf_common+0x3e>
 800e37c:	18e1      	adds	r1, r4, r3
 800e37e:	1c5a      	adds	r2, r3, #1
 800e380:	2030      	movs	r0, #48	; 0x30
 800e382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e386:	4422      	add	r2, r4
 800e388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e38c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e390:	3302      	adds	r3, #2
 800e392:	e7c7      	b.n	800e324 <_printf_common+0x58>
 800e394:	2301      	movs	r3, #1
 800e396:	4622      	mov	r2, r4
 800e398:	4649      	mov	r1, r9
 800e39a:	4638      	mov	r0, r7
 800e39c:	47c0      	blx	r8
 800e39e:	3001      	adds	r0, #1
 800e3a0:	d0e6      	beq.n	800e370 <_printf_common+0xa4>
 800e3a2:	3601      	adds	r6, #1
 800e3a4:	e7d9      	b.n	800e35a <_printf_common+0x8e>
	...

0800e3a8 <_printf_i>:
 800e3a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3ac:	7e0f      	ldrb	r7, [r1, #24]
 800e3ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e3b0:	2f78      	cmp	r7, #120	; 0x78
 800e3b2:	4691      	mov	r9, r2
 800e3b4:	4680      	mov	r8, r0
 800e3b6:	460c      	mov	r4, r1
 800e3b8:	469a      	mov	sl, r3
 800e3ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e3be:	d807      	bhi.n	800e3d0 <_printf_i+0x28>
 800e3c0:	2f62      	cmp	r7, #98	; 0x62
 800e3c2:	d80a      	bhi.n	800e3da <_printf_i+0x32>
 800e3c4:	2f00      	cmp	r7, #0
 800e3c6:	f000 80d4 	beq.w	800e572 <_printf_i+0x1ca>
 800e3ca:	2f58      	cmp	r7, #88	; 0x58
 800e3cc:	f000 80c0 	beq.w	800e550 <_printf_i+0x1a8>
 800e3d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e3d8:	e03a      	b.n	800e450 <_printf_i+0xa8>
 800e3da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e3de:	2b15      	cmp	r3, #21
 800e3e0:	d8f6      	bhi.n	800e3d0 <_printf_i+0x28>
 800e3e2:	a101      	add	r1, pc, #4	; (adr r1, 800e3e8 <_printf_i+0x40>)
 800e3e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3e8:	0800e441 	.word	0x0800e441
 800e3ec:	0800e455 	.word	0x0800e455
 800e3f0:	0800e3d1 	.word	0x0800e3d1
 800e3f4:	0800e3d1 	.word	0x0800e3d1
 800e3f8:	0800e3d1 	.word	0x0800e3d1
 800e3fc:	0800e3d1 	.word	0x0800e3d1
 800e400:	0800e455 	.word	0x0800e455
 800e404:	0800e3d1 	.word	0x0800e3d1
 800e408:	0800e3d1 	.word	0x0800e3d1
 800e40c:	0800e3d1 	.word	0x0800e3d1
 800e410:	0800e3d1 	.word	0x0800e3d1
 800e414:	0800e559 	.word	0x0800e559
 800e418:	0800e481 	.word	0x0800e481
 800e41c:	0800e513 	.word	0x0800e513
 800e420:	0800e3d1 	.word	0x0800e3d1
 800e424:	0800e3d1 	.word	0x0800e3d1
 800e428:	0800e57b 	.word	0x0800e57b
 800e42c:	0800e3d1 	.word	0x0800e3d1
 800e430:	0800e481 	.word	0x0800e481
 800e434:	0800e3d1 	.word	0x0800e3d1
 800e438:	0800e3d1 	.word	0x0800e3d1
 800e43c:	0800e51b 	.word	0x0800e51b
 800e440:	682b      	ldr	r3, [r5, #0]
 800e442:	1d1a      	adds	r2, r3, #4
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	602a      	str	r2, [r5, #0]
 800e448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e44c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e450:	2301      	movs	r3, #1
 800e452:	e09f      	b.n	800e594 <_printf_i+0x1ec>
 800e454:	6820      	ldr	r0, [r4, #0]
 800e456:	682b      	ldr	r3, [r5, #0]
 800e458:	0607      	lsls	r7, r0, #24
 800e45a:	f103 0104 	add.w	r1, r3, #4
 800e45e:	6029      	str	r1, [r5, #0]
 800e460:	d501      	bpl.n	800e466 <_printf_i+0xbe>
 800e462:	681e      	ldr	r6, [r3, #0]
 800e464:	e003      	b.n	800e46e <_printf_i+0xc6>
 800e466:	0646      	lsls	r6, r0, #25
 800e468:	d5fb      	bpl.n	800e462 <_printf_i+0xba>
 800e46a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e46e:	2e00      	cmp	r6, #0
 800e470:	da03      	bge.n	800e47a <_printf_i+0xd2>
 800e472:	232d      	movs	r3, #45	; 0x2d
 800e474:	4276      	negs	r6, r6
 800e476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e47a:	485a      	ldr	r0, [pc, #360]	; (800e5e4 <_printf_i+0x23c>)
 800e47c:	230a      	movs	r3, #10
 800e47e:	e012      	b.n	800e4a6 <_printf_i+0xfe>
 800e480:	682b      	ldr	r3, [r5, #0]
 800e482:	6820      	ldr	r0, [r4, #0]
 800e484:	1d19      	adds	r1, r3, #4
 800e486:	6029      	str	r1, [r5, #0]
 800e488:	0605      	lsls	r5, r0, #24
 800e48a:	d501      	bpl.n	800e490 <_printf_i+0xe8>
 800e48c:	681e      	ldr	r6, [r3, #0]
 800e48e:	e002      	b.n	800e496 <_printf_i+0xee>
 800e490:	0641      	lsls	r1, r0, #25
 800e492:	d5fb      	bpl.n	800e48c <_printf_i+0xe4>
 800e494:	881e      	ldrh	r6, [r3, #0]
 800e496:	4853      	ldr	r0, [pc, #332]	; (800e5e4 <_printf_i+0x23c>)
 800e498:	2f6f      	cmp	r7, #111	; 0x6f
 800e49a:	bf0c      	ite	eq
 800e49c:	2308      	moveq	r3, #8
 800e49e:	230a      	movne	r3, #10
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e4a6:	6865      	ldr	r5, [r4, #4]
 800e4a8:	60a5      	str	r5, [r4, #8]
 800e4aa:	2d00      	cmp	r5, #0
 800e4ac:	bfa2      	ittt	ge
 800e4ae:	6821      	ldrge	r1, [r4, #0]
 800e4b0:	f021 0104 	bicge.w	r1, r1, #4
 800e4b4:	6021      	strge	r1, [r4, #0]
 800e4b6:	b90e      	cbnz	r6, 800e4bc <_printf_i+0x114>
 800e4b8:	2d00      	cmp	r5, #0
 800e4ba:	d04b      	beq.n	800e554 <_printf_i+0x1ac>
 800e4bc:	4615      	mov	r5, r2
 800e4be:	fbb6 f1f3 	udiv	r1, r6, r3
 800e4c2:	fb03 6711 	mls	r7, r3, r1, r6
 800e4c6:	5dc7      	ldrb	r7, [r0, r7]
 800e4c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e4cc:	4637      	mov	r7, r6
 800e4ce:	42bb      	cmp	r3, r7
 800e4d0:	460e      	mov	r6, r1
 800e4d2:	d9f4      	bls.n	800e4be <_printf_i+0x116>
 800e4d4:	2b08      	cmp	r3, #8
 800e4d6:	d10b      	bne.n	800e4f0 <_printf_i+0x148>
 800e4d8:	6823      	ldr	r3, [r4, #0]
 800e4da:	07de      	lsls	r6, r3, #31
 800e4dc:	d508      	bpl.n	800e4f0 <_printf_i+0x148>
 800e4de:	6923      	ldr	r3, [r4, #16]
 800e4e0:	6861      	ldr	r1, [r4, #4]
 800e4e2:	4299      	cmp	r1, r3
 800e4e4:	bfde      	ittt	le
 800e4e6:	2330      	movle	r3, #48	; 0x30
 800e4e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e4ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e4f0:	1b52      	subs	r2, r2, r5
 800e4f2:	6122      	str	r2, [r4, #16]
 800e4f4:	f8cd a000 	str.w	sl, [sp]
 800e4f8:	464b      	mov	r3, r9
 800e4fa:	aa03      	add	r2, sp, #12
 800e4fc:	4621      	mov	r1, r4
 800e4fe:	4640      	mov	r0, r8
 800e500:	f7ff fee4 	bl	800e2cc <_printf_common>
 800e504:	3001      	adds	r0, #1
 800e506:	d14a      	bne.n	800e59e <_printf_i+0x1f6>
 800e508:	f04f 30ff 	mov.w	r0, #4294967295
 800e50c:	b004      	add	sp, #16
 800e50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e512:	6823      	ldr	r3, [r4, #0]
 800e514:	f043 0320 	orr.w	r3, r3, #32
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	4833      	ldr	r0, [pc, #204]	; (800e5e8 <_printf_i+0x240>)
 800e51c:	2778      	movs	r7, #120	; 0x78
 800e51e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e522:	6823      	ldr	r3, [r4, #0]
 800e524:	6829      	ldr	r1, [r5, #0]
 800e526:	061f      	lsls	r7, r3, #24
 800e528:	f851 6b04 	ldr.w	r6, [r1], #4
 800e52c:	d402      	bmi.n	800e534 <_printf_i+0x18c>
 800e52e:	065f      	lsls	r7, r3, #25
 800e530:	bf48      	it	mi
 800e532:	b2b6      	uxthmi	r6, r6
 800e534:	07df      	lsls	r7, r3, #31
 800e536:	bf48      	it	mi
 800e538:	f043 0320 	orrmi.w	r3, r3, #32
 800e53c:	6029      	str	r1, [r5, #0]
 800e53e:	bf48      	it	mi
 800e540:	6023      	strmi	r3, [r4, #0]
 800e542:	b91e      	cbnz	r6, 800e54c <_printf_i+0x1a4>
 800e544:	6823      	ldr	r3, [r4, #0]
 800e546:	f023 0320 	bic.w	r3, r3, #32
 800e54a:	6023      	str	r3, [r4, #0]
 800e54c:	2310      	movs	r3, #16
 800e54e:	e7a7      	b.n	800e4a0 <_printf_i+0xf8>
 800e550:	4824      	ldr	r0, [pc, #144]	; (800e5e4 <_printf_i+0x23c>)
 800e552:	e7e4      	b.n	800e51e <_printf_i+0x176>
 800e554:	4615      	mov	r5, r2
 800e556:	e7bd      	b.n	800e4d4 <_printf_i+0x12c>
 800e558:	682b      	ldr	r3, [r5, #0]
 800e55a:	6826      	ldr	r6, [r4, #0]
 800e55c:	6961      	ldr	r1, [r4, #20]
 800e55e:	1d18      	adds	r0, r3, #4
 800e560:	6028      	str	r0, [r5, #0]
 800e562:	0635      	lsls	r5, r6, #24
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	d501      	bpl.n	800e56c <_printf_i+0x1c4>
 800e568:	6019      	str	r1, [r3, #0]
 800e56a:	e002      	b.n	800e572 <_printf_i+0x1ca>
 800e56c:	0670      	lsls	r0, r6, #25
 800e56e:	d5fb      	bpl.n	800e568 <_printf_i+0x1c0>
 800e570:	8019      	strh	r1, [r3, #0]
 800e572:	2300      	movs	r3, #0
 800e574:	6123      	str	r3, [r4, #16]
 800e576:	4615      	mov	r5, r2
 800e578:	e7bc      	b.n	800e4f4 <_printf_i+0x14c>
 800e57a:	682b      	ldr	r3, [r5, #0]
 800e57c:	1d1a      	adds	r2, r3, #4
 800e57e:	602a      	str	r2, [r5, #0]
 800e580:	681d      	ldr	r5, [r3, #0]
 800e582:	6862      	ldr	r2, [r4, #4]
 800e584:	2100      	movs	r1, #0
 800e586:	4628      	mov	r0, r5
 800e588:	f7f1 fe4a 	bl	8000220 <memchr>
 800e58c:	b108      	cbz	r0, 800e592 <_printf_i+0x1ea>
 800e58e:	1b40      	subs	r0, r0, r5
 800e590:	6060      	str	r0, [r4, #4]
 800e592:	6863      	ldr	r3, [r4, #4]
 800e594:	6123      	str	r3, [r4, #16]
 800e596:	2300      	movs	r3, #0
 800e598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e59c:	e7aa      	b.n	800e4f4 <_printf_i+0x14c>
 800e59e:	6923      	ldr	r3, [r4, #16]
 800e5a0:	462a      	mov	r2, r5
 800e5a2:	4649      	mov	r1, r9
 800e5a4:	4640      	mov	r0, r8
 800e5a6:	47d0      	blx	sl
 800e5a8:	3001      	adds	r0, #1
 800e5aa:	d0ad      	beq.n	800e508 <_printf_i+0x160>
 800e5ac:	6823      	ldr	r3, [r4, #0]
 800e5ae:	079b      	lsls	r3, r3, #30
 800e5b0:	d413      	bmi.n	800e5da <_printf_i+0x232>
 800e5b2:	68e0      	ldr	r0, [r4, #12]
 800e5b4:	9b03      	ldr	r3, [sp, #12]
 800e5b6:	4298      	cmp	r0, r3
 800e5b8:	bfb8      	it	lt
 800e5ba:	4618      	movlt	r0, r3
 800e5bc:	e7a6      	b.n	800e50c <_printf_i+0x164>
 800e5be:	2301      	movs	r3, #1
 800e5c0:	4632      	mov	r2, r6
 800e5c2:	4649      	mov	r1, r9
 800e5c4:	4640      	mov	r0, r8
 800e5c6:	47d0      	blx	sl
 800e5c8:	3001      	adds	r0, #1
 800e5ca:	d09d      	beq.n	800e508 <_printf_i+0x160>
 800e5cc:	3501      	adds	r5, #1
 800e5ce:	68e3      	ldr	r3, [r4, #12]
 800e5d0:	9903      	ldr	r1, [sp, #12]
 800e5d2:	1a5b      	subs	r3, r3, r1
 800e5d4:	42ab      	cmp	r3, r5
 800e5d6:	dcf2      	bgt.n	800e5be <_printf_i+0x216>
 800e5d8:	e7eb      	b.n	800e5b2 <_printf_i+0x20a>
 800e5da:	2500      	movs	r5, #0
 800e5dc:	f104 0619 	add.w	r6, r4, #25
 800e5e0:	e7f5      	b.n	800e5ce <_printf_i+0x226>
 800e5e2:	bf00      	nop
 800e5e4:	08013482 	.word	0x08013482
 800e5e8:	08013493 	.word	0x08013493

0800e5ec <_scanf_float>:
 800e5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f0:	b087      	sub	sp, #28
 800e5f2:	4617      	mov	r7, r2
 800e5f4:	9303      	str	r3, [sp, #12]
 800e5f6:	688b      	ldr	r3, [r1, #8]
 800e5f8:	1e5a      	subs	r2, r3, #1
 800e5fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e5fe:	bf83      	ittte	hi
 800e600:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e604:	195b      	addhi	r3, r3, r5
 800e606:	9302      	strhi	r3, [sp, #8]
 800e608:	2300      	movls	r3, #0
 800e60a:	bf86      	itte	hi
 800e60c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e610:	608b      	strhi	r3, [r1, #8]
 800e612:	9302      	strls	r3, [sp, #8]
 800e614:	680b      	ldr	r3, [r1, #0]
 800e616:	468b      	mov	fp, r1
 800e618:	2500      	movs	r5, #0
 800e61a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e61e:	f84b 3b1c 	str.w	r3, [fp], #28
 800e622:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e626:	4680      	mov	r8, r0
 800e628:	460c      	mov	r4, r1
 800e62a:	465e      	mov	r6, fp
 800e62c:	46aa      	mov	sl, r5
 800e62e:	46a9      	mov	r9, r5
 800e630:	9501      	str	r5, [sp, #4]
 800e632:	68a2      	ldr	r2, [r4, #8]
 800e634:	b152      	cbz	r2, 800e64c <_scanf_float+0x60>
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	2b4e      	cmp	r3, #78	; 0x4e
 800e63c:	d864      	bhi.n	800e708 <_scanf_float+0x11c>
 800e63e:	2b40      	cmp	r3, #64	; 0x40
 800e640:	d83c      	bhi.n	800e6bc <_scanf_float+0xd0>
 800e642:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e646:	b2c8      	uxtb	r0, r1
 800e648:	280e      	cmp	r0, #14
 800e64a:	d93a      	bls.n	800e6c2 <_scanf_float+0xd6>
 800e64c:	f1b9 0f00 	cmp.w	r9, #0
 800e650:	d003      	beq.n	800e65a <_scanf_float+0x6e>
 800e652:	6823      	ldr	r3, [r4, #0]
 800e654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e658:	6023      	str	r3, [r4, #0]
 800e65a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e65e:	f1ba 0f01 	cmp.w	sl, #1
 800e662:	f200 8113 	bhi.w	800e88c <_scanf_float+0x2a0>
 800e666:	455e      	cmp	r6, fp
 800e668:	f200 8105 	bhi.w	800e876 <_scanf_float+0x28a>
 800e66c:	2501      	movs	r5, #1
 800e66e:	4628      	mov	r0, r5
 800e670:	b007      	add	sp, #28
 800e672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e676:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e67a:	2a0d      	cmp	r2, #13
 800e67c:	d8e6      	bhi.n	800e64c <_scanf_float+0x60>
 800e67e:	a101      	add	r1, pc, #4	; (adr r1, 800e684 <_scanf_float+0x98>)
 800e680:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e684:	0800e7c3 	.word	0x0800e7c3
 800e688:	0800e64d 	.word	0x0800e64d
 800e68c:	0800e64d 	.word	0x0800e64d
 800e690:	0800e64d 	.word	0x0800e64d
 800e694:	0800e823 	.word	0x0800e823
 800e698:	0800e7fb 	.word	0x0800e7fb
 800e69c:	0800e64d 	.word	0x0800e64d
 800e6a0:	0800e64d 	.word	0x0800e64d
 800e6a4:	0800e7d1 	.word	0x0800e7d1
 800e6a8:	0800e64d 	.word	0x0800e64d
 800e6ac:	0800e64d 	.word	0x0800e64d
 800e6b0:	0800e64d 	.word	0x0800e64d
 800e6b4:	0800e64d 	.word	0x0800e64d
 800e6b8:	0800e789 	.word	0x0800e789
 800e6bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e6c0:	e7db      	b.n	800e67a <_scanf_float+0x8e>
 800e6c2:	290e      	cmp	r1, #14
 800e6c4:	d8c2      	bhi.n	800e64c <_scanf_float+0x60>
 800e6c6:	a001      	add	r0, pc, #4	; (adr r0, 800e6cc <_scanf_float+0xe0>)
 800e6c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e6cc:	0800e77b 	.word	0x0800e77b
 800e6d0:	0800e64d 	.word	0x0800e64d
 800e6d4:	0800e77b 	.word	0x0800e77b
 800e6d8:	0800e80f 	.word	0x0800e80f
 800e6dc:	0800e64d 	.word	0x0800e64d
 800e6e0:	0800e729 	.word	0x0800e729
 800e6e4:	0800e765 	.word	0x0800e765
 800e6e8:	0800e765 	.word	0x0800e765
 800e6ec:	0800e765 	.word	0x0800e765
 800e6f0:	0800e765 	.word	0x0800e765
 800e6f4:	0800e765 	.word	0x0800e765
 800e6f8:	0800e765 	.word	0x0800e765
 800e6fc:	0800e765 	.word	0x0800e765
 800e700:	0800e765 	.word	0x0800e765
 800e704:	0800e765 	.word	0x0800e765
 800e708:	2b6e      	cmp	r3, #110	; 0x6e
 800e70a:	d809      	bhi.n	800e720 <_scanf_float+0x134>
 800e70c:	2b60      	cmp	r3, #96	; 0x60
 800e70e:	d8b2      	bhi.n	800e676 <_scanf_float+0x8a>
 800e710:	2b54      	cmp	r3, #84	; 0x54
 800e712:	d077      	beq.n	800e804 <_scanf_float+0x218>
 800e714:	2b59      	cmp	r3, #89	; 0x59
 800e716:	d199      	bne.n	800e64c <_scanf_float+0x60>
 800e718:	2d07      	cmp	r5, #7
 800e71a:	d197      	bne.n	800e64c <_scanf_float+0x60>
 800e71c:	2508      	movs	r5, #8
 800e71e:	e029      	b.n	800e774 <_scanf_float+0x188>
 800e720:	2b74      	cmp	r3, #116	; 0x74
 800e722:	d06f      	beq.n	800e804 <_scanf_float+0x218>
 800e724:	2b79      	cmp	r3, #121	; 0x79
 800e726:	e7f6      	b.n	800e716 <_scanf_float+0x12a>
 800e728:	6821      	ldr	r1, [r4, #0]
 800e72a:	05c8      	lsls	r0, r1, #23
 800e72c:	d51a      	bpl.n	800e764 <_scanf_float+0x178>
 800e72e:	9b02      	ldr	r3, [sp, #8]
 800e730:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e734:	6021      	str	r1, [r4, #0]
 800e736:	f109 0901 	add.w	r9, r9, #1
 800e73a:	b11b      	cbz	r3, 800e744 <_scanf_float+0x158>
 800e73c:	3b01      	subs	r3, #1
 800e73e:	3201      	adds	r2, #1
 800e740:	9302      	str	r3, [sp, #8]
 800e742:	60a2      	str	r2, [r4, #8]
 800e744:	68a3      	ldr	r3, [r4, #8]
 800e746:	3b01      	subs	r3, #1
 800e748:	60a3      	str	r3, [r4, #8]
 800e74a:	6923      	ldr	r3, [r4, #16]
 800e74c:	3301      	adds	r3, #1
 800e74e:	6123      	str	r3, [r4, #16]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	3b01      	subs	r3, #1
 800e754:	2b00      	cmp	r3, #0
 800e756:	607b      	str	r3, [r7, #4]
 800e758:	f340 8084 	ble.w	800e864 <_scanf_float+0x278>
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	3301      	adds	r3, #1
 800e760:	603b      	str	r3, [r7, #0]
 800e762:	e766      	b.n	800e632 <_scanf_float+0x46>
 800e764:	eb1a 0f05 	cmn.w	sl, r5
 800e768:	f47f af70 	bne.w	800e64c <_scanf_float+0x60>
 800e76c:	6822      	ldr	r2, [r4, #0]
 800e76e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e772:	6022      	str	r2, [r4, #0]
 800e774:	f806 3b01 	strb.w	r3, [r6], #1
 800e778:	e7e4      	b.n	800e744 <_scanf_float+0x158>
 800e77a:	6822      	ldr	r2, [r4, #0]
 800e77c:	0610      	lsls	r0, r2, #24
 800e77e:	f57f af65 	bpl.w	800e64c <_scanf_float+0x60>
 800e782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e786:	e7f4      	b.n	800e772 <_scanf_float+0x186>
 800e788:	f1ba 0f00 	cmp.w	sl, #0
 800e78c:	d10e      	bne.n	800e7ac <_scanf_float+0x1c0>
 800e78e:	f1b9 0f00 	cmp.w	r9, #0
 800e792:	d10e      	bne.n	800e7b2 <_scanf_float+0x1c6>
 800e794:	6822      	ldr	r2, [r4, #0]
 800e796:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e79a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e79e:	d108      	bne.n	800e7b2 <_scanf_float+0x1c6>
 800e7a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e7a4:	6022      	str	r2, [r4, #0]
 800e7a6:	f04f 0a01 	mov.w	sl, #1
 800e7aa:	e7e3      	b.n	800e774 <_scanf_float+0x188>
 800e7ac:	f1ba 0f02 	cmp.w	sl, #2
 800e7b0:	d055      	beq.n	800e85e <_scanf_float+0x272>
 800e7b2:	2d01      	cmp	r5, #1
 800e7b4:	d002      	beq.n	800e7bc <_scanf_float+0x1d0>
 800e7b6:	2d04      	cmp	r5, #4
 800e7b8:	f47f af48 	bne.w	800e64c <_scanf_float+0x60>
 800e7bc:	3501      	adds	r5, #1
 800e7be:	b2ed      	uxtb	r5, r5
 800e7c0:	e7d8      	b.n	800e774 <_scanf_float+0x188>
 800e7c2:	f1ba 0f01 	cmp.w	sl, #1
 800e7c6:	f47f af41 	bne.w	800e64c <_scanf_float+0x60>
 800e7ca:	f04f 0a02 	mov.w	sl, #2
 800e7ce:	e7d1      	b.n	800e774 <_scanf_float+0x188>
 800e7d0:	b97d      	cbnz	r5, 800e7f2 <_scanf_float+0x206>
 800e7d2:	f1b9 0f00 	cmp.w	r9, #0
 800e7d6:	f47f af3c 	bne.w	800e652 <_scanf_float+0x66>
 800e7da:	6822      	ldr	r2, [r4, #0]
 800e7dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e7e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e7e4:	f47f af39 	bne.w	800e65a <_scanf_float+0x6e>
 800e7e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e7ec:	6022      	str	r2, [r4, #0]
 800e7ee:	2501      	movs	r5, #1
 800e7f0:	e7c0      	b.n	800e774 <_scanf_float+0x188>
 800e7f2:	2d03      	cmp	r5, #3
 800e7f4:	d0e2      	beq.n	800e7bc <_scanf_float+0x1d0>
 800e7f6:	2d05      	cmp	r5, #5
 800e7f8:	e7de      	b.n	800e7b8 <_scanf_float+0x1cc>
 800e7fa:	2d02      	cmp	r5, #2
 800e7fc:	f47f af26 	bne.w	800e64c <_scanf_float+0x60>
 800e800:	2503      	movs	r5, #3
 800e802:	e7b7      	b.n	800e774 <_scanf_float+0x188>
 800e804:	2d06      	cmp	r5, #6
 800e806:	f47f af21 	bne.w	800e64c <_scanf_float+0x60>
 800e80a:	2507      	movs	r5, #7
 800e80c:	e7b2      	b.n	800e774 <_scanf_float+0x188>
 800e80e:	6822      	ldr	r2, [r4, #0]
 800e810:	0591      	lsls	r1, r2, #22
 800e812:	f57f af1b 	bpl.w	800e64c <_scanf_float+0x60>
 800e816:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e81a:	6022      	str	r2, [r4, #0]
 800e81c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e820:	e7a8      	b.n	800e774 <_scanf_float+0x188>
 800e822:	6822      	ldr	r2, [r4, #0]
 800e824:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e828:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e82c:	d006      	beq.n	800e83c <_scanf_float+0x250>
 800e82e:	0550      	lsls	r0, r2, #21
 800e830:	f57f af0c 	bpl.w	800e64c <_scanf_float+0x60>
 800e834:	f1b9 0f00 	cmp.w	r9, #0
 800e838:	f43f af0f 	beq.w	800e65a <_scanf_float+0x6e>
 800e83c:	0591      	lsls	r1, r2, #22
 800e83e:	bf58      	it	pl
 800e840:	9901      	ldrpl	r1, [sp, #4]
 800e842:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e846:	bf58      	it	pl
 800e848:	eba9 0101 	subpl.w	r1, r9, r1
 800e84c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e850:	bf58      	it	pl
 800e852:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e856:	6022      	str	r2, [r4, #0]
 800e858:	f04f 0900 	mov.w	r9, #0
 800e85c:	e78a      	b.n	800e774 <_scanf_float+0x188>
 800e85e:	f04f 0a03 	mov.w	sl, #3
 800e862:	e787      	b.n	800e774 <_scanf_float+0x188>
 800e864:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e868:	4639      	mov	r1, r7
 800e86a:	4640      	mov	r0, r8
 800e86c:	4798      	blx	r3
 800e86e:	2800      	cmp	r0, #0
 800e870:	f43f aedf 	beq.w	800e632 <_scanf_float+0x46>
 800e874:	e6ea      	b.n	800e64c <_scanf_float+0x60>
 800e876:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e87a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e87e:	463a      	mov	r2, r7
 800e880:	4640      	mov	r0, r8
 800e882:	4798      	blx	r3
 800e884:	6923      	ldr	r3, [r4, #16]
 800e886:	3b01      	subs	r3, #1
 800e888:	6123      	str	r3, [r4, #16]
 800e88a:	e6ec      	b.n	800e666 <_scanf_float+0x7a>
 800e88c:	1e6b      	subs	r3, r5, #1
 800e88e:	2b06      	cmp	r3, #6
 800e890:	d825      	bhi.n	800e8de <_scanf_float+0x2f2>
 800e892:	2d02      	cmp	r5, #2
 800e894:	d836      	bhi.n	800e904 <_scanf_float+0x318>
 800e896:	455e      	cmp	r6, fp
 800e898:	f67f aee8 	bls.w	800e66c <_scanf_float+0x80>
 800e89c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e8a4:	463a      	mov	r2, r7
 800e8a6:	4640      	mov	r0, r8
 800e8a8:	4798      	blx	r3
 800e8aa:	6923      	ldr	r3, [r4, #16]
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	6123      	str	r3, [r4, #16]
 800e8b0:	e7f1      	b.n	800e896 <_scanf_float+0x2aa>
 800e8b2:	9802      	ldr	r0, [sp, #8]
 800e8b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e8bc:	9002      	str	r0, [sp, #8]
 800e8be:	463a      	mov	r2, r7
 800e8c0:	4640      	mov	r0, r8
 800e8c2:	4798      	blx	r3
 800e8c4:	6923      	ldr	r3, [r4, #16]
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	6123      	str	r3, [r4, #16]
 800e8ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8ce:	fa5f fa8a 	uxtb.w	sl, sl
 800e8d2:	f1ba 0f02 	cmp.w	sl, #2
 800e8d6:	d1ec      	bne.n	800e8b2 <_scanf_float+0x2c6>
 800e8d8:	3d03      	subs	r5, #3
 800e8da:	b2ed      	uxtb	r5, r5
 800e8dc:	1b76      	subs	r6, r6, r5
 800e8de:	6823      	ldr	r3, [r4, #0]
 800e8e0:	05da      	lsls	r2, r3, #23
 800e8e2:	d52f      	bpl.n	800e944 <_scanf_float+0x358>
 800e8e4:	055b      	lsls	r3, r3, #21
 800e8e6:	d510      	bpl.n	800e90a <_scanf_float+0x31e>
 800e8e8:	455e      	cmp	r6, fp
 800e8ea:	f67f aebf 	bls.w	800e66c <_scanf_float+0x80>
 800e8ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e8f6:	463a      	mov	r2, r7
 800e8f8:	4640      	mov	r0, r8
 800e8fa:	4798      	blx	r3
 800e8fc:	6923      	ldr	r3, [r4, #16]
 800e8fe:	3b01      	subs	r3, #1
 800e900:	6123      	str	r3, [r4, #16]
 800e902:	e7f1      	b.n	800e8e8 <_scanf_float+0x2fc>
 800e904:	46aa      	mov	sl, r5
 800e906:	9602      	str	r6, [sp, #8]
 800e908:	e7df      	b.n	800e8ca <_scanf_float+0x2de>
 800e90a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e90e:	6923      	ldr	r3, [r4, #16]
 800e910:	2965      	cmp	r1, #101	; 0x65
 800e912:	f103 33ff 	add.w	r3, r3, #4294967295
 800e916:	f106 35ff 	add.w	r5, r6, #4294967295
 800e91a:	6123      	str	r3, [r4, #16]
 800e91c:	d00c      	beq.n	800e938 <_scanf_float+0x34c>
 800e91e:	2945      	cmp	r1, #69	; 0x45
 800e920:	d00a      	beq.n	800e938 <_scanf_float+0x34c>
 800e922:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e926:	463a      	mov	r2, r7
 800e928:	4640      	mov	r0, r8
 800e92a:	4798      	blx	r3
 800e92c:	6923      	ldr	r3, [r4, #16]
 800e92e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e932:	3b01      	subs	r3, #1
 800e934:	1eb5      	subs	r5, r6, #2
 800e936:	6123      	str	r3, [r4, #16]
 800e938:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e93c:	463a      	mov	r2, r7
 800e93e:	4640      	mov	r0, r8
 800e940:	4798      	blx	r3
 800e942:	462e      	mov	r6, r5
 800e944:	6825      	ldr	r5, [r4, #0]
 800e946:	f015 0510 	ands.w	r5, r5, #16
 800e94a:	d158      	bne.n	800e9fe <_scanf_float+0x412>
 800e94c:	7035      	strb	r5, [r6, #0]
 800e94e:	6823      	ldr	r3, [r4, #0]
 800e950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e958:	d11c      	bne.n	800e994 <_scanf_float+0x3a8>
 800e95a:	9b01      	ldr	r3, [sp, #4]
 800e95c:	454b      	cmp	r3, r9
 800e95e:	eba3 0209 	sub.w	r2, r3, r9
 800e962:	d124      	bne.n	800e9ae <_scanf_float+0x3c2>
 800e964:	2200      	movs	r2, #0
 800e966:	4659      	mov	r1, fp
 800e968:	4640      	mov	r0, r8
 800e96a:	f002 fc09 	bl	8011180 <_strtod_r>
 800e96e:	9b03      	ldr	r3, [sp, #12]
 800e970:	6821      	ldr	r1, [r4, #0]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f011 0f02 	tst.w	r1, #2
 800e978:	ec57 6b10 	vmov	r6, r7, d0
 800e97c:	f103 0204 	add.w	r2, r3, #4
 800e980:	d020      	beq.n	800e9c4 <_scanf_float+0x3d8>
 800e982:	9903      	ldr	r1, [sp, #12]
 800e984:	600a      	str	r2, [r1, #0]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	e9c3 6700 	strd	r6, r7, [r3]
 800e98c:	68e3      	ldr	r3, [r4, #12]
 800e98e:	3301      	adds	r3, #1
 800e990:	60e3      	str	r3, [r4, #12]
 800e992:	e66c      	b.n	800e66e <_scanf_float+0x82>
 800e994:	9b04      	ldr	r3, [sp, #16]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d0e4      	beq.n	800e964 <_scanf_float+0x378>
 800e99a:	9905      	ldr	r1, [sp, #20]
 800e99c:	230a      	movs	r3, #10
 800e99e:	462a      	mov	r2, r5
 800e9a0:	3101      	adds	r1, #1
 800e9a2:	4640      	mov	r0, r8
 800e9a4:	f002 fc74 	bl	8011290 <_strtol_r>
 800e9a8:	9b04      	ldr	r3, [sp, #16]
 800e9aa:	9e05      	ldr	r6, [sp, #20]
 800e9ac:	1ac2      	subs	r2, r0, r3
 800e9ae:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e9b2:	429e      	cmp	r6, r3
 800e9b4:	bf28      	it	cs
 800e9b6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e9ba:	4912      	ldr	r1, [pc, #72]	; (800ea04 <_scanf_float+0x418>)
 800e9bc:	4630      	mov	r0, r6
 800e9be:	f000 f8f9 	bl	800ebb4 <siprintf>
 800e9c2:	e7cf      	b.n	800e964 <_scanf_float+0x378>
 800e9c4:	f011 0f04 	tst.w	r1, #4
 800e9c8:	9903      	ldr	r1, [sp, #12]
 800e9ca:	600a      	str	r2, [r1, #0]
 800e9cc:	d1db      	bne.n	800e986 <_scanf_float+0x39a>
 800e9ce:	f8d3 8000 	ldr.w	r8, [r3]
 800e9d2:	ee10 2a10 	vmov	r2, s0
 800e9d6:	ee10 0a10 	vmov	r0, s0
 800e9da:	463b      	mov	r3, r7
 800e9dc:	4639      	mov	r1, r7
 800e9de:	f7f2 f8cd 	bl	8000b7c <__aeabi_dcmpun>
 800e9e2:	b128      	cbz	r0, 800e9f0 <_scanf_float+0x404>
 800e9e4:	4808      	ldr	r0, [pc, #32]	; (800ea08 <_scanf_float+0x41c>)
 800e9e6:	f000 fa45 	bl	800ee74 <nanf>
 800e9ea:	ed88 0a00 	vstr	s0, [r8]
 800e9ee:	e7cd      	b.n	800e98c <_scanf_float+0x3a0>
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	4639      	mov	r1, r7
 800e9f4:	f7f2 f920 	bl	8000c38 <__aeabi_d2f>
 800e9f8:	f8c8 0000 	str.w	r0, [r8]
 800e9fc:	e7c6      	b.n	800e98c <_scanf_float+0x3a0>
 800e9fe:	2500      	movs	r5, #0
 800ea00:	e635      	b.n	800e66e <_scanf_float+0x82>
 800ea02:	bf00      	nop
 800ea04:	080134a4 	.word	0x080134a4
 800ea08:	0801346f 	.word	0x0801346f

0800ea0c <std>:
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	b510      	push	{r4, lr}
 800ea10:	4604      	mov	r4, r0
 800ea12:	e9c0 3300 	strd	r3, r3, [r0]
 800ea16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea1a:	6083      	str	r3, [r0, #8]
 800ea1c:	8181      	strh	r1, [r0, #12]
 800ea1e:	6643      	str	r3, [r0, #100]	; 0x64
 800ea20:	81c2      	strh	r2, [r0, #14]
 800ea22:	6183      	str	r3, [r0, #24]
 800ea24:	4619      	mov	r1, r3
 800ea26:	2208      	movs	r2, #8
 800ea28:	305c      	adds	r0, #92	; 0x5c
 800ea2a:	f000 f940 	bl	800ecae <memset>
 800ea2e:	4b0d      	ldr	r3, [pc, #52]	; (800ea64 <std+0x58>)
 800ea30:	6263      	str	r3, [r4, #36]	; 0x24
 800ea32:	4b0d      	ldr	r3, [pc, #52]	; (800ea68 <std+0x5c>)
 800ea34:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea36:	4b0d      	ldr	r3, [pc, #52]	; (800ea6c <std+0x60>)
 800ea38:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea3a:	4b0d      	ldr	r3, [pc, #52]	; (800ea70 <std+0x64>)
 800ea3c:	6323      	str	r3, [r4, #48]	; 0x30
 800ea3e:	4b0d      	ldr	r3, [pc, #52]	; (800ea74 <std+0x68>)
 800ea40:	6224      	str	r4, [r4, #32]
 800ea42:	429c      	cmp	r4, r3
 800ea44:	d006      	beq.n	800ea54 <std+0x48>
 800ea46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ea4a:	4294      	cmp	r4, r2
 800ea4c:	d002      	beq.n	800ea54 <std+0x48>
 800ea4e:	33d0      	adds	r3, #208	; 0xd0
 800ea50:	429c      	cmp	r4, r3
 800ea52:	d105      	bne.n	800ea60 <std+0x54>
 800ea54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea5c:	f000 b9f8 	b.w	800ee50 <__retarget_lock_init_recursive>
 800ea60:	bd10      	pop	{r4, pc}
 800ea62:	bf00      	nop
 800ea64:	0800ebf5 	.word	0x0800ebf5
 800ea68:	0800ec17 	.word	0x0800ec17
 800ea6c:	0800ec4f 	.word	0x0800ec4f
 800ea70:	0800ec73 	.word	0x0800ec73
 800ea74:	20000470 	.word	0x20000470

0800ea78 <stdio_exit_handler>:
 800ea78:	4a02      	ldr	r2, [pc, #8]	; (800ea84 <stdio_exit_handler+0xc>)
 800ea7a:	4903      	ldr	r1, [pc, #12]	; (800ea88 <stdio_exit_handler+0x10>)
 800ea7c:	4803      	ldr	r0, [pc, #12]	; (800ea8c <stdio_exit_handler+0x14>)
 800ea7e:	f000 b87b 	b.w	800eb78 <_fwalk_sglue>
 800ea82:	bf00      	nop
 800ea84:	2000000c 	.word	0x2000000c
 800ea88:	080118d9 	.word	0x080118d9
 800ea8c:	20000018 	.word	0x20000018

0800ea90 <cleanup_stdio>:
 800ea90:	6841      	ldr	r1, [r0, #4]
 800ea92:	4b0c      	ldr	r3, [pc, #48]	; (800eac4 <cleanup_stdio+0x34>)
 800ea94:	4299      	cmp	r1, r3
 800ea96:	b510      	push	{r4, lr}
 800ea98:	4604      	mov	r4, r0
 800ea9a:	d001      	beq.n	800eaa0 <cleanup_stdio+0x10>
 800ea9c:	f002 ff1c 	bl	80118d8 <_fflush_r>
 800eaa0:	68a1      	ldr	r1, [r4, #8]
 800eaa2:	4b09      	ldr	r3, [pc, #36]	; (800eac8 <cleanup_stdio+0x38>)
 800eaa4:	4299      	cmp	r1, r3
 800eaa6:	d002      	beq.n	800eaae <cleanup_stdio+0x1e>
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f002 ff15 	bl	80118d8 <_fflush_r>
 800eaae:	68e1      	ldr	r1, [r4, #12]
 800eab0:	4b06      	ldr	r3, [pc, #24]	; (800eacc <cleanup_stdio+0x3c>)
 800eab2:	4299      	cmp	r1, r3
 800eab4:	d004      	beq.n	800eac0 <cleanup_stdio+0x30>
 800eab6:	4620      	mov	r0, r4
 800eab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eabc:	f002 bf0c 	b.w	80118d8 <_fflush_r>
 800eac0:	bd10      	pop	{r4, pc}
 800eac2:	bf00      	nop
 800eac4:	20000470 	.word	0x20000470
 800eac8:	200004d8 	.word	0x200004d8
 800eacc:	20000540 	.word	0x20000540

0800ead0 <global_stdio_init.part.0>:
 800ead0:	b510      	push	{r4, lr}
 800ead2:	4b0b      	ldr	r3, [pc, #44]	; (800eb00 <global_stdio_init.part.0+0x30>)
 800ead4:	4c0b      	ldr	r4, [pc, #44]	; (800eb04 <global_stdio_init.part.0+0x34>)
 800ead6:	4a0c      	ldr	r2, [pc, #48]	; (800eb08 <global_stdio_init.part.0+0x38>)
 800ead8:	601a      	str	r2, [r3, #0]
 800eada:	4620      	mov	r0, r4
 800eadc:	2200      	movs	r2, #0
 800eade:	2104      	movs	r1, #4
 800eae0:	f7ff ff94 	bl	800ea0c <std>
 800eae4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800eae8:	2201      	movs	r2, #1
 800eaea:	2109      	movs	r1, #9
 800eaec:	f7ff ff8e 	bl	800ea0c <std>
 800eaf0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800eaf4:	2202      	movs	r2, #2
 800eaf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eafa:	2112      	movs	r1, #18
 800eafc:	f7ff bf86 	b.w	800ea0c <std>
 800eb00:	200005a8 	.word	0x200005a8
 800eb04:	20000470 	.word	0x20000470
 800eb08:	0800ea79 	.word	0x0800ea79

0800eb0c <__sfp_lock_acquire>:
 800eb0c:	4801      	ldr	r0, [pc, #4]	; (800eb14 <__sfp_lock_acquire+0x8>)
 800eb0e:	f000 b9a0 	b.w	800ee52 <__retarget_lock_acquire_recursive>
 800eb12:	bf00      	nop
 800eb14:	200005b1 	.word	0x200005b1

0800eb18 <__sfp_lock_release>:
 800eb18:	4801      	ldr	r0, [pc, #4]	; (800eb20 <__sfp_lock_release+0x8>)
 800eb1a:	f000 b99b 	b.w	800ee54 <__retarget_lock_release_recursive>
 800eb1e:	bf00      	nop
 800eb20:	200005b1 	.word	0x200005b1

0800eb24 <__sinit>:
 800eb24:	b510      	push	{r4, lr}
 800eb26:	4604      	mov	r4, r0
 800eb28:	f7ff fff0 	bl	800eb0c <__sfp_lock_acquire>
 800eb2c:	6a23      	ldr	r3, [r4, #32]
 800eb2e:	b11b      	cbz	r3, 800eb38 <__sinit+0x14>
 800eb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb34:	f7ff bff0 	b.w	800eb18 <__sfp_lock_release>
 800eb38:	4b04      	ldr	r3, [pc, #16]	; (800eb4c <__sinit+0x28>)
 800eb3a:	6223      	str	r3, [r4, #32]
 800eb3c:	4b04      	ldr	r3, [pc, #16]	; (800eb50 <__sinit+0x2c>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1f5      	bne.n	800eb30 <__sinit+0xc>
 800eb44:	f7ff ffc4 	bl	800ead0 <global_stdio_init.part.0>
 800eb48:	e7f2      	b.n	800eb30 <__sinit+0xc>
 800eb4a:	bf00      	nop
 800eb4c:	0800ea91 	.word	0x0800ea91
 800eb50:	200005a8 	.word	0x200005a8

0800eb54 <fiprintf>:
 800eb54:	b40e      	push	{r1, r2, r3}
 800eb56:	b503      	push	{r0, r1, lr}
 800eb58:	4601      	mov	r1, r0
 800eb5a:	ab03      	add	r3, sp, #12
 800eb5c:	4805      	ldr	r0, [pc, #20]	; (800eb74 <fiprintf+0x20>)
 800eb5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb62:	6800      	ldr	r0, [r0, #0]
 800eb64:	9301      	str	r3, [sp, #4]
 800eb66:	f002 fd17 	bl	8011598 <_vfiprintf_r>
 800eb6a:	b002      	add	sp, #8
 800eb6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb70:	b003      	add	sp, #12
 800eb72:	4770      	bx	lr
 800eb74:	20000064 	.word	0x20000064

0800eb78 <_fwalk_sglue>:
 800eb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb7c:	4607      	mov	r7, r0
 800eb7e:	4688      	mov	r8, r1
 800eb80:	4614      	mov	r4, r2
 800eb82:	2600      	movs	r6, #0
 800eb84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb88:	f1b9 0901 	subs.w	r9, r9, #1
 800eb8c:	d505      	bpl.n	800eb9a <_fwalk_sglue+0x22>
 800eb8e:	6824      	ldr	r4, [r4, #0]
 800eb90:	2c00      	cmp	r4, #0
 800eb92:	d1f7      	bne.n	800eb84 <_fwalk_sglue+0xc>
 800eb94:	4630      	mov	r0, r6
 800eb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb9a:	89ab      	ldrh	r3, [r5, #12]
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d907      	bls.n	800ebb0 <_fwalk_sglue+0x38>
 800eba0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eba4:	3301      	adds	r3, #1
 800eba6:	d003      	beq.n	800ebb0 <_fwalk_sglue+0x38>
 800eba8:	4629      	mov	r1, r5
 800ebaa:	4638      	mov	r0, r7
 800ebac:	47c0      	blx	r8
 800ebae:	4306      	orrs	r6, r0
 800ebb0:	3568      	adds	r5, #104	; 0x68
 800ebb2:	e7e9      	b.n	800eb88 <_fwalk_sglue+0x10>

0800ebb4 <siprintf>:
 800ebb4:	b40e      	push	{r1, r2, r3}
 800ebb6:	b500      	push	{lr}
 800ebb8:	b09c      	sub	sp, #112	; 0x70
 800ebba:	ab1d      	add	r3, sp, #116	; 0x74
 800ebbc:	9002      	str	r0, [sp, #8]
 800ebbe:	9006      	str	r0, [sp, #24]
 800ebc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ebc4:	4809      	ldr	r0, [pc, #36]	; (800ebec <siprintf+0x38>)
 800ebc6:	9107      	str	r1, [sp, #28]
 800ebc8:	9104      	str	r1, [sp, #16]
 800ebca:	4909      	ldr	r1, [pc, #36]	; (800ebf0 <siprintf+0x3c>)
 800ebcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebd0:	9105      	str	r1, [sp, #20]
 800ebd2:	6800      	ldr	r0, [r0, #0]
 800ebd4:	9301      	str	r3, [sp, #4]
 800ebd6:	a902      	add	r1, sp, #8
 800ebd8:	f002 fbb6 	bl	8011348 <_svfiprintf_r>
 800ebdc:	9b02      	ldr	r3, [sp, #8]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	701a      	strb	r2, [r3, #0]
 800ebe2:	b01c      	add	sp, #112	; 0x70
 800ebe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebe8:	b003      	add	sp, #12
 800ebea:	4770      	bx	lr
 800ebec:	20000064 	.word	0x20000064
 800ebf0:	ffff0208 	.word	0xffff0208

0800ebf4 <__sread>:
 800ebf4:	b510      	push	{r4, lr}
 800ebf6:	460c      	mov	r4, r1
 800ebf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebfc:	f000 f8b6 	bl	800ed6c <_read_r>
 800ec00:	2800      	cmp	r0, #0
 800ec02:	bfab      	itete	ge
 800ec04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec06:	89a3      	ldrhlt	r3, [r4, #12]
 800ec08:	181b      	addge	r3, r3, r0
 800ec0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec0e:	bfac      	ite	ge
 800ec10:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec12:	81a3      	strhlt	r3, [r4, #12]
 800ec14:	bd10      	pop	{r4, pc}

0800ec16 <__swrite>:
 800ec16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1a:	461f      	mov	r7, r3
 800ec1c:	898b      	ldrh	r3, [r1, #12]
 800ec1e:	05db      	lsls	r3, r3, #23
 800ec20:	4605      	mov	r5, r0
 800ec22:	460c      	mov	r4, r1
 800ec24:	4616      	mov	r6, r2
 800ec26:	d505      	bpl.n	800ec34 <__swrite+0x1e>
 800ec28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec2c:	2302      	movs	r3, #2
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f000 f88a 	bl	800ed48 <_lseek_r>
 800ec34:	89a3      	ldrh	r3, [r4, #12]
 800ec36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec3e:	81a3      	strh	r3, [r4, #12]
 800ec40:	4632      	mov	r2, r6
 800ec42:	463b      	mov	r3, r7
 800ec44:	4628      	mov	r0, r5
 800ec46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec4a:	f000 b8c5 	b.w	800edd8 <_write_r>

0800ec4e <__sseek>:
 800ec4e:	b510      	push	{r4, lr}
 800ec50:	460c      	mov	r4, r1
 800ec52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec56:	f000 f877 	bl	800ed48 <_lseek_r>
 800ec5a:	1c43      	adds	r3, r0, #1
 800ec5c:	89a3      	ldrh	r3, [r4, #12]
 800ec5e:	bf15      	itete	ne
 800ec60:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec6a:	81a3      	strheq	r3, [r4, #12]
 800ec6c:	bf18      	it	ne
 800ec6e:	81a3      	strhne	r3, [r4, #12]
 800ec70:	bd10      	pop	{r4, pc}

0800ec72 <__sclose>:
 800ec72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec76:	f000 b857 	b.w	800ed28 <_close_r>

0800ec7a <memmove>:
 800ec7a:	4288      	cmp	r0, r1
 800ec7c:	b510      	push	{r4, lr}
 800ec7e:	eb01 0402 	add.w	r4, r1, r2
 800ec82:	d902      	bls.n	800ec8a <memmove+0x10>
 800ec84:	4284      	cmp	r4, r0
 800ec86:	4623      	mov	r3, r4
 800ec88:	d807      	bhi.n	800ec9a <memmove+0x20>
 800ec8a:	1e43      	subs	r3, r0, #1
 800ec8c:	42a1      	cmp	r1, r4
 800ec8e:	d008      	beq.n	800eca2 <memmove+0x28>
 800ec90:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec94:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec98:	e7f8      	b.n	800ec8c <memmove+0x12>
 800ec9a:	4402      	add	r2, r0
 800ec9c:	4601      	mov	r1, r0
 800ec9e:	428a      	cmp	r2, r1
 800eca0:	d100      	bne.n	800eca4 <memmove+0x2a>
 800eca2:	bd10      	pop	{r4, pc}
 800eca4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eca8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ecac:	e7f7      	b.n	800ec9e <memmove+0x24>

0800ecae <memset>:
 800ecae:	4402      	add	r2, r0
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d100      	bne.n	800ecb8 <memset+0xa>
 800ecb6:	4770      	bx	lr
 800ecb8:	f803 1b01 	strb.w	r1, [r3], #1
 800ecbc:	e7f9      	b.n	800ecb2 <memset+0x4>

0800ecbe <_raise_r>:
 800ecbe:	291f      	cmp	r1, #31
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	460d      	mov	r5, r1
 800ecc6:	d904      	bls.n	800ecd2 <_raise_r+0x14>
 800ecc8:	2316      	movs	r3, #22
 800ecca:	6003      	str	r3, [r0, #0]
 800eccc:	f04f 30ff 	mov.w	r0, #4294967295
 800ecd0:	bd38      	pop	{r3, r4, r5, pc}
 800ecd2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ecd4:	b112      	cbz	r2, 800ecdc <_raise_r+0x1e>
 800ecd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ecda:	b94b      	cbnz	r3, 800ecf0 <_raise_r+0x32>
 800ecdc:	4620      	mov	r0, r4
 800ecde:	f000 f869 	bl	800edb4 <_getpid_r>
 800ece2:	462a      	mov	r2, r5
 800ece4:	4601      	mov	r1, r0
 800ece6:	4620      	mov	r0, r4
 800ece8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecec:	f000 b850 	b.w	800ed90 <_kill_r>
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d00a      	beq.n	800ed0a <_raise_r+0x4c>
 800ecf4:	1c59      	adds	r1, r3, #1
 800ecf6:	d103      	bne.n	800ed00 <_raise_r+0x42>
 800ecf8:	2316      	movs	r3, #22
 800ecfa:	6003      	str	r3, [r0, #0]
 800ecfc:	2001      	movs	r0, #1
 800ecfe:	e7e7      	b.n	800ecd0 <_raise_r+0x12>
 800ed00:	2400      	movs	r4, #0
 800ed02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ed06:	4628      	mov	r0, r5
 800ed08:	4798      	blx	r3
 800ed0a:	2000      	movs	r0, #0
 800ed0c:	e7e0      	b.n	800ecd0 <_raise_r+0x12>
	...

0800ed10 <raise>:
 800ed10:	4b02      	ldr	r3, [pc, #8]	; (800ed1c <raise+0xc>)
 800ed12:	4601      	mov	r1, r0
 800ed14:	6818      	ldr	r0, [r3, #0]
 800ed16:	f7ff bfd2 	b.w	800ecbe <_raise_r>
 800ed1a:	bf00      	nop
 800ed1c:	20000064 	.word	0x20000064

0800ed20 <_localeconv_r>:
 800ed20:	4800      	ldr	r0, [pc, #0]	; (800ed24 <_localeconv_r+0x4>)
 800ed22:	4770      	bx	lr
 800ed24:	20000158 	.word	0x20000158

0800ed28 <_close_r>:
 800ed28:	b538      	push	{r3, r4, r5, lr}
 800ed2a:	4d06      	ldr	r5, [pc, #24]	; (800ed44 <_close_r+0x1c>)
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	4604      	mov	r4, r0
 800ed30:	4608      	mov	r0, r1
 800ed32:	602b      	str	r3, [r5, #0]
 800ed34:	f7f5 fdb7 	bl	80048a6 <_close>
 800ed38:	1c43      	adds	r3, r0, #1
 800ed3a:	d102      	bne.n	800ed42 <_close_r+0x1a>
 800ed3c:	682b      	ldr	r3, [r5, #0]
 800ed3e:	b103      	cbz	r3, 800ed42 <_close_r+0x1a>
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	bd38      	pop	{r3, r4, r5, pc}
 800ed44:	200005ac 	.word	0x200005ac

0800ed48 <_lseek_r>:
 800ed48:	b538      	push	{r3, r4, r5, lr}
 800ed4a:	4d07      	ldr	r5, [pc, #28]	; (800ed68 <_lseek_r+0x20>)
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	4608      	mov	r0, r1
 800ed50:	4611      	mov	r1, r2
 800ed52:	2200      	movs	r2, #0
 800ed54:	602a      	str	r2, [r5, #0]
 800ed56:	461a      	mov	r2, r3
 800ed58:	f7f5 fdcc 	bl	80048f4 <_lseek>
 800ed5c:	1c43      	adds	r3, r0, #1
 800ed5e:	d102      	bne.n	800ed66 <_lseek_r+0x1e>
 800ed60:	682b      	ldr	r3, [r5, #0]
 800ed62:	b103      	cbz	r3, 800ed66 <_lseek_r+0x1e>
 800ed64:	6023      	str	r3, [r4, #0]
 800ed66:	bd38      	pop	{r3, r4, r5, pc}
 800ed68:	200005ac 	.word	0x200005ac

0800ed6c <_read_r>:
 800ed6c:	b538      	push	{r3, r4, r5, lr}
 800ed6e:	4d07      	ldr	r5, [pc, #28]	; (800ed8c <_read_r+0x20>)
 800ed70:	4604      	mov	r4, r0
 800ed72:	4608      	mov	r0, r1
 800ed74:	4611      	mov	r1, r2
 800ed76:	2200      	movs	r2, #0
 800ed78:	602a      	str	r2, [r5, #0]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	f7f5 fd5a 	bl	8004834 <_read>
 800ed80:	1c43      	adds	r3, r0, #1
 800ed82:	d102      	bne.n	800ed8a <_read_r+0x1e>
 800ed84:	682b      	ldr	r3, [r5, #0]
 800ed86:	b103      	cbz	r3, 800ed8a <_read_r+0x1e>
 800ed88:	6023      	str	r3, [r4, #0]
 800ed8a:	bd38      	pop	{r3, r4, r5, pc}
 800ed8c:	200005ac 	.word	0x200005ac

0800ed90 <_kill_r>:
 800ed90:	b538      	push	{r3, r4, r5, lr}
 800ed92:	4d07      	ldr	r5, [pc, #28]	; (800edb0 <_kill_r+0x20>)
 800ed94:	2300      	movs	r3, #0
 800ed96:	4604      	mov	r4, r0
 800ed98:	4608      	mov	r0, r1
 800ed9a:	4611      	mov	r1, r2
 800ed9c:	602b      	str	r3, [r5, #0]
 800ed9e:	f7f5 fd2f 	bl	8004800 <_kill>
 800eda2:	1c43      	adds	r3, r0, #1
 800eda4:	d102      	bne.n	800edac <_kill_r+0x1c>
 800eda6:	682b      	ldr	r3, [r5, #0]
 800eda8:	b103      	cbz	r3, 800edac <_kill_r+0x1c>
 800edaa:	6023      	str	r3, [r4, #0]
 800edac:	bd38      	pop	{r3, r4, r5, pc}
 800edae:	bf00      	nop
 800edb0:	200005ac 	.word	0x200005ac

0800edb4 <_getpid_r>:
 800edb4:	f7f5 bd1c 	b.w	80047f0 <_getpid>

0800edb8 <_sbrk_r>:
 800edb8:	b538      	push	{r3, r4, r5, lr}
 800edba:	4d06      	ldr	r5, [pc, #24]	; (800edd4 <_sbrk_r+0x1c>)
 800edbc:	2300      	movs	r3, #0
 800edbe:	4604      	mov	r4, r0
 800edc0:	4608      	mov	r0, r1
 800edc2:	602b      	str	r3, [r5, #0]
 800edc4:	f7f5 fda4 	bl	8004910 <_sbrk>
 800edc8:	1c43      	adds	r3, r0, #1
 800edca:	d102      	bne.n	800edd2 <_sbrk_r+0x1a>
 800edcc:	682b      	ldr	r3, [r5, #0]
 800edce:	b103      	cbz	r3, 800edd2 <_sbrk_r+0x1a>
 800edd0:	6023      	str	r3, [r4, #0]
 800edd2:	bd38      	pop	{r3, r4, r5, pc}
 800edd4:	200005ac 	.word	0x200005ac

0800edd8 <_write_r>:
 800edd8:	b538      	push	{r3, r4, r5, lr}
 800edda:	4d07      	ldr	r5, [pc, #28]	; (800edf8 <_write_r+0x20>)
 800eddc:	4604      	mov	r4, r0
 800edde:	4608      	mov	r0, r1
 800ede0:	4611      	mov	r1, r2
 800ede2:	2200      	movs	r2, #0
 800ede4:	602a      	str	r2, [r5, #0]
 800ede6:	461a      	mov	r2, r3
 800ede8:	f7f5 fd41 	bl	800486e <_write>
 800edec:	1c43      	adds	r3, r0, #1
 800edee:	d102      	bne.n	800edf6 <_write_r+0x1e>
 800edf0:	682b      	ldr	r3, [r5, #0]
 800edf2:	b103      	cbz	r3, 800edf6 <_write_r+0x1e>
 800edf4:	6023      	str	r3, [r4, #0]
 800edf6:	bd38      	pop	{r3, r4, r5, pc}
 800edf8:	200005ac 	.word	0x200005ac

0800edfc <__errno>:
 800edfc:	4b01      	ldr	r3, [pc, #4]	; (800ee04 <__errno+0x8>)
 800edfe:	6818      	ldr	r0, [r3, #0]
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop
 800ee04:	20000064 	.word	0x20000064

0800ee08 <__libc_init_array>:
 800ee08:	b570      	push	{r4, r5, r6, lr}
 800ee0a:	4d0d      	ldr	r5, [pc, #52]	; (800ee40 <__libc_init_array+0x38>)
 800ee0c:	4c0d      	ldr	r4, [pc, #52]	; (800ee44 <__libc_init_array+0x3c>)
 800ee0e:	1b64      	subs	r4, r4, r5
 800ee10:	10a4      	asrs	r4, r4, #2
 800ee12:	2600      	movs	r6, #0
 800ee14:	42a6      	cmp	r6, r4
 800ee16:	d109      	bne.n	800ee2c <__libc_init_array+0x24>
 800ee18:	4d0b      	ldr	r5, [pc, #44]	; (800ee48 <__libc_init_array+0x40>)
 800ee1a:	4c0c      	ldr	r4, [pc, #48]	; (800ee4c <__libc_init_array+0x44>)
 800ee1c:	f003 fa7c 	bl	8012318 <_init>
 800ee20:	1b64      	subs	r4, r4, r5
 800ee22:	10a4      	asrs	r4, r4, #2
 800ee24:	2600      	movs	r6, #0
 800ee26:	42a6      	cmp	r6, r4
 800ee28:	d105      	bne.n	800ee36 <__libc_init_array+0x2e>
 800ee2a:	bd70      	pop	{r4, r5, r6, pc}
 800ee2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee30:	4798      	blx	r3
 800ee32:	3601      	adds	r6, #1
 800ee34:	e7ee      	b.n	800ee14 <__libc_init_array+0xc>
 800ee36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee3a:	4798      	blx	r3
 800ee3c:	3601      	adds	r6, #1
 800ee3e:	e7f2      	b.n	800ee26 <__libc_init_array+0x1e>
 800ee40:	08013864 	.word	0x08013864
 800ee44:	08013864 	.word	0x08013864
 800ee48:	08013864 	.word	0x08013864
 800ee4c:	08013870 	.word	0x08013870

0800ee50 <__retarget_lock_init_recursive>:
 800ee50:	4770      	bx	lr

0800ee52 <__retarget_lock_acquire_recursive>:
 800ee52:	4770      	bx	lr

0800ee54 <__retarget_lock_release_recursive>:
 800ee54:	4770      	bx	lr

0800ee56 <memcpy>:
 800ee56:	440a      	add	r2, r1
 800ee58:	4291      	cmp	r1, r2
 800ee5a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee5e:	d100      	bne.n	800ee62 <memcpy+0xc>
 800ee60:	4770      	bx	lr
 800ee62:	b510      	push	{r4, lr}
 800ee64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee6c:	4291      	cmp	r1, r2
 800ee6e:	d1f9      	bne.n	800ee64 <memcpy+0xe>
 800ee70:	bd10      	pop	{r4, pc}
	...

0800ee74 <nanf>:
 800ee74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ee7c <nanf+0x8>
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	7fc00000 	.word	0x7fc00000

0800ee80 <quorem>:
 800ee80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	6903      	ldr	r3, [r0, #16]
 800ee86:	690c      	ldr	r4, [r1, #16]
 800ee88:	42a3      	cmp	r3, r4
 800ee8a:	4607      	mov	r7, r0
 800ee8c:	db7e      	blt.n	800ef8c <quorem+0x10c>
 800ee8e:	3c01      	subs	r4, #1
 800ee90:	f101 0814 	add.w	r8, r1, #20
 800ee94:	f100 0514 	add.w	r5, r0, #20
 800ee98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee9c:	9301      	str	r3, [sp, #4]
 800ee9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eea2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eea6:	3301      	adds	r3, #1
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eeae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eeb2:	fbb2 f6f3 	udiv	r6, r2, r3
 800eeb6:	d331      	bcc.n	800ef1c <quorem+0x9c>
 800eeb8:	f04f 0e00 	mov.w	lr, #0
 800eebc:	4640      	mov	r0, r8
 800eebe:	46ac      	mov	ip, r5
 800eec0:	46f2      	mov	sl, lr
 800eec2:	f850 2b04 	ldr.w	r2, [r0], #4
 800eec6:	b293      	uxth	r3, r2
 800eec8:	fb06 e303 	mla	r3, r6, r3, lr
 800eecc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eed0:	0c1a      	lsrs	r2, r3, #16
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	ebaa 0303 	sub.w	r3, sl, r3
 800eed8:	f8dc a000 	ldr.w	sl, [ip]
 800eedc:	fa13 f38a 	uxtah	r3, r3, sl
 800eee0:	fb06 220e 	mla	r2, r6, lr, r2
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	9b00      	ldr	r3, [sp, #0]
 800eee8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eeec:	b292      	uxth	r2, r2
 800eeee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800eef2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eef6:	f8bd 3000 	ldrh.w	r3, [sp]
 800eefa:	4581      	cmp	r9, r0
 800eefc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef00:	f84c 3b04 	str.w	r3, [ip], #4
 800ef04:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef08:	d2db      	bcs.n	800eec2 <quorem+0x42>
 800ef0a:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef0e:	b92b      	cbnz	r3, 800ef1c <quorem+0x9c>
 800ef10:	9b01      	ldr	r3, [sp, #4]
 800ef12:	3b04      	subs	r3, #4
 800ef14:	429d      	cmp	r5, r3
 800ef16:	461a      	mov	r2, r3
 800ef18:	d32c      	bcc.n	800ef74 <quorem+0xf4>
 800ef1a:	613c      	str	r4, [r7, #16]
 800ef1c:	4638      	mov	r0, r7
 800ef1e:	f001 f93b 	bl	8010198 <__mcmp>
 800ef22:	2800      	cmp	r0, #0
 800ef24:	db22      	blt.n	800ef6c <quorem+0xec>
 800ef26:	3601      	adds	r6, #1
 800ef28:	4629      	mov	r1, r5
 800ef2a:	2000      	movs	r0, #0
 800ef2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef30:	f8d1 c000 	ldr.w	ip, [r1]
 800ef34:	b293      	uxth	r3, r2
 800ef36:	1ac3      	subs	r3, r0, r3
 800ef38:	0c12      	lsrs	r2, r2, #16
 800ef3a:	fa13 f38c 	uxtah	r3, r3, ip
 800ef3e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ef42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef4c:	45c1      	cmp	r9, r8
 800ef4e:	f841 3b04 	str.w	r3, [r1], #4
 800ef52:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ef56:	d2e9      	bcs.n	800ef2c <quorem+0xac>
 800ef58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef60:	b922      	cbnz	r2, 800ef6c <quorem+0xec>
 800ef62:	3b04      	subs	r3, #4
 800ef64:	429d      	cmp	r5, r3
 800ef66:	461a      	mov	r2, r3
 800ef68:	d30a      	bcc.n	800ef80 <quorem+0x100>
 800ef6a:	613c      	str	r4, [r7, #16]
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	b003      	add	sp, #12
 800ef70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef74:	6812      	ldr	r2, [r2, #0]
 800ef76:	3b04      	subs	r3, #4
 800ef78:	2a00      	cmp	r2, #0
 800ef7a:	d1ce      	bne.n	800ef1a <quorem+0x9a>
 800ef7c:	3c01      	subs	r4, #1
 800ef7e:	e7c9      	b.n	800ef14 <quorem+0x94>
 800ef80:	6812      	ldr	r2, [r2, #0]
 800ef82:	3b04      	subs	r3, #4
 800ef84:	2a00      	cmp	r2, #0
 800ef86:	d1f0      	bne.n	800ef6a <quorem+0xea>
 800ef88:	3c01      	subs	r4, #1
 800ef8a:	e7eb      	b.n	800ef64 <quorem+0xe4>
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	e7ee      	b.n	800ef6e <quorem+0xee>

0800ef90 <_dtoa_r>:
 800ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef94:	ed2d 8b04 	vpush	{d8-d9}
 800ef98:	69c5      	ldr	r5, [r0, #28]
 800ef9a:	b093      	sub	sp, #76	; 0x4c
 800ef9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800efa0:	ec57 6b10 	vmov	r6, r7, d0
 800efa4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800efa8:	9107      	str	r1, [sp, #28]
 800efaa:	4604      	mov	r4, r0
 800efac:	920a      	str	r2, [sp, #40]	; 0x28
 800efae:	930d      	str	r3, [sp, #52]	; 0x34
 800efb0:	b975      	cbnz	r5, 800efd0 <_dtoa_r+0x40>
 800efb2:	2010      	movs	r0, #16
 800efb4:	f7fe fdf8 	bl	800dba8 <malloc>
 800efb8:	4602      	mov	r2, r0
 800efba:	61e0      	str	r0, [r4, #28]
 800efbc:	b920      	cbnz	r0, 800efc8 <_dtoa_r+0x38>
 800efbe:	4bae      	ldr	r3, [pc, #696]	; (800f278 <_dtoa_r+0x2e8>)
 800efc0:	21ef      	movs	r1, #239	; 0xef
 800efc2:	48ae      	ldr	r0, [pc, #696]	; (800f27c <_dtoa_r+0x2ec>)
 800efc4:	f7fe fdc0 	bl	800db48 <__assert_func>
 800efc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800efcc:	6005      	str	r5, [r0, #0]
 800efce:	60c5      	str	r5, [r0, #12]
 800efd0:	69e3      	ldr	r3, [r4, #28]
 800efd2:	6819      	ldr	r1, [r3, #0]
 800efd4:	b151      	cbz	r1, 800efec <_dtoa_r+0x5c>
 800efd6:	685a      	ldr	r2, [r3, #4]
 800efd8:	604a      	str	r2, [r1, #4]
 800efda:	2301      	movs	r3, #1
 800efdc:	4093      	lsls	r3, r2
 800efde:	608b      	str	r3, [r1, #8]
 800efe0:	4620      	mov	r0, r4
 800efe2:	f000 fe53 	bl	800fc8c <_Bfree>
 800efe6:	69e3      	ldr	r3, [r4, #28]
 800efe8:	2200      	movs	r2, #0
 800efea:	601a      	str	r2, [r3, #0]
 800efec:	1e3b      	subs	r3, r7, #0
 800efee:	bfbb      	ittet	lt
 800eff0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eff4:	9303      	strlt	r3, [sp, #12]
 800eff6:	2300      	movge	r3, #0
 800eff8:	2201      	movlt	r2, #1
 800effa:	bfac      	ite	ge
 800effc:	f8c8 3000 	strge.w	r3, [r8]
 800f000:	f8c8 2000 	strlt.w	r2, [r8]
 800f004:	4b9e      	ldr	r3, [pc, #632]	; (800f280 <_dtoa_r+0x2f0>)
 800f006:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f00a:	ea33 0308 	bics.w	r3, r3, r8
 800f00e:	d11b      	bne.n	800f048 <_dtoa_r+0xb8>
 800f010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f012:	f242 730f 	movw	r3, #9999	; 0x270f
 800f016:	6013      	str	r3, [r2, #0]
 800f018:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f01c:	4333      	orrs	r3, r6
 800f01e:	f000 8593 	beq.w	800fb48 <_dtoa_r+0xbb8>
 800f022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f024:	b963      	cbnz	r3, 800f040 <_dtoa_r+0xb0>
 800f026:	4b97      	ldr	r3, [pc, #604]	; (800f284 <_dtoa_r+0x2f4>)
 800f028:	e027      	b.n	800f07a <_dtoa_r+0xea>
 800f02a:	4b97      	ldr	r3, [pc, #604]	; (800f288 <_dtoa_r+0x2f8>)
 800f02c:	9300      	str	r3, [sp, #0]
 800f02e:	3308      	adds	r3, #8
 800f030:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f032:	6013      	str	r3, [r2, #0]
 800f034:	9800      	ldr	r0, [sp, #0]
 800f036:	b013      	add	sp, #76	; 0x4c
 800f038:	ecbd 8b04 	vpop	{d8-d9}
 800f03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f040:	4b90      	ldr	r3, [pc, #576]	; (800f284 <_dtoa_r+0x2f4>)
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	3303      	adds	r3, #3
 800f046:	e7f3      	b.n	800f030 <_dtoa_r+0xa0>
 800f048:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f04c:	2200      	movs	r2, #0
 800f04e:	ec51 0b17 	vmov	r0, r1, d7
 800f052:	eeb0 8a47 	vmov.f32	s16, s14
 800f056:	eef0 8a67 	vmov.f32	s17, s15
 800f05a:	2300      	movs	r3, #0
 800f05c:	f7f1 fd5c 	bl	8000b18 <__aeabi_dcmpeq>
 800f060:	4681      	mov	r9, r0
 800f062:	b160      	cbz	r0, 800f07e <_dtoa_r+0xee>
 800f064:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f066:	2301      	movs	r3, #1
 800f068:	6013      	str	r3, [r2, #0]
 800f06a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	f000 8568 	beq.w	800fb42 <_dtoa_r+0xbb2>
 800f072:	4b86      	ldr	r3, [pc, #536]	; (800f28c <_dtoa_r+0x2fc>)
 800f074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f076:	6013      	str	r3, [r2, #0]
 800f078:	3b01      	subs	r3, #1
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	e7da      	b.n	800f034 <_dtoa_r+0xa4>
 800f07e:	aa10      	add	r2, sp, #64	; 0x40
 800f080:	a911      	add	r1, sp, #68	; 0x44
 800f082:	4620      	mov	r0, r4
 800f084:	eeb0 0a48 	vmov.f32	s0, s16
 800f088:	eef0 0a68 	vmov.f32	s1, s17
 800f08c:	f001 f99a 	bl	80103c4 <__d2b>
 800f090:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f094:	4682      	mov	sl, r0
 800f096:	2d00      	cmp	r5, #0
 800f098:	d07f      	beq.n	800f19a <_dtoa_r+0x20a>
 800f09a:	ee18 3a90 	vmov	r3, s17
 800f09e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f0a6:	ec51 0b18 	vmov	r0, r1, d8
 800f0aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f0ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f0b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f0b6:	4619      	mov	r1, r3
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	4b75      	ldr	r3, [pc, #468]	; (800f290 <_dtoa_r+0x300>)
 800f0bc:	f7f1 f90c 	bl	80002d8 <__aeabi_dsub>
 800f0c0:	a367      	add	r3, pc, #412	; (adr r3, 800f260 <_dtoa_r+0x2d0>)
 800f0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c6:	f7f1 fabf 	bl	8000648 <__aeabi_dmul>
 800f0ca:	a367      	add	r3, pc, #412	; (adr r3, 800f268 <_dtoa_r+0x2d8>)
 800f0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d0:	f7f1 f904 	bl	80002dc <__adddf3>
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	460f      	mov	r7, r1
 800f0da:	f7f1 fa4b 	bl	8000574 <__aeabi_i2d>
 800f0de:	a364      	add	r3, pc, #400	; (adr r3, 800f270 <_dtoa_r+0x2e0>)
 800f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e4:	f7f1 fab0 	bl	8000648 <__aeabi_dmul>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	4639      	mov	r1, r7
 800f0f0:	f7f1 f8f4 	bl	80002dc <__adddf3>
 800f0f4:	4606      	mov	r6, r0
 800f0f6:	460f      	mov	r7, r1
 800f0f8:	f7f1 fd56 	bl	8000ba8 <__aeabi_d2iz>
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	4683      	mov	fp, r0
 800f100:	2300      	movs	r3, #0
 800f102:	4630      	mov	r0, r6
 800f104:	4639      	mov	r1, r7
 800f106:	f7f1 fd11 	bl	8000b2c <__aeabi_dcmplt>
 800f10a:	b148      	cbz	r0, 800f120 <_dtoa_r+0x190>
 800f10c:	4658      	mov	r0, fp
 800f10e:	f7f1 fa31 	bl	8000574 <__aeabi_i2d>
 800f112:	4632      	mov	r2, r6
 800f114:	463b      	mov	r3, r7
 800f116:	f7f1 fcff 	bl	8000b18 <__aeabi_dcmpeq>
 800f11a:	b908      	cbnz	r0, 800f120 <_dtoa_r+0x190>
 800f11c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f120:	f1bb 0f16 	cmp.w	fp, #22
 800f124:	d857      	bhi.n	800f1d6 <_dtoa_r+0x246>
 800f126:	4b5b      	ldr	r3, [pc, #364]	; (800f294 <_dtoa_r+0x304>)
 800f128:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f130:	ec51 0b18 	vmov	r0, r1, d8
 800f134:	f7f1 fcfa 	bl	8000b2c <__aeabi_dcmplt>
 800f138:	2800      	cmp	r0, #0
 800f13a:	d04e      	beq.n	800f1da <_dtoa_r+0x24a>
 800f13c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f140:	2300      	movs	r3, #0
 800f142:	930c      	str	r3, [sp, #48]	; 0x30
 800f144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f146:	1b5b      	subs	r3, r3, r5
 800f148:	1e5a      	subs	r2, r3, #1
 800f14a:	bf45      	ittet	mi
 800f14c:	f1c3 0301 	rsbmi	r3, r3, #1
 800f150:	9305      	strmi	r3, [sp, #20]
 800f152:	2300      	movpl	r3, #0
 800f154:	2300      	movmi	r3, #0
 800f156:	9206      	str	r2, [sp, #24]
 800f158:	bf54      	ite	pl
 800f15a:	9305      	strpl	r3, [sp, #20]
 800f15c:	9306      	strmi	r3, [sp, #24]
 800f15e:	f1bb 0f00 	cmp.w	fp, #0
 800f162:	db3c      	blt.n	800f1de <_dtoa_r+0x24e>
 800f164:	9b06      	ldr	r3, [sp, #24]
 800f166:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f16a:	445b      	add	r3, fp
 800f16c:	9306      	str	r3, [sp, #24]
 800f16e:	2300      	movs	r3, #0
 800f170:	9308      	str	r3, [sp, #32]
 800f172:	9b07      	ldr	r3, [sp, #28]
 800f174:	2b09      	cmp	r3, #9
 800f176:	d868      	bhi.n	800f24a <_dtoa_r+0x2ba>
 800f178:	2b05      	cmp	r3, #5
 800f17a:	bfc4      	itt	gt
 800f17c:	3b04      	subgt	r3, #4
 800f17e:	9307      	strgt	r3, [sp, #28]
 800f180:	9b07      	ldr	r3, [sp, #28]
 800f182:	f1a3 0302 	sub.w	r3, r3, #2
 800f186:	bfcc      	ite	gt
 800f188:	2500      	movgt	r5, #0
 800f18a:	2501      	movle	r5, #1
 800f18c:	2b03      	cmp	r3, #3
 800f18e:	f200 8085 	bhi.w	800f29c <_dtoa_r+0x30c>
 800f192:	e8df f003 	tbb	[pc, r3]
 800f196:	3b2e      	.short	0x3b2e
 800f198:	5839      	.short	0x5839
 800f19a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f19e:	441d      	add	r5, r3
 800f1a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f1a4:	2b20      	cmp	r3, #32
 800f1a6:	bfc1      	itttt	gt
 800f1a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f1ac:	fa08 f803 	lslgt.w	r8, r8, r3
 800f1b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f1b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f1b8:	bfd6      	itet	le
 800f1ba:	f1c3 0320 	rsble	r3, r3, #32
 800f1be:	ea48 0003 	orrgt.w	r0, r8, r3
 800f1c2:	fa06 f003 	lslle.w	r0, r6, r3
 800f1c6:	f7f1 f9c5 	bl	8000554 <__aeabi_ui2d>
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f1d0:	3d01      	subs	r5, #1
 800f1d2:	920e      	str	r2, [sp, #56]	; 0x38
 800f1d4:	e76f      	b.n	800f0b6 <_dtoa_r+0x126>
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	e7b3      	b.n	800f142 <_dtoa_r+0x1b2>
 800f1da:	900c      	str	r0, [sp, #48]	; 0x30
 800f1dc:	e7b2      	b.n	800f144 <_dtoa_r+0x1b4>
 800f1de:	9b05      	ldr	r3, [sp, #20]
 800f1e0:	eba3 030b 	sub.w	r3, r3, fp
 800f1e4:	9305      	str	r3, [sp, #20]
 800f1e6:	f1cb 0300 	rsb	r3, fp, #0
 800f1ea:	9308      	str	r3, [sp, #32]
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1f0:	e7bf      	b.n	800f172 <_dtoa_r+0x1e2>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	dc52      	bgt.n	800f2a2 <_dtoa_r+0x312>
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	9301      	str	r3, [sp, #4]
 800f200:	9304      	str	r3, [sp, #16]
 800f202:	461a      	mov	r2, r3
 800f204:	920a      	str	r2, [sp, #40]	; 0x28
 800f206:	e00b      	b.n	800f220 <_dtoa_r+0x290>
 800f208:	2301      	movs	r3, #1
 800f20a:	e7f3      	b.n	800f1f4 <_dtoa_r+0x264>
 800f20c:	2300      	movs	r3, #0
 800f20e:	9309      	str	r3, [sp, #36]	; 0x24
 800f210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f212:	445b      	add	r3, fp
 800f214:	9301      	str	r3, [sp, #4]
 800f216:	3301      	adds	r3, #1
 800f218:	2b01      	cmp	r3, #1
 800f21a:	9304      	str	r3, [sp, #16]
 800f21c:	bfb8      	it	lt
 800f21e:	2301      	movlt	r3, #1
 800f220:	69e0      	ldr	r0, [r4, #28]
 800f222:	2100      	movs	r1, #0
 800f224:	2204      	movs	r2, #4
 800f226:	f102 0614 	add.w	r6, r2, #20
 800f22a:	429e      	cmp	r6, r3
 800f22c:	d93d      	bls.n	800f2aa <_dtoa_r+0x31a>
 800f22e:	6041      	str	r1, [r0, #4]
 800f230:	4620      	mov	r0, r4
 800f232:	f000 fceb 	bl	800fc0c <_Balloc>
 800f236:	9000      	str	r0, [sp, #0]
 800f238:	2800      	cmp	r0, #0
 800f23a:	d139      	bne.n	800f2b0 <_dtoa_r+0x320>
 800f23c:	4b16      	ldr	r3, [pc, #88]	; (800f298 <_dtoa_r+0x308>)
 800f23e:	4602      	mov	r2, r0
 800f240:	f240 11af 	movw	r1, #431	; 0x1af
 800f244:	e6bd      	b.n	800efc2 <_dtoa_r+0x32>
 800f246:	2301      	movs	r3, #1
 800f248:	e7e1      	b.n	800f20e <_dtoa_r+0x27e>
 800f24a:	2501      	movs	r5, #1
 800f24c:	2300      	movs	r3, #0
 800f24e:	9307      	str	r3, [sp, #28]
 800f250:	9509      	str	r5, [sp, #36]	; 0x24
 800f252:	f04f 33ff 	mov.w	r3, #4294967295
 800f256:	9301      	str	r3, [sp, #4]
 800f258:	9304      	str	r3, [sp, #16]
 800f25a:	2200      	movs	r2, #0
 800f25c:	2312      	movs	r3, #18
 800f25e:	e7d1      	b.n	800f204 <_dtoa_r+0x274>
 800f260:	636f4361 	.word	0x636f4361
 800f264:	3fd287a7 	.word	0x3fd287a7
 800f268:	8b60c8b3 	.word	0x8b60c8b3
 800f26c:	3fc68a28 	.word	0x3fc68a28
 800f270:	509f79fb 	.word	0x509f79fb
 800f274:	3fd34413 	.word	0x3fd34413
 800f278:	080134b6 	.word	0x080134b6
 800f27c:	080134cd 	.word	0x080134cd
 800f280:	7ff00000 	.word	0x7ff00000
 800f284:	080134b2 	.word	0x080134b2
 800f288:	080134a9 	.word	0x080134a9
 800f28c:	08013481 	.word	0x08013481
 800f290:	3ff80000 	.word	0x3ff80000
 800f294:	080135b8 	.word	0x080135b8
 800f298:	08013525 	.word	0x08013525
 800f29c:	2301      	movs	r3, #1
 800f29e:	9309      	str	r3, [sp, #36]	; 0x24
 800f2a0:	e7d7      	b.n	800f252 <_dtoa_r+0x2c2>
 800f2a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2a4:	9301      	str	r3, [sp, #4]
 800f2a6:	9304      	str	r3, [sp, #16]
 800f2a8:	e7ba      	b.n	800f220 <_dtoa_r+0x290>
 800f2aa:	3101      	adds	r1, #1
 800f2ac:	0052      	lsls	r2, r2, #1
 800f2ae:	e7ba      	b.n	800f226 <_dtoa_r+0x296>
 800f2b0:	69e3      	ldr	r3, [r4, #28]
 800f2b2:	9a00      	ldr	r2, [sp, #0]
 800f2b4:	601a      	str	r2, [r3, #0]
 800f2b6:	9b04      	ldr	r3, [sp, #16]
 800f2b8:	2b0e      	cmp	r3, #14
 800f2ba:	f200 80a8 	bhi.w	800f40e <_dtoa_r+0x47e>
 800f2be:	2d00      	cmp	r5, #0
 800f2c0:	f000 80a5 	beq.w	800f40e <_dtoa_r+0x47e>
 800f2c4:	f1bb 0f00 	cmp.w	fp, #0
 800f2c8:	dd38      	ble.n	800f33c <_dtoa_r+0x3ac>
 800f2ca:	4bc0      	ldr	r3, [pc, #768]	; (800f5cc <_dtoa_r+0x63c>)
 800f2cc:	f00b 020f 	and.w	r2, fp, #15
 800f2d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f2d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f2dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f2e0:	d019      	beq.n	800f316 <_dtoa_r+0x386>
 800f2e2:	4bbb      	ldr	r3, [pc, #748]	; (800f5d0 <_dtoa_r+0x640>)
 800f2e4:	ec51 0b18 	vmov	r0, r1, d8
 800f2e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f2ec:	f7f1 fad6 	bl	800089c <__aeabi_ddiv>
 800f2f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2f4:	f008 080f 	and.w	r8, r8, #15
 800f2f8:	2503      	movs	r5, #3
 800f2fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f5d0 <_dtoa_r+0x640>
 800f2fe:	f1b8 0f00 	cmp.w	r8, #0
 800f302:	d10a      	bne.n	800f31a <_dtoa_r+0x38a>
 800f304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f308:	4632      	mov	r2, r6
 800f30a:	463b      	mov	r3, r7
 800f30c:	f7f1 fac6 	bl	800089c <__aeabi_ddiv>
 800f310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f314:	e02b      	b.n	800f36e <_dtoa_r+0x3de>
 800f316:	2502      	movs	r5, #2
 800f318:	e7ef      	b.n	800f2fa <_dtoa_r+0x36a>
 800f31a:	f018 0f01 	tst.w	r8, #1
 800f31e:	d008      	beq.n	800f332 <_dtoa_r+0x3a2>
 800f320:	4630      	mov	r0, r6
 800f322:	4639      	mov	r1, r7
 800f324:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f328:	f7f1 f98e 	bl	8000648 <__aeabi_dmul>
 800f32c:	3501      	adds	r5, #1
 800f32e:	4606      	mov	r6, r0
 800f330:	460f      	mov	r7, r1
 800f332:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f336:	f109 0908 	add.w	r9, r9, #8
 800f33a:	e7e0      	b.n	800f2fe <_dtoa_r+0x36e>
 800f33c:	f000 809f 	beq.w	800f47e <_dtoa_r+0x4ee>
 800f340:	f1cb 0600 	rsb	r6, fp, #0
 800f344:	4ba1      	ldr	r3, [pc, #644]	; (800f5cc <_dtoa_r+0x63c>)
 800f346:	4fa2      	ldr	r7, [pc, #648]	; (800f5d0 <_dtoa_r+0x640>)
 800f348:	f006 020f 	and.w	r2, r6, #15
 800f34c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f354:	ec51 0b18 	vmov	r0, r1, d8
 800f358:	f7f1 f976 	bl	8000648 <__aeabi_dmul>
 800f35c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f360:	1136      	asrs	r6, r6, #4
 800f362:	2300      	movs	r3, #0
 800f364:	2502      	movs	r5, #2
 800f366:	2e00      	cmp	r6, #0
 800f368:	d17e      	bne.n	800f468 <_dtoa_r+0x4d8>
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1d0      	bne.n	800f310 <_dtoa_r+0x380>
 800f36e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f370:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f374:	2b00      	cmp	r3, #0
 800f376:	f000 8084 	beq.w	800f482 <_dtoa_r+0x4f2>
 800f37a:	4b96      	ldr	r3, [pc, #600]	; (800f5d4 <_dtoa_r+0x644>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	4640      	mov	r0, r8
 800f380:	4649      	mov	r1, r9
 800f382:	f7f1 fbd3 	bl	8000b2c <__aeabi_dcmplt>
 800f386:	2800      	cmp	r0, #0
 800f388:	d07b      	beq.n	800f482 <_dtoa_r+0x4f2>
 800f38a:	9b04      	ldr	r3, [sp, #16]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d078      	beq.n	800f482 <_dtoa_r+0x4f2>
 800f390:	9b01      	ldr	r3, [sp, #4]
 800f392:	2b00      	cmp	r3, #0
 800f394:	dd39      	ble.n	800f40a <_dtoa_r+0x47a>
 800f396:	4b90      	ldr	r3, [pc, #576]	; (800f5d8 <_dtoa_r+0x648>)
 800f398:	2200      	movs	r2, #0
 800f39a:	4640      	mov	r0, r8
 800f39c:	4649      	mov	r1, r9
 800f39e:	f7f1 f953 	bl	8000648 <__aeabi_dmul>
 800f3a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3a6:	9e01      	ldr	r6, [sp, #4]
 800f3a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f3ac:	3501      	adds	r5, #1
 800f3ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	f7f1 f8de 	bl	8000574 <__aeabi_i2d>
 800f3b8:	4642      	mov	r2, r8
 800f3ba:	464b      	mov	r3, r9
 800f3bc:	f7f1 f944 	bl	8000648 <__aeabi_dmul>
 800f3c0:	4b86      	ldr	r3, [pc, #536]	; (800f5dc <_dtoa_r+0x64c>)
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f7f0 ff8a 	bl	80002dc <__adddf3>
 800f3c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3d0:	9303      	str	r3, [sp, #12]
 800f3d2:	2e00      	cmp	r6, #0
 800f3d4:	d158      	bne.n	800f488 <_dtoa_r+0x4f8>
 800f3d6:	4b82      	ldr	r3, [pc, #520]	; (800f5e0 <_dtoa_r+0x650>)
 800f3d8:	2200      	movs	r2, #0
 800f3da:	4640      	mov	r0, r8
 800f3dc:	4649      	mov	r1, r9
 800f3de:	f7f0 ff7b 	bl	80002d8 <__aeabi_dsub>
 800f3e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3e6:	4680      	mov	r8, r0
 800f3e8:	4689      	mov	r9, r1
 800f3ea:	f7f1 fbbd 	bl	8000b68 <__aeabi_dcmpgt>
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	f040 8296 	bne.w	800f920 <_dtoa_r+0x990>
 800f3f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f3f8:	4640      	mov	r0, r8
 800f3fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3fe:	4649      	mov	r1, r9
 800f400:	f7f1 fb94 	bl	8000b2c <__aeabi_dcmplt>
 800f404:	2800      	cmp	r0, #0
 800f406:	f040 8289 	bne.w	800f91c <_dtoa_r+0x98c>
 800f40a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f40e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f410:	2b00      	cmp	r3, #0
 800f412:	f2c0 814e 	blt.w	800f6b2 <_dtoa_r+0x722>
 800f416:	f1bb 0f0e 	cmp.w	fp, #14
 800f41a:	f300 814a 	bgt.w	800f6b2 <_dtoa_r+0x722>
 800f41e:	4b6b      	ldr	r3, [pc, #428]	; (800f5cc <_dtoa_r+0x63c>)
 800f420:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f424:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	f280 80dc 	bge.w	800f5e8 <_dtoa_r+0x658>
 800f430:	9b04      	ldr	r3, [sp, #16]
 800f432:	2b00      	cmp	r3, #0
 800f434:	f300 80d8 	bgt.w	800f5e8 <_dtoa_r+0x658>
 800f438:	f040 826f 	bne.w	800f91a <_dtoa_r+0x98a>
 800f43c:	4b68      	ldr	r3, [pc, #416]	; (800f5e0 <_dtoa_r+0x650>)
 800f43e:	2200      	movs	r2, #0
 800f440:	4640      	mov	r0, r8
 800f442:	4649      	mov	r1, r9
 800f444:	f7f1 f900 	bl	8000648 <__aeabi_dmul>
 800f448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f44c:	f7f1 fb82 	bl	8000b54 <__aeabi_dcmpge>
 800f450:	9e04      	ldr	r6, [sp, #16]
 800f452:	4637      	mov	r7, r6
 800f454:	2800      	cmp	r0, #0
 800f456:	f040 8245 	bne.w	800f8e4 <_dtoa_r+0x954>
 800f45a:	9d00      	ldr	r5, [sp, #0]
 800f45c:	2331      	movs	r3, #49	; 0x31
 800f45e:	f805 3b01 	strb.w	r3, [r5], #1
 800f462:	f10b 0b01 	add.w	fp, fp, #1
 800f466:	e241      	b.n	800f8ec <_dtoa_r+0x95c>
 800f468:	07f2      	lsls	r2, r6, #31
 800f46a:	d505      	bpl.n	800f478 <_dtoa_r+0x4e8>
 800f46c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f470:	f7f1 f8ea 	bl	8000648 <__aeabi_dmul>
 800f474:	3501      	adds	r5, #1
 800f476:	2301      	movs	r3, #1
 800f478:	1076      	asrs	r6, r6, #1
 800f47a:	3708      	adds	r7, #8
 800f47c:	e773      	b.n	800f366 <_dtoa_r+0x3d6>
 800f47e:	2502      	movs	r5, #2
 800f480:	e775      	b.n	800f36e <_dtoa_r+0x3de>
 800f482:	9e04      	ldr	r6, [sp, #16]
 800f484:	465f      	mov	r7, fp
 800f486:	e792      	b.n	800f3ae <_dtoa_r+0x41e>
 800f488:	9900      	ldr	r1, [sp, #0]
 800f48a:	4b50      	ldr	r3, [pc, #320]	; (800f5cc <_dtoa_r+0x63c>)
 800f48c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f490:	4431      	add	r1, r6
 800f492:	9102      	str	r1, [sp, #8]
 800f494:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f496:	eeb0 9a47 	vmov.f32	s18, s14
 800f49a:	eef0 9a67 	vmov.f32	s19, s15
 800f49e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f4a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f4a6:	2900      	cmp	r1, #0
 800f4a8:	d044      	beq.n	800f534 <_dtoa_r+0x5a4>
 800f4aa:	494e      	ldr	r1, [pc, #312]	; (800f5e4 <_dtoa_r+0x654>)
 800f4ac:	2000      	movs	r0, #0
 800f4ae:	f7f1 f9f5 	bl	800089c <__aeabi_ddiv>
 800f4b2:	ec53 2b19 	vmov	r2, r3, d9
 800f4b6:	f7f0 ff0f 	bl	80002d8 <__aeabi_dsub>
 800f4ba:	9d00      	ldr	r5, [sp, #0]
 800f4bc:	ec41 0b19 	vmov	d9, r0, r1
 800f4c0:	4649      	mov	r1, r9
 800f4c2:	4640      	mov	r0, r8
 800f4c4:	f7f1 fb70 	bl	8000ba8 <__aeabi_d2iz>
 800f4c8:	4606      	mov	r6, r0
 800f4ca:	f7f1 f853 	bl	8000574 <__aeabi_i2d>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	4640      	mov	r0, r8
 800f4d4:	4649      	mov	r1, r9
 800f4d6:	f7f0 feff 	bl	80002d8 <__aeabi_dsub>
 800f4da:	3630      	adds	r6, #48	; 0x30
 800f4dc:	f805 6b01 	strb.w	r6, [r5], #1
 800f4e0:	ec53 2b19 	vmov	r2, r3, d9
 800f4e4:	4680      	mov	r8, r0
 800f4e6:	4689      	mov	r9, r1
 800f4e8:	f7f1 fb20 	bl	8000b2c <__aeabi_dcmplt>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d164      	bne.n	800f5ba <_dtoa_r+0x62a>
 800f4f0:	4642      	mov	r2, r8
 800f4f2:	464b      	mov	r3, r9
 800f4f4:	4937      	ldr	r1, [pc, #220]	; (800f5d4 <_dtoa_r+0x644>)
 800f4f6:	2000      	movs	r0, #0
 800f4f8:	f7f0 feee 	bl	80002d8 <__aeabi_dsub>
 800f4fc:	ec53 2b19 	vmov	r2, r3, d9
 800f500:	f7f1 fb14 	bl	8000b2c <__aeabi_dcmplt>
 800f504:	2800      	cmp	r0, #0
 800f506:	f040 80b6 	bne.w	800f676 <_dtoa_r+0x6e6>
 800f50a:	9b02      	ldr	r3, [sp, #8]
 800f50c:	429d      	cmp	r5, r3
 800f50e:	f43f af7c 	beq.w	800f40a <_dtoa_r+0x47a>
 800f512:	4b31      	ldr	r3, [pc, #196]	; (800f5d8 <_dtoa_r+0x648>)
 800f514:	ec51 0b19 	vmov	r0, r1, d9
 800f518:	2200      	movs	r2, #0
 800f51a:	f7f1 f895 	bl	8000648 <__aeabi_dmul>
 800f51e:	4b2e      	ldr	r3, [pc, #184]	; (800f5d8 <_dtoa_r+0x648>)
 800f520:	ec41 0b19 	vmov	d9, r0, r1
 800f524:	2200      	movs	r2, #0
 800f526:	4640      	mov	r0, r8
 800f528:	4649      	mov	r1, r9
 800f52a:	f7f1 f88d 	bl	8000648 <__aeabi_dmul>
 800f52e:	4680      	mov	r8, r0
 800f530:	4689      	mov	r9, r1
 800f532:	e7c5      	b.n	800f4c0 <_dtoa_r+0x530>
 800f534:	ec51 0b17 	vmov	r0, r1, d7
 800f538:	f7f1 f886 	bl	8000648 <__aeabi_dmul>
 800f53c:	9b02      	ldr	r3, [sp, #8]
 800f53e:	9d00      	ldr	r5, [sp, #0]
 800f540:	930f      	str	r3, [sp, #60]	; 0x3c
 800f542:	ec41 0b19 	vmov	d9, r0, r1
 800f546:	4649      	mov	r1, r9
 800f548:	4640      	mov	r0, r8
 800f54a:	f7f1 fb2d 	bl	8000ba8 <__aeabi_d2iz>
 800f54e:	4606      	mov	r6, r0
 800f550:	f7f1 f810 	bl	8000574 <__aeabi_i2d>
 800f554:	3630      	adds	r6, #48	; 0x30
 800f556:	4602      	mov	r2, r0
 800f558:	460b      	mov	r3, r1
 800f55a:	4640      	mov	r0, r8
 800f55c:	4649      	mov	r1, r9
 800f55e:	f7f0 febb 	bl	80002d8 <__aeabi_dsub>
 800f562:	f805 6b01 	strb.w	r6, [r5], #1
 800f566:	9b02      	ldr	r3, [sp, #8]
 800f568:	429d      	cmp	r5, r3
 800f56a:	4680      	mov	r8, r0
 800f56c:	4689      	mov	r9, r1
 800f56e:	f04f 0200 	mov.w	r2, #0
 800f572:	d124      	bne.n	800f5be <_dtoa_r+0x62e>
 800f574:	4b1b      	ldr	r3, [pc, #108]	; (800f5e4 <_dtoa_r+0x654>)
 800f576:	ec51 0b19 	vmov	r0, r1, d9
 800f57a:	f7f0 feaf 	bl	80002dc <__adddf3>
 800f57e:	4602      	mov	r2, r0
 800f580:	460b      	mov	r3, r1
 800f582:	4640      	mov	r0, r8
 800f584:	4649      	mov	r1, r9
 800f586:	f7f1 faef 	bl	8000b68 <__aeabi_dcmpgt>
 800f58a:	2800      	cmp	r0, #0
 800f58c:	d173      	bne.n	800f676 <_dtoa_r+0x6e6>
 800f58e:	ec53 2b19 	vmov	r2, r3, d9
 800f592:	4914      	ldr	r1, [pc, #80]	; (800f5e4 <_dtoa_r+0x654>)
 800f594:	2000      	movs	r0, #0
 800f596:	f7f0 fe9f 	bl	80002d8 <__aeabi_dsub>
 800f59a:	4602      	mov	r2, r0
 800f59c:	460b      	mov	r3, r1
 800f59e:	4640      	mov	r0, r8
 800f5a0:	4649      	mov	r1, r9
 800f5a2:	f7f1 fac3 	bl	8000b2c <__aeabi_dcmplt>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	f43f af2f 	beq.w	800f40a <_dtoa_r+0x47a>
 800f5ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f5ae:	1e6b      	subs	r3, r5, #1
 800f5b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f5b6:	2b30      	cmp	r3, #48	; 0x30
 800f5b8:	d0f8      	beq.n	800f5ac <_dtoa_r+0x61c>
 800f5ba:	46bb      	mov	fp, r7
 800f5bc:	e04a      	b.n	800f654 <_dtoa_r+0x6c4>
 800f5be:	4b06      	ldr	r3, [pc, #24]	; (800f5d8 <_dtoa_r+0x648>)
 800f5c0:	f7f1 f842 	bl	8000648 <__aeabi_dmul>
 800f5c4:	4680      	mov	r8, r0
 800f5c6:	4689      	mov	r9, r1
 800f5c8:	e7bd      	b.n	800f546 <_dtoa_r+0x5b6>
 800f5ca:	bf00      	nop
 800f5cc:	080135b8 	.word	0x080135b8
 800f5d0:	08013590 	.word	0x08013590
 800f5d4:	3ff00000 	.word	0x3ff00000
 800f5d8:	40240000 	.word	0x40240000
 800f5dc:	401c0000 	.word	0x401c0000
 800f5e0:	40140000 	.word	0x40140000
 800f5e4:	3fe00000 	.word	0x3fe00000
 800f5e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f5ec:	9d00      	ldr	r5, [sp, #0]
 800f5ee:	4642      	mov	r2, r8
 800f5f0:	464b      	mov	r3, r9
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	4639      	mov	r1, r7
 800f5f6:	f7f1 f951 	bl	800089c <__aeabi_ddiv>
 800f5fa:	f7f1 fad5 	bl	8000ba8 <__aeabi_d2iz>
 800f5fe:	9001      	str	r0, [sp, #4]
 800f600:	f7f0 ffb8 	bl	8000574 <__aeabi_i2d>
 800f604:	4642      	mov	r2, r8
 800f606:	464b      	mov	r3, r9
 800f608:	f7f1 f81e 	bl	8000648 <__aeabi_dmul>
 800f60c:	4602      	mov	r2, r0
 800f60e:	460b      	mov	r3, r1
 800f610:	4630      	mov	r0, r6
 800f612:	4639      	mov	r1, r7
 800f614:	f7f0 fe60 	bl	80002d8 <__aeabi_dsub>
 800f618:	9e01      	ldr	r6, [sp, #4]
 800f61a:	9f04      	ldr	r7, [sp, #16]
 800f61c:	3630      	adds	r6, #48	; 0x30
 800f61e:	f805 6b01 	strb.w	r6, [r5], #1
 800f622:	9e00      	ldr	r6, [sp, #0]
 800f624:	1bae      	subs	r6, r5, r6
 800f626:	42b7      	cmp	r7, r6
 800f628:	4602      	mov	r2, r0
 800f62a:	460b      	mov	r3, r1
 800f62c:	d134      	bne.n	800f698 <_dtoa_r+0x708>
 800f62e:	f7f0 fe55 	bl	80002dc <__adddf3>
 800f632:	4642      	mov	r2, r8
 800f634:	464b      	mov	r3, r9
 800f636:	4606      	mov	r6, r0
 800f638:	460f      	mov	r7, r1
 800f63a:	f7f1 fa95 	bl	8000b68 <__aeabi_dcmpgt>
 800f63e:	b9c8      	cbnz	r0, 800f674 <_dtoa_r+0x6e4>
 800f640:	4642      	mov	r2, r8
 800f642:	464b      	mov	r3, r9
 800f644:	4630      	mov	r0, r6
 800f646:	4639      	mov	r1, r7
 800f648:	f7f1 fa66 	bl	8000b18 <__aeabi_dcmpeq>
 800f64c:	b110      	cbz	r0, 800f654 <_dtoa_r+0x6c4>
 800f64e:	9b01      	ldr	r3, [sp, #4]
 800f650:	07db      	lsls	r3, r3, #31
 800f652:	d40f      	bmi.n	800f674 <_dtoa_r+0x6e4>
 800f654:	4651      	mov	r1, sl
 800f656:	4620      	mov	r0, r4
 800f658:	f000 fb18 	bl	800fc8c <_Bfree>
 800f65c:	2300      	movs	r3, #0
 800f65e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f660:	702b      	strb	r3, [r5, #0]
 800f662:	f10b 0301 	add.w	r3, fp, #1
 800f666:	6013      	str	r3, [r2, #0]
 800f668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	f43f ace2 	beq.w	800f034 <_dtoa_r+0xa4>
 800f670:	601d      	str	r5, [r3, #0]
 800f672:	e4df      	b.n	800f034 <_dtoa_r+0xa4>
 800f674:	465f      	mov	r7, fp
 800f676:	462b      	mov	r3, r5
 800f678:	461d      	mov	r5, r3
 800f67a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f67e:	2a39      	cmp	r2, #57	; 0x39
 800f680:	d106      	bne.n	800f690 <_dtoa_r+0x700>
 800f682:	9a00      	ldr	r2, [sp, #0]
 800f684:	429a      	cmp	r2, r3
 800f686:	d1f7      	bne.n	800f678 <_dtoa_r+0x6e8>
 800f688:	9900      	ldr	r1, [sp, #0]
 800f68a:	2230      	movs	r2, #48	; 0x30
 800f68c:	3701      	adds	r7, #1
 800f68e:	700a      	strb	r2, [r1, #0]
 800f690:	781a      	ldrb	r2, [r3, #0]
 800f692:	3201      	adds	r2, #1
 800f694:	701a      	strb	r2, [r3, #0]
 800f696:	e790      	b.n	800f5ba <_dtoa_r+0x62a>
 800f698:	4ba3      	ldr	r3, [pc, #652]	; (800f928 <_dtoa_r+0x998>)
 800f69a:	2200      	movs	r2, #0
 800f69c:	f7f0 ffd4 	bl	8000648 <__aeabi_dmul>
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	4606      	mov	r6, r0
 800f6a6:	460f      	mov	r7, r1
 800f6a8:	f7f1 fa36 	bl	8000b18 <__aeabi_dcmpeq>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	d09e      	beq.n	800f5ee <_dtoa_r+0x65e>
 800f6b0:	e7d0      	b.n	800f654 <_dtoa_r+0x6c4>
 800f6b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6b4:	2a00      	cmp	r2, #0
 800f6b6:	f000 80ca 	beq.w	800f84e <_dtoa_r+0x8be>
 800f6ba:	9a07      	ldr	r2, [sp, #28]
 800f6bc:	2a01      	cmp	r2, #1
 800f6be:	f300 80ad 	bgt.w	800f81c <_dtoa_r+0x88c>
 800f6c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6c4:	2a00      	cmp	r2, #0
 800f6c6:	f000 80a5 	beq.w	800f814 <_dtoa_r+0x884>
 800f6ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f6ce:	9e08      	ldr	r6, [sp, #32]
 800f6d0:	9d05      	ldr	r5, [sp, #20]
 800f6d2:	9a05      	ldr	r2, [sp, #20]
 800f6d4:	441a      	add	r2, r3
 800f6d6:	9205      	str	r2, [sp, #20]
 800f6d8:	9a06      	ldr	r2, [sp, #24]
 800f6da:	2101      	movs	r1, #1
 800f6dc:	441a      	add	r2, r3
 800f6de:	4620      	mov	r0, r4
 800f6e0:	9206      	str	r2, [sp, #24]
 800f6e2:	f000 fbd3 	bl	800fe8c <__i2b>
 800f6e6:	4607      	mov	r7, r0
 800f6e8:	b165      	cbz	r5, 800f704 <_dtoa_r+0x774>
 800f6ea:	9b06      	ldr	r3, [sp, #24]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	dd09      	ble.n	800f704 <_dtoa_r+0x774>
 800f6f0:	42ab      	cmp	r3, r5
 800f6f2:	9a05      	ldr	r2, [sp, #20]
 800f6f4:	bfa8      	it	ge
 800f6f6:	462b      	movge	r3, r5
 800f6f8:	1ad2      	subs	r2, r2, r3
 800f6fa:	9205      	str	r2, [sp, #20]
 800f6fc:	9a06      	ldr	r2, [sp, #24]
 800f6fe:	1aed      	subs	r5, r5, r3
 800f700:	1ad3      	subs	r3, r2, r3
 800f702:	9306      	str	r3, [sp, #24]
 800f704:	9b08      	ldr	r3, [sp, #32]
 800f706:	b1f3      	cbz	r3, 800f746 <_dtoa_r+0x7b6>
 800f708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	f000 80a3 	beq.w	800f856 <_dtoa_r+0x8c6>
 800f710:	2e00      	cmp	r6, #0
 800f712:	dd10      	ble.n	800f736 <_dtoa_r+0x7a6>
 800f714:	4639      	mov	r1, r7
 800f716:	4632      	mov	r2, r6
 800f718:	4620      	mov	r0, r4
 800f71a:	f000 fc77 	bl	801000c <__pow5mult>
 800f71e:	4652      	mov	r2, sl
 800f720:	4601      	mov	r1, r0
 800f722:	4607      	mov	r7, r0
 800f724:	4620      	mov	r0, r4
 800f726:	f000 fbc7 	bl	800feb8 <__multiply>
 800f72a:	4651      	mov	r1, sl
 800f72c:	4680      	mov	r8, r0
 800f72e:	4620      	mov	r0, r4
 800f730:	f000 faac 	bl	800fc8c <_Bfree>
 800f734:	46c2      	mov	sl, r8
 800f736:	9b08      	ldr	r3, [sp, #32]
 800f738:	1b9a      	subs	r2, r3, r6
 800f73a:	d004      	beq.n	800f746 <_dtoa_r+0x7b6>
 800f73c:	4651      	mov	r1, sl
 800f73e:	4620      	mov	r0, r4
 800f740:	f000 fc64 	bl	801000c <__pow5mult>
 800f744:	4682      	mov	sl, r0
 800f746:	2101      	movs	r1, #1
 800f748:	4620      	mov	r0, r4
 800f74a:	f000 fb9f 	bl	800fe8c <__i2b>
 800f74e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f750:	2b00      	cmp	r3, #0
 800f752:	4606      	mov	r6, r0
 800f754:	f340 8081 	ble.w	800f85a <_dtoa_r+0x8ca>
 800f758:	461a      	mov	r2, r3
 800f75a:	4601      	mov	r1, r0
 800f75c:	4620      	mov	r0, r4
 800f75e:	f000 fc55 	bl	801000c <__pow5mult>
 800f762:	9b07      	ldr	r3, [sp, #28]
 800f764:	2b01      	cmp	r3, #1
 800f766:	4606      	mov	r6, r0
 800f768:	dd7a      	ble.n	800f860 <_dtoa_r+0x8d0>
 800f76a:	f04f 0800 	mov.w	r8, #0
 800f76e:	6933      	ldr	r3, [r6, #16]
 800f770:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f774:	6918      	ldr	r0, [r3, #16]
 800f776:	f000 fb3b 	bl	800fdf0 <__hi0bits>
 800f77a:	f1c0 0020 	rsb	r0, r0, #32
 800f77e:	9b06      	ldr	r3, [sp, #24]
 800f780:	4418      	add	r0, r3
 800f782:	f010 001f 	ands.w	r0, r0, #31
 800f786:	f000 8094 	beq.w	800f8b2 <_dtoa_r+0x922>
 800f78a:	f1c0 0320 	rsb	r3, r0, #32
 800f78e:	2b04      	cmp	r3, #4
 800f790:	f340 8085 	ble.w	800f89e <_dtoa_r+0x90e>
 800f794:	9b05      	ldr	r3, [sp, #20]
 800f796:	f1c0 001c 	rsb	r0, r0, #28
 800f79a:	4403      	add	r3, r0
 800f79c:	9305      	str	r3, [sp, #20]
 800f79e:	9b06      	ldr	r3, [sp, #24]
 800f7a0:	4403      	add	r3, r0
 800f7a2:	4405      	add	r5, r0
 800f7a4:	9306      	str	r3, [sp, #24]
 800f7a6:	9b05      	ldr	r3, [sp, #20]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	dd05      	ble.n	800f7b8 <_dtoa_r+0x828>
 800f7ac:	4651      	mov	r1, sl
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f000 fc85 	bl	80100c0 <__lshift>
 800f7b6:	4682      	mov	sl, r0
 800f7b8:	9b06      	ldr	r3, [sp, #24]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	dd05      	ble.n	800f7ca <_dtoa_r+0x83a>
 800f7be:	4631      	mov	r1, r6
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	f000 fc7c 	bl	80100c0 <__lshift>
 800f7c8:	4606      	mov	r6, r0
 800f7ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d072      	beq.n	800f8b6 <_dtoa_r+0x926>
 800f7d0:	4631      	mov	r1, r6
 800f7d2:	4650      	mov	r0, sl
 800f7d4:	f000 fce0 	bl	8010198 <__mcmp>
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	da6c      	bge.n	800f8b6 <_dtoa_r+0x926>
 800f7dc:	2300      	movs	r3, #0
 800f7de:	4651      	mov	r1, sl
 800f7e0:	220a      	movs	r2, #10
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f000 fa74 	bl	800fcd0 <__multadd>
 800f7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f7ee:	4682      	mov	sl, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f000 81b0 	beq.w	800fb56 <_dtoa_r+0xbc6>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	4639      	mov	r1, r7
 800f7fa:	220a      	movs	r2, #10
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f000 fa67 	bl	800fcd0 <__multadd>
 800f802:	9b01      	ldr	r3, [sp, #4]
 800f804:	2b00      	cmp	r3, #0
 800f806:	4607      	mov	r7, r0
 800f808:	f300 8096 	bgt.w	800f938 <_dtoa_r+0x9a8>
 800f80c:	9b07      	ldr	r3, [sp, #28]
 800f80e:	2b02      	cmp	r3, #2
 800f810:	dc59      	bgt.n	800f8c6 <_dtoa_r+0x936>
 800f812:	e091      	b.n	800f938 <_dtoa_r+0x9a8>
 800f814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f81a:	e758      	b.n	800f6ce <_dtoa_r+0x73e>
 800f81c:	9b04      	ldr	r3, [sp, #16]
 800f81e:	1e5e      	subs	r6, r3, #1
 800f820:	9b08      	ldr	r3, [sp, #32]
 800f822:	42b3      	cmp	r3, r6
 800f824:	bfbf      	itttt	lt
 800f826:	9b08      	ldrlt	r3, [sp, #32]
 800f828:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f82a:	9608      	strlt	r6, [sp, #32]
 800f82c:	1af3      	sublt	r3, r6, r3
 800f82e:	bfb4      	ite	lt
 800f830:	18d2      	addlt	r2, r2, r3
 800f832:	1b9e      	subge	r6, r3, r6
 800f834:	9b04      	ldr	r3, [sp, #16]
 800f836:	bfbc      	itt	lt
 800f838:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f83a:	2600      	movlt	r6, #0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	bfb7      	itett	lt
 800f840:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f844:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f848:	1a9d      	sublt	r5, r3, r2
 800f84a:	2300      	movlt	r3, #0
 800f84c:	e741      	b.n	800f6d2 <_dtoa_r+0x742>
 800f84e:	9e08      	ldr	r6, [sp, #32]
 800f850:	9d05      	ldr	r5, [sp, #20]
 800f852:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f854:	e748      	b.n	800f6e8 <_dtoa_r+0x758>
 800f856:	9a08      	ldr	r2, [sp, #32]
 800f858:	e770      	b.n	800f73c <_dtoa_r+0x7ac>
 800f85a:	9b07      	ldr	r3, [sp, #28]
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	dc19      	bgt.n	800f894 <_dtoa_r+0x904>
 800f860:	9b02      	ldr	r3, [sp, #8]
 800f862:	b9bb      	cbnz	r3, 800f894 <_dtoa_r+0x904>
 800f864:	9b03      	ldr	r3, [sp, #12]
 800f866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f86a:	b99b      	cbnz	r3, 800f894 <_dtoa_r+0x904>
 800f86c:	9b03      	ldr	r3, [sp, #12]
 800f86e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f872:	0d1b      	lsrs	r3, r3, #20
 800f874:	051b      	lsls	r3, r3, #20
 800f876:	b183      	cbz	r3, 800f89a <_dtoa_r+0x90a>
 800f878:	9b05      	ldr	r3, [sp, #20]
 800f87a:	3301      	adds	r3, #1
 800f87c:	9305      	str	r3, [sp, #20]
 800f87e:	9b06      	ldr	r3, [sp, #24]
 800f880:	3301      	adds	r3, #1
 800f882:	9306      	str	r3, [sp, #24]
 800f884:	f04f 0801 	mov.w	r8, #1
 800f888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	f47f af6f 	bne.w	800f76e <_dtoa_r+0x7de>
 800f890:	2001      	movs	r0, #1
 800f892:	e774      	b.n	800f77e <_dtoa_r+0x7ee>
 800f894:	f04f 0800 	mov.w	r8, #0
 800f898:	e7f6      	b.n	800f888 <_dtoa_r+0x8f8>
 800f89a:	4698      	mov	r8, r3
 800f89c:	e7f4      	b.n	800f888 <_dtoa_r+0x8f8>
 800f89e:	d082      	beq.n	800f7a6 <_dtoa_r+0x816>
 800f8a0:	9a05      	ldr	r2, [sp, #20]
 800f8a2:	331c      	adds	r3, #28
 800f8a4:	441a      	add	r2, r3
 800f8a6:	9205      	str	r2, [sp, #20]
 800f8a8:	9a06      	ldr	r2, [sp, #24]
 800f8aa:	441a      	add	r2, r3
 800f8ac:	441d      	add	r5, r3
 800f8ae:	9206      	str	r2, [sp, #24]
 800f8b0:	e779      	b.n	800f7a6 <_dtoa_r+0x816>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	e7f4      	b.n	800f8a0 <_dtoa_r+0x910>
 800f8b6:	9b04      	ldr	r3, [sp, #16]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	dc37      	bgt.n	800f92c <_dtoa_r+0x99c>
 800f8bc:	9b07      	ldr	r3, [sp, #28]
 800f8be:	2b02      	cmp	r3, #2
 800f8c0:	dd34      	ble.n	800f92c <_dtoa_r+0x99c>
 800f8c2:	9b04      	ldr	r3, [sp, #16]
 800f8c4:	9301      	str	r3, [sp, #4]
 800f8c6:	9b01      	ldr	r3, [sp, #4]
 800f8c8:	b963      	cbnz	r3, 800f8e4 <_dtoa_r+0x954>
 800f8ca:	4631      	mov	r1, r6
 800f8cc:	2205      	movs	r2, #5
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f000 f9fe 	bl	800fcd0 <__multadd>
 800f8d4:	4601      	mov	r1, r0
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	4650      	mov	r0, sl
 800f8da:	f000 fc5d 	bl	8010198 <__mcmp>
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	f73f adbb 	bgt.w	800f45a <_dtoa_r+0x4ca>
 800f8e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8e6:	9d00      	ldr	r5, [sp, #0]
 800f8e8:	ea6f 0b03 	mvn.w	fp, r3
 800f8ec:	f04f 0800 	mov.w	r8, #0
 800f8f0:	4631      	mov	r1, r6
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	f000 f9ca 	bl	800fc8c <_Bfree>
 800f8f8:	2f00      	cmp	r7, #0
 800f8fa:	f43f aeab 	beq.w	800f654 <_dtoa_r+0x6c4>
 800f8fe:	f1b8 0f00 	cmp.w	r8, #0
 800f902:	d005      	beq.n	800f910 <_dtoa_r+0x980>
 800f904:	45b8      	cmp	r8, r7
 800f906:	d003      	beq.n	800f910 <_dtoa_r+0x980>
 800f908:	4641      	mov	r1, r8
 800f90a:	4620      	mov	r0, r4
 800f90c:	f000 f9be 	bl	800fc8c <_Bfree>
 800f910:	4639      	mov	r1, r7
 800f912:	4620      	mov	r0, r4
 800f914:	f000 f9ba 	bl	800fc8c <_Bfree>
 800f918:	e69c      	b.n	800f654 <_dtoa_r+0x6c4>
 800f91a:	2600      	movs	r6, #0
 800f91c:	4637      	mov	r7, r6
 800f91e:	e7e1      	b.n	800f8e4 <_dtoa_r+0x954>
 800f920:	46bb      	mov	fp, r7
 800f922:	4637      	mov	r7, r6
 800f924:	e599      	b.n	800f45a <_dtoa_r+0x4ca>
 800f926:	bf00      	nop
 800f928:	40240000 	.word	0x40240000
 800f92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f92e:	2b00      	cmp	r3, #0
 800f930:	f000 80c8 	beq.w	800fac4 <_dtoa_r+0xb34>
 800f934:	9b04      	ldr	r3, [sp, #16]
 800f936:	9301      	str	r3, [sp, #4]
 800f938:	2d00      	cmp	r5, #0
 800f93a:	dd05      	ble.n	800f948 <_dtoa_r+0x9b8>
 800f93c:	4639      	mov	r1, r7
 800f93e:	462a      	mov	r2, r5
 800f940:	4620      	mov	r0, r4
 800f942:	f000 fbbd 	bl	80100c0 <__lshift>
 800f946:	4607      	mov	r7, r0
 800f948:	f1b8 0f00 	cmp.w	r8, #0
 800f94c:	d05b      	beq.n	800fa06 <_dtoa_r+0xa76>
 800f94e:	6879      	ldr	r1, [r7, #4]
 800f950:	4620      	mov	r0, r4
 800f952:	f000 f95b 	bl	800fc0c <_Balloc>
 800f956:	4605      	mov	r5, r0
 800f958:	b928      	cbnz	r0, 800f966 <_dtoa_r+0x9d6>
 800f95a:	4b83      	ldr	r3, [pc, #524]	; (800fb68 <_dtoa_r+0xbd8>)
 800f95c:	4602      	mov	r2, r0
 800f95e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f962:	f7ff bb2e 	b.w	800efc2 <_dtoa_r+0x32>
 800f966:	693a      	ldr	r2, [r7, #16]
 800f968:	3202      	adds	r2, #2
 800f96a:	0092      	lsls	r2, r2, #2
 800f96c:	f107 010c 	add.w	r1, r7, #12
 800f970:	300c      	adds	r0, #12
 800f972:	f7ff fa70 	bl	800ee56 <memcpy>
 800f976:	2201      	movs	r2, #1
 800f978:	4629      	mov	r1, r5
 800f97a:	4620      	mov	r0, r4
 800f97c:	f000 fba0 	bl	80100c0 <__lshift>
 800f980:	9b00      	ldr	r3, [sp, #0]
 800f982:	3301      	adds	r3, #1
 800f984:	9304      	str	r3, [sp, #16]
 800f986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f98a:	4413      	add	r3, r2
 800f98c:	9308      	str	r3, [sp, #32]
 800f98e:	9b02      	ldr	r3, [sp, #8]
 800f990:	f003 0301 	and.w	r3, r3, #1
 800f994:	46b8      	mov	r8, r7
 800f996:	9306      	str	r3, [sp, #24]
 800f998:	4607      	mov	r7, r0
 800f99a:	9b04      	ldr	r3, [sp, #16]
 800f99c:	4631      	mov	r1, r6
 800f99e:	3b01      	subs	r3, #1
 800f9a0:	4650      	mov	r0, sl
 800f9a2:	9301      	str	r3, [sp, #4]
 800f9a4:	f7ff fa6c 	bl	800ee80 <quorem>
 800f9a8:	4641      	mov	r1, r8
 800f9aa:	9002      	str	r0, [sp, #8]
 800f9ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f9b0:	4650      	mov	r0, sl
 800f9b2:	f000 fbf1 	bl	8010198 <__mcmp>
 800f9b6:	463a      	mov	r2, r7
 800f9b8:	9005      	str	r0, [sp, #20]
 800f9ba:	4631      	mov	r1, r6
 800f9bc:	4620      	mov	r0, r4
 800f9be:	f000 fc07 	bl	80101d0 <__mdiff>
 800f9c2:	68c2      	ldr	r2, [r0, #12]
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	bb02      	cbnz	r2, 800fa0a <_dtoa_r+0xa7a>
 800f9c8:	4601      	mov	r1, r0
 800f9ca:	4650      	mov	r0, sl
 800f9cc:	f000 fbe4 	bl	8010198 <__mcmp>
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	4629      	mov	r1, r5
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	9209      	str	r2, [sp, #36]	; 0x24
 800f9d8:	f000 f958 	bl	800fc8c <_Bfree>
 800f9dc:	9b07      	ldr	r3, [sp, #28]
 800f9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9e0:	9d04      	ldr	r5, [sp, #16]
 800f9e2:	ea43 0102 	orr.w	r1, r3, r2
 800f9e6:	9b06      	ldr	r3, [sp, #24]
 800f9e8:	4319      	orrs	r1, r3
 800f9ea:	d110      	bne.n	800fa0e <_dtoa_r+0xa7e>
 800f9ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f9f0:	d029      	beq.n	800fa46 <_dtoa_r+0xab6>
 800f9f2:	9b05      	ldr	r3, [sp, #20]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	dd02      	ble.n	800f9fe <_dtoa_r+0xa6e>
 800f9f8:	9b02      	ldr	r3, [sp, #8]
 800f9fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f9fe:	9b01      	ldr	r3, [sp, #4]
 800fa00:	f883 9000 	strb.w	r9, [r3]
 800fa04:	e774      	b.n	800f8f0 <_dtoa_r+0x960>
 800fa06:	4638      	mov	r0, r7
 800fa08:	e7ba      	b.n	800f980 <_dtoa_r+0x9f0>
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	e7e1      	b.n	800f9d2 <_dtoa_r+0xa42>
 800fa0e:	9b05      	ldr	r3, [sp, #20]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	db04      	blt.n	800fa1e <_dtoa_r+0xa8e>
 800fa14:	9907      	ldr	r1, [sp, #28]
 800fa16:	430b      	orrs	r3, r1
 800fa18:	9906      	ldr	r1, [sp, #24]
 800fa1a:	430b      	orrs	r3, r1
 800fa1c:	d120      	bne.n	800fa60 <_dtoa_r+0xad0>
 800fa1e:	2a00      	cmp	r2, #0
 800fa20:	dded      	ble.n	800f9fe <_dtoa_r+0xa6e>
 800fa22:	4651      	mov	r1, sl
 800fa24:	2201      	movs	r2, #1
 800fa26:	4620      	mov	r0, r4
 800fa28:	f000 fb4a 	bl	80100c0 <__lshift>
 800fa2c:	4631      	mov	r1, r6
 800fa2e:	4682      	mov	sl, r0
 800fa30:	f000 fbb2 	bl	8010198 <__mcmp>
 800fa34:	2800      	cmp	r0, #0
 800fa36:	dc03      	bgt.n	800fa40 <_dtoa_r+0xab0>
 800fa38:	d1e1      	bne.n	800f9fe <_dtoa_r+0xa6e>
 800fa3a:	f019 0f01 	tst.w	r9, #1
 800fa3e:	d0de      	beq.n	800f9fe <_dtoa_r+0xa6e>
 800fa40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fa44:	d1d8      	bne.n	800f9f8 <_dtoa_r+0xa68>
 800fa46:	9a01      	ldr	r2, [sp, #4]
 800fa48:	2339      	movs	r3, #57	; 0x39
 800fa4a:	7013      	strb	r3, [r2, #0]
 800fa4c:	462b      	mov	r3, r5
 800fa4e:	461d      	mov	r5, r3
 800fa50:	3b01      	subs	r3, #1
 800fa52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fa56:	2a39      	cmp	r2, #57	; 0x39
 800fa58:	d06c      	beq.n	800fb34 <_dtoa_r+0xba4>
 800fa5a:	3201      	adds	r2, #1
 800fa5c:	701a      	strb	r2, [r3, #0]
 800fa5e:	e747      	b.n	800f8f0 <_dtoa_r+0x960>
 800fa60:	2a00      	cmp	r2, #0
 800fa62:	dd07      	ble.n	800fa74 <_dtoa_r+0xae4>
 800fa64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fa68:	d0ed      	beq.n	800fa46 <_dtoa_r+0xab6>
 800fa6a:	9a01      	ldr	r2, [sp, #4]
 800fa6c:	f109 0301 	add.w	r3, r9, #1
 800fa70:	7013      	strb	r3, [r2, #0]
 800fa72:	e73d      	b.n	800f8f0 <_dtoa_r+0x960>
 800fa74:	9b04      	ldr	r3, [sp, #16]
 800fa76:	9a08      	ldr	r2, [sp, #32]
 800fa78:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d043      	beq.n	800fb08 <_dtoa_r+0xb78>
 800fa80:	4651      	mov	r1, sl
 800fa82:	2300      	movs	r3, #0
 800fa84:	220a      	movs	r2, #10
 800fa86:	4620      	mov	r0, r4
 800fa88:	f000 f922 	bl	800fcd0 <__multadd>
 800fa8c:	45b8      	cmp	r8, r7
 800fa8e:	4682      	mov	sl, r0
 800fa90:	f04f 0300 	mov.w	r3, #0
 800fa94:	f04f 020a 	mov.w	r2, #10
 800fa98:	4641      	mov	r1, r8
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	d107      	bne.n	800faae <_dtoa_r+0xb1e>
 800fa9e:	f000 f917 	bl	800fcd0 <__multadd>
 800faa2:	4680      	mov	r8, r0
 800faa4:	4607      	mov	r7, r0
 800faa6:	9b04      	ldr	r3, [sp, #16]
 800faa8:	3301      	adds	r3, #1
 800faaa:	9304      	str	r3, [sp, #16]
 800faac:	e775      	b.n	800f99a <_dtoa_r+0xa0a>
 800faae:	f000 f90f 	bl	800fcd0 <__multadd>
 800fab2:	4639      	mov	r1, r7
 800fab4:	4680      	mov	r8, r0
 800fab6:	2300      	movs	r3, #0
 800fab8:	220a      	movs	r2, #10
 800faba:	4620      	mov	r0, r4
 800fabc:	f000 f908 	bl	800fcd0 <__multadd>
 800fac0:	4607      	mov	r7, r0
 800fac2:	e7f0      	b.n	800faa6 <_dtoa_r+0xb16>
 800fac4:	9b04      	ldr	r3, [sp, #16]
 800fac6:	9301      	str	r3, [sp, #4]
 800fac8:	9d00      	ldr	r5, [sp, #0]
 800faca:	4631      	mov	r1, r6
 800facc:	4650      	mov	r0, sl
 800face:	f7ff f9d7 	bl	800ee80 <quorem>
 800fad2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fad6:	9b00      	ldr	r3, [sp, #0]
 800fad8:	f805 9b01 	strb.w	r9, [r5], #1
 800fadc:	1aea      	subs	r2, r5, r3
 800fade:	9b01      	ldr	r3, [sp, #4]
 800fae0:	4293      	cmp	r3, r2
 800fae2:	dd07      	ble.n	800faf4 <_dtoa_r+0xb64>
 800fae4:	4651      	mov	r1, sl
 800fae6:	2300      	movs	r3, #0
 800fae8:	220a      	movs	r2, #10
 800faea:	4620      	mov	r0, r4
 800faec:	f000 f8f0 	bl	800fcd0 <__multadd>
 800faf0:	4682      	mov	sl, r0
 800faf2:	e7ea      	b.n	800faca <_dtoa_r+0xb3a>
 800faf4:	9b01      	ldr	r3, [sp, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	bfc8      	it	gt
 800fafa:	461d      	movgt	r5, r3
 800fafc:	9b00      	ldr	r3, [sp, #0]
 800fafe:	bfd8      	it	le
 800fb00:	2501      	movle	r5, #1
 800fb02:	441d      	add	r5, r3
 800fb04:	f04f 0800 	mov.w	r8, #0
 800fb08:	4651      	mov	r1, sl
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	f000 fad7 	bl	80100c0 <__lshift>
 800fb12:	4631      	mov	r1, r6
 800fb14:	4682      	mov	sl, r0
 800fb16:	f000 fb3f 	bl	8010198 <__mcmp>
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	dc96      	bgt.n	800fa4c <_dtoa_r+0xabc>
 800fb1e:	d102      	bne.n	800fb26 <_dtoa_r+0xb96>
 800fb20:	f019 0f01 	tst.w	r9, #1
 800fb24:	d192      	bne.n	800fa4c <_dtoa_r+0xabc>
 800fb26:	462b      	mov	r3, r5
 800fb28:	461d      	mov	r5, r3
 800fb2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb2e:	2a30      	cmp	r2, #48	; 0x30
 800fb30:	d0fa      	beq.n	800fb28 <_dtoa_r+0xb98>
 800fb32:	e6dd      	b.n	800f8f0 <_dtoa_r+0x960>
 800fb34:	9a00      	ldr	r2, [sp, #0]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d189      	bne.n	800fa4e <_dtoa_r+0xabe>
 800fb3a:	f10b 0b01 	add.w	fp, fp, #1
 800fb3e:	2331      	movs	r3, #49	; 0x31
 800fb40:	e796      	b.n	800fa70 <_dtoa_r+0xae0>
 800fb42:	4b0a      	ldr	r3, [pc, #40]	; (800fb6c <_dtoa_r+0xbdc>)
 800fb44:	f7ff ba99 	b.w	800f07a <_dtoa_r+0xea>
 800fb48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f47f aa6d 	bne.w	800f02a <_dtoa_r+0x9a>
 800fb50:	4b07      	ldr	r3, [pc, #28]	; (800fb70 <_dtoa_r+0xbe0>)
 800fb52:	f7ff ba92 	b.w	800f07a <_dtoa_r+0xea>
 800fb56:	9b01      	ldr	r3, [sp, #4]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	dcb5      	bgt.n	800fac8 <_dtoa_r+0xb38>
 800fb5c:	9b07      	ldr	r3, [sp, #28]
 800fb5e:	2b02      	cmp	r3, #2
 800fb60:	f73f aeb1 	bgt.w	800f8c6 <_dtoa_r+0x936>
 800fb64:	e7b0      	b.n	800fac8 <_dtoa_r+0xb38>
 800fb66:	bf00      	nop
 800fb68:	08013525 	.word	0x08013525
 800fb6c:	08013480 	.word	0x08013480
 800fb70:	080134a9 	.word	0x080134a9

0800fb74 <_free_r>:
 800fb74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb76:	2900      	cmp	r1, #0
 800fb78:	d044      	beq.n	800fc04 <_free_r+0x90>
 800fb7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb7e:	9001      	str	r0, [sp, #4]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	f1a1 0404 	sub.w	r4, r1, #4
 800fb86:	bfb8      	it	lt
 800fb88:	18e4      	addlt	r4, r4, r3
 800fb8a:	f7fe f8bd 	bl	800dd08 <__malloc_lock>
 800fb8e:	4a1e      	ldr	r2, [pc, #120]	; (800fc08 <_free_r+0x94>)
 800fb90:	9801      	ldr	r0, [sp, #4]
 800fb92:	6813      	ldr	r3, [r2, #0]
 800fb94:	b933      	cbnz	r3, 800fba4 <_free_r+0x30>
 800fb96:	6063      	str	r3, [r4, #4]
 800fb98:	6014      	str	r4, [r2, #0]
 800fb9a:	b003      	add	sp, #12
 800fb9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fba0:	f7fe b8b8 	b.w	800dd14 <__malloc_unlock>
 800fba4:	42a3      	cmp	r3, r4
 800fba6:	d908      	bls.n	800fbba <_free_r+0x46>
 800fba8:	6825      	ldr	r5, [r4, #0]
 800fbaa:	1961      	adds	r1, r4, r5
 800fbac:	428b      	cmp	r3, r1
 800fbae:	bf01      	itttt	eq
 800fbb0:	6819      	ldreq	r1, [r3, #0]
 800fbb2:	685b      	ldreq	r3, [r3, #4]
 800fbb4:	1949      	addeq	r1, r1, r5
 800fbb6:	6021      	streq	r1, [r4, #0]
 800fbb8:	e7ed      	b.n	800fb96 <_free_r+0x22>
 800fbba:	461a      	mov	r2, r3
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	b10b      	cbz	r3, 800fbc4 <_free_r+0x50>
 800fbc0:	42a3      	cmp	r3, r4
 800fbc2:	d9fa      	bls.n	800fbba <_free_r+0x46>
 800fbc4:	6811      	ldr	r1, [r2, #0]
 800fbc6:	1855      	adds	r5, r2, r1
 800fbc8:	42a5      	cmp	r5, r4
 800fbca:	d10b      	bne.n	800fbe4 <_free_r+0x70>
 800fbcc:	6824      	ldr	r4, [r4, #0]
 800fbce:	4421      	add	r1, r4
 800fbd0:	1854      	adds	r4, r2, r1
 800fbd2:	42a3      	cmp	r3, r4
 800fbd4:	6011      	str	r1, [r2, #0]
 800fbd6:	d1e0      	bne.n	800fb9a <_free_r+0x26>
 800fbd8:	681c      	ldr	r4, [r3, #0]
 800fbda:	685b      	ldr	r3, [r3, #4]
 800fbdc:	6053      	str	r3, [r2, #4]
 800fbde:	440c      	add	r4, r1
 800fbe0:	6014      	str	r4, [r2, #0]
 800fbe2:	e7da      	b.n	800fb9a <_free_r+0x26>
 800fbe4:	d902      	bls.n	800fbec <_free_r+0x78>
 800fbe6:	230c      	movs	r3, #12
 800fbe8:	6003      	str	r3, [r0, #0]
 800fbea:	e7d6      	b.n	800fb9a <_free_r+0x26>
 800fbec:	6825      	ldr	r5, [r4, #0]
 800fbee:	1961      	adds	r1, r4, r5
 800fbf0:	428b      	cmp	r3, r1
 800fbf2:	bf04      	itt	eq
 800fbf4:	6819      	ldreq	r1, [r3, #0]
 800fbf6:	685b      	ldreq	r3, [r3, #4]
 800fbf8:	6063      	str	r3, [r4, #4]
 800fbfa:	bf04      	itt	eq
 800fbfc:	1949      	addeq	r1, r1, r5
 800fbfe:	6021      	streq	r1, [r4, #0]
 800fc00:	6054      	str	r4, [r2, #4]
 800fc02:	e7ca      	b.n	800fb9a <_free_r+0x26>
 800fc04:	b003      	add	sp, #12
 800fc06:	bd30      	pop	{r4, r5, pc}
 800fc08:	20000468 	.word	0x20000468

0800fc0c <_Balloc>:
 800fc0c:	b570      	push	{r4, r5, r6, lr}
 800fc0e:	69c6      	ldr	r6, [r0, #28]
 800fc10:	4604      	mov	r4, r0
 800fc12:	460d      	mov	r5, r1
 800fc14:	b976      	cbnz	r6, 800fc34 <_Balloc+0x28>
 800fc16:	2010      	movs	r0, #16
 800fc18:	f7fd ffc6 	bl	800dba8 <malloc>
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	61e0      	str	r0, [r4, #28]
 800fc20:	b920      	cbnz	r0, 800fc2c <_Balloc+0x20>
 800fc22:	4b18      	ldr	r3, [pc, #96]	; (800fc84 <_Balloc+0x78>)
 800fc24:	4818      	ldr	r0, [pc, #96]	; (800fc88 <_Balloc+0x7c>)
 800fc26:	216b      	movs	r1, #107	; 0x6b
 800fc28:	f7fd ff8e 	bl	800db48 <__assert_func>
 800fc2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc30:	6006      	str	r6, [r0, #0]
 800fc32:	60c6      	str	r6, [r0, #12]
 800fc34:	69e6      	ldr	r6, [r4, #28]
 800fc36:	68f3      	ldr	r3, [r6, #12]
 800fc38:	b183      	cbz	r3, 800fc5c <_Balloc+0x50>
 800fc3a:	69e3      	ldr	r3, [r4, #28]
 800fc3c:	68db      	ldr	r3, [r3, #12]
 800fc3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc42:	b9b8      	cbnz	r0, 800fc74 <_Balloc+0x68>
 800fc44:	2101      	movs	r1, #1
 800fc46:	fa01 f605 	lsl.w	r6, r1, r5
 800fc4a:	1d72      	adds	r2, r6, #5
 800fc4c:	0092      	lsls	r2, r2, #2
 800fc4e:	4620      	mov	r0, r4
 800fc50:	f001 ff1a 	bl	8011a88 <_calloc_r>
 800fc54:	b160      	cbz	r0, 800fc70 <_Balloc+0x64>
 800fc56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc5a:	e00e      	b.n	800fc7a <_Balloc+0x6e>
 800fc5c:	2221      	movs	r2, #33	; 0x21
 800fc5e:	2104      	movs	r1, #4
 800fc60:	4620      	mov	r0, r4
 800fc62:	f001 ff11 	bl	8011a88 <_calloc_r>
 800fc66:	69e3      	ldr	r3, [r4, #28]
 800fc68:	60f0      	str	r0, [r6, #12]
 800fc6a:	68db      	ldr	r3, [r3, #12]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d1e4      	bne.n	800fc3a <_Balloc+0x2e>
 800fc70:	2000      	movs	r0, #0
 800fc72:	bd70      	pop	{r4, r5, r6, pc}
 800fc74:	6802      	ldr	r2, [r0, #0]
 800fc76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc80:	e7f7      	b.n	800fc72 <_Balloc+0x66>
 800fc82:	bf00      	nop
 800fc84:	080134b6 	.word	0x080134b6
 800fc88:	08013536 	.word	0x08013536

0800fc8c <_Bfree>:
 800fc8c:	b570      	push	{r4, r5, r6, lr}
 800fc8e:	69c6      	ldr	r6, [r0, #28]
 800fc90:	4605      	mov	r5, r0
 800fc92:	460c      	mov	r4, r1
 800fc94:	b976      	cbnz	r6, 800fcb4 <_Bfree+0x28>
 800fc96:	2010      	movs	r0, #16
 800fc98:	f7fd ff86 	bl	800dba8 <malloc>
 800fc9c:	4602      	mov	r2, r0
 800fc9e:	61e8      	str	r0, [r5, #28]
 800fca0:	b920      	cbnz	r0, 800fcac <_Bfree+0x20>
 800fca2:	4b09      	ldr	r3, [pc, #36]	; (800fcc8 <_Bfree+0x3c>)
 800fca4:	4809      	ldr	r0, [pc, #36]	; (800fccc <_Bfree+0x40>)
 800fca6:	218f      	movs	r1, #143	; 0x8f
 800fca8:	f7fd ff4e 	bl	800db48 <__assert_func>
 800fcac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fcb0:	6006      	str	r6, [r0, #0]
 800fcb2:	60c6      	str	r6, [r0, #12]
 800fcb4:	b13c      	cbz	r4, 800fcc6 <_Bfree+0x3a>
 800fcb6:	69eb      	ldr	r3, [r5, #28]
 800fcb8:	6862      	ldr	r2, [r4, #4]
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fcc0:	6021      	str	r1, [r4, #0]
 800fcc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fcc6:	bd70      	pop	{r4, r5, r6, pc}
 800fcc8:	080134b6 	.word	0x080134b6
 800fccc:	08013536 	.word	0x08013536

0800fcd0 <__multadd>:
 800fcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd4:	690d      	ldr	r5, [r1, #16]
 800fcd6:	4607      	mov	r7, r0
 800fcd8:	460c      	mov	r4, r1
 800fcda:	461e      	mov	r6, r3
 800fcdc:	f101 0c14 	add.w	ip, r1, #20
 800fce0:	2000      	movs	r0, #0
 800fce2:	f8dc 3000 	ldr.w	r3, [ip]
 800fce6:	b299      	uxth	r1, r3
 800fce8:	fb02 6101 	mla	r1, r2, r1, r6
 800fcec:	0c1e      	lsrs	r6, r3, #16
 800fcee:	0c0b      	lsrs	r3, r1, #16
 800fcf0:	fb02 3306 	mla	r3, r2, r6, r3
 800fcf4:	b289      	uxth	r1, r1
 800fcf6:	3001      	adds	r0, #1
 800fcf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fcfc:	4285      	cmp	r5, r0
 800fcfe:	f84c 1b04 	str.w	r1, [ip], #4
 800fd02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fd06:	dcec      	bgt.n	800fce2 <__multadd+0x12>
 800fd08:	b30e      	cbz	r6, 800fd4e <__multadd+0x7e>
 800fd0a:	68a3      	ldr	r3, [r4, #8]
 800fd0c:	42ab      	cmp	r3, r5
 800fd0e:	dc19      	bgt.n	800fd44 <__multadd+0x74>
 800fd10:	6861      	ldr	r1, [r4, #4]
 800fd12:	4638      	mov	r0, r7
 800fd14:	3101      	adds	r1, #1
 800fd16:	f7ff ff79 	bl	800fc0c <_Balloc>
 800fd1a:	4680      	mov	r8, r0
 800fd1c:	b928      	cbnz	r0, 800fd2a <__multadd+0x5a>
 800fd1e:	4602      	mov	r2, r0
 800fd20:	4b0c      	ldr	r3, [pc, #48]	; (800fd54 <__multadd+0x84>)
 800fd22:	480d      	ldr	r0, [pc, #52]	; (800fd58 <__multadd+0x88>)
 800fd24:	21ba      	movs	r1, #186	; 0xba
 800fd26:	f7fd ff0f 	bl	800db48 <__assert_func>
 800fd2a:	6922      	ldr	r2, [r4, #16]
 800fd2c:	3202      	adds	r2, #2
 800fd2e:	f104 010c 	add.w	r1, r4, #12
 800fd32:	0092      	lsls	r2, r2, #2
 800fd34:	300c      	adds	r0, #12
 800fd36:	f7ff f88e 	bl	800ee56 <memcpy>
 800fd3a:	4621      	mov	r1, r4
 800fd3c:	4638      	mov	r0, r7
 800fd3e:	f7ff ffa5 	bl	800fc8c <_Bfree>
 800fd42:	4644      	mov	r4, r8
 800fd44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd48:	3501      	adds	r5, #1
 800fd4a:	615e      	str	r6, [r3, #20]
 800fd4c:	6125      	str	r5, [r4, #16]
 800fd4e:	4620      	mov	r0, r4
 800fd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd54:	08013525 	.word	0x08013525
 800fd58:	08013536 	.word	0x08013536

0800fd5c <__s2b>:
 800fd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd60:	460c      	mov	r4, r1
 800fd62:	4615      	mov	r5, r2
 800fd64:	461f      	mov	r7, r3
 800fd66:	2209      	movs	r2, #9
 800fd68:	3308      	adds	r3, #8
 800fd6a:	4606      	mov	r6, r0
 800fd6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd70:	2100      	movs	r1, #0
 800fd72:	2201      	movs	r2, #1
 800fd74:	429a      	cmp	r2, r3
 800fd76:	db09      	blt.n	800fd8c <__s2b+0x30>
 800fd78:	4630      	mov	r0, r6
 800fd7a:	f7ff ff47 	bl	800fc0c <_Balloc>
 800fd7e:	b940      	cbnz	r0, 800fd92 <__s2b+0x36>
 800fd80:	4602      	mov	r2, r0
 800fd82:	4b19      	ldr	r3, [pc, #100]	; (800fde8 <__s2b+0x8c>)
 800fd84:	4819      	ldr	r0, [pc, #100]	; (800fdec <__s2b+0x90>)
 800fd86:	21d3      	movs	r1, #211	; 0xd3
 800fd88:	f7fd fede 	bl	800db48 <__assert_func>
 800fd8c:	0052      	lsls	r2, r2, #1
 800fd8e:	3101      	adds	r1, #1
 800fd90:	e7f0      	b.n	800fd74 <__s2b+0x18>
 800fd92:	9b08      	ldr	r3, [sp, #32]
 800fd94:	6143      	str	r3, [r0, #20]
 800fd96:	2d09      	cmp	r5, #9
 800fd98:	f04f 0301 	mov.w	r3, #1
 800fd9c:	6103      	str	r3, [r0, #16]
 800fd9e:	dd16      	ble.n	800fdce <__s2b+0x72>
 800fda0:	f104 0909 	add.w	r9, r4, #9
 800fda4:	46c8      	mov	r8, r9
 800fda6:	442c      	add	r4, r5
 800fda8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fdac:	4601      	mov	r1, r0
 800fdae:	3b30      	subs	r3, #48	; 0x30
 800fdb0:	220a      	movs	r2, #10
 800fdb2:	4630      	mov	r0, r6
 800fdb4:	f7ff ff8c 	bl	800fcd0 <__multadd>
 800fdb8:	45a0      	cmp	r8, r4
 800fdba:	d1f5      	bne.n	800fda8 <__s2b+0x4c>
 800fdbc:	f1a5 0408 	sub.w	r4, r5, #8
 800fdc0:	444c      	add	r4, r9
 800fdc2:	1b2d      	subs	r5, r5, r4
 800fdc4:	1963      	adds	r3, r4, r5
 800fdc6:	42bb      	cmp	r3, r7
 800fdc8:	db04      	blt.n	800fdd4 <__s2b+0x78>
 800fdca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdce:	340a      	adds	r4, #10
 800fdd0:	2509      	movs	r5, #9
 800fdd2:	e7f6      	b.n	800fdc2 <__s2b+0x66>
 800fdd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fdd8:	4601      	mov	r1, r0
 800fdda:	3b30      	subs	r3, #48	; 0x30
 800fddc:	220a      	movs	r2, #10
 800fdde:	4630      	mov	r0, r6
 800fde0:	f7ff ff76 	bl	800fcd0 <__multadd>
 800fde4:	e7ee      	b.n	800fdc4 <__s2b+0x68>
 800fde6:	bf00      	nop
 800fde8:	08013525 	.word	0x08013525
 800fdec:	08013536 	.word	0x08013536

0800fdf0 <__hi0bits>:
 800fdf0:	0c03      	lsrs	r3, r0, #16
 800fdf2:	041b      	lsls	r3, r3, #16
 800fdf4:	b9d3      	cbnz	r3, 800fe2c <__hi0bits+0x3c>
 800fdf6:	0400      	lsls	r0, r0, #16
 800fdf8:	2310      	movs	r3, #16
 800fdfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fdfe:	bf04      	itt	eq
 800fe00:	0200      	lsleq	r0, r0, #8
 800fe02:	3308      	addeq	r3, #8
 800fe04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fe08:	bf04      	itt	eq
 800fe0a:	0100      	lsleq	r0, r0, #4
 800fe0c:	3304      	addeq	r3, #4
 800fe0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fe12:	bf04      	itt	eq
 800fe14:	0080      	lsleq	r0, r0, #2
 800fe16:	3302      	addeq	r3, #2
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	db05      	blt.n	800fe28 <__hi0bits+0x38>
 800fe1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fe20:	f103 0301 	add.w	r3, r3, #1
 800fe24:	bf08      	it	eq
 800fe26:	2320      	moveq	r3, #32
 800fe28:	4618      	mov	r0, r3
 800fe2a:	4770      	bx	lr
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	e7e4      	b.n	800fdfa <__hi0bits+0xa>

0800fe30 <__lo0bits>:
 800fe30:	6803      	ldr	r3, [r0, #0]
 800fe32:	f013 0207 	ands.w	r2, r3, #7
 800fe36:	d00c      	beq.n	800fe52 <__lo0bits+0x22>
 800fe38:	07d9      	lsls	r1, r3, #31
 800fe3a:	d422      	bmi.n	800fe82 <__lo0bits+0x52>
 800fe3c:	079a      	lsls	r2, r3, #30
 800fe3e:	bf49      	itett	mi
 800fe40:	085b      	lsrmi	r3, r3, #1
 800fe42:	089b      	lsrpl	r3, r3, #2
 800fe44:	6003      	strmi	r3, [r0, #0]
 800fe46:	2201      	movmi	r2, #1
 800fe48:	bf5c      	itt	pl
 800fe4a:	6003      	strpl	r3, [r0, #0]
 800fe4c:	2202      	movpl	r2, #2
 800fe4e:	4610      	mov	r0, r2
 800fe50:	4770      	bx	lr
 800fe52:	b299      	uxth	r1, r3
 800fe54:	b909      	cbnz	r1, 800fe5a <__lo0bits+0x2a>
 800fe56:	0c1b      	lsrs	r3, r3, #16
 800fe58:	2210      	movs	r2, #16
 800fe5a:	b2d9      	uxtb	r1, r3
 800fe5c:	b909      	cbnz	r1, 800fe62 <__lo0bits+0x32>
 800fe5e:	3208      	adds	r2, #8
 800fe60:	0a1b      	lsrs	r3, r3, #8
 800fe62:	0719      	lsls	r1, r3, #28
 800fe64:	bf04      	itt	eq
 800fe66:	091b      	lsreq	r3, r3, #4
 800fe68:	3204      	addeq	r2, #4
 800fe6a:	0799      	lsls	r1, r3, #30
 800fe6c:	bf04      	itt	eq
 800fe6e:	089b      	lsreq	r3, r3, #2
 800fe70:	3202      	addeq	r2, #2
 800fe72:	07d9      	lsls	r1, r3, #31
 800fe74:	d403      	bmi.n	800fe7e <__lo0bits+0x4e>
 800fe76:	085b      	lsrs	r3, r3, #1
 800fe78:	f102 0201 	add.w	r2, r2, #1
 800fe7c:	d003      	beq.n	800fe86 <__lo0bits+0x56>
 800fe7e:	6003      	str	r3, [r0, #0]
 800fe80:	e7e5      	b.n	800fe4e <__lo0bits+0x1e>
 800fe82:	2200      	movs	r2, #0
 800fe84:	e7e3      	b.n	800fe4e <__lo0bits+0x1e>
 800fe86:	2220      	movs	r2, #32
 800fe88:	e7e1      	b.n	800fe4e <__lo0bits+0x1e>
	...

0800fe8c <__i2b>:
 800fe8c:	b510      	push	{r4, lr}
 800fe8e:	460c      	mov	r4, r1
 800fe90:	2101      	movs	r1, #1
 800fe92:	f7ff febb 	bl	800fc0c <_Balloc>
 800fe96:	4602      	mov	r2, r0
 800fe98:	b928      	cbnz	r0, 800fea6 <__i2b+0x1a>
 800fe9a:	4b05      	ldr	r3, [pc, #20]	; (800feb0 <__i2b+0x24>)
 800fe9c:	4805      	ldr	r0, [pc, #20]	; (800feb4 <__i2b+0x28>)
 800fe9e:	f240 1145 	movw	r1, #325	; 0x145
 800fea2:	f7fd fe51 	bl	800db48 <__assert_func>
 800fea6:	2301      	movs	r3, #1
 800fea8:	6144      	str	r4, [r0, #20]
 800feaa:	6103      	str	r3, [r0, #16]
 800feac:	bd10      	pop	{r4, pc}
 800feae:	bf00      	nop
 800feb0:	08013525 	.word	0x08013525
 800feb4:	08013536 	.word	0x08013536

0800feb8 <__multiply>:
 800feb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800febc:	4691      	mov	r9, r2
 800febe:	690a      	ldr	r2, [r1, #16]
 800fec0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fec4:	429a      	cmp	r2, r3
 800fec6:	bfb8      	it	lt
 800fec8:	460b      	movlt	r3, r1
 800feca:	460c      	mov	r4, r1
 800fecc:	bfbc      	itt	lt
 800fece:	464c      	movlt	r4, r9
 800fed0:	4699      	movlt	r9, r3
 800fed2:	6927      	ldr	r7, [r4, #16]
 800fed4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fed8:	68a3      	ldr	r3, [r4, #8]
 800feda:	6861      	ldr	r1, [r4, #4]
 800fedc:	eb07 060a 	add.w	r6, r7, sl
 800fee0:	42b3      	cmp	r3, r6
 800fee2:	b085      	sub	sp, #20
 800fee4:	bfb8      	it	lt
 800fee6:	3101      	addlt	r1, #1
 800fee8:	f7ff fe90 	bl	800fc0c <_Balloc>
 800feec:	b930      	cbnz	r0, 800fefc <__multiply+0x44>
 800feee:	4602      	mov	r2, r0
 800fef0:	4b44      	ldr	r3, [pc, #272]	; (8010004 <__multiply+0x14c>)
 800fef2:	4845      	ldr	r0, [pc, #276]	; (8010008 <__multiply+0x150>)
 800fef4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fef8:	f7fd fe26 	bl	800db48 <__assert_func>
 800fefc:	f100 0514 	add.w	r5, r0, #20
 800ff00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff04:	462b      	mov	r3, r5
 800ff06:	2200      	movs	r2, #0
 800ff08:	4543      	cmp	r3, r8
 800ff0a:	d321      	bcc.n	800ff50 <__multiply+0x98>
 800ff0c:	f104 0314 	add.w	r3, r4, #20
 800ff10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ff14:	f109 0314 	add.w	r3, r9, #20
 800ff18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ff1c:	9202      	str	r2, [sp, #8]
 800ff1e:	1b3a      	subs	r2, r7, r4
 800ff20:	3a15      	subs	r2, #21
 800ff22:	f022 0203 	bic.w	r2, r2, #3
 800ff26:	3204      	adds	r2, #4
 800ff28:	f104 0115 	add.w	r1, r4, #21
 800ff2c:	428f      	cmp	r7, r1
 800ff2e:	bf38      	it	cc
 800ff30:	2204      	movcc	r2, #4
 800ff32:	9201      	str	r2, [sp, #4]
 800ff34:	9a02      	ldr	r2, [sp, #8]
 800ff36:	9303      	str	r3, [sp, #12]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d80c      	bhi.n	800ff56 <__multiply+0x9e>
 800ff3c:	2e00      	cmp	r6, #0
 800ff3e:	dd03      	ble.n	800ff48 <__multiply+0x90>
 800ff40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d05b      	beq.n	8010000 <__multiply+0x148>
 800ff48:	6106      	str	r6, [r0, #16]
 800ff4a:	b005      	add	sp, #20
 800ff4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff50:	f843 2b04 	str.w	r2, [r3], #4
 800ff54:	e7d8      	b.n	800ff08 <__multiply+0x50>
 800ff56:	f8b3 a000 	ldrh.w	sl, [r3]
 800ff5a:	f1ba 0f00 	cmp.w	sl, #0
 800ff5e:	d024      	beq.n	800ffaa <__multiply+0xf2>
 800ff60:	f104 0e14 	add.w	lr, r4, #20
 800ff64:	46a9      	mov	r9, r5
 800ff66:	f04f 0c00 	mov.w	ip, #0
 800ff6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ff6e:	f8d9 1000 	ldr.w	r1, [r9]
 800ff72:	fa1f fb82 	uxth.w	fp, r2
 800ff76:	b289      	uxth	r1, r1
 800ff78:	fb0a 110b 	mla	r1, sl, fp, r1
 800ff7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ff80:	f8d9 2000 	ldr.w	r2, [r9]
 800ff84:	4461      	add	r1, ip
 800ff86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ff8a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ff8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ff92:	b289      	uxth	r1, r1
 800ff94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ff98:	4577      	cmp	r7, lr
 800ff9a:	f849 1b04 	str.w	r1, [r9], #4
 800ff9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ffa2:	d8e2      	bhi.n	800ff6a <__multiply+0xb2>
 800ffa4:	9a01      	ldr	r2, [sp, #4]
 800ffa6:	f845 c002 	str.w	ip, [r5, r2]
 800ffaa:	9a03      	ldr	r2, [sp, #12]
 800ffac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ffb0:	3304      	adds	r3, #4
 800ffb2:	f1b9 0f00 	cmp.w	r9, #0
 800ffb6:	d021      	beq.n	800fffc <__multiply+0x144>
 800ffb8:	6829      	ldr	r1, [r5, #0]
 800ffba:	f104 0c14 	add.w	ip, r4, #20
 800ffbe:	46ae      	mov	lr, r5
 800ffc0:	f04f 0a00 	mov.w	sl, #0
 800ffc4:	f8bc b000 	ldrh.w	fp, [ip]
 800ffc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ffcc:	fb09 220b 	mla	r2, r9, fp, r2
 800ffd0:	4452      	add	r2, sl
 800ffd2:	b289      	uxth	r1, r1
 800ffd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ffd8:	f84e 1b04 	str.w	r1, [lr], #4
 800ffdc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ffe0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ffe4:	f8be 1000 	ldrh.w	r1, [lr]
 800ffe8:	fb09 110a 	mla	r1, r9, sl, r1
 800ffec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800fff0:	4567      	cmp	r7, ip
 800fff2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fff6:	d8e5      	bhi.n	800ffc4 <__multiply+0x10c>
 800fff8:	9a01      	ldr	r2, [sp, #4]
 800fffa:	50a9      	str	r1, [r5, r2]
 800fffc:	3504      	adds	r5, #4
 800fffe:	e799      	b.n	800ff34 <__multiply+0x7c>
 8010000:	3e01      	subs	r6, #1
 8010002:	e79b      	b.n	800ff3c <__multiply+0x84>
 8010004:	08013525 	.word	0x08013525
 8010008:	08013536 	.word	0x08013536

0801000c <__pow5mult>:
 801000c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010010:	4615      	mov	r5, r2
 8010012:	f012 0203 	ands.w	r2, r2, #3
 8010016:	4606      	mov	r6, r0
 8010018:	460f      	mov	r7, r1
 801001a:	d007      	beq.n	801002c <__pow5mult+0x20>
 801001c:	4c25      	ldr	r4, [pc, #148]	; (80100b4 <__pow5mult+0xa8>)
 801001e:	3a01      	subs	r2, #1
 8010020:	2300      	movs	r3, #0
 8010022:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010026:	f7ff fe53 	bl	800fcd0 <__multadd>
 801002a:	4607      	mov	r7, r0
 801002c:	10ad      	asrs	r5, r5, #2
 801002e:	d03d      	beq.n	80100ac <__pow5mult+0xa0>
 8010030:	69f4      	ldr	r4, [r6, #28]
 8010032:	b97c      	cbnz	r4, 8010054 <__pow5mult+0x48>
 8010034:	2010      	movs	r0, #16
 8010036:	f7fd fdb7 	bl	800dba8 <malloc>
 801003a:	4602      	mov	r2, r0
 801003c:	61f0      	str	r0, [r6, #28]
 801003e:	b928      	cbnz	r0, 801004c <__pow5mult+0x40>
 8010040:	4b1d      	ldr	r3, [pc, #116]	; (80100b8 <__pow5mult+0xac>)
 8010042:	481e      	ldr	r0, [pc, #120]	; (80100bc <__pow5mult+0xb0>)
 8010044:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010048:	f7fd fd7e 	bl	800db48 <__assert_func>
 801004c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010050:	6004      	str	r4, [r0, #0]
 8010052:	60c4      	str	r4, [r0, #12]
 8010054:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010058:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801005c:	b94c      	cbnz	r4, 8010072 <__pow5mult+0x66>
 801005e:	f240 2171 	movw	r1, #625	; 0x271
 8010062:	4630      	mov	r0, r6
 8010064:	f7ff ff12 	bl	800fe8c <__i2b>
 8010068:	2300      	movs	r3, #0
 801006a:	f8c8 0008 	str.w	r0, [r8, #8]
 801006e:	4604      	mov	r4, r0
 8010070:	6003      	str	r3, [r0, #0]
 8010072:	f04f 0900 	mov.w	r9, #0
 8010076:	07eb      	lsls	r3, r5, #31
 8010078:	d50a      	bpl.n	8010090 <__pow5mult+0x84>
 801007a:	4639      	mov	r1, r7
 801007c:	4622      	mov	r2, r4
 801007e:	4630      	mov	r0, r6
 8010080:	f7ff ff1a 	bl	800feb8 <__multiply>
 8010084:	4639      	mov	r1, r7
 8010086:	4680      	mov	r8, r0
 8010088:	4630      	mov	r0, r6
 801008a:	f7ff fdff 	bl	800fc8c <_Bfree>
 801008e:	4647      	mov	r7, r8
 8010090:	106d      	asrs	r5, r5, #1
 8010092:	d00b      	beq.n	80100ac <__pow5mult+0xa0>
 8010094:	6820      	ldr	r0, [r4, #0]
 8010096:	b938      	cbnz	r0, 80100a8 <__pow5mult+0x9c>
 8010098:	4622      	mov	r2, r4
 801009a:	4621      	mov	r1, r4
 801009c:	4630      	mov	r0, r6
 801009e:	f7ff ff0b 	bl	800feb8 <__multiply>
 80100a2:	6020      	str	r0, [r4, #0]
 80100a4:	f8c0 9000 	str.w	r9, [r0]
 80100a8:	4604      	mov	r4, r0
 80100aa:	e7e4      	b.n	8010076 <__pow5mult+0x6a>
 80100ac:	4638      	mov	r0, r7
 80100ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100b2:	bf00      	nop
 80100b4:	08013680 	.word	0x08013680
 80100b8:	080134b6 	.word	0x080134b6
 80100bc:	08013536 	.word	0x08013536

080100c0 <__lshift>:
 80100c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100c4:	460c      	mov	r4, r1
 80100c6:	6849      	ldr	r1, [r1, #4]
 80100c8:	6923      	ldr	r3, [r4, #16]
 80100ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80100ce:	68a3      	ldr	r3, [r4, #8]
 80100d0:	4607      	mov	r7, r0
 80100d2:	4691      	mov	r9, r2
 80100d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80100d8:	f108 0601 	add.w	r6, r8, #1
 80100dc:	42b3      	cmp	r3, r6
 80100de:	db0b      	blt.n	80100f8 <__lshift+0x38>
 80100e0:	4638      	mov	r0, r7
 80100e2:	f7ff fd93 	bl	800fc0c <_Balloc>
 80100e6:	4605      	mov	r5, r0
 80100e8:	b948      	cbnz	r0, 80100fe <__lshift+0x3e>
 80100ea:	4602      	mov	r2, r0
 80100ec:	4b28      	ldr	r3, [pc, #160]	; (8010190 <__lshift+0xd0>)
 80100ee:	4829      	ldr	r0, [pc, #164]	; (8010194 <__lshift+0xd4>)
 80100f0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80100f4:	f7fd fd28 	bl	800db48 <__assert_func>
 80100f8:	3101      	adds	r1, #1
 80100fa:	005b      	lsls	r3, r3, #1
 80100fc:	e7ee      	b.n	80100dc <__lshift+0x1c>
 80100fe:	2300      	movs	r3, #0
 8010100:	f100 0114 	add.w	r1, r0, #20
 8010104:	f100 0210 	add.w	r2, r0, #16
 8010108:	4618      	mov	r0, r3
 801010a:	4553      	cmp	r3, sl
 801010c:	db33      	blt.n	8010176 <__lshift+0xb6>
 801010e:	6920      	ldr	r0, [r4, #16]
 8010110:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010114:	f104 0314 	add.w	r3, r4, #20
 8010118:	f019 091f 	ands.w	r9, r9, #31
 801011c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010120:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010124:	d02b      	beq.n	801017e <__lshift+0xbe>
 8010126:	f1c9 0e20 	rsb	lr, r9, #32
 801012a:	468a      	mov	sl, r1
 801012c:	2200      	movs	r2, #0
 801012e:	6818      	ldr	r0, [r3, #0]
 8010130:	fa00 f009 	lsl.w	r0, r0, r9
 8010134:	4310      	orrs	r0, r2
 8010136:	f84a 0b04 	str.w	r0, [sl], #4
 801013a:	f853 2b04 	ldr.w	r2, [r3], #4
 801013e:	459c      	cmp	ip, r3
 8010140:	fa22 f20e 	lsr.w	r2, r2, lr
 8010144:	d8f3      	bhi.n	801012e <__lshift+0x6e>
 8010146:	ebac 0304 	sub.w	r3, ip, r4
 801014a:	3b15      	subs	r3, #21
 801014c:	f023 0303 	bic.w	r3, r3, #3
 8010150:	3304      	adds	r3, #4
 8010152:	f104 0015 	add.w	r0, r4, #21
 8010156:	4584      	cmp	ip, r0
 8010158:	bf38      	it	cc
 801015a:	2304      	movcc	r3, #4
 801015c:	50ca      	str	r2, [r1, r3]
 801015e:	b10a      	cbz	r2, 8010164 <__lshift+0xa4>
 8010160:	f108 0602 	add.w	r6, r8, #2
 8010164:	3e01      	subs	r6, #1
 8010166:	4638      	mov	r0, r7
 8010168:	612e      	str	r6, [r5, #16]
 801016a:	4621      	mov	r1, r4
 801016c:	f7ff fd8e 	bl	800fc8c <_Bfree>
 8010170:	4628      	mov	r0, r5
 8010172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010176:	f842 0f04 	str.w	r0, [r2, #4]!
 801017a:	3301      	adds	r3, #1
 801017c:	e7c5      	b.n	801010a <__lshift+0x4a>
 801017e:	3904      	subs	r1, #4
 8010180:	f853 2b04 	ldr.w	r2, [r3], #4
 8010184:	f841 2f04 	str.w	r2, [r1, #4]!
 8010188:	459c      	cmp	ip, r3
 801018a:	d8f9      	bhi.n	8010180 <__lshift+0xc0>
 801018c:	e7ea      	b.n	8010164 <__lshift+0xa4>
 801018e:	bf00      	nop
 8010190:	08013525 	.word	0x08013525
 8010194:	08013536 	.word	0x08013536

08010198 <__mcmp>:
 8010198:	b530      	push	{r4, r5, lr}
 801019a:	6902      	ldr	r2, [r0, #16]
 801019c:	690c      	ldr	r4, [r1, #16]
 801019e:	1b12      	subs	r2, r2, r4
 80101a0:	d10e      	bne.n	80101c0 <__mcmp+0x28>
 80101a2:	f100 0314 	add.w	r3, r0, #20
 80101a6:	3114      	adds	r1, #20
 80101a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80101ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80101b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80101b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80101b8:	42a5      	cmp	r5, r4
 80101ba:	d003      	beq.n	80101c4 <__mcmp+0x2c>
 80101bc:	d305      	bcc.n	80101ca <__mcmp+0x32>
 80101be:	2201      	movs	r2, #1
 80101c0:	4610      	mov	r0, r2
 80101c2:	bd30      	pop	{r4, r5, pc}
 80101c4:	4283      	cmp	r3, r0
 80101c6:	d3f3      	bcc.n	80101b0 <__mcmp+0x18>
 80101c8:	e7fa      	b.n	80101c0 <__mcmp+0x28>
 80101ca:	f04f 32ff 	mov.w	r2, #4294967295
 80101ce:	e7f7      	b.n	80101c0 <__mcmp+0x28>

080101d0 <__mdiff>:
 80101d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d4:	460c      	mov	r4, r1
 80101d6:	4606      	mov	r6, r0
 80101d8:	4611      	mov	r1, r2
 80101da:	4620      	mov	r0, r4
 80101dc:	4690      	mov	r8, r2
 80101de:	f7ff ffdb 	bl	8010198 <__mcmp>
 80101e2:	1e05      	subs	r5, r0, #0
 80101e4:	d110      	bne.n	8010208 <__mdiff+0x38>
 80101e6:	4629      	mov	r1, r5
 80101e8:	4630      	mov	r0, r6
 80101ea:	f7ff fd0f 	bl	800fc0c <_Balloc>
 80101ee:	b930      	cbnz	r0, 80101fe <__mdiff+0x2e>
 80101f0:	4b3a      	ldr	r3, [pc, #232]	; (80102dc <__mdiff+0x10c>)
 80101f2:	4602      	mov	r2, r0
 80101f4:	f240 2137 	movw	r1, #567	; 0x237
 80101f8:	4839      	ldr	r0, [pc, #228]	; (80102e0 <__mdiff+0x110>)
 80101fa:	f7fd fca5 	bl	800db48 <__assert_func>
 80101fe:	2301      	movs	r3, #1
 8010200:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010208:	bfa4      	itt	ge
 801020a:	4643      	movge	r3, r8
 801020c:	46a0      	movge	r8, r4
 801020e:	4630      	mov	r0, r6
 8010210:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010214:	bfa6      	itte	ge
 8010216:	461c      	movge	r4, r3
 8010218:	2500      	movge	r5, #0
 801021a:	2501      	movlt	r5, #1
 801021c:	f7ff fcf6 	bl	800fc0c <_Balloc>
 8010220:	b920      	cbnz	r0, 801022c <__mdiff+0x5c>
 8010222:	4b2e      	ldr	r3, [pc, #184]	; (80102dc <__mdiff+0x10c>)
 8010224:	4602      	mov	r2, r0
 8010226:	f240 2145 	movw	r1, #581	; 0x245
 801022a:	e7e5      	b.n	80101f8 <__mdiff+0x28>
 801022c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010230:	6926      	ldr	r6, [r4, #16]
 8010232:	60c5      	str	r5, [r0, #12]
 8010234:	f104 0914 	add.w	r9, r4, #20
 8010238:	f108 0514 	add.w	r5, r8, #20
 801023c:	f100 0e14 	add.w	lr, r0, #20
 8010240:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010244:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010248:	f108 0210 	add.w	r2, r8, #16
 801024c:	46f2      	mov	sl, lr
 801024e:	2100      	movs	r1, #0
 8010250:	f859 3b04 	ldr.w	r3, [r9], #4
 8010254:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010258:	fa11 f88b 	uxtah	r8, r1, fp
 801025c:	b299      	uxth	r1, r3
 801025e:	0c1b      	lsrs	r3, r3, #16
 8010260:	eba8 0801 	sub.w	r8, r8, r1
 8010264:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010268:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801026c:	fa1f f888 	uxth.w	r8, r8
 8010270:	1419      	asrs	r1, r3, #16
 8010272:	454e      	cmp	r6, r9
 8010274:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010278:	f84a 3b04 	str.w	r3, [sl], #4
 801027c:	d8e8      	bhi.n	8010250 <__mdiff+0x80>
 801027e:	1b33      	subs	r3, r6, r4
 8010280:	3b15      	subs	r3, #21
 8010282:	f023 0303 	bic.w	r3, r3, #3
 8010286:	3304      	adds	r3, #4
 8010288:	3415      	adds	r4, #21
 801028a:	42a6      	cmp	r6, r4
 801028c:	bf38      	it	cc
 801028e:	2304      	movcc	r3, #4
 8010290:	441d      	add	r5, r3
 8010292:	4473      	add	r3, lr
 8010294:	469e      	mov	lr, r3
 8010296:	462e      	mov	r6, r5
 8010298:	4566      	cmp	r6, ip
 801029a:	d30e      	bcc.n	80102ba <__mdiff+0xea>
 801029c:	f10c 0203 	add.w	r2, ip, #3
 80102a0:	1b52      	subs	r2, r2, r5
 80102a2:	f022 0203 	bic.w	r2, r2, #3
 80102a6:	3d03      	subs	r5, #3
 80102a8:	45ac      	cmp	ip, r5
 80102aa:	bf38      	it	cc
 80102ac:	2200      	movcc	r2, #0
 80102ae:	4413      	add	r3, r2
 80102b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80102b4:	b17a      	cbz	r2, 80102d6 <__mdiff+0x106>
 80102b6:	6107      	str	r7, [r0, #16]
 80102b8:	e7a4      	b.n	8010204 <__mdiff+0x34>
 80102ba:	f856 8b04 	ldr.w	r8, [r6], #4
 80102be:	fa11 f288 	uxtah	r2, r1, r8
 80102c2:	1414      	asrs	r4, r2, #16
 80102c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80102c8:	b292      	uxth	r2, r2
 80102ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80102ce:	f84e 2b04 	str.w	r2, [lr], #4
 80102d2:	1421      	asrs	r1, r4, #16
 80102d4:	e7e0      	b.n	8010298 <__mdiff+0xc8>
 80102d6:	3f01      	subs	r7, #1
 80102d8:	e7ea      	b.n	80102b0 <__mdiff+0xe0>
 80102da:	bf00      	nop
 80102dc:	08013525 	.word	0x08013525
 80102e0:	08013536 	.word	0x08013536

080102e4 <__ulp>:
 80102e4:	b082      	sub	sp, #8
 80102e6:	ed8d 0b00 	vstr	d0, [sp]
 80102ea:	9a01      	ldr	r2, [sp, #4]
 80102ec:	4b0f      	ldr	r3, [pc, #60]	; (801032c <__ulp+0x48>)
 80102ee:	4013      	ands	r3, r2
 80102f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	dc08      	bgt.n	801030a <__ulp+0x26>
 80102f8:	425b      	negs	r3, r3
 80102fa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80102fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010302:	da04      	bge.n	801030e <__ulp+0x2a>
 8010304:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010308:	4113      	asrs	r3, r2
 801030a:	2200      	movs	r2, #0
 801030c:	e008      	b.n	8010320 <__ulp+0x3c>
 801030e:	f1a2 0314 	sub.w	r3, r2, #20
 8010312:	2b1e      	cmp	r3, #30
 8010314:	bfda      	itte	le
 8010316:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801031a:	40da      	lsrle	r2, r3
 801031c:	2201      	movgt	r2, #1
 801031e:	2300      	movs	r3, #0
 8010320:	4619      	mov	r1, r3
 8010322:	4610      	mov	r0, r2
 8010324:	ec41 0b10 	vmov	d0, r0, r1
 8010328:	b002      	add	sp, #8
 801032a:	4770      	bx	lr
 801032c:	7ff00000 	.word	0x7ff00000

08010330 <__b2d>:
 8010330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010334:	6906      	ldr	r6, [r0, #16]
 8010336:	f100 0814 	add.w	r8, r0, #20
 801033a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801033e:	1f37      	subs	r7, r6, #4
 8010340:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010344:	4610      	mov	r0, r2
 8010346:	f7ff fd53 	bl	800fdf0 <__hi0bits>
 801034a:	f1c0 0320 	rsb	r3, r0, #32
 801034e:	280a      	cmp	r0, #10
 8010350:	600b      	str	r3, [r1, #0]
 8010352:	491b      	ldr	r1, [pc, #108]	; (80103c0 <__b2d+0x90>)
 8010354:	dc15      	bgt.n	8010382 <__b2d+0x52>
 8010356:	f1c0 0c0b 	rsb	ip, r0, #11
 801035a:	fa22 f30c 	lsr.w	r3, r2, ip
 801035e:	45b8      	cmp	r8, r7
 8010360:	ea43 0501 	orr.w	r5, r3, r1
 8010364:	bf34      	ite	cc
 8010366:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801036a:	2300      	movcs	r3, #0
 801036c:	3015      	adds	r0, #21
 801036e:	fa02 f000 	lsl.w	r0, r2, r0
 8010372:	fa23 f30c 	lsr.w	r3, r3, ip
 8010376:	4303      	orrs	r3, r0
 8010378:	461c      	mov	r4, r3
 801037a:	ec45 4b10 	vmov	d0, r4, r5
 801037e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010382:	45b8      	cmp	r8, r7
 8010384:	bf3a      	itte	cc
 8010386:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801038a:	f1a6 0708 	subcc.w	r7, r6, #8
 801038e:	2300      	movcs	r3, #0
 8010390:	380b      	subs	r0, #11
 8010392:	d012      	beq.n	80103ba <__b2d+0x8a>
 8010394:	f1c0 0120 	rsb	r1, r0, #32
 8010398:	fa23 f401 	lsr.w	r4, r3, r1
 801039c:	4082      	lsls	r2, r0
 801039e:	4322      	orrs	r2, r4
 80103a0:	4547      	cmp	r7, r8
 80103a2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80103a6:	bf8c      	ite	hi
 80103a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80103ac:	2200      	movls	r2, #0
 80103ae:	4083      	lsls	r3, r0
 80103b0:	40ca      	lsrs	r2, r1
 80103b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80103b6:	4313      	orrs	r3, r2
 80103b8:	e7de      	b.n	8010378 <__b2d+0x48>
 80103ba:	ea42 0501 	orr.w	r5, r2, r1
 80103be:	e7db      	b.n	8010378 <__b2d+0x48>
 80103c0:	3ff00000 	.word	0x3ff00000

080103c4 <__d2b>:
 80103c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80103c8:	460f      	mov	r7, r1
 80103ca:	2101      	movs	r1, #1
 80103cc:	ec59 8b10 	vmov	r8, r9, d0
 80103d0:	4616      	mov	r6, r2
 80103d2:	f7ff fc1b 	bl	800fc0c <_Balloc>
 80103d6:	4604      	mov	r4, r0
 80103d8:	b930      	cbnz	r0, 80103e8 <__d2b+0x24>
 80103da:	4602      	mov	r2, r0
 80103dc:	4b24      	ldr	r3, [pc, #144]	; (8010470 <__d2b+0xac>)
 80103de:	4825      	ldr	r0, [pc, #148]	; (8010474 <__d2b+0xb0>)
 80103e0:	f240 310f 	movw	r1, #783	; 0x30f
 80103e4:	f7fd fbb0 	bl	800db48 <__assert_func>
 80103e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80103ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80103f0:	bb2d      	cbnz	r5, 801043e <__d2b+0x7a>
 80103f2:	9301      	str	r3, [sp, #4]
 80103f4:	f1b8 0300 	subs.w	r3, r8, #0
 80103f8:	d026      	beq.n	8010448 <__d2b+0x84>
 80103fa:	4668      	mov	r0, sp
 80103fc:	9300      	str	r3, [sp, #0]
 80103fe:	f7ff fd17 	bl	800fe30 <__lo0bits>
 8010402:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010406:	b1e8      	cbz	r0, 8010444 <__d2b+0x80>
 8010408:	f1c0 0320 	rsb	r3, r0, #32
 801040c:	fa02 f303 	lsl.w	r3, r2, r3
 8010410:	430b      	orrs	r3, r1
 8010412:	40c2      	lsrs	r2, r0
 8010414:	6163      	str	r3, [r4, #20]
 8010416:	9201      	str	r2, [sp, #4]
 8010418:	9b01      	ldr	r3, [sp, #4]
 801041a:	61a3      	str	r3, [r4, #24]
 801041c:	2b00      	cmp	r3, #0
 801041e:	bf14      	ite	ne
 8010420:	2202      	movne	r2, #2
 8010422:	2201      	moveq	r2, #1
 8010424:	6122      	str	r2, [r4, #16]
 8010426:	b1bd      	cbz	r5, 8010458 <__d2b+0x94>
 8010428:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801042c:	4405      	add	r5, r0
 801042e:	603d      	str	r5, [r7, #0]
 8010430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010434:	6030      	str	r0, [r6, #0]
 8010436:	4620      	mov	r0, r4
 8010438:	b003      	add	sp, #12
 801043a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801043e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010442:	e7d6      	b.n	80103f2 <__d2b+0x2e>
 8010444:	6161      	str	r1, [r4, #20]
 8010446:	e7e7      	b.n	8010418 <__d2b+0x54>
 8010448:	a801      	add	r0, sp, #4
 801044a:	f7ff fcf1 	bl	800fe30 <__lo0bits>
 801044e:	9b01      	ldr	r3, [sp, #4]
 8010450:	6163      	str	r3, [r4, #20]
 8010452:	3020      	adds	r0, #32
 8010454:	2201      	movs	r2, #1
 8010456:	e7e5      	b.n	8010424 <__d2b+0x60>
 8010458:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801045c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010460:	6038      	str	r0, [r7, #0]
 8010462:	6918      	ldr	r0, [r3, #16]
 8010464:	f7ff fcc4 	bl	800fdf0 <__hi0bits>
 8010468:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801046c:	e7e2      	b.n	8010434 <__d2b+0x70>
 801046e:	bf00      	nop
 8010470:	08013525 	.word	0x08013525
 8010474:	08013536 	.word	0x08013536

08010478 <__ratio>:
 8010478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801047c:	4688      	mov	r8, r1
 801047e:	4669      	mov	r1, sp
 8010480:	4681      	mov	r9, r0
 8010482:	f7ff ff55 	bl	8010330 <__b2d>
 8010486:	a901      	add	r1, sp, #4
 8010488:	4640      	mov	r0, r8
 801048a:	ec55 4b10 	vmov	r4, r5, d0
 801048e:	f7ff ff4f 	bl	8010330 <__b2d>
 8010492:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010496:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801049a:	eba3 0c02 	sub.w	ip, r3, r2
 801049e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80104a2:	1a9b      	subs	r3, r3, r2
 80104a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80104a8:	ec51 0b10 	vmov	r0, r1, d0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	bfd6      	itet	le
 80104b0:	460a      	movle	r2, r1
 80104b2:	462a      	movgt	r2, r5
 80104b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80104b8:	468b      	mov	fp, r1
 80104ba:	462f      	mov	r7, r5
 80104bc:	bfd4      	ite	le
 80104be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80104c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80104c6:	4620      	mov	r0, r4
 80104c8:	ee10 2a10 	vmov	r2, s0
 80104cc:	465b      	mov	r3, fp
 80104ce:	4639      	mov	r1, r7
 80104d0:	f7f0 f9e4 	bl	800089c <__aeabi_ddiv>
 80104d4:	ec41 0b10 	vmov	d0, r0, r1
 80104d8:	b003      	add	sp, #12
 80104da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104de <__copybits>:
 80104de:	3901      	subs	r1, #1
 80104e0:	b570      	push	{r4, r5, r6, lr}
 80104e2:	1149      	asrs	r1, r1, #5
 80104e4:	6914      	ldr	r4, [r2, #16]
 80104e6:	3101      	adds	r1, #1
 80104e8:	f102 0314 	add.w	r3, r2, #20
 80104ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80104f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80104f4:	1f05      	subs	r5, r0, #4
 80104f6:	42a3      	cmp	r3, r4
 80104f8:	d30c      	bcc.n	8010514 <__copybits+0x36>
 80104fa:	1aa3      	subs	r3, r4, r2
 80104fc:	3b11      	subs	r3, #17
 80104fe:	f023 0303 	bic.w	r3, r3, #3
 8010502:	3211      	adds	r2, #17
 8010504:	42a2      	cmp	r2, r4
 8010506:	bf88      	it	hi
 8010508:	2300      	movhi	r3, #0
 801050a:	4418      	add	r0, r3
 801050c:	2300      	movs	r3, #0
 801050e:	4288      	cmp	r0, r1
 8010510:	d305      	bcc.n	801051e <__copybits+0x40>
 8010512:	bd70      	pop	{r4, r5, r6, pc}
 8010514:	f853 6b04 	ldr.w	r6, [r3], #4
 8010518:	f845 6f04 	str.w	r6, [r5, #4]!
 801051c:	e7eb      	b.n	80104f6 <__copybits+0x18>
 801051e:	f840 3b04 	str.w	r3, [r0], #4
 8010522:	e7f4      	b.n	801050e <__copybits+0x30>

08010524 <__any_on>:
 8010524:	f100 0214 	add.w	r2, r0, #20
 8010528:	6900      	ldr	r0, [r0, #16]
 801052a:	114b      	asrs	r3, r1, #5
 801052c:	4298      	cmp	r0, r3
 801052e:	b510      	push	{r4, lr}
 8010530:	db11      	blt.n	8010556 <__any_on+0x32>
 8010532:	dd0a      	ble.n	801054a <__any_on+0x26>
 8010534:	f011 011f 	ands.w	r1, r1, #31
 8010538:	d007      	beq.n	801054a <__any_on+0x26>
 801053a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801053e:	fa24 f001 	lsr.w	r0, r4, r1
 8010542:	fa00 f101 	lsl.w	r1, r0, r1
 8010546:	428c      	cmp	r4, r1
 8010548:	d10b      	bne.n	8010562 <__any_on+0x3e>
 801054a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801054e:	4293      	cmp	r3, r2
 8010550:	d803      	bhi.n	801055a <__any_on+0x36>
 8010552:	2000      	movs	r0, #0
 8010554:	bd10      	pop	{r4, pc}
 8010556:	4603      	mov	r3, r0
 8010558:	e7f7      	b.n	801054a <__any_on+0x26>
 801055a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801055e:	2900      	cmp	r1, #0
 8010560:	d0f5      	beq.n	801054e <__any_on+0x2a>
 8010562:	2001      	movs	r0, #1
 8010564:	e7f6      	b.n	8010554 <__any_on+0x30>

08010566 <sulp>:
 8010566:	b570      	push	{r4, r5, r6, lr}
 8010568:	4604      	mov	r4, r0
 801056a:	460d      	mov	r5, r1
 801056c:	ec45 4b10 	vmov	d0, r4, r5
 8010570:	4616      	mov	r6, r2
 8010572:	f7ff feb7 	bl	80102e4 <__ulp>
 8010576:	ec51 0b10 	vmov	r0, r1, d0
 801057a:	b17e      	cbz	r6, 801059c <sulp+0x36>
 801057c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010580:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010584:	2b00      	cmp	r3, #0
 8010586:	dd09      	ble.n	801059c <sulp+0x36>
 8010588:	051b      	lsls	r3, r3, #20
 801058a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801058e:	2400      	movs	r4, #0
 8010590:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010594:	4622      	mov	r2, r4
 8010596:	462b      	mov	r3, r5
 8010598:	f7f0 f856 	bl	8000648 <__aeabi_dmul>
 801059c:	bd70      	pop	{r4, r5, r6, pc}
	...

080105a0 <_strtod_l>:
 80105a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a4:	ed2d 8b02 	vpush	{d8}
 80105a8:	b09b      	sub	sp, #108	; 0x6c
 80105aa:	4604      	mov	r4, r0
 80105ac:	9213      	str	r2, [sp, #76]	; 0x4c
 80105ae:	2200      	movs	r2, #0
 80105b0:	9216      	str	r2, [sp, #88]	; 0x58
 80105b2:	460d      	mov	r5, r1
 80105b4:	f04f 0800 	mov.w	r8, #0
 80105b8:	f04f 0900 	mov.w	r9, #0
 80105bc:	460a      	mov	r2, r1
 80105be:	9215      	str	r2, [sp, #84]	; 0x54
 80105c0:	7811      	ldrb	r1, [r2, #0]
 80105c2:	292b      	cmp	r1, #43	; 0x2b
 80105c4:	d04c      	beq.n	8010660 <_strtod_l+0xc0>
 80105c6:	d83a      	bhi.n	801063e <_strtod_l+0x9e>
 80105c8:	290d      	cmp	r1, #13
 80105ca:	d834      	bhi.n	8010636 <_strtod_l+0x96>
 80105cc:	2908      	cmp	r1, #8
 80105ce:	d834      	bhi.n	801063a <_strtod_l+0x9a>
 80105d0:	2900      	cmp	r1, #0
 80105d2:	d03d      	beq.n	8010650 <_strtod_l+0xb0>
 80105d4:	2200      	movs	r2, #0
 80105d6:	920a      	str	r2, [sp, #40]	; 0x28
 80105d8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80105da:	7832      	ldrb	r2, [r6, #0]
 80105dc:	2a30      	cmp	r2, #48	; 0x30
 80105de:	f040 80b4 	bne.w	801074a <_strtod_l+0x1aa>
 80105e2:	7872      	ldrb	r2, [r6, #1]
 80105e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80105e8:	2a58      	cmp	r2, #88	; 0x58
 80105ea:	d170      	bne.n	80106ce <_strtod_l+0x12e>
 80105ec:	9302      	str	r3, [sp, #8]
 80105ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105f0:	9301      	str	r3, [sp, #4]
 80105f2:	ab16      	add	r3, sp, #88	; 0x58
 80105f4:	9300      	str	r3, [sp, #0]
 80105f6:	4a8e      	ldr	r2, [pc, #568]	; (8010830 <_strtod_l+0x290>)
 80105f8:	ab17      	add	r3, sp, #92	; 0x5c
 80105fa:	a915      	add	r1, sp, #84	; 0x54
 80105fc:	4620      	mov	r0, r4
 80105fe:	f001 fac1 	bl	8011b84 <__gethex>
 8010602:	f010 070f 	ands.w	r7, r0, #15
 8010606:	4605      	mov	r5, r0
 8010608:	d005      	beq.n	8010616 <_strtod_l+0x76>
 801060a:	2f06      	cmp	r7, #6
 801060c:	d12a      	bne.n	8010664 <_strtod_l+0xc4>
 801060e:	3601      	adds	r6, #1
 8010610:	2300      	movs	r3, #0
 8010612:	9615      	str	r6, [sp, #84]	; 0x54
 8010614:	930a      	str	r3, [sp, #40]	; 0x28
 8010616:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010618:	2b00      	cmp	r3, #0
 801061a:	f040 857f 	bne.w	801111c <_strtod_l+0xb7c>
 801061e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010620:	b1db      	cbz	r3, 801065a <_strtod_l+0xba>
 8010622:	4642      	mov	r2, r8
 8010624:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010628:	ec43 2b10 	vmov	d0, r2, r3
 801062c:	b01b      	add	sp, #108	; 0x6c
 801062e:	ecbd 8b02 	vpop	{d8}
 8010632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010636:	2920      	cmp	r1, #32
 8010638:	d1cc      	bne.n	80105d4 <_strtod_l+0x34>
 801063a:	3201      	adds	r2, #1
 801063c:	e7bf      	b.n	80105be <_strtod_l+0x1e>
 801063e:	292d      	cmp	r1, #45	; 0x2d
 8010640:	d1c8      	bne.n	80105d4 <_strtod_l+0x34>
 8010642:	2101      	movs	r1, #1
 8010644:	910a      	str	r1, [sp, #40]	; 0x28
 8010646:	1c51      	adds	r1, r2, #1
 8010648:	9115      	str	r1, [sp, #84]	; 0x54
 801064a:	7852      	ldrb	r2, [r2, #1]
 801064c:	2a00      	cmp	r2, #0
 801064e:	d1c3      	bne.n	80105d8 <_strtod_l+0x38>
 8010650:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010652:	9515      	str	r5, [sp, #84]	; 0x54
 8010654:	2b00      	cmp	r3, #0
 8010656:	f040 855f 	bne.w	8011118 <_strtod_l+0xb78>
 801065a:	4642      	mov	r2, r8
 801065c:	464b      	mov	r3, r9
 801065e:	e7e3      	b.n	8010628 <_strtod_l+0x88>
 8010660:	2100      	movs	r1, #0
 8010662:	e7ef      	b.n	8010644 <_strtod_l+0xa4>
 8010664:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010666:	b13a      	cbz	r2, 8010678 <_strtod_l+0xd8>
 8010668:	2135      	movs	r1, #53	; 0x35
 801066a:	a818      	add	r0, sp, #96	; 0x60
 801066c:	f7ff ff37 	bl	80104de <__copybits>
 8010670:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010672:	4620      	mov	r0, r4
 8010674:	f7ff fb0a 	bl	800fc8c <_Bfree>
 8010678:	3f01      	subs	r7, #1
 801067a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801067c:	2f04      	cmp	r7, #4
 801067e:	d806      	bhi.n	801068e <_strtod_l+0xee>
 8010680:	e8df f007 	tbb	[pc, r7]
 8010684:	201d0314 	.word	0x201d0314
 8010688:	14          	.byte	0x14
 8010689:	00          	.byte	0x00
 801068a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801068e:	05e9      	lsls	r1, r5, #23
 8010690:	bf48      	it	mi
 8010692:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010696:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801069a:	0d1b      	lsrs	r3, r3, #20
 801069c:	051b      	lsls	r3, r3, #20
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d1b9      	bne.n	8010616 <_strtod_l+0x76>
 80106a2:	f7fe fbab 	bl	800edfc <__errno>
 80106a6:	2322      	movs	r3, #34	; 0x22
 80106a8:	6003      	str	r3, [r0, #0]
 80106aa:	e7b4      	b.n	8010616 <_strtod_l+0x76>
 80106ac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80106b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80106b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80106b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80106bc:	e7e7      	b.n	801068e <_strtod_l+0xee>
 80106be:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010838 <_strtod_l+0x298>
 80106c2:	e7e4      	b.n	801068e <_strtod_l+0xee>
 80106c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80106c8:	f04f 38ff 	mov.w	r8, #4294967295
 80106cc:	e7df      	b.n	801068e <_strtod_l+0xee>
 80106ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106d0:	1c5a      	adds	r2, r3, #1
 80106d2:	9215      	str	r2, [sp, #84]	; 0x54
 80106d4:	785b      	ldrb	r3, [r3, #1]
 80106d6:	2b30      	cmp	r3, #48	; 0x30
 80106d8:	d0f9      	beq.n	80106ce <_strtod_l+0x12e>
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d09b      	beq.n	8010616 <_strtod_l+0x76>
 80106de:	2301      	movs	r3, #1
 80106e0:	f04f 0a00 	mov.w	sl, #0
 80106e4:	9304      	str	r3, [sp, #16]
 80106e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80106ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80106ee:	46d3      	mov	fp, sl
 80106f0:	220a      	movs	r2, #10
 80106f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80106f4:	7806      	ldrb	r6, [r0, #0]
 80106f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80106fa:	b2d9      	uxtb	r1, r3
 80106fc:	2909      	cmp	r1, #9
 80106fe:	d926      	bls.n	801074e <_strtod_l+0x1ae>
 8010700:	494c      	ldr	r1, [pc, #304]	; (8010834 <_strtod_l+0x294>)
 8010702:	2201      	movs	r2, #1
 8010704:	f001 f9a6 	bl	8011a54 <strncmp>
 8010708:	2800      	cmp	r0, #0
 801070a:	d030      	beq.n	801076e <_strtod_l+0x1ce>
 801070c:	2000      	movs	r0, #0
 801070e:	4632      	mov	r2, r6
 8010710:	9005      	str	r0, [sp, #20]
 8010712:	465e      	mov	r6, fp
 8010714:	4603      	mov	r3, r0
 8010716:	2a65      	cmp	r2, #101	; 0x65
 8010718:	d001      	beq.n	801071e <_strtod_l+0x17e>
 801071a:	2a45      	cmp	r2, #69	; 0x45
 801071c:	d113      	bne.n	8010746 <_strtod_l+0x1a6>
 801071e:	b91e      	cbnz	r6, 8010728 <_strtod_l+0x188>
 8010720:	9a04      	ldr	r2, [sp, #16]
 8010722:	4302      	orrs	r2, r0
 8010724:	d094      	beq.n	8010650 <_strtod_l+0xb0>
 8010726:	2600      	movs	r6, #0
 8010728:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801072a:	1c6a      	adds	r2, r5, #1
 801072c:	9215      	str	r2, [sp, #84]	; 0x54
 801072e:	786a      	ldrb	r2, [r5, #1]
 8010730:	2a2b      	cmp	r2, #43	; 0x2b
 8010732:	d074      	beq.n	801081e <_strtod_l+0x27e>
 8010734:	2a2d      	cmp	r2, #45	; 0x2d
 8010736:	d078      	beq.n	801082a <_strtod_l+0x28a>
 8010738:	f04f 0c00 	mov.w	ip, #0
 801073c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010740:	2909      	cmp	r1, #9
 8010742:	d97f      	bls.n	8010844 <_strtod_l+0x2a4>
 8010744:	9515      	str	r5, [sp, #84]	; 0x54
 8010746:	2700      	movs	r7, #0
 8010748:	e09e      	b.n	8010888 <_strtod_l+0x2e8>
 801074a:	2300      	movs	r3, #0
 801074c:	e7c8      	b.n	80106e0 <_strtod_l+0x140>
 801074e:	f1bb 0f08 	cmp.w	fp, #8
 8010752:	bfd8      	it	le
 8010754:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010756:	f100 0001 	add.w	r0, r0, #1
 801075a:	bfda      	itte	le
 801075c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010760:	9309      	strle	r3, [sp, #36]	; 0x24
 8010762:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010766:	f10b 0b01 	add.w	fp, fp, #1
 801076a:	9015      	str	r0, [sp, #84]	; 0x54
 801076c:	e7c1      	b.n	80106f2 <_strtod_l+0x152>
 801076e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010770:	1c5a      	adds	r2, r3, #1
 8010772:	9215      	str	r2, [sp, #84]	; 0x54
 8010774:	785a      	ldrb	r2, [r3, #1]
 8010776:	f1bb 0f00 	cmp.w	fp, #0
 801077a:	d037      	beq.n	80107ec <_strtod_l+0x24c>
 801077c:	9005      	str	r0, [sp, #20]
 801077e:	465e      	mov	r6, fp
 8010780:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010784:	2b09      	cmp	r3, #9
 8010786:	d912      	bls.n	80107ae <_strtod_l+0x20e>
 8010788:	2301      	movs	r3, #1
 801078a:	e7c4      	b.n	8010716 <_strtod_l+0x176>
 801078c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801078e:	1c5a      	adds	r2, r3, #1
 8010790:	9215      	str	r2, [sp, #84]	; 0x54
 8010792:	785a      	ldrb	r2, [r3, #1]
 8010794:	3001      	adds	r0, #1
 8010796:	2a30      	cmp	r2, #48	; 0x30
 8010798:	d0f8      	beq.n	801078c <_strtod_l+0x1ec>
 801079a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801079e:	2b08      	cmp	r3, #8
 80107a0:	f200 84c1 	bhi.w	8011126 <_strtod_l+0xb86>
 80107a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107a6:	9005      	str	r0, [sp, #20]
 80107a8:	2000      	movs	r0, #0
 80107aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80107ac:	4606      	mov	r6, r0
 80107ae:	3a30      	subs	r2, #48	; 0x30
 80107b0:	f100 0301 	add.w	r3, r0, #1
 80107b4:	d014      	beq.n	80107e0 <_strtod_l+0x240>
 80107b6:	9905      	ldr	r1, [sp, #20]
 80107b8:	4419      	add	r1, r3
 80107ba:	9105      	str	r1, [sp, #20]
 80107bc:	4633      	mov	r3, r6
 80107be:	eb00 0c06 	add.w	ip, r0, r6
 80107c2:	210a      	movs	r1, #10
 80107c4:	4563      	cmp	r3, ip
 80107c6:	d113      	bne.n	80107f0 <_strtod_l+0x250>
 80107c8:	1833      	adds	r3, r6, r0
 80107ca:	2b08      	cmp	r3, #8
 80107cc:	f106 0601 	add.w	r6, r6, #1
 80107d0:	4406      	add	r6, r0
 80107d2:	dc1a      	bgt.n	801080a <_strtod_l+0x26a>
 80107d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107d6:	230a      	movs	r3, #10
 80107d8:	fb03 2301 	mla	r3, r3, r1, r2
 80107dc:	9309      	str	r3, [sp, #36]	; 0x24
 80107de:	2300      	movs	r3, #0
 80107e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80107e2:	1c51      	adds	r1, r2, #1
 80107e4:	9115      	str	r1, [sp, #84]	; 0x54
 80107e6:	7852      	ldrb	r2, [r2, #1]
 80107e8:	4618      	mov	r0, r3
 80107ea:	e7c9      	b.n	8010780 <_strtod_l+0x1e0>
 80107ec:	4658      	mov	r0, fp
 80107ee:	e7d2      	b.n	8010796 <_strtod_l+0x1f6>
 80107f0:	2b08      	cmp	r3, #8
 80107f2:	f103 0301 	add.w	r3, r3, #1
 80107f6:	dc03      	bgt.n	8010800 <_strtod_l+0x260>
 80107f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80107fa:	434f      	muls	r7, r1
 80107fc:	9709      	str	r7, [sp, #36]	; 0x24
 80107fe:	e7e1      	b.n	80107c4 <_strtod_l+0x224>
 8010800:	2b10      	cmp	r3, #16
 8010802:	bfd8      	it	le
 8010804:	fb01 fa0a 	mulle.w	sl, r1, sl
 8010808:	e7dc      	b.n	80107c4 <_strtod_l+0x224>
 801080a:	2e10      	cmp	r6, #16
 801080c:	bfdc      	itt	le
 801080e:	230a      	movle	r3, #10
 8010810:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8010814:	e7e3      	b.n	80107de <_strtod_l+0x23e>
 8010816:	2300      	movs	r3, #0
 8010818:	9305      	str	r3, [sp, #20]
 801081a:	2301      	movs	r3, #1
 801081c:	e780      	b.n	8010720 <_strtod_l+0x180>
 801081e:	f04f 0c00 	mov.w	ip, #0
 8010822:	1caa      	adds	r2, r5, #2
 8010824:	9215      	str	r2, [sp, #84]	; 0x54
 8010826:	78aa      	ldrb	r2, [r5, #2]
 8010828:	e788      	b.n	801073c <_strtod_l+0x19c>
 801082a:	f04f 0c01 	mov.w	ip, #1
 801082e:	e7f8      	b.n	8010822 <_strtod_l+0x282>
 8010830:	08013690 	.word	0x08013690
 8010834:	0801368c 	.word	0x0801368c
 8010838:	7ff00000 	.word	0x7ff00000
 801083c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801083e:	1c51      	adds	r1, r2, #1
 8010840:	9115      	str	r1, [sp, #84]	; 0x54
 8010842:	7852      	ldrb	r2, [r2, #1]
 8010844:	2a30      	cmp	r2, #48	; 0x30
 8010846:	d0f9      	beq.n	801083c <_strtod_l+0x29c>
 8010848:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801084c:	2908      	cmp	r1, #8
 801084e:	f63f af7a 	bhi.w	8010746 <_strtod_l+0x1a6>
 8010852:	3a30      	subs	r2, #48	; 0x30
 8010854:	9208      	str	r2, [sp, #32]
 8010856:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010858:	920c      	str	r2, [sp, #48]	; 0x30
 801085a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801085c:	1c57      	adds	r7, r2, #1
 801085e:	9715      	str	r7, [sp, #84]	; 0x54
 8010860:	7852      	ldrb	r2, [r2, #1]
 8010862:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010866:	f1be 0f09 	cmp.w	lr, #9
 801086a:	d938      	bls.n	80108de <_strtod_l+0x33e>
 801086c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801086e:	1a7f      	subs	r7, r7, r1
 8010870:	2f08      	cmp	r7, #8
 8010872:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010876:	dc03      	bgt.n	8010880 <_strtod_l+0x2e0>
 8010878:	9908      	ldr	r1, [sp, #32]
 801087a:	428f      	cmp	r7, r1
 801087c:	bfa8      	it	ge
 801087e:	460f      	movge	r7, r1
 8010880:	f1bc 0f00 	cmp.w	ip, #0
 8010884:	d000      	beq.n	8010888 <_strtod_l+0x2e8>
 8010886:	427f      	negs	r7, r7
 8010888:	2e00      	cmp	r6, #0
 801088a:	d14f      	bne.n	801092c <_strtod_l+0x38c>
 801088c:	9904      	ldr	r1, [sp, #16]
 801088e:	4301      	orrs	r1, r0
 8010890:	f47f aec1 	bne.w	8010616 <_strtod_l+0x76>
 8010894:	2b00      	cmp	r3, #0
 8010896:	f47f aedb 	bne.w	8010650 <_strtod_l+0xb0>
 801089a:	2a69      	cmp	r2, #105	; 0x69
 801089c:	d029      	beq.n	80108f2 <_strtod_l+0x352>
 801089e:	dc26      	bgt.n	80108ee <_strtod_l+0x34e>
 80108a0:	2a49      	cmp	r2, #73	; 0x49
 80108a2:	d026      	beq.n	80108f2 <_strtod_l+0x352>
 80108a4:	2a4e      	cmp	r2, #78	; 0x4e
 80108a6:	f47f aed3 	bne.w	8010650 <_strtod_l+0xb0>
 80108aa:	499b      	ldr	r1, [pc, #620]	; (8010b18 <_strtod_l+0x578>)
 80108ac:	a815      	add	r0, sp, #84	; 0x54
 80108ae:	f001 fba9 	bl	8012004 <__match>
 80108b2:	2800      	cmp	r0, #0
 80108b4:	f43f aecc 	beq.w	8010650 <_strtod_l+0xb0>
 80108b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	2b28      	cmp	r3, #40	; 0x28
 80108be:	d12f      	bne.n	8010920 <_strtod_l+0x380>
 80108c0:	4996      	ldr	r1, [pc, #600]	; (8010b1c <_strtod_l+0x57c>)
 80108c2:	aa18      	add	r2, sp, #96	; 0x60
 80108c4:	a815      	add	r0, sp, #84	; 0x54
 80108c6:	f001 fbb1 	bl	801202c <__hexnan>
 80108ca:	2805      	cmp	r0, #5
 80108cc:	d128      	bne.n	8010920 <_strtod_l+0x380>
 80108ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80108d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80108d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80108d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80108dc:	e69b      	b.n	8010616 <_strtod_l+0x76>
 80108de:	9f08      	ldr	r7, [sp, #32]
 80108e0:	210a      	movs	r1, #10
 80108e2:	fb01 2107 	mla	r1, r1, r7, r2
 80108e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80108ea:	9208      	str	r2, [sp, #32]
 80108ec:	e7b5      	b.n	801085a <_strtod_l+0x2ba>
 80108ee:	2a6e      	cmp	r2, #110	; 0x6e
 80108f0:	e7d9      	b.n	80108a6 <_strtod_l+0x306>
 80108f2:	498b      	ldr	r1, [pc, #556]	; (8010b20 <_strtod_l+0x580>)
 80108f4:	a815      	add	r0, sp, #84	; 0x54
 80108f6:	f001 fb85 	bl	8012004 <__match>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	f43f aea8 	beq.w	8010650 <_strtod_l+0xb0>
 8010900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010902:	4988      	ldr	r1, [pc, #544]	; (8010b24 <_strtod_l+0x584>)
 8010904:	3b01      	subs	r3, #1
 8010906:	a815      	add	r0, sp, #84	; 0x54
 8010908:	9315      	str	r3, [sp, #84]	; 0x54
 801090a:	f001 fb7b 	bl	8012004 <__match>
 801090e:	b910      	cbnz	r0, 8010916 <_strtod_l+0x376>
 8010910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010912:	3301      	adds	r3, #1
 8010914:	9315      	str	r3, [sp, #84]	; 0x54
 8010916:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010b34 <_strtod_l+0x594>
 801091a:	f04f 0800 	mov.w	r8, #0
 801091e:	e67a      	b.n	8010616 <_strtod_l+0x76>
 8010920:	4881      	ldr	r0, [pc, #516]	; (8010b28 <_strtod_l+0x588>)
 8010922:	f001 f8a9 	bl	8011a78 <nan>
 8010926:	ec59 8b10 	vmov	r8, r9, d0
 801092a:	e674      	b.n	8010616 <_strtod_l+0x76>
 801092c:	9b05      	ldr	r3, [sp, #20]
 801092e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010930:	1afb      	subs	r3, r7, r3
 8010932:	f1bb 0f00 	cmp.w	fp, #0
 8010936:	bf08      	it	eq
 8010938:	46b3      	moveq	fp, r6
 801093a:	2e10      	cmp	r6, #16
 801093c:	9308      	str	r3, [sp, #32]
 801093e:	4635      	mov	r5, r6
 8010940:	bfa8      	it	ge
 8010942:	2510      	movge	r5, #16
 8010944:	f7ef fe06 	bl	8000554 <__aeabi_ui2d>
 8010948:	2e09      	cmp	r6, #9
 801094a:	4680      	mov	r8, r0
 801094c:	4689      	mov	r9, r1
 801094e:	dd13      	ble.n	8010978 <_strtod_l+0x3d8>
 8010950:	4b76      	ldr	r3, [pc, #472]	; (8010b2c <_strtod_l+0x58c>)
 8010952:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010956:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801095a:	f7ef fe75 	bl	8000648 <__aeabi_dmul>
 801095e:	4680      	mov	r8, r0
 8010960:	4650      	mov	r0, sl
 8010962:	4689      	mov	r9, r1
 8010964:	f7ef fdf6 	bl	8000554 <__aeabi_ui2d>
 8010968:	4602      	mov	r2, r0
 801096a:	460b      	mov	r3, r1
 801096c:	4640      	mov	r0, r8
 801096e:	4649      	mov	r1, r9
 8010970:	f7ef fcb4 	bl	80002dc <__adddf3>
 8010974:	4680      	mov	r8, r0
 8010976:	4689      	mov	r9, r1
 8010978:	2e0f      	cmp	r6, #15
 801097a:	dc38      	bgt.n	80109ee <_strtod_l+0x44e>
 801097c:	9b08      	ldr	r3, [sp, #32]
 801097e:	2b00      	cmp	r3, #0
 8010980:	f43f ae49 	beq.w	8010616 <_strtod_l+0x76>
 8010984:	dd24      	ble.n	80109d0 <_strtod_l+0x430>
 8010986:	2b16      	cmp	r3, #22
 8010988:	dc0b      	bgt.n	80109a2 <_strtod_l+0x402>
 801098a:	4968      	ldr	r1, [pc, #416]	; (8010b2c <_strtod_l+0x58c>)
 801098c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010994:	4642      	mov	r2, r8
 8010996:	464b      	mov	r3, r9
 8010998:	f7ef fe56 	bl	8000648 <__aeabi_dmul>
 801099c:	4680      	mov	r8, r0
 801099e:	4689      	mov	r9, r1
 80109a0:	e639      	b.n	8010616 <_strtod_l+0x76>
 80109a2:	9a08      	ldr	r2, [sp, #32]
 80109a4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80109a8:	4293      	cmp	r3, r2
 80109aa:	db20      	blt.n	80109ee <_strtod_l+0x44e>
 80109ac:	4c5f      	ldr	r4, [pc, #380]	; (8010b2c <_strtod_l+0x58c>)
 80109ae:	f1c6 060f 	rsb	r6, r6, #15
 80109b2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80109b6:	4642      	mov	r2, r8
 80109b8:	464b      	mov	r3, r9
 80109ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109be:	f7ef fe43 	bl	8000648 <__aeabi_dmul>
 80109c2:	9b08      	ldr	r3, [sp, #32]
 80109c4:	1b9e      	subs	r6, r3, r6
 80109c6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80109ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80109ce:	e7e3      	b.n	8010998 <_strtod_l+0x3f8>
 80109d0:	9b08      	ldr	r3, [sp, #32]
 80109d2:	3316      	adds	r3, #22
 80109d4:	db0b      	blt.n	80109ee <_strtod_l+0x44e>
 80109d6:	9b05      	ldr	r3, [sp, #20]
 80109d8:	1bdf      	subs	r7, r3, r7
 80109da:	4b54      	ldr	r3, [pc, #336]	; (8010b2c <_strtod_l+0x58c>)
 80109dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80109e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109e4:	4640      	mov	r0, r8
 80109e6:	4649      	mov	r1, r9
 80109e8:	f7ef ff58 	bl	800089c <__aeabi_ddiv>
 80109ec:	e7d6      	b.n	801099c <_strtod_l+0x3fc>
 80109ee:	9b08      	ldr	r3, [sp, #32]
 80109f0:	1b75      	subs	r5, r6, r5
 80109f2:	441d      	add	r5, r3
 80109f4:	2d00      	cmp	r5, #0
 80109f6:	dd70      	ble.n	8010ada <_strtod_l+0x53a>
 80109f8:	f015 030f 	ands.w	r3, r5, #15
 80109fc:	d00a      	beq.n	8010a14 <_strtod_l+0x474>
 80109fe:	494b      	ldr	r1, [pc, #300]	; (8010b2c <_strtod_l+0x58c>)
 8010a00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010a04:	4642      	mov	r2, r8
 8010a06:	464b      	mov	r3, r9
 8010a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a0c:	f7ef fe1c 	bl	8000648 <__aeabi_dmul>
 8010a10:	4680      	mov	r8, r0
 8010a12:	4689      	mov	r9, r1
 8010a14:	f035 050f 	bics.w	r5, r5, #15
 8010a18:	d04d      	beq.n	8010ab6 <_strtod_l+0x516>
 8010a1a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8010a1e:	dd22      	ble.n	8010a66 <_strtod_l+0x4c6>
 8010a20:	2500      	movs	r5, #0
 8010a22:	46ab      	mov	fp, r5
 8010a24:	9509      	str	r5, [sp, #36]	; 0x24
 8010a26:	9505      	str	r5, [sp, #20]
 8010a28:	2322      	movs	r3, #34	; 0x22
 8010a2a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010b34 <_strtod_l+0x594>
 8010a2e:	6023      	str	r3, [r4, #0]
 8010a30:	f04f 0800 	mov.w	r8, #0
 8010a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	f43f aded 	beq.w	8010616 <_strtod_l+0x76>
 8010a3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f7ff f924 	bl	800fc8c <_Bfree>
 8010a44:	9905      	ldr	r1, [sp, #20]
 8010a46:	4620      	mov	r0, r4
 8010a48:	f7ff f920 	bl	800fc8c <_Bfree>
 8010a4c:	4659      	mov	r1, fp
 8010a4e:	4620      	mov	r0, r4
 8010a50:	f7ff f91c 	bl	800fc8c <_Bfree>
 8010a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a56:	4620      	mov	r0, r4
 8010a58:	f7ff f918 	bl	800fc8c <_Bfree>
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	4620      	mov	r0, r4
 8010a60:	f7ff f914 	bl	800fc8c <_Bfree>
 8010a64:	e5d7      	b.n	8010616 <_strtod_l+0x76>
 8010a66:	4b32      	ldr	r3, [pc, #200]	; (8010b30 <_strtod_l+0x590>)
 8010a68:	9304      	str	r3, [sp, #16]
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	112d      	asrs	r5, r5, #4
 8010a6e:	4640      	mov	r0, r8
 8010a70:	4649      	mov	r1, r9
 8010a72:	469a      	mov	sl, r3
 8010a74:	2d01      	cmp	r5, #1
 8010a76:	dc21      	bgt.n	8010abc <_strtod_l+0x51c>
 8010a78:	b10b      	cbz	r3, 8010a7e <_strtod_l+0x4de>
 8010a7a:	4680      	mov	r8, r0
 8010a7c:	4689      	mov	r9, r1
 8010a7e:	492c      	ldr	r1, [pc, #176]	; (8010b30 <_strtod_l+0x590>)
 8010a80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010a84:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010a88:	4642      	mov	r2, r8
 8010a8a:	464b      	mov	r3, r9
 8010a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a90:	f7ef fdda 	bl	8000648 <__aeabi_dmul>
 8010a94:	4b27      	ldr	r3, [pc, #156]	; (8010b34 <_strtod_l+0x594>)
 8010a96:	460a      	mov	r2, r1
 8010a98:	400b      	ands	r3, r1
 8010a9a:	4927      	ldr	r1, [pc, #156]	; (8010b38 <_strtod_l+0x598>)
 8010a9c:	428b      	cmp	r3, r1
 8010a9e:	4680      	mov	r8, r0
 8010aa0:	d8be      	bhi.n	8010a20 <_strtod_l+0x480>
 8010aa2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010aa6:	428b      	cmp	r3, r1
 8010aa8:	bf86      	itte	hi
 8010aaa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8010b3c <_strtod_l+0x59c>
 8010aae:	f04f 38ff 	movhi.w	r8, #4294967295
 8010ab2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	9304      	str	r3, [sp, #16]
 8010aba:	e07b      	b.n	8010bb4 <_strtod_l+0x614>
 8010abc:	07ea      	lsls	r2, r5, #31
 8010abe:	d505      	bpl.n	8010acc <_strtod_l+0x52c>
 8010ac0:	9b04      	ldr	r3, [sp, #16]
 8010ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac6:	f7ef fdbf 	bl	8000648 <__aeabi_dmul>
 8010aca:	2301      	movs	r3, #1
 8010acc:	9a04      	ldr	r2, [sp, #16]
 8010ace:	3208      	adds	r2, #8
 8010ad0:	f10a 0a01 	add.w	sl, sl, #1
 8010ad4:	106d      	asrs	r5, r5, #1
 8010ad6:	9204      	str	r2, [sp, #16]
 8010ad8:	e7cc      	b.n	8010a74 <_strtod_l+0x4d4>
 8010ada:	d0ec      	beq.n	8010ab6 <_strtod_l+0x516>
 8010adc:	426d      	negs	r5, r5
 8010ade:	f015 020f 	ands.w	r2, r5, #15
 8010ae2:	d00a      	beq.n	8010afa <_strtod_l+0x55a>
 8010ae4:	4b11      	ldr	r3, [pc, #68]	; (8010b2c <_strtod_l+0x58c>)
 8010ae6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010aea:	4640      	mov	r0, r8
 8010aec:	4649      	mov	r1, r9
 8010aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af2:	f7ef fed3 	bl	800089c <__aeabi_ddiv>
 8010af6:	4680      	mov	r8, r0
 8010af8:	4689      	mov	r9, r1
 8010afa:	112d      	asrs	r5, r5, #4
 8010afc:	d0db      	beq.n	8010ab6 <_strtod_l+0x516>
 8010afe:	2d1f      	cmp	r5, #31
 8010b00:	dd1e      	ble.n	8010b40 <_strtod_l+0x5a0>
 8010b02:	2500      	movs	r5, #0
 8010b04:	46ab      	mov	fp, r5
 8010b06:	9509      	str	r5, [sp, #36]	; 0x24
 8010b08:	9505      	str	r5, [sp, #20]
 8010b0a:	2322      	movs	r3, #34	; 0x22
 8010b0c:	f04f 0800 	mov.w	r8, #0
 8010b10:	f04f 0900 	mov.w	r9, #0
 8010b14:	6023      	str	r3, [r4, #0]
 8010b16:	e78d      	b.n	8010a34 <_strtod_l+0x494>
 8010b18:	0801347d 	.word	0x0801347d
 8010b1c:	080136a4 	.word	0x080136a4
 8010b20:	08013475 	.word	0x08013475
 8010b24:	080134ac 	.word	0x080134ac
 8010b28:	0801346f 	.word	0x0801346f
 8010b2c:	080135b8 	.word	0x080135b8
 8010b30:	08013590 	.word	0x08013590
 8010b34:	7ff00000 	.word	0x7ff00000
 8010b38:	7ca00000 	.word	0x7ca00000
 8010b3c:	7fefffff 	.word	0x7fefffff
 8010b40:	f015 0310 	ands.w	r3, r5, #16
 8010b44:	bf18      	it	ne
 8010b46:	236a      	movne	r3, #106	; 0x6a
 8010b48:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8010eec <_strtod_l+0x94c>
 8010b4c:	9304      	str	r3, [sp, #16]
 8010b4e:	4640      	mov	r0, r8
 8010b50:	4649      	mov	r1, r9
 8010b52:	2300      	movs	r3, #0
 8010b54:	07ea      	lsls	r2, r5, #31
 8010b56:	d504      	bpl.n	8010b62 <_strtod_l+0x5c2>
 8010b58:	e9da 2300 	ldrd	r2, r3, [sl]
 8010b5c:	f7ef fd74 	bl	8000648 <__aeabi_dmul>
 8010b60:	2301      	movs	r3, #1
 8010b62:	106d      	asrs	r5, r5, #1
 8010b64:	f10a 0a08 	add.w	sl, sl, #8
 8010b68:	d1f4      	bne.n	8010b54 <_strtod_l+0x5b4>
 8010b6a:	b10b      	cbz	r3, 8010b70 <_strtod_l+0x5d0>
 8010b6c:	4680      	mov	r8, r0
 8010b6e:	4689      	mov	r9, r1
 8010b70:	9b04      	ldr	r3, [sp, #16]
 8010b72:	b1bb      	cbz	r3, 8010ba4 <_strtod_l+0x604>
 8010b74:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010b78:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	4649      	mov	r1, r9
 8010b80:	dd10      	ble.n	8010ba4 <_strtod_l+0x604>
 8010b82:	2b1f      	cmp	r3, #31
 8010b84:	f340 811e 	ble.w	8010dc4 <_strtod_l+0x824>
 8010b88:	2b34      	cmp	r3, #52	; 0x34
 8010b8a:	bfde      	ittt	le
 8010b8c:	f04f 33ff 	movle.w	r3, #4294967295
 8010b90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010b94:	4093      	lslle	r3, r2
 8010b96:	f04f 0800 	mov.w	r8, #0
 8010b9a:	bfcc      	ite	gt
 8010b9c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010ba0:	ea03 0901 	andle.w	r9, r3, r1
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	4640      	mov	r0, r8
 8010baa:	4649      	mov	r1, r9
 8010bac:	f7ef ffb4 	bl	8000b18 <__aeabi_dcmpeq>
 8010bb0:	2800      	cmp	r0, #0
 8010bb2:	d1a6      	bne.n	8010b02 <_strtod_l+0x562>
 8010bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bb6:	9300      	str	r3, [sp, #0]
 8010bb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010bba:	4633      	mov	r3, r6
 8010bbc:	465a      	mov	r2, fp
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	f7ff f8cc 	bl	800fd5c <__s2b>
 8010bc4:	9009      	str	r0, [sp, #36]	; 0x24
 8010bc6:	2800      	cmp	r0, #0
 8010bc8:	f43f af2a 	beq.w	8010a20 <_strtod_l+0x480>
 8010bcc:	9a08      	ldr	r2, [sp, #32]
 8010bce:	9b05      	ldr	r3, [sp, #20]
 8010bd0:	2a00      	cmp	r2, #0
 8010bd2:	eba3 0307 	sub.w	r3, r3, r7
 8010bd6:	bfa8      	it	ge
 8010bd8:	2300      	movge	r3, #0
 8010bda:	930c      	str	r3, [sp, #48]	; 0x30
 8010bdc:	2500      	movs	r5, #0
 8010bde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010be2:	9312      	str	r3, [sp, #72]	; 0x48
 8010be4:	46ab      	mov	fp, r5
 8010be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010be8:	4620      	mov	r0, r4
 8010bea:	6859      	ldr	r1, [r3, #4]
 8010bec:	f7ff f80e 	bl	800fc0c <_Balloc>
 8010bf0:	9005      	str	r0, [sp, #20]
 8010bf2:	2800      	cmp	r0, #0
 8010bf4:	f43f af18 	beq.w	8010a28 <_strtod_l+0x488>
 8010bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bfa:	691a      	ldr	r2, [r3, #16]
 8010bfc:	3202      	adds	r2, #2
 8010bfe:	f103 010c 	add.w	r1, r3, #12
 8010c02:	0092      	lsls	r2, r2, #2
 8010c04:	300c      	adds	r0, #12
 8010c06:	f7fe f926 	bl	800ee56 <memcpy>
 8010c0a:	ec49 8b10 	vmov	d0, r8, r9
 8010c0e:	aa18      	add	r2, sp, #96	; 0x60
 8010c10:	a917      	add	r1, sp, #92	; 0x5c
 8010c12:	4620      	mov	r0, r4
 8010c14:	f7ff fbd6 	bl	80103c4 <__d2b>
 8010c18:	ec49 8b18 	vmov	d8, r8, r9
 8010c1c:	9016      	str	r0, [sp, #88]	; 0x58
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	f43f af02 	beq.w	8010a28 <_strtod_l+0x488>
 8010c24:	2101      	movs	r1, #1
 8010c26:	4620      	mov	r0, r4
 8010c28:	f7ff f930 	bl	800fe8c <__i2b>
 8010c2c:	4683      	mov	fp, r0
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	f43f aefa 	beq.w	8010a28 <_strtod_l+0x488>
 8010c34:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010c36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010c38:	2e00      	cmp	r6, #0
 8010c3a:	bfab      	itete	ge
 8010c3c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8010c3e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010c40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010c42:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010c46:	bfac      	ite	ge
 8010c48:	eb06 0a03 	addge.w	sl, r6, r3
 8010c4c:	1b9f      	sublt	r7, r3, r6
 8010c4e:	9b04      	ldr	r3, [sp, #16]
 8010c50:	1af6      	subs	r6, r6, r3
 8010c52:	4416      	add	r6, r2
 8010c54:	4ba0      	ldr	r3, [pc, #640]	; (8010ed8 <_strtod_l+0x938>)
 8010c56:	3e01      	subs	r6, #1
 8010c58:	429e      	cmp	r6, r3
 8010c5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010c5e:	f280 80c4 	bge.w	8010dea <_strtod_l+0x84a>
 8010c62:	1b9b      	subs	r3, r3, r6
 8010c64:	2b1f      	cmp	r3, #31
 8010c66:	eba2 0203 	sub.w	r2, r2, r3
 8010c6a:	f04f 0101 	mov.w	r1, #1
 8010c6e:	f300 80b0 	bgt.w	8010dd2 <_strtod_l+0x832>
 8010c72:	fa01 f303 	lsl.w	r3, r1, r3
 8010c76:	930e      	str	r3, [sp, #56]	; 0x38
 8010c78:	2300      	movs	r3, #0
 8010c7a:	930d      	str	r3, [sp, #52]	; 0x34
 8010c7c:	eb0a 0602 	add.w	r6, sl, r2
 8010c80:	9b04      	ldr	r3, [sp, #16]
 8010c82:	45b2      	cmp	sl, r6
 8010c84:	4417      	add	r7, r2
 8010c86:	441f      	add	r7, r3
 8010c88:	4653      	mov	r3, sl
 8010c8a:	bfa8      	it	ge
 8010c8c:	4633      	movge	r3, r6
 8010c8e:	42bb      	cmp	r3, r7
 8010c90:	bfa8      	it	ge
 8010c92:	463b      	movge	r3, r7
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	bfc2      	ittt	gt
 8010c98:	1af6      	subgt	r6, r6, r3
 8010c9a:	1aff      	subgt	r7, r7, r3
 8010c9c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010ca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	dd17      	ble.n	8010cd6 <_strtod_l+0x736>
 8010ca6:	4659      	mov	r1, fp
 8010ca8:	461a      	mov	r2, r3
 8010caa:	4620      	mov	r0, r4
 8010cac:	f7ff f9ae 	bl	801000c <__pow5mult>
 8010cb0:	4683      	mov	fp, r0
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	f43f aeb8 	beq.w	8010a28 <_strtod_l+0x488>
 8010cb8:	4601      	mov	r1, r0
 8010cba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f7ff f8fb 	bl	800feb8 <__multiply>
 8010cc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	f43f aeaf 	beq.w	8010a28 <_strtod_l+0x488>
 8010cca:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010ccc:	4620      	mov	r0, r4
 8010cce:	f7fe ffdd 	bl	800fc8c <_Bfree>
 8010cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cd4:	9316      	str	r3, [sp, #88]	; 0x58
 8010cd6:	2e00      	cmp	r6, #0
 8010cd8:	f300 808c 	bgt.w	8010df4 <_strtod_l+0x854>
 8010cdc:	9b08      	ldr	r3, [sp, #32]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	dd08      	ble.n	8010cf4 <_strtod_l+0x754>
 8010ce2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010ce4:	9905      	ldr	r1, [sp, #20]
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	f7ff f990 	bl	801000c <__pow5mult>
 8010cec:	9005      	str	r0, [sp, #20]
 8010cee:	2800      	cmp	r0, #0
 8010cf0:	f43f ae9a 	beq.w	8010a28 <_strtod_l+0x488>
 8010cf4:	2f00      	cmp	r7, #0
 8010cf6:	dd08      	ble.n	8010d0a <_strtod_l+0x76a>
 8010cf8:	9905      	ldr	r1, [sp, #20]
 8010cfa:	463a      	mov	r2, r7
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	f7ff f9df 	bl	80100c0 <__lshift>
 8010d02:	9005      	str	r0, [sp, #20]
 8010d04:	2800      	cmp	r0, #0
 8010d06:	f43f ae8f 	beq.w	8010a28 <_strtod_l+0x488>
 8010d0a:	f1ba 0f00 	cmp.w	sl, #0
 8010d0e:	dd08      	ble.n	8010d22 <_strtod_l+0x782>
 8010d10:	4659      	mov	r1, fp
 8010d12:	4652      	mov	r2, sl
 8010d14:	4620      	mov	r0, r4
 8010d16:	f7ff f9d3 	bl	80100c0 <__lshift>
 8010d1a:	4683      	mov	fp, r0
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	f43f ae83 	beq.w	8010a28 <_strtod_l+0x488>
 8010d22:	9a05      	ldr	r2, [sp, #20]
 8010d24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010d26:	4620      	mov	r0, r4
 8010d28:	f7ff fa52 	bl	80101d0 <__mdiff>
 8010d2c:	4605      	mov	r5, r0
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	f43f ae7a 	beq.w	8010a28 <_strtod_l+0x488>
 8010d34:	68c3      	ldr	r3, [r0, #12]
 8010d36:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d38:	2300      	movs	r3, #0
 8010d3a:	60c3      	str	r3, [r0, #12]
 8010d3c:	4659      	mov	r1, fp
 8010d3e:	f7ff fa2b 	bl	8010198 <__mcmp>
 8010d42:	2800      	cmp	r0, #0
 8010d44:	da60      	bge.n	8010e08 <_strtod_l+0x868>
 8010d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d48:	ea53 0308 	orrs.w	r3, r3, r8
 8010d4c:	f040 8084 	bne.w	8010e58 <_strtod_l+0x8b8>
 8010d50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d17f      	bne.n	8010e58 <_strtod_l+0x8b8>
 8010d58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010d5c:	0d1b      	lsrs	r3, r3, #20
 8010d5e:	051b      	lsls	r3, r3, #20
 8010d60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010d64:	d978      	bls.n	8010e58 <_strtod_l+0x8b8>
 8010d66:	696b      	ldr	r3, [r5, #20]
 8010d68:	b913      	cbnz	r3, 8010d70 <_strtod_l+0x7d0>
 8010d6a:	692b      	ldr	r3, [r5, #16]
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	dd73      	ble.n	8010e58 <_strtod_l+0x8b8>
 8010d70:	4629      	mov	r1, r5
 8010d72:	2201      	movs	r2, #1
 8010d74:	4620      	mov	r0, r4
 8010d76:	f7ff f9a3 	bl	80100c0 <__lshift>
 8010d7a:	4659      	mov	r1, fp
 8010d7c:	4605      	mov	r5, r0
 8010d7e:	f7ff fa0b 	bl	8010198 <__mcmp>
 8010d82:	2800      	cmp	r0, #0
 8010d84:	dd68      	ble.n	8010e58 <_strtod_l+0x8b8>
 8010d86:	9904      	ldr	r1, [sp, #16]
 8010d88:	4a54      	ldr	r2, [pc, #336]	; (8010edc <_strtod_l+0x93c>)
 8010d8a:	464b      	mov	r3, r9
 8010d8c:	2900      	cmp	r1, #0
 8010d8e:	f000 8084 	beq.w	8010e9a <_strtod_l+0x8fa>
 8010d92:	ea02 0109 	and.w	r1, r2, r9
 8010d96:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010d9a:	dc7e      	bgt.n	8010e9a <_strtod_l+0x8fa>
 8010d9c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010da0:	f77f aeb3 	ble.w	8010b0a <_strtod_l+0x56a>
 8010da4:	4b4e      	ldr	r3, [pc, #312]	; (8010ee0 <_strtod_l+0x940>)
 8010da6:	4640      	mov	r0, r8
 8010da8:	4649      	mov	r1, r9
 8010daa:	2200      	movs	r2, #0
 8010dac:	f7ef fc4c 	bl	8000648 <__aeabi_dmul>
 8010db0:	4b4a      	ldr	r3, [pc, #296]	; (8010edc <_strtod_l+0x93c>)
 8010db2:	400b      	ands	r3, r1
 8010db4:	4680      	mov	r8, r0
 8010db6:	4689      	mov	r9, r1
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	f47f ae3f 	bne.w	8010a3c <_strtod_l+0x49c>
 8010dbe:	2322      	movs	r3, #34	; 0x22
 8010dc0:	6023      	str	r3, [r4, #0]
 8010dc2:	e63b      	b.n	8010a3c <_strtod_l+0x49c>
 8010dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8010dcc:	ea03 0808 	and.w	r8, r3, r8
 8010dd0:	e6e8      	b.n	8010ba4 <_strtod_l+0x604>
 8010dd2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010dd6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010dda:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010dde:	36e2      	adds	r6, #226	; 0xe2
 8010de0:	fa01 f306 	lsl.w	r3, r1, r6
 8010de4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010de8:	e748      	b.n	8010c7c <_strtod_l+0x6dc>
 8010dea:	2100      	movs	r1, #0
 8010dec:	2301      	movs	r3, #1
 8010dee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8010df2:	e743      	b.n	8010c7c <_strtod_l+0x6dc>
 8010df4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010df6:	4632      	mov	r2, r6
 8010df8:	4620      	mov	r0, r4
 8010dfa:	f7ff f961 	bl	80100c0 <__lshift>
 8010dfe:	9016      	str	r0, [sp, #88]	; 0x58
 8010e00:	2800      	cmp	r0, #0
 8010e02:	f47f af6b 	bne.w	8010cdc <_strtod_l+0x73c>
 8010e06:	e60f      	b.n	8010a28 <_strtod_l+0x488>
 8010e08:	46ca      	mov	sl, r9
 8010e0a:	d171      	bne.n	8010ef0 <_strtod_l+0x950>
 8010e0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010e0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e12:	b352      	cbz	r2, 8010e6a <_strtod_l+0x8ca>
 8010e14:	4a33      	ldr	r2, [pc, #204]	; (8010ee4 <_strtod_l+0x944>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d12a      	bne.n	8010e70 <_strtod_l+0x8d0>
 8010e1a:	9b04      	ldr	r3, [sp, #16]
 8010e1c:	4641      	mov	r1, r8
 8010e1e:	b1fb      	cbz	r3, 8010e60 <_strtod_l+0x8c0>
 8010e20:	4b2e      	ldr	r3, [pc, #184]	; (8010edc <_strtod_l+0x93c>)
 8010e22:	ea09 0303 	and.w	r3, r9, r3
 8010e26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e2e:	d81a      	bhi.n	8010e66 <_strtod_l+0x8c6>
 8010e30:	0d1b      	lsrs	r3, r3, #20
 8010e32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010e36:	fa02 f303 	lsl.w	r3, r2, r3
 8010e3a:	4299      	cmp	r1, r3
 8010e3c:	d118      	bne.n	8010e70 <_strtod_l+0x8d0>
 8010e3e:	4b2a      	ldr	r3, [pc, #168]	; (8010ee8 <_strtod_l+0x948>)
 8010e40:	459a      	cmp	sl, r3
 8010e42:	d102      	bne.n	8010e4a <_strtod_l+0x8aa>
 8010e44:	3101      	adds	r1, #1
 8010e46:	f43f adef 	beq.w	8010a28 <_strtod_l+0x488>
 8010e4a:	4b24      	ldr	r3, [pc, #144]	; (8010edc <_strtod_l+0x93c>)
 8010e4c:	ea0a 0303 	and.w	r3, sl, r3
 8010e50:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010e54:	f04f 0800 	mov.w	r8, #0
 8010e58:	9b04      	ldr	r3, [sp, #16]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d1a2      	bne.n	8010da4 <_strtod_l+0x804>
 8010e5e:	e5ed      	b.n	8010a3c <_strtod_l+0x49c>
 8010e60:	f04f 33ff 	mov.w	r3, #4294967295
 8010e64:	e7e9      	b.n	8010e3a <_strtod_l+0x89a>
 8010e66:	4613      	mov	r3, r2
 8010e68:	e7e7      	b.n	8010e3a <_strtod_l+0x89a>
 8010e6a:	ea53 0308 	orrs.w	r3, r3, r8
 8010e6e:	d08a      	beq.n	8010d86 <_strtod_l+0x7e6>
 8010e70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e72:	b1e3      	cbz	r3, 8010eae <_strtod_l+0x90e>
 8010e74:	ea13 0f0a 	tst.w	r3, sl
 8010e78:	d0ee      	beq.n	8010e58 <_strtod_l+0x8b8>
 8010e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e7c:	9a04      	ldr	r2, [sp, #16]
 8010e7e:	4640      	mov	r0, r8
 8010e80:	4649      	mov	r1, r9
 8010e82:	b1c3      	cbz	r3, 8010eb6 <_strtod_l+0x916>
 8010e84:	f7ff fb6f 	bl	8010566 <sulp>
 8010e88:	4602      	mov	r2, r0
 8010e8a:	460b      	mov	r3, r1
 8010e8c:	ec51 0b18 	vmov	r0, r1, d8
 8010e90:	f7ef fa24 	bl	80002dc <__adddf3>
 8010e94:	4680      	mov	r8, r0
 8010e96:	4689      	mov	r9, r1
 8010e98:	e7de      	b.n	8010e58 <_strtod_l+0x8b8>
 8010e9a:	4013      	ands	r3, r2
 8010e9c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010ea0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8010ea4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010ea8:	f04f 38ff 	mov.w	r8, #4294967295
 8010eac:	e7d4      	b.n	8010e58 <_strtod_l+0x8b8>
 8010eae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010eb0:	ea13 0f08 	tst.w	r3, r8
 8010eb4:	e7e0      	b.n	8010e78 <_strtod_l+0x8d8>
 8010eb6:	f7ff fb56 	bl	8010566 <sulp>
 8010eba:	4602      	mov	r2, r0
 8010ebc:	460b      	mov	r3, r1
 8010ebe:	ec51 0b18 	vmov	r0, r1, d8
 8010ec2:	f7ef fa09 	bl	80002d8 <__aeabi_dsub>
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	2300      	movs	r3, #0
 8010eca:	4680      	mov	r8, r0
 8010ecc:	4689      	mov	r9, r1
 8010ece:	f7ef fe23 	bl	8000b18 <__aeabi_dcmpeq>
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	d0c0      	beq.n	8010e58 <_strtod_l+0x8b8>
 8010ed6:	e618      	b.n	8010b0a <_strtod_l+0x56a>
 8010ed8:	fffffc02 	.word	0xfffffc02
 8010edc:	7ff00000 	.word	0x7ff00000
 8010ee0:	39500000 	.word	0x39500000
 8010ee4:	000fffff 	.word	0x000fffff
 8010ee8:	7fefffff 	.word	0x7fefffff
 8010eec:	080136b8 	.word	0x080136b8
 8010ef0:	4659      	mov	r1, fp
 8010ef2:	4628      	mov	r0, r5
 8010ef4:	f7ff fac0 	bl	8010478 <__ratio>
 8010ef8:	ec57 6b10 	vmov	r6, r7, d0
 8010efc:	ee10 0a10 	vmov	r0, s0
 8010f00:	2200      	movs	r2, #0
 8010f02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010f06:	4639      	mov	r1, r7
 8010f08:	f7ef fe1a 	bl	8000b40 <__aeabi_dcmple>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	d071      	beq.n	8010ff4 <_strtod_l+0xa54>
 8010f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d17c      	bne.n	8011010 <_strtod_l+0xa70>
 8010f16:	f1b8 0f00 	cmp.w	r8, #0
 8010f1a:	d15a      	bne.n	8010fd2 <_strtod_l+0xa32>
 8010f1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d15d      	bne.n	8010fe0 <_strtod_l+0xa40>
 8010f24:	4b90      	ldr	r3, [pc, #576]	; (8011168 <_strtod_l+0xbc8>)
 8010f26:	2200      	movs	r2, #0
 8010f28:	4630      	mov	r0, r6
 8010f2a:	4639      	mov	r1, r7
 8010f2c:	f7ef fdfe 	bl	8000b2c <__aeabi_dcmplt>
 8010f30:	2800      	cmp	r0, #0
 8010f32:	d15c      	bne.n	8010fee <_strtod_l+0xa4e>
 8010f34:	4630      	mov	r0, r6
 8010f36:	4639      	mov	r1, r7
 8010f38:	4b8c      	ldr	r3, [pc, #560]	; (801116c <_strtod_l+0xbcc>)
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	f7ef fb84 	bl	8000648 <__aeabi_dmul>
 8010f40:	4606      	mov	r6, r0
 8010f42:	460f      	mov	r7, r1
 8010f44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010f48:	9606      	str	r6, [sp, #24]
 8010f4a:	9307      	str	r3, [sp, #28]
 8010f4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f50:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010f54:	4b86      	ldr	r3, [pc, #536]	; (8011170 <_strtod_l+0xbd0>)
 8010f56:	ea0a 0303 	and.w	r3, sl, r3
 8010f5a:	930d      	str	r3, [sp, #52]	; 0x34
 8010f5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f5e:	4b85      	ldr	r3, [pc, #532]	; (8011174 <_strtod_l+0xbd4>)
 8010f60:	429a      	cmp	r2, r3
 8010f62:	f040 8090 	bne.w	8011086 <_strtod_l+0xae6>
 8010f66:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8010f6a:	ec49 8b10 	vmov	d0, r8, r9
 8010f6e:	f7ff f9b9 	bl	80102e4 <__ulp>
 8010f72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f76:	ec51 0b10 	vmov	r0, r1, d0
 8010f7a:	f7ef fb65 	bl	8000648 <__aeabi_dmul>
 8010f7e:	4642      	mov	r2, r8
 8010f80:	464b      	mov	r3, r9
 8010f82:	f7ef f9ab 	bl	80002dc <__adddf3>
 8010f86:	460b      	mov	r3, r1
 8010f88:	4979      	ldr	r1, [pc, #484]	; (8011170 <_strtod_l+0xbd0>)
 8010f8a:	4a7b      	ldr	r2, [pc, #492]	; (8011178 <_strtod_l+0xbd8>)
 8010f8c:	4019      	ands	r1, r3
 8010f8e:	4291      	cmp	r1, r2
 8010f90:	4680      	mov	r8, r0
 8010f92:	d944      	bls.n	801101e <_strtod_l+0xa7e>
 8010f94:	ee18 2a90 	vmov	r2, s17
 8010f98:	4b78      	ldr	r3, [pc, #480]	; (801117c <_strtod_l+0xbdc>)
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d104      	bne.n	8010fa8 <_strtod_l+0xa08>
 8010f9e:	ee18 3a10 	vmov	r3, s16
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	f43f ad40 	beq.w	8010a28 <_strtod_l+0x488>
 8010fa8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801117c <_strtod_l+0xbdc>
 8010fac:	f04f 38ff 	mov.w	r8, #4294967295
 8010fb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	f7fe fe6a 	bl	800fc8c <_Bfree>
 8010fb8:	9905      	ldr	r1, [sp, #20]
 8010fba:	4620      	mov	r0, r4
 8010fbc:	f7fe fe66 	bl	800fc8c <_Bfree>
 8010fc0:	4659      	mov	r1, fp
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	f7fe fe62 	bl	800fc8c <_Bfree>
 8010fc8:	4629      	mov	r1, r5
 8010fca:	4620      	mov	r0, r4
 8010fcc:	f7fe fe5e 	bl	800fc8c <_Bfree>
 8010fd0:	e609      	b.n	8010be6 <_strtod_l+0x646>
 8010fd2:	f1b8 0f01 	cmp.w	r8, #1
 8010fd6:	d103      	bne.n	8010fe0 <_strtod_l+0xa40>
 8010fd8:	f1b9 0f00 	cmp.w	r9, #0
 8010fdc:	f43f ad95 	beq.w	8010b0a <_strtod_l+0x56a>
 8010fe0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8011138 <_strtod_l+0xb98>
 8010fe4:	4f60      	ldr	r7, [pc, #384]	; (8011168 <_strtod_l+0xbc8>)
 8010fe6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010fea:	2600      	movs	r6, #0
 8010fec:	e7ae      	b.n	8010f4c <_strtod_l+0x9ac>
 8010fee:	4f5f      	ldr	r7, [pc, #380]	; (801116c <_strtod_l+0xbcc>)
 8010ff0:	2600      	movs	r6, #0
 8010ff2:	e7a7      	b.n	8010f44 <_strtod_l+0x9a4>
 8010ff4:	4b5d      	ldr	r3, [pc, #372]	; (801116c <_strtod_l+0xbcc>)
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	4639      	mov	r1, r7
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	f7ef fb24 	bl	8000648 <__aeabi_dmul>
 8011000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011002:	4606      	mov	r6, r0
 8011004:	460f      	mov	r7, r1
 8011006:	2b00      	cmp	r3, #0
 8011008:	d09c      	beq.n	8010f44 <_strtod_l+0x9a4>
 801100a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801100e:	e79d      	b.n	8010f4c <_strtod_l+0x9ac>
 8011010:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8011140 <_strtod_l+0xba0>
 8011014:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011018:	ec57 6b17 	vmov	r6, r7, d7
 801101c:	e796      	b.n	8010f4c <_strtod_l+0x9ac>
 801101e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8011022:	9b04      	ldr	r3, [sp, #16]
 8011024:	46ca      	mov	sl, r9
 8011026:	2b00      	cmp	r3, #0
 8011028:	d1c2      	bne.n	8010fb0 <_strtod_l+0xa10>
 801102a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801102e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011030:	0d1b      	lsrs	r3, r3, #20
 8011032:	051b      	lsls	r3, r3, #20
 8011034:	429a      	cmp	r2, r3
 8011036:	d1bb      	bne.n	8010fb0 <_strtod_l+0xa10>
 8011038:	4630      	mov	r0, r6
 801103a:	4639      	mov	r1, r7
 801103c:	f7ef fe64 	bl	8000d08 <__aeabi_d2lz>
 8011040:	f7ef fad4 	bl	80005ec <__aeabi_l2d>
 8011044:	4602      	mov	r2, r0
 8011046:	460b      	mov	r3, r1
 8011048:	4630      	mov	r0, r6
 801104a:	4639      	mov	r1, r7
 801104c:	f7ef f944 	bl	80002d8 <__aeabi_dsub>
 8011050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011052:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011056:	ea43 0308 	orr.w	r3, r3, r8
 801105a:	4313      	orrs	r3, r2
 801105c:	4606      	mov	r6, r0
 801105e:	460f      	mov	r7, r1
 8011060:	d054      	beq.n	801110c <_strtod_l+0xb6c>
 8011062:	a339      	add	r3, pc, #228	; (adr r3, 8011148 <_strtod_l+0xba8>)
 8011064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011068:	f7ef fd60 	bl	8000b2c <__aeabi_dcmplt>
 801106c:	2800      	cmp	r0, #0
 801106e:	f47f ace5 	bne.w	8010a3c <_strtod_l+0x49c>
 8011072:	a337      	add	r3, pc, #220	; (adr r3, 8011150 <_strtod_l+0xbb0>)
 8011074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011078:	4630      	mov	r0, r6
 801107a:	4639      	mov	r1, r7
 801107c:	f7ef fd74 	bl	8000b68 <__aeabi_dcmpgt>
 8011080:	2800      	cmp	r0, #0
 8011082:	d095      	beq.n	8010fb0 <_strtod_l+0xa10>
 8011084:	e4da      	b.n	8010a3c <_strtod_l+0x49c>
 8011086:	9b04      	ldr	r3, [sp, #16]
 8011088:	b333      	cbz	r3, 80110d8 <_strtod_l+0xb38>
 801108a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801108c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011090:	d822      	bhi.n	80110d8 <_strtod_l+0xb38>
 8011092:	a331      	add	r3, pc, #196	; (adr r3, 8011158 <_strtod_l+0xbb8>)
 8011094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011098:	4630      	mov	r0, r6
 801109a:	4639      	mov	r1, r7
 801109c:	f7ef fd50 	bl	8000b40 <__aeabi_dcmple>
 80110a0:	b1a0      	cbz	r0, 80110cc <_strtod_l+0xb2c>
 80110a2:	4639      	mov	r1, r7
 80110a4:	4630      	mov	r0, r6
 80110a6:	f7ef fda7 	bl	8000bf8 <__aeabi_d2uiz>
 80110aa:	2801      	cmp	r0, #1
 80110ac:	bf38      	it	cc
 80110ae:	2001      	movcc	r0, #1
 80110b0:	f7ef fa50 	bl	8000554 <__aeabi_ui2d>
 80110b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110b6:	4606      	mov	r6, r0
 80110b8:	460f      	mov	r7, r1
 80110ba:	bb23      	cbnz	r3, 8011106 <_strtod_l+0xb66>
 80110bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80110c0:	9010      	str	r0, [sp, #64]	; 0x40
 80110c2:	9311      	str	r3, [sp, #68]	; 0x44
 80110c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80110c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80110cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80110d4:	1a9b      	subs	r3, r3, r2
 80110d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80110d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80110dc:	eeb0 0a48 	vmov.f32	s0, s16
 80110e0:	eef0 0a68 	vmov.f32	s1, s17
 80110e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80110e8:	f7ff f8fc 	bl	80102e4 <__ulp>
 80110ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80110f0:	ec53 2b10 	vmov	r2, r3, d0
 80110f4:	f7ef faa8 	bl	8000648 <__aeabi_dmul>
 80110f8:	ec53 2b18 	vmov	r2, r3, d8
 80110fc:	f7ef f8ee 	bl	80002dc <__adddf3>
 8011100:	4680      	mov	r8, r0
 8011102:	4689      	mov	r9, r1
 8011104:	e78d      	b.n	8011022 <_strtod_l+0xa82>
 8011106:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801110a:	e7db      	b.n	80110c4 <_strtod_l+0xb24>
 801110c:	a314      	add	r3, pc, #80	; (adr r3, 8011160 <_strtod_l+0xbc0>)
 801110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011112:	f7ef fd0b 	bl	8000b2c <__aeabi_dcmplt>
 8011116:	e7b3      	b.n	8011080 <_strtod_l+0xae0>
 8011118:	2300      	movs	r3, #0
 801111a:	930a      	str	r3, [sp, #40]	; 0x28
 801111c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801111e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011120:	6013      	str	r3, [r2, #0]
 8011122:	f7ff ba7c 	b.w	801061e <_strtod_l+0x7e>
 8011126:	2a65      	cmp	r2, #101	; 0x65
 8011128:	f43f ab75 	beq.w	8010816 <_strtod_l+0x276>
 801112c:	2a45      	cmp	r2, #69	; 0x45
 801112e:	f43f ab72 	beq.w	8010816 <_strtod_l+0x276>
 8011132:	2301      	movs	r3, #1
 8011134:	f7ff bbaa 	b.w	801088c <_strtod_l+0x2ec>
 8011138:	00000000 	.word	0x00000000
 801113c:	bff00000 	.word	0xbff00000
 8011140:	00000000 	.word	0x00000000
 8011144:	3ff00000 	.word	0x3ff00000
 8011148:	94a03595 	.word	0x94a03595
 801114c:	3fdfffff 	.word	0x3fdfffff
 8011150:	35afe535 	.word	0x35afe535
 8011154:	3fe00000 	.word	0x3fe00000
 8011158:	ffc00000 	.word	0xffc00000
 801115c:	41dfffff 	.word	0x41dfffff
 8011160:	94a03595 	.word	0x94a03595
 8011164:	3fcfffff 	.word	0x3fcfffff
 8011168:	3ff00000 	.word	0x3ff00000
 801116c:	3fe00000 	.word	0x3fe00000
 8011170:	7ff00000 	.word	0x7ff00000
 8011174:	7fe00000 	.word	0x7fe00000
 8011178:	7c9fffff 	.word	0x7c9fffff
 801117c:	7fefffff 	.word	0x7fefffff

08011180 <_strtod_r>:
 8011180:	4b01      	ldr	r3, [pc, #4]	; (8011188 <_strtod_r+0x8>)
 8011182:	f7ff ba0d 	b.w	80105a0 <_strtod_l>
 8011186:	bf00      	nop
 8011188:	20000068 	.word	0x20000068

0801118c <_strtol_l.constprop.0>:
 801118c:	2b01      	cmp	r3, #1
 801118e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011192:	d001      	beq.n	8011198 <_strtol_l.constprop.0+0xc>
 8011194:	2b24      	cmp	r3, #36	; 0x24
 8011196:	d906      	bls.n	80111a6 <_strtol_l.constprop.0+0x1a>
 8011198:	f7fd fe30 	bl	800edfc <__errno>
 801119c:	2316      	movs	r3, #22
 801119e:	6003      	str	r3, [r0, #0]
 80111a0:	2000      	movs	r0, #0
 80111a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801128c <_strtol_l.constprop.0+0x100>
 80111aa:	460d      	mov	r5, r1
 80111ac:	462e      	mov	r6, r5
 80111ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111b2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80111b6:	f017 0708 	ands.w	r7, r7, #8
 80111ba:	d1f7      	bne.n	80111ac <_strtol_l.constprop.0+0x20>
 80111bc:	2c2d      	cmp	r4, #45	; 0x2d
 80111be:	d132      	bne.n	8011226 <_strtol_l.constprop.0+0x9a>
 80111c0:	782c      	ldrb	r4, [r5, #0]
 80111c2:	2701      	movs	r7, #1
 80111c4:	1cb5      	adds	r5, r6, #2
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d05b      	beq.n	8011282 <_strtol_l.constprop.0+0xf6>
 80111ca:	2b10      	cmp	r3, #16
 80111cc:	d109      	bne.n	80111e2 <_strtol_l.constprop.0+0x56>
 80111ce:	2c30      	cmp	r4, #48	; 0x30
 80111d0:	d107      	bne.n	80111e2 <_strtol_l.constprop.0+0x56>
 80111d2:	782c      	ldrb	r4, [r5, #0]
 80111d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80111d8:	2c58      	cmp	r4, #88	; 0x58
 80111da:	d14d      	bne.n	8011278 <_strtol_l.constprop.0+0xec>
 80111dc:	786c      	ldrb	r4, [r5, #1]
 80111de:	2310      	movs	r3, #16
 80111e0:	3502      	adds	r5, #2
 80111e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80111e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80111ea:	f04f 0e00 	mov.w	lr, #0
 80111ee:	fbb8 f9f3 	udiv	r9, r8, r3
 80111f2:	4676      	mov	r6, lr
 80111f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80111f8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80111fc:	f1bc 0f09 	cmp.w	ip, #9
 8011200:	d816      	bhi.n	8011230 <_strtol_l.constprop.0+0xa4>
 8011202:	4664      	mov	r4, ip
 8011204:	42a3      	cmp	r3, r4
 8011206:	dd24      	ble.n	8011252 <_strtol_l.constprop.0+0xc6>
 8011208:	f1be 3fff 	cmp.w	lr, #4294967295
 801120c:	d008      	beq.n	8011220 <_strtol_l.constprop.0+0x94>
 801120e:	45b1      	cmp	r9, r6
 8011210:	d31c      	bcc.n	801124c <_strtol_l.constprop.0+0xc0>
 8011212:	d101      	bne.n	8011218 <_strtol_l.constprop.0+0x8c>
 8011214:	45a2      	cmp	sl, r4
 8011216:	db19      	blt.n	801124c <_strtol_l.constprop.0+0xc0>
 8011218:	fb06 4603 	mla	r6, r6, r3, r4
 801121c:	f04f 0e01 	mov.w	lr, #1
 8011220:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011224:	e7e8      	b.n	80111f8 <_strtol_l.constprop.0+0x6c>
 8011226:	2c2b      	cmp	r4, #43	; 0x2b
 8011228:	bf04      	itt	eq
 801122a:	782c      	ldrbeq	r4, [r5, #0]
 801122c:	1cb5      	addeq	r5, r6, #2
 801122e:	e7ca      	b.n	80111c6 <_strtol_l.constprop.0+0x3a>
 8011230:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011234:	f1bc 0f19 	cmp.w	ip, #25
 8011238:	d801      	bhi.n	801123e <_strtol_l.constprop.0+0xb2>
 801123a:	3c37      	subs	r4, #55	; 0x37
 801123c:	e7e2      	b.n	8011204 <_strtol_l.constprop.0+0x78>
 801123e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011242:	f1bc 0f19 	cmp.w	ip, #25
 8011246:	d804      	bhi.n	8011252 <_strtol_l.constprop.0+0xc6>
 8011248:	3c57      	subs	r4, #87	; 0x57
 801124a:	e7db      	b.n	8011204 <_strtol_l.constprop.0+0x78>
 801124c:	f04f 3eff 	mov.w	lr, #4294967295
 8011250:	e7e6      	b.n	8011220 <_strtol_l.constprop.0+0x94>
 8011252:	f1be 3fff 	cmp.w	lr, #4294967295
 8011256:	d105      	bne.n	8011264 <_strtol_l.constprop.0+0xd8>
 8011258:	2322      	movs	r3, #34	; 0x22
 801125a:	6003      	str	r3, [r0, #0]
 801125c:	4646      	mov	r6, r8
 801125e:	b942      	cbnz	r2, 8011272 <_strtol_l.constprop.0+0xe6>
 8011260:	4630      	mov	r0, r6
 8011262:	e79e      	b.n	80111a2 <_strtol_l.constprop.0+0x16>
 8011264:	b107      	cbz	r7, 8011268 <_strtol_l.constprop.0+0xdc>
 8011266:	4276      	negs	r6, r6
 8011268:	2a00      	cmp	r2, #0
 801126a:	d0f9      	beq.n	8011260 <_strtol_l.constprop.0+0xd4>
 801126c:	f1be 0f00 	cmp.w	lr, #0
 8011270:	d000      	beq.n	8011274 <_strtol_l.constprop.0+0xe8>
 8011272:	1e69      	subs	r1, r5, #1
 8011274:	6011      	str	r1, [r2, #0]
 8011276:	e7f3      	b.n	8011260 <_strtol_l.constprop.0+0xd4>
 8011278:	2430      	movs	r4, #48	; 0x30
 801127a:	2b00      	cmp	r3, #0
 801127c:	d1b1      	bne.n	80111e2 <_strtol_l.constprop.0+0x56>
 801127e:	2308      	movs	r3, #8
 8011280:	e7af      	b.n	80111e2 <_strtol_l.constprop.0+0x56>
 8011282:	2c30      	cmp	r4, #48	; 0x30
 8011284:	d0a5      	beq.n	80111d2 <_strtol_l.constprop.0+0x46>
 8011286:	230a      	movs	r3, #10
 8011288:	e7ab      	b.n	80111e2 <_strtol_l.constprop.0+0x56>
 801128a:	bf00      	nop
 801128c:	080136e1 	.word	0x080136e1

08011290 <_strtol_r>:
 8011290:	f7ff bf7c 	b.w	801118c <_strtol_l.constprop.0>

08011294 <__ssputs_r>:
 8011294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011298:	688e      	ldr	r6, [r1, #8]
 801129a:	461f      	mov	r7, r3
 801129c:	42be      	cmp	r6, r7
 801129e:	680b      	ldr	r3, [r1, #0]
 80112a0:	4682      	mov	sl, r0
 80112a2:	460c      	mov	r4, r1
 80112a4:	4690      	mov	r8, r2
 80112a6:	d82c      	bhi.n	8011302 <__ssputs_r+0x6e>
 80112a8:	898a      	ldrh	r2, [r1, #12]
 80112aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80112ae:	d026      	beq.n	80112fe <__ssputs_r+0x6a>
 80112b0:	6965      	ldr	r5, [r4, #20]
 80112b2:	6909      	ldr	r1, [r1, #16]
 80112b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80112b8:	eba3 0901 	sub.w	r9, r3, r1
 80112bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80112c0:	1c7b      	adds	r3, r7, #1
 80112c2:	444b      	add	r3, r9
 80112c4:	106d      	asrs	r5, r5, #1
 80112c6:	429d      	cmp	r5, r3
 80112c8:	bf38      	it	cc
 80112ca:	461d      	movcc	r5, r3
 80112cc:	0553      	lsls	r3, r2, #21
 80112ce:	d527      	bpl.n	8011320 <__ssputs_r+0x8c>
 80112d0:	4629      	mov	r1, r5
 80112d2:	f7fc fc99 	bl	800dc08 <_malloc_r>
 80112d6:	4606      	mov	r6, r0
 80112d8:	b360      	cbz	r0, 8011334 <__ssputs_r+0xa0>
 80112da:	6921      	ldr	r1, [r4, #16]
 80112dc:	464a      	mov	r2, r9
 80112de:	f7fd fdba 	bl	800ee56 <memcpy>
 80112e2:	89a3      	ldrh	r3, [r4, #12]
 80112e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80112e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112ec:	81a3      	strh	r3, [r4, #12]
 80112ee:	6126      	str	r6, [r4, #16]
 80112f0:	6165      	str	r5, [r4, #20]
 80112f2:	444e      	add	r6, r9
 80112f4:	eba5 0509 	sub.w	r5, r5, r9
 80112f8:	6026      	str	r6, [r4, #0]
 80112fa:	60a5      	str	r5, [r4, #8]
 80112fc:	463e      	mov	r6, r7
 80112fe:	42be      	cmp	r6, r7
 8011300:	d900      	bls.n	8011304 <__ssputs_r+0x70>
 8011302:	463e      	mov	r6, r7
 8011304:	6820      	ldr	r0, [r4, #0]
 8011306:	4632      	mov	r2, r6
 8011308:	4641      	mov	r1, r8
 801130a:	f7fd fcb6 	bl	800ec7a <memmove>
 801130e:	68a3      	ldr	r3, [r4, #8]
 8011310:	1b9b      	subs	r3, r3, r6
 8011312:	60a3      	str	r3, [r4, #8]
 8011314:	6823      	ldr	r3, [r4, #0]
 8011316:	4433      	add	r3, r6
 8011318:	6023      	str	r3, [r4, #0]
 801131a:	2000      	movs	r0, #0
 801131c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011320:	462a      	mov	r2, r5
 8011322:	f000 ff30 	bl	8012186 <_realloc_r>
 8011326:	4606      	mov	r6, r0
 8011328:	2800      	cmp	r0, #0
 801132a:	d1e0      	bne.n	80112ee <__ssputs_r+0x5a>
 801132c:	6921      	ldr	r1, [r4, #16]
 801132e:	4650      	mov	r0, sl
 8011330:	f7fe fc20 	bl	800fb74 <_free_r>
 8011334:	230c      	movs	r3, #12
 8011336:	f8ca 3000 	str.w	r3, [sl]
 801133a:	89a3      	ldrh	r3, [r4, #12]
 801133c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011340:	81a3      	strh	r3, [r4, #12]
 8011342:	f04f 30ff 	mov.w	r0, #4294967295
 8011346:	e7e9      	b.n	801131c <__ssputs_r+0x88>

08011348 <_svfiprintf_r>:
 8011348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801134c:	4698      	mov	r8, r3
 801134e:	898b      	ldrh	r3, [r1, #12]
 8011350:	061b      	lsls	r3, r3, #24
 8011352:	b09d      	sub	sp, #116	; 0x74
 8011354:	4607      	mov	r7, r0
 8011356:	460d      	mov	r5, r1
 8011358:	4614      	mov	r4, r2
 801135a:	d50e      	bpl.n	801137a <_svfiprintf_r+0x32>
 801135c:	690b      	ldr	r3, [r1, #16]
 801135e:	b963      	cbnz	r3, 801137a <_svfiprintf_r+0x32>
 8011360:	2140      	movs	r1, #64	; 0x40
 8011362:	f7fc fc51 	bl	800dc08 <_malloc_r>
 8011366:	6028      	str	r0, [r5, #0]
 8011368:	6128      	str	r0, [r5, #16]
 801136a:	b920      	cbnz	r0, 8011376 <_svfiprintf_r+0x2e>
 801136c:	230c      	movs	r3, #12
 801136e:	603b      	str	r3, [r7, #0]
 8011370:	f04f 30ff 	mov.w	r0, #4294967295
 8011374:	e0d0      	b.n	8011518 <_svfiprintf_r+0x1d0>
 8011376:	2340      	movs	r3, #64	; 0x40
 8011378:	616b      	str	r3, [r5, #20]
 801137a:	2300      	movs	r3, #0
 801137c:	9309      	str	r3, [sp, #36]	; 0x24
 801137e:	2320      	movs	r3, #32
 8011380:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011384:	f8cd 800c 	str.w	r8, [sp, #12]
 8011388:	2330      	movs	r3, #48	; 0x30
 801138a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011530 <_svfiprintf_r+0x1e8>
 801138e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011392:	f04f 0901 	mov.w	r9, #1
 8011396:	4623      	mov	r3, r4
 8011398:	469a      	mov	sl, r3
 801139a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801139e:	b10a      	cbz	r2, 80113a4 <_svfiprintf_r+0x5c>
 80113a0:	2a25      	cmp	r2, #37	; 0x25
 80113a2:	d1f9      	bne.n	8011398 <_svfiprintf_r+0x50>
 80113a4:	ebba 0b04 	subs.w	fp, sl, r4
 80113a8:	d00b      	beq.n	80113c2 <_svfiprintf_r+0x7a>
 80113aa:	465b      	mov	r3, fp
 80113ac:	4622      	mov	r2, r4
 80113ae:	4629      	mov	r1, r5
 80113b0:	4638      	mov	r0, r7
 80113b2:	f7ff ff6f 	bl	8011294 <__ssputs_r>
 80113b6:	3001      	adds	r0, #1
 80113b8:	f000 80a9 	beq.w	801150e <_svfiprintf_r+0x1c6>
 80113bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113be:	445a      	add	r2, fp
 80113c0:	9209      	str	r2, [sp, #36]	; 0x24
 80113c2:	f89a 3000 	ldrb.w	r3, [sl]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	f000 80a1 	beq.w	801150e <_svfiprintf_r+0x1c6>
 80113cc:	2300      	movs	r3, #0
 80113ce:	f04f 32ff 	mov.w	r2, #4294967295
 80113d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113d6:	f10a 0a01 	add.w	sl, sl, #1
 80113da:	9304      	str	r3, [sp, #16]
 80113dc:	9307      	str	r3, [sp, #28]
 80113de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113e2:	931a      	str	r3, [sp, #104]	; 0x68
 80113e4:	4654      	mov	r4, sl
 80113e6:	2205      	movs	r2, #5
 80113e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113ec:	4850      	ldr	r0, [pc, #320]	; (8011530 <_svfiprintf_r+0x1e8>)
 80113ee:	f7ee ff17 	bl	8000220 <memchr>
 80113f2:	9a04      	ldr	r2, [sp, #16]
 80113f4:	b9d8      	cbnz	r0, 801142e <_svfiprintf_r+0xe6>
 80113f6:	06d0      	lsls	r0, r2, #27
 80113f8:	bf44      	itt	mi
 80113fa:	2320      	movmi	r3, #32
 80113fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011400:	0711      	lsls	r1, r2, #28
 8011402:	bf44      	itt	mi
 8011404:	232b      	movmi	r3, #43	; 0x2b
 8011406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801140a:	f89a 3000 	ldrb.w	r3, [sl]
 801140e:	2b2a      	cmp	r3, #42	; 0x2a
 8011410:	d015      	beq.n	801143e <_svfiprintf_r+0xf6>
 8011412:	9a07      	ldr	r2, [sp, #28]
 8011414:	4654      	mov	r4, sl
 8011416:	2000      	movs	r0, #0
 8011418:	f04f 0c0a 	mov.w	ip, #10
 801141c:	4621      	mov	r1, r4
 801141e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011422:	3b30      	subs	r3, #48	; 0x30
 8011424:	2b09      	cmp	r3, #9
 8011426:	d94d      	bls.n	80114c4 <_svfiprintf_r+0x17c>
 8011428:	b1b0      	cbz	r0, 8011458 <_svfiprintf_r+0x110>
 801142a:	9207      	str	r2, [sp, #28]
 801142c:	e014      	b.n	8011458 <_svfiprintf_r+0x110>
 801142e:	eba0 0308 	sub.w	r3, r0, r8
 8011432:	fa09 f303 	lsl.w	r3, r9, r3
 8011436:	4313      	orrs	r3, r2
 8011438:	9304      	str	r3, [sp, #16]
 801143a:	46a2      	mov	sl, r4
 801143c:	e7d2      	b.n	80113e4 <_svfiprintf_r+0x9c>
 801143e:	9b03      	ldr	r3, [sp, #12]
 8011440:	1d19      	adds	r1, r3, #4
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	9103      	str	r1, [sp, #12]
 8011446:	2b00      	cmp	r3, #0
 8011448:	bfbb      	ittet	lt
 801144a:	425b      	neglt	r3, r3
 801144c:	f042 0202 	orrlt.w	r2, r2, #2
 8011450:	9307      	strge	r3, [sp, #28]
 8011452:	9307      	strlt	r3, [sp, #28]
 8011454:	bfb8      	it	lt
 8011456:	9204      	strlt	r2, [sp, #16]
 8011458:	7823      	ldrb	r3, [r4, #0]
 801145a:	2b2e      	cmp	r3, #46	; 0x2e
 801145c:	d10c      	bne.n	8011478 <_svfiprintf_r+0x130>
 801145e:	7863      	ldrb	r3, [r4, #1]
 8011460:	2b2a      	cmp	r3, #42	; 0x2a
 8011462:	d134      	bne.n	80114ce <_svfiprintf_r+0x186>
 8011464:	9b03      	ldr	r3, [sp, #12]
 8011466:	1d1a      	adds	r2, r3, #4
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	9203      	str	r2, [sp, #12]
 801146c:	2b00      	cmp	r3, #0
 801146e:	bfb8      	it	lt
 8011470:	f04f 33ff 	movlt.w	r3, #4294967295
 8011474:	3402      	adds	r4, #2
 8011476:	9305      	str	r3, [sp, #20]
 8011478:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011540 <_svfiprintf_r+0x1f8>
 801147c:	7821      	ldrb	r1, [r4, #0]
 801147e:	2203      	movs	r2, #3
 8011480:	4650      	mov	r0, sl
 8011482:	f7ee fecd 	bl	8000220 <memchr>
 8011486:	b138      	cbz	r0, 8011498 <_svfiprintf_r+0x150>
 8011488:	9b04      	ldr	r3, [sp, #16]
 801148a:	eba0 000a 	sub.w	r0, r0, sl
 801148e:	2240      	movs	r2, #64	; 0x40
 8011490:	4082      	lsls	r2, r0
 8011492:	4313      	orrs	r3, r2
 8011494:	3401      	adds	r4, #1
 8011496:	9304      	str	r3, [sp, #16]
 8011498:	f814 1b01 	ldrb.w	r1, [r4], #1
 801149c:	4825      	ldr	r0, [pc, #148]	; (8011534 <_svfiprintf_r+0x1ec>)
 801149e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114a2:	2206      	movs	r2, #6
 80114a4:	f7ee febc 	bl	8000220 <memchr>
 80114a8:	2800      	cmp	r0, #0
 80114aa:	d038      	beq.n	801151e <_svfiprintf_r+0x1d6>
 80114ac:	4b22      	ldr	r3, [pc, #136]	; (8011538 <_svfiprintf_r+0x1f0>)
 80114ae:	bb1b      	cbnz	r3, 80114f8 <_svfiprintf_r+0x1b0>
 80114b0:	9b03      	ldr	r3, [sp, #12]
 80114b2:	3307      	adds	r3, #7
 80114b4:	f023 0307 	bic.w	r3, r3, #7
 80114b8:	3308      	adds	r3, #8
 80114ba:	9303      	str	r3, [sp, #12]
 80114bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114be:	4433      	add	r3, r6
 80114c0:	9309      	str	r3, [sp, #36]	; 0x24
 80114c2:	e768      	b.n	8011396 <_svfiprintf_r+0x4e>
 80114c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80114c8:	460c      	mov	r4, r1
 80114ca:	2001      	movs	r0, #1
 80114cc:	e7a6      	b.n	801141c <_svfiprintf_r+0xd4>
 80114ce:	2300      	movs	r3, #0
 80114d0:	3401      	adds	r4, #1
 80114d2:	9305      	str	r3, [sp, #20]
 80114d4:	4619      	mov	r1, r3
 80114d6:	f04f 0c0a 	mov.w	ip, #10
 80114da:	4620      	mov	r0, r4
 80114dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114e0:	3a30      	subs	r2, #48	; 0x30
 80114e2:	2a09      	cmp	r2, #9
 80114e4:	d903      	bls.n	80114ee <_svfiprintf_r+0x1a6>
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d0c6      	beq.n	8011478 <_svfiprintf_r+0x130>
 80114ea:	9105      	str	r1, [sp, #20]
 80114ec:	e7c4      	b.n	8011478 <_svfiprintf_r+0x130>
 80114ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80114f2:	4604      	mov	r4, r0
 80114f4:	2301      	movs	r3, #1
 80114f6:	e7f0      	b.n	80114da <_svfiprintf_r+0x192>
 80114f8:	ab03      	add	r3, sp, #12
 80114fa:	9300      	str	r3, [sp, #0]
 80114fc:	462a      	mov	r2, r5
 80114fe:	4b0f      	ldr	r3, [pc, #60]	; (801153c <_svfiprintf_r+0x1f4>)
 8011500:	a904      	add	r1, sp, #16
 8011502:	4638      	mov	r0, r7
 8011504:	f7fc fcac 	bl	800de60 <_printf_float>
 8011508:	1c42      	adds	r2, r0, #1
 801150a:	4606      	mov	r6, r0
 801150c:	d1d6      	bne.n	80114bc <_svfiprintf_r+0x174>
 801150e:	89ab      	ldrh	r3, [r5, #12]
 8011510:	065b      	lsls	r3, r3, #25
 8011512:	f53f af2d 	bmi.w	8011370 <_svfiprintf_r+0x28>
 8011516:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011518:	b01d      	add	sp, #116	; 0x74
 801151a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801151e:	ab03      	add	r3, sp, #12
 8011520:	9300      	str	r3, [sp, #0]
 8011522:	462a      	mov	r2, r5
 8011524:	4b05      	ldr	r3, [pc, #20]	; (801153c <_svfiprintf_r+0x1f4>)
 8011526:	a904      	add	r1, sp, #16
 8011528:	4638      	mov	r0, r7
 801152a:	f7fc ff3d 	bl	800e3a8 <_printf_i>
 801152e:	e7eb      	b.n	8011508 <_svfiprintf_r+0x1c0>
 8011530:	080137e1 	.word	0x080137e1
 8011534:	080137eb 	.word	0x080137eb
 8011538:	0800de61 	.word	0x0800de61
 801153c:	08011295 	.word	0x08011295
 8011540:	080137e7 	.word	0x080137e7

08011544 <__sfputc_r>:
 8011544:	6893      	ldr	r3, [r2, #8]
 8011546:	3b01      	subs	r3, #1
 8011548:	2b00      	cmp	r3, #0
 801154a:	b410      	push	{r4}
 801154c:	6093      	str	r3, [r2, #8]
 801154e:	da08      	bge.n	8011562 <__sfputc_r+0x1e>
 8011550:	6994      	ldr	r4, [r2, #24]
 8011552:	42a3      	cmp	r3, r4
 8011554:	db01      	blt.n	801155a <__sfputc_r+0x16>
 8011556:	290a      	cmp	r1, #10
 8011558:	d103      	bne.n	8011562 <__sfputc_r+0x1e>
 801155a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801155e:	f000 b9e3 	b.w	8011928 <__swbuf_r>
 8011562:	6813      	ldr	r3, [r2, #0]
 8011564:	1c58      	adds	r0, r3, #1
 8011566:	6010      	str	r0, [r2, #0]
 8011568:	7019      	strb	r1, [r3, #0]
 801156a:	4608      	mov	r0, r1
 801156c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011570:	4770      	bx	lr

08011572 <__sfputs_r>:
 8011572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011574:	4606      	mov	r6, r0
 8011576:	460f      	mov	r7, r1
 8011578:	4614      	mov	r4, r2
 801157a:	18d5      	adds	r5, r2, r3
 801157c:	42ac      	cmp	r4, r5
 801157e:	d101      	bne.n	8011584 <__sfputs_r+0x12>
 8011580:	2000      	movs	r0, #0
 8011582:	e007      	b.n	8011594 <__sfputs_r+0x22>
 8011584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011588:	463a      	mov	r2, r7
 801158a:	4630      	mov	r0, r6
 801158c:	f7ff ffda 	bl	8011544 <__sfputc_r>
 8011590:	1c43      	adds	r3, r0, #1
 8011592:	d1f3      	bne.n	801157c <__sfputs_r+0xa>
 8011594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011598 <_vfiprintf_r>:
 8011598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801159c:	460d      	mov	r5, r1
 801159e:	b09d      	sub	sp, #116	; 0x74
 80115a0:	4614      	mov	r4, r2
 80115a2:	4698      	mov	r8, r3
 80115a4:	4606      	mov	r6, r0
 80115a6:	b118      	cbz	r0, 80115b0 <_vfiprintf_r+0x18>
 80115a8:	6a03      	ldr	r3, [r0, #32]
 80115aa:	b90b      	cbnz	r3, 80115b0 <_vfiprintf_r+0x18>
 80115ac:	f7fd faba 	bl	800eb24 <__sinit>
 80115b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115b2:	07d9      	lsls	r1, r3, #31
 80115b4:	d405      	bmi.n	80115c2 <_vfiprintf_r+0x2a>
 80115b6:	89ab      	ldrh	r3, [r5, #12]
 80115b8:	059a      	lsls	r2, r3, #22
 80115ba:	d402      	bmi.n	80115c2 <_vfiprintf_r+0x2a>
 80115bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115be:	f7fd fc48 	bl	800ee52 <__retarget_lock_acquire_recursive>
 80115c2:	89ab      	ldrh	r3, [r5, #12]
 80115c4:	071b      	lsls	r3, r3, #28
 80115c6:	d501      	bpl.n	80115cc <_vfiprintf_r+0x34>
 80115c8:	692b      	ldr	r3, [r5, #16]
 80115ca:	b99b      	cbnz	r3, 80115f4 <_vfiprintf_r+0x5c>
 80115cc:	4629      	mov	r1, r5
 80115ce:	4630      	mov	r0, r6
 80115d0:	f000 f9e8 	bl	80119a4 <__swsetup_r>
 80115d4:	b170      	cbz	r0, 80115f4 <_vfiprintf_r+0x5c>
 80115d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115d8:	07dc      	lsls	r4, r3, #31
 80115da:	d504      	bpl.n	80115e6 <_vfiprintf_r+0x4e>
 80115dc:	f04f 30ff 	mov.w	r0, #4294967295
 80115e0:	b01d      	add	sp, #116	; 0x74
 80115e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e6:	89ab      	ldrh	r3, [r5, #12]
 80115e8:	0598      	lsls	r0, r3, #22
 80115ea:	d4f7      	bmi.n	80115dc <_vfiprintf_r+0x44>
 80115ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115ee:	f7fd fc31 	bl	800ee54 <__retarget_lock_release_recursive>
 80115f2:	e7f3      	b.n	80115dc <_vfiprintf_r+0x44>
 80115f4:	2300      	movs	r3, #0
 80115f6:	9309      	str	r3, [sp, #36]	; 0x24
 80115f8:	2320      	movs	r3, #32
 80115fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8011602:	2330      	movs	r3, #48	; 0x30
 8011604:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80117b8 <_vfiprintf_r+0x220>
 8011608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801160c:	f04f 0901 	mov.w	r9, #1
 8011610:	4623      	mov	r3, r4
 8011612:	469a      	mov	sl, r3
 8011614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011618:	b10a      	cbz	r2, 801161e <_vfiprintf_r+0x86>
 801161a:	2a25      	cmp	r2, #37	; 0x25
 801161c:	d1f9      	bne.n	8011612 <_vfiprintf_r+0x7a>
 801161e:	ebba 0b04 	subs.w	fp, sl, r4
 8011622:	d00b      	beq.n	801163c <_vfiprintf_r+0xa4>
 8011624:	465b      	mov	r3, fp
 8011626:	4622      	mov	r2, r4
 8011628:	4629      	mov	r1, r5
 801162a:	4630      	mov	r0, r6
 801162c:	f7ff ffa1 	bl	8011572 <__sfputs_r>
 8011630:	3001      	adds	r0, #1
 8011632:	f000 80a9 	beq.w	8011788 <_vfiprintf_r+0x1f0>
 8011636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011638:	445a      	add	r2, fp
 801163a:	9209      	str	r2, [sp, #36]	; 0x24
 801163c:	f89a 3000 	ldrb.w	r3, [sl]
 8011640:	2b00      	cmp	r3, #0
 8011642:	f000 80a1 	beq.w	8011788 <_vfiprintf_r+0x1f0>
 8011646:	2300      	movs	r3, #0
 8011648:	f04f 32ff 	mov.w	r2, #4294967295
 801164c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011650:	f10a 0a01 	add.w	sl, sl, #1
 8011654:	9304      	str	r3, [sp, #16]
 8011656:	9307      	str	r3, [sp, #28]
 8011658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801165c:	931a      	str	r3, [sp, #104]	; 0x68
 801165e:	4654      	mov	r4, sl
 8011660:	2205      	movs	r2, #5
 8011662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011666:	4854      	ldr	r0, [pc, #336]	; (80117b8 <_vfiprintf_r+0x220>)
 8011668:	f7ee fdda 	bl	8000220 <memchr>
 801166c:	9a04      	ldr	r2, [sp, #16]
 801166e:	b9d8      	cbnz	r0, 80116a8 <_vfiprintf_r+0x110>
 8011670:	06d1      	lsls	r1, r2, #27
 8011672:	bf44      	itt	mi
 8011674:	2320      	movmi	r3, #32
 8011676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801167a:	0713      	lsls	r3, r2, #28
 801167c:	bf44      	itt	mi
 801167e:	232b      	movmi	r3, #43	; 0x2b
 8011680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011684:	f89a 3000 	ldrb.w	r3, [sl]
 8011688:	2b2a      	cmp	r3, #42	; 0x2a
 801168a:	d015      	beq.n	80116b8 <_vfiprintf_r+0x120>
 801168c:	9a07      	ldr	r2, [sp, #28]
 801168e:	4654      	mov	r4, sl
 8011690:	2000      	movs	r0, #0
 8011692:	f04f 0c0a 	mov.w	ip, #10
 8011696:	4621      	mov	r1, r4
 8011698:	f811 3b01 	ldrb.w	r3, [r1], #1
 801169c:	3b30      	subs	r3, #48	; 0x30
 801169e:	2b09      	cmp	r3, #9
 80116a0:	d94d      	bls.n	801173e <_vfiprintf_r+0x1a6>
 80116a2:	b1b0      	cbz	r0, 80116d2 <_vfiprintf_r+0x13a>
 80116a4:	9207      	str	r2, [sp, #28]
 80116a6:	e014      	b.n	80116d2 <_vfiprintf_r+0x13a>
 80116a8:	eba0 0308 	sub.w	r3, r0, r8
 80116ac:	fa09 f303 	lsl.w	r3, r9, r3
 80116b0:	4313      	orrs	r3, r2
 80116b2:	9304      	str	r3, [sp, #16]
 80116b4:	46a2      	mov	sl, r4
 80116b6:	e7d2      	b.n	801165e <_vfiprintf_r+0xc6>
 80116b8:	9b03      	ldr	r3, [sp, #12]
 80116ba:	1d19      	adds	r1, r3, #4
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	9103      	str	r1, [sp, #12]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	bfbb      	ittet	lt
 80116c4:	425b      	neglt	r3, r3
 80116c6:	f042 0202 	orrlt.w	r2, r2, #2
 80116ca:	9307      	strge	r3, [sp, #28]
 80116cc:	9307      	strlt	r3, [sp, #28]
 80116ce:	bfb8      	it	lt
 80116d0:	9204      	strlt	r2, [sp, #16]
 80116d2:	7823      	ldrb	r3, [r4, #0]
 80116d4:	2b2e      	cmp	r3, #46	; 0x2e
 80116d6:	d10c      	bne.n	80116f2 <_vfiprintf_r+0x15a>
 80116d8:	7863      	ldrb	r3, [r4, #1]
 80116da:	2b2a      	cmp	r3, #42	; 0x2a
 80116dc:	d134      	bne.n	8011748 <_vfiprintf_r+0x1b0>
 80116de:	9b03      	ldr	r3, [sp, #12]
 80116e0:	1d1a      	adds	r2, r3, #4
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	9203      	str	r2, [sp, #12]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	bfb8      	it	lt
 80116ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80116ee:	3402      	adds	r4, #2
 80116f0:	9305      	str	r3, [sp, #20]
 80116f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80117c8 <_vfiprintf_r+0x230>
 80116f6:	7821      	ldrb	r1, [r4, #0]
 80116f8:	2203      	movs	r2, #3
 80116fa:	4650      	mov	r0, sl
 80116fc:	f7ee fd90 	bl	8000220 <memchr>
 8011700:	b138      	cbz	r0, 8011712 <_vfiprintf_r+0x17a>
 8011702:	9b04      	ldr	r3, [sp, #16]
 8011704:	eba0 000a 	sub.w	r0, r0, sl
 8011708:	2240      	movs	r2, #64	; 0x40
 801170a:	4082      	lsls	r2, r0
 801170c:	4313      	orrs	r3, r2
 801170e:	3401      	adds	r4, #1
 8011710:	9304      	str	r3, [sp, #16]
 8011712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011716:	4829      	ldr	r0, [pc, #164]	; (80117bc <_vfiprintf_r+0x224>)
 8011718:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801171c:	2206      	movs	r2, #6
 801171e:	f7ee fd7f 	bl	8000220 <memchr>
 8011722:	2800      	cmp	r0, #0
 8011724:	d03f      	beq.n	80117a6 <_vfiprintf_r+0x20e>
 8011726:	4b26      	ldr	r3, [pc, #152]	; (80117c0 <_vfiprintf_r+0x228>)
 8011728:	bb1b      	cbnz	r3, 8011772 <_vfiprintf_r+0x1da>
 801172a:	9b03      	ldr	r3, [sp, #12]
 801172c:	3307      	adds	r3, #7
 801172e:	f023 0307 	bic.w	r3, r3, #7
 8011732:	3308      	adds	r3, #8
 8011734:	9303      	str	r3, [sp, #12]
 8011736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011738:	443b      	add	r3, r7
 801173a:	9309      	str	r3, [sp, #36]	; 0x24
 801173c:	e768      	b.n	8011610 <_vfiprintf_r+0x78>
 801173e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011742:	460c      	mov	r4, r1
 8011744:	2001      	movs	r0, #1
 8011746:	e7a6      	b.n	8011696 <_vfiprintf_r+0xfe>
 8011748:	2300      	movs	r3, #0
 801174a:	3401      	adds	r4, #1
 801174c:	9305      	str	r3, [sp, #20]
 801174e:	4619      	mov	r1, r3
 8011750:	f04f 0c0a 	mov.w	ip, #10
 8011754:	4620      	mov	r0, r4
 8011756:	f810 2b01 	ldrb.w	r2, [r0], #1
 801175a:	3a30      	subs	r2, #48	; 0x30
 801175c:	2a09      	cmp	r2, #9
 801175e:	d903      	bls.n	8011768 <_vfiprintf_r+0x1d0>
 8011760:	2b00      	cmp	r3, #0
 8011762:	d0c6      	beq.n	80116f2 <_vfiprintf_r+0x15a>
 8011764:	9105      	str	r1, [sp, #20]
 8011766:	e7c4      	b.n	80116f2 <_vfiprintf_r+0x15a>
 8011768:	fb0c 2101 	mla	r1, ip, r1, r2
 801176c:	4604      	mov	r4, r0
 801176e:	2301      	movs	r3, #1
 8011770:	e7f0      	b.n	8011754 <_vfiprintf_r+0x1bc>
 8011772:	ab03      	add	r3, sp, #12
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	462a      	mov	r2, r5
 8011778:	4b12      	ldr	r3, [pc, #72]	; (80117c4 <_vfiprintf_r+0x22c>)
 801177a:	a904      	add	r1, sp, #16
 801177c:	4630      	mov	r0, r6
 801177e:	f7fc fb6f 	bl	800de60 <_printf_float>
 8011782:	4607      	mov	r7, r0
 8011784:	1c78      	adds	r0, r7, #1
 8011786:	d1d6      	bne.n	8011736 <_vfiprintf_r+0x19e>
 8011788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801178a:	07d9      	lsls	r1, r3, #31
 801178c:	d405      	bmi.n	801179a <_vfiprintf_r+0x202>
 801178e:	89ab      	ldrh	r3, [r5, #12]
 8011790:	059a      	lsls	r2, r3, #22
 8011792:	d402      	bmi.n	801179a <_vfiprintf_r+0x202>
 8011794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011796:	f7fd fb5d 	bl	800ee54 <__retarget_lock_release_recursive>
 801179a:	89ab      	ldrh	r3, [r5, #12]
 801179c:	065b      	lsls	r3, r3, #25
 801179e:	f53f af1d 	bmi.w	80115dc <_vfiprintf_r+0x44>
 80117a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117a4:	e71c      	b.n	80115e0 <_vfiprintf_r+0x48>
 80117a6:	ab03      	add	r3, sp, #12
 80117a8:	9300      	str	r3, [sp, #0]
 80117aa:	462a      	mov	r2, r5
 80117ac:	4b05      	ldr	r3, [pc, #20]	; (80117c4 <_vfiprintf_r+0x22c>)
 80117ae:	a904      	add	r1, sp, #16
 80117b0:	4630      	mov	r0, r6
 80117b2:	f7fc fdf9 	bl	800e3a8 <_printf_i>
 80117b6:	e7e4      	b.n	8011782 <_vfiprintf_r+0x1ea>
 80117b8:	080137e1 	.word	0x080137e1
 80117bc:	080137eb 	.word	0x080137eb
 80117c0:	0800de61 	.word	0x0800de61
 80117c4:	08011573 	.word	0x08011573
 80117c8:	080137e7 	.word	0x080137e7

080117cc <__sflush_r>:
 80117cc:	898a      	ldrh	r2, [r1, #12]
 80117ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117d2:	4605      	mov	r5, r0
 80117d4:	0710      	lsls	r0, r2, #28
 80117d6:	460c      	mov	r4, r1
 80117d8:	d458      	bmi.n	801188c <__sflush_r+0xc0>
 80117da:	684b      	ldr	r3, [r1, #4]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	dc05      	bgt.n	80117ec <__sflush_r+0x20>
 80117e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	dc02      	bgt.n	80117ec <__sflush_r+0x20>
 80117e6:	2000      	movs	r0, #0
 80117e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117ee:	2e00      	cmp	r6, #0
 80117f0:	d0f9      	beq.n	80117e6 <__sflush_r+0x1a>
 80117f2:	2300      	movs	r3, #0
 80117f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80117f8:	682f      	ldr	r7, [r5, #0]
 80117fa:	6a21      	ldr	r1, [r4, #32]
 80117fc:	602b      	str	r3, [r5, #0]
 80117fe:	d032      	beq.n	8011866 <__sflush_r+0x9a>
 8011800:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011802:	89a3      	ldrh	r3, [r4, #12]
 8011804:	075a      	lsls	r2, r3, #29
 8011806:	d505      	bpl.n	8011814 <__sflush_r+0x48>
 8011808:	6863      	ldr	r3, [r4, #4]
 801180a:	1ac0      	subs	r0, r0, r3
 801180c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801180e:	b10b      	cbz	r3, 8011814 <__sflush_r+0x48>
 8011810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011812:	1ac0      	subs	r0, r0, r3
 8011814:	2300      	movs	r3, #0
 8011816:	4602      	mov	r2, r0
 8011818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801181a:	6a21      	ldr	r1, [r4, #32]
 801181c:	4628      	mov	r0, r5
 801181e:	47b0      	blx	r6
 8011820:	1c43      	adds	r3, r0, #1
 8011822:	89a3      	ldrh	r3, [r4, #12]
 8011824:	d106      	bne.n	8011834 <__sflush_r+0x68>
 8011826:	6829      	ldr	r1, [r5, #0]
 8011828:	291d      	cmp	r1, #29
 801182a:	d82b      	bhi.n	8011884 <__sflush_r+0xb8>
 801182c:	4a29      	ldr	r2, [pc, #164]	; (80118d4 <__sflush_r+0x108>)
 801182e:	410a      	asrs	r2, r1
 8011830:	07d6      	lsls	r6, r2, #31
 8011832:	d427      	bmi.n	8011884 <__sflush_r+0xb8>
 8011834:	2200      	movs	r2, #0
 8011836:	6062      	str	r2, [r4, #4]
 8011838:	04d9      	lsls	r1, r3, #19
 801183a:	6922      	ldr	r2, [r4, #16]
 801183c:	6022      	str	r2, [r4, #0]
 801183e:	d504      	bpl.n	801184a <__sflush_r+0x7e>
 8011840:	1c42      	adds	r2, r0, #1
 8011842:	d101      	bne.n	8011848 <__sflush_r+0x7c>
 8011844:	682b      	ldr	r3, [r5, #0]
 8011846:	b903      	cbnz	r3, 801184a <__sflush_r+0x7e>
 8011848:	6560      	str	r0, [r4, #84]	; 0x54
 801184a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801184c:	602f      	str	r7, [r5, #0]
 801184e:	2900      	cmp	r1, #0
 8011850:	d0c9      	beq.n	80117e6 <__sflush_r+0x1a>
 8011852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011856:	4299      	cmp	r1, r3
 8011858:	d002      	beq.n	8011860 <__sflush_r+0x94>
 801185a:	4628      	mov	r0, r5
 801185c:	f7fe f98a 	bl	800fb74 <_free_r>
 8011860:	2000      	movs	r0, #0
 8011862:	6360      	str	r0, [r4, #52]	; 0x34
 8011864:	e7c0      	b.n	80117e8 <__sflush_r+0x1c>
 8011866:	2301      	movs	r3, #1
 8011868:	4628      	mov	r0, r5
 801186a:	47b0      	blx	r6
 801186c:	1c41      	adds	r1, r0, #1
 801186e:	d1c8      	bne.n	8011802 <__sflush_r+0x36>
 8011870:	682b      	ldr	r3, [r5, #0]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d0c5      	beq.n	8011802 <__sflush_r+0x36>
 8011876:	2b1d      	cmp	r3, #29
 8011878:	d001      	beq.n	801187e <__sflush_r+0xb2>
 801187a:	2b16      	cmp	r3, #22
 801187c:	d101      	bne.n	8011882 <__sflush_r+0xb6>
 801187e:	602f      	str	r7, [r5, #0]
 8011880:	e7b1      	b.n	80117e6 <__sflush_r+0x1a>
 8011882:	89a3      	ldrh	r3, [r4, #12]
 8011884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011888:	81a3      	strh	r3, [r4, #12]
 801188a:	e7ad      	b.n	80117e8 <__sflush_r+0x1c>
 801188c:	690f      	ldr	r7, [r1, #16]
 801188e:	2f00      	cmp	r7, #0
 8011890:	d0a9      	beq.n	80117e6 <__sflush_r+0x1a>
 8011892:	0793      	lsls	r3, r2, #30
 8011894:	680e      	ldr	r6, [r1, #0]
 8011896:	bf08      	it	eq
 8011898:	694b      	ldreq	r3, [r1, #20]
 801189a:	600f      	str	r7, [r1, #0]
 801189c:	bf18      	it	ne
 801189e:	2300      	movne	r3, #0
 80118a0:	eba6 0807 	sub.w	r8, r6, r7
 80118a4:	608b      	str	r3, [r1, #8]
 80118a6:	f1b8 0f00 	cmp.w	r8, #0
 80118aa:	dd9c      	ble.n	80117e6 <__sflush_r+0x1a>
 80118ac:	6a21      	ldr	r1, [r4, #32]
 80118ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118b0:	4643      	mov	r3, r8
 80118b2:	463a      	mov	r2, r7
 80118b4:	4628      	mov	r0, r5
 80118b6:	47b0      	blx	r6
 80118b8:	2800      	cmp	r0, #0
 80118ba:	dc06      	bgt.n	80118ca <__sflush_r+0xfe>
 80118bc:	89a3      	ldrh	r3, [r4, #12]
 80118be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118c2:	81a3      	strh	r3, [r4, #12]
 80118c4:	f04f 30ff 	mov.w	r0, #4294967295
 80118c8:	e78e      	b.n	80117e8 <__sflush_r+0x1c>
 80118ca:	4407      	add	r7, r0
 80118cc:	eba8 0800 	sub.w	r8, r8, r0
 80118d0:	e7e9      	b.n	80118a6 <__sflush_r+0xda>
 80118d2:	bf00      	nop
 80118d4:	dfbffffe 	.word	0xdfbffffe

080118d8 <_fflush_r>:
 80118d8:	b538      	push	{r3, r4, r5, lr}
 80118da:	690b      	ldr	r3, [r1, #16]
 80118dc:	4605      	mov	r5, r0
 80118de:	460c      	mov	r4, r1
 80118e0:	b913      	cbnz	r3, 80118e8 <_fflush_r+0x10>
 80118e2:	2500      	movs	r5, #0
 80118e4:	4628      	mov	r0, r5
 80118e6:	bd38      	pop	{r3, r4, r5, pc}
 80118e8:	b118      	cbz	r0, 80118f2 <_fflush_r+0x1a>
 80118ea:	6a03      	ldr	r3, [r0, #32]
 80118ec:	b90b      	cbnz	r3, 80118f2 <_fflush_r+0x1a>
 80118ee:	f7fd f919 	bl	800eb24 <__sinit>
 80118f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d0f3      	beq.n	80118e2 <_fflush_r+0xa>
 80118fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80118fc:	07d0      	lsls	r0, r2, #31
 80118fe:	d404      	bmi.n	801190a <_fflush_r+0x32>
 8011900:	0599      	lsls	r1, r3, #22
 8011902:	d402      	bmi.n	801190a <_fflush_r+0x32>
 8011904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011906:	f7fd faa4 	bl	800ee52 <__retarget_lock_acquire_recursive>
 801190a:	4628      	mov	r0, r5
 801190c:	4621      	mov	r1, r4
 801190e:	f7ff ff5d 	bl	80117cc <__sflush_r>
 8011912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011914:	07da      	lsls	r2, r3, #31
 8011916:	4605      	mov	r5, r0
 8011918:	d4e4      	bmi.n	80118e4 <_fflush_r+0xc>
 801191a:	89a3      	ldrh	r3, [r4, #12]
 801191c:	059b      	lsls	r3, r3, #22
 801191e:	d4e1      	bmi.n	80118e4 <_fflush_r+0xc>
 8011920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011922:	f7fd fa97 	bl	800ee54 <__retarget_lock_release_recursive>
 8011926:	e7dd      	b.n	80118e4 <_fflush_r+0xc>

08011928 <__swbuf_r>:
 8011928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801192a:	460e      	mov	r6, r1
 801192c:	4614      	mov	r4, r2
 801192e:	4605      	mov	r5, r0
 8011930:	b118      	cbz	r0, 801193a <__swbuf_r+0x12>
 8011932:	6a03      	ldr	r3, [r0, #32]
 8011934:	b90b      	cbnz	r3, 801193a <__swbuf_r+0x12>
 8011936:	f7fd f8f5 	bl	800eb24 <__sinit>
 801193a:	69a3      	ldr	r3, [r4, #24]
 801193c:	60a3      	str	r3, [r4, #8]
 801193e:	89a3      	ldrh	r3, [r4, #12]
 8011940:	071a      	lsls	r2, r3, #28
 8011942:	d525      	bpl.n	8011990 <__swbuf_r+0x68>
 8011944:	6923      	ldr	r3, [r4, #16]
 8011946:	b31b      	cbz	r3, 8011990 <__swbuf_r+0x68>
 8011948:	6823      	ldr	r3, [r4, #0]
 801194a:	6922      	ldr	r2, [r4, #16]
 801194c:	1a98      	subs	r0, r3, r2
 801194e:	6963      	ldr	r3, [r4, #20]
 8011950:	b2f6      	uxtb	r6, r6
 8011952:	4283      	cmp	r3, r0
 8011954:	4637      	mov	r7, r6
 8011956:	dc04      	bgt.n	8011962 <__swbuf_r+0x3a>
 8011958:	4621      	mov	r1, r4
 801195a:	4628      	mov	r0, r5
 801195c:	f7ff ffbc 	bl	80118d8 <_fflush_r>
 8011960:	b9e0      	cbnz	r0, 801199c <__swbuf_r+0x74>
 8011962:	68a3      	ldr	r3, [r4, #8]
 8011964:	3b01      	subs	r3, #1
 8011966:	60a3      	str	r3, [r4, #8]
 8011968:	6823      	ldr	r3, [r4, #0]
 801196a:	1c5a      	adds	r2, r3, #1
 801196c:	6022      	str	r2, [r4, #0]
 801196e:	701e      	strb	r6, [r3, #0]
 8011970:	6962      	ldr	r2, [r4, #20]
 8011972:	1c43      	adds	r3, r0, #1
 8011974:	429a      	cmp	r2, r3
 8011976:	d004      	beq.n	8011982 <__swbuf_r+0x5a>
 8011978:	89a3      	ldrh	r3, [r4, #12]
 801197a:	07db      	lsls	r3, r3, #31
 801197c:	d506      	bpl.n	801198c <__swbuf_r+0x64>
 801197e:	2e0a      	cmp	r6, #10
 8011980:	d104      	bne.n	801198c <__swbuf_r+0x64>
 8011982:	4621      	mov	r1, r4
 8011984:	4628      	mov	r0, r5
 8011986:	f7ff ffa7 	bl	80118d8 <_fflush_r>
 801198a:	b938      	cbnz	r0, 801199c <__swbuf_r+0x74>
 801198c:	4638      	mov	r0, r7
 801198e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011990:	4621      	mov	r1, r4
 8011992:	4628      	mov	r0, r5
 8011994:	f000 f806 	bl	80119a4 <__swsetup_r>
 8011998:	2800      	cmp	r0, #0
 801199a:	d0d5      	beq.n	8011948 <__swbuf_r+0x20>
 801199c:	f04f 37ff 	mov.w	r7, #4294967295
 80119a0:	e7f4      	b.n	801198c <__swbuf_r+0x64>
	...

080119a4 <__swsetup_r>:
 80119a4:	b538      	push	{r3, r4, r5, lr}
 80119a6:	4b2a      	ldr	r3, [pc, #168]	; (8011a50 <__swsetup_r+0xac>)
 80119a8:	4605      	mov	r5, r0
 80119aa:	6818      	ldr	r0, [r3, #0]
 80119ac:	460c      	mov	r4, r1
 80119ae:	b118      	cbz	r0, 80119b8 <__swsetup_r+0x14>
 80119b0:	6a03      	ldr	r3, [r0, #32]
 80119b2:	b90b      	cbnz	r3, 80119b8 <__swsetup_r+0x14>
 80119b4:	f7fd f8b6 	bl	800eb24 <__sinit>
 80119b8:	89a3      	ldrh	r3, [r4, #12]
 80119ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119be:	0718      	lsls	r0, r3, #28
 80119c0:	d422      	bmi.n	8011a08 <__swsetup_r+0x64>
 80119c2:	06d9      	lsls	r1, r3, #27
 80119c4:	d407      	bmi.n	80119d6 <__swsetup_r+0x32>
 80119c6:	2309      	movs	r3, #9
 80119c8:	602b      	str	r3, [r5, #0]
 80119ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80119ce:	81a3      	strh	r3, [r4, #12]
 80119d0:	f04f 30ff 	mov.w	r0, #4294967295
 80119d4:	e034      	b.n	8011a40 <__swsetup_r+0x9c>
 80119d6:	0758      	lsls	r0, r3, #29
 80119d8:	d512      	bpl.n	8011a00 <__swsetup_r+0x5c>
 80119da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119dc:	b141      	cbz	r1, 80119f0 <__swsetup_r+0x4c>
 80119de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119e2:	4299      	cmp	r1, r3
 80119e4:	d002      	beq.n	80119ec <__swsetup_r+0x48>
 80119e6:	4628      	mov	r0, r5
 80119e8:	f7fe f8c4 	bl	800fb74 <_free_r>
 80119ec:	2300      	movs	r3, #0
 80119ee:	6363      	str	r3, [r4, #52]	; 0x34
 80119f0:	89a3      	ldrh	r3, [r4, #12]
 80119f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80119f6:	81a3      	strh	r3, [r4, #12]
 80119f8:	2300      	movs	r3, #0
 80119fa:	6063      	str	r3, [r4, #4]
 80119fc:	6923      	ldr	r3, [r4, #16]
 80119fe:	6023      	str	r3, [r4, #0]
 8011a00:	89a3      	ldrh	r3, [r4, #12]
 8011a02:	f043 0308 	orr.w	r3, r3, #8
 8011a06:	81a3      	strh	r3, [r4, #12]
 8011a08:	6923      	ldr	r3, [r4, #16]
 8011a0a:	b94b      	cbnz	r3, 8011a20 <__swsetup_r+0x7c>
 8011a0c:	89a3      	ldrh	r3, [r4, #12]
 8011a0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a16:	d003      	beq.n	8011a20 <__swsetup_r+0x7c>
 8011a18:	4621      	mov	r1, r4
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	f000 fc15 	bl	801224a <__smakebuf_r>
 8011a20:	89a0      	ldrh	r0, [r4, #12]
 8011a22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a26:	f010 0301 	ands.w	r3, r0, #1
 8011a2a:	d00a      	beq.n	8011a42 <__swsetup_r+0x9e>
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	60a3      	str	r3, [r4, #8]
 8011a30:	6963      	ldr	r3, [r4, #20]
 8011a32:	425b      	negs	r3, r3
 8011a34:	61a3      	str	r3, [r4, #24]
 8011a36:	6923      	ldr	r3, [r4, #16]
 8011a38:	b943      	cbnz	r3, 8011a4c <__swsetup_r+0xa8>
 8011a3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a3e:	d1c4      	bne.n	80119ca <__swsetup_r+0x26>
 8011a40:	bd38      	pop	{r3, r4, r5, pc}
 8011a42:	0781      	lsls	r1, r0, #30
 8011a44:	bf58      	it	pl
 8011a46:	6963      	ldrpl	r3, [r4, #20]
 8011a48:	60a3      	str	r3, [r4, #8]
 8011a4a:	e7f4      	b.n	8011a36 <__swsetup_r+0x92>
 8011a4c:	2000      	movs	r0, #0
 8011a4e:	e7f7      	b.n	8011a40 <__swsetup_r+0x9c>
 8011a50:	20000064 	.word	0x20000064

08011a54 <strncmp>:
 8011a54:	b510      	push	{r4, lr}
 8011a56:	b16a      	cbz	r2, 8011a74 <strncmp+0x20>
 8011a58:	3901      	subs	r1, #1
 8011a5a:	1884      	adds	r4, r0, r2
 8011a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d103      	bne.n	8011a70 <strncmp+0x1c>
 8011a68:	42a0      	cmp	r0, r4
 8011a6a:	d001      	beq.n	8011a70 <strncmp+0x1c>
 8011a6c:	2a00      	cmp	r2, #0
 8011a6e:	d1f5      	bne.n	8011a5c <strncmp+0x8>
 8011a70:	1ad0      	subs	r0, r2, r3
 8011a72:	bd10      	pop	{r4, pc}
 8011a74:	4610      	mov	r0, r2
 8011a76:	e7fc      	b.n	8011a72 <strncmp+0x1e>

08011a78 <nan>:
 8011a78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a80 <nan+0x8>
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop
 8011a80:	00000000 	.word	0x00000000
 8011a84:	7ff80000 	.word	0x7ff80000

08011a88 <_calloc_r>:
 8011a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a8a:	fba1 2402 	umull	r2, r4, r1, r2
 8011a8e:	b94c      	cbnz	r4, 8011aa4 <_calloc_r+0x1c>
 8011a90:	4611      	mov	r1, r2
 8011a92:	9201      	str	r2, [sp, #4]
 8011a94:	f7fc f8b8 	bl	800dc08 <_malloc_r>
 8011a98:	9a01      	ldr	r2, [sp, #4]
 8011a9a:	4605      	mov	r5, r0
 8011a9c:	b930      	cbnz	r0, 8011aac <_calloc_r+0x24>
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	b003      	add	sp, #12
 8011aa2:	bd30      	pop	{r4, r5, pc}
 8011aa4:	220c      	movs	r2, #12
 8011aa6:	6002      	str	r2, [r0, #0]
 8011aa8:	2500      	movs	r5, #0
 8011aaa:	e7f8      	b.n	8011a9e <_calloc_r+0x16>
 8011aac:	4621      	mov	r1, r4
 8011aae:	f7fd f8fe 	bl	800ecae <memset>
 8011ab2:	e7f4      	b.n	8011a9e <_calloc_r+0x16>

08011ab4 <rshift>:
 8011ab4:	6903      	ldr	r3, [r0, #16]
 8011ab6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011aba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011abe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011ac2:	f100 0414 	add.w	r4, r0, #20
 8011ac6:	dd45      	ble.n	8011b54 <rshift+0xa0>
 8011ac8:	f011 011f 	ands.w	r1, r1, #31
 8011acc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011ad0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011ad4:	d10c      	bne.n	8011af0 <rshift+0x3c>
 8011ad6:	f100 0710 	add.w	r7, r0, #16
 8011ada:	4629      	mov	r1, r5
 8011adc:	42b1      	cmp	r1, r6
 8011ade:	d334      	bcc.n	8011b4a <rshift+0x96>
 8011ae0:	1a9b      	subs	r3, r3, r2
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	1eea      	subs	r2, r5, #3
 8011ae6:	4296      	cmp	r6, r2
 8011ae8:	bf38      	it	cc
 8011aea:	2300      	movcc	r3, #0
 8011aec:	4423      	add	r3, r4
 8011aee:	e015      	b.n	8011b1c <rshift+0x68>
 8011af0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011af4:	f1c1 0820 	rsb	r8, r1, #32
 8011af8:	40cf      	lsrs	r7, r1
 8011afa:	f105 0e04 	add.w	lr, r5, #4
 8011afe:	46a1      	mov	r9, r4
 8011b00:	4576      	cmp	r6, lr
 8011b02:	46f4      	mov	ip, lr
 8011b04:	d815      	bhi.n	8011b32 <rshift+0x7e>
 8011b06:	1a9a      	subs	r2, r3, r2
 8011b08:	0092      	lsls	r2, r2, #2
 8011b0a:	3a04      	subs	r2, #4
 8011b0c:	3501      	adds	r5, #1
 8011b0e:	42ae      	cmp	r6, r5
 8011b10:	bf38      	it	cc
 8011b12:	2200      	movcc	r2, #0
 8011b14:	18a3      	adds	r3, r4, r2
 8011b16:	50a7      	str	r7, [r4, r2]
 8011b18:	b107      	cbz	r7, 8011b1c <rshift+0x68>
 8011b1a:	3304      	adds	r3, #4
 8011b1c:	1b1a      	subs	r2, r3, r4
 8011b1e:	42a3      	cmp	r3, r4
 8011b20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011b24:	bf08      	it	eq
 8011b26:	2300      	moveq	r3, #0
 8011b28:	6102      	str	r2, [r0, #16]
 8011b2a:	bf08      	it	eq
 8011b2c:	6143      	streq	r3, [r0, #20]
 8011b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b32:	f8dc c000 	ldr.w	ip, [ip]
 8011b36:	fa0c fc08 	lsl.w	ip, ip, r8
 8011b3a:	ea4c 0707 	orr.w	r7, ip, r7
 8011b3e:	f849 7b04 	str.w	r7, [r9], #4
 8011b42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011b46:	40cf      	lsrs	r7, r1
 8011b48:	e7da      	b.n	8011b00 <rshift+0x4c>
 8011b4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8011b4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011b52:	e7c3      	b.n	8011adc <rshift+0x28>
 8011b54:	4623      	mov	r3, r4
 8011b56:	e7e1      	b.n	8011b1c <rshift+0x68>

08011b58 <__hexdig_fun>:
 8011b58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011b5c:	2b09      	cmp	r3, #9
 8011b5e:	d802      	bhi.n	8011b66 <__hexdig_fun+0xe>
 8011b60:	3820      	subs	r0, #32
 8011b62:	b2c0      	uxtb	r0, r0
 8011b64:	4770      	bx	lr
 8011b66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011b6a:	2b05      	cmp	r3, #5
 8011b6c:	d801      	bhi.n	8011b72 <__hexdig_fun+0x1a>
 8011b6e:	3847      	subs	r0, #71	; 0x47
 8011b70:	e7f7      	b.n	8011b62 <__hexdig_fun+0xa>
 8011b72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011b76:	2b05      	cmp	r3, #5
 8011b78:	d801      	bhi.n	8011b7e <__hexdig_fun+0x26>
 8011b7a:	3827      	subs	r0, #39	; 0x27
 8011b7c:	e7f1      	b.n	8011b62 <__hexdig_fun+0xa>
 8011b7e:	2000      	movs	r0, #0
 8011b80:	4770      	bx	lr
	...

08011b84 <__gethex>:
 8011b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b88:	4617      	mov	r7, r2
 8011b8a:	680a      	ldr	r2, [r1, #0]
 8011b8c:	b085      	sub	sp, #20
 8011b8e:	f102 0b02 	add.w	fp, r2, #2
 8011b92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011b96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011b9a:	4681      	mov	r9, r0
 8011b9c:	468a      	mov	sl, r1
 8011b9e:	9302      	str	r3, [sp, #8]
 8011ba0:	32fe      	adds	r2, #254	; 0xfe
 8011ba2:	eb02 030b 	add.w	r3, r2, fp
 8011ba6:	46d8      	mov	r8, fp
 8011ba8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011bac:	9301      	str	r3, [sp, #4]
 8011bae:	2830      	cmp	r0, #48	; 0x30
 8011bb0:	d0f7      	beq.n	8011ba2 <__gethex+0x1e>
 8011bb2:	f7ff ffd1 	bl	8011b58 <__hexdig_fun>
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	2800      	cmp	r0, #0
 8011bba:	d138      	bne.n	8011c2e <__gethex+0xaa>
 8011bbc:	49a7      	ldr	r1, [pc, #668]	; (8011e5c <__gethex+0x2d8>)
 8011bbe:	2201      	movs	r2, #1
 8011bc0:	4640      	mov	r0, r8
 8011bc2:	f7ff ff47 	bl	8011a54 <strncmp>
 8011bc6:	4606      	mov	r6, r0
 8011bc8:	2800      	cmp	r0, #0
 8011bca:	d169      	bne.n	8011ca0 <__gethex+0x11c>
 8011bcc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011bd0:	465d      	mov	r5, fp
 8011bd2:	f7ff ffc1 	bl	8011b58 <__hexdig_fun>
 8011bd6:	2800      	cmp	r0, #0
 8011bd8:	d064      	beq.n	8011ca4 <__gethex+0x120>
 8011bda:	465a      	mov	r2, fp
 8011bdc:	7810      	ldrb	r0, [r2, #0]
 8011bde:	2830      	cmp	r0, #48	; 0x30
 8011be0:	4690      	mov	r8, r2
 8011be2:	f102 0201 	add.w	r2, r2, #1
 8011be6:	d0f9      	beq.n	8011bdc <__gethex+0x58>
 8011be8:	f7ff ffb6 	bl	8011b58 <__hexdig_fun>
 8011bec:	2301      	movs	r3, #1
 8011bee:	fab0 f480 	clz	r4, r0
 8011bf2:	0964      	lsrs	r4, r4, #5
 8011bf4:	465e      	mov	r6, fp
 8011bf6:	9301      	str	r3, [sp, #4]
 8011bf8:	4642      	mov	r2, r8
 8011bfa:	4615      	mov	r5, r2
 8011bfc:	3201      	adds	r2, #1
 8011bfe:	7828      	ldrb	r0, [r5, #0]
 8011c00:	f7ff ffaa 	bl	8011b58 <__hexdig_fun>
 8011c04:	2800      	cmp	r0, #0
 8011c06:	d1f8      	bne.n	8011bfa <__gethex+0x76>
 8011c08:	4994      	ldr	r1, [pc, #592]	; (8011e5c <__gethex+0x2d8>)
 8011c0a:	2201      	movs	r2, #1
 8011c0c:	4628      	mov	r0, r5
 8011c0e:	f7ff ff21 	bl	8011a54 <strncmp>
 8011c12:	b978      	cbnz	r0, 8011c34 <__gethex+0xb0>
 8011c14:	b946      	cbnz	r6, 8011c28 <__gethex+0xa4>
 8011c16:	1c6e      	adds	r6, r5, #1
 8011c18:	4632      	mov	r2, r6
 8011c1a:	4615      	mov	r5, r2
 8011c1c:	3201      	adds	r2, #1
 8011c1e:	7828      	ldrb	r0, [r5, #0]
 8011c20:	f7ff ff9a 	bl	8011b58 <__hexdig_fun>
 8011c24:	2800      	cmp	r0, #0
 8011c26:	d1f8      	bne.n	8011c1a <__gethex+0x96>
 8011c28:	1b73      	subs	r3, r6, r5
 8011c2a:	009e      	lsls	r6, r3, #2
 8011c2c:	e004      	b.n	8011c38 <__gethex+0xb4>
 8011c2e:	2400      	movs	r4, #0
 8011c30:	4626      	mov	r6, r4
 8011c32:	e7e1      	b.n	8011bf8 <__gethex+0x74>
 8011c34:	2e00      	cmp	r6, #0
 8011c36:	d1f7      	bne.n	8011c28 <__gethex+0xa4>
 8011c38:	782b      	ldrb	r3, [r5, #0]
 8011c3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011c3e:	2b50      	cmp	r3, #80	; 0x50
 8011c40:	d13d      	bne.n	8011cbe <__gethex+0x13a>
 8011c42:	786b      	ldrb	r3, [r5, #1]
 8011c44:	2b2b      	cmp	r3, #43	; 0x2b
 8011c46:	d02f      	beq.n	8011ca8 <__gethex+0x124>
 8011c48:	2b2d      	cmp	r3, #45	; 0x2d
 8011c4a:	d031      	beq.n	8011cb0 <__gethex+0x12c>
 8011c4c:	1c69      	adds	r1, r5, #1
 8011c4e:	f04f 0b00 	mov.w	fp, #0
 8011c52:	7808      	ldrb	r0, [r1, #0]
 8011c54:	f7ff ff80 	bl	8011b58 <__hexdig_fun>
 8011c58:	1e42      	subs	r2, r0, #1
 8011c5a:	b2d2      	uxtb	r2, r2
 8011c5c:	2a18      	cmp	r2, #24
 8011c5e:	d82e      	bhi.n	8011cbe <__gethex+0x13a>
 8011c60:	f1a0 0210 	sub.w	r2, r0, #16
 8011c64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011c68:	f7ff ff76 	bl	8011b58 <__hexdig_fun>
 8011c6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011c70:	fa5f fc8c 	uxtb.w	ip, ip
 8011c74:	f1bc 0f18 	cmp.w	ip, #24
 8011c78:	d91d      	bls.n	8011cb6 <__gethex+0x132>
 8011c7a:	f1bb 0f00 	cmp.w	fp, #0
 8011c7e:	d000      	beq.n	8011c82 <__gethex+0xfe>
 8011c80:	4252      	negs	r2, r2
 8011c82:	4416      	add	r6, r2
 8011c84:	f8ca 1000 	str.w	r1, [sl]
 8011c88:	b1dc      	cbz	r4, 8011cc2 <__gethex+0x13e>
 8011c8a:	9b01      	ldr	r3, [sp, #4]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	bf14      	ite	ne
 8011c90:	f04f 0800 	movne.w	r8, #0
 8011c94:	f04f 0806 	moveq.w	r8, #6
 8011c98:	4640      	mov	r0, r8
 8011c9a:	b005      	add	sp, #20
 8011c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ca0:	4645      	mov	r5, r8
 8011ca2:	4626      	mov	r6, r4
 8011ca4:	2401      	movs	r4, #1
 8011ca6:	e7c7      	b.n	8011c38 <__gethex+0xb4>
 8011ca8:	f04f 0b00 	mov.w	fp, #0
 8011cac:	1ca9      	adds	r1, r5, #2
 8011cae:	e7d0      	b.n	8011c52 <__gethex+0xce>
 8011cb0:	f04f 0b01 	mov.w	fp, #1
 8011cb4:	e7fa      	b.n	8011cac <__gethex+0x128>
 8011cb6:	230a      	movs	r3, #10
 8011cb8:	fb03 0002 	mla	r0, r3, r2, r0
 8011cbc:	e7d0      	b.n	8011c60 <__gethex+0xdc>
 8011cbe:	4629      	mov	r1, r5
 8011cc0:	e7e0      	b.n	8011c84 <__gethex+0x100>
 8011cc2:	eba5 0308 	sub.w	r3, r5, r8
 8011cc6:	3b01      	subs	r3, #1
 8011cc8:	4621      	mov	r1, r4
 8011cca:	2b07      	cmp	r3, #7
 8011ccc:	dc0a      	bgt.n	8011ce4 <__gethex+0x160>
 8011cce:	4648      	mov	r0, r9
 8011cd0:	f7fd ff9c 	bl	800fc0c <_Balloc>
 8011cd4:	4604      	mov	r4, r0
 8011cd6:	b940      	cbnz	r0, 8011cea <__gethex+0x166>
 8011cd8:	4b61      	ldr	r3, [pc, #388]	; (8011e60 <__gethex+0x2dc>)
 8011cda:	4602      	mov	r2, r0
 8011cdc:	21e4      	movs	r1, #228	; 0xe4
 8011cde:	4861      	ldr	r0, [pc, #388]	; (8011e64 <__gethex+0x2e0>)
 8011ce0:	f7fb ff32 	bl	800db48 <__assert_func>
 8011ce4:	3101      	adds	r1, #1
 8011ce6:	105b      	asrs	r3, r3, #1
 8011ce8:	e7ef      	b.n	8011cca <__gethex+0x146>
 8011cea:	f100 0a14 	add.w	sl, r0, #20
 8011cee:	2300      	movs	r3, #0
 8011cf0:	495a      	ldr	r1, [pc, #360]	; (8011e5c <__gethex+0x2d8>)
 8011cf2:	f8cd a004 	str.w	sl, [sp, #4]
 8011cf6:	469b      	mov	fp, r3
 8011cf8:	45a8      	cmp	r8, r5
 8011cfa:	d342      	bcc.n	8011d82 <__gethex+0x1fe>
 8011cfc:	9801      	ldr	r0, [sp, #4]
 8011cfe:	f840 bb04 	str.w	fp, [r0], #4
 8011d02:	eba0 000a 	sub.w	r0, r0, sl
 8011d06:	1080      	asrs	r0, r0, #2
 8011d08:	6120      	str	r0, [r4, #16]
 8011d0a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8011d0e:	4658      	mov	r0, fp
 8011d10:	f7fe f86e 	bl	800fdf0 <__hi0bits>
 8011d14:	683d      	ldr	r5, [r7, #0]
 8011d16:	eba8 0000 	sub.w	r0, r8, r0
 8011d1a:	42a8      	cmp	r0, r5
 8011d1c:	dd59      	ble.n	8011dd2 <__gethex+0x24e>
 8011d1e:	eba0 0805 	sub.w	r8, r0, r5
 8011d22:	4641      	mov	r1, r8
 8011d24:	4620      	mov	r0, r4
 8011d26:	f7fe fbfd 	bl	8010524 <__any_on>
 8011d2a:	4683      	mov	fp, r0
 8011d2c:	b1b8      	cbz	r0, 8011d5e <__gethex+0x1da>
 8011d2e:	f108 33ff 	add.w	r3, r8, #4294967295
 8011d32:	1159      	asrs	r1, r3, #5
 8011d34:	f003 021f 	and.w	r2, r3, #31
 8011d38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011d3c:	f04f 0b01 	mov.w	fp, #1
 8011d40:	fa0b f202 	lsl.w	r2, fp, r2
 8011d44:	420a      	tst	r2, r1
 8011d46:	d00a      	beq.n	8011d5e <__gethex+0x1da>
 8011d48:	455b      	cmp	r3, fp
 8011d4a:	dd06      	ble.n	8011d5a <__gethex+0x1d6>
 8011d4c:	f1a8 0102 	sub.w	r1, r8, #2
 8011d50:	4620      	mov	r0, r4
 8011d52:	f7fe fbe7 	bl	8010524 <__any_on>
 8011d56:	2800      	cmp	r0, #0
 8011d58:	d138      	bne.n	8011dcc <__gethex+0x248>
 8011d5a:	f04f 0b02 	mov.w	fp, #2
 8011d5e:	4641      	mov	r1, r8
 8011d60:	4620      	mov	r0, r4
 8011d62:	f7ff fea7 	bl	8011ab4 <rshift>
 8011d66:	4446      	add	r6, r8
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	42b3      	cmp	r3, r6
 8011d6c:	da41      	bge.n	8011df2 <__gethex+0x26e>
 8011d6e:	4621      	mov	r1, r4
 8011d70:	4648      	mov	r0, r9
 8011d72:	f7fd ff8b 	bl	800fc8c <_Bfree>
 8011d76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011d78:	2300      	movs	r3, #0
 8011d7a:	6013      	str	r3, [r2, #0]
 8011d7c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8011d80:	e78a      	b.n	8011c98 <__gethex+0x114>
 8011d82:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011d86:	2a2e      	cmp	r2, #46	; 0x2e
 8011d88:	d014      	beq.n	8011db4 <__gethex+0x230>
 8011d8a:	2b20      	cmp	r3, #32
 8011d8c:	d106      	bne.n	8011d9c <__gethex+0x218>
 8011d8e:	9b01      	ldr	r3, [sp, #4]
 8011d90:	f843 bb04 	str.w	fp, [r3], #4
 8011d94:	f04f 0b00 	mov.w	fp, #0
 8011d98:	9301      	str	r3, [sp, #4]
 8011d9a:	465b      	mov	r3, fp
 8011d9c:	7828      	ldrb	r0, [r5, #0]
 8011d9e:	9303      	str	r3, [sp, #12]
 8011da0:	f7ff feda 	bl	8011b58 <__hexdig_fun>
 8011da4:	9b03      	ldr	r3, [sp, #12]
 8011da6:	f000 000f 	and.w	r0, r0, #15
 8011daa:	4098      	lsls	r0, r3
 8011dac:	ea4b 0b00 	orr.w	fp, fp, r0
 8011db0:	3304      	adds	r3, #4
 8011db2:	e7a1      	b.n	8011cf8 <__gethex+0x174>
 8011db4:	45a8      	cmp	r8, r5
 8011db6:	d8e8      	bhi.n	8011d8a <__gethex+0x206>
 8011db8:	2201      	movs	r2, #1
 8011dba:	4628      	mov	r0, r5
 8011dbc:	9303      	str	r3, [sp, #12]
 8011dbe:	f7ff fe49 	bl	8011a54 <strncmp>
 8011dc2:	4926      	ldr	r1, [pc, #152]	; (8011e5c <__gethex+0x2d8>)
 8011dc4:	9b03      	ldr	r3, [sp, #12]
 8011dc6:	2800      	cmp	r0, #0
 8011dc8:	d1df      	bne.n	8011d8a <__gethex+0x206>
 8011dca:	e795      	b.n	8011cf8 <__gethex+0x174>
 8011dcc:	f04f 0b03 	mov.w	fp, #3
 8011dd0:	e7c5      	b.n	8011d5e <__gethex+0x1da>
 8011dd2:	da0b      	bge.n	8011dec <__gethex+0x268>
 8011dd4:	eba5 0800 	sub.w	r8, r5, r0
 8011dd8:	4621      	mov	r1, r4
 8011dda:	4642      	mov	r2, r8
 8011ddc:	4648      	mov	r0, r9
 8011dde:	f7fe f96f 	bl	80100c0 <__lshift>
 8011de2:	eba6 0608 	sub.w	r6, r6, r8
 8011de6:	4604      	mov	r4, r0
 8011de8:	f100 0a14 	add.w	sl, r0, #20
 8011dec:	f04f 0b00 	mov.w	fp, #0
 8011df0:	e7ba      	b.n	8011d68 <__gethex+0x1e4>
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	42b3      	cmp	r3, r6
 8011df6:	dd73      	ble.n	8011ee0 <__gethex+0x35c>
 8011df8:	1b9e      	subs	r6, r3, r6
 8011dfa:	42b5      	cmp	r5, r6
 8011dfc:	dc34      	bgt.n	8011e68 <__gethex+0x2e4>
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	2b02      	cmp	r3, #2
 8011e02:	d023      	beq.n	8011e4c <__gethex+0x2c8>
 8011e04:	2b03      	cmp	r3, #3
 8011e06:	d025      	beq.n	8011e54 <__gethex+0x2d0>
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	d115      	bne.n	8011e38 <__gethex+0x2b4>
 8011e0c:	42b5      	cmp	r5, r6
 8011e0e:	d113      	bne.n	8011e38 <__gethex+0x2b4>
 8011e10:	2d01      	cmp	r5, #1
 8011e12:	d10b      	bne.n	8011e2c <__gethex+0x2a8>
 8011e14:	9a02      	ldr	r2, [sp, #8]
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6013      	str	r3, [r2, #0]
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	6123      	str	r3, [r4, #16]
 8011e1e:	f8ca 3000 	str.w	r3, [sl]
 8011e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e24:	f04f 0862 	mov.w	r8, #98	; 0x62
 8011e28:	601c      	str	r4, [r3, #0]
 8011e2a:	e735      	b.n	8011c98 <__gethex+0x114>
 8011e2c:	1e69      	subs	r1, r5, #1
 8011e2e:	4620      	mov	r0, r4
 8011e30:	f7fe fb78 	bl	8010524 <__any_on>
 8011e34:	2800      	cmp	r0, #0
 8011e36:	d1ed      	bne.n	8011e14 <__gethex+0x290>
 8011e38:	4621      	mov	r1, r4
 8011e3a:	4648      	mov	r0, r9
 8011e3c:	f7fd ff26 	bl	800fc8c <_Bfree>
 8011e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e42:	2300      	movs	r3, #0
 8011e44:	6013      	str	r3, [r2, #0]
 8011e46:	f04f 0850 	mov.w	r8, #80	; 0x50
 8011e4a:	e725      	b.n	8011c98 <__gethex+0x114>
 8011e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d1f2      	bne.n	8011e38 <__gethex+0x2b4>
 8011e52:	e7df      	b.n	8011e14 <__gethex+0x290>
 8011e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d1dc      	bne.n	8011e14 <__gethex+0x290>
 8011e5a:	e7ed      	b.n	8011e38 <__gethex+0x2b4>
 8011e5c:	0801368c 	.word	0x0801368c
 8011e60:	08013525 	.word	0x08013525
 8011e64:	080137fa 	.word	0x080137fa
 8011e68:	f106 38ff 	add.w	r8, r6, #4294967295
 8011e6c:	f1bb 0f00 	cmp.w	fp, #0
 8011e70:	d133      	bne.n	8011eda <__gethex+0x356>
 8011e72:	f1b8 0f00 	cmp.w	r8, #0
 8011e76:	d004      	beq.n	8011e82 <__gethex+0x2fe>
 8011e78:	4641      	mov	r1, r8
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	f7fe fb52 	bl	8010524 <__any_on>
 8011e80:	4683      	mov	fp, r0
 8011e82:	ea4f 1268 	mov.w	r2, r8, asr #5
 8011e86:	2301      	movs	r3, #1
 8011e88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011e8c:	f008 081f 	and.w	r8, r8, #31
 8011e90:	fa03 f308 	lsl.w	r3, r3, r8
 8011e94:	4213      	tst	r3, r2
 8011e96:	4631      	mov	r1, r6
 8011e98:	4620      	mov	r0, r4
 8011e9a:	bf18      	it	ne
 8011e9c:	f04b 0b02 	orrne.w	fp, fp, #2
 8011ea0:	1bad      	subs	r5, r5, r6
 8011ea2:	f7ff fe07 	bl	8011ab4 <rshift>
 8011ea6:	687e      	ldr	r6, [r7, #4]
 8011ea8:	f04f 0802 	mov.w	r8, #2
 8011eac:	f1bb 0f00 	cmp.w	fp, #0
 8011eb0:	d04a      	beq.n	8011f48 <__gethex+0x3c4>
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	2b02      	cmp	r3, #2
 8011eb6:	d016      	beq.n	8011ee6 <__gethex+0x362>
 8011eb8:	2b03      	cmp	r3, #3
 8011eba:	d018      	beq.n	8011eee <__gethex+0x36a>
 8011ebc:	2b01      	cmp	r3, #1
 8011ebe:	d109      	bne.n	8011ed4 <__gethex+0x350>
 8011ec0:	f01b 0f02 	tst.w	fp, #2
 8011ec4:	d006      	beq.n	8011ed4 <__gethex+0x350>
 8011ec6:	f8da 3000 	ldr.w	r3, [sl]
 8011eca:	ea4b 0b03 	orr.w	fp, fp, r3
 8011ece:	f01b 0f01 	tst.w	fp, #1
 8011ed2:	d10f      	bne.n	8011ef4 <__gethex+0x370>
 8011ed4:	f048 0810 	orr.w	r8, r8, #16
 8011ed8:	e036      	b.n	8011f48 <__gethex+0x3c4>
 8011eda:	f04f 0b01 	mov.w	fp, #1
 8011ede:	e7d0      	b.n	8011e82 <__gethex+0x2fe>
 8011ee0:	f04f 0801 	mov.w	r8, #1
 8011ee4:	e7e2      	b.n	8011eac <__gethex+0x328>
 8011ee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ee8:	f1c3 0301 	rsb	r3, r3, #1
 8011eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8011eee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d0ef      	beq.n	8011ed4 <__gethex+0x350>
 8011ef4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011ef8:	f104 0214 	add.w	r2, r4, #20
 8011efc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011f00:	9301      	str	r3, [sp, #4]
 8011f02:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8011f06:	2300      	movs	r3, #0
 8011f08:	4694      	mov	ip, r2
 8011f0a:	f852 1b04 	ldr.w	r1, [r2], #4
 8011f0e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8011f12:	d01e      	beq.n	8011f52 <__gethex+0x3ce>
 8011f14:	3101      	adds	r1, #1
 8011f16:	f8cc 1000 	str.w	r1, [ip]
 8011f1a:	f1b8 0f02 	cmp.w	r8, #2
 8011f1e:	f104 0214 	add.w	r2, r4, #20
 8011f22:	d13d      	bne.n	8011fa0 <__gethex+0x41c>
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	3b01      	subs	r3, #1
 8011f28:	42ab      	cmp	r3, r5
 8011f2a:	d10b      	bne.n	8011f44 <__gethex+0x3c0>
 8011f2c:	1169      	asrs	r1, r5, #5
 8011f2e:	2301      	movs	r3, #1
 8011f30:	f005 051f 	and.w	r5, r5, #31
 8011f34:	fa03 f505 	lsl.w	r5, r3, r5
 8011f38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f3c:	421d      	tst	r5, r3
 8011f3e:	bf18      	it	ne
 8011f40:	f04f 0801 	movne.w	r8, #1
 8011f44:	f048 0820 	orr.w	r8, r8, #32
 8011f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f4a:	601c      	str	r4, [r3, #0]
 8011f4c:	9b02      	ldr	r3, [sp, #8]
 8011f4e:	601e      	str	r6, [r3, #0]
 8011f50:	e6a2      	b.n	8011c98 <__gethex+0x114>
 8011f52:	4290      	cmp	r0, r2
 8011f54:	f842 3c04 	str.w	r3, [r2, #-4]
 8011f58:	d8d6      	bhi.n	8011f08 <__gethex+0x384>
 8011f5a:	68a2      	ldr	r2, [r4, #8]
 8011f5c:	4593      	cmp	fp, r2
 8011f5e:	db17      	blt.n	8011f90 <__gethex+0x40c>
 8011f60:	6861      	ldr	r1, [r4, #4]
 8011f62:	4648      	mov	r0, r9
 8011f64:	3101      	adds	r1, #1
 8011f66:	f7fd fe51 	bl	800fc0c <_Balloc>
 8011f6a:	4682      	mov	sl, r0
 8011f6c:	b918      	cbnz	r0, 8011f76 <__gethex+0x3f2>
 8011f6e:	4b1b      	ldr	r3, [pc, #108]	; (8011fdc <__gethex+0x458>)
 8011f70:	4602      	mov	r2, r0
 8011f72:	2184      	movs	r1, #132	; 0x84
 8011f74:	e6b3      	b.n	8011cde <__gethex+0x15a>
 8011f76:	6922      	ldr	r2, [r4, #16]
 8011f78:	3202      	adds	r2, #2
 8011f7a:	f104 010c 	add.w	r1, r4, #12
 8011f7e:	0092      	lsls	r2, r2, #2
 8011f80:	300c      	adds	r0, #12
 8011f82:	f7fc ff68 	bl	800ee56 <memcpy>
 8011f86:	4621      	mov	r1, r4
 8011f88:	4648      	mov	r0, r9
 8011f8a:	f7fd fe7f 	bl	800fc8c <_Bfree>
 8011f8e:	4654      	mov	r4, sl
 8011f90:	6922      	ldr	r2, [r4, #16]
 8011f92:	1c51      	adds	r1, r2, #1
 8011f94:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011f98:	6121      	str	r1, [r4, #16]
 8011f9a:	2101      	movs	r1, #1
 8011f9c:	6151      	str	r1, [r2, #20]
 8011f9e:	e7bc      	b.n	8011f1a <__gethex+0x396>
 8011fa0:	6921      	ldr	r1, [r4, #16]
 8011fa2:	4559      	cmp	r1, fp
 8011fa4:	dd0b      	ble.n	8011fbe <__gethex+0x43a>
 8011fa6:	2101      	movs	r1, #1
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f7ff fd83 	bl	8011ab4 <rshift>
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	3601      	adds	r6, #1
 8011fb2:	42b3      	cmp	r3, r6
 8011fb4:	f6ff aedb 	blt.w	8011d6e <__gethex+0x1ea>
 8011fb8:	f04f 0801 	mov.w	r8, #1
 8011fbc:	e7c2      	b.n	8011f44 <__gethex+0x3c0>
 8011fbe:	f015 051f 	ands.w	r5, r5, #31
 8011fc2:	d0f9      	beq.n	8011fb8 <__gethex+0x434>
 8011fc4:	9b01      	ldr	r3, [sp, #4]
 8011fc6:	441a      	add	r2, r3
 8011fc8:	f1c5 0520 	rsb	r5, r5, #32
 8011fcc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8011fd0:	f7fd ff0e 	bl	800fdf0 <__hi0bits>
 8011fd4:	42a8      	cmp	r0, r5
 8011fd6:	dbe6      	blt.n	8011fa6 <__gethex+0x422>
 8011fd8:	e7ee      	b.n	8011fb8 <__gethex+0x434>
 8011fda:	bf00      	nop
 8011fdc:	08013525 	.word	0x08013525

08011fe0 <L_shift>:
 8011fe0:	f1c2 0208 	rsb	r2, r2, #8
 8011fe4:	0092      	lsls	r2, r2, #2
 8011fe6:	b570      	push	{r4, r5, r6, lr}
 8011fe8:	f1c2 0620 	rsb	r6, r2, #32
 8011fec:	6843      	ldr	r3, [r0, #4]
 8011fee:	6804      	ldr	r4, [r0, #0]
 8011ff0:	fa03 f506 	lsl.w	r5, r3, r6
 8011ff4:	432c      	orrs	r4, r5
 8011ff6:	40d3      	lsrs	r3, r2
 8011ff8:	6004      	str	r4, [r0, #0]
 8011ffa:	f840 3f04 	str.w	r3, [r0, #4]!
 8011ffe:	4288      	cmp	r0, r1
 8012000:	d3f4      	bcc.n	8011fec <L_shift+0xc>
 8012002:	bd70      	pop	{r4, r5, r6, pc}

08012004 <__match>:
 8012004:	b530      	push	{r4, r5, lr}
 8012006:	6803      	ldr	r3, [r0, #0]
 8012008:	3301      	adds	r3, #1
 801200a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801200e:	b914      	cbnz	r4, 8012016 <__match+0x12>
 8012010:	6003      	str	r3, [r0, #0]
 8012012:	2001      	movs	r0, #1
 8012014:	bd30      	pop	{r4, r5, pc}
 8012016:	f813 2b01 	ldrb.w	r2, [r3], #1
 801201a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801201e:	2d19      	cmp	r5, #25
 8012020:	bf98      	it	ls
 8012022:	3220      	addls	r2, #32
 8012024:	42a2      	cmp	r2, r4
 8012026:	d0f0      	beq.n	801200a <__match+0x6>
 8012028:	2000      	movs	r0, #0
 801202a:	e7f3      	b.n	8012014 <__match+0x10>

0801202c <__hexnan>:
 801202c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012030:	680b      	ldr	r3, [r1, #0]
 8012032:	6801      	ldr	r1, [r0, #0]
 8012034:	115e      	asrs	r6, r3, #5
 8012036:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801203a:	f013 031f 	ands.w	r3, r3, #31
 801203e:	b087      	sub	sp, #28
 8012040:	bf18      	it	ne
 8012042:	3604      	addne	r6, #4
 8012044:	2500      	movs	r5, #0
 8012046:	1f37      	subs	r7, r6, #4
 8012048:	4682      	mov	sl, r0
 801204a:	4690      	mov	r8, r2
 801204c:	9301      	str	r3, [sp, #4]
 801204e:	f846 5c04 	str.w	r5, [r6, #-4]
 8012052:	46b9      	mov	r9, r7
 8012054:	463c      	mov	r4, r7
 8012056:	9502      	str	r5, [sp, #8]
 8012058:	46ab      	mov	fp, r5
 801205a:	784a      	ldrb	r2, [r1, #1]
 801205c:	1c4b      	adds	r3, r1, #1
 801205e:	9303      	str	r3, [sp, #12]
 8012060:	b342      	cbz	r2, 80120b4 <__hexnan+0x88>
 8012062:	4610      	mov	r0, r2
 8012064:	9105      	str	r1, [sp, #20]
 8012066:	9204      	str	r2, [sp, #16]
 8012068:	f7ff fd76 	bl	8011b58 <__hexdig_fun>
 801206c:	2800      	cmp	r0, #0
 801206e:	d14f      	bne.n	8012110 <__hexnan+0xe4>
 8012070:	9a04      	ldr	r2, [sp, #16]
 8012072:	9905      	ldr	r1, [sp, #20]
 8012074:	2a20      	cmp	r2, #32
 8012076:	d818      	bhi.n	80120aa <__hexnan+0x7e>
 8012078:	9b02      	ldr	r3, [sp, #8]
 801207a:	459b      	cmp	fp, r3
 801207c:	dd13      	ble.n	80120a6 <__hexnan+0x7a>
 801207e:	454c      	cmp	r4, r9
 8012080:	d206      	bcs.n	8012090 <__hexnan+0x64>
 8012082:	2d07      	cmp	r5, #7
 8012084:	dc04      	bgt.n	8012090 <__hexnan+0x64>
 8012086:	462a      	mov	r2, r5
 8012088:	4649      	mov	r1, r9
 801208a:	4620      	mov	r0, r4
 801208c:	f7ff ffa8 	bl	8011fe0 <L_shift>
 8012090:	4544      	cmp	r4, r8
 8012092:	d950      	bls.n	8012136 <__hexnan+0x10a>
 8012094:	2300      	movs	r3, #0
 8012096:	f1a4 0904 	sub.w	r9, r4, #4
 801209a:	f844 3c04 	str.w	r3, [r4, #-4]
 801209e:	f8cd b008 	str.w	fp, [sp, #8]
 80120a2:	464c      	mov	r4, r9
 80120a4:	461d      	mov	r5, r3
 80120a6:	9903      	ldr	r1, [sp, #12]
 80120a8:	e7d7      	b.n	801205a <__hexnan+0x2e>
 80120aa:	2a29      	cmp	r2, #41	; 0x29
 80120ac:	d155      	bne.n	801215a <__hexnan+0x12e>
 80120ae:	3102      	adds	r1, #2
 80120b0:	f8ca 1000 	str.w	r1, [sl]
 80120b4:	f1bb 0f00 	cmp.w	fp, #0
 80120b8:	d04f      	beq.n	801215a <__hexnan+0x12e>
 80120ba:	454c      	cmp	r4, r9
 80120bc:	d206      	bcs.n	80120cc <__hexnan+0xa0>
 80120be:	2d07      	cmp	r5, #7
 80120c0:	dc04      	bgt.n	80120cc <__hexnan+0xa0>
 80120c2:	462a      	mov	r2, r5
 80120c4:	4649      	mov	r1, r9
 80120c6:	4620      	mov	r0, r4
 80120c8:	f7ff ff8a 	bl	8011fe0 <L_shift>
 80120cc:	4544      	cmp	r4, r8
 80120ce:	d934      	bls.n	801213a <__hexnan+0x10e>
 80120d0:	f1a8 0204 	sub.w	r2, r8, #4
 80120d4:	4623      	mov	r3, r4
 80120d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80120da:	f842 1f04 	str.w	r1, [r2, #4]!
 80120de:	429f      	cmp	r7, r3
 80120e0:	d2f9      	bcs.n	80120d6 <__hexnan+0xaa>
 80120e2:	1b3b      	subs	r3, r7, r4
 80120e4:	f023 0303 	bic.w	r3, r3, #3
 80120e8:	3304      	adds	r3, #4
 80120ea:	3e03      	subs	r6, #3
 80120ec:	3401      	adds	r4, #1
 80120ee:	42a6      	cmp	r6, r4
 80120f0:	bf38      	it	cc
 80120f2:	2304      	movcc	r3, #4
 80120f4:	4443      	add	r3, r8
 80120f6:	2200      	movs	r2, #0
 80120f8:	f843 2b04 	str.w	r2, [r3], #4
 80120fc:	429f      	cmp	r7, r3
 80120fe:	d2fb      	bcs.n	80120f8 <__hexnan+0xcc>
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	b91b      	cbnz	r3, 801210c <__hexnan+0xe0>
 8012104:	4547      	cmp	r7, r8
 8012106:	d126      	bne.n	8012156 <__hexnan+0x12a>
 8012108:	2301      	movs	r3, #1
 801210a:	603b      	str	r3, [r7, #0]
 801210c:	2005      	movs	r0, #5
 801210e:	e025      	b.n	801215c <__hexnan+0x130>
 8012110:	3501      	adds	r5, #1
 8012112:	2d08      	cmp	r5, #8
 8012114:	f10b 0b01 	add.w	fp, fp, #1
 8012118:	dd06      	ble.n	8012128 <__hexnan+0xfc>
 801211a:	4544      	cmp	r4, r8
 801211c:	d9c3      	bls.n	80120a6 <__hexnan+0x7a>
 801211e:	2300      	movs	r3, #0
 8012120:	f844 3c04 	str.w	r3, [r4, #-4]
 8012124:	2501      	movs	r5, #1
 8012126:	3c04      	subs	r4, #4
 8012128:	6822      	ldr	r2, [r4, #0]
 801212a:	f000 000f 	and.w	r0, r0, #15
 801212e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012132:	6020      	str	r0, [r4, #0]
 8012134:	e7b7      	b.n	80120a6 <__hexnan+0x7a>
 8012136:	2508      	movs	r5, #8
 8012138:	e7b5      	b.n	80120a6 <__hexnan+0x7a>
 801213a:	9b01      	ldr	r3, [sp, #4]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d0df      	beq.n	8012100 <__hexnan+0xd4>
 8012140:	f1c3 0320 	rsb	r3, r3, #32
 8012144:	f04f 32ff 	mov.w	r2, #4294967295
 8012148:	40da      	lsrs	r2, r3
 801214a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801214e:	4013      	ands	r3, r2
 8012150:	f846 3c04 	str.w	r3, [r6, #-4]
 8012154:	e7d4      	b.n	8012100 <__hexnan+0xd4>
 8012156:	3f04      	subs	r7, #4
 8012158:	e7d2      	b.n	8012100 <__hexnan+0xd4>
 801215a:	2004      	movs	r0, #4
 801215c:	b007      	add	sp, #28
 801215e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012162 <__ascii_mbtowc>:
 8012162:	b082      	sub	sp, #8
 8012164:	b901      	cbnz	r1, 8012168 <__ascii_mbtowc+0x6>
 8012166:	a901      	add	r1, sp, #4
 8012168:	b142      	cbz	r2, 801217c <__ascii_mbtowc+0x1a>
 801216a:	b14b      	cbz	r3, 8012180 <__ascii_mbtowc+0x1e>
 801216c:	7813      	ldrb	r3, [r2, #0]
 801216e:	600b      	str	r3, [r1, #0]
 8012170:	7812      	ldrb	r2, [r2, #0]
 8012172:	1e10      	subs	r0, r2, #0
 8012174:	bf18      	it	ne
 8012176:	2001      	movne	r0, #1
 8012178:	b002      	add	sp, #8
 801217a:	4770      	bx	lr
 801217c:	4610      	mov	r0, r2
 801217e:	e7fb      	b.n	8012178 <__ascii_mbtowc+0x16>
 8012180:	f06f 0001 	mvn.w	r0, #1
 8012184:	e7f8      	b.n	8012178 <__ascii_mbtowc+0x16>

08012186 <_realloc_r>:
 8012186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801218a:	4680      	mov	r8, r0
 801218c:	4614      	mov	r4, r2
 801218e:	460e      	mov	r6, r1
 8012190:	b921      	cbnz	r1, 801219c <_realloc_r+0x16>
 8012192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012196:	4611      	mov	r1, r2
 8012198:	f7fb bd36 	b.w	800dc08 <_malloc_r>
 801219c:	b92a      	cbnz	r2, 80121aa <_realloc_r+0x24>
 801219e:	f7fd fce9 	bl	800fb74 <_free_r>
 80121a2:	4625      	mov	r5, r4
 80121a4:	4628      	mov	r0, r5
 80121a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121aa:	f000 f8ad 	bl	8012308 <_malloc_usable_size_r>
 80121ae:	4284      	cmp	r4, r0
 80121b0:	4607      	mov	r7, r0
 80121b2:	d802      	bhi.n	80121ba <_realloc_r+0x34>
 80121b4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80121b8:	d812      	bhi.n	80121e0 <_realloc_r+0x5a>
 80121ba:	4621      	mov	r1, r4
 80121bc:	4640      	mov	r0, r8
 80121be:	f7fb fd23 	bl	800dc08 <_malloc_r>
 80121c2:	4605      	mov	r5, r0
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d0ed      	beq.n	80121a4 <_realloc_r+0x1e>
 80121c8:	42bc      	cmp	r4, r7
 80121ca:	4622      	mov	r2, r4
 80121cc:	4631      	mov	r1, r6
 80121ce:	bf28      	it	cs
 80121d0:	463a      	movcs	r2, r7
 80121d2:	f7fc fe40 	bl	800ee56 <memcpy>
 80121d6:	4631      	mov	r1, r6
 80121d8:	4640      	mov	r0, r8
 80121da:	f7fd fccb 	bl	800fb74 <_free_r>
 80121de:	e7e1      	b.n	80121a4 <_realloc_r+0x1e>
 80121e0:	4635      	mov	r5, r6
 80121e2:	e7df      	b.n	80121a4 <_realloc_r+0x1e>

080121e4 <__ascii_wctomb>:
 80121e4:	b149      	cbz	r1, 80121fa <__ascii_wctomb+0x16>
 80121e6:	2aff      	cmp	r2, #255	; 0xff
 80121e8:	bf85      	ittet	hi
 80121ea:	238a      	movhi	r3, #138	; 0x8a
 80121ec:	6003      	strhi	r3, [r0, #0]
 80121ee:	700a      	strbls	r2, [r1, #0]
 80121f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80121f4:	bf98      	it	ls
 80121f6:	2001      	movls	r0, #1
 80121f8:	4770      	bx	lr
 80121fa:	4608      	mov	r0, r1
 80121fc:	4770      	bx	lr

080121fe <__swhatbuf_r>:
 80121fe:	b570      	push	{r4, r5, r6, lr}
 8012200:	460c      	mov	r4, r1
 8012202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012206:	2900      	cmp	r1, #0
 8012208:	b096      	sub	sp, #88	; 0x58
 801220a:	4615      	mov	r5, r2
 801220c:	461e      	mov	r6, r3
 801220e:	da0d      	bge.n	801222c <__swhatbuf_r+0x2e>
 8012210:	89a3      	ldrh	r3, [r4, #12]
 8012212:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012216:	f04f 0100 	mov.w	r1, #0
 801221a:	bf0c      	ite	eq
 801221c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012220:	2340      	movne	r3, #64	; 0x40
 8012222:	2000      	movs	r0, #0
 8012224:	6031      	str	r1, [r6, #0]
 8012226:	602b      	str	r3, [r5, #0]
 8012228:	b016      	add	sp, #88	; 0x58
 801222a:	bd70      	pop	{r4, r5, r6, pc}
 801222c:	466a      	mov	r2, sp
 801222e:	f000 f849 	bl	80122c4 <_fstat_r>
 8012232:	2800      	cmp	r0, #0
 8012234:	dbec      	blt.n	8012210 <__swhatbuf_r+0x12>
 8012236:	9901      	ldr	r1, [sp, #4]
 8012238:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801223c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012240:	4259      	negs	r1, r3
 8012242:	4159      	adcs	r1, r3
 8012244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012248:	e7eb      	b.n	8012222 <__swhatbuf_r+0x24>

0801224a <__smakebuf_r>:
 801224a:	898b      	ldrh	r3, [r1, #12]
 801224c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801224e:	079d      	lsls	r5, r3, #30
 8012250:	4606      	mov	r6, r0
 8012252:	460c      	mov	r4, r1
 8012254:	d507      	bpl.n	8012266 <__smakebuf_r+0x1c>
 8012256:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801225a:	6023      	str	r3, [r4, #0]
 801225c:	6123      	str	r3, [r4, #16]
 801225e:	2301      	movs	r3, #1
 8012260:	6163      	str	r3, [r4, #20]
 8012262:	b002      	add	sp, #8
 8012264:	bd70      	pop	{r4, r5, r6, pc}
 8012266:	ab01      	add	r3, sp, #4
 8012268:	466a      	mov	r2, sp
 801226a:	f7ff ffc8 	bl	80121fe <__swhatbuf_r>
 801226e:	9900      	ldr	r1, [sp, #0]
 8012270:	4605      	mov	r5, r0
 8012272:	4630      	mov	r0, r6
 8012274:	f7fb fcc8 	bl	800dc08 <_malloc_r>
 8012278:	b948      	cbnz	r0, 801228e <__smakebuf_r+0x44>
 801227a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801227e:	059a      	lsls	r2, r3, #22
 8012280:	d4ef      	bmi.n	8012262 <__smakebuf_r+0x18>
 8012282:	f023 0303 	bic.w	r3, r3, #3
 8012286:	f043 0302 	orr.w	r3, r3, #2
 801228a:	81a3      	strh	r3, [r4, #12]
 801228c:	e7e3      	b.n	8012256 <__smakebuf_r+0xc>
 801228e:	89a3      	ldrh	r3, [r4, #12]
 8012290:	6020      	str	r0, [r4, #0]
 8012292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012296:	81a3      	strh	r3, [r4, #12]
 8012298:	9b00      	ldr	r3, [sp, #0]
 801229a:	6163      	str	r3, [r4, #20]
 801229c:	9b01      	ldr	r3, [sp, #4]
 801229e:	6120      	str	r0, [r4, #16]
 80122a0:	b15b      	cbz	r3, 80122ba <__smakebuf_r+0x70>
 80122a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122a6:	4630      	mov	r0, r6
 80122a8:	f000 f81e 	bl	80122e8 <_isatty_r>
 80122ac:	b128      	cbz	r0, 80122ba <__smakebuf_r+0x70>
 80122ae:	89a3      	ldrh	r3, [r4, #12]
 80122b0:	f023 0303 	bic.w	r3, r3, #3
 80122b4:	f043 0301 	orr.w	r3, r3, #1
 80122b8:	81a3      	strh	r3, [r4, #12]
 80122ba:	89a3      	ldrh	r3, [r4, #12]
 80122bc:	431d      	orrs	r5, r3
 80122be:	81a5      	strh	r5, [r4, #12]
 80122c0:	e7cf      	b.n	8012262 <__smakebuf_r+0x18>
	...

080122c4 <_fstat_r>:
 80122c4:	b538      	push	{r3, r4, r5, lr}
 80122c6:	4d07      	ldr	r5, [pc, #28]	; (80122e4 <_fstat_r+0x20>)
 80122c8:	2300      	movs	r3, #0
 80122ca:	4604      	mov	r4, r0
 80122cc:	4608      	mov	r0, r1
 80122ce:	4611      	mov	r1, r2
 80122d0:	602b      	str	r3, [r5, #0]
 80122d2:	f7f2 faf4 	bl	80048be <_fstat>
 80122d6:	1c43      	adds	r3, r0, #1
 80122d8:	d102      	bne.n	80122e0 <_fstat_r+0x1c>
 80122da:	682b      	ldr	r3, [r5, #0]
 80122dc:	b103      	cbz	r3, 80122e0 <_fstat_r+0x1c>
 80122de:	6023      	str	r3, [r4, #0]
 80122e0:	bd38      	pop	{r3, r4, r5, pc}
 80122e2:	bf00      	nop
 80122e4:	200005ac 	.word	0x200005ac

080122e8 <_isatty_r>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	4d06      	ldr	r5, [pc, #24]	; (8012304 <_isatty_r+0x1c>)
 80122ec:	2300      	movs	r3, #0
 80122ee:	4604      	mov	r4, r0
 80122f0:	4608      	mov	r0, r1
 80122f2:	602b      	str	r3, [r5, #0]
 80122f4:	f7f2 faf3 	bl	80048de <_isatty>
 80122f8:	1c43      	adds	r3, r0, #1
 80122fa:	d102      	bne.n	8012302 <_isatty_r+0x1a>
 80122fc:	682b      	ldr	r3, [r5, #0]
 80122fe:	b103      	cbz	r3, 8012302 <_isatty_r+0x1a>
 8012300:	6023      	str	r3, [r4, #0]
 8012302:	bd38      	pop	{r3, r4, r5, pc}
 8012304:	200005ac 	.word	0x200005ac

08012308 <_malloc_usable_size_r>:
 8012308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801230c:	1f18      	subs	r0, r3, #4
 801230e:	2b00      	cmp	r3, #0
 8012310:	bfbc      	itt	lt
 8012312:	580b      	ldrlt	r3, [r1, r0]
 8012314:	18c0      	addlt	r0, r0, r3
 8012316:	4770      	bx	lr

08012318 <_init>:
 8012318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801231a:	bf00      	nop
 801231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801231e:	bc08      	pop	{r3}
 8012320:	469e      	mov	lr, r3
 8012322:	4770      	bx	lr

08012324 <_fini>:
 8012324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012326:	bf00      	nop
 8012328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801232a:	bc08      	pop	{r3}
 801232c:	469e      	mov	lr, r3
 801232e:	4770      	bx	lr
